# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1238035325;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        String key = Message.CONTENT_TYPE__        Object value = cxfMessage.get(key)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_            camelHeaders.put(CamelTransportConstants.CONTENT_TYPE, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate header from CXF header=" + key + " value=" + value)__            }_        }_        _        _        key = Header.HEADER_LIST__        value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_              _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,message,object,value,cxf,message,get,key,if,value,null,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,camel,transport,constants,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,key,header,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1241683214;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_              _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1241770720;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_              _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1250005850;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_              _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1253539182;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1256752354;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1256824711;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1264799548;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1326207413;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1336643939;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1336668108;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1337261712;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1337266008;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1337793117;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1338993982;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1353506042;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1353510560;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1354006360;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1363695538;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1363839241;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1370010949;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1374615334;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1377830732;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1389726752;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1392400400;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1396497149;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1405374721;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1415211488;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1423054622;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1430998281;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1431112311;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1434188595;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1436889404;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1447656813;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else {_                            evalue = values.get(0)__                        }_                        camelHeaders.put(entry.getKey(), evalue)__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,evalue,values,get,0,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1448204431;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1458548517;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1460368107;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1463020934;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1468923824;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfUtils.copyHttpHeadersFromCxfToCamel(cxfMessage, camelMessage)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,utils,copy,http,headers,from,cxf,to,camel,cxf,message,camel,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1478332141;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1478546421;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1481224087;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1487145086;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1494089501;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1501095423;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1521435143;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1523968798;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1524465489;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1537085443;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1540108161;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1540108163;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1547630961;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = CastUtils.cast((Map<?, ?>)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)__        _        _        CxfHeaderHelper.copyHttpHeadersFromCxfToCamel(headerFilterStrategy, cxfMessage, camelMessage, exchange)__        _        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        _                        DataFormat dataFormat = exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)__                        if (dataFormat.equals(DataFormat.RAW)) {_                            camelHeaders.put(entry.getKey(), getContentTypeString(entry.getValue()))__                        } else {_                            String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                            LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                            camelHeaders.put(entry.getKey(), contentType)__                        }_                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        List<String> values = entry.getValue()__                        Object evalue__                        if (values.size() > 1) {_                            if (exchange.getProperty(CxfConstants.CAMEL_CXF_PROTOCOL_HEADERS_MERGED, Boolean.FALSE, Boolean.class)) {_                                StringBuilder sb = new StringBuilder()__                                for (Iterator<String> it = values.iterator()_ it.hasNext()_) {_                                    sb.append(it.next())__                                    if (it.hasNext()) {_                                        sb.append(',').append(' ')__                                    }_                                }_                                evalue = sb.toString()__                            } else {_                                evalue = values__                            }_                        } else if (values.size() == 1) {_                            evalue = values.get(0)__                        } else {_                            evalue = null__                        }_                        if (evalue != null) {_                            camelHeaders.put(entry.getKey(), evalue)__                        }_                    }_                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,cxf,header,helper,copy,http,headers,from,cxf,to,camel,header,filter,strategy,cxf,message,camel,message,exchange,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,data,format,data,format,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,raw,camel,headers,put,entry,get,key,get,content,type,string,entry,get,value,else,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,list,string,values,entry,get,value,object,evalue,if,values,size,1,if,exchange,get,property,cxf,constants,boolean,false,boolean,class,string,builder,sb,new,string,builder,for,iterator,string,it,values,iterator,it,has,next,sb,append,it,next,if,it,has,next,sb,append,append,evalue,sb,to,string,else,evalue,values,else,if,values,size,1,evalue,values,get,0,else,evalue,null,if,evalue,null,camel,headers,put,entry,get,key,evalue,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1272338250;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1273137734;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1274929495;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelHeaders.put(Exchange.AUTHENTICATION, subject)__        }_    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,headers,put,exchange,authentication,subject
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1274964974;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1277280917;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1280130252;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1281733067;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1285591075;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1288751262;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1291762322;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1293181952;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1293182064;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1296546062;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1296558142;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1297243142;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1297969159;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1298032460;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Find the multi-part Conent-Type, and replace it with " + contentType)__                        }_                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        if (LOG.isTraceEnabled()) {_                            LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                    + entry.getValue())__                        }_                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Populate header from CXF header=" + key + " value=" + value)__                }_            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1301257798;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }       _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1301319907;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1301643475;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1303053487;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1304350554;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1306415111;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1306745891;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1307014084;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1307020992;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1307685726;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1308228809;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1313413213;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1316153962;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1318768290;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1318820680;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1319187699;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1320839524;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage, Exchange exchange);1325779288;@param cxfMessage_@param camelMessage_@param exchange provides context for filtering;@SuppressWarnings("unchecked")_    protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage, Exchange exchange) {_        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()__        camelHeaders.put(CxfConstants.CAMEL_CXF_MESSAGE, cxfMessage)___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), _                                                                       entry.getValue(), exchange)) {_                    _                    _                    _                    if ("Content-Type".compareToIgnoreCase(entry.getKey()) == 0_                        && entry.getValue().get(0) != null_                        && entry.getValue().get(0).startsWith("multipart/related")) {_                        String contentType = replaceMultiPartContentType(entry.getValue().get(0))__                        LOG.trace("Find the multi-part Conent-Type, and replace it with {}", contentType)__                        camelHeaders.put(entry.getKey(), contentType)__                    } else {_                        LOG.trace("Populate header from CXF header={} value={}",_                                entry.getKey(), entry.getValue())__                        camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    }_                    _                }_            }_        }_        _        _        String key = Header.HEADER_LIST__        Object value = cxfMessage.get(key)__        if (value != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(key, value, exchange)) {_                camelHeaders.put(key, value)__                LOG.trace("Populate header from CXF header={} value={}", key, value)__            } else {_                ((List<?>)value).clear()__            }_        }_        _        _        String soapAction = (String)camelHeaders.get(SoapBindingConstants.SOAP_ACTION)__        _        if (ObjectHelper.isEmpty(soapAction) || "\"\"".equals(soapAction)) {_            camelHeaders.remove(SoapBindingConstants.SOAP_ACTION)__        }_        soapAction = (String)cxfMessage.get(SoapBindingConstants.SOAP_ACTION)__        if (soapAction != null) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(SoapBindingConstants.SOAP_ACTION, soapAction, exchange)) {_                camelHeaders.put(SoapBindingConstants.SOAP_ACTION, soapAction)__                LOG.trace("Populate header from CXF header={} value={}", SoapBindingConstants.SOAP_ACTION, soapAction)__            } _        }_        _    };param,cxf,message,param,camel,message,param,exchange,provides,context,for,filtering;suppress,warnings,unchecked,protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,exchange,exchange,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,camel,headers,put,cxf,constants,cxf,message,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,exchange,if,content,type,compare,to,ignore,case,entry,get,key,0,entry,get,value,get,0,null,entry,get,value,get,0,starts,with,multipart,related,string,content,type,replace,multi,part,content,type,entry,get,value,get,0,log,trace,find,the,multi,part,conent,type,and,replace,it,with,content,type,camel,headers,put,entry,get,key,content,type,else,log,trace,populate,header,from,cxf,header,value,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,string,key,header,object,value,cxf,message,get,key,if,value,null,if,header,filter,strategy,apply,filter,to,external,headers,key,value,exchange,camel,headers,put,key,value,log,trace,populate,header,from,cxf,header,value,key,value,else,list,value,clear,string,soap,action,string,camel,headers,get,soap,binding,constants,if,object,helper,is,empty,soap,action,equals,soap,action,camel,headers,remove,soap,binding,constants,soap,action,string,cxf,message,get,soap,binding,constants,if,soap,action,null,if,header,filter,strategy,apply,filter,to,external,headers,soap,binding,constants,soap,action,exchange,camel,headers,put,soap,binding,constants,soap,action,log,trace,populate,header,from,cxf,header,value,soap,binding,constants,soap,action
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage);1232329721;@param cxfMessage_@param camelMessage;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage) {_        _        Map<String, List<String>> cxfHeaders =_            CastUtils.cast((Map)cxfMessage.get(Message.PROTOCOL_HEADERS))__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue())) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        String key = Message.CONTENT_TYPE__        Object value = cxfMessage.get(key)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(key, value)) {_            camelHeaders.put(CamelTransportConstants.CONTENT_TYPE, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate header from CXF header=" + key + " value=" + value)__            }_        }_              _    };param,cxf,message,param,camel,message;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,map,string,list,string,cxf,headers,cast,utils,cast,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,message,object,value,cxf,message,get,key,if,value,null,header,filter,strategy,apply,filter,to,external,headers,key,value,camel,headers,put,camel,transport,constants,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage);1233111476;@param cxfMessage_@param camelMessage;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue())) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        String key = Message.CONTENT_TYPE__        Object value = cxfMessage.get(key)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(key, value)) {_            camelHeaders.put(CamelTransportConstants.CONTENT_TYPE, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate header from CXF header=" + key + " value=" + value)__            }_        }_              _    };param,cxf,message,param,camel,message;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,message,object,value,cxf,message,get,key,if,value,null,header,filter,strategy,apply,filter,to,external,headers,key,value,camel,headers,put,camel,transport,constants,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value
DefaultCxfBinding -> protected void propagateHeadersFromCxfToCamel(Message cxfMessage,             org.apache.camel.Message camelMessage);1237743794;@param cxfMessage_@param camelMessage;protected void propagateHeadersFromCxfToCamel(Message cxfMessage,_            org.apache.camel.Message camelMessage) {_        _        Map<String, List<String>> cxfHeaders = (Map)cxfMessage.get(Message.PROTOCOL_HEADERS)__        Map<String, Object> camelHeaders = camelMessage.getHeaders()___        if (cxfHeaders != null) {_            for (Map.Entry<String, List<String>> entry : cxfHeaders.entrySet()) {_                if (!headerFilterStrategy.applyFilterToExternalHeaders(entry.getKey(), entry.getValue())) {_                    camelHeaders.put(entry.getKey(), entry.getValue().get(0))__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Populate header from CXF header=" + entry.getKey() + " value="_                                + entry.getValue())__                    }_                }_            }_        }__        _        String key = Message.CONTENT_TYPE__        Object value = cxfMessage.get(key)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(key, value)) {_            camelHeaders.put(CamelTransportConstants.CONTENT_TYPE, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate header from CXF header=" + key + " value=" + value)__            }_        }_              _    };param,cxf,message,param,camel,message;protected,void,propagate,headers,from,cxf,to,camel,message,cxf,message,org,apache,camel,message,camel,message,map,string,list,string,cxf,headers,map,cxf,message,get,message,map,string,object,camel,headers,camel,message,get,headers,if,cxf,headers,null,for,map,entry,string,list,string,entry,cxf,headers,entry,set,if,header,filter,strategy,apply,filter,to,external,headers,entry,get,key,entry,get,value,camel,headers,put,entry,get,key,entry,get,value,get,0,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,entry,get,key,value,entry,get,value,string,key,message,object,value,cxf,message,get,key,if,value,null,header,filter,strategy,apply,filter,to,external,headers,key,value,camel,headers,put,camel,transport,constants,value,if,log,is,trace,enabled,log,trace,populate,header,from,cxf,header,key,value,value
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1232329721;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(DataFormat.class.getName(), DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut())__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,data,format,class,get,name,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1233111476;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(DataFormat.class.getName(), DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut())__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,data,format,class,get,name,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1237743794;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut())__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1238035325;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1241683214;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1241770720;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1250005850;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1253539182;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1256752354;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1256824711;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                        + responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1264799548;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1272338250;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1273137734;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1274929495;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1274964974;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1277280917;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1280130252;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1281733067;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1285591075;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            _            try {_                cxfMessage.getAttachments().size()__            } catch (java.util.ConcurrentModificationException e) {_                _            }_            __            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,try,cxf,message,get,attachments,size,catch,java,util,concurrent,modification,exception,e,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1288751262;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1291762322;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1293181952;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1293182064;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1296546062;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1296558142;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1297243142;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1297969159;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1298032460;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Populate exchange from CXF response message: " + cxfMessage)__        }_        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                if (LOG.isTraceEnabled()) {_                    LOG.trace("Set header = " + Client.RESPONSE_CONTEXT + " value = " _                              + responseContext)__                }_            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,if,log,is,trace,enabled,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,if,log,is,trace,enabled,log,trace,set,header,client,value,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1301257798;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1301319907;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1301643475;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1303053487;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1304350554;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        _        if (cxfMessage.getAttachments() != null) {_            cxfMessage.getAttachments().size()__           _            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,cxf,message,get,attachments,size,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1306415111;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1306745891;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1307014084;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1307020992;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1307685726;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1308228809;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1313413213;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1316153962;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1318768290;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1318820680;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1319187699;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1320839524;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1325779288;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1326207413;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1336643939;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1336668108;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1337261712;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1337266008;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1337793117;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1338993982;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1353506042;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1353510560;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1354006360;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1363695538;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1363839241;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1370010949;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1374615334;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1377830732;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1389726752;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        if (cxfMessage.getAttachments() != null && !DataFormat.POJO.equals(dataFormat)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1392400400;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1396497149;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1405374721;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1415211488;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1423054622;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1430998281;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1431112311;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1434188595;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1436889404;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null && !(DataFormat.POJO.equals(dataFormat) && isXop)) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,data,format,pojo,equals,data,format,is,xop,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1447656813;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1448204431;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1458548517;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1460368107;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1463020934;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachment(attachment.getId(), attachment.getDataHandler())__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1468923824;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1478332141;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1478546421;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1481224087;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1487145086;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1494089501;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1501095423;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1521435143;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1523968798;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1524465489;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1537085443;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1540108161;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1540108163;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfResponse(Exchange camelExchange,             org.apache.cxf.message.Exchange cxfExchange,              Map<String, Object> responseContext);1547630961;This method is called by {@link CxfProducer#process(Exchange)}.  It propagates_information from CXF Exchange to Camel Exchange.  The CXF Exchange contains a_request from a CXF server.;public void populateExchangeFromCxfResponse(Exchange camelExchange,_            org.apache.cxf.message.Exchange cxfExchange, _            Map<String, Object> responseContext) {_      _        Message cxfMessage = cxfExchange.getInMessage()__        _        if (cxfMessage == null) {_            return__        }_        _        LOG.trace("Populate exchange from CXF response message: {}", cxfMessage)___        _        camelExchange.getOut().getHeaders().putAll(camelExchange.getIn().getHeaders())__        _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        camelExchange.getOut().setBody(DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding))__        _        _        if (responseContext != null && responseContext.size() > 0) {_            if (!headerFilterStrategy.applyFilterToExternalHeaders(Client.RESPONSE_CONTEXT, _                                                                   responseContext, camelExchange)) {        _                camelExchange.getOut().setHeader(Client.RESPONSE_CONTEXT, responseContext)__                LOG.trace("Set header = {} value = {}", Client.RESPONSE_CONTEXT, responseContext)__            }_        }_        _        _        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getOut(), camelExchange)___        _        if (cxfMessage.getAttachments() != null) {_            _            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getOut().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }        _        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,propagates,information,from,cxf,exchange,to,camel,exchange,the,cxf,exchange,contains,a,request,from,a,cxf,server;public,void,populate,exchange,from,cxf,response,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,message,cxf,message,cxf,exchange,get,in,message,if,cxf,message,null,return,log,trace,populate,exchange,from,cxf,response,message,cxf,message,camel,exchange,get,out,get,headers,put,all,camel,exchange,get,in,get,headers,string,encoding,string,camel,exchange,get,property,exchange,camel,exchange,get,out,set,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,response,context,null,response,context,size,0,if,header,filter,strategy,apply,filter,to,external,headers,client,response,context,camel,exchange,camel,exchange,get,out,set,header,client,response,context,log,trace,set,header,value,client,response,context,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,out,camel,exchange,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,out,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1232329721;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo bop = cxfExchange.get(BindingOperationInfo.class)__        if (bop != null) {_            camelExchange.setProperty(BindingOperationInfo.class.getName(), bop)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set exchange property: BindingOperationInfo: " + bop)__            }__            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(bop)__                }_            }_            _            if (bop.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = bop.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    bop.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    bop.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + bop.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + bop.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_        _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn())__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(DataFormat.class.getName(), DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,bop,cxf,exchange,get,binding,operation,info,class,if,bop,null,camel,exchange,set,property,binding,operation,info,class,get,name,bop,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,bop,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,bop,if,bop,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,bop,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,bop,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,bop,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,bop,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,bop,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,data,format,class,get,name,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1233111476;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo bop = cxfExchange.get(BindingOperationInfo.class)__        if (bop != null) {_            camelExchange.setProperty(BindingOperationInfo.class.getName(), bop)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set exchange property: BindingOperationInfo: " + bop)__            }__            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(bop)__                }_            }_            _            if (bop.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = bop.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    bop.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    bop.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + bop.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + bop.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_        _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn())__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(DataFormat.class.getName(), DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,bop,cxf,exchange,get,binding,operation,info,class,if,bop,null,camel,exchange,set,property,binding,operation,info,class,get,name,bop,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,bop,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,bop,if,bop,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,bop,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,bop,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,bop,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,bop,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,bop,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,data,format,class,get,name,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1237743794;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo bop = cxfExchange.get(BindingOperationInfo.class)__        if (bop != null) {_            camelExchange.setProperty(BindingOperationInfo.class.getName(), bop)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set exchange property: BindingOperationInfo: " + bop)__            }__            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(bop)__                }_            }_            _            if (bop.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = bop.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    bop.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    bop.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + bop.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + bop.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_        _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn())__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,bop,cxf,exchange,get,binding,operation,info,class,if,bop,null,camel,exchange,set,property,binding,operation,info,class,get,name,bop,if,log,is,trace,enabled,log,trace,set,exchange,property,binding,operation,info,bop,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,bop,if,bop,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,bop,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,bop,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,bop,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,bop,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,bop,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1238035325;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1241683214;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1241770720;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1250005850;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1253539182;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1256752354;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1256824711;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1264799548;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1272338250;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1273137734;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1274929495;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1274964974;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1277280917;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1280130252;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1281733067;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1285591075;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1288751262;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1291762322;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1293181952;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1293182064;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1296546062;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1296558142;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1297243142;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1297969159;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1298032460;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAMESPACE + "=" _                         + boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: " + CxfConstants.OPERATION_NAME + "=" _                        + method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        if (LOG.isTraceEnabled()) {_            LOG.trace("Set exchange MEP: " + mep)__        }__        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Populate context from CXF message " + Client.REQUEST_CONTEXT _                        + " value=" + value)__            }_        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,if,log,is,trace,enabled,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,if,log,is,trace,enabled,log,trace,populate,context,from,cxf,message,client,value,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1301257798;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1301319907;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1301643475;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1303053487;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1304350554;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1306415111;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1306745891;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1307014084;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1307020992;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1307685726;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1308228809;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1313413213;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1316153962;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1318768290;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1318820680;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1319187699;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1320839524;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = (Service)cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1325779288;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1326207413;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1336643939;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1336668108;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service_                    .get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1337261712;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1337266008;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1337793117;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1338993982;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1353506042;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1353510560;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1354006360;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1363695538;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1363839241;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1370010949;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1374615334;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1377830732;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                @SuppressWarnings("deprecation")_                org.apache.cxf.frontend.MethodDispatcher md _                    = (org.apache.cxf.frontend.MethodDispatcher)service_                        .get(org.apache.cxf.frontend.MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,suppress,warnings,deprecation,org,apache,cxf,frontend,method,dispatcher,md,org,apache,cxf,frontend,method,dispatcher,service,get,org,apache,cxf,frontend,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1389726752;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1392400400;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1396497149;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1405374721;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1415211488;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1423054622;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1430998281;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1431112311;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1434188595;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1436889404;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1447656813;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1448204431;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1458548517;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1460368107;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class))__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1463020934;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachment(attachment.getId(), attachment.getDataHandler())__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,attachment,get,id,attachment,get,data,handler
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1468923824;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1478332141;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1478546421;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1481224087;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null && securityContext.getUserPrincipal() != null) {_            Subject subject = new Subject()__            subject.getPrincipals().add(securityContext.getUserPrincipal())__            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,security,context,get,user,principal,null,subject,subject,new,subject,subject,get,principals,add,security,context,get,user,principal,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1487145086;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1494089501;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1501095423;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1521435143;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1523968798;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1524465489;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1537085443;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1540108161;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1540108163;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,             Exchange camelExchange);1547630961;This method is called by {@link CxfConsumer}.;public void populateExchangeFromCxfRequest(org.apache.cxf.message.Exchange cxfExchange,_            Exchange camelExchange) {_        _        Method method = null__        QName operationName = null__        ExchangePattern mep = ExchangePattern.InOut__        _        _        BindingOperationInfo boi = camelExchange.getProperty(BindingOperationInfo.class.getName(), _                                                             BindingOperationInfo.class)__        if (boi != null) {_            Service service = cxfExchange.get(Service.class)_ _            if (service != null) {_                MethodDispatcher md = (MethodDispatcher)service.get(MethodDispatcher.class.getName())__                if (md != null) {_                    method = md.getMethod(boi)__                }_            }_            _            if (boi.getOperationInfo().isOneWay()) {_                mep = ExchangePattern.InOnly__            }_                _            operationName = boi.getName()__        }_        _        _        if (operationName != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, _                    boi.getName().getNamespaceURI())__            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, _                    boi.getName().getLocalPart())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAMESPACE, boi.getName().getNamespaceURI())__                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, boi.getName().getLocalPart())__            }_        } else if (method != null) {_            camelExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, method.getName())__            if (LOG.isTraceEnabled()) {_                LOG.trace("Set IN header: {}={}",_                        CxfConstants.OPERATION_NAME, method.getName())__            }_        }_                _        _        camelExchange.setPattern(mep)__        LOG.trace("Set exchange MEP: {}", mep)___        _        Message cxfMessage = cxfExchange.getInMessage()__        propagateHeadersFromCxfToCamel(cxfMessage, camelExchange.getIn(), camelExchange)__        _        _        SecurityContext securityContext = cxfMessage.get(SecurityContext.class)__        if (securityContext instanceof LoginSecurityContext_            && ((LoginSecurityContext)securityContext).getSubject() != null) {_            camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, _                                                   ((LoginSecurityContext)securityContext).getSubject())__        } else if (securityContext != null) {_            Principal user = securityContext.getUserPrincipal()__            if (user != null) {_                Subject subject = new Subject()__                subject.getPrincipals().add(user)__                camelExchange.getIn().getHeaders().put(Exchange.AUTHENTICATION, subject)__            }_        }_        _        _        _        _        _        _        _        Object value = cxfMessage.get(Client.REQUEST_CONTEXT)__        if (value != null && !headerFilterStrategy.applyFilterToExternalHeaders(_                Client.REQUEST_CONTEXT, value, camelExchange)) {_            camelExchange.getIn().setHeader(Client.REQUEST_CONTEXT, value)__            LOG.trace("Populate context from CXF message {} value={}", Client.REQUEST_CONTEXT, value)__        }_        _        _        setCharsetWithContentType(camelExchange)__           _        _        String encoding = (String)camelExchange.getProperty(Exchange.CHARSET_NAME)__        Object body = DefaultCxfBinding.getContentFromCxf(cxfMessage, _                camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class), encoding)__        if (body != null) {_            camelExchange.getIn().setBody(body)__        }  _        _        _        if (cxfMessage.getAttachments() != null _            && !camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class).equals(DataFormat.POJO)) {_            for (Attachment attachment : cxfMessage.getAttachments()) {_                camelExchange.getIn().addAttachmentObject(attachment.getId(), createCamelAttachment(attachment))__            }_        }_    };this,method,is,called,by,link,cxf,consumer;public,void,populate,exchange,from,cxf,request,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,method,method,null,qname,operation,name,null,exchange,pattern,mep,exchange,pattern,in,out,binding,operation,info,boi,camel,exchange,get,property,binding,operation,info,class,get,name,binding,operation,info,class,if,boi,null,service,service,cxf,exchange,get,service,class,if,service,null,method,dispatcher,md,method,dispatcher,service,get,method,dispatcher,class,get,name,if,md,null,method,md,get,method,boi,if,boi,get,operation,info,is,one,way,mep,exchange,pattern,in,only,operation,name,boi,get,name,if,operation,name,null,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,namespace,uri,camel,exchange,get,in,set,header,cxf,constants,boi,get,name,get,local,part,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,boi,get,name,get,namespace,uri,log,trace,set,in,header,cxf,constants,boi,get,name,get,local,part,else,if,method,null,camel,exchange,get,in,set,header,cxf,constants,method,get,name,if,log,is,trace,enabled,log,trace,set,in,header,cxf,constants,method,get,name,camel,exchange,set,pattern,mep,log,trace,set,exchange,mep,mep,message,cxf,message,cxf,exchange,get,in,message,propagate,headers,from,cxf,to,camel,cxf,message,camel,exchange,get,in,camel,exchange,security,context,security,context,cxf,message,get,security,context,class,if,security,context,instanceof,login,security,context,login,security,context,security,context,get,subject,null,camel,exchange,get,in,get,headers,put,exchange,authentication,login,security,context,security,context,get,subject,else,if,security,context,null,principal,user,security,context,get,user,principal,if,user,null,subject,subject,new,subject,subject,get,principals,add,user,camel,exchange,get,in,get,headers,put,exchange,authentication,subject,object,value,cxf,message,get,client,if,value,null,header,filter,strategy,apply,filter,to,external,headers,client,value,camel,exchange,camel,exchange,get,in,set,header,client,value,log,trace,populate,context,from,cxf,message,value,client,value,set,charset,with,content,type,camel,exchange,string,encoding,string,camel,exchange,get,property,exchange,object,body,default,cxf,binding,get,content,from,cxf,cxf,message,camel,exchange,get,property,cxf,constants,data,format,class,encoding,if,body,null,camel,exchange,get,in,set,body,body,if,cxf,message,get,attachments,null,camel,exchange,get,property,cxf,constants,data,format,class,equals,data,format,pojo,for,attachment,attachment,cxf,message,get,attachments,camel,exchange,get,in,add,attachment,object,attachment,get,id,create,camel,attachment,attachment
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1232329721;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__      _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(DataFormat.class.getName(), _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,data,format,class,get,name,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1233111476;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__      _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(DataFormat.class.getName(), _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,data,format,class,get,name,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1237743794;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__      _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1238035325;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__      _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1241683214;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)_            _        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1241770720;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)_            _        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1250005850;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)_            _        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1253539182;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1256752354;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1256824711;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1264799548;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1272338250;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.put(List.class, payload.getBody())__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,put,list,class,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1273137734;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1274929495;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1274964974;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        _        if (dataFormat != DataFormat.POJO) {_            _            outMessage.putAll(responseContext)__        }_        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,if,data,format,data,format,pojo,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1277280917;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1280130252;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1281733067;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1285591075;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1288751262;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1291762322;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1293181952;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1293182064;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1296546062;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1296558142;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1297243142;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1297969159;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1298032460;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        if (LOG.isTraceEnabled()) {_            LOG.trace("Set out response context = " + responseContext)__        }_        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    if (LOG.isTraceEnabled()) {_                        LOG.trace("Set Out CXF message content = " + resList)__                    }_                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,if,log,is,trace,enabled,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,if,log,is,trace,enabled,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1301257798;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1301319907;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1301643475;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1303053487;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1304350554;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1306415111;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        _        Map<String, Object> camelHeaders = camelExchange.getOut().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(camelExchange.getOut(), dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,map,string,object,camel,headers,camel,exchange,get,out,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,camel,exchange,get,out,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1306745891;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1307014084;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1307020992;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1307685726;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                if (outBody instanceof MessageContentsList) {_                    resList = (MessageContentsList)outBody__                } else if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,message,contents,list,res,list,message,contents,list,out,body,else,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1308228809;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1313413213;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1316153962;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1318768290;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBody()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1318820680;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1319187699;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1320839524;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1325779288;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1326207413;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1336643939;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1336668108;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1337261712;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1337266008;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1337793117;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        }         _        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1338993982;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            response = camelExchange.getOut()__        } else {_            response = camelExchange.getIn()__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,response,camel,exchange,get,out,else,response,camel,exchange,get,in,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1353506042;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.debug("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.debug("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.debug("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,debug,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,debug,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,debug,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1353510560;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1354006360;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1363695538;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1363839241;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1370010949;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1374615334;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1377830732;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1389726752;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1392400400;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1396497149;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1405374721;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1415211488;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1423054622;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1430998281;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1431112311;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1434188595;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1436889404;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        if (!DataFormat.POJO.equals(dataFormat)) {_            Set<Attachment> attachments = null__            boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__            for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)_ _                attachments.add(attachment)__            }_            _            if (attachments != null) {_                outMessage.setAttachments(attachments)__            }_        }_       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,if,data,format,pojo,equals,data,format,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1447656813;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1448204431;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1458548517;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1460368107;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1463020934;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getOut().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,out,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1468923824;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1478332141;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1478546421;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1481224087;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1487145086;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1494089501;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1501095423;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1521435143;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<String, Object>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,string,object,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1523968798;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1524465489;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1537085443;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1540108161;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1540108163;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfResponseFromExchange(Exchange camelExchange,              org.apache.cxf.message.Exchange cxfExchange);1547630961;This method is called by {@link CxfConsumer} to populate a CXF response exchange_from a Camel exchange.;public void populateCxfResponseFromExchange(Exchange camelExchange, _            org.apache.cxf.message.Exchange cxfExchange) {_        _        if (cxfExchange.isOneWay()) {_            return__        }_        _        _        Map<String, Object> responseContext = new HashMap<>()__        _        org.apache.camel.Message response__        if (camelExchange.getPattern().isOutCapable()) {_            if (camelExchange.hasOut()) {_                response = camelExchange.getOut()__                LOG.trace("Get the response from the out message")__            } else { _                response = camelExchange.getIn()__                LOG.trace("Get the response from the in message as a fallback")__            }_        } else {_            response = camelExchange.getIn()__            LOG.trace("Get the response from the in message")__        }_        _        _        Map<String, Object> camelHeaders = response.getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders, _                responseContext, Client.RESPONSE_CONTEXT)__        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                responseContext)__        _        Endpoint ep = cxfExchange.get(Endpoint.class)__        Message outMessage = ep.getBinding().createMessage()__        if (cxfExchange.getInMessage() instanceof SoapMessage) { _            SoapVersion soapVersion = ((SoapMessage)cxfExchange.getInMessage()).getVersion()__            ((SoapMessage)outMessage).setVersion(soapVersion)__        }_        _        cxfExchange.setOutMessage(outMessage)_       __        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                DataFormat.class)__        _        _        responseContext.remove(Message.REQUESTOR_ROLE)__        _        outMessage.putAll(responseContext)__        _        _        outMessage.put(Client.RESPONSE_CONTEXT, responseContext)_      _        _        LOG.trace("Set out response context = {}", responseContext)__        _        _        Object outBody = DefaultCxfBinding.getBodyFromCamel(response, dataFormat)__        _        if (outBody != null) {_            if (dataFormat == DataFormat.PAYLOAD) {_                CxfPayload<?> payload = (CxfPayload<?>)outBody__                outMessage.setContent(List.class, getResponsePayloadList(cxfExchange, payload.getBodySources()))__                outMessage.put(Header.HEADER_LIST, payload.getHeaders())__            } else {_                if (responseContext.get(Header.HEADER_LIST) != null) {_                    outMessage.put(Header.HEADER_LIST, responseContext.get(Header.HEADER_LIST))__                }__                MessageContentsList resList = null__                _                if (outBody instanceof List) {_                    resList = new MessageContentsList((List<?>)outBody)__                } else if (outBody.getClass().isArray()) {_                    resList = new MessageContentsList((Object[])outBody)__                } else {_                    resList = new MessageContentsList(outBody)__                }__                if (resList != null) {_                    outMessage.setContent(List.class, resList)__                    LOG.trace("Set Out CXF message content = {}", resList)__                }_            }_        } else if (!cxfExchange.isOneWay() _            && cxfExchange.getInMessage() != null_            && MessageUtils.isTrue(cxfExchange.getInMessage().getContextualProperty("jaxws.provider.interpretNullAsOneway"))) { _            _            changeToOneway(cxfExchange)__            return__        }_        _        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getOut().getAttachmentObjects().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__            org.apache.camel.Attachment camelAttachment = entry.getValue()__            attachment.setDataHandler(camelAttachment.getDataHandler())__            for (String name : camelAttachment.getHeaderNames()) {_                attachment.setHeader(name, camelAttachment.getHeader(name))__            }_            attachment.setXOP(isXop)__            attachments.add(attachment)__        }__        if (attachments != null) {_            outMessage.setAttachments(attachments)__        }_        _       _        BindingOperationInfo boi = cxfExchange.get(BindingOperationInfo.class)__        if (boi != null) {_            cxfExchange.put(BindingMessageInfo.class, boi.getOutput())__        }_        _    };this,method,is,called,by,link,cxf,consumer,to,populate,a,cxf,response,exchange,from,a,camel,exchange;public,void,populate,cxf,response,from,exchange,exchange,camel,exchange,org,apache,cxf,message,exchange,cxf,exchange,if,cxf,exchange,is,one,way,return,map,string,object,response,context,new,hash,map,org,apache,camel,message,response,if,camel,exchange,get,pattern,is,out,capable,if,camel,exchange,has,out,response,camel,exchange,get,out,log,trace,get,the,response,from,the,out,message,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,as,a,fallback,else,response,camel,exchange,get,in,log,trace,get,the,response,from,the,in,message,map,string,object,camel,headers,response,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,response,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,response,context,endpoint,ep,cxf,exchange,get,endpoint,class,message,out,message,ep,get,binding,create,message,if,cxf,exchange,get,in,message,instanceof,soap,message,soap,version,soap,version,soap,message,cxf,exchange,get,in,message,get,version,soap,message,out,message,set,version,soap,version,cxf,exchange,set,out,message,out,message,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,response,context,remove,message,out,message,put,all,response,context,out,message,put,client,response,context,log,trace,set,out,response,context,response,context,object,out,body,default,cxf,binding,get,body,from,camel,response,data,format,if,out,body,null,if,data,format,data,format,payload,cxf,payload,payload,cxf,payload,out,body,out,message,set,content,list,class,get,response,payload,list,cxf,exchange,payload,get,body,sources,out,message,put,header,payload,get,headers,else,if,response,context,get,header,null,out,message,put,header,response,context,get,header,message,contents,list,res,list,null,if,out,body,instanceof,list,res,list,new,message,contents,list,list,out,body,else,if,out,body,get,class,is,array,res,list,new,message,contents,list,object,out,body,else,res,list,new,message,contents,list,out,body,if,res,list,null,out,message,set,content,list,class,res,list,log,trace,set,out,cxf,message,content,res,list,else,if,cxf,exchange,is,one,way,cxf,exchange,get,in,message,null,message,utils,is,true,cxf,exchange,get,in,message,get,contextual,property,jaxws,provider,interpret,null,as,oneway,change,to,oneway,cxf,exchange,return,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,out,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,out,message,set,attachments,attachments,binding,operation,info,boi,cxf,exchange,get,binding,operation,info,class,if,boi,null,cxf,exchange,put,binding,message,info,class,boi,get,output
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1232329721;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1233111476;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1237743794;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1238035325;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1241683214;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1241770720;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1250005850;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1253539182;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1256752354;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.ATTACHMENTS_PROP_KEY, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1256824711;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1264799548;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1272338250;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1273137734;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1274929495;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1274964974;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1277280917;<p>_This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message._</p>;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };p,this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message,p;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1280130252;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(true)_ _            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,true,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1281733067;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1285591075;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1288751262;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1291762322;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1293181952;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1293182064;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1296546062;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1296558142;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1297243142;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1297969159;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1298032460;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            if (LOG.isTraceEnabled()) {_                LOG.trace("Client address is overridden by header '" + Exchange.DESTINATION_OVERRIDE_URL_                          + "' to value '" + overrideAddress + "'")__            }_            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,if,log,is,trace,enabled,log,trace,client,address,is,overridden,by,header,exchange,to,value,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1301257798;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1301319907;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1301643475;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1303053487;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1304350554;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1306415111;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1306745891;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1307014084;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1307020992;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1307685726;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1308228809;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1313413213;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1316153962;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1318768290;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1318820680;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1319187699;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1320839524;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1325779288;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1326207413;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1336643939;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1336668108;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1337261712;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1337266008;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1337793117;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1338993982;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1353506042;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1353510560;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1354006360;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1363695538;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1363839241;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1370010949;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1374615334;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1377830732;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1389726752;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1392400400;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1396497149;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_            if (attachments == null) {_                attachments = new HashSet<Attachment>()__            }_            AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__            attachment.setXOP(isXop)__            attachments.add(attachment)__        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1405374721;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1415211488;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1423054622;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1430998281;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1431112311;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1434188595;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1436889404;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1447656813;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1448204431;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1458548517;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1460368107;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1463020934;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, DataHandler> entry : camelExchange.getIn().getAttachments().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey(), entry.getValue())__                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,data,handler,entry,camel,exchange,get,in,get,attachments,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,entry,get,value,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1468923824;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1478332141;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1478546421;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1481224087;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1487145086;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1494089501;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1501095423;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1521435143;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<Attachment>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1523968798;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1524465489;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1537085443;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1540108161;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1540108163;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> public void populateCxfRequestFromExchange(             org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,             Map<String, Object> requestContext);1547630961;This method is called by {@link CxfProducer#process(Exchange)}. It populates_the CXF exchange and invocation context (i.e. request/response) contexts, it_but does not create and populate a CXF message as a ClientImpl's invoke method_will create a new CXF Message.  That method will put all properties from the_CXF exchange and request context to the CXF message.;public void populateCxfRequestFromExchange(_            org.apache.cxf.message.Exchange cxfExchange, Exchange camelExchange,_            Map<String, Object> requestContext) {_               _        _        Map<String, Object> camelHeaders = camelExchange.getIn().getHeaders()__        extractInvocationContextFromCamel(camelExchange, camelHeaders,_                requestContext, Client.REQUEST_CONTEXT)__                _        _        propagateHeadersFromCamelToCxf(camelExchange, camelHeaders, cxfExchange, _                requestContext)__        _        String overrideAddress = camelExchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class)___        if (overrideAddress != null) {_            LOG.trace("Client address is overridden by header '{}' to value '{}'",_                Exchange.DESTINATION_OVERRIDE_URL, overrideAddress)__            requestContext.put(Message.ENDPOINT_ADDRESS, overrideAddress)__        }_        _        _        Set<Attachment> attachments = null__        boolean isXop = Boolean.valueOf(camelExchange.getProperty(Message.MTOM_ENABLED, String.class))__        DataFormat dataFormat = camelExchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY,  _                                                          DataFormat.class)__        _        _        if (!DataFormat.CXF_MESSAGE.equals(dataFormat)) {_            for (Map.Entry<String, org.apache.camel.Attachment> entry : camelExchange.getIn().getAttachmentObjects().entrySet()) {_                if (attachments == null) {_                    attachments = new HashSet<>()__                }_                AttachmentImpl attachment = new AttachmentImpl(entry.getKey())__                org.apache.camel.Attachment camelAttachment = entry.getValue()__                attachment.setDataHandler(camelAttachment.getDataHandler())__                for (String name : camelAttachment.getHeaderNames()) {_                    attachment.setHeader(name, camelAttachment.getHeader(name))__                }_                attachment.setXOP(isXop)__                attachments.add(attachment)__            }_        }_        _        if (attachments != null) {_            requestContext.put(CxfConstants.CAMEL_CXF_ATTACHMENTS, attachments)__        }_    };this,method,is,called,by,link,cxf,producer,process,exchange,it,populates,the,cxf,exchange,and,invocation,context,i,e,request,response,contexts,it,but,does,not,create,and,populate,a,cxf,message,as,a,client,impl,s,invoke,method,will,create,a,new,cxf,message,that,method,will,put,all,properties,from,the,cxf,exchange,and,request,context,to,the,cxf,message;public,void,populate,cxf,request,from,exchange,org,apache,cxf,message,exchange,cxf,exchange,exchange,camel,exchange,map,string,object,request,context,map,string,object,camel,headers,camel,exchange,get,in,get,headers,extract,invocation,context,from,camel,camel,exchange,camel,headers,request,context,client,propagate,headers,from,camel,to,cxf,camel,exchange,camel,headers,cxf,exchange,request,context,string,override,address,camel,exchange,get,in,get,header,exchange,string,class,if,override,address,null,log,trace,client,address,is,overridden,by,header,to,value,exchange,override,address,request,context,put,message,override,address,set,attachment,attachments,null,boolean,is,xop,boolean,value,of,camel,exchange,get,property,message,string,class,data,format,data,format,camel,exchange,get,property,cxf,constants,data,format,class,if,data,format,equals,data,format,for,map,entry,string,org,apache,camel,attachment,entry,camel,exchange,get,in,get,attachment,objects,entry,set,if,attachments,null,attachments,new,hash,set,attachment,impl,attachment,new,attachment,impl,entry,get,key,org,apache,camel,attachment,camel,attachment,entry,get,value,attachment,set,data,handler,camel,attachment,get,data,handler,for,string,name,camel,attachment,get,header,names,attachment,set,header,name,camel,attachment,get,header,name,attachment,set,xop,is,xop,attachments,add,attachment,if,attachments,null,request,context,put,cxf,constants,attachments
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1232329721;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1233111476;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1237743794;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1238035325;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1241683214;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1241770720;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1250005850;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1253539182;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1256752354;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1256824711;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1264799548;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1272338250;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1273137734;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1274929495;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1274964974;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1277280917;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1280130252;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1281733067;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1285591075;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1288751262;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1291762322;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1293181952;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1293182064;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1296546062;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1296558142;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1297243142;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1297969159;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1298032460;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from header context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate " + contextKey + " from exchange property context = " _                        + ((context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context))__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,header,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,context,key,from,exchange,property,context,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1301257798;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1301319907;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1301643475;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1303053487;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1304350554;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1306415111;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1306745891;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1307014084;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1307020992;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1307685726;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1308228809;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1313413213;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1316153962;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1318768290;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1318820680;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1319187699;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1320839524;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1325779288;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map context = (Map)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,context,map,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1326207413;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1336643939;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1336668108;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1337261712;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1337266008;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1337793117;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1338993982;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1353506042;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1353510560;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1354006360;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1363695538;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1363839241;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1370010949;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1374615334;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1377830732;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1389726752;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1392400400;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1396497149;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1405374721;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1415211488;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1423054622;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1430998281;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1431112311;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1434188595;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1436889404;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1447656813;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1448204431;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1458548517;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1460368107;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1463020934;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1468923824;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1478332141;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1478546421;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1481224087;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1487145086;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1494089501;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1501095423;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1521435143;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1523968798;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1524465489;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1537085443;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1540108161;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1540108163;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
DefaultCxfBinding -> @SuppressWarnings("unchecked")     protected void extractInvocationContextFromCamel(Exchange camelExchange,             Map<String, Object> camelHeaders, Map<String, Object> cxfContext,             String contextKey);1547630961;@param camelExchange_@param cxfContext Request or Response context_@param camelHeaders_@param contextKey;@SuppressWarnings("unchecked")_    protected void extractInvocationContextFromCamel(Exchange camelExchange,_            Map<String, Object> camelHeaders, Map<String, Object> cxfContext,_            String contextKey) {_        _        _        Map<String, ?> context = (Map<String, ?>)camelHeaders.get(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from header context = {}", _                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        context = (Map<String, ?>)camelExchange.getProperty(contextKey)__        if (context != null) {_            cxfContext.putAll(context)__            if (LOG.isTraceEnabled()) {_                LOG.trace("Propagate {} from exchange property context = {}",_                        contextKey, (context instanceof WrappedMessageContext) _                                ? ((WrappedMessageContext)context).getWrappedMap() _                                        : context)__            }_        }_        _        _        if (camelExchange.getProperties() != null) {_            cxfContext.putAll(camelExchange.getProperties())__        }_        _        camelExchange.setProperty(contextKey, cxfContext)__    };param,camel,exchange,param,cxf,context,request,or,response,context,param,camel,headers,param,context,key;suppress,warnings,unchecked,protected,void,extract,invocation,context,from,camel,exchange,camel,exchange,map,string,object,camel,headers,map,string,object,cxf,context,string,context,key,map,string,context,map,string,camel,headers,get,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,header,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,context,map,string,camel,exchange,get,property,context,key,if,context,null,cxf,context,put,all,context,if,log,is,trace,enabled,log,trace,propagate,from,exchange,property,context,context,key,context,instanceof,wrapped,message,context,wrapped,message,context,context,get,wrapped,map,context,if,camel,exchange,get,properties,null,cxf,context,put,all,camel,exchange,get,properties,camel,exchange,set,property,context,key,cxf,context
