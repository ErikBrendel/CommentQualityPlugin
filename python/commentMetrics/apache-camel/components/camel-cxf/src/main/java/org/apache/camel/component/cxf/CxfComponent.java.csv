commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages  * into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.  */ ;/**  * This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages  * into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.  */ public void setAllowStreaming(Boolean allowStreaming) {     this.allowStreaming = allowStreaming. }
false;public;0;3;;public Boolean isAllowStreaming() {     return allowStreaming. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
true;protected;3;59;/**  * Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having  * URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format  * cxf://<i>transportAddress</i>.  */ ;/**  * Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having  * URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format  * cxf://<i>transportAddress</i>.  */ @Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     CxfEndpoint result.     Object value = parameters.remove("setDefaultBus").     if (value != null) {         log.warn("The option setDefaultBus is @deprecated, use name defaultBus instead").         if (!parameters.containsKey("defaultBus")) {             parameters.put("defaultBus", value).         }     }     if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {         parameters.put("allowStreaming", Boolean.toString(allowStreaming)).     }     if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {         // Get the bean from the Spring context         String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length()).         if (beanId.startsWith("//")) {             beanId = beanId.substring(2).         }         result = createCxfSpringEndpoint(beanId).         // need to check the CamelContext value         if (getCamelContext().equals(result.getCamelContext())) {             result.setCamelContext(getCamelContext()).         }         result.setBeanId(beanId).     } else {         // endpoint URI does not specify a bean         result = createCxfEndpoint(remaining).     }     if (result.getCamelContext() == null) {         result.setCamelContext(getCamelContext()).     }     setEndpointHeaderFilterStrategy(result).     setProperties(result, parameters).     // extract the properties.xxx and set them as properties     Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.").     if (properties != null) {         result.setProperties(properties).     }     if (result.getProperties() != null) {         // set the properties of MTOM         result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED))).     }     // use global ssl config if set     if (result.getSslContextParameters() == null) {         result.setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return result. }
false;protected;1;3;;protected CxfEndpoint createCxfSpringEndpoint(String beanId) throws Exception {     return CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class). }
false;protected;1;3;;protected CxfEndpoint createCxfEndpoint(String remaining) {     return new CxfEndpoint(remaining, this). }
false;protected;4;5;;@Override protected void afterConfiguration(String uri, String remaining, Endpoint endpoint, Map<String, Object> parameters) throws Exception {     CxfEndpoint cxfEndpoint = (CxfEndpoint) endpoint.     cxfEndpoint.updateEndpointUri(uri). }
