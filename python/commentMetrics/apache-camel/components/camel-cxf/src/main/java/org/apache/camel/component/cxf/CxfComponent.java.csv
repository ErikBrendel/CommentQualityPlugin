# id;timestamp;commentText;codeText;commentWords;codeWords
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1434655277;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1445352547;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1464443754;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1479916234;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1482322625;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1491919259;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1491919462;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1491919462;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1491919462;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1540108158;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1540108160;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1540108163;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1540108165;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1547241305;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> public void setAllowStreaming(Boolean allowStreaming);1548332772;This option controls whether the CXF component, when running in PAYLOAD mode, will DOM parse the incoming messages_into DOM Elements or keep the payload as a javax.xml.transform.Source object that would allow streaming in some cases.;public void setAllowStreaming(Boolean allowStreaming) {_        this.allowStreaming = allowStreaming__    };this,option,controls,whether,the,cxf,component,when,running,in,payload,mode,will,dom,parse,the,incoming,messages,into,dom,elements,or,keep,the,payload,as,a,javax,xml,transform,source,object,that,would,allow,streaming,in,some,cases;public,void,set,allow,streaming,boolean,allow,streaming,this,allow,streaming,allow,streaming
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1308719219;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null___        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            Object bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, Object.class)__            if (bean instanceof CxfEndpointBean) {_                CxfEndpointBean configBean = (CxfEndpointBean) bean__                result = new CxfSpringEndpoint(this, configBean)___                _                _                _                _                if (configBean.getProperties() != null) {_                    Map<String, Object> copy = new HashMap<String, Object>()__                    copy.putAll(configBean.getProperties())__                    setProperties(result, copy)__                    result.setMtomEnabled(Boolean.valueOf((String) copy.get(Message.MTOM_ENABLED)))__                }_            } else if (bean instanceof CxfBlueprintEndpoint) {_                result = (CxfBlueprintEndpoint) bean__            }_        } else {_            _            result = new CxfEndpoint(remaining, this)__        }__        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__            _            result.setMtomEnabled(Boolean.valueOf((String) properties.get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,object,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,object,class,if,bean,instanceof,cxf,endpoint,bean,cxf,endpoint,bean,config,bean,cxf,endpoint,bean,bean,result,new,cxf,spring,endpoint,this,config,bean,if,config,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,config,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,if,bean,instanceof,cxf,blueprint,endpoint,result,cxf,blueprint,endpoint,bean,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,result,set,mtom,enabled,boolean,value,of,string,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1308788876;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null___        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1310524389;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null___        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (result.getCamelContext() == null) {_                result.setCamelContext(getCamelContext())__            }_        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1318861322;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null__        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (result.getCamelContext() == null) {_                result.setCamelContext(getCamelContext())__            }_        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1319091364;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null__        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (result.getCamelContext() == null) {_                result.setCamelContext(getCamelContext())__            } _            if (!result.getCamelContext().equals(getCamelContext()) || parameters.size() > 0) {_                _                result = result.copy()__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,if,result,get,camel,context,equals,get,camel,context,parameters,size,0,result,result,copy,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1319114995;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null__        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1405374721;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null__        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1416998514;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result = null__        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1434655277;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }_        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, CxfEndpoint.class)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,class,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,new,cxf,endpoint,remaining,this,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1445352547;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }_        _        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }_        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1464443754;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1479916234;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1482322625;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1491919259;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(Optional.ofNullable(CamelContextHelper.findByType(getCamelContext(), GlobalSSLContextParametersSupplier.class)).map(Supplier::get).orElse(null))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,optional,of,nullable,camel,context,helper,find,by,type,get,camel,context,global,sslcontext,parameters,supplier,class,map,supplier,get,or,else,null,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1491919462;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(getGlobalSSLContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,get,global,sslcontext,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1491919462;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(getGlobalSSLContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,get,global,sslcontext,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1491919462;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1540108158;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1540108160;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1540108163;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            LOG.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1540108165;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            log.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1547241305;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            log.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception;1548332772;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {__        CxfEndpoint result___        Object value = parameters.remove("setDefaultBus")__        if (value != null) {_            log.warn("The option setDefaultBus is @deprecated, use name defaultBus instead")__            if (!parameters.containsKey("defaultBus")) {_                parameters.put("defaultBus", value)__            }_        }__        if (allowStreaming != null && !parameters.containsKey("allowStreaming")) {_            parameters.put("allowStreaming", Boolean.toString(allowStreaming))__        }__        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            result = createCxfSpringEndpoint(beanId)__            _            if (getCamelContext().equals(result.getCamelContext())) {_                result.setCamelContext(getCamelContext())__            }_            result.setBeanId(beanId)___        } else {_            _            result = createCxfEndpoint(remaining)__        }__        if (result.getCamelContext() == null) {_            result.setCamelContext(getCamelContext())__        }_        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }_        if (result.getProperties() != null) {_            _            result.setMtomEnabled(Boolean.valueOf((String) result.getProperties().get(Message.MTOM_ENABLED)))__        }__        _        if (result.getSslContextParameters() == null) {_            result.setSslContextParameters(retrieveGlobalSslContextParameters())__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,object,value,parameters,remove,set,default,bus,if,value,null,log,warn,the,option,set,default,bus,is,deprecated,use,name,default,bus,instead,if,parameters,contains,key,default,bus,parameters,put,default,bus,value,if,allow,streaming,null,parameters,contains,key,allow,streaming,parameters,put,allow,streaming,boolean,to,string,allow,streaming,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,result,create,cxf,spring,endpoint,bean,id,if,get,camel,context,equals,result,get,camel,context,result,set,camel,context,get,camel,context,result,set,bean,id,bean,id,else,result,create,cxf,endpoint,remaining,if,result,get,camel,context,null,result,set,camel,context,get,camel,context,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,if,result,get,properties,null,result,set,mtom,enabled,boolean,value,of,string,result,get,properties,get,message,if,result,get,ssl,context,parameters,null,result,set,ssl,context,parameters,retrieve,global,ssl,context,parameters,return,result
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1491919462;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1540108158;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1540108160;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1540108163;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1540108165;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1547241305;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters);1548332772;Enable usage of global SSL context parameters.;@Override_    public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {_        this.useGlobalSslContextParameters = useGlobalSslContextParameters__    };enable,usage,of,global,ssl,context,parameters;override,public,void,set,use,global,ssl,context,parameters,boolean,use,global,ssl,context,parameters,this,use,global,ssl,context,parameters,use,global,ssl,context,parameters
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1232329721;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, beanId, bean)__            _        } else {_            _            result = new CxfEndpoint(this, remaining)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,id,bean,else,result,new,cxf,endpoint,this,remaining,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1232782057;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, beanId, bean)__            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,id,bean,else,result,new,cxf,endpoint,remaining,this,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1233111476;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,else,result,new,cxf,endpoint,remaining,this,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1233174028;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,else,result,new,cxf,endpoint,remaining,this,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1236116950;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,else,result,new,cxf,endpoint,remaining,this,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1242544480;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__            if (getHeaderFilterStrategy() != null) {_                result.setHeaderFilterStrategy(headerFilterStrategy)__            }_           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,get,header,filter,strategy,null,result,set,header,filter,strategy,header,filter,strategy,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,else,result,new,cxf,endpoint,remaining,this,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1242548807;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__            setEndpointHeaderFilterStrategy(result)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,set,endpoint,header,filter,strategy,result,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,else,result,new,cxf,endpoint,remaining,this,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map parameters) throws Exception;1249513864;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1257920126;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1280224426;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1281733067;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1297969159;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1306512562;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1306563080;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result = null__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__            _            result.setMtomEnabled(Boolean.valueOf((String)properties.get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,null,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,result,set,mtom,enabled,boolean,value,of,string,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1306567875;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__            _            result.setMtomEnabled(Boolean.valueOf((String)properties.get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,result,set,mtom,enabled,boolean,value,of,string,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1307014084;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__            _            result.setMtomEnabled(Boolean.valueOf((String)properties.get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,result,set,mtom,enabled,boolean,value,of,string,properties,get,message,return,result
CxfComponent -> @Override     protected Endpoint createEndpoint(String uri, String remaining,              Map<String, Object> parameters) throws Exception;1308235174;Create a {@link CxfEndpoint} which, can be a Spring bean endpoint having_URI format cxf:bean:<i>beanId</i> or transport address endpoint having URI format_cxf://<i>transportAddress</i>.;@Override_    protected Endpoint createEndpoint(String uri, String remaining, _            Map<String, Object> parameters) throws Exception {_        _        CxfEndpoint result__        _        if (remaining.startsWith(CxfConstants.SPRING_CONTEXT_ENDPOINT)) {_            _            String beanId = remaining.substring(CxfConstants.SPRING_CONTEXT_ENDPOINT.length())__            if (beanId.startsWith("//")) {_                beanId = beanId.substring(2)__            }__            CxfEndpointBean bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanId, _                    CxfEndpointBean.class)___            result = new CxfSpringEndpoint(this, bean)__           _            _            _            _            _            if (bean.getProperties() != null) {_                Map<String, Object> copy = new HashMap<String, Object>()__                copy.putAll(bean.getProperties())_     _                setProperties(result, copy)_      _                result.setMtomEnabled(Boolean.valueOf((String)copy.get(Message.MTOM_ENABLED)))__            }_            _        } else {_            _            result = new CxfEndpoint(remaining, this)__        }_        _        setEndpointHeaderFilterStrategy(result)__        setProperties(result, parameters)___        _        Map<String, Object> properties = IntrospectionSupport.extractProperties(parameters, "properties.")__        if (properties != null) {_            result.setProperties(properties)__            _            result.setMtomEnabled(Boolean.valueOf((String)properties.get(Message.MTOM_ENABLED)))__        }__        return result__    };create,a,link,cxf,endpoint,which,can,be,a,spring,bean,endpoint,having,uri,format,cxf,bean,i,bean,id,i,or,transport,address,endpoint,having,uri,format,cxf,i,transport,address,i;override,protected,endpoint,create,endpoint,string,uri,string,remaining,map,string,object,parameters,throws,exception,cxf,endpoint,result,if,remaining,starts,with,cxf,constants,string,bean,id,remaining,substring,cxf,constants,length,if,bean,id,starts,with,bean,id,bean,id,substring,2,cxf,endpoint,bean,bean,camel,context,helper,mandatory,lookup,get,camel,context,bean,id,cxf,endpoint,bean,class,result,new,cxf,spring,endpoint,this,bean,if,bean,get,properties,null,map,string,object,copy,new,hash,map,string,object,copy,put,all,bean,get,properties,set,properties,result,copy,result,set,mtom,enabled,boolean,value,of,string,copy,get,message,else,result,new,cxf,endpoint,remaining,this,set,endpoint,header,filter,strategy,result,set,properties,result,parameters,map,string,object,properties,introspection,support,extract,properties,parameters,properties,if,properties,null,result,set,properties,properties,result,set,mtom,enabled,boolean,value,of,string,properties,get,message,return,result
