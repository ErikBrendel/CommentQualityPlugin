commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void setServiceClass(Class<?> serviceClass) {     if (serviceClass != null) {         super.setServiceClass(serviceClass).     } }
false;protected;1;39;;protected Definition getDefinition(String url) {     if (definition == null) {         try {             definition = getBus().getExtension(WSDLManager.class).getDefinition(url).         } catch (Exception ex) {             throw new RuntimeCamelException(ex).         }     }     if (this.getServiceQName(false) == null) {         Map<QName, ?> services = CastUtils.cast(definition.getServices()).         if (services.size() == 0) {             throw new IllegalArgumentException("There is no service in the WSDL" + url).         }         if (services.size() > 1) {             throw new IllegalArgumentException("service name must be specified, there is more than one service in the WSDL" + url).         }         QName serviceQName = services.keySet().iterator().next().         this.setServiceName(serviceQName).     }     if (this.getEndpointName(false) == null) {         Service service = definition.getService(getServiceQName(false)).         Map<String, ?> ports = CastUtils.cast(service.getPorts()).         if (ports.size() == 0) {             throw new IllegalArgumentException("There is no port/endpoint in the service " + getServiceQName() + "of WSDL" + url).         }         if (ports.size() > 1) {             throw new IllegalArgumentException("Port/endpoint name must be specified, There is more than one port in the service" + service.getQName() + " of the WSDL" + url).         }         QName endpointQName = new QName(service.getQName().getNamespaceURI(), ports.keySet().iterator().next()).         setEndpointName(endpointQName).     }     return definition. }
false;protected;1;4;;protected void buildServiceFromWSDL(String url) {     getDefinition(url).     super.buildServiceFromWSDL(url). }
false;public;1;5;;public Endpoint createEndpoint(EndpointInfo ei) throws EndpointException {     Endpoint ep = new JaxWsEndpointImpl(getBus(), getService(), ei).     sendEvent(Event.ENDPOINT_CREATED, ei, ep, getServiceClass()).     return ep. }
false;protected;0;4;;@Override protected void initializeWSDLOperations() { // skip this operation that requires service class }
false;protected;1;4;;@Override protected void checkServiceClassAnnotations(Class<?> sc) { // skip this operation that requires service class }
false;protected;0;5;;@Override protected Invoker createInvoker() {     // Camel specific invoker will be set     return null. }
