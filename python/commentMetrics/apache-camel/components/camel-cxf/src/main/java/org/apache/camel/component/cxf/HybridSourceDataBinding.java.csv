commented;modifiers;parameterAmount;loc;comment;code
false;public;1;11;;@SuppressWarnings("unchecked") @Override public <T> DataReader<T> createReader(Class<T> cls) {     if (cls == XMLStreamReader.class) {         return (DataReader<T>) new XMLStreamDataReader().     } else if (cls == Node.class) {         return (DataReader<T>) new NodeDataReader().     } else {         throw new UnsupportedOperationException("The type " + cls.getName() + " is not supported.").     } }
false;public;0;4;;@Override public Class<?>[] getSupportedReaderFormats() {     return new Class[] { XMLStreamReader.class, Node.class }. }
false;public;3;6;;public void write(Object obj, MessagePartInfo part, XMLStreamWriter output) {     if (obj == null) {         return.     }     super.write(obj, part, output). }
false;public;1;20;;@SuppressWarnings("unchecked") @Override public <T> DataWriter<T> createWriter(Class<T> cls) {     if (cls == XMLStreamWriter.class) {         return (DataWriter<T>) new XMLStreamDataWriter() {              public void write(Object obj, MessagePartInfo part, XMLStreamWriter output) {                 if (obj == null) {                     return.                 }                 super.write(obj, part, output).             }         }.     } else if (cls == Node.class) {         return (DataWriter<T>) new NodeDataWriter().     } else {         throw new UnsupportedOperationException("The type " + cls.getName() + " is not supported.").     } }
false;public;0;4;;@Override public Class<?>[] getSupportedWriterFormats() {     return new Class[] { XMLStreamWriter.class, Node.class }. }
