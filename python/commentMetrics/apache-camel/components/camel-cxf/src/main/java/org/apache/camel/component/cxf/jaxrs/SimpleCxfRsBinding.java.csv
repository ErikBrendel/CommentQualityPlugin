# id;timestamp;commentText;codeText;commentWords;codeWords
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1364755322;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1364798516;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1364949779;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1373129971;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1455382473;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1461912409;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1468923824;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1469650319;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1523968798;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1540108161;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1540108163;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1547630961;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base);1550040622;Builds the response for the client._<p />_Always returns a JAX-RS {@link Response} object, which gives the user a better control on the response behaviour._If the message body is already an instance of {@link Response}, we reuse it and just inject the relevant HTTP headers._@param camelExchange_@param base_@return;protected Object buildResponse(org.apache.camel.Exchange camelExchange, Object base) {_        Message m = camelExchange.hasOut() ? camelExchange.getOut() : camelExchange.getIn()__        ResponseBuilder response___        _        if (base instanceof Response) {_            response = Response.fromResponse((Response) base)__        } else {_            int status = m.getHeader(org.apache.camel.Exchange.HTTP_RESPONSE_CODE, Status.OK.getStatusCode(), Integer.class)__            response = Response.status(status)__            _            _            if (base != null && !(base instanceof MessageContentsList)) {_                response.entity(base)__            }_        }__        _        Map<String, String> headersToPropagate = filterCamelHeadersForResponseHeaders(m.getHeaders(), camelExchange)__        for (Entry<String, String> entry : headersToPropagate.entrySet()) {_            response.header(entry.getKey(), entry.getValue())__        }_        return response.build()__    };builds,the,response,for,the,client,p,always,returns,a,jax,rs,link,response,object,which,gives,the,user,a,better,control,on,the,response,behaviour,if,the,message,body,is,already,an,instance,of,link,response,we,reuse,it,and,just,inject,the,relevant,http,headers,param,camel,exchange,param,base,return;protected,object,build,response,org,apache,camel,exchange,camel,exchange,object,base,message,m,camel,exchange,has,out,camel,exchange,get,out,camel,exchange,get,in,response,builder,response,if,base,instanceof,response,response,response,from,response,response,base,else,int,status,m,get,header,org,apache,camel,exchange,status,ok,get,status,code,integer,class,response,response,status,status,if,base,null,base,instanceof,message,contents,list,response,entity,base,map,string,string,headers,to,propagate,filter,camel,headers,for,response,headers,m,get,headers,camel,exchange,for,entry,string,string,entry,headers,to,propagate,entry,set,response,header,entry,get,key,entry,get,value,return,response,build
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1364755322;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1364798516;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1364949779;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1373129971;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1455382473;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1461912409;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1468923824;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1469650319;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1523968798;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1540108161;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1540108163;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1547630961;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> @SuppressWarnings("unchecked")     protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange);1550040622;Transfers path parameters from the full path (including ancestor subresource locators) into Camel IN Message Headers.;@SuppressWarnings("unchecked")_    protected void bindHeadersFromSubresourceLocators(Exchange cxfExchange, org.apache.camel.Exchange camelExchange) {_        MultivaluedMap<String, String> pathParams = (MultivaluedMap<String, String>) _                cxfExchange.getInMessage().get(URITemplate.TEMPLATE_PARAMETERS)___        _        if (pathParams == null || (pathParams.size() == 1 && pathParams.containsKey(URITemplate.FINAL_MATCH_GROUP))) {_            return__        }__        Message m = camelExchange.getIn()__        for (Entry<String, List<String>> entry : pathParams.entrySet()) {_            _            if (URITemplate.FINAL_MATCH_GROUP.equals(entry.getKey())) {_                continue__            }_            m.setHeader(entry.getKey(), entry.getValue().get(0))__        }_    };transfers,path,parameters,from,the,full,path,including,ancestor,subresource,locators,into,camel,in,message,headers;suppress,warnings,unchecked,protected,void,bind,headers,from,subresource,locators,exchange,cxf,exchange,org,apache,camel,exchange,camel,exchange,multivalued,map,string,string,path,params,multivalued,map,string,string,cxf,exchange,get,in,message,get,uritemplate,if,path,params,null,path,params,size,1,path,params,contains,key,uritemplate,return,message,m,camel,exchange,get,in,for,entry,string,list,string,entry,path,params,entry,set,if,uritemplate,equals,entry,get,key,continue,m,set,header,entry,get,key,entry,get,value,get,0
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1364755322;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) return__        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1364798516;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1364949779;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1373129971;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1455382473;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1461912409;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1468923824;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1469650319;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1523968798;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1540108161;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1540108163;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1547630961;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex);1550040622;Binds the message body.__@param in_@param paramArray_@param singleBodyIndex;protected void bindBody(Message in, Object[] paramArray, int singleBodyIndex) {_        if (singleBodyIndex == -1) { _            return__        }_        in.setBody(paramArray[singleBodyIndex])__    };binds,the,message,body,param,in,param,param,array,param,single,body,index;protected,void,bind,body,message,in,object,param,array,int,single,body,index,if,single,body,index,1,return,in,set,body,param,array,single,body,index
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1364755322;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1364798516;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1364949779;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1373129971;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1455382473;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1461912409;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1468923824;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1469650319;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1523968798;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1540108161;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1540108163;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1547630961;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> MethodSpec -> public static MethodSpec fromMethod(Method method);1550040622;Processes this method definition and extracts metadata relevant for the binding process._@param method The Method to process._@return A MethodSpec instance representing the method metadata relevant to the Camel binding process.;public static MethodSpec fromMethod(Method method) {_            method = AnnotationUtils.getAnnotatedMethod(method.getDeclaringClass(), method)__            MethodSpec answer = new MethodSpec()__            _            Annotation[][] annotations = method.getParameterAnnotations()__            int paramCount = method.getParameterTypes().length__            answer.paramNames = new String[paramCount]__            answer.multipartNames = new String[paramCount]__            answer.multipartTypes = new String[paramCount]__            _            for (int i = 0_ i < paramCount_ i++) {_                _                for (Annotation a : annotations[i]) {_                    _                    if (HEADER_ANNOTATIONS.contains(a.annotationType())) {_                        try {_                            answer.paramNames[i] = (String) a.annotationType().getMethod("value", NO_PARAMETER_TYPES).invoke(a, NO_PARAMETERS)__                            answer.numberParameters++__                        } catch (Exception e) { }_                    }_                    _                    _                    if (Multipart.class.equals(a.annotationType())) {_                        Multipart multipart = (Multipart) a__                        answer.multipart = true__                        answer.multipartNames[i] = multipart.value()__                        answer.multipartTypes[i] = multipart.type()__                    }_                }_            }_            _            _            _            if (!answer.multipart && answer.numberParameters < method.getParameterTypes().length) {_                for (int i = 0_ i < answer.paramNames.length_ i++) {_                    if (answer.paramNames[i] == null) {_                        answer.entityIndex = i__                        break__                    }_                }_            }_            _            return answer__        };processes,this,method,definition,and,extracts,metadata,relevant,for,the,binding,process,param,method,the,method,to,process,return,a,method,spec,instance,representing,the,method,metadata,relevant,to,the,camel,binding,process;public,static,method,spec,from,method,method,method,method,annotation,utils,get,annotated,method,method,get,declaring,class,method,method,spec,answer,new,method,spec,annotation,annotations,method,get,parameter,annotations,int,param,count,method,get,parameter,types,length,answer,param,names,new,string,param,count,answer,multipart,names,new,string,param,count,answer,multipart,types,new,string,param,count,for,int,i,0,i,param,count,i,for,annotation,a,annotations,i,if,contains,a,annotation,type,try,answer,param,names,i,string,a,annotation,type,get,method,value,invoke,a,answer,number,parameters,catch,exception,e,if,multipart,class,equals,a,annotation,type,multipart,multipart,multipart,a,answer,multipart,true,answer,multipart,names,i,multipart,value,answer,multipart,types,i,multipart,type,if,answer,multipart,answer,number,parameters,method,get,parameter,types,length,for,int,i,0,i,answer,param,names,length,i,if,answer,param,names,i,null,answer,entity,index,i,break,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1364755322;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding._@param headers_@param camelExchange_@return;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding,param,headers,param,camel,exchange,return;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1364798516;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding._@param headers_@param camelExchange_@return;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding,param,headers,param,camel,exchange,return;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1364949779;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding._@param headers_@param camelExchange_@return;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding,param,headers,param,camel,exchange,return;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1373129971;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding._@param headers_@param camelExchange_@return;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding,param,headers,param,camel,exchange,return;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1455382473;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1461912409;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1468923824;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1469650319;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<String, String>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,string,string,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1523968798;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1540108161;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1540108163;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1547630961;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,                                                                      org.apache.camel.Exchange camelExchange);1550040622;Filters the response headers that will be sent back to the client._<p />_The {@link DefaultCxfRsBinding} doesn't filter the response headers according to the {@link HeaderFilterStrategy},_so we handle this task in this binding.;protected Map<String, String> filterCamelHeadersForResponseHeaders(Map<String, Object> headers,_                                                                     org.apache.camel.Exchange camelExchange) {_        Map<String, String> answer = new HashMap<>()__        for (Map.Entry<String, Object> entry : headers.entrySet()) {_            if (getHeaderFilterStrategy().applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), camelExchange)) {_                continue__            }_            _            _            if ("content-length".equalsIgnoreCase(entry.getKey())) {_                continue__            }_            answer.put(entry.getKey(), entry.getValue().toString())__        }_        return answer__    };filters,the,response,headers,that,will,be,sent,back,to,the,client,p,the,link,default,cxf,rs,binding,doesn,t,filter,the,response,headers,according,to,the,link,header,filter,strategy,so,we,handle,this,task,in,this,binding;protected,map,string,string,filter,camel,headers,for,response,headers,map,string,object,headers,org,apache,camel,exchange,camel,exchange,map,string,string,answer,new,hash,map,for,map,entry,string,object,entry,headers,entry,set,if,get,header,filter,strategy,apply,filter,to,camel,headers,entry,get,key,entry,get,value,camel,exchange,continue,if,content,length,equals,ignore,case,entry,get,key,continue,answer,put,entry,get,key,entry,get,value,to,string,return,answer
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1364755322;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) return__        _        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1364798516;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1364949779;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1373129971;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1455382473;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1461912409;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1468923824;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1469650319;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1523968798;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1540108161;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1540108163;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1547630961;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
SimpleCxfRsBinding -> protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters);1550040622;Binds JAX-RS parameter types (@HeaderParam, @QueryParam, @MatrixParam, etc.) to the exchange.__@param in_@param paramArray_@param paramNames_@param numberParameters;protected void bindParameters(Message in, Object[] paramArray, String[] paramNames, int numberParameters) {_        if (numberParameters == 0) {_            return__        }_        for (int i = 0_ i < paramNames.length_ i++) {_            if (paramNames[i] != null) {_                in.setHeader(paramNames[i], paramArray[i])__            }_        }_    };binds,jax,rs,parameter,types,header,param,query,param,matrix,param,etc,to,the,exchange,param,in,param,param,array,param,param,names,param,number,parameters;protected,void,bind,parameters,message,in,object,param,array,string,param,names,int,number,parameters,if,number,parameters,0,return,for,int,i,0,i,param,names,length,i,if,param,names,i,null,in,set,header,param,names,i,param,array,i
