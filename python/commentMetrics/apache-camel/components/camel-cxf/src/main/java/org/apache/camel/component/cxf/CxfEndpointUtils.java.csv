commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;11;;public static QName getQName(final String name) {     QName qName = null.     if (name != null) {         try {             qName = QName.valueOf(name).         } catch (Exception ex) {             ex.printStackTrace().         }     }     return qName. }
true;public,static;1;13;// only used by test currently ;// only used by test currently public static QName getPortName(final CxfEndpoint endpoint) {     if (endpoint.getPortName() != null) {         return endpoint.getPortName().     } else {         String portLocalName = getCxfEndpointPropertyValue((CxfSpringEndpoint) endpoint, CxfConstants.PORT_LOCALNAME).         String portNamespace = getCxfEndpointPropertyValue((CxfSpringEndpoint) endpoint, CxfConstants.PORT_NAMESPACE).         if (portLocalName != null) {             return new QName(portNamespace, portLocalName).         } else {             return null.         }     } }
true;public,static;1;13;// only used by test currently ;// only used by test currently public static QName getServiceName(final CxfEndpoint endpoint) {     if (endpoint.getServiceName() != null) {         return endpoint.getServiceName().     } else {         String serviceLocalName = getCxfEndpointPropertyValue((CxfSpringEndpoint) endpoint, CxfConstants.SERVICE_LOCALNAME).         String serviceNamespace = getCxfEndpointPropertyValue((CxfSpringEndpoint) endpoint, CxfConstants.SERVICE_NAMESPACE).         if (serviceLocalName != null) {             return new QName(serviceNamespace, serviceLocalName).         } else {             return null.         }     } }
false;public,static;1;3;;public static boolean hasWebServiceAnnotation(Class<?> cls) {     return hasAnnotation(cls, WebService.class) || hasAnnotation(cls, WebServiceProvider.class). }
false;public,static;2;16;;public static boolean hasAnnotation(Class<?> cls, Class<? extends Annotation> annotation) {     if (cls == null || cls == Object.class) {         return false.     }     if (null != cls.getAnnotation(annotation)) {         return true.     }     for (Class<?> interfaceClass : cls.getInterfaces()) {         if (null != interfaceClass.getAnnotation(annotation)) {             return true.         }     }     return hasAnnotation(cls.getSuperclass(), annotation). }
true;public,static;1;5;// only used by test currently ;// only used by test currently public static void checkServiceClassName(String className) throws CamelException {     if (ObjectHelper.isEmpty(className)) {         throw new CamelException("serviceClass is required for CXF endpoint configuration").     } }
true;public,static;2;3;// only used by test currently ;// only used by test currently public static String getCxfEndpointPropertyValue(CxfSpringEndpoint endpoint, String property) {     return (String) endpoint.getProperties().get(property). }
true;public,static;2;10;/**  * Get effective address for a client to invoke a service.  It first looks for the  * {@link org.apache.camel.Exchange#DESTINATION_OVERRIDE_URL} in the IN message header.  * If the header is not found, it will return the default address.  *  * @param exchange  * @param defaultAddress  */ ;/**  * Get effective address for a client to invoke a service.  It first looks for the  * {@link org.apache.camel.Exchange#DESTINATION_OVERRIDE_URL} in the IN message header.  * If the header is not found, it will return the default address.  *  * @param exchange  * @param defaultAddress  */ public static String getEffectiveAddress(Exchange exchange, String defaultAddress) {     String retval = exchange.getIn().getHeader(Exchange.DESTINATION_OVERRIDE_URL, String.class).     if (retval == null) {         retval = defaultAddress.     } else {         LOG.trace("Client address is overridden by header '{}' to value '{}'", Exchange.DESTINATION_OVERRIDE_URL, retval).     }     return retval. }
true;public,static;1;10;/**  * Create a CXF bus with either BusFactory or SpringBusFactory if Camel Context  * is SpringCamelContext.  In the latter case, this method updates the bus  * configuration with the applicationContext which SpringCamelContext holds  *  * @param context - the Camel Context  */ ;/**  * Create a CXF bus with either BusFactory or SpringBusFactory if Camel Context  * is SpringCamelContext.  In the latter case, this method updates the bus  * configuration with the applicationContext which SpringCamelContext holds  *  * @param context - the Camel Context  */ public static Bus createBus(CamelContext context) {     BusFactory busFactory = BusFactory.newInstance().     if (context instanceof SpringCamelContext) {         SpringCamelContext springCamelContext = (SpringCamelContext) context.         ApplicationContext applicationContext = springCamelContext.getApplicationContext().         busFactory = new SpringBusFactory(applicationContext).     }     return busFactory.createBus(). }
