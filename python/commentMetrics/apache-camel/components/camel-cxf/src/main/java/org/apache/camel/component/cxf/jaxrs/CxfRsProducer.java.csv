commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected void doStart() throws Exception {     clientFactoryBeanCache.start().     super.doStart(). }
false;protected;0;4;;protected void doStop() throws Exception {     super.doStop().     clientFactoryBeanCache.stop(). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     Boolean httpClientAPI = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.class).     // set the value with endpoint's option     if (httpClientAPI == null) {         httpClientAPI = ((CxfRsEndpoint) getEndpoint()).isHttpClientAPI().     }     if (httpClientAPI.booleanValue()) {         invokeHttpClient(exchange).     } else {         invokeProxyClient(exchange).     } }
false;public;2;21;;public boolean process(Exchange exchange, AsyncCallback callback) {     try {         Message inMessage = exchange.getIn().         Boolean httpClientAPI = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.class).         // set the value with endpoint's option         if (httpClientAPI == null) {             httpClientAPI = ((CxfRsEndpoint) getEndpoint()).isHttpClientAPI().         }         if (httpClientAPI.booleanValue()) {             invokeAsyncHttpClient(exchange, callback).         } else {             invokeAsyncProxyClient(exchange, callback).         }         return false.     } catch (Exception exception) {         LOG.error("Error invoking request", exception).         exchange.setException(exception).         callback.done(true).         return true.     } }
false;protected;2;54;;protected void invokeAsyncHttpClient(Exchange exchange, final AsyncCallback callback) throws Exception {     Message inMessage = exchange.getIn().     JAXRSClientFactoryBean cfb = clientFactoryBeanCache.get(CxfEndpointUtils.getEffectiveAddress(exchange, ((CxfRsEndpoint) getEndpoint()).getAddress())).     Bus bus = ((CxfRsEndpoint) getEndpoint()).getBus().     // We need to apply the bus setting from the CxfRsEndpoint which is not use the default bus     if (bus != null) {         cfb.setBus(bus).     }     WebClient client = cfb.createWebClient().     ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(client).     String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class).     Class<?> responseClass = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Class.class).     Type genericType = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_GENERIC_TYPE, Type.class).     Object[] pathValues = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, Object[].class).     String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class).     if (LOG.isTraceEnabled()) {         LOG.trace("HTTP method = {}", httpMethod).         LOG.trace("path = {}", path).         LOG.trace("responseClass = {}", responseClass).     }     // set the path     if (path != null) {         if (ObjectHelper.isNotEmpty(pathValues) && pathValues.length > 0) {             client.path(path, pathValues).         } else {             client.path(path).         }     }     CxfRsEndpoint cxfRsEndpoint = (CxfRsEndpoint) getEndpoint().     CxfRsBinding binding = cxfRsEndpoint.getBinding().     Object body = getBody(exchange, inMessage, httpMethod, cxfRsEndpoint, binding).     setupClientMatrix(client, exchange).     setupClientQueryAndHeaders(client, exchange).     // ensure the CONTENT_TYPE header can be retrieved     if (ObjectHelper.isEmpty(inMessage.getHeader(Exchange.CONTENT_TYPE, String.class)) && ObjectHelper.isNotEmpty(client.getHeaders().get(Exchange.CONTENT_TYPE))) {         inMessage.setHeader(Exchange.CONTENT_TYPE, client.getHeaders().get(Exchange.CONTENT_TYPE).get(0)).     }     // Build message entity     Entity<Object> entity = binding.bindCamelMessageToRequestEntity(body, inMessage, exchange).     // handle cookies     CookieHandler cookieHandler = ((CxfRsEndpoint) getEndpoint()).getCookieHandler().     loadCookies(exchange, client, cookieHandler).     // invoke the client     client.async().method(httpMethod, entity, new CxfInvocationCallback(client, exchange, cxfRsEndpoint, responseClass, callback, genericType)). }
false;protected;2;44;;protected void invokeAsyncProxyClient(Exchange exchange, final AsyncCallback callback) throws Exception {     Message inMessage = exchange.getIn().     Object[] varValues = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, Object[].class).     String methodName = inMessage.getHeader(CxfConstants.OPERATION_NAME, String.class).     Client target.     JAXRSClientFactoryBean cfb = clientFactoryBeanCache.get(CxfEndpointUtils.getEffectiveAddress(exchange, ((CxfRsEndpoint) getEndpoint()).getAddress())).     Bus bus = ((CxfRsEndpoint) getEndpoint()).getBus().     // We need to apply the bus setting from the CxfRsEndpoint which is not use the default bus     if (bus != null) {         cfb.setBus(bus).     }     if (varValues == null) {         target = cfb.create().     } else {         target = cfb.createWithValues(varValues).     }     ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(target).     setupClientHeaders(target, exchange).     // find out the method which we want to invoke     JAXRSServiceFactoryBean sfb = cfb.getServiceFactory().     sfb.getResourceClasses().     // check the null body first     Object[] parameters = null.     if (inMessage.getBody() != null) {         parameters = inMessage.getBody(Object[].class).     }     // get the method     Method method = findRightMethod(sfb.getResourceClasses(), methodName, getParameterTypes(parameters)).     CxfRsEndpoint cxfRsEndpoint = (CxfRsEndpoint) getEndpoint().     final CxfProxyInvocationCallback invocationCallback = new CxfProxyInvocationCallback(target, exchange, cxfRsEndpoint, callback).     WebClient.getConfig(target).getRequestContext().put(InvocationCallback.class.getName(), invocationCallback).     // handle cookies     CookieHandler cookieHandler = ((CxfRsEndpoint) getEndpoint()).getCookieHandler().     loadCookies(exchange, target, cookieHandler).     method.invoke(target, parameters). }
false;protected;2;26;;@SuppressWarnings("unchecked") protected void setupClientQueryAndHeaders(WebClient client, Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     CxfRsEndpoint cxfRsEndpoint = (CxfRsEndpoint) getEndpoint().     // check if there is a query map in the message header     Map<String, String> maps = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, Map.class).     if (maps == null) {         // Get the map from HTTP_QUERY header         String queryString = inMessage.getHeader(Exchange.HTTP_QUERY, String.class).         if (queryString != null) {             maps = getQueryParametersFromQueryString(queryString, ExchangeHelper.getCharsetName(exchange)).         }     }     if (maps == null) {         maps = cxfRsEndpoint.getParameters().     }     if (maps != null) {         for (Map.Entry<String, String> entry : maps.entrySet()) {             client.query(entry.getKey(), entry.getValue()).         }     }     setupClientHeaders(client, exchange). }
false;protected;2;23;;protected void setupClientMatrix(WebClient client, Exchange exchange) throws Exception {     org.apache.cxf.message.Message cxfMessage = (org.apache.cxf.message.Message) exchange.getIn().getHeader("CamelCxfMessage").     if (cxfMessage != null) {         String requestURL = (String) cxfMessage.get("org.apache.cxf.request.uri").         String matrixParam = null.         int matrixStart = requestURL.indexOf(".").         int matrixEnd = requestURL.indexOf("?") > -1 ? requestURL.indexOf("?") : requestURL.length().         Map<String, String> maps = null.         if (requestURL != null && matrixStart > 0) {             matrixParam = requestURL.substring(matrixStart + 1, matrixEnd).             if (matrixParam != null) {                 maps = getMatrixParametersFromMatrixString(matrixParam, ExchangeHelper.getCharsetName(exchange)).             }         }         if (maps != null) {             for (Map.Entry<String, String> entry : maps.entrySet()) {                 client.matrix(entry.getKey(), entry.getValue()).                 LOG.debug("Matrix param " + entry.getKey() + " :: " + entry.getValue()).             }         }     } }
false;protected;2;7;;protected void setupClientHeaders(Client client, Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     CxfRsEndpoint cxfRsEndpoint = (CxfRsEndpoint) getEndpoint().     CxfRsBinding binding = cxfRsEndpoint.getBinding().     // set headers     client.headers(binding.bindCamelHeadersToRequestHeaders(inMessage.getHeaders(), exchange)). }
false;protected;1;91;;protected void invokeHttpClient(Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     JAXRSClientFactoryBean cfb = clientFactoryBeanCache.get(CxfEndpointUtils.getEffectiveAddress(exchange, ((CxfRsEndpoint) getEndpoint()).getAddress())).     Bus bus = ((CxfRsEndpoint) getEndpoint()).getBus().     // We need to apply the bus setting from the CxfRsEndpoint which is not use the default bus     if (bus != null) {         cfb.setBus(bus).     }     WebClient client = cfb.createWebClient().     ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(client).     String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class).     Class<?> responseClass = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Class.class).     Type genericType = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_GENERIC_TYPE, Type.class).     Object[] pathValues = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, Object[].class).     String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class).     if (LOG.isTraceEnabled()) {         LOG.trace("HTTP method = {}", httpMethod).         LOG.trace("path = {}", path).         LOG.trace("responseClass = {}", responseClass).     }     // set the path     if (path != null) {         if (ObjectHelper.isNotEmpty(pathValues) && pathValues.length > 0) {             client.path(path, pathValues).         } else {             client.path(path).         }     }     CxfRsEndpoint cxfRsEndpoint = (CxfRsEndpoint) getEndpoint().     CxfRsBinding binding = cxfRsEndpoint.getBinding().     Object body = getBody(exchange, inMessage, httpMethod, cxfRsEndpoint, binding).     setupClientMatrix(client, exchange).     setupClientQueryAndHeaders(client, exchange).     // handle cookies     CookieHandler cookieHandler = ((CxfRsEndpoint) getEndpoint()).getCookieHandler().     loadCookies(exchange, client, cookieHandler).     // invoke the client     Object response = null.     if (responseClass == null || Response.class.equals(responseClass)) {         response = client.invoke(httpMethod, body).     } else {         if (Collection.class.isAssignableFrom(responseClass)) {             if (genericType instanceof ParameterizedType) {                 // Get the collection member type first                 Type[] actualTypeArguments = ((ParameterizedType) genericType).getActualTypeArguments().                 response = client.invokeAndGetCollection(httpMethod, body, (Class<?>) actualTypeArguments[0]).             } else {                 throw new CamelExchangeException("Header " + CxfConstants.CAMEL_CXF_RS_RESPONSE_GENERIC_TYPE + " not found in message", exchange).             }         } else {             response = client.invoke(httpMethod, body, responseClass).         }     }     int statesCode = client.getResponse().getStatus().     // handle cookies     saveCookies(exchange, client, cookieHandler).     // http://en.wikipedia.org/wiki/List_of_HTTP_status_codes     if (throwException) {         if (response instanceof Response) {             Integer respCode = ((Response) response).getStatus().             if (respCode > 207) {                 throw populateCxfRsProducerException(exchange, (Response) response, respCode).             }         }     }     // set response     if (exchange.getPattern().isOutCapable()) {         LOG.trace("Response body = {}", response).         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders()).         exchange.getOut().setBody(binding.bindResponseToCamelBody(response, exchange)).         exchange.getOut().getHeaders().putAll(binding.bindResponseHeadersToCamelHeaders(response, exchange)).         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, statesCode).     } else {         // just close the input stream of the response object         if (response instanceof Response) {             ((Response) response).close().         }     } }
false;private;3;16;;private void saveCookies(Exchange exchange, Client client, CookieHandler cookieHandler) {     if (cookieHandler != null) {         CookieStore cookieStore = cookieHandler.getCookieStore(exchange).         for (NewCookie newCookie : client.getResponse().getCookies().values()) {             HttpCookie cookie = new HttpCookie(newCookie.getName(), newCookie.getValue()).             cookie.setComment(newCookie.getComment()).             cookie.setDomain(newCookie.getDomain()).             cookie.setHttpOnly(newCookie.isHttpOnly()).             cookie.setMaxAge(newCookie.getMaxAge()).             cookie.setPath(newCookie.getPath()).             cookie.setSecure(newCookie.isSecure()).             cookie.setVersion(newCookie.getVersion()).             cookieStore.add(client.getCurrentURI(), cookie).         }     } }
false;private;3;9;;private void loadCookies(Exchange exchange, Client client, CookieHandler cookieHandler) throws IOException {     if (cookieHandler != null) {         for (Map.Entry<String, List<String>> cookie : cookieHandler.loadCookies(exchange, client.getCurrentURI()).entrySet()) {             if (cookie.getValue().size() > 0) {                 client.header(cookie.getKey(), cookie.getValue()).             }         }     } }
false;protected;1;68;;protected void invokeProxyClient(Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     Object[] varValues = inMessage.getHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, Object[].class).     String methodName = inMessage.getHeader(CxfConstants.OPERATION_NAME, String.class).     Client target = null.     JAXRSClientFactoryBean cfb = clientFactoryBeanCache.get(CxfEndpointUtils.getEffectiveAddress(exchange, ((CxfRsEndpoint) getEndpoint()).getAddress())).     Bus bus = ((CxfRsEndpoint) getEndpoint()).getBus().     // We need to apply the bus setting from the CxfRsEndpoint which is not use the default bus     if (bus != null) {         cfb.setBus(bus).     }     if (varValues == null) {         target = cfb.create().     } else {         target = cfb.createWithValues(varValues).     }     ((CxfRsEndpoint) getEndpoint()).getChainedCxfRsEndpointConfigurer().configureClient(target).     setupClientHeaders(target, exchange).     // find out the method which we want to invoke     JAXRSServiceFactoryBean sfb = cfb.getServiceFactory().     sfb.getResourceClasses().     // check the null body first     Object[] parameters = null.     if (inMessage.getBody() != null) {         parameters = inMessage.getBody(Object[].class).     }     // get the method     Method method = findRightMethod(sfb.getResourceClasses(), methodName, getParameterTypes(parameters)).     // handle cookies     CookieHandler cookieHandler = ((CxfRsEndpoint) getEndpoint()).getCookieHandler().     loadCookies(exchange, target, cookieHandler).     // Will send out the message to     // Need to deal with the sub resource class     Object response = method.invoke(target, parameters).     int statesCode = target.getResponse().getStatus().     // handle cookies     saveCookies(exchange, target, cookieHandler).     if (throwException) {         if (response instanceof Response) {             Integer respCode = ((Response) response).getStatus().             if (respCode > 207) {                 throw populateCxfRsProducerException(exchange, (Response) response, respCode).             }         }     }     CxfRsEndpoint cxfRsEndpoint = (CxfRsEndpoint) getEndpoint().     CxfRsBinding binding = cxfRsEndpoint.getBinding().     if (exchange.getPattern().isOutCapable()) {         LOG.trace("Response body = {}", response).         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders()).         exchange.getOut().setBody(binding.bindResponseToCamelBody(response, exchange)).         exchange.getOut().getHeaders().putAll(binding.bindResponseHeadersToCamelHeaders(response, exchange)).         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, statesCode).     } else {         // just close the input stream of the response object         if (response instanceof Response) {             ((Response) response).close().         }     } }
false;protected;0;3;;protected ClientFactoryBeanCache getClientFactoryBeanCache() {     return clientFactoryBeanCache. }
false;private;2;14;;private Map<String, String> getQueryParametersFromQueryString(String queryString, String charset) throws UnsupportedEncodingException {     Map<String, String> answer = new LinkedHashMap<>().     for (String param : queryString.split("&")) {         String[] pair = param.split("=", 2).         if (pair.length == 2) {             String name = URLDecoder.decode(pair[0], charset).             String value = URLDecoder.decode(pair[1], charset).             answer.put(name, value).         } else {             throw new IllegalArgumentException("Invalid parameter, expected to be a pair but was " + param).         }     }     return answer. }
false;private;3;29;;private Method findRightMethod(List<Class<?>> resourceClasses, String methodName, Class<?>[] parameterTypes) throws NoSuchMethodException {     for (Class<?> clazz : resourceClasses) {         try {             Method[] m = clazz.getMethods().             iterate_on_methods: for (Method method : m) {                 if (!method.getName().equals(methodName)) {                     continue.                 }                 Class<?>[] params = method.getParameterTypes().                 if (params.length != parameterTypes.length) {                     continue.                 }                 for (int i = 0. i < parameterTypes.length. i++) {                     if (!params[i].isAssignableFrom(parameterTypes[i])) {                         continue iterate_on_methods.                     }                 }                 return method.             }         } catch (SecurityException ex) {         // keep looking         }     }     throw new NoSuchMethodException("Cannot find method with name: " + methodName + " having parameters assignable from: " + arrayToString(parameterTypes)). }
false;private;1;13;;private Class<?>[] getParameterTypes(Object[] objects) {     // We need to handle the void parameter situation.     if (objects == null) {         return new Class[] {}.     }     Class<?>[] answer = new Class[objects.length].     int i = 0.     for (Object obj : objects) {         answer[i] = obj.getClass().         i++.     }     return answer. }
false;private;2;14;;private Map<String, String> getMatrixParametersFromMatrixString(String matrixString, String charset) throws UnsupportedEncodingException {     Map<String, String> answer = new LinkedHashMap<>().     for (String param : matrixString.split(".")) {         String[] pair = param.split("=", 2).         if (pair.length == 2) {             String name = URLDecoder.decode(pair[0], charset).             String value = URLDecoder.decode(pair[1], charset).             answer.put(name, value).         } else {             throw new IllegalArgumentException("Invalid parameter, expected to be a pair but was " + param).         }     }     return answer. }
false;private;1;11;;private String arrayToString(Object[] array) {     StringBuilder buffer = new StringBuilder("[").     for (Object obj : array) {         if (buffer.length() > 2) {             buffer.append(",").         }         buffer.append(obj.toString()).     }     buffer.append("]").     return buffer.toString(). }
false;protected;3;23;;protected CxfOperationException populateCxfRsProducerException(Exchange exchange, Response response, int responseCode) {     CxfOperationException exception.     String uri = exchange.getFromEndpoint().getEndpointUri().     String statusText = statusTextFromResponseCode(responseCode).     Map<String, String> headers = parseResponseHeaders(response, exchange).     // Get the response detail string     String copy = exchange.getContext().getTypeConverter().convertTo(String.class, response.getEntity()).     if (responseCode >= 300 && responseCode < 400) {         String redirectLocation.         if (response.getMetadata().getFirst("Location") != null) {             redirectLocation = response.getMetadata().getFirst("location").toString().             exception = new CxfOperationException(uri, responseCode, statusText, redirectLocation, headers, copy).         } else {             // no redirect location             exception = new CxfOperationException(uri, responseCode, statusText, null, headers, copy).         }     } else {         // internal server error(error code 500)         exception = new CxfOperationException(uri, responseCode, statusText, null, headers, copy).     }     return exception. }
true;;1;5;/**  * Convert the given HTTP response code to its corresponding status text or  * response category. This is useful to avoid creating NPEs if this producer  * is presented with an HTTP response code that the JAX-RS API doesn't know.  *  * @param responseCode the HTTP response code to be converted to status text  * @return the status text for the code, or, if JAX-RS doesn't know the code,  *         the status category as text  */ ;/**  * Convert the given HTTP response code to its corresponding status text or  * response category. This is useful to avoid creating NPEs if this producer  * is presented with an HTTP response code that the JAX-RS API doesn't know.  *  * @param responseCode the HTTP response code to be converted to status text  * @return the status text for the code, or, if JAX-RS doesn't know the code,  *         the status category as text  */ String statusTextFromResponseCode(int responseCode) {     Response.Status status = Response.Status.fromStatusCode(responseCode).     return status != null ? status.toString() : responseCategoryFromCode(responseCode). }
true;private;1;3;/**  * Return the category of the given HTTP response code, as text. Invalid  * codes will result in appropriate text. this method never returns null.  *  * @param responseCode HTTP response code whose category is to be returned  * @return the category of the give response code. never {@code null}.  */ ;/**  * Return the category of the given HTTP response code, as text. Invalid  * codes will result in appropriate text. this method never returns null.  *  * @param responseCode HTTP response code whose category is to be returned  * @return the category of the give response code. never {@code null}.  */ private String responseCategoryFromCode(int responseCode) {     return Response.Status.Family.familyOf(responseCode).name(). }
false;protected;2;13;;protected Map<String, String> parseResponseHeaders(Object response, Exchange camelExchange) {     Map<String, String> answer = new HashMap<>().     if (response instanceof Response) {         for (Map.Entry<String, List<Object>> entry : ((Response) response).getMetadata().entrySet()) {             LOG.trace("Parse external header {}={}", entry.getKey(), entry.getValue()).             answer.put(entry.getKey(), entry.getValue().get(0).toString()).         }     }     return answer. }
false;private;5;15;;private Object getBody(Exchange exchange, Message inMessage, String httpMethod, CxfRsEndpoint cxfRsEndpoint, CxfRsBinding binding) throws Exception {     Object body = null.     if (!"GET".equals(httpMethod)) {         // need to check the request object if the http Method is not GET         if ("DELETE".equals(httpMethod) && cxfRsEndpoint.isIgnoreDeleteMethodMessageBody()) {         // just ignore the message body if the ignoreDeleteMethodMessageBody is true         } else {             body = binding.bindCamelMessageBodyToRequestBody(inMessage, exchange).             if (LOG.isTraceEnabled()) {                 LOG.trace("Request body = {}", body).             }         }     }     return body. }
false;public;1;34;;@Override public void completed(Response response) {     try {         if (shouldHandleError(response)) {             handleError(response).             return.         }         // handle cookies         saveCookies(exchange, client, cxfRsEndpoint.getCookieHandler()).         if (!exchange.getPattern().isOutCapable()) {             return.         }         LOG.trace("Response body = {}", response).         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders()).         final CxfRsBinding binding = cxfRsEndpoint.getBinding().         exchange.getOut().getHeaders().putAll(binding.bindResponseHeadersToCamelHeaders(response, exchange)).         if (genericType != null && !genericType.equals(Void.TYPE)) {             GenericType genericType = new GenericType(this.genericType).             exchange.getOut().setBody(binding.bindResponseToCamelBody(response.readEntity(genericType), exchange)).         } else if (responseClass != null && !responseClass.equals(Void.TYPE)) {             exchange.getOut().setBody(binding.bindResponseToCamelBody(response.readEntity(responseClass), exchange)).         } else {             exchange.getOut().setBody(binding.bindResponseToCamelBody(response, exchange)).         }         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, response.getStatus()).     } catch (Exception exception) {         LOG.error("Error while processing response", exception).         fail(exception).     } finally {         callback.done(false).     } }
false;public;1;13;;@Override public void failed(Throwable throwable) {     LOG.error("Failed request ", throwable).     try {         // handle cookies         saveCookies(exchange, client, cxfRsEndpoint.getCookieHandler()).         fail(throwable).     } catch (Exception error) {         LOG.error("Error while processing failed request", error).     } finally {         callback.done(false).     } }
false;private;1;17;;private void fail(Throwable throwable) {     if (throwable.getClass().isInstance(WebApplicationException.class)) {         final WebApplicationException cast = WebApplicationException.class.cast(throwable).         final Response response = cast.getResponse().         if (shouldHandleError(response)) {             handleError(response).         }     } else if (throwable.getClass().isInstance(ResponseProcessingException.class)) {         final ResponseProcessingException cast = ResponseProcessingException.class.cast(throwable).         final Response response = cast.getResponse().         if (shouldHandleError(response)) {             handleError(response).         }     } else {         exchange.setException(throwable).     } }
false;private;1;11;;private boolean shouldHandleError(Response response) {     // http://en.wikipedia.org/wiki/List_of_HTTP_status_codes     if (response != null && throwException) {         Integer respCode = response.getStatus().         if (respCode > 207) {             return true.         }     }     return false. }
false;private;1;3;;private void handleError(Response response) {     exchange.setException(populateCxfRsProducerException(exchange, response, response.getStatus())). }
false;public;1;28;;@Override public void completed(Object body) {     try {         Response response = client.getResponse().         // handle cookies         saveCookies(exchange, client, cxfRsEndpoint.getCookieHandler()).         // handle error         if (shouldHandleError(response)) {             handleError(response).             return.         }         if (!exchange.getPattern().isOutCapable()) {             return.         }         LOG.trace("Response body = {}", response).         exchange.getOut().getHeaders().putAll(exchange.getIn().getHeaders()).         final CxfRsBinding binding = cxfRsEndpoint.getBinding().         exchange.getOut().getHeaders().putAll(binding.bindResponseHeadersToCamelHeaders(response, exchange)).         exchange.getOut().setBody(binding.bindResponseToCamelBody(body, exchange)).         exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, response.getStatus()).     } catch (Exception exception) {         LOG.error("Error while processing response", exception).         fail(exception).     } finally {         callback.done(false).     } }
false;public;1;13;;@Override public void failed(Throwable throwable) {     LOG.error("Failed request ", throwable).     try {         // handle cookies         saveCookies(exchange, client, cxfRsEndpoint.getCookieHandler()).         fail(throwable).     } catch (Exception error) {         LOG.error("Error while processing failed request", error).     } finally {         callback.done(false).     } }
false;private;1;17;;private void fail(Throwable throwable) {     if (throwable.getClass().isInstance(WebApplicationException.class)) {         final WebApplicationException cast = WebApplicationException.class.cast(throwable).         final Response response = cast.getResponse().         if (shouldHandleError(response)) {             handleError(response).         }     } else if (throwable.getClass().isInstance(ResponseProcessingException.class)) {         final ResponseProcessingException cast = ResponseProcessingException.class.cast(throwable).         final Response response = cast.getResponse().         if (shouldHandleError(response)) {             handleError(response).         }     } else {         exchange.setException(throwable).     } }
false;private;1;3;;private void handleError(Response response) {     exchange.setException(populateCxfRsProducerException(exchange, response, response.getStatus())). }
false;private;1;11;;private boolean shouldHandleError(Response response) {     // http://en.wikipedia.org/wiki/List_of_HTTP_status_codes     if (response != null && throwException) {         Integer respCode = response.getStatus().         if (respCode > 207) {             return true.         }     }     return false. }
false;public;0;3;;public void start() throws Exception {     cache.resetStatistics(). }
false;public;0;3;;public void stop() throws Exception {     cache.clear(). }
false;public;1;18;;public JAXRSClientFactoryBean get(String address) throws Exception {     JAXRSClientFactoryBean retVal = null.     synchronized (cache) {         retVal = cache.get(address).         if (retVal == null) {             retVal = ((CxfRsEndpoint) getEndpoint()).createJAXRSClientFactoryBean(address).             cache.put(address, retVal).             LOG.trace("Created client factory bean and add to cache for address '{}'", address).         } else {             LOG.trace("Retrieved client factory bean from cache for address '{}'", address).         }     }     return retVal. }
