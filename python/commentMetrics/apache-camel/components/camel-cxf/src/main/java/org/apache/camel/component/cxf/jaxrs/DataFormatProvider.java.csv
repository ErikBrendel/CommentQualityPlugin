commented;modifiers;parameterAmount;loc;comment;code
false;public;4;4;;@Override public boolean isReadable(Class<?> cls, Type type, Annotation[] anns, MediaType mt) {     return getDataFormat(mt) != null. }
false;public;4;4;;@Override public boolean isWriteable(Class<?> cls, Type type, Annotation[] anns, MediaType mt) {     return getDataFormat(mt) != null. }
false;public;6;13;;@Override public T readFrom(Class<T> cls, Type type, Annotation[] anns, MediaType mt, MultivaluedMap<String, String> headers, InputStream is) throws IOException, WebApplicationException {     DataFormat format = getValidDataFormat(mt).     try {         @SuppressWarnings("unchecked")         T result = (T) format.unmarshal(null, is).         return result.     } catch (Exception ex) {         throw new BadRequestException(ex).     } }
false;public;5;4;;@Override public long getSize(T obj, Class<?> cls, Type type, Annotation[] anns, MediaType mt) {     return -1. }
false;public;7;12;;@Override public void writeTo(T obj, Class<?> cls, Type type, Annotation[] anns, MediaType mt, MultivaluedMap<String, Object> headers, OutputStream os) throws IOException, WebApplicationException {     DataFormat format = getValidDataFormat(mt).     try {         format.marshal(null, obj, os).     } catch (Exception ex) {         throw new InternalServerErrorException(ex).     } }
false;public;1;3;;public void setFormat(DataFormat format) {     setFormat(MediaType.WILDCARD, format). }
false;public;2;3;;public void setFormat(String mediaType, DataFormat format) {     formats.put(mediaType, format). }
false;public;1;3;;public void setFormats(Map<String, DataFormat> formats) {     this.formats.putAll(formats). }
false;private;1;7;;private DataFormat getValidDataFormat(MediaType mt) {     DataFormat format = getDataFormat(mt).     if (format == null) {         throw new InternalServerErrorException().     }     return format. }
false;private;1;17;;private DataFormat getDataFormat(MediaType mt) {     String type = JAXRSUtils.mediaTypeToString(mt).     DataFormat format = formats.get(type).     if (format != null) {         return format.     }     int subtypeIndex = type.lastIndexOf('+').     if (subtypeIndex != -1) {         // example, application/json+v1, should still be handled by JSON         // handler, etc         format = formats.get(type.substring(0, subtypeIndex)).     }     if (format == null && formats.containsKey(MediaType.WILDCARD)) {         format = formats.get(MediaType.WILDCARD).     }     return format. }
