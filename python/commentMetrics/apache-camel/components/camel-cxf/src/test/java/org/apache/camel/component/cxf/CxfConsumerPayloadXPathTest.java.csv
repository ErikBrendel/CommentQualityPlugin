commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void size1XPathStringResultTest() throws Exception {     simpleTest(1, new TestRouteWithXPathStringResultBuilder()). }
false;public;0;4;;@Test public void size100XPathStringResultTest() throws Exception {     simpleTest(100, new TestRouteWithXPathStringResultBuilder()). }
false;public;0;4;;@Test public void size1000XPathStringResultTest() throws Exception {     simpleTest(1000, new TestRouteWithXPathStringResultBuilder()). }
false;public;0;4;;@Test public void size10000XPathStringResultTest() throws Exception {     simpleTest(10000, new TestRouteWithXPathStringResultBuilder()). }
false;public;0;4;;@Test public void size1XPathTest() throws Exception {     simpleTest(1, new TestRouteWithXPathBuilder()). }
false;public;0;4;;@Test public void size100XPathTest() throws Exception {     simpleTest(100, new TestRouteWithXPathBuilder()). }
false;public;0;4;;@Test public void size1000XPathTest() throws Exception {     simpleTest(1000, new TestRouteWithXPathBuilder()). }
false;public;0;4;;@Test public void size10000XPathTest() throws Exception {     simpleTest(10000, new TestRouteWithXPathBuilder()). }
true;public;0;4;// the textnode appears to have siblings! ;// the textnode appears to have siblings! @Test public void size10000DomTest() throws Exception {     simpleTest(10000, new TestRouteWithDomBuilder()). }
false;public;0;4;;@Test public void size1000DomFirstTest() throws Exception {     simpleTest(1000, new TestRouteWithDomFirstOneOnlyBuilder()). }
false;public;0;7;;@Override public void configure() {     from("cxf://" + testAddress + "?dataFormat=PAYLOAD").streamCaching().process(new XPathProcessor()).process(new ResponseProcessor()). }
false;public;0;7;;@Override public void configure() {     from("cxf://" + testAddress + "?dataFormat=PAYLOAD").streamCaching().process(new XPathStringResultProcessor()).process(new ResponseProcessor()). }
false;public;0;7;;@Override public void configure() {     from("cxf://" + testAddress + "?dataFormat=PAYLOAD").streamCaching().process(new DomFirstOneOnlyProcessor()).process(new ResponseProcessor()). }
false;public;0;7;;@Override public void configure() {     from("cxf://" + testAddress + "?dataFormat=PAYLOAD").streamCaching().process(new DomProcessor()).process(new ResponseProcessor()). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     Object obj = exchange.getIn().getBody().     // xpath expression directly results in a: String     String content = (String) XPathBuilder.xpath("//xml/text()").stringResult().evaluate(context, obj, Object.class).     exchange.getOut().setBody(content).     exchange.getOut().setHeaders(exchange.getIn().getHeaders()). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Object obj = exchange.getIn().getBody().     // xpath expression results in a: net.sf.saxon.dom.DOMNodeList     // after which it is converted to a String     String content = XPathBuilder.xpath("//xml/text()").evaluate(context, obj, String.class).     exchange.getOut().setBody(content).     exchange.getOut().setHeaders(exchange.getIn().getHeaders()). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     Object obj = exchange.getIn().getBody().     @SuppressWarnings("unchecked")     CxfPayload<SoapHeader> payload = (CxfPayload<SoapHeader>) obj.     Element el = payload.getBody().get(0).     Text textnode = (Text) el.getFirstChild().     exchange.getOut().setBody(textnode.getNodeValue()).     exchange.getOut().setHeaders(exchange.getIn().getHeaders()). }
false;public;1;20;;@Override public void process(Exchange exchange) throws Exception {     Object obj = exchange.getIn().getBody().     @SuppressWarnings("unchecked")     CxfPayload<SoapHeader> payload = (CxfPayload<SoapHeader>) obj.     Element el = payload.getBody().get(0).     Text textnode = (Text) el.getFirstChild().     StringBuilder b = new StringBuilder().     b.append(textnode.getNodeValue()).     textnode = (Text) textnode.getNextSibling().     while (textnode != null) {         // the textnode appears to have siblings!         b.append(textnode.getNodeValue()).         textnode = (Text) textnode.getNextSibling().     }     exchange.getOut().setBody(b.toString()).     exchange.getOut().setHeaders(exchange.getIn().getHeaders()). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Object obj = exchange.getIn().getBody().     String content = (String) obj.     String msgOut = constructSoapMessage(content).     exchange.getOut().setBody(msgOut).     exchange.getOut().setHeaders(exchange.getIn().getHeaders()).     exchange.getOut().setHeader(HEADER_SIZE, "" + content.length()). }
false;private;2;27;;private void simpleTest(int repeat, BaseRouteBuilder builder) throws Exception {     setUseRouteBuilder(false).     context.addRoutes(builder).     startCamelContext().     String content = StringUtils.repeat("x", repeat).     String msgIn = constructSoapMessage(content).     Exchange exchgIn = new DefaultExchange(context).     exchgIn.setPattern(ExchangePattern.InOut).     exchgIn.getIn().setBody(msgIn).     // Execute     Exchange exchgOut = template.send(builder.getTestAddress(), exchgIn).     // Verify     String result = exchgOut.getOut().getBody(String.class).     assertNotNull("response on http call", result).     // check for data loss in received input (after xpath)     String headerSize = exchgOut.getOut().getHeader(HEADER_SIZE, String.class).     assertEquals("" + repeat, headerSize).     assertTrue("dataloss in output occurred", result.length() > repeat).     stopCamelContext(). }
false;public;0;3;;public String getTestAddress() {     return testAddress. }
false;private;1;6;;private String getAvailableUrl(String pathEnd) {     int availablePort = AvailablePortFinder.getNextAvailable().     String url = "http://localhost:" + availablePort + "/" + getClass().getSimpleName().     return url + "/" + pathEnd. }
false;private;1;7;;private String constructSoapMessage(String content) {     return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soapenv:Body><xml>" + content + "</xml></soapenv:Body>" + "</soapenv:Envelope>". }
