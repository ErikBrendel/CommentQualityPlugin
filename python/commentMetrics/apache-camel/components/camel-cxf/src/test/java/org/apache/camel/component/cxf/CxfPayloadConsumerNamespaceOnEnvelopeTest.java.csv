commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
false;public;0;6;;@Before public void setUp() throws Exception {     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/GetTokenBeans.xml").     super.setUp().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;0;5;;@After public void tearDown() throws Exception {     IOHelper.close(applicationContext).     super.tearDown(). }
false;public;0;13;;public void configure() {     from("direct:router").to("cxf:bean:serviceEndpoint?dataFormat=RAW").convertBodyTo(String.class).     // The consumer is running in payload mode     from("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD").convertBodyTo(String.class).convertBodyTo(Document.class).setBody().constant(RESPONSE_PAYLOAD). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:router").to("cxf:bean:serviceEndpoint?dataFormat=RAW").convertBodyTo(String.class).             // The consumer is running in payload mode             from("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD").convertBodyTo(String.class).convertBodyTo(Document.class).setBody().constant(RESPONSE_PAYLOAD).         }     }. }
false;public;0;8;;@Test public void testInvokeRouter() {     Object returnValue = template.requestBody("direct:router", REQUEST_MESSAGE).     assertNotNull(returnValue).     assertTrue(returnValue instanceof String).     assertTrue(((String) returnValue).contains("Return Value")).     assertTrue(((String) returnValue).contains("http://www.w3.org/2001/XMLSchema-instance")). }
