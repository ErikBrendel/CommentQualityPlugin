commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public,static;0;10;;@BeforeClass public static void startServer() throws Exception {     // start a simple front service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(SIMPLE_SERVER_ADDRESS).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     svrBean.setBus(BusFactory.getDefaultBus()).     svrBean.create(). }
false;public;0;12;;@Test public void testSynchronous() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     String response = template.requestBody("direct:start", REQUEST_MESSAGE, String.class).     assertTrue("It should has the echo message", response.indexOf("echo " + TEST_MESSAGE) > 0).     assertTrue("It should has the echoResponse tag", response.indexOf("echoResponse") > 0).     assertMockEndpointsSatisfied().     assertTrue("Should use same threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;17;;public void configure() {     from("direct:start").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to(url).process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:result"). }
false;protected;0;21;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to(url).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:result").         }     }. }
