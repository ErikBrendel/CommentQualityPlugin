commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;8;;public static String elementToString(Element element) throws Exception {     Map<String, String> namespaces = new HashMap<>().     visitNodesForNameSpace(element, namespaces).     W3CDOMStreamWriter writer = new W3CDOMStreamWriter().     writeElement(element, writer, namespaces).     XmlConverter converter = new XmlConverter().     return converter.toString(converter.toDOMSource(writer.getDocument()), null). }
false;private,static;3;95;;private static void writeElement(Element e, XMLStreamWriter writer, Map<String, String> namespaces) throws XMLStreamException {     String prefix = e.getPrefix().     String ns = e.getNamespaceURI().     String localName = e.getLocalName().     if (prefix == null) {         prefix = "".     }     if (localName == null) {         localName = e.getNodeName().         if (localName == null) {             throw new IllegalStateException("Element's local name cannot be null!").         }     }     String decUri = writer.getNamespaceContext().getNamespaceURI(prefix).     boolean declareNamespace = decUri == null || !decUri.equals(ns).     if (ns == null || ns.length() == 0) {         writer.writeStartElement(localName).         if (StringUtils.isEmpty(decUri)) {             declareNamespace = false.         }     } else {         writer.writeStartElement(prefix, localName, ns).     }     NamedNodeMap attrs = e.getAttributes().     for (int i = 0. i < attrs.getLength(). i++) {         Node attr = attrs.item(i).         String name = attr.getLocalName().         String attrPrefix = attr.getPrefix().         if (attrPrefix == null) {             attrPrefix = "".         }         if (name == null) {             name = attr.getNodeName().         }         if ("xmlns".equals(attrPrefix)) {             writer.writeNamespace(name, attr.getNodeValue()).             if (name.equals(prefix) && attr.getNodeValue().equals(ns)) {                 declareNamespace = false.             }         } else {             if ("xmlns".equals(name) && "".equals(attrPrefix)) {                 writer.writeNamespace("", attr.getNodeValue()).                 if (attr.getNodeValue().equals(ns)) {                     declareNamespace = false.                 } else if (StringUtils.isEmpty(attr.getNodeValue()) && StringUtils.isEmpty(ns)) {                     declareNamespace = false.                 }             } else {                 String attns = attr.getNamespaceURI().                 String value = attr.getNodeValue().                 if (attns == null || attns.length() == 0) {                     writer.writeAttribute(name, value).                 } else if (attrPrefix == null || attrPrefix.length() == 0) {                     writer.writeAttribute(attns, name, value).                 } else {                     writer.writeAttribute(attrPrefix, attns, name, value).                 }             }         }     }     if (declareNamespace) {         if (ns == null) {             writer.writeNamespace(prefix, "").         } else {             writer.writeNamespace(prefix, ns).         }     }     if (namespaces != null && namespaces.size() > 0) {         for (Map.Entry<String, String> entry : namespaces.entrySet()) {             String namespaceURI = entry.getValue().             writer.writeNamespace(entry.getKey(), namespaceURI).         }     }     Node nd = e.getFirstChild().     while (nd != null) {         StaxUtils.writeNode(nd, writer, false).         nd = nd.getNextSibling().     }     writer.writeEndElement(). }
false;private,static;2;14;;private static void visitNodesForNameSpace(Node node, Map<String, String> namespaces) {     if (node instanceof Element) {         Element element = (Element) node.         if (element.getPrefix() != null && element.getNamespaceURI() != null) {             namespaces.put(element.getPrefix(), element.getNamespaceURI()).         }         if (node.getChildNodes() != null) {             NodeList nodelist = node.getChildNodes().             for (int i = 0. i < nodelist.getLength(). i++) {                 visitNodesForNameSpace(nodelist.item(i), namespaces).             }         }     } }
false;public,static;1;9;;public static void closeCamelUnitOfWork(Message message) {     Exchange cxfExchange = null.     if ((cxfExchange = message.getExchange()) != null) {         org.apache.camel.Exchange exchange = cxfExchange.get(org.apache.camel.Exchange.class).         if (exchange != null) {             UnitOfWorkHelper.doneUow(exchange.getUnitOfWork(), exchange).         }     } }
