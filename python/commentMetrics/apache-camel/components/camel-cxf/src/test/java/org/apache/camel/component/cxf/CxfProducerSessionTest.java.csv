commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public,static;0;16;;@BeforeClass public static void startServer() throws Exception {     // start a simple front service     JaxWsServiceFactoryBean svrFBean = new JaxWsServiceFactoryBean().     svrFBean.setServiceClass(EchoService.class).     JaxWsServerFactoryBean svrBean = new JaxWsServerFactoryBean(svrFBean).     svrBean.setAddress(SIMPLE_SERVER_ADDRESS).     svrBean.setServiceClass(EchoService.class).     svrBean.setServiceBean(new EchoServiceSessionImpl()).     // make the Jetty server support sessions     Bus bus = BusFactory.newInstance().createBus().     JettyHTTPServerEngineFactory jettyFactory = bus.getExtension(JettyHTTPServerEngineFactory.class).     jettyFactory.createJettyHTTPServerEngine(PORT, "http").setSessionSupport(true).     svrBean.setBus(bus).     svrBean.create(). }
false;public,static;0;6;;@AfterClass public static void destroyServer() {     // If we don't destroy this the session support will spill over to other     // tests and they will fail     JettyHTTPServerEngineFactory.destroyForPort(PORT). }
false;public;0;9;;@Test public void testNoSession() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(2).     String response = template.requestBody("direct:start", "World", String.class).     assertEquals("New New World", response).     response = template.requestBody("direct:start", "World", String.class).     assertEquals("New New World", response).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testExchangeSession() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(2).     String response = template.requestBody("direct:exchange", "World", String.class).     assertEquals("Old New World", response).     response = template.requestBody("direct:exchange", "World", String.class).     assertEquals("Old New World", response).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testInstanceSession() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(2).     String response = template.requestBody("direct:instance", "World", String.class).     assertEquals("Old New World", response).     response = template.requestBody("direct:instance", "World", String.class).     assertEquals("Old Old World", response).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test(expected = IllegalArgumentException.class) public void testSessionWithInvalidPayload() throws Throwable {     try {         template.requestBody("direct:invalid", "World", String.class).     } catch (CamelExecutionException e) {         if (e.getCause() != null) {             throw e.getCause().         }         throw e.     } }
false;public;0;28;;public void configure() {     from("direct:start").setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url).setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url).setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).to("mock:result").     from("direct:instance").setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#instanceCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#instanceCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).to("mock:result").     from("direct:exchange").setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#exchangeCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#exchangeCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).to("mock:result").     from("direct:invalid").to(url + "&cookieHandler=#exchangeCookieHandler"). }
false;protected;0;32;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url).setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url).setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).to("mock:result").             from("direct:instance").setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#instanceCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#instanceCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).to("mock:result").             from("direct:exchange").setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#exchangeCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).setBody().simple(REQUEST_MESSAGE_EXPRESSION).to(url + "&cookieHandler=#exchangeCookieHandler").setBody().xpath(PARAMETER_XPATH, String.class, NAMESPACES).to("mock:result").             from("direct:invalid").to(url + "&cookieHandler=#exchangeCookieHandler").         }     }. }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndiRegistry = super.createRegistry().     jndiRegistry.bind("instanceCookieHandler", new InstanceCookieHandler()).     jndiRegistry.bind("exchangeCookieHandler", new ExchangeCookieHandler()).     return jndiRegistry. }
