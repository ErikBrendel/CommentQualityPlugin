commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testExchangePropertyPropagation() throws Exception {     Exchange exchange = sendSimpleMessage().     // No direct access to native CXF Message but we can verify the     // request context from the Camel exchange     assertNotNull(exchange).     Map<String, Object> requestContext = CastUtils.cast((Map<?, ?>) exchange.getProperty(Client.REQUEST_CONTEXT)).     assertNotNull(requestContext).     String actualValue = (String) requestContext.get(TEST_KEY).     assertEquals("exchange property should get propagated to the request context", TEST_VALUE, actualValue). }
false;protected;0;4;;@Override protected String getSimpleEndpointUri() {     return "cxf://http://localhost:" + CXFTestSupport.getPort4() + "/CxfProducerContextTest/simple?serviceClass=org.apache.camel.component.cxf.HelloService". }
false;protected;0;4;;@Override protected String getJaxwsEndpointUri() {     return "cxf://http://localhost:" + CXFTestSupport.getPort4() + "/CxfProducerContextTest/jaxws?serviceClass=org.apache.hello_world_soap_http.Greeter". }
false;public;1;12;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     Map<String, Object> requestContext = new HashMap<>().     requestContext.put(Message.ENDPOINT_ADDRESS, getSimpleServerAddress()).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").     exchange.getIn().setHeader("requestObject", new DefaultCxfBinding()).     exchange.getProperties().put(TEST_KEY, TEST_VALUE). }
false;protected;0;19;;@Override protected Exchange sendSimpleMessage() {     Exchange exchange = template.send(getSimpleEndpointUri(), new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             Map<String, Object> requestContext = new HashMap<>().             requestContext.put(Message.ENDPOINT_ADDRESS, getSimpleServerAddress()).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").             exchange.getIn().setHeader("requestObject", new DefaultCxfBinding()).             exchange.getProperties().put(TEST_KEY, TEST_VALUE).         }     }).     return exchange. }
false;public;1;10;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     Map<String, Object> requestContext = new HashMap<>().     requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, getJaxWsServerAddress()).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile"). }
false;protected;0;16;;@Override protected Exchange sendJaxWsMessage() {     Exchange exchange = template.send(getJaxwsEndpointUri(), new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             Map<String, Object> requestContext = new HashMap<>().             requestContext.put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, getJaxWsServerAddress()).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").         }     }).     return exchange. }
