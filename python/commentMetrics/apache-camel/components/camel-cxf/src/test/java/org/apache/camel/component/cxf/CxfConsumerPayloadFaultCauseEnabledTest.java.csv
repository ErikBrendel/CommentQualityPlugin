commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     CXFTestSupport.getPort1().     applicationContext = new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfConsumerFaultCauseEnabledBeans.xml").     super.setUp().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;1;5;;public void process(final Exchange exchange) throws Exception {     Throwable cause = new IllegalArgumentException("Homer").     Fault fault = new Fault("Someone messed up the service.", (ResourceBundle) null, cause).     exchange.setException(fault). }
false;public;0;9;;public void configure() {     from("cxf:bean:consumerEndpoint").process(new Processor() {          public void process(final Exchange exchange) throws Exception {             Throwable cause = new IllegalArgumentException("Homer").             Fault fault = new Fault("Someone messed up the service.", (ResourceBundle) null, cause).             exchange.setException(fault).         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("cxf:bean:consumerEndpoint").process(new Processor() {                  public void process(final Exchange exchange) throws Exception {                     Throwable cause = new IllegalArgumentException("Homer").                     Fault fault = new Fault("Someone messed up the service.", (ResourceBundle) null, cause).                     exchange.setException(fault).                 }             }).         }     }. }
false;public;0;27;;@Test public void testInvokingFromCxfClient() throws Exception {     this.getCamelContextService().     URL wsdlURL = getClass().getClassLoader().getResource("person.wsdl").     PersonService ss = new PersonService(wsdlURL, SERVICE_QNAME).     Person client = ss.getSoap().     Client c = ClientProxy.getClient(client).     c.getInInterceptors().add(new LoggingInInterceptor()).     c.getOutInterceptors().add(new LoggingOutInterceptor()).     ((BindingProvider) client).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, serviceAddress).     Holder<String> personId = new Holder<>().     personId.value = "".     Holder<String> ssn = new Holder<>().     Holder<String> name = new Holder<>().     try {         client.getPerson(personId, ssn, name).         fail("SOAPFault expected!").     } catch (Exception e) {         assertTrue(e instanceof SOAPFaultException).         SOAPFault fault = ((SOAPFaultException) e).getFault().         assertEquals("Someone messed up the service. Caused by: Homer", fault.getFaultString()).     } }
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
