commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;3;;public int getPort1() {     return port1. }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringGlobalSslProducer.xml"). }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     SSLContextParameters parameters = context.getRegistry().lookupByNameAndType("mySslContext", SSLContextParameters.class).     context.setSSLContextParameters(parameters).     ((SSLContextParametersAware) context.getComponent("cxfrs")).setUseGlobalSslContextParameters(true).     return context. }
false;protected;1;3;;protected void setupDestinationURL(Message inMessage) { // do nothing here }
false;public;0;13;;@Test public void testCorrectTrustStore() {     Exchange exchange = template.send("direct://trust", new CxfRsGlobalSslProducerTest.MyProcessor()).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", String.valueOf(response.getId()), "123").     assertEquals("Get a wrong customer name", response.getName(), "John").     assertEquals("Get a wrong response code", 200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("Get a wrong header value", "value", exchange.getOut().getHeader("key")). }
false;public;0;7;;@Test public void testNoTrustStore() {     Exchange exchange = template.send("direct://noTrust", new CxfRsGlobalSslProducerTest.MyProcessor()).     assertThat(exchange.isFailed(), is(true)).     Exception e = exchange.getException().     assertThat(e.getCause().getClass().getCanonicalName(), is("javax.net.ssl.SSLHandshakeException")). }
false;public;0;7;;@Test public void testWrongTrustStore() {     Exchange exchange = template.send("direct://wrongTrust", new CxfRsGlobalSslProducerTest.MyProcessor()).     assertThat(exchange.isFailed(), is(true)).     Exception e = exchange.getException().     assertThat(e.getCause().getClass().getCanonicalName(), is("javax.net.ssl.SSLHandshakeException")). }
false;public;1;18;;@Override public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     setupDestinationURL(inMessage).     // using the http central client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     // Specify the response class , cxfrs will use InputStream as the response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     // set a customer header     inMessage.setHeader("key", "value").     // since we use the Get method, so we don't need to set the message body     inMessage.setBody(null). }
