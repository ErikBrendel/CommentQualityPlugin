commented;modifiers;parameterAmount;loc;comment;code
false;protected,static;0;3;;protected static String getBindingId() {     return "http://cxf.apache.org/bindings/xformat". }
false;public,static;0;13;;@BeforeClass public static void startService() {     // start a service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(SERVICE_ADDRESS).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     svrBean.setBindingId(getBindingId()).     Server server = svrBean.create().     server.start(). }
false;public;0;6;;@Before public void setUp() throws Exception {     applicationContext = createApplicationContext().     super.setUp().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;0;6;;@After public void tearDown() throws Exception {     IOHelper.close(applicationContext).     super.tearDown(). }
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/XmlBindingRouterContext.xml"). }
false;protected;0;10;;protected HelloService getCXFClient() throws Exception {     ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(ROUTER_ADDRESS).     clientBean.setServiceClass(HelloService.class).     clientBean.setBindingId(getBindingId()).     HelloService client = (HelloService) proxyFactory.create().     return client. }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     CxfPayload<?> payload = exchange.getIn().getBody(CxfPayload.class).     List<Source> elements = payload.getBodySources().     assertNotNull("We should get the elements here", elements).     assertEquals("Get the wrong elements size", elements.size(), 1).     Element el = new XmlConverter().toDOMElement(elements.get(0)).     assertEquals("Get the wrong namespace URI", el.getNamespaceURI(), "http://cxf.component.camel.apache.org/"). }
false;public;0;16;;public void configure() {     from("cxf:bean:routerEndpoint?dataFormat=PAYLOAD").process(new Processor() {          public void process(Exchange exchange) throws Exception {             CxfPayload<?> payload = exchange.getIn().getBody(CxfPayload.class).             List<Source> elements = payload.getBodySources().             assertNotNull("We should get the elements here", elements).             assertEquals("Get the wrong elements size", elements.size(), 1).             Element el = new XmlConverter().toDOMElement(elements.get(0)).             assertEquals("Get the wrong namespace URI", el.getNamespaceURI(), "http://cxf.component.camel.apache.org/").         }     }).to("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD"). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("cxf:bean:routerEndpoint?dataFormat=PAYLOAD").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     CxfPayload<?> payload = exchange.getIn().getBody(CxfPayload.class).                     List<Source> elements = payload.getBodySources().                     assertNotNull("We should get the elements here", elements).                     assertEquals("Get the wrong elements size", elements.size(), 1).                     Element el = new XmlConverter().toDOMElement(elements.get(0)).                     assertEquals("Get the wrong namespace URI", el.getNamespaceURI(), "http://cxf.component.camel.apache.org/").                 }             }).to("cxf:bean:serviceEndpoint?dataFormat=PAYLOAD").         }     }. }
false;public;0;11;;@Test public void testInvokingServiceFromCXFClient() throws Exception {     HelloService client = getCXFClient().     String result = client.echo("hello world").     assertEquals("we should get the right answer from router", result, "echo hello world").     int count = client.getInvocationCount().     client.ping().     // oneway ping invoked, so invocationCount ++     assertEquals("The ping should be invocated", client.getInvocationCount(), ++count). }
