commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     applicationContext = createApplicationContext().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;0;4;;@After public void tearDown() throws Exception {     IOHelper.close(applicationContext). }
false;protected;0;4;;@Override protected CamelContext getCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/util/CxfEndpointBeans.xml"). }
false;protected;0;3;;protected String getEndpointURI() {     return "cxf:bean:testEndpoint". }
false;protected;0;3;;protected String getNoServiceClassURI() {     return "cxf:bean:noServiceClassEndpoint". }
false;public;0;6;;@Test public void testGetServiceClass() throws Exception {     CxfEndpoint endpoint = createEndpoint("cxf:bean:helloServiceEndpoint?serviceClass=#helloServiceImpl").     assertEquals("org.apache.camel.component.cxf.HelloServiceImpl", endpoint.getServiceClass().getName()). }
false;public;0;3;;public char sepChar() {     return '?'. }
false;public;0;14;;@Test public void testGetProperties() throws Exception {     CxfSpringEndpoint endpoint = (CxfSpringEndpoint) createEndpoint(getEndpointURI()).     QName service = endpoint.getServiceName().     assertEquals("We should get the right service name", SERVICE_NAME, service).     assertEquals("The cxf endpoint's DataFromat should be RAW", DataFormat.RAW, endpoint.getDataFormat().dealias()).     endpoint = (CxfSpringEndpoint) createEndpoint("cxf:bean:testPropertiesEndpoint").     service = CxfEndpointUtils.getServiceName(endpoint).     assertEquals("We should get the right service name", SERVICE_NAME, service).     QName port = CxfEndpointUtils.getPortName(endpoint).     assertEquals("We should get the right endpoint name", PORT_NAME, port). }
false;public;0;5;;@Test public void testGetDataFormatFromCxfEndpontProperties() throws Exception {     CxfEndpoint endpoint = createEndpoint(getEndpointURI() + "?dataFormat=PAYLOAD").     assertEquals("We should get the PAYLOAD DataFormat", DataFormat.PAYLOAD, endpoint.getDataFormat()). }
