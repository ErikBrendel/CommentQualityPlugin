commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;10;;protected void checkRequest(String expect, String request) {     // REVIST use a more reliable comparison to tolerate some namespaces being added to the root element     if (expect.equals("ECHO_REQUEST")) {         assertTrue("Get a wrong request", request.startsWith(ECHO_REQUEST.substring(0, 60)) && request.endsWith(ECHO_REQUEST.substring(61))).     } else {         assertTrue("Get a wrong request", request.startsWith(ECHO_BOOLEAN_REQUEST.substring(0, 67)) && request.endsWith(ECHO_BOOLEAN_REQUEST.substring(68))).     } }
false;public;1;28;;@SuppressWarnings("unchecked") public void process(final Exchange exchange) throws Exception {     CxfPayload<SoapHeader> requestPayload = exchange.getIn().getBody(CxfPayload.class).     List<Source> inElements = requestPayload.getBodySources().     List<Source> outElements = new ArrayList<>().     // You can use a customer toStringConverter to turn a CxfPayLoad message into String as you want     String request = exchange.getIn().getBody(String.class).     XmlConverter converter = new XmlConverter().     String documentString = ECHO_RESPONSE.     Element in = new XmlConverter().toDOMElement(inElements.get(0)).     // Just check the element namespace     if (!in.getNamespaceURI().equals(ELEMENT_NAMESPACE)) {         throw new IllegalArgumentException("Wrong element namespace").     }     if (in.getLocalName().equals("echoBoolean")) {         documentString = ECHO_BOOLEAN_RESPONSE.         checkRequest("ECHO_BOOLEAN_REQUEST", request).     } else {         documentString = ECHO_RESPONSE.         checkRequest("ECHO_REQUEST", request).     }     Document outDocument = converter.toDOMDocument(documentString, exchange).     outElements.add(new DOMSource(outDocument.getDocumentElement())).     // set the payload header with null     CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements, null).     exchange.getOut().setBody(responsePayload). }
false;public;0;32;;public void configure() {     from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor() {          @SuppressWarnings("unchecked")         public void process(final Exchange exchange) throws Exception {             CxfPayload<SoapHeader> requestPayload = exchange.getIn().getBody(CxfPayload.class).             List<Source> inElements = requestPayload.getBodySources().             List<Source> outElements = new ArrayList<>().             // You can use a customer toStringConverter to turn a CxfPayLoad message into String as you want             String request = exchange.getIn().getBody(String.class).             XmlConverter converter = new XmlConverter().             String documentString = ECHO_RESPONSE.             Element in = new XmlConverter().toDOMElement(inElements.get(0)).             // Just check the element namespace             if (!in.getNamespaceURI().equals(ELEMENT_NAMESPACE)) {                 throw new IllegalArgumentException("Wrong element namespace").             }             if (in.getLocalName().equals("echoBoolean")) {                 documentString = ECHO_BOOLEAN_RESPONSE.                 checkRequest("ECHO_BOOLEAN_REQUEST", request).             } else {                 documentString = ECHO_RESPONSE.                 checkRequest("ECHO_REQUEST", request).             }             Document outDocument = converter.toDOMDocument(documentString, exchange).             outElements.add(new DOMSource(outDocument.getDocumentElement())).             // set the payload header with null             CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements, null).             exchange.getOut().setBody(responsePayload).         }     }). }
true;protected;0;36;// START SNIPPET: payload ;// START SNIPPET: payload protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor() {                  @SuppressWarnings("unchecked")                 public void process(final Exchange exchange) throws Exception {                     CxfPayload<SoapHeader> requestPayload = exchange.getIn().getBody(CxfPayload.class).                     List<Source> inElements = requestPayload.getBodySources().                     List<Source> outElements = new ArrayList<>().                     // You can use a customer toStringConverter to turn a CxfPayLoad message into String as you want                     String request = exchange.getIn().getBody(String.class).                     XmlConverter converter = new XmlConverter().                     String documentString = ECHO_RESPONSE.                     Element in = new XmlConverter().toDOMElement(inElements.get(0)).                     // Just check the element namespace                     if (!in.getNamespaceURI().equals(ELEMENT_NAMESPACE)) {                         throw new IllegalArgumentException("Wrong element namespace").                     }                     if (in.getLocalName().equals("echoBoolean")) {                         documentString = ECHO_BOOLEAN_RESPONSE.                         checkRequest("ECHO_BOOLEAN_REQUEST", request).                     } else {                         documentString = ECHO_RESPONSE.                         checkRequest("ECHO_REQUEST", request).                     }                     Document outDocument = converter.toDOMDocument(documentString, exchange).                     outElements.add(new DOMSource(outDocument.getDocumentElement())).                     // set the payload header with null                     CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements, null).                     exchange.getOut().setBody(responsePayload).                 }             }).         }     }. }
