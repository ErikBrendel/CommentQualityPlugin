commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void setUpSystemProperty() {     // just force the CXFTestSupport to load before running the test     getPort1(). }
false;public,static;0;3;;public static int getPort1() {     return CXFTestSupport.getPort1(). }
false;public;0;6;;@Before public void setUp() throws Exception {     applicationContext = createApplicationContext().     super.setUp().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;0;5;;@After public void tearDown() throws Exception {     IOHelper.close(applicationContext).     super.tearDown(). }
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
false;public;0;15;;@Test public void testClient() throws Exception {     JaxWsProxyFactoryBean factory = new JaxWsProxyFactoryBean().     factory.setAddress("http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/CamelContext/RouterPort").     factory.setServiceClass(Person.class).     Person person = factory.create(Person.class).     GetPerson payload = new GetPerson().     payload.setPersonId("1234").     GetPersonResponse reply = person.getPerson(payload).     assertEquals("Get the wrong person id.", "1234", reply.getPersonId()). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     // just try to turn the payload to the parameter we want     // to use     GetPerson request = exchange.getIn().getBody(GetPerson.class).     GetPersonResponse reply = new GetPersonResponse().     reply.setPersonId(request.getPersonId()).     exchange.getOut().setBody(reply). }
false;public;0;16;;public void configure() {     from("cxf:bean:routerEndpoint?dataFormat=PAYLOAD").streamCaching().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // just try to turn the payload to the parameter we want             // to use             GetPerson request = exchange.getIn().getBody(GetPerson.class).             GetPersonResponse reply = new GetPersonResponse().             reply.setPersonId(request.getPersonId()).             exchange.getOut().setBody(reply).         }     }). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("cxf:bean:routerEndpoint?dataFormat=PAYLOAD").streamCaching().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // just try to turn the payload to the parameter we want                     // to use                     GetPerson request = exchange.getIn().getBody(GetPerson.class).                     GetPersonResponse reply = new GetPersonResponse().                     reply.setPersonId(request.getPersonId()).                     exchange.getOut().setBody(reply).                 }             }).         }     }. }
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/converter/PayloadConverterBeans.xml"). }
