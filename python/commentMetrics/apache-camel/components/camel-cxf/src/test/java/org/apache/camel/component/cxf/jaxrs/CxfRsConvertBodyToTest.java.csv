commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void configure() {     Response ok = Response.ok().build().     from(CXF_RS_ENDPOINT_URI).convertBodyTo(Customer.class).to("mock:result").transform(constant(ok)). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             Response ok = Response.ok().build().             from(CXF_RS_ENDPOINT_URI).convertBodyTo(Customer.class).to("mock:result").transform(constant(ok)).         }     }. }
false;public;0;21;;@Test public void testPutConsumer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Customer.class).     HttpPut put = new HttpPut("http://localhost:" + CXT + "/rest/customerservice/customers").     StringEntity entity = new StringEntity(PUT_REQUEST, "ISO-8859-1").     entity.setContentType("text/xml. charset=ISO-8859-1").     put.addHeader("test", "header1.header2").     put.setEntity(entity).     CloseableHttpClient httpclient = HttpClientBuilder.create().build().     try {         HttpResponse response = httpclient.execute(put).         assertEquals(200, response.getStatusLine().getStatusCode()).         assertEquals("", EntityUtils.toString(response.getEntity())).     } finally {         httpclient.close().     } }
