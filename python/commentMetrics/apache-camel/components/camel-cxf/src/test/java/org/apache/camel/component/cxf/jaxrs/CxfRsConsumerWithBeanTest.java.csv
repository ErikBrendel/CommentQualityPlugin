commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("service", new ServiceUtil()). }
false;public;0;4;;public void configure() {     from(CXF_RS_ENDPOINT_URI).to("bean://service?method=invoke(${body[0]}, ${body[1]})").     from(CXF_RS_ENDPOINT_URI_2).bean(ServiceUtil.class, "invoke(${body[0]}, ${body[1]})"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from(CXF_RS_ENDPOINT_URI).to("bean://service?method=invoke(${body[0]}, ${body[1]})").             from(CXF_RS_ENDPOINT_URI_2).bean(ServiceUtil.class, "invoke(${body[0]}, ${body[1]})").         }     }. }
false;public;0;5;;@Test public void testPutConsumer() throws Exception {     sendPutRequest("http://localhost:" + CXT + "/rest/customerservice/c20").     sendPutRequest("http://localhost:" + CXT + "/rest2/customerservice/c20"). }
false;private;1;15;;private void sendPutRequest(String uri) throws Exception {     HttpPut put = new HttpPut(uri).     StringEntity entity = new StringEntity("string").     entity.setContentType("text/plain").     put.setEntity(entity).     CloseableHttpClient httpclient = HttpClientBuilder.create().build().     try {         HttpResponse response = httpclient.execute(put).         assertEquals(200, response.getStatusLine().getStatusCode()).         assertEquals("c20string", EntityUtils.toString(response.getEntity())).     } finally {         httpclient.close().     } }
