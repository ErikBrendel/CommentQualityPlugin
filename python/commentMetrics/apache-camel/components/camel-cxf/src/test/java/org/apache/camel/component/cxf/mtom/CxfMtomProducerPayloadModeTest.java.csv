commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     endpoint = Endpoint.publish("http://localhost:" + port + "/" + getClass().getSimpleName() + "/jaxws-mtom/hello", getServiceImpl()).     SOAPBinding binding = (SOAPBinding) endpoint.getBinding().     binding.setMTOMEnabled(isMtomEnabled()). }
false;public;0;6;;@After public void tearDown() throws Exception {     if (endpoint != null) {         endpoint.stop().     } }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     List<Source> elements = new ArrayList<>().     elements.add(new DOMSource(StaxUtils.read(new StringReader(MtomTestHelper.REQ_MESSAGE)).getDocumentElement())).     CxfPayload<SoapHeader> body = new CxfPayload<>(new ArrayList<SoapHeader>(), elements, null).     exchange.getIn().setBody(body).     exchange.getIn().addAttachment(MtomTestHelper.REQ_PHOTO_CID, new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA, "application/octet-stream"))).     exchange.getIn().addAttachment(MtomTestHelper.REQ_IMAGE_CID, new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg, "image/jpeg"))). }
false;public;0;62;;@SuppressWarnings("unchecked") @Test public void testProducer() throws Exception {     if (MtomTestHelper.isAwtHeadless(logger, null)) {         return.     }     // START SNIPPET: producer     Exchange exchange = context.createProducerTemplate().send("direct:testEndpoint", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             List<Source> elements = new ArrayList<>().             elements.add(new DOMSource(StaxUtils.read(new StringReader(MtomTestHelper.REQ_MESSAGE)).getDocumentElement())).             CxfPayload<SoapHeader> body = new CxfPayload<>(new ArrayList<SoapHeader>(), elements, null).             exchange.getIn().setBody(body).             exchange.getIn().addAttachment(MtomTestHelper.REQ_PHOTO_CID, new DataHandler(new ByteArrayDataSource(MtomTestHelper.REQ_PHOTO_DATA, "application/octet-stream"))).             exchange.getIn().addAttachment(MtomTestHelper.REQ_IMAGE_CID, new DataHandler(new ByteArrayDataSource(MtomTestHelper.requestJpeg, "image/jpeg"))).         }     }).     // process response     CxfPayload<SoapHeader> out = exchange.getOut().getBody(CxfPayload.class).     Assert.assertEquals(1, out.getBody().size()).     Map<String, String> ns = new HashMap<>().     ns.put("ns", MtomTestHelper.SERVICE_TYPES_NS).     ns.put("xop", MtomTestHelper.XOP_NS).     XPathUtils xu = new XPathUtils(ns).     Element oute = new XmlConverter().toDOMElement(out.getBody().get(0)).     Element ele = (Element) xu.getValue("//ns:DetailResponse/ns:photo/xop:Include", oute, XPathConstants.NODE).     // skip "cid:"     String photoId = ele.getAttribute("href").substring(4).     ele = (Element) xu.getValue("//ns:DetailResponse/ns:image/xop:Include", oute, XPathConstants.NODE).     // skip "cid:"     String imageId = ele.getAttribute("href").substring(4).     DataHandler dr = exchange.getOut().getAttachment(decodingReference(photoId)).     Assert.assertEquals("application/octet-stream", dr.getContentType()).     MtomTestHelper.assertEquals(MtomTestHelper.RESP_PHOTO_DATA, IOUtils.readBytesFromStream(dr.getInputStream())).     dr = exchange.getOut().getAttachment(decodingReference(imageId)).     Assert.assertEquals("image/jpeg", dr.getContentType()).     BufferedImage image = ImageIO.read(dr.getInputStream()).     Assert.assertEquals(560, image.getWidth()).     Assert.assertEquals(300, image.getHeight()). // END SNIPPET: producer }
true;private;1;3;// CXF encoding the XOP reference since 3.0.1 ;// CXF encoding the XOP reference since 3.0.1 private String decodingReference(String reference) throws UnsupportedEncodingException {     return java.net.URLDecoder.decode(reference, "UTF-8"). }
false;protected;0;3;;protected boolean isMtomEnabled() {     return true. }
false;protected;0;3;;protected Object getServiceImpl() {     return new HelloImpl(). }
