commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void configure() throws Exception {     from(SIMPLE_ENDPOINT_URI).to("mock:a").     from("direct:start").to("mock:result").     from(SIMPLE_ENDPOINT_URI).to("mock:b"). }
false;public;0;21;;@Test public void testMultipleConsumersNotAllowed() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(SIMPLE_ENDPOINT_URI).to("mock:a").             from("direct:start").to("mock:result").             from(SIMPLE_ENDPOINT_URI).to("mock:b").         }     }).     try {         context.start().         fail("Should have thrown an exception").     } catch (FailedToStartRouteException e) {         assertTrue(e.getMessage().endsWith("Multiple consumers for the same endpoint is not allowed: cxf://http://localhost:" + port1 + "/CxfMultipleConsumersSupportTest/test?serviceClass=org.apache.camel.component.cxf.HelloService")).     } }
false;public;0;8;;@Override public void configure() throws Exception {     from(SIMPLE_ENDPOINT_URI).to("mock:a").     from("direct:start").to("mock:result").     from(SIMPLE_OTHER_URI).to("mock:b"). }
false;public;0;22;;@Test public void testNoMultipleConsumers() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(SIMPLE_ENDPOINT_URI).to("mock:a").             from("direct:start").to("mock:result").             from(SIMPLE_OTHER_URI).to("mock:b").         }     }).     // is allowed     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
