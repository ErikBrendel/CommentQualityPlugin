commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/filetocxf").     // set CXF     ServerFactoryBean factory = new ServerFactoryBean().     factory.setAddress("http://localhost:" + port1 + "/FileToCxfMessageDataFormatTest/router").     factory.setServiceClass(HelloService.class).     factory.setServiceBean(new HelloServiceImpl()).     server = factory.create().     server.start().     super.setUp(). }
false;public;0;8;;@Override @After public void tearDown() throws Exception {     super.tearDown().     server.stop().     server.destroy(). }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/spring/FileToCxfMessageDataFormatTest.xml"). }
false;public;0;14;;@Test public void testFileToCxfMessageDataFormat() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file:target/filetocxf", createBody(), Exchange.FILE_NAME, "payload.xml").     assertMockEndpointsSatisfied().     String out = mock.getReceivedExchanges().get(0).getIn().getBody(String.class).     assertNotNull(out).     log.info("Reply payload as a String:\n" + out).     assertTrue("Should invoke the echo operation", out.contains("echo Camel")). }
false;private;0;10;;private String createBody() throws Exception {     return "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:cxf=\"http://cxf.component.camel.apache.org/\">\n" + "   <soapenv:Header/>\n" + "   <soapenv:Body>\n" + "      <cxf:echo>\n" + "          <cxf:arg0>Camel</cxf:arg0>\n" + "      </cxf:echo>\n" + "   </soapenv:Body>\n" + "</soapenv:Envelope>". }
