commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getRouterAddress() {     return "http://localhost:" + CXFTestSupport.getPort1() + "/" + getClass().getSimpleName() + "/router". }
false;protected;0;3;;protected String getServiceAddress() {     return "http://localhost:" + CXFTestSupport.getPort2() + "/" + getClass().getSimpleName() + "/helloworld". }
false;protected;1;2;;protected void configureFactory(ServerFactoryBean svrBean) { }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;12;;@Before public void startService() {     // start a service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(getServiceAddress()).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     configureFactory(svrBean).     server = svrBean.create().     server.start(). }
false;public;0;6;;@After public void shutdownService() {     if (server != null) {         server.stop().     } }
false;public;0;6;;public void configure() {     errorHandler(noErrorHandler()).     from(routerEndpointURI).to("log:org.apache.camel?level=DEBUG").to(serviceEndpointURI). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             errorHandler(noErrorHandler()).             from(routerEndpointURI).to("log:org.apache.camel?level=DEBUG").to(serviceEndpointURI).         }     }. }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return new DefaultCamelContext(). }
false;protected;0;9;;protected HelloService getCXFClient() throws Exception {     ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(getRouterAddress()).     clientBean.setServiceClass(HelloService.class).     HelloService client = (HelloService) proxyFactory.create().     return client. }
false;public;0;7;;@Test public void testInvokingServiceFromCXFClient() throws Exception {     HelloService client = getCXFClient().     String result = client.echo("hello world").     assertEquals("we should get the right answer from router", result, "echo hello world"). }
false;public;0;8;;@Test public void testOnwayInvocation() throws Exception {     HelloService client = getCXFClient().     int count = client.getInvocationCount().     client.ping().     // oneway ping invoked, so invocationCount ++     assertEquals("The ping should be invocated", client.getInvocationCount(), ++count). }
