commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testIsReadableWriteableSpecificMatch() {     DataFormatProvider<Book> p = new DataFormatProvider<>().     p.setFormat("text/plain", new TestDataFormat()).     assertTrue(p.isReadable(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE)).     assertTrue(p.isWriteable(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE)). }
false;public;0;9;;@Test public void testIsReadableWriteableComplexSubMatch() {     DataFormatProvider<Book> p = new DataFormatProvider<>().     p.setFormat("text/plain", new TestDataFormat()).     assertTrue(p.isReadable(Book.class, Book.class, new Annotation[] {}, MediaType.valueOf("text/plain+v2"))).     assertTrue(p.isWriteable(Book.class, Book.class, new Annotation[] {}, MediaType.valueOf("text/plain+v2"))). }
false;public;0;7;;@Test public void testIsReadableWriteableStarMatch() {     DataFormatProvider<Book> p = new DataFormatProvider<>().     p.setFormat(new TestDataFormat()).     assertTrue(p.isReadable(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE)).     assertTrue(p.isWriteable(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE)). }
false;public;0;7;;@Test public void testNotReadableWriteable() {     DataFormatProvider<Book> p = new DataFormatProvider<>().     p.setFormat("application/json", new TestDataFormat()).     assertFalse(p.isReadable(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE)).     assertFalse(p.isWriteable(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE)). }
false;public;0;10;;@Test public void testReadFrom() throws Exception {     DataFormatProvider<Book> p = new DataFormatProvider<>().     p.setFormat("text/plain", new TestDataFormat()).     ByteArrayInputStream bis = new ByteArrayInputStream("dataformat".getBytes()).     Book b = p.readFrom(Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE, new MetadataMap<String, String>(), bis).     assertEquals("dataformat", b.getName()). }
false;public;0;10;;@Test public void testWriteTo() throws Exception {     DataFormatProvider<Book> p = new DataFormatProvider<>().     p.setFormat("text/plain", new TestDataFormat()).     ByteArrayOutputStream bos = new ByteArrayOutputStream().     p.writeTo(new Book("dataformat"), Book.class, Book.class, new Annotation[] {}, MediaType.TEXT_PLAIN_TYPE, new MetadataMap<String, Object>(), bos).     assertEquals("dataformat", bos.toString()). }
false;public;0;3;;public String getName() {     return name. }
false;public;1;4;;@SuppressWarnings("unused") public void setName(String name) {     this.name = name. }
false;public;3;5;;@Override public void marshal(Exchange ex, Object obj, OutputStream os) throws Exception {     os.write(((Book) obj).getName().getBytes()).     os.flush(). }
false;public;2;4;;@Override public Object unmarshal(Exchange ex, InputStream is) throws Exception {     return new Book(IOUtils.readStringFromStream(is)). }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
