commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void startService() throws Exception {     GreeterImpl greeterImpl = new GreeterImpl().     Endpoint.publish(JAXWS_SERVER_ADDRESS, greeterImpl). }
false;public;0;6;;@Before public void setUp() throws Exception {     camelContext = new DefaultCamelContext().     camelContext.start().     template = camelContext.createProducerTemplate(). }
false;public;0;5;;@After public void tearDown() throws Exception {     template.stop().     camelContext.stop(). }
false;public;0;4;;@Test public void testAsyncSoapFault() throws Exception {     invokeSoapFault(false). }
false;public;0;4;;@Test public void testSyncSoapFault() throws Exception {     invokeSoapFault(true). }
false;private;1;14;;private void invokeSoapFault(boolean sync) throws Exception {     String cxfEndpointURI = JAXWS_ENDPOINT_URI.     if (sync) {         cxfEndpointURI = cxfEndpointURI + "&synchronous=true".     }     Exchange exchange = sendJaxWsMessage(cxfEndpointURI, "BadRecordLitFault", "testDocLitFault").     Exception exception = exchange.getException().     // assert we got the exception first     assertNotNull("except to get the exception", exception).     assertTrue("Get a wrong soap fault", exception instanceof BadRecordLitFault).     // check out the message header which is copied from in message     String fileName = exchange.getOut().getHeader(Exchange.FILE_NAME, String.class).     assertEquals("Should get the file name from out message header", "testFile", fileName). }
false;public;1;7;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(message).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, operation).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile"). }
false;private;3;12;;private Exchange sendJaxWsMessage(final String uri, final String message, final String operation) {     Exchange exchange = template.request(uri, new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(message).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, operation).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").         }     }).     return exchange. }
