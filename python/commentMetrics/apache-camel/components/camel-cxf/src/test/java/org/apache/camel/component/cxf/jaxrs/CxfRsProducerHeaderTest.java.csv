commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     inMessage.setBody(null). }
false;public;0;23;;@Test public void testInvokeThatDoesNotInvolveHeaders() throws Exception {     Exchange exchange = camelContext.createProducerTemplate().send("direct://http", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").             inMessage.setBody(null).         }     }).     // verify the out message is a Response object by default     Response response = (Response) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals(200, response.getStatus()).     // test converter (from Response to InputStream)     assertEquals(RESPONSE, CxfUtils.getStringFromInputStream(exchange.getOut().getBody(InputStream.class))). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     inMessage.setHeader(Exchange.HTTP_PATH, "/CxfRsProducerHeaderTest/customerservice/customers/123").     inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json").     inMessage.setHeader("my-user-defined-header", "my-value").     inMessage.setBody(null). }
false;public;0;41;;@Test public void testHeaderFilteringAndPropagation() throws Exception {     Exchange exchange = camelContext.createProducerTemplate().send("direct://http2", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             inMessage.setHeader(Exchange.HTTP_PATH, "/CxfRsProducerHeaderTest/customerservice/customers/123").             inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json").             inMessage.setHeader("my-user-defined-header", "my-value").             inMessage.setBody(null).         }     }).     // get the response message     Response response = (Response) exchange.getOut().getBody().     // check the response code on the Response object as set by the "HttpProcess"     assertEquals(200, response.getStatus()).     // get out message     Message outMessage = exchange.getOut().     // verify the content-type header sent by the "HttpProcess"     assertEquals("text/xml", outMessage.getHeader(Exchange.CONTENT_TYPE)).     // check the user defined header echoed by the "HttpProcess"     assertEquals("my-value", outMessage.getHeader("echo-my-user-defined-header")).     // check the Accept header echoed by the "HttpProcess"     assertEquals("application/json", outMessage.getHeader("echo-accept")).     // make sure the HttpProcess have not seen CxfConstants.CAMEL_CXF_RS_USING_HTTP_API     assertNull(outMessage.getHeader("failed-header-using-http-api")).     // make sure response code has been set in out header     assertEquals(Integer.valueOf(200), outMessage.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class)). }
false;public;1;17;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     Message out = exchange.getOut().     if (in.getHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API) != null) {         // this should have been filtered         out.setHeader("failed-header-using-http-api", CxfConstants.CAMEL_CXF_RS_USING_HTTP_API).     }     out.setHeader("echo-accept", in.getHeader("Accept")).     out.setHeader("echo-my-user-defined-header", in.getHeader("my-user-defined-header")).     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 200).     exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "text/xml"). }
