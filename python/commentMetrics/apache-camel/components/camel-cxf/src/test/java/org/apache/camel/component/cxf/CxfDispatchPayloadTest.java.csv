commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfDispatchPayloadBeans.xml"). }
false;public;0;12;;@Test public void testDispatchPayload() throws Exception {     final String name = "Tila".     Exchange exchange = sendJaxWsDispatchPayload(name, false).     assertEquals("The request should be handled sucessfully ", exchange.isFailed(), false).     org.apache.camel.Message response = exchange.getOut().     assertNotNull("The response must not be null ", response).     String value = decodeResponseFromPayload((CxfPayload<?>) response.getBody(CxfPayload.class), exchange).     assertTrue("The response must match the request ", value.endsWith(name)). }
false;public;0;11;;@Test public void testDispatchPayloadOneway() throws Exception {     final String name = "Tila".     Exchange exchange = sendJaxWsDispatchPayload(name, true).     assertEquals("The request should be handled sucessfully ", exchange.isFailed(), false).     org.apache.camel.Message response = exchange.getOut().     assertNotNull("The response must not be null ", response).     assertNull("The response must be null ", response.getBody()). }
false;public;1;10;;public void process(final Exchange exchange) {     CxfPayload<SoapHeader> request = encodeRequestInPayload(oneway ? PAYLOAD_ONEWAY_TEMPLATE : PAYLOAD_TEMPLATE, name, exchange).     exchange.getIn().setBody(request, CxfPayload.class).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, DISPATCH_NS).     // set the operation for oneway. otherwise use the default operation     if (oneway) {         exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, INVOKE_ONEWAY_NAME).     } }
false;private;2;15;;private Exchange sendJaxWsDispatchPayload(final String name, final boolean oneway) {     Exchange exchange = template.send("direct:producer", new Processor() {          public void process(final Exchange exchange) {             CxfPayload<SoapHeader> request = encodeRequestInPayload(oneway ? PAYLOAD_ONEWAY_TEMPLATE : PAYLOAD_TEMPLATE, name, exchange).             exchange.getIn().setBody(request, CxfPayload.class).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAMESPACE, DISPATCH_NS).             // set the operation for oneway. otherwise use the default operation             if (oneway) {                 exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, INVOKE_ONEWAY_NAME).             }         }     }).     return exchange. }
false;private,static;3;12;;private static <T> CxfPayload<T> encodeRequestInPayload(String form, String name, Exchange exchange) {     String payloadstr = String.format(form, name).     CxfPayload<T> payload = null.     try {         Document doc = getDocumentBuilderFactory().newDocumentBuilder().parse(new ByteArrayInputStream(payloadstr.getBytes("utf-8"))).         payload = CxfPayloadConverter.documentToCxfPayload(doc, exchange).     } catch (Exception e) {     // ignore and let it fail     }     return payload. }
false;private;2;8;;private <T> String decodeResponseFromPayload(CxfPayload<T> payload, Exchange exchange) {     String value = null.     NodeList nodes = CxfPayloadConverter.cxfPayloadToNodeList(payload, exchange).     if (nodes != null && nodes.getLength() == 1 && nodes.item(0) instanceof Element) {         value = getResponseType((Element) nodes.item(0)).     }     return value. }
