commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public,static;0;5;;@BeforeClass public static void startService() {     Greeter implementor = new GreeterImplWithSleep().     Endpoint.publish(JAXWS_SERVER_ADDRESS, implementor). }
false;public;0;4;;@Test public void testInvokingJaxWsServerWithBusUriParams() throws Exception {     sendTimeOutMessage("cxf://" + JAXWS_SERVER_ADDRESS + "?serviceClass=org.apache.hello_world_soap_http.Greeter&bus=#cxf"). }
false;public;0;4;;@Test public void testInvokingJaxWsServerWithoutBusUriParams() throws Exception {     sendTimeOutMessage("cxf://" + JAXWS_SERVER_ADDRESS + "?serviceClass=org.apache.hello_world_soap_http.Greeter"). }
false;public;0;4;;@Test public void testInvokingJaxWsServerWithCxfEndpoint() throws Exception {     sendTimeOutMessage("cxf://bean:springEndpoint"). }
false;public;0;7;;@Test public void testInvokingJaxWsServerWithCxfEndpointWithConfigurer() throws Exception {     Exchange reply = sendJaxWsMessage("cxf://bean:springEndpoint?cxfEndpointConfigurer=#myConfigurer").     // we don't expect the exception here     assertFalse("We don't expect the exception here", reply.isFailed()).     assertEquals("Get a wrong response", "Greet Hello World!", reply.getOut().getBody(String.class)). }
false;public;0;4;;@Test public void testInvokingFromCamelRoute() throws Exception {     sendTimeOutMessage("direct:start"). }
false;public;0;4;;@Test public void testDoCatchWithTimeOutException() throws Exception {     sendTimeOutMessage("direct:doCatch"). }
false;protected;1;6;;protected void sendTimeOutMessage(String endpointUri) throws Exception {     Exchange reply = sendJaxWsMessage(endpointUri).     Exception e = reply.getException().     assertNotNull("We should get the exception cause here", e).     assertTrue("We should get the socket time out exception here", e instanceof SocketTimeoutException). }
false;public;1;6;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION). }
false;protected;1;11;;protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {     Exchange exchange = template.send(endpointUri, new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).         }     }).     return exchange. }
false;protected;0;5;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     // we can put the http conduit configuration here     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/cxfConduitTimeOutContext.xml"). }
false;public;1;4;;@Override public void configure(AbstractWSDLBasedEndpointFactory factoryBean) { // Do nothing here }
false;public;1;9;;@Override public void configureClient(Client client) {     // reset the timeout option to override the spring configuration one     HTTPConduit conduit = (HTTPConduit) client.getConduit().     HTTPClientPolicy policy = new HTTPClientPolicy().     policy.setReceiveTimeout(60000).     conduit.setClient(policy). }
false;public;1;5;;@Override public void configureServer(Server server) { // Do nothing here }
