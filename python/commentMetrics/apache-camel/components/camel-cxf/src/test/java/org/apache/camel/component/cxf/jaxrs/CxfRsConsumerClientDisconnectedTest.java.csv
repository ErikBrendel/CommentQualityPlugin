commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onComplete(Exchange exchange) {     template.sendBody("mock:onComplete", ""). }
false;public;1;4;;@Override public void onFailure(Exchange exchange) { }
false;public;0;26;;public void configure() {     getContext().setStreamCaching(true).     getContext().getStreamCachingStrategy().setSpoolThreshold(1L).     errorHandler(noErrorHandler()).     from(cxfRsEndpointUri).to("mock:result").process(exchange -> {         Thread.sleep(100).         exchange.addOnCompletion(new Synchronization() {              @Override             public void onComplete(Exchange exchange) {                 template.sendBody("mock:onComplete", "").             }              @Override             public void onFailure(Exchange exchange) {             }         }).     }). }
false;protected;0;31;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             getContext().setStreamCaching(true).             getContext().getStreamCachingStrategy().setSpoolThreshold(1L).             errorHandler(noErrorHandler()).             from(cxfRsEndpointUri).to("mock:result").process(exchange -> {                 Thread.sleep(100).                 exchange.addOnCompletion(new Synchronization() {                      @Override                     public void onComplete(Exchange exchange) {                         template.sendBody("mock:onComplete", "").                     }                      @Override                     public void onFailure(Exchange exchange) {                     }                 }).             }).         }     }. }
false;public;0;25;;@Test public void testClientDisconnect() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     MockEndpoint onComplete = getMockEndpoint("mock:onComplete").     onComplete.expectedMessageCount(1).     TelnetClient telnetClient = new TelnetClient().     telnetClient.connect("localhost", PORT).     telnetClient.setTcpNoDelay(true).     telnetClient.setReceiveBufferSize(1).     BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(telnetClient.getOutputStream())).     writer.write("GET " + CONTEXT + "/rest/customerservice/customers HTTP/1.1\nhost: localhost\n\n").     writer.flush().     telnetClient.disconnect().     mock.assertIsSatisfied().     onComplete.assertIsSatisfied(). }
false;protected;0;3;;protected boolean isSynchronous() {     return false. }
