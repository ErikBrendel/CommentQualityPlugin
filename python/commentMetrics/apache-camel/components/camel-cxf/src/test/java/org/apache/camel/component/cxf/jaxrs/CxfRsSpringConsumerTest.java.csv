commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // just throw the CustomException here     throw new CustomException("Here is the exception"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // do something else with the request properties as usual     // do something else with the response     exchange.getOut().getBody(Customer.class).setId(246). }
false;public;0;6;;public void configure() {     errorHandler(new NoErrorHandlerBuilder()).     from("cxfrs://bean://rsServer").process(testProcessor).     from("cxfrs://bean://rsServer2").process(testProcessor).     from("cxfrs://bean://rsServerInvoke?performInvocation=true").process(responseProcessor). }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() throws Exception {     final Processor testProcessor = new Processor() {          public void process(Exchange exchange) throws Exception {             // just throw the CustomException here             throw new CustomException("Here is the exception").         }     }.     final Processor responseProcessor = new Processor() {          public void process(Exchange exchange) throws Exception {             // do something else with the request properties as usual             // do something else with the response             exchange.getOut().getBody(Customer.class).setId(246).         }     }.     return new RouteBuilder() {          public void configure() {             errorHandler(new NoErrorHandlerBuilder()).             from("cxfrs://bean://rsServer").process(testProcessor).             from("cxfrs://bean://rsServer2").process(testProcessor).             from("cxfrs://bean://rsServerInvoke?performInvocation=true").process(responseProcessor).         }     }. }
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringConsumer.xml"). }
false;public;0;5;;@Test public void testMappingException() throws Exception {     String address = "http://localhost:" + port1 + "/CxfRsSpringConsumerTest/customerservice/customers/126".     doTestMappingException(address). }
false;public;0;5;;@Test public void testMappingException2() throws Exception {     String address = "http://localhost:" + port1 + "/CxfRsSpringConsumerTest2/customerservice/customers/126".     doTestMappingException(address). }
false;public;0;7;;@Test public void testInvokeCxfRsConsumer() throws Exception {     String address = "http://localhost:" + port1 + "/CxfRsSpringConsumerInvokeService/customerservice/customers/123".     WebClient wc = WebClient.create(address).     Customer c = wc.accept("application/json").get(Customer.class).     assertEquals(246L, c.getId()). }
false;private;1;13;;private void doTestMappingException(String address) throws Exception {     HttpGet get = new HttpGet(address).     get.addHeader("Accept", "application/json").     CloseableHttpClient httpclient = HttpClientBuilder.create().build().     try {         HttpResponse response = httpclient.execute(get).         assertEquals("Get a wrong status code", 500, response.getStatusLine().getStatusCode()).         assertEquals("Get a worng message header", "exception: Here is the exception", response.getHeaders("exception")[0].toString()).     } finally {         httpclient.close().     } }
