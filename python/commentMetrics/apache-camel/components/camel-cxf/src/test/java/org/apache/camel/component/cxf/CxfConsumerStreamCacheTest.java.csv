commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;1;4;;@Override public void onComplete(Exchange exchange) {     template.sendBody("mock:onComplete", ""). }
false;public;1;4;;@Override public void onFailure(Exchange exchange) { }
false;public;1;21;;public void process(final Exchange exchange) throws Exception {     Message in = exchange.getIn().     Node node = in.getBody(Node.class).     assertNotNull(node).     CachedOutputStream cos = new CachedOutputStream(exchange).     cos.write(RESPONSE.getBytes("UTF-8")).     cos.close().     exchange.getOut().setBody(cos.newStreamCache()).     exchange.addOnCompletion(new Synchronization() {          @Override         public void onComplete(Exchange exchange) {             template.sendBody("mock:onComplete", "").         }          @Override         public void onFailure(Exchange exchange) {         }     }). }
false;public;0;28;;public void configure() {     getContext().setStreamCaching(true).     getContext().getStreamCachingStrategy().setSpoolThreshold(1L).     errorHandler(noErrorHandler()).     from(getFromEndpointUri()).process(new Processor() {          public void process(final Exchange exchange) throws Exception {             Message in = exchange.getIn().             Node node = in.getBody(Node.class).             assertNotNull(node).             CachedOutputStream cos = new CachedOutputStream(exchange).             cos.write(RESPONSE.getBytes("UTF-8")).             cos.close().             exchange.getOut().setBody(cos.newStreamCache()).             exchange.addOnCompletion(new Synchronization() {                  @Override                 public void onComplete(Exchange exchange) {                     template.sendBody("mock:onComplete", "").                 }                  @Override                 public void onFailure(Exchange exchange) {                 }             }).         }     }). }
false;protected;0;32;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             getContext().setStreamCaching(true).             getContext().getStreamCachingStrategy().setSpoolThreshold(1L).             errorHandler(noErrorHandler()).             from(getFromEndpointUri()).process(new Processor() {                  public void process(final Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     Node node = in.getBody(Node.class).                     assertNotNull(node).                     CachedOutputStream cos = new CachedOutputStream(exchange).                     cos.write(RESPONSE.getBytes("UTF-8")).                     cos.close().                     exchange.getOut().setBody(cos.newStreamCache()).                     exchange.addOnCompletion(new Synchronization() {                          @Override                         public void onComplete(Exchange exchange) {                             template.sendBody("mock:onComplete", "").                         }                          @Override                         public void onFailure(Exchange exchange) {                         }                     }).                 }             }).         }     }. }
false;public;0;22;;@Test public void testInvokingServiceFromHttpCompnent() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:onComplete").     mock.expectedMessageCount(2).     // call the service with right post message     String response = template.requestBody(simpleEndpointAddress, REQUEST_MESSAGE, String.class).     assertTrue("Get a wrong response ", response.startsWith(RESPONSE_MESSAGE_BEGINE)).     assertTrue("Get a wrong response ", response.endsWith(RESPONSE_MESSAGE_END)).     try {         template.requestBody(simpleEndpointAddress, null, String.class).         fail("Excpetion to get exception here").     } catch (Exception ex) {     // do nothing here     }     response = template.requestBody(simpleEndpointAddress, REQUEST_MESSAGE, String.class).     assertTrue("Get a wrong response ", response.startsWith(RESPONSE_MESSAGE_BEGINE)).     assertTrue("Get a wrong response ", response.endsWith(RESPONSE_MESSAGE_END)).     mock.assertIsSatisfied(). }
false;protected;0;3;;protected String getFromEndpointUri() {     return simpleEndpointURI. }
false;protected;0;3;;protected boolean isSynchronous() {     return false. }
