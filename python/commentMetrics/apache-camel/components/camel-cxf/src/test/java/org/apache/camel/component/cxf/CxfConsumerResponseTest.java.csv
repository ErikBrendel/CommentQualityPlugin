commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;1;3;;public void process(final Exchange exchange) {     pingCounter++. }
false;public;1;7;;public void process(final Exchange exchange) {     Message in = exchange.getIn().     // Get the parameter list     List<?> parameter = in.getBody(List.class).     // Put the result back     exchange.getOut().setBody(parameter.get(0)). }
false;public;1;21;;public void process(final Exchange exchange) {     assertEquals(DataFormat.POJO, exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)).     Message in = exchange.getIn().     // check the remote IP from the cxfMessage     org.apache.cxf.message.Message cxfMessage = in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class).     assertNotNull("Should get the cxfMessage instance from message header", cxfMessage).     ServletRequest request = (ServletRequest) cxfMessage.get("HTTP.REQUEST").     assertNotNull("Should get the ServletRequest", request).     assertNotNull("Should get the RemoteAddress" + request.getRemoteAddr()).     // Get the parameter list     List<?> parameter = in.getBody(List.class).     // Get the operation name     String operation = (String) in.getHeader(CxfConstants.OPERATION_NAME).     Object result = operation + " " + (String) parameter.get(0).     // Put the result back     exchange.getIn().setBody(result).     // set up the response context which force start document     Map<String, Object> map = new HashMap<>().     map.put("org.apache.cxf.stax.force-start-document", Boolean.TRUE).     exchange.getIn().setHeader(Client.RESPONSE_CONTEXT, map). }
false;public;0;42;;public void configure() {     from(simpleEndpointURI).inOnly("log:test").choice().when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_OPERATION)).process(new Processor() {          public void process(final Exchange exchange) {             assertEquals(DataFormat.POJO, exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)).             Message in = exchange.getIn().             // check the remote IP from the cxfMessage             org.apache.cxf.message.Message cxfMessage = in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class).             assertNotNull("Should get the cxfMessage instance from message header", cxfMessage).             ServletRequest request = (ServletRequest) cxfMessage.get("HTTP.REQUEST").             assertNotNull("Should get the ServletRequest", request).             assertNotNull("Should get the RemoteAddress" + request.getRemoteAddr()).             // Get the parameter list             List<?> parameter = in.getBody(List.class).             // Get the operation name             String operation = (String) in.getHeader(CxfConstants.OPERATION_NAME).             Object result = operation + " " + (String) parameter.get(0).             // Put the result back             exchange.getIn().setBody(result).             // set up the response context which force start document             Map<String, Object> map = new HashMap<>().             map.put("org.apache.cxf.stax.force-start-document", Boolean.TRUE).             exchange.getIn().setHeader(Client.RESPONSE_CONTEXT, map).         }     }).when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_BOOLEAN_OPERATION)).process(new Processor() {          public void process(final Exchange exchange) {             Message in = exchange.getIn().             // Get the parameter list             List<?> parameter = in.getBody(List.class).             // Put the result back             exchange.getOut().setBody(parameter.get(0)).         }     }).when(header(CxfConstants.OPERATION_NAME).isEqualTo(PING_OPERATION)).process(new Processor() {          public void process(final Exchange exchange) {             pingCounter++.         }     }). }
true;protected;0;46;// START SNIPPET: example ;// START SNIPPET: example protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(simpleEndpointURI).inOnly("log:test").choice().when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_OPERATION)).process(new Processor() {                  public void process(final Exchange exchange) {                     assertEquals(DataFormat.POJO, exchange.getProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.class)).                     Message in = exchange.getIn().                     // check the remote IP from the cxfMessage                     org.apache.cxf.message.Message cxfMessage = in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class).                     assertNotNull("Should get the cxfMessage instance from message header", cxfMessage).                     ServletRequest request = (ServletRequest) cxfMessage.get("HTTP.REQUEST").                     assertNotNull("Should get the ServletRequest", request).                     assertNotNull("Should get the RemoteAddress" + request.getRemoteAddr()).                     // Get the parameter list                     List<?> parameter = in.getBody(List.class).                     // Get the operation name                     String operation = (String) in.getHeader(CxfConstants.OPERATION_NAME).                     Object result = operation + " " + (String) parameter.get(0).                     // Put the result back                     exchange.getIn().setBody(result).                     // set up the response context which force start document                     Map<String, Object> map = new HashMap<>().                     map.put("org.apache.cxf.stax.force-start-document", Boolean.TRUE).                     exchange.getIn().setHeader(Client.RESPONSE_CONTEXT, map).                 }             }).when(header(CxfConstants.OPERATION_NAME).isEqualTo(ECHO_BOOLEAN_OPERATION)).process(new Processor() {                  public void process(final Exchange exchange) {                     Message in = exchange.getIn().                     // Get the parameter list                     List<?> parameter = in.getBody(List.class).                     // Put the result back                     exchange.getOut().setBody(parameter.get(0)).                 }             }).when(header(CxfConstants.OPERATION_NAME).isEqualTo(PING_OPERATION)).process(new Processor() {                  public void process(final Exchange exchange) {                     pingCounter++.                 }             }).         }     }. }
false;public;0;23;;// END SNIPPET: example @Test public void testInvokingServiceFromCXFClient() throws Exception {     ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(simpleEndpointAddress).     clientBean.setServiceClass(HelloService.class).     clientBean.setBus(BusFactory.getDefaultBus()).     HelloService client = (HelloService) proxyFactory.create().     assertNotNull(client).     String result = client.echo(TEST_MESSAGE).     assertEquals("We should get the echo string result from router", result, "echo " + TEST_MESSAGE).     Boolean bool = client.echoBoolean(Boolean.TRUE).     assertNotNull("The result should not be null", bool).     assertEquals("We should get the echo boolean result from router ", bool.toString(), "true").     int beforeCallingPing = pingCounter.     client.ping().     int afterCallingPing = pingCounter.     assertTrue("The ping operation doesn't be called", afterCallingPing - beforeCallingPing == 1). }
