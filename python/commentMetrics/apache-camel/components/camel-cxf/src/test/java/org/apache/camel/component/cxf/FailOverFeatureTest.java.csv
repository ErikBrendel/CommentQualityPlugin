commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;9;;@BeforeClass public static void init() {     // publish a web-service     ServerFactoryBean factory = new ServerFactoryBean().     factory.setAddress(SERVICE_ADDRESS).     factory.setServiceBean(new HelloServiceImpl()).     factory.create(). }
false;public;0;8;;@Test public void testPojo() throws Exception {     startRoutePojo().     Assert.assertEquals("hello", tryFailover(POJO_PROXY_ADDRESS)).     if (context2 != null) {         context2.stop().     } }
false;public;0;8;;@Test public void testPayload() throws Exception {     startRoutePayload().     Assert.assertEquals("hello", tryFailover(PAYLOAD_PROXY_ADDRESS)).     if (context1 != null) {         context1.stop().     } }
false;private;0;13;;private void startRoutePayload() throws Exception {     String proxy = "cxf://" + PAYLOAD_PROXY_ADDRESS + "?wsdlURL=" + SERVICE_ADDRESS + "?wsdl" + "&dataFormat=PAYLOAD".     // use a non-exists address to trigger fail-over     // another problem is: if synchronous=false fail-over will not happen     String real = "cxf://" + NONE_EXIST_ADDRESS + "?wsdlURL=" + SERVICE_ADDRESS + "?wsdl" + "&dataFormat=PAYLOAD".     context1 = new DefaultCamelContext().     startRoute(context1, proxy, real). }
false;private;0;12;;private void startRoutePojo() throws Exception {     String proxy = "cxf://" + POJO_PROXY_ADDRESS + "?serviceClass=" + "org.apache.camel.component.cxf.HelloService" + "&dataFormat=POJO".     // use a non-exists address to trigger fail-over     String real = "cxf://" + NONE_EXIST_ADDRESS + "?serviceClass=" + "org.apache.camel.component.cxf.HelloService" + "&dataFormat=POJO".     context2 = new DefaultCamelContext().     startRoute(context2, proxy, real). }
false;public;0;17;;public void configure() {     String alt = SERVICE_ADDRESS.     List<String> serviceList = new ArrayList<>().     serviceList.add(alt).     RandomStrategy strategy = new RandomStrategy().     strategy.setAlternateAddresses(serviceList).     FailoverFeature ff = new FailoverFeature().     ff.setStrategy(strategy).     CxfEndpoint endpoint = (CxfEndpoint) (endpoint(real)).     endpoint.getFeatures().add(ff).     from(proxy).to(endpoint). }
false;private;3;24;;private void startRoute(DefaultCamelContext ctx, final String proxy, final String real) throws Exception {     ctx.addRoutes(new RouteBuilder() {          public void configure() {             String alt = SERVICE_ADDRESS.             List<String> serviceList = new ArrayList<>().             serviceList.add(alt).             RandomStrategy strategy = new RandomStrategy().             strategy.setAlternateAddresses(serviceList).             FailoverFeature ff = new FailoverFeature().             ff.setStrategy(strategy).             CxfEndpoint endpoint = (CxfEndpoint) (endpoint(real)).             endpoint.getFeatures().add(ff).             from(proxy).to(endpoint).         }     }).     ctx.start(). }
false;private;1;10;;private String tryFailover(String url) {     ClientProxyFactoryBean factory = new ClientProxyFactoryBean().     factory.setServiceClass(HelloService.class).     factory.setAddress(url).     HelloService client = (HelloService) factory.create().     return client.sayHello(). }
