commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // check the query     Message inMessage = exchange.getIn().     exchange.getOut().setBody(inMessage.getHeader(Exchange.HTTP_QUERY, String.class)). }
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;3;;public int getPort1() {     return port1. }
false;public;0;3;;public int getPort2() {     return port2. }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducer.xml"). }
false;protected;1;3;;protected void setupDestinationURL(Message inMessage) { // do nothing here }
false;public;1;15;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the operation name     inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer").     // using the proxy client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).     // set a customer header     inMessage.setHeader("key", "value").     // setup the accept content type     inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json").     // set the parameters , if you just have one parameter     // camel will put this object into an Object[] itself     inMessage.setBody("123"). }
false;public;0;31;;@Test public void testGetCustomerWithClientProxyAPI() {     // START SNIPPET: ProxyExample     Exchange exchange = template.send("direct://proxy", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the operation name             inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer").             // using the proxy client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).             // set a customer header             inMessage.setHeader("key", "value").             // setup the accept content type             inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json").             // set the parameters , if you just have one parameter             // camel will put this object into an Object[] itself             inMessage.setBody("123").         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()).     assertEquals("Get a wrong response code", 200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("Get a wrong header value", "value", exchange.getOut().getHeader("key")). // END SNIPPET: ProxyExample }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the operation name     inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomers").     // using the proxy client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).     // set the parameters , if you just have one parameter     // camel will put this object into an Object[] itself     inMessage.setBody(null). }
false;public;0;24;;@Test public void testGetCustomersWithClientProxyAPI() {     Exchange exchange = template.send("direct://proxy", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the operation name             inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomers").             // using the proxy client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).             // set the parameters , if you just have one parameter             // camel will put this object into an Object[] itself             inMessage.setBody(null).         }     }).     // get the response message     List<Customer> response = CastUtils.cast((List<?>) exchange.getOut().getBody()).     assertNotNull("The response should not be null ", response).     assertTrue("Dan is missing!", response.contains(new Customer(113, "Dan"))).     assertTrue("John is missing!", response.contains(new Customer(123, "John"))).     assertEquals("Get a wrong response code", 200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;16;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // using the http central client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     // Specify the response class , cxfrs will use InputStream as the response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     // set a customer header     inMessage.setHeader("key", "value").     // since we use the Get method, so we don't need to set the message body     inMessage.setBody(null). }
false;public;0;32;;@Test public void testGetCustomerWithHttpCentralClientAPI() {     // START SNIPPET: HttpExample     Exchange exchange = template.send("direct://http", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // using the http central client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").             // Specify the response class , cxfrs will use InputStream as the response object type             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).             // set a customer header             inMessage.setHeader("key", "value").             // since we use the Get method, so we don't need to set the message body             inMessage.setBody(null).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()).     assertEquals("Get a wrong response code", 200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)).     assertEquals("Get a wrong header value", "value", exchange.getOut().getHeader("key")). // END SNIPPET: HttpExample }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message message = exchange.getIn().     // set the Http method     message.setHeader(Exchange.HTTP_METHOD, "PUT").     // set the relative path     message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers").     // we just setup the customer with a wrong id     Customer customer = new Customer().     customer.setId(222).     customer.setName("user").     message.setBody(customer). }
false;public;0;26;;@Test public void testSuppressGetCustomerExceptionWithCxfRsEndpoint() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/?httpClientAPI=true&throwExceptionOnFailure=false&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message message = exchange.getIn().             // set the Http method             message.setHeader(Exchange.HTTP_METHOD, "PUT").             // set the relative path             message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers").             // we just setup the customer with a wrong id             Customer customer = new Customer().             customer.setId(222).             customer.setName("user").             message.setBody(customer).         }     }).     // we should get the exception here     assertNull("Don't expect the exception here", exchange.getException()).     Message result = exchange.getOut().     assertEquals("Get a wrong http status code.", 406, result.getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message message = exchange.getIn().     // set the Http method     message.setHeader(Exchange.HTTP_METHOD, "PUT").     // set the relative path     message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers").     // we just setup the customer with a wrong id     Customer customer = new Customer().     customer.setId(222).     customer.setName("user").     message.setBody(customer). }
false;public;0;26;;@Test public void testGetCustomerExceptionWithCxfRsEndpoint() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/?httpClientAPI=true&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message message = exchange.getIn().             // set the Http method             message.setHeader(Exchange.HTTP_METHOD, "PUT").             // set the relative path             message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers").             // we just setup the customer with a wrong id             Customer customer = new Customer().             customer.setId(222).             customer.setName("user").             message.setBody(customer).         }     }).     // we should get the exception here     assertNotNull("Expect the exception here", exchange.getException()).     CxfOperationException exception = (CxfOperationException) exchange.getException().     assertEquals("Get a wrong response body", "Cannot find the customer!", exception.getResponseBody()). }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     // Specify the response class , cxfrs will use InputStream as the response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     // since we use the Get method, so we don't need to set the message body     inMessage.setBody(null). }
false;public;0;25;;@Test public void testGetCustomerWithCxfRsEndpoint() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/?httpClientAPI=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").             // Specify the response class , cxfrs will use InputStream as the response object type             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).             // since we use the Get method, so we don't need to set the message body             inMessage.setBody(null).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()).     assertEquals("Get a wrong response code", 200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/{customerId}").     // Set variables for replacement     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, new String[] { "123" }).     // Specify the response class , cxfrs will use InputStream as the response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     // since we use the Get method, so we don't need to set the message body     inMessage.setBody(null). }
false;public;0;26;;@Test public void testGetCustomerWithVariableReplacementAndCxfRsEndpoint() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/?httpClientAPI=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/{customerId}").             // Set variables for replacement             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_VAR_VALUES, new String[] { "123" }).             // Specify the response class , cxfrs will use InputStream as the response object type             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).             // since we use the Get method, so we don't need to set the message body             inMessage.setBody(null).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()).     assertEquals("Get a wrong response code", 200, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "POST").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode").     // create a new customer object     Customer customer = new Customer().     customer.setId(9999).     customer.setName("HttpClient").     inMessage.setBody(customer). }
false;public;0;28;;@Test public void testAddCustomerUniqueResponseCodeWithHttpClientAPI() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "?httpClientAPI=true&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "POST").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode").             // create a new customer object             Customer customer = new Customer().             customer.setId(9999).             customer.setName("HttpClient").             inMessage.setBody(customer).         }     }).     // get the response message     Response response = (Response) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertNotNull("The response entity should not be null", response.getEntity()).     // check the response code     assertEquals("Get a wrong response code", 201, response.getStatus()).     // check the response code from message header     assertEquals("Get a wrong response code", 201, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the operation name     inMessage.setHeader(CxfConstants.OPERATION_NAME, "addCustomerUniqueResponseCode").     // using the proxy client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).     // set the parameters , if you just have one parameter     // camel will put this object into an Object[] itself     Customer customer = new Customer().     customer.setId(8888).     customer.setName("ProxyAPI").     inMessage.setBody(customer). }
false;public;0;29;;@Test public void testAddCustomerUniqueResponseCodeWithProxyAPI() {     Exchange exchange = template.send("direct://proxy", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the operation name             inMessage.setHeader(CxfConstants.OPERATION_NAME, "addCustomerUniqueResponseCode").             // using the proxy client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).             // set the parameters , if you just have one parameter             // camel will put this object into an Object[] itself             Customer customer = new Customer().             customer.setId(8888).             customer.setName("ProxyAPI").             inMessage.setBody(customer).         }     }).     // get the response message     Response response = (Response) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertNotNull("The response entity should not be null", response.getEntity()).     // check the response code     assertEquals("Get a wrong response code", 201, response.getStatus()).     // check the response code from message header     assertEquals("Get a wrong response code", 201, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;15;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "POST").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode").     // put the response's entity into out message body     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     // create a new customer object     Customer customer = new Customer().     customer.setId(8888).     customer.setName("Willem").     inMessage.setBody(customer). }
false;public;0;28;;@Test public void testAddCustomerUniqueResponseCode() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "?httpClientAPI=true&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "POST").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customersUniqueResponseCode").             // put the response's entity into out message body             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).             // create a new customer object             Customer customer = new Customer().             customer.setId(8888).             customer.setName("Willem").             inMessage.setBody(customer).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertTrue("Get a wrong customer id ", response.getId() != 8888).     assertEquals("Get a wrong customer name", "Willem", response.getName()).     assertEquals("Get a wrong response code", 201, exchange.getOut().getHeader(Exchange.HTTP_RESPONSE_CODE)). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class).     inMessage.setBody(null). }
false;public;0;19;;@Test public void testProducerWithQueryParameters() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort2() + "/" + getClass().getSimpleName() + "/testQuery?httpClientAPI=true&q1=12&q2=13&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class).             inMessage.setBody(null).         }     }).     // get the response message     String response = exchange.getOut().getBody(String.class).     assertNotNull("The response should not be null ", response).     assertEquals("The response value is wrong", "q1=12&q2=13", response). }
false;public;1;15;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class).     // override the parameter setting from URI     // START SNIPPET: QueryMapExample     Map<String, String> queryMap = new LinkedHashMap<>().     queryMap.put("q1", "new").     queryMap.put("q2", "world").     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, queryMap).     // END SNIPPET: QueryMapExample     inMessage.setBody(null). }
false;public;0;26;;@Test public void testProducerWithQueryParametersHeader() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort2() + "/" + getClass().getSimpleName() + "/testQuery?httpClientAPI=true&q1=12&q2=13&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, InputStream.class).             // override the parameter setting from URI             // START SNIPPET: QueryMapExample             Map<String, String> queryMap = new LinkedHashMap<>().             queryMap.put("q1", "new").             queryMap.put("q2", "world").             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_QUERY_MAP, queryMap).             // END SNIPPET: QueryMapExample             inMessage.setBody(null).         }     }).     // get the response message     String response = exchange.getOut().getBody(String.class).     assertNotNull("The response should not be null ", response).     assertEquals("The response value is wrong", "q1=new&q2=world", response). }
false;public;0;8;;@Test public void testRestServerDirectlyGetCustomer() {     // we cannot convert directly to Customer as we need camel-jaxb     String response = template.requestBodyAndHeader("cxfrs:http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/customerservice/customers/123?synchronous=true", null, Exchange.HTTP_METHOD, "GET", String.class).     assertNotNull("The response should not be null ", response). }
false;public;0;12;;@Test public void testRestServerDirectlyAddCustomer() {     Customer input = new Customer().     input.setName("Donald Duck").     // we cannot convert directly to Customer as we need camel-jaxb     String response = template.requestBodyAndHeader("cxfrs:http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/customerservice/customers?synchronous=true", input, Exchange.HTTP_METHOD, "POST", String.class).     assertNotNull(response).     assertTrue(response.endsWith("<name>Donald Duck</name></Customer>")). }
false;public;2;4;;@Override public void initialize(InterceptorProvider interceptorProvider, Bus bus) {     initialized = true. }
false;public;2;4;;@Override public void initialize(Client client, Bus bus) { // Do nothing }
false;public;2;4;;@Override public void initialize(Server server, Bus bus) { // Do nothing }
false;public;1;4;;@Override public void initialize(Bus bus) { // Do nothing }
false;public;0;9;;@Test public void testProducerWithFeature() {     TestFeature feature = context().getRegistry().lookupByNameAndType("testFeature", TestFeature.class).     template.requestBodyAndHeader("cxfrs:http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/customerservice/customers/123?features=#myFeatures&synchronous=true", null, Exchange.HTTP_METHOD, "GET", String.class).     assertTrue("The feature should be initialized", feature.initialized). }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message message = exchange.getIn().     // Try to create a new Customer with an invalid name     message.setHeader(Exchange.HTTP_METHOD, "POST").     message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers").     Customer customer = new Customer().     customer.setId(8888).     // will trigger a 422 response (a common REST server validation response code)     customer.setName("").     message.setBody(customer). }
false;public;0;23;;@Test public void testProducer422Response() {     Exchange exchange = template.send("cxfrs://http://localhost:" + getPort1() + "/" + getClass().getSimpleName() + "/?httpClientAPI=true&synchronous=true", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message message = exchange.getIn().             // Try to create a new Customer with an invalid name             message.setHeader(Exchange.HTTP_METHOD, "POST").             message.setHeader(Exchange.HTTP_PATH, "/customerservice/customers").             Customer customer = new Customer().             customer.setId(8888).             // will trigger a 422 response (a common REST server validation response code)             customer.setName("").             message.setBody(customer).         }     }).     assertNotNull("Expect the exception here", exchange.getException()).     assertThat("Exception should be a CxfOperationException", exchange.getException(), instanceOf(CxfOperationException.class)).     CxfOperationException cxfOperationException = CxfOperationException.class.cast(exchange.getException()).     assertThat("CXF operation exception has correct response code", cxfOperationException.getStatusCode(), is(422)). }
