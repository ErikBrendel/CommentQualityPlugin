commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public,static;0;12;;@BeforeClass public static void startService() {     // start a service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(SERVICE_ADDRESS).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     server = svrBean.create().     server.start(). }
false;public,static;0;6;;@AfterClass public static void shutdownService() {     if (server != null) {         server.stop().     } }
true;public;1;25;// convert response to CxfPayload ;// convert response to CxfPayload public void process(Exchange exchange) throws Exception {     List<?> list = exchange.getIn().getBody(List.class).     CxfPayload<SoapHeader> message = null.     if (list != null) {         // convert the list of objects to CxfPayload any way you like         String s = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">" + list.get(0) + "</return></ns1:echoResponse>".         List<Element> body = new ArrayList<>().         body.add(StaxUtils.read(new StringReader(s)).getDocumentElement()).         message = new CxfPayload<>(new ArrayList<SoapHeader>(), body).     }     exchange.getIn().setBody(message).     // we probably should be smarter in detecting data format based on message body     // but for now we need to explicitly reset the mode (see CAMEL-3420)     exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.PAYLOAD). }
true;public;1;18;// convert request message ;// convert request message public void process(Exchange exchange) throws Exception {     CxfPayload<?> message = exchange.getIn().getBody(CxfPayload.class).     List<String> params = new ArrayList<>().     if (message != null) {         // convert CxfPayload to list of objects any way you like         Element element = new XmlConverter().toDOMElement(message.getBody().get(0)).         params.add(element.getFirstChild().getTextContent()).     }     // replace the body     exchange.getIn().setBody(params). // if you need to change the operation name // exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION). }
false;public;0;54;;public void configure() {     errorHandler(noErrorHandler()).     from(routerEndpointURI).process(new Processor() {          // convert request message         public void process(Exchange exchange) throws Exception {             CxfPayload<?> message = exchange.getIn().getBody(CxfPayload.class).             List<String> params = new ArrayList<>().             if (message != null) {                 // convert CxfPayload to list of objects any way you like                 Element element = new XmlConverter().toDOMElement(message.getBody().get(0)).                 params.add(element.getFirstChild().getTextContent()).             }             // replace the body             exchange.getIn().setBody(params).         // if you need to change the operation name         // exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).         }     }).to(serviceEndpointURI).process(new Processor() {          // convert response to CxfPayload         public void process(Exchange exchange) throws Exception {             List<?> list = exchange.getIn().getBody(List.class).             CxfPayload<SoapHeader> message = null.             if (list != null) {                 // convert the list of objects to CxfPayload any way you like                 String s = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">" + list.get(0) + "</return></ns1:echoResponse>".                 List<Element> body = new ArrayList<>().                 body.add(StaxUtils.read(new StringReader(s)).getDocumentElement()).                 message = new CxfPayload<>(new ArrayList<SoapHeader>(), body).             }             exchange.getIn().setBody(message).             // we probably should be smarter in detecting data format based on message body             // but for now we need to explicitly reset the mode (see CAMEL-3420)             exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.PAYLOAD).         }     }). }
false;protected;0;59;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             errorHandler(noErrorHandler()).             from(routerEndpointURI).process(new Processor() {                  // convert request message                 public void process(Exchange exchange) throws Exception {                     CxfPayload<?> message = exchange.getIn().getBody(CxfPayload.class).                     List<String> params = new ArrayList<>().                     if (message != null) {                         // convert CxfPayload to list of objects any way you like                         Element element = new XmlConverter().toDOMElement(message.getBody().get(0)).                         params.add(element.getFirstChild().getTextContent()).                     }                     // replace the body                     exchange.getIn().setBody(params).                 // if you need to change the operation name                 // exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).                 }             }).to(serviceEndpointURI).process(new Processor() {                  // convert response to CxfPayload                 public void process(Exchange exchange) throws Exception {                     List<?> list = exchange.getIn().getBody(List.class).                     CxfPayload<SoapHeader> message = null.                     if (list != null) {                         // convert the list of objects to CxfPayload any way you like                         String s = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" + "<ns1:echoResponse xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<return xmlns=\"http://cxf.component.camel.apache.org/\">" + list.get(0) + "</return></ns1:echoResponse>".                         List<Element> body = new ArrayList<>().                         body.add(StaxUtils.read(new StringReader(s)).getDocumentElement()).                         message = new CxfPayload<>(new ArrayList<SoapHeader>(), body).                     }                     exchange.getIn().setBody(message).                     // we probably should be smarter in detecting data format based on message body                     // but for now we need to explicitly reset the mode (see CAMEL-3420)                     exchange.setProperty(CxfConstants.DATA_FORMAT_PROPERTY, DataFormat.PAYLOAD).                 }             }).         }     }. }
false;protected;0;3;;protected CamelContext createCamelContext() throws Exception {     return new DefaultCamelContext(). }
false;protected;0;10;;protected HelloService getCXFClient() throws Exception {     ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(ROUTER_ADDRESS).     clientBean.setServiceClass(HelloService.class).     clientBean.setBus(BusFactory.newInstance().createBus()).     HelloService client = (HelloService) proxyFactory.create().     return client. }
false;public;0;7;;@Test public void testInvokingServiceFromCXFClient() throws Exception {     HelloService client = getCXFClient().     String result = client.echo("hello world").     assertEquals("we should get the right answer from router", result, "echo hello world"). }
