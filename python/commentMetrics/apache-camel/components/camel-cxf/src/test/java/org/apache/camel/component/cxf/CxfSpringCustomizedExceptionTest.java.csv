commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;7;;@Before public void setUp() throws Exception {     CXFTestSupport.getPort1().     applicationContext = createApplicationContext().     super.setUp().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;0;5;;@After public void tearDown() throws Exception {     IOHelper.close(applicationContext).     super.tearDown(). }
false;public;0;13;;@Test public void testInvokingServiceFromCamel() throws Exception {     try {         template.sendBodyAndHeader("direct:start", ExchangePattern.InOut, "hello world", CxfConstants.OPERATION_NAME, "echo").         fail("Should have thrown an exception").     } catch (Exception ex) {         Throwable result = ex.getCause().         assertTrue("Exception is not instance of SoapFault", result instanceof SoapFault).         assertEquals("Expect to get right detail message", DETAIL_TEXT, ((SoapFault) result).getDetail().getTextContent()).         assertEquals("Expect to get right fault-code", "{http://schemas.xmlsoap.org/soap/envelope/}Client", ((SoapFault) result).getFaultCode().toString()).     } }
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
false;protected;0;3;;protected ClassPathXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfCustomizedExceptionContext.xml"). }
false;public;0;3;;public SoapFault getSoapFault() {     return SOAP_FAULT. }
