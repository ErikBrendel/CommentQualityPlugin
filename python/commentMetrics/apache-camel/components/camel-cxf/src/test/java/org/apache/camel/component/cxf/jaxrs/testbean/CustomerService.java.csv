commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@GET @Path("/customers/{id}/") public Customer getCustomer(@PathParam("id") String id) {     long idNumber = Long.parseLong(id).     Customer c = customers.get(idNumber).     return c. }
false;public;1;7;;@GET @Path("/customers") public Customer getCustomerByQueryParam(@QueryParam("id") String id) {     long idNumber = Long.parseLong(id).     Customer c = customers.get(idNumber).     return c. }
false;public;0;7;;@GET @Path("/customers/") @Produces("application/xml") public List<Customer> getCustomers() {     List<Customer> list = new ArrayList<>(customers.values()).     return list. }
false;public;1;14;;@PUT @Path("/customers/") public Response updateCustomer(Customer customer) {     Customer c = customers.get(customer.getId()).     Response r.     if (c != null) {         customers.put(customer.getId(), customer).         r = Response.ok().build().     } else {         r = Response.status(406).entity("Cannot find the customer!").build().     }     return r. }
false;public;1;13;;@POST @Path("/customers/") public Response addCustomer(Customer customer) {     if (StringUtils.isEmpty(customer.getName())) {         return Response.status(422).build().     }     customer.setId(currentId.incrementAndGet()).     customers.put(customer.getId(), customer).     return Response.ok(customer).build(). }
false;public;1;9;;@POST @Path("/customersUniqueResponseCode/") public Response addCustomerUniqueResponseCode(Customer customer) {     customer.setId(currentId.incrementAndGet()).     customers.put(customer.getId(), customer).     return Response.status(201).entity(customer).build(). }
false;public;1;18;;@DELETE @Path("/customers/{id}/") public Response deleteCustomer(@PathParam("id") String id) {     long idNumber = Long.parseLong(id).     Customer c = customers.get(idNumber).     Response r.     if (c != null) {         r = Response.ok().build().         customers.remove(idNumber).     } else {         r = Response.notModified().build().     }     if (idNumber == currentId.get()) {         currentId.decrementAndGet().     }     return r. }
false;public;1;6;;@Path("/orders/{orderId}/") public Order getOrder(@PathParam("orderId") String orderId) {     long idNumber = Long.parseLong(orderId).     Order c = orders.get(idNumber).     return c. }
false;final;0;16;;final void init() {     Customer c = new Customer().     c.setName("John").     c.setId(123).     customers.put(c.getId(), c).     c = new Customer().     c.setName("Dan").     c.setId(113).     customers.put(c.getId(), c).     Order o = new Order().     o.setDescription("order 223").     o.setId(223).     orders.put(o.getId(), o). }
