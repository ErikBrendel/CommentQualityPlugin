commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static int getPort1() {     return CXFTestSupport.getPort1(). }
false;public,static;0;3;;public static int getPort2() {     return CXFTestSupport.getPort2(). }
false;protected,abstract;0;1;;protected abstract ClassPathXmlApplicationContext createApplicationContext().
false;public;0;6;;@Before public void setUp() throws Exception {     applicationContext = createApplicationContext().     super.setUp().     assertNotNull("Should have created a valid spring context", applicationContext). }
false;public;0;6;;@After public void tearDown() throws Exception {     IOHelper.close(applicationContext).     super.tearDown(). }
false;public;0;28;;@Test public void testInvokingServiceFromCXFClient() throws Exception {     Service service = Service.create(serviceName).     service.addPort(routerPortName, "http://schemas.xmlsoap.org/soap/", "http://localhost:" + getPort2() + "/" + getClass().getSimpleName() + "/CamelContext/RouterPort").     Greeter greeter = service.getPort(routerPortName, Greeter.class).     String reply = greeter.greetMe("test").     assertNotNull("No response received from service", reply).     assertEquals("Got the wrong reply ", "Hello test", reply).     reply = greeter.sayHi().     assertNotNull("No response received from service", reply).     assertEquals("Got the wrong reply ", "Bonjour", reply).     greeter.greetMeOneWay("call greetMe OneWay !").     // test throw the exception     try {         greeter.testDocLitFault("NoSuchCodeLitFault").         // should get the exception here         fail("Should get the NoSuchCodeLitFault here.").     } catch (NoSuchCodeLitFault fault) {         // expect the fault here         assertNotNull("The fault info should not be null", fault.getFaultInfo()).     } }
false;public;0;13;;@Test public void testRoutingSOAPFault() throws Exception {     try {         template.sendBody("http://localhost:" + getPort2() + "/" + getClass().getSimpleName() + "/CamelContext/RouterPort/", testDocLitFaultBody).         fail("Should get an exception here.").     } catch (RuntimeCamelException exception) {         assertTrue("It should get the response error", exception.getCause() instanceof HttpOperationFailedException).         assertEquals("Get a wrong response code", ((HttpOperationFailedException) exception.getCause()).getStatusCode(), 500).     } }
false;public;0;7;;@Test public void testPublishEndpointUrl() throws Exception {     String response = template.requestBody("http://localhost:" + getPort2() + "/" + getClass().getSimpleName() + "/CamelContext/RouterPort/" + getClass().getSimpleName() + "?wsdl", null, String.class).     assertTrue("Can't find the right service location.", response.indexOf("http://www.simple.com/services/test") > 0). }
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return SpringCamelContext.springCamelContext(applicationContext, true). }
