commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;0;3;;public int getPort1() {     return port1. }
false;public;0;3;;public int getPort2() {     return port2. }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerSession.xml"). }
false;protected;1;3;;protected void setupDestinationURL(Message inMessage) { // do nothing here }
false;public;0;7;;@Test public void testNoSessionProxy() {     String response = sendMessage("direct://proxy", "World", Boolean.FALSE).getOut().getBody(String.class).     assertEquals("New New World", response).     response = sendMessage("direct://proxy", "World", Boolean.FALSE).getOut().getBody(String.class).     assertEquals("New New World", response). }
false;public;0;7;;@Test public void testExchangeSessionProxy() {     String response = sendMessage("direct://proxyexchange", "World", Boolean.FALSE).getOut().getBody(String.class).     assertEquals("Old New World", response).     response = sendMessage("direct://proxyexchange", "World", Boolean.FALSE).getOut().getBody(String.class).     assertEquals("Old New World", response). }
false;public;0;11;;@Test public void testInstanceSession() {     String response = sendMessage("direct://proxyinstance", "World", Boolean.FALSE).getOut().getBody(String.class).     assertEquals("Old New World", response).     response = sendMessage("direct://proxyinstance", "World", Boolean.FALSE).getOut().getBody(String.class).     assertEquals("Old Old World", response).     // we do the instance tests for proxy and http in one test because order     // matters here     response = sendMessage("direct://httpinstance", "World", Boolean.TRUE).getOut().getBody(String.class).     assertEquals("Old Old World", response). }
false;public;0;7;;@Test public void testNoSessionHttp() {     String response = sendMessage("direct://http", "World", Boolean.TRUE).getOut().getBody(String.class).     assertEquals("New New World", response).     response = sendMessage("direct://http", "World", Boolean.TRUE).getOut().getBody(String.class).     assertEquals("New New World", response). }
false;public;0;7;;@Test public void testExchangeSessionHttp() {     String response = sendMessage("direct://httpexchange", "World", Boolean.TRUE).getOut().getBody(String.class).     assertEquals("Old New World", response).     response = sendMessage("direct://httpexchange", "World", Boolean.TRUE).getOut().getBody(String.class).     assertEquals("Old New World", response). }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     inMessage.setHeader(CxfConstants.OPERATION_NAME, "echo").     inMessage.setHeader(Exchange.HTTP_METHOD, "POST").     inMessage.setHeader(Exchange.HTTP_PATH, "/echoservice/echo").     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, httpApi).     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, String.class).     inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json").     inMessage.setBody(body). }
false;private;3;16;;private Exchange sendMessage(String endpoint, String body, Boolean httpApi) {     Exchange exchange = template.send(endpoint, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             inMessage.setHeader(CxfConstants.OPERATION_NAME, "echo").             inMessage.setHeader(Exchange.HTTP_METHOD, "POST").             inMessage.setHeader(Exchange.HTTP_PATH, "/echoservice/echo").             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, httpApi).             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, String.class).             inMessage.setHeader(Exchange.ACCEPT_CONTENT_TYPE, "application/json").             inMessage.setBody(body).         }     }).     return exchange. }
