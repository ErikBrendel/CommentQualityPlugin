commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public,static;0;10;;@BeforeClass public static void startServer() throws Exception {     // start a simple front service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(SIMPLE_SERVER_ADDRESS).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     svrBean.setBus(BusFactory.getDefaultBus()).     svrBean.create(). }
false;public;0;11;;public void configure() {     from("direct:EndpointA").to(getSimpleEndpointUri()).     from("direct:EndpointB").to(getSimpleEndpointUri() + "&dataFormat=RAW").     from("direct:EndpointC").to(getSimpleEndpointUri() + "&dataFormat=PAYLOAD").     // This route is for checking camel-cxf producer throwing exception     from("direct:start").doTry().to("cxf://http://localhost:10000/false?serviceClass=org.apache.camel.component.cxf.HelloService").doCatch(org.apache.cxf.interceptor.Fault.class).to("mock:error"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:EndpointA").to(getSimpleEndpointUri()).             from("direct:EndpointB").to(getSimpleEndpointUri() + "&dataFormat=RAW").             from("direct:EndpointC").to(getSimpleEndpointUri() + "&dataFormat=PAYLOAD").             // This route is for checking camel-cxf producer throwing exception             from("direct:start").doTry().to("cxf://http://localhost:10000/false?serviceClass=org.apache.camel.component.cxf.HelloService").doCatch(org.apache.cxf.interceptor.Fault.class).to("mock:error").         }     }. }
false;public;0;14;;@Test public void testCannotSendRequest() throws Exception {     MockEndpoint error = getMockEndpoint("mock:error").     error.expectedMessageCount(1).     Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut).     final List<String> params = new ArrayList<>().     // Prepare the request message for the camel-cxf procedure     params.add(TEST_MESSAGE).     senderExchange.getIn().setBody(params).     senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).     template.send("direct:start", senderExchange).     error.assertIsSatisfied(). }
false;public;0;9;;@Test public void testCxfEndpointUris() throws Exception {     CxfEndpoint endpoint = context.getEndpoint(getSimpleEndpointUri(), CxfEndpoint.class).     assertEquals("Get a wrong endpoint uri", getSimpleEndpointUri(), endpoint.getEndpointUri()).     endpoint = context.getEndpoint(getSimpleEndpointUri() + "&dataFormat=RAW", CxfEndpoint.class).     assertEquals("Get a wrong endpoint uri", URISupport.normalizeUri(getSimpleEndpointUri() + "&dataFormat=RAW"), endpoint.getEndpointUri()). }
false;public;0;24;;@Test public void testInvokingSimpleServerWithParams() throws Exception {     // START SNIPPET: sending     Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut).     final List<String> params = new ArrayList<>().     // Prepare the request message for the camel-cxf procedure     params.add(TEST_MESSAGE).     senderExchange.getIn().setBody(params).     senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).     Exchange exchange = template.send("direct:EndpointA", senderExchange).     org.apache.camel.Message out = exchange.getOut().     // The response message's body is an MessageContentsList which first element is the return value of the operation,     // If there are some holder parameters, the holder parameter will be filled in the reset of List.     // The result will be extract from the MessageContentsList with the String class type     MessageContentsList result = (MessageContentsList) out.getBody().     LOG.info("Received output text: " + result.get(0)).     Map<String, Object> responseContext = CastUtils.cast((Map<?, ?>) out.getHeader(Client.RESPONSE_CONTEXT)).     assertNotNull(responseContext).     assertEquals("We should get the response context here", "UTF-8", responseContext.get(org.apache.cxf.message.Message.ENCODING)).     assertEquals("Reply body on Camel is wrong", "echo " + TEST_MESSAGE, result.get(0)). // END SNIPPET: sending }
false;public;0;12;;@Test public void testInvokingSimpleServerWithMessageDataFormat() throws Exception {     Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut).     senderExchange.getIn().setBody(REQUEST_MESSAGE).     Exchange exchange = template.send("direct:EndpointB", senderExchange).     org.apache.camel.Message out = exchange.getOut().     String response = out.getBody(String.class).     assertTrue("It should has the echo message", response.indexOf("echo " + TEST_MESSAGE) > 0).     assertTrue("It should has the echoResponse tag", response.indexOf("echoResponse") > 0). }
false;public;0;22;;@Test public void testInvokingSimpleServerWithPayLoadDataFormat() throws Exception {     Exchange senderExchange = new DefaultExchange(context, ExchangePattern.InOut).     senderExchange.getIn().setBody(REQUEST_PAYLOAD).     // We need to specify the operation name to help CxfProducer to look up the BindingOperationInfo     senderExchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "echo").     Exchange exchange = template.send("direct:EndpointC", senderExchange).     org.apache.camel.Message out = exchange.getOut().     String response = out.getBody(String.class).     assertTrue("It should has the echo message", response.indexOf("echo " + TEST_MESSAGE) > 0).     assertTrue("It should has the echoResponse tag", response.indexOf("echoResponse") > 0).     senderExchange = new DefaultExchange(context, ExchangePattern.InOut).     senderExchange.getIn().setBody(REQUEST_PAYLOAD).     // Don't specify operation information here     exchange = template.send("direct:EndpointC", senderExchange).     assertNotNull("Expect exception here.", exchange.getException()).     assertTrue(exchange.getException() instanceof IllegalArgumentException). }
false;private;0;4;;private String getSimpleEndpointUri() {     return "cxf://" + SIMPLE_SERVER_ADDRESS + "?serviceClass=org.apache.camel.component.cxf.HelloService". }
