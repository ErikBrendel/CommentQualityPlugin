commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected String[] getApplicationContextFiles() {     CXFTestSupport.getPort1().     return new String[] { "org/apache/camel/component/cxf/spring/CxfEndpointBeansRouter.xml" }. }
false;public;0;9;;@Test public void testCxfEndpointBeanDefinitionParser() {     CxfEndpoint routerEndpoint = ctx.getBean("routerEndpoint", CxfEndpoint.class).     assertEquals("Got the wrong endpoint address", routerEndpoint.getAddress(), "http://localhost:" + CXFTestSupport.getPort1() + "/CxfEndpointBeansRouterTest/router").     assertEquals("Got the wrong endpont service class", "org.apache.camel.component.cxf.HelloService", routerEndpoint.getServiceClass().getName()). }
false;public;0;15;;@Test public void testCreateCxfEndpointFromURI() throws Exception {     CamelContext camelContext = ctx.getBean("camel", CamelContext.class).     CxfEndpoint endpoint1 = camelContext.getEndpoint("cxf:bean:routerEndpoint?address=http://localhost:9000/test1", CxfEndpoint.class).     CxfEndpoint endpoint2 = camelContext.getEndpoint("cxf:bean:routerEndpoint?address=http://localhost:8000/test2", CxfEndpoint.class).     assertEquals("Get a wrong endpoint address.", "http://localhost:9000/test1", endpoint1.getAddress()).     assertEquals("Get a wrong endpoint address.", "http://localhost:8000/test2", endpoint2.getAddress()).     // the uri will always be normalized     String uri1 = URISupport.normalizeUri("cxf://bean:routerEndpoint?address=http://localhost:9000/test1").     String uri2 = URISupport.normalizeUri("cxf://bean:routerEndpoint?address=http://localhost:8000/test2").     assertEquals("Get a wrong endpoint key.", uri1, endpoint1.getEndpointKey()).     assertEquals("Get a wrong endpoint key.", uri2, endpoint2.getEndpointKey()). }
false;public;1;6;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add("hello").     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "echo"). }
false;public;0;20;;@Test public void testCxfBusConfiguration() throws Exception {     // get the camelContext from application context     CamelContext camelContext = ctx.getBean("camel", CamelContext.class).     ProducerTemplate template = camelContext.createProducerTemplate().     Exchange reply = template.request("cxf:bean:serviceEndpoint", new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add("hello").             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "echo").         }     }).     Exception ex = reply.getException().     assertTrue("Should get the fault here", ex instanceof org.apache.cxf.interceptor.Fault || ex instanceof HTTPException). }
false;public;0;15;;@Test public void testCxfBeanWithCamelPropertiesHolder() throws Exception {     // get the camelContext from application context     CamelContext camelContext = ctx.getBean("camel", CamelContext.class).     CxfEndpoint testEndpoint = camelContext.getEndpoint("cxf:bean:testEndpoint", CxfEndpoint.class).     QName endpointName = QName.valueOf("{http://org.apache.camel.component.cxf}myEndpoint").     QName serviceName = QName.valueOf("{http://org.apache.camel.component.cxf}myService").     assertEquals("Got a wrong address", "http://localhost:9000/testEndpoint", testEndpoint.getAddress()).     assertEquals("Got a wrong bindingId", "http://schemas.xmlsoap.org/wsdl/soap12/", testEndpoint.getBindingId()).     assertEquals("Got a wrong transportId", "http://cxf.apache.org/transports/http", testEndpoint.getTransportId()).     assertEquals("Got a wrong endpointName", endpointName, testEndpoint.getPortName()).     assertEquals("Got a wrong WsdlURL", "wsdl/test.wsdl", testEndpoint.getWsdlURL()).     assertEquals("Got a wrong serviceName", serviceName, testEndpoint.getServiceName()). }
