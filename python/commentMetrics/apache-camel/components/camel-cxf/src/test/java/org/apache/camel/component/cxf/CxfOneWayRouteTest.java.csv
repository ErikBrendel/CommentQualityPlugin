commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setup() {     bindingException = null.     bindingDone = false.     onCompeletedCalled = false. }
false;protected;0;5;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     // we can put the http conduit configuration here     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfOneWayRouteBeans.xml"). }
false;protected;0;6;;protected Greeter getCXFClient() throws Exception {     Service service = Service.create(SERVICE_NAME).     service.addPort(PORT_NAME, "http://schemas.xmlsoap.org/soap/", ROUTER_ADDRESS).     Greeter greeter = service.getPort(PORT_NAME, Greeter.class).     return greeter. }
false;public;0;19;;@Test public void testInvokingOneWayServiceFromCXFClient() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/camel-file/cxf-oneway-route").     Greeter client = getCXFClient().     client.greetMeOneWay("lemac").     // may need to wait until the oneway call completes     long waitUntil = System.currentTimeMillis() + 10000.     while (!bindingDone && System.currentTimeMillis() < waitUntil) {         Thread.sleep(1000).     }     assertMockEndpointsSatisfied().     assertTrue("UnitOfWork done should be called", onCompeletedCalled).     assertNull("exception occured: " + bindingException, bindingException). }
false;public;1;4;;@Override public void onComplete(Exchange exchange) {     onCompeletedCalled = true. }
false;public;1;4;;@Override public void onFailure(Exchange exchange) { // do nothing here }
false;public;1;22;;public void process(Exchange exchange) throws Exception {     // just check the MEP here     assertEquals("Don't get the right MEP", ExchangePattern.InOnly, exchange.getPattern()).     // adding some binary segment     String msg = exchange.getIn().getBody(String.class).     ByteArrayOutputStream bos = new ByteArrayOutputStream().     bos.write(MAGIC).     bos.write(msg.getBytes()).     exchange.getIn().setBody(bos.toByteArray()).     // add compliation     exchange.getUnitOfWork().addSynchronization(new Synchronization() {          @Override         public void onComplete(Exchange exchange) {             onCompeletedCalled = true.         }          @Override         public void onFailure(Exchange exchange) {         // do nothing here         }     }). }
false;public;2;11;;@Override public void populateCxfResponseFromExchange(Exchange camelExchange, org.apache.cxf.message.Exchange cxfExchange) {     try {         super.populateCxfResponseFromExchange(camelExchange, cxfExchange).     } catch (RuntimeException e) {         bindingException = e.         throw e.     } finally {         bindingDone = true.     } }
