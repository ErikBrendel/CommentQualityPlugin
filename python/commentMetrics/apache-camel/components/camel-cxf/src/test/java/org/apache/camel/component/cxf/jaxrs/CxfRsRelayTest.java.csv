commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;@WebMethod @POST @Path("/path1") @Consumes("multipart/form-data") public void upload(@Multipart(value = "content", type = "application/octet-stream") java.lang.Number content, @Multipart(value = "name", type = "text/plain") String name) { }
false;private;0;6;;@WebMethod @GET @Path("/path2") @Consumes("text/plain") private void upload() { }
false;public;2;7;;@WebMethod @POST @Path("/path3") @Consumes("multipart/form-data") public void upload(@Multipart(value = "content", type = "application/octet-stream") InputStream content, @Multipart(value = "name", type = "text/plain") String name) { }
true;public;0;9;/**  * Sends a request to the first endpoint in the route  */ ;/**  * Sends a request to the first endpoint in the route  */ public void run() {     try {         JAXRSClientFactory.create("http://localhost:" + port6 + "/CxfRsRelayTest/rest", UploadService.class).upload(CamelRouteBuilder.class.getResourceAsStream(SAMPLE_CONTENT_PATH), SAMPLE_NAME).     } catch (Exception e) {         log.warn("Error uploading to http://localhost:" + port6 + "/CxfRsRelayTest/rest", e).     } }
true;public;0;31;/**  * That test builds a route chaining two cxfrs endpoints. It shows a request  * sent to the first one will be correctly transferred and consumed by the  * other one.  */ ;/**  * That test builds a route chaining two cxfrs endpoints. It shows a request  * sent to the first one will be correctly transferred and consumed by the  * other one.  */ @Test public void testJaxrsRelayRoute() throws Exception {     final Main main = new Main().     try {         main.setApplicationContextUri("org/apache/camel/component/cxf/jaxrs/CxfRsSpringRelay.xml").         main.start().         Thread t = new Thread(new Runnable() {              /**              * Sends a request to the first endpoint in the route              */             public void run() {                 try {                     JAXRSClientFactory.create("http://localhost:" + port6 + "/CxfRsRelayTest/rest", UploadService.class).upload(CamelRouteBuilder.class.getResourceAsStream(SAMPLE_CONTENT_PATH), SAMPLE_NAME).                 } catch (Exception e) {                     log.warn("Error uploading to http://localhost:" + port6 + "/CxfRsRelayTest/rest", e).                 }             }         }).         t.start().         LATCH.await(10, TimeUnit.SECONDS).         assertEquals(SAMPLE_NAME, name).         StringWriter writer = new StringWriter().         IOUtils.copyAndCloseInput(new InputStreamReader(CamelRouteBuilder.class.getResourceAsStream(SAMPLE_CONTENT_PATH)), writer).         assertEquals(writer.toString(), content).     } finally {         main.stop().     } }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     // once the message arrives in the second endpoint, stores     // the message components and warns results can be compared     content = exchange.getIn().getHeader("content", String.class).     name = exchange.getIn().getHeader("name", String.class).     LATCH.countDown(). }
false;public;0;15;;@Override public void configure() throws InterruptedException {     from("upload1").removeHeader(Exchange.CONTENT_TYPE).to("upload2Client").     from("upload2").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // once the message arrives in the second endpoint, stores             // the message components and warns results can be compared             content = exchange.getIn().getHeader("content", String.class).             name = exchange.getIn().getHeader("name", String.class).             LATCH.countDown().         }     }). }
