commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public,static;0;5;;@BeforeClass public static void startService() {     Greeter implementor = new GreeterImplWithSleep().     Endpoint.publish(SERVER_ADDRESS, implementor). }
false;public;0;4;;@Test public void testInvokingJaxWsServerWithCxfEndpoint() throws Exception {     sendTimeOutMessage("cxf://bean:springEndpoint"). }
false;protected;1;6;;protected void sendTimeOutMessage(String endpointUri) throws Exception {     Exchange reply = sendJaxWsMessage(endpointUri).     Exception e = reply.getException().     assertNotNull("We should get the exception cause here", e).     assertTrue("We should get the socket time out exception here", e instanceof SocketTimeoutException). }
false;public;1;14;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).     // setup the receive timeout dynamically     Map<String, Object> requestContext = new HashMap<>().     HTTPClientPolicy clientPolicy = new HTTPClientPolicy().     clientPolicy.setReceiveTimeout(100).     requestContext.put(HTTPClientPolicy.class.getName(), clientPolicy).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext). }
false;protected;1;19;;protected Exchange sendJaxWsMessage(String endpointUri) throws InterruptedException {     Exchange exchange = template.send(endpointUri, new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).             // setup the receive timeout dynamically             Map<String, Object> requestContext = new HashMap<>().             HTTPClientPolicy clientPolicy = new HTTPClientPolicy().             clientPolicy.setReceiveTimeout(100).             requestContext.put(HTTPClientPolicy.class.getName(), clientPolicy).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(Client.REQUEST_CONTEXT, requestContext).         }     }).     return exchange. }
false;protected;0;5;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     // we can put the http conduit configuration here     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/cxfMessageHeaderTimeOutContext.xml"). }
