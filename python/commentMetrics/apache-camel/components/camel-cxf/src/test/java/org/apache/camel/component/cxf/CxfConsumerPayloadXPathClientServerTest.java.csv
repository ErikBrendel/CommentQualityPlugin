commented;modifiers;parameterAmount;loc;comment;code
false;public;1;37;;@SuppressWarnings("unchecked") @Override public void process(final Exchange exchange) throws Exception {     Object request = exchange.getIn().getBody().     assertIsInstanceOf(CxfPayload.class, request).     // attempt 1) applying XPath to exchange.getIn().getBody()     receivedMessageCxfPayloadApplyingXPath = XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context, request, String.class).     // attempt 2) in stead of XPATH, browse the DOM-tree     CxfPayload<SoapHeader> payload = (CxfPayload<SoapHeader>) request.     Element el = payload.getBody().get(0).     Element el2 = (Element) el.getFirstChild().     Text textnode = (Text) el2.getFirstChild().     receivedMessageByDom = textnode.getNodeValue().     textnode = (Text) textnode.getNextSibling().     while (textnode != null) {         // the textnode appears to have siblings!         receivedMessageByDom = receivedMessageByDom + textnode.getNodeValue().         textnode = (Text) textnode.getNextSibling().     }     // attempt 3) apply XPATH after converting CxfPayload to String     request = exchange.getIn().getBody(String.class).     assertIsInstanceOf(String.class, request).     receivedMessageStringApplyingXPath = XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context, request, String.class).     // build some dummy response     XmlConverter converter = new XmlConverter().     Document outDocument = converter.toDOMDocument(ECHO_RESPONSE, exchange).     List<Source> outElements = new ArrayList<>().     outElements.add(new DOMSource(outDocument.getDocumentElement())).     // set the payload header with null     CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements, null).     exchange.getOut().setBody(responsePayload). }
false;public;0;42;;@Override public void configure() {     from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor() {          @SuppressWarnings("unchecked")         @Override         public void process(final Exchange exchange) throws Exception {             Object request = exchange.getIn().getBody().             assertIsInstanceOf(CxfPayload.class, request).             // attempt 1) applying XPath to exchange.getIn().getBody()             receivedMessageCxfPayloadApplyingXPath = XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context, request, String.class).             // attempt 2) in stead of XPATH, browse the DOM-tree             CxfPayload<SoapHeader> payload = (CxfPayload<SoapHeader>) request.             Element el = payload.getBody().get(0).             Element el2 = (Element) el.getFirstChild().             Text textnode = (Text) el2.getFirstChild().             receivedMessageByDom = textnode.getNodeValue().             textnode = (Text) textnode.getNextSibling().             while (textnode != null) {                 // the textnode appears to have siblings!                 receivedMessageByDom = receivedMessageByDom + textnode.getNodeValue().                 textnode = (Text) textnode.getNextSibling().             }             // attempt 3) apply XPATH after converting CxfPayload to String             request = exchange.getIn().getBody(String.class).             assertIsInstanceOf(String.class, request).             receivedMessageStringApplyingXPath = XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context, request, String.class).             // build some dummy response             XmlConverter converter = new XmlConverter().             Document outDocument = converter.toDOMDocument(ECHO_RESPONSE, exchange).             List<Source> outElements = new ArrayList<>().             outElements.add(new DOMSource(outDocument.getDocumentElement())).             // set the payload header with null             CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements, null).             exchange.getOut().setBody(responsePayload).         }     }). }
false;protected;0;47;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             from(simpleEndpointURI + "&dataFormat=PAYLOAD").to("log:info").process(new Processor() {                  @SuppressWarnings("unchecked")                 @Override                 public void process(final Exchange exchange) throws Exception {                     Object request = exchange.getIn().getBody().                     assertIsInstanceOf(CxfPayload.class, request).                     // attempt 1) applying XPath to exchange.getIn().getBody()                     receivedMessageCxfPayloadApplyingXPath = XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context, request, String.class).                     // attempt 2) in stead of XPATH, browse the DOM-tree                     CxfPayload<SoapHeader> payload = (CxfPayload<SoapHeader>) request.                     Element el = payload.getBody().get(0).                     Element el2 = (Element) el.getFirstChild().                     Text textnode = (Text) el2.getFirstChild().                     receivedMessageByDom = textnode.getNodeValue().                     textnode = (Text) textnode.getNextSibling().                     while (textnode != null) {                         // the textnode appears to have siblings!                         receivedMessageByDom = receivedMessageByDom + textnode.getNodeValue().                         textnode = (Text) textnode.getNextSibling().                     }                     // attempt 3) apply XPATH after converting CxfPayload to String                     request = exchange.getIn().getBody(String.class).                     assertIsInstanceOf(String.class, request).                     receivedMessageStringApplyingXPath = XPathBuilder.xpath("//*[name()='arg0']/text()").evaluate(context, request, String.class).                     // build some dummy response                     XmlConverter converter = new XmlConverter().                     Document outDocument = converter.toDOMDocument(ECHO_RESPONSE, exchange).                     List<Source> outElements = new ArrayList<>().                     outElements.add(new DOMSource(outDocument.getDocumentElement())).                     // set the payload header with null                     CxfPayload<SoapHeader> responsePayload = new CxfPayload<>(null, outElements, null).                     exchange.getOut().setBody(responsePayload).                 }             }).         }     }. }
false;private;1;3;;private void buildTestMessage(int size) {     testMessage = StringUtils.repeat("x", size). }
false;public;0;11;;@Test public void testMessageWithIncreasingSize() throws Exception {     execTest(1).     execTest(10).     execTest(100).     execTest(1000).     execTest(10000).     execTest(100000). }
false;private;1;19;;private void execTest(int size) throws Exception {     buildTestMessage(size).     ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(simpleEndpointAddress).     clientBean.setServiceClass(HelloService.class).     clientBean.setBus(BusFactory.getDefaultBus()).     HelloService client = (HelloService) proxyFactory.create().     String result = client.echo(testMessage).     assertEquals("We should get the echo string result from router", "echo Hello World!", result).     // check received requests     assertEquals("Lengths of testMessage and receiveMessage should be equal (conversion body to String),", testMessage.length(), receivedMessageStringApplyingXPath.length()).     assertEquals("Lengths of receivedMessageByDom and receivedMessageCxfPayloadApplyingXPath should be equal", receivedMessageCxfPayloadApplyingXPath.length(), receivedMessageByDom.length()).     assertEquals("Lengths of testMessage and receiveMessage should be equal (body is CxfPayload),", testMessage.length(), receivedMessageCxfPayloadApplyingXPath.length()). }
