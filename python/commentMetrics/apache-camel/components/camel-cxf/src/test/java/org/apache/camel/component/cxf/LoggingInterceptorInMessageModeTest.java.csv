commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;11;;@BeforeClass public static void startService() {     // start a service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(SERVICE_ADDRESS).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     server = svrBean.create(). }
false;public,static;0;5;;@AfterClass public static void stopService() {     server.stop().     server.destroy(). }
false;public;0;32;;@Test public void testInvokingServiceFromCXFClient() throws Exception {     LoggingOutInterceptor logInterceptor = null.     for (Interceptor<?> interceptor : context.getEndpoint("cxf:bean:serviceEndpoint", CxfSpringEndpoint.class).getOutInterceptors()) {         if (interceptor instanceof LoggingOutInterceptor) {             logInterceptor = LoggingOutInterceptor.class.cast(interceptor).             break.         }     }     assertNotNull(logInterceptor).     // StringPrintWriter writer = new StringPrintWriter().     // Unfortunately, LoggingOutInterceptor does not have a setter for writer so     // we can't capture the output to verify.     // logInterceptor.setPrintWriter(writer).     ClientProxyFactoryBean proxyFactory = new ClientProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(ROUTER_ADDRESS).     clientBean.setServiceClass(HelloService.class).     HelloService client = (HelloService) proxyFactory.create().     String result = client.echo("hello world").     assertEquals("we should get the right answer from router", result, "echo hello world"). // assertTrue(writer.getString().indexOf("hello world") > 0). }
false;private;0;4;;private String getString() {     flush().     return ((StringWriter) out).toString(). }
