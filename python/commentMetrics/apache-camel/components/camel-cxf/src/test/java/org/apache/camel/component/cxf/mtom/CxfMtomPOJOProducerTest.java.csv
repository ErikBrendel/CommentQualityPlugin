commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     endpoint = Endpoint.publish("http://localhost:" + port + "/CxfMtomPOJOProducerTest/jaxws-mtom/hello", getImpl()).     SOAPBinding binding = (SOAPBinding) endpoint.getBinding().     binding.setMTOMEnabled(true). }
false;public;0;6;;@After public void tearDown() throws Exception {     if (endpoint != null) {         endpoint.stop().     } }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(new Object[] { photo, image }). }
false;public;0;33;;@SuppressWarnings("unchecked") @Test public void testInvokingServiceFromCxfProducer() throws Exception {     if (MtomTestHelper.isAwtHeadless(logger, null)) {         return.     }     final Holder<byte[]> photo = new Holder<>(MtomTestHelper.REQ_PHOTO_DATA).     final Holder<Image> image = new Holder<>(getImage("/java.jpg")).     Exchange exchange = context.createProducerTemplate().send("direct://testEndpoint", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(new Object[] { photo, image }).         }     }).     assertEquals("The attachement size should be 2 ", 2, exchange.getOut().getAttachments().size()).     Object[] result = exchange.getOut().getBody(Object[].class).     Holder<byte[]> photo1 = (Holder<byte[]>) result[1].     MtomTestHelper.assertEquals(MtomTestHelper.RESP_PHOTO_DATA, photo1.value).     Holder<Image> image1 = (Holder<Image>) result[2].     Assert.assertNotNull(image1.value).     if (image.value instanceof BufferedImage) {         Assert.assertEquals(560, ((BufferedImage) image1.value).getWidth()).         Assert.assertEquals(300, ((BufferedImage) image1.value).getHeight()).     } }
false;private;1;3;;private Image getImage(String name) throws Exception {     return ImageIO.read(getClass().getResource(name)). }
false;protected;0;3;;protected Object getImpl() {     return new HelloImpl(). }
