commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Element element = (Element) exchange.getIn().getBody().     String message = CxfUtilsTestHelper.elementToString(element).     exchange.getOut().setBody(message). }
false;public;0;15;;public void configure() {     // split the message with namespaces defined     Namespaces namespaces = new Namespaces("one", "http://camel.apache.org/schema/one").     from("direct:endpoint").split().xpath("//one:other", namespaces).to("mock:result").     from("direct:toString").split().xpath("//one:other", namespaces).process(new Processor() {          public void process(Exchange exchange) throws Exception {             Element element = (Element) exchange.getIn().getBody().             String message = CxfUtilsTestHelper.elementToString(element).             exchange.getOut().setBody(message).         }     }).to("mock:result"). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // split the message with namespaces defined             Namespaces namespaces = new Namespaces("one", "http://camel.apache.org/schema/one").             from("direct:endpoint").split().xpath("//one:other", namespaces).to("mock:result").             from("direct:toString").split().xpath("//one:other", namespaces).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Element element = (Element) exchange.getIn().getBody().                     String message = CxfUtilsTestHelper.elementToString(element).                     exchange.getOut().setBody(message).                 }             }).to("mock:result").         }     }. }
false;public;0;17;;@Test public void testSenderXmlData() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.reset().     result.expectedMessageCount(4).     template.sendBody("direct:endpoint", xmlData).     assertMockEndpointsSatisfied().     int i = 0.     for (Exchange exchange : result.getExchanges()) {         Element element = (Element) exchange.getIn().getBody().         String message = CxfUtilsTestHelper.elementToString(element).         log.info("The splited message is " + message).         assertTrue("The splitted message should start with <other", message.indexOf("<other") == 0).         assertEquals("Get a wrong message", verifyStrings[i], message).         i++.     } }
false;public;0;14;;@Test public void testToStringProcessor() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.reset().     result.expectedMessageCount(4).     template.sendBody("direct:toString", xmlData).     assertMockEndpointsSatisfied().     int i = 0.     for (Exchange exchange : result.getExchanges()) {         String message = exchange.getIn().getBody(String.class).         assertEquals("Get a wrong message", verifyStrings[i], message).         i++.     } }
