commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     assertNull("We should not get this header", exchange.getIn().getHeader("CamelCxfTest")).     assertNull("We should not get this header", exchange.getIn().getHeader("Transfer-Encoding")).     // check the headers     exchange.getOut().setHeader("Content-Type", "text/xml").     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 200).     // send the response back     exchange.getOut().setBody(RESPONSE). }
false;public;0;15;;public void configure() {     from("jetty:http://localhost:" + port + "/CxfProducerProtocalHeaderTest/user").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertNull("We should not get this header", exchange.getIn().getHeader("CamelCxfTest")).             assertNull("We should not get this header", exchange.getIn().getHeader("Transfer-Encoding")).             // check the headers             exchange.getOut().setHeader("Content-Type", "text/xml").             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 200).             // send the response back             exchange.getOut().setBody(RESPONSE).         }     }). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("jetty:http://localhost:" + port + "/CxfProducerProtocalHeaderTest/user").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertNull("We should not get this header", exchange.getIn().getHeader("CamelCxfTest")).                     assertNull("We should not get this header", exchange.getIn().getHeader("Transfer-Encoding")).                     // check the headers                     exchange.getOut().setHeader("Content-Type", "text/xml").                     exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, 200).                     // send the response back                     exchange.getOut().setBody(RESPONSE).                 }             }).         }     }. }
false;public;1;10;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add("Hello World!").     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "echo").     // Test the CxfHeaderFilterStrategy     exchange.getIn().setHeader("CamelCxfTest", "\"test\"").     exchange.getIn().setHeader("SOAPAction", "\"test\"").     exchange.getIn().setHeader("Transfer-Encoding", "chunked"). }
false;private;1;16;;private Exchange sendSimpleMessage(String endpointUri) {     Exchange exchange = template.send(endpointUri, new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add("Hello World!").             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "echo").             // Test the CxfHeaderFilterStrategy             exchange.getIn().setHeader("CamelCxfTest", "\"test\"").             exchange.getIn().setHeader("SOAPAction", "\"test\"").             exchange.getIn().setHeader("Transfer-Encoding", "chunked").         }     }).     return exchange. }
false;public;0;9;;@Test public void testSendMessage() {     Exchange exchange = sendSimpleMessage("cxf://http://localhost:" + port + "/CxfProducerProtocalHeaderTest/user" + "?serviceClass=org.apache.camel.component.cxf.HelloService").     org.apache.camel.Message out = exchange.getOut().     String result = out.getBody(String.class).     assertEquals("reply body on Camel", "echo " + "Hello World!", result). }
