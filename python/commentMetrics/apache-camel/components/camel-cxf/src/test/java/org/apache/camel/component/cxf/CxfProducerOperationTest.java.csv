commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;5;;protected String getSimpleEndpointUri() {     return "cxf://" + getSimpleServerAddress() + "?serviceClass=org.apache.camel.component.cxf.HelloService" + "&defaultOperationName=" + ECHO_OPERATION. }
false;protected;0;6;;protected String getJaxwsEndpointUri() {     return "cxf://" + getJaxWsServerAddress() + "?serviceClass=org.apache.hello_world_soap_http.Greeter" + "&defaultOperationName=" + GREET_ME_OPERATION + "&defaultOperationNamespace=" + NAMESPACE. }
false;protected;0;3;;protected Exchange sendSimpleMessage() {     return sendSimpleMessage(getSimpleEndpointUri()). }
false;public;1;7;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").     exchange.getIn().setHeader("requestObject", new DefaultCxfBinding()). }
false;private;1;13;;private Exchange sendSimpleMessage(String endpointUri) {     Exchange exchange = template.send(endpointUri, new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").             exchange.getIn().setHeader("requestObject", new DefaultCxfBinding()).         }     }).     return exchange. }
false;public;1;6;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile"). }
false;protected;0;11;;protected Exchange sendJaxWsMessage() {     Exchange exchange = template.send(getJaxwsEndpointUri(), new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").         }     }).     return exchange. }
false;public;1;14;;public void process(final Exchange exchange) {     // we need to override the operation name first     final List<String> para1 = new ArrayList<>().     para1.add("para1").     final List<String> para2 = new ArrayList<>().     para2.add("para2").     List<List<String>> parameters = new ArrayList<>().     parameters.add(para1).     parameters.add(para2).     // The object array version is working too     // Object[] parameters = new Object[] {para1, para2}.     exchange.getIn().setBody(parameters).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "complexParameters"). }
false;public;0;26;;@Test public void testSendingComplexParameter() throws Exception {     Exchange exchange = template.send(getSimpleEndpointUri(), new Processor() {          public void process(final Exchange exchange) {             // we need to override the operation name first             final List<String> para1 = new ArrayList<>().             para1.add("para1").             final List<String> para2 = new ArrayList<>().             para2.add("para2").             List<List<String>> parameters = new ArrayList<>().             parameters.add(para1).             parameters.add(para2).             // The object array version is working too             // Object[] parameters = new Object[] {para1, para2}.             exchange.getIn().setBody(parameters).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, "complexParameters").         }     }).     if (exchange.getException() != null) {         throw exchange.getException().     }     assertEquals("Get a wrong response.", "param:para1para2", exchange.getOut().getBody(String.class)). }
