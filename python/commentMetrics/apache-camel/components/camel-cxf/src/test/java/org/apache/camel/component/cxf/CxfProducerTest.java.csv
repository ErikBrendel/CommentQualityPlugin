commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getSimpleServerAddress() {     return "http://localhost:" + CXFTestSupport.getPort1() + "/" + getClass().getSimpleName() + "/test". }
false;protected;0;3;;protected String getJaxWsServerAddress() {     return "http://localhost:" + CXFTestSupport.getPort2() + "/" + getClass().getSimpleName() + "/test". }
false;protected;0;4;;protected String getWrongServerAddress() {     // Avoiding the test error on camel-cxf module     return "http://localhost:" + AvailablePortFinder.getNextAvailable() + "/" + getClass().getSimpleName() + "/test". }
false;public;0;13;;@Before public void startService() throws Exception {     // start a simple front service     ServerFactoryBean svrBean = new ServerFactoryBean().     svrBean.setAddress(getSimpleServerAddress()).     svrBean.setServiceClass(HelloService.class).     svrBean.setServiceBean(new HelloServiceImpl()).     svrBean.setBus(BusFactory.getDefaultBus()).     server = svrBean.create().     GreeterImpl greeterImpl = new GreeterImpl().     endpoint = Endpoint.publish(getJaxWsServerAddress(), greeterImpl). }
false;public;0;6;;@After public void stopServices() throws Exception {     endpoint.stop().     server.stop().     server.destroy(). }
false;public;0;6;;@Before public void setUp() throws Exception {     camelContext = new DefaultCamelContext().     camelContext.start().     template = camelContext.createProducerTemplate(). }
false;public;0;5;;@After public void tearDown() throws Exception {     template.stop().     camelContext.stop(). }
false;public;0;20;;@Test public void testInvokingSimpleServerWithParams() throws Exception {     Exchange exchange = sendSimpleMessage().     org.apache.camel.Message out = exchange.getOut().     String result = out.getBody(String.class).     LOG.info("Received output text: " + result).     Map<String, Object> responseContext = CastUtils.cast((Map<?, ?>) out.getHeader(Client.RESPONSE_CONTEXT)).     assertNotNull(responseContext).     assertEquals("We should get the response context here", "UTF-8", responseContext.get(org.apache.cxf.message.Message.ENCODING)).     assertEquals("reply body on Camel", "echo " + TEST_MESSAGE, result).     // check the other camel header copying     String fileName = out.getHeader(Exchange.FILE_NAME, String.class).     assertEquals("Should get the file name from out message header", "testFile", fileName).     // check if the header object is turned into String     Object requestObject = out.getHeader("requestObject").     assertTrue("We should get the right requestObject.", requestObject instanceof DefaultCxfBinding). }
false;public;0;17;;@Test public void testInvokingAWrongServer() throws Exception {     Exchange reply = sendSimpleMessage(getWrongEndpointUri()).     assertNotNull("We should get the exception here", reply.getException()).     assertTrue(reply.getException().getCause() instanceof ConnectException).     // Test the data format PAYLOAD     reply = sendSimpleMessageWithPayloadMessage(getWrongEndpointUri() + "&dataFormat=PAYLOAD").     assertNotNull("We should get the exception here", reply.getException()).     assertTrue(reply.getException().getCause() instanceof ConnectException).     // Test the data format MESSAGE     reply = sendSimpleMessageWithRawMessage(getWrongEndpointUri() + "&dataFormat=RAW").     assertNotNull("We should get the exception here", reply.getException()).     assertTrue(reply.getException().getCause() instanceof ConnectException). }
false;public;0;16;;@Test public void testInvokingJaxWsServerWithParams() throws Exception {     Exchange exchange = sendJaxWsMessage().     org.apache.camel.Message out = exchange.getOut().     String result = out.getBody(String.class).     LOG.info("Received output text: " + result).     Map<String, Object> responseContext = CastUtils.cast((Map<?, ?>) out.getHeader(Client.RESPONSE_CONTEXT)).     assertNotNull(responseContext).     assertEquals("Get the wrong wsdl operation name", "{http://apache.org/hello_world_soap_http}greetMe", responseContext.get("javax.xml.ws.wsdl.operation").toString()).     assertEquals("reply body on Camel", "Hello " + TEST_MESSAGE, result).     // check the other camel header copying     String fileName = out.getHeader(Exchange.FILE_NAME, String.class).     assertEquals("Should get the file name from out message header", "testFile", fileName). }
false;protected;0;4;;protected String getSimpleEndpointUri() {     return "cxf://" + getSimpleServerAddress() + "?serviceClass=org.apache.camel.component.cxf.HelloService". }
false;protected;0;3;;protected String getJaxwsEndpointUri() {     return "cxf://" + getJaxWsServerAddress() + "?serviceClass=org.apache.hello_world_soap_http.Greeter". }
false;protected;0;3;;protected String getWrongEndpointUri() {     return "cxf://" + getWrongServerAddress() + "?serviceClass=org.apache.camel.component.cxf.HelloService". }
false;protected;0;3;;protected Exchange sendSimpleMessage() {     return sendSimpleMessage(getSimpleEndpointUri()). }
false;public;1;8;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").     exchange.getIn().setHeader("requestObject", new DefaultCxfBinding()). }
false;private;1;14;;private Exchange sendSimpleMessage(String endpointUri) {     Exchange exchange = template.request(endpointUri, new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").             exchange.getIn().setHeader("requestObject", new DefaultCxfBinding()).         }     }).     return exchange. }
false;public;1;6;;public void process(final Exchange exchange) {     exchange.getIn().setBody("<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">hello world</arg0>" + "</ns1:echo></soap:Body></soap:Envelope>"). }
false;private;1;11;;private Exchange sendSimpleMessageWithRawMessage(String endpointUri) {     Exchange exchange = template.request(endpointUri, new Processor() {          public void process(final Exchange exchange) {             exchange.getIn().setBody("<soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<soap:Body><ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">hello world</arg0>" + "</ns1:echo></soap:Body></soap:Envelope>").         }     }).     return exchange. }
false;public;1;8;;public void process(final Exchange exchange) throws Exception {     Document document = new XmlConverter().toDOMDocument("<ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">hello world</arg0>" + "</ns1:echo>", exchange).     exchange.getIn().setBody(CxfPayloadConverter.documentToCxfPayload(document, exchange)).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION). }
false;private;1;13;;private Exchange sendSimpleMessageWithPayloadMessage(String endpointUri) {     Exchange exchange = template.request(endpointUri, new Processor() {          public void process(final Exchange exchange) throws Exception {             Document document = new XmlConverter().toDOMDocument("<ns1:echo xmlns:ns1=\"http://cxf.component.camel.apache.org/\">" + "<arg0 xmlns=\"http://cxf.component.camel.apache.org/\">hello world</arg0>" + "</ns1:echo>", exchange).             exchange.getIn().setBody(CxfPayloadConverter.documentToCxfPayload(document, exchange)).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, ECHO_OPERATION).         }     }).     return exchange. }
false;public;1;7;;public void process(final Exchange exchange) {     final List<String> params = new ArrayList<>().     params.add(TEST_MESSAGE).     exchange.getIn().setBody(params).     exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).     exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile"). }
false;protected;0;12;;protected Exchange sendJaxWsMessage() {     Exchange exchange = template.request(getJaxwsEndpointUri(), new Processor() {          public void process(final Exchange exchange) {             final List<String> params = new ArrayList<>().             params.add(TEST_MESSAGE).             exchange.getIn().setBody(params).             exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, GREET_ME_OPERATION).             exchange.getIn().setHeader(Exchange.FILE_NAME, "testFile").         }     }).     return exchange. }
