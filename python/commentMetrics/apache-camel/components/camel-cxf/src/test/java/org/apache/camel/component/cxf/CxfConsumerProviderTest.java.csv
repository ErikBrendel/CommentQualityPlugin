commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;1;8;;public void process(final Exchange exchange) {     Message in = exchange.getIn().     Node node = in.getBody(Node.class).     assertNotNull(node).     XmlConverter xmlConverter = new XmlConverter().     // Put the result back     exchange.getOut().setBody(xmlConverter.toSource(RESPONSE)). }
false;public;0;13;;public void configure() {     errorHandler(noErrorHandler()).     from(getFromEndpointUri()).process(new Processor() {          public void process(final Exchange exchange) {             Message in = exchange.getIn().             Node node = in.getBody(Node.class).             assertNotNull(node).             XmlConverter xmlConverter = new XmlConverter().             // Put the result back             exchange.getOut().setBody(xmlConverter.toSource(RESPONSE)).         }     }). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             errorHandler(noErrorHandler()).             from(getFromEndpointUri()).process(new Processor() {                  public void process(final Exchange exchange) {                     Message in = exchange.getIn().                     Node node = in.getBody(Node.class).                     assertNotNull(node).                     XmlConverter xmlConverter = new XmlConverter().                     // Put the result back                     exchange.getOut().setBody(xmlConverter.toSource(RESPONSE)).                 }             }).         }     }. }
false;public;0;18;;@Test public void testInvokingServiceFromHttpCompnent() throws Exception {     // call the service with right post message     String response = template.requestBody(simpleEndpointAddress, REQUEST_MESSAGE, String.class).     assertTrue("Get a wrong response ", response.startsWith(RESPONSE_MESSAGE_BEGINE)).     assertTrue("Get a wrong response ", response.endsWith(RESPONSE_MESSAGE_END)).     try {         template.requestBody(simpleEndpointAddress, null, String.class).         fail("Excpetion to get exception here").     } catch (Exception ex) {     // do nothing here     }     response = template.requestBody(simpleEndpointAddress, REQUEST_MESSAGE, String.class).     assertTrue("Get a wrong response ", response.startsWith(RESPONSE_MESSAGE_BEGINE)).     assertTrue("Get a wrong response ", response.endsWith(RESPONSE_MESSAGE_END)). }
false;protected;0;3;;protected String getFromEndpointUri() {     return simpleEndpointURI. }
