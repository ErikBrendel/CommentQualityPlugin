commented;modifiers;parameterAmount;loc;comment;code
false;private,static;1;11;;private static String getAction(Object map) {     if (map == null) {         return null.     }     try {         Object o = map.getClass().getMethod("getAction").invoke(map).         return (String) o.getClass().getMethod("getValue").invoke(o).     } catch (Throwable t) {         throw new Fault(t).     } }
false;public;1;7;;public void handleMessage(Message message) throws Fault {     try {         message.getContent(OutputStream.class).close().     } catch (IOException e) {         throw new Fault(e).     } }
false;public;1;41;;public void handleMessage(Message message) throws Fault {     Object maps = RMContextUtils.retrieveMAPs(message, false, true).     // RMContextUtils.ensureExposedVersion(maps).     String action = getAction(maps).     if (RMContextUtils.isRMProtocolMessage(action)) {         return.     }     appMessageCount++.     // do not discard odd-numbered messages     if (0 != (appMessageCount % 2)) {         return.     }     // discard even-numbered message     InterceptorChain chain = message.getInterceptorChain().     ListIterator<Interceptor<? extends Message>> it = chain.getIterator().     while (it.hasNext()) {         PhaseInterceptor<?> pi = (PhaseInterceptor<?>) it.next().         if (MessageSenderInterceptor.class.getName().equals(pi.getId())) {             chain.remove(pi).             LOG.debug("Removed MessageSenderInterceptor from interceptor chain.").             break.         }     }     message.setContent(OutputStream.class, new WrappedOutputStream(message)).     message.getInterceptorChain().add(new AbstractPhaseInterceptor<Message>(Phase.PREPARE_SEND_ENDING) {          public void handleMessage(Message message) throws Fault {             try {                 message.getContent(OutputStream.class).close().             } catch (IOException e) {                 throw new Fault(e).             }         }     }). }
false;protected;0;8;;@Override protected void onFirstWrite() throws IOException {     if (LOG.isDebugEnabled()) {         Long nr = RMContextUtils.retrieveRMProperties(outMessage, true).getSequence().getMessageNumber().         LOG.debug("Losing message {}", nr).     }     wrappedStream = new DummyOutputStream(). }
false;public;1;4;;@Override public void write(int b) throws IOException { // noop }
