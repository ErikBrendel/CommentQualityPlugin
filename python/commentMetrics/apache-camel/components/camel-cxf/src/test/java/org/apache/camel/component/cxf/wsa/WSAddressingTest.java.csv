commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getServerAddress() {     return "http://localhost:" + port1 + "/" + this.getClass().getSimpleName() + "/SoapContext/SoapPort". }
false;protected;0;3;;protected String getClientAddress() {     return "http://localhost:" + port0 + "/" + this.getClass().getSimpleName() + "/SoapContext/SoapPort". }
false;public;0;18;;@Before public void setUp() throws Exception {     template = context.createProducerTemplate().     JaxWsServerFactoryBean svrBean = new JaxWsServerFactoryBean().     svrBean.setAddress(getServerAddress()).     svrBean.setServiceClass(Greeter.class).     svrBean.setServiceBean(new GreeterImpl()).     SpringBusFactory bf = new SpringBusFactory().     URL cxfConfig = null.     if (getCxfServerConfig() != null) {         cxfConfig = ClassLoaderUtils.getResource(getCxfServerConfig(), this.getClass()).     }     svrBean.setBus(bf.createBus(cxfConfig)).     serviceEndpoint = svrBean.create(). }
false;public;0;6;;@After public void tearDown() throws Exception {     if (serviceEndpoint != null) {         serviceEndpoint.stop().     } }
false;public;0;17;;@Test public void testWSAddressing() throws Exception {     JaxWsProxyFactoryBean proxyFactory = new JaxWsProxyFactoryBean().     ClientFactoryBean clientBean = proxyFactory.getClientFactoryBean().     clientBean.setAddress(getClientAddress()).     clientBean.setServiceClass(Greeter.class).     SpringBusFactory bf = new SpringBusFactory().     URL cxfConfig = null.     if (getCxfClientConfig() != null) {         cxfConfig = ClassLoaderUtils.getResource(getCxfClientConfig(), this.getClass()).     }     proxyFactory.setBus(bf.createBus(cxfConfig)).     Greeter client = (Greeter) proxyFactory.create().     String result = client.greetMe("world!").     assertEquals("Get a wrong response", "Hello world!", result). }
true;protected;0;3;/**  * @return  */ ;/**  * @return  */ protected String getCxfServerConfig() {     return "server.xml". }
true;protected;0;3;/**  * @return  */ ;/**  * @return  */ protected String getCxfClientConfig() {     return "client.xml". }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     List<?> headerList = (List<?>) exchange.getIn().getHeader(Header.HEADER_LIST).     assertNotNull("We should get the header list.", headerList).     assertEquals("Get a wrong size of header list.", 4, headerList.size()).     // we don't need send the soap headers to the client     exchange.getIn().removeHeader(Header.HEADER_LIST). }
