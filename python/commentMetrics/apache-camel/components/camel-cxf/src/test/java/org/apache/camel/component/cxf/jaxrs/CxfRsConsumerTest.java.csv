commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected void bindToRegistry(Registry registry) throws Exception {     registry.bind("serviceBean", new CustomerService()). }
false;public;0;9;;public void configure() {     errorHandler(new NoErrorHandlerBuilder()).     from(CXF_RS_ENDPOINT_URI).process(testProcessor).     from(CXF_RS_ENDPOINT_URI2).process(testProcessor).     from(CXF_RS_ENDPOINT_URI3).process(testProcessor).     from(CXF_RS_ENDPOINT_URI4).process(testProcessor2).     from(CXF_RS_ENDPOINT_URI5).process(testProcessor3).     from(CXF_RS_ENDPOINT_URI6).log(LoggingLevel.OFF, "dummy"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     final Processor testProcessor = new TestProcessor().     final Processor testProcessor2 = new TestProcessor2().     final Processor testProcessor3 = new TestProcessor3().     return new RouteBuilder() {          public void configure() {             errorHandler(new NoErrorHandlerBuilder()).             from(CXF_RS_ENDPOINT_URI).process(testProcessor).             from(CXF_RS_ENDPOINT_URI2).process(testProcessor).             from(CXF_RS_ENDPOINT_URI3).process(testProcessor).             from(CXF_RS_ENDPOINT_URI4).process(testProcessor2).             from(CXF_RS_ENDPOINT_URI5).process(testProcessor3).             from(CXF_RS_ENDPOINT_URI6).log(LoggingLevel.OFF, "dummy").         }     }. }
false;private;2;14;;// END SNIPPET: example private void invokeGetCustomer(String uri, String expect) throws Exception {     HttpGet get = new HttpGet(uri).     get.addHeader("Accept", "application/json").     CloseableHttpClient httpclient = HttpClientBuilder.create().build().     try {         HttpResponse response = httpclient.execute(get).         assertEquals(200, response.getStatusLine().getStatusCode()).         assertEquals(expect, EntityUtils.toString(response.getEntity())).     } finally {         httpclient.close().     } }
false;public;0;4;;@Test public void testGetCustomerInterface() throws Exception {     doTestGetCustomer("rest"). }
false;public;0;4;;@Test public void testGetCustomerImpl() throws Exception {     doTestGetCustomer("rest2"). }
false;public;0;4;;@Test public void testGetCustomerInterfaceAndModel() throws Exception {     doTestGetCustomer("rest3"). }
false;public;0;4;;@Test public void testGetCustomerDefaultHandlerAndModel() throws Exception {     doTestGetCustomer("rest4"). }
false;public;0;9;;@Test public void testEchoCustomerDefaultHandlerAndModel() throws Exception {     WebTarget target = ClientBuilder.newClient().target("http://localhost:" + CXT + "/" + "rest4" + "/customerservice/customers").     Customer c = target.request(MediaType.APPLICATION_JSON).post(Entity.json(new Customer(333, "Barry")), Customer.class).     assertEquals(333L, c.getId()).     assertEquals("Barry", c.getName()). }
false;public;0;4;;@Test public void testGetCustomerDefaultHandlerAndModelAndContexts() throws Exception {     doTestGetCustomer("rest5"). }
false;private;1;9;;private void doTestGetCustomer(String contextUri) throws Exception {     invokeGetCustomer("http://localhost:" + CXT + "/" + contextUri + "/customerservice/customers/126", "{\"Customer\":{\"id\":126,\"name\":\"Willem\"}}").     invokeGetCustomer("http://localhost:" + CXT + "/" + contextUri + "/customerservice/customers/123", "customer response back!").     invokeGetCustomer("http://localhost:" + CXT + "/" + contextUri + "/customerservice/customers/400", "The remoteAddress is 127.0.0.1"). }
false;public;0;5;;@Test public void testGetCustomerImplCustomLifecycle() throws Exception {     invokeGetCustomer("http://localhost:" + CXT + "/rest6/customerservice/customers/123", "{\"Customer\":{\"id\":123,\"name\":\"John\"}}"). }
false;public;0;37;;@Test public void testGetWrongCustomer() throws Exception {     URL url.     url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/789").     try {         url.openStream().         fail("Expect to get exception here").     } catch (IOException exception) {     // expect the Internal error exception     }     url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/456").     try {         url.openStream().         fail("Expect to get exception here").     } catch (FileNotFoundException exception) {     // do nothing here     }     url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/234").     try {         url.openStream().         fail("Expect to get exception here").     } catch (FileNotFoundException exception) {     // do nothing here     }     url = new URL("http://localhost:" + CXT + "/rest/customerservice/customers/256").     try {         url.openStream().         fail("Expect to get exception here").     } catch (IOException exception) {     // expect the Internal error exception     } }
false;public;0;17;;@Test public void testPutConsumer() throws Exception {     HttpPut put = new HttpPut("http://localhost:" + CXT + "/rest/customerservice/customers").     StringEntity entity = new StringEntity(PUT_REQUEST, "ISO-8859-1").     entity.setContentType("text/xml. charset=ISO-8859-1").     put.addHeader("test", "header1.header2").     put.setEntity(entity).     CloseableHttpClient httpclient = HttpClientBuilder.create().build().     try {         HttpResponse response = httpclient.execute(put).         assertEquals(200, response.getStatusLine().getStatusCode()).         assertEquals("", EntityUtils.toString(response.getEntity())).     } finally {         httpclient.close().     } }
false;public;1;49;;public void processGetCustomer(Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class).     assertEquals("Get a wrong http method", "GET", httpMethod).     String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class).     // The parameter of the invocation is stored in the body of in message     String id = inMessage.getBody(String.class).     if ("/customerservice/customers/126".equals(path)) {         Customer customer = new Customer().         customer.setId(Long.parseLong(id)).         customer.setName("Willem").         // We just put the response Object into the out message body         exchange.getOut().setBody(customer).     } else {         if ("/customerservice/customers/400".equals(path)) {             // We return the remote client IP address this time             org.apache.cxf.message.Message cxfMessage = inMessage.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class).             ServletRequest request = (ServletRequest) cxfMessage.get("HTTP.REQUEST").             // Just make sure the request object is not null             assertNotNull("The request object should not be null", request).             Response r = Response.status(200).entity("The remoteAddress is 127.0.0.1").build().             exchange.getOut().setBody(r).             return.         }         if ("/customerservice/customers/123".equals(path)) {             // send a customer response back             Response r = Response.status(200).entity("customer response back!").build().             exchange.getOut().setBody(r).             return.         }         if ("/customerservice/customers/456".equals(path)) {             Response r = Response.status(404).entity("Can't found the customer with uri " + path).header("Content-Type", "text/plain").build().             throw new WebApplicationException(r).         } else if ("/customerservice/customers/234".equals(path)) {             Response r = Response.status(404).entity("Can't found the customer with uri " + path).header("Content-Type", "text/plain").build().             exchange.getOut().setBody(r).             exchange.getOut().setFault(true).         } else if ("/customerservice/customers/789".equals(path)) {             exchange.getOut().setBody("Can't found the customer with uri " + path).             exchange.getOut().setHeader(Exchange.CONTENT_TYPE, "text/plain").             exchange.getOut().setHeader(Exchange.HTTP_RESPONSE_CODE, "404").             exchange.getOut().setFault(true).         } else {             throw new RuntimeCamelException("Can't found the customer with uri " + path).         }     } }
false;public;1;19;;public void process(Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     // Get the operation name from in message     String operationName = inMessage.getHeader(CxfConstants.OPERATION_NAME, String.class).     if ("getCustomer".equals(operationName)) {         processGetCustomer(exchange).     } else if ("updateCustomer".equals(operationName)) {         assertEquals("Get a wrong customer message header", "header1.header2", inMessage.getHeader("test")).         String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class).         assertEquals("Get a wrong http method", "PUT", httpMethod).         Customer customer = inMessage.getBody(Customer.class).         assertNotNull("The customer should not be null.", customer).         // Now you can do what you want on the customer object         assertEquals("Get a wrong customer name.", "Mary", customer.getName()).         // set the response back         exchange.getOut().setBody(Response.ok().build()).     } }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     Message inMessage = exchange.getIn().     // Get the operation name from in message     String path = inMessage.getHeader(Exchange.HTTP_PATH, String.class).     if (path.startsWith("/customerservice/customers")) {         String httpMethod = inMessage.getHeader(Exchange.HTTP_METHOD, String.class).         if (HttpMethod.GET.equals(httpMethod)) {             processGetCustomer(exchange).         } else if (HttpMethod.POST.equals(httpMethod)) {             InputStream inBody = exchange.getIn().getBody(InputStream.class).             exchange.getOut().setBody(Response.ok(inBody).build()).         }     } }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     UriInfo ui = exchange.getProperty(UriInfo.class.getName(), UriInfo.class).     String path = ui.getPath().     Request req = exchange.getProperty(Request.class.getName(), Request.class).     String httpMethod = req.getMethod().     if (path.startsWith("customerservice/customers") && HttpMethod.GET.equals(httpMethod)) {         processGetCustomer(exchange).     } }
