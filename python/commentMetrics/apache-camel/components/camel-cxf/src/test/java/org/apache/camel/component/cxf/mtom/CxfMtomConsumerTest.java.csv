commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@SuppressWarnings("unchecked") public void process(final Exchange exchange) throws Exception {     Message in = exchange.getIn().     assertEquals("We should not get any attachements here.", 0, in.getAttachments().size()).     assertEquals("Get a wrong Content-Type header", "application/xop+xml", in.getHeader("Content-Type")).     // Get the parameter list     List<?> parameter = in.getBody(List.class).     // Get the operation name     Holder<byte[]> photo = (Holder<byte[]>) parameter.get(0).     assertNotNull("The photo should not be null", photo.value).     assertEquals("Should get the right request", new String(photo.value, "UTF-8"), "RequestFromCXF").     photo.value = "ResponseFromCamel".getBytes("UTF-8").     Holder<Image> image = (Holder<Image>) parameter.get(1).     assertNotNull("We should get the image here", image.value).     // set the holder message back     exchange.getOut().setBody(new Object[] { null, photo, image }). }
false;public;0;23;;public void configure() {     from(MTOM_ENDPOINT_URI).process(new Processor() {          @SuppressWarnings("unchecked")         public void process(final Exchange exchange) throws Exception {             Message in = exchange.getIn().             assertEquals("We should not get any attachements here.", 0, in.getAttachments().size()).             assertEquals("Get a wrong Content-Type header", "application/xop+xml", in.getHeader("Content-Type")).             // Get the parameter list             List<?> parameter = in.getBody(List.class).             // Get the operation name             Holder<byte[]> photo = (Holder<byte[]>) parameter.get(0).             assertNotNull("The photo should not be null", photo.value).             assertEquals("Should get the right request", new String(photo.value, "UTF-8"), "RequestFromCXF").             photo.value = "ResponseFromCamel".getBytes("UTF-8").             Holder<Image> image = (Holder<Image>) parameter.get(1).             assertNotNull("We should get the image here", image.value).             // set the holder message back             exchange.getOut().setBody(new Object[] { null, photo, image }).         }     }). }
false;protected;0;28;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from(MTOM_ENDPOINT_URI).process(new Processor() {                  @SuppressWarnings("unchecked")                 public void process(final Exchange exchange) throws Exception {                     Message in = exchange.getIn().                     assertEquals("We should not get any attachements here.", 0, in.getAttachments().size()).                     assertEquals("Get a wrong Content-Type header", "application/xop+xml", in.getHeader("Content-Type")).                     // Get the parameter list                     List<?> parameter = in.getBody(List.class).                     // Get the operation name                     Holder<byte[]> photo = (Holder<byte[]>) parameter.get(0).                     assertNotNull("The photo should not be null", photo.value).                     assertEquals("Should get the right request", new String(photo.value, "UTF-8"), "RequestFromCXF").                     photo.value = "ResponseFromCamel".getBytes("UTF-8").                     Holder<Image> image = (Holder<Image>) parameter.get(1).                     assertNotNull("We should get the image here", image.value).                     // set the holder message back                     exchange.getOut().setBody(new Object[] { null, photo, image }).                 }             }).         }     }. }
false;private;0;13;;private Hello getPort() {     URL wsdl = getClass().getResource("/mtom.wsdl").     assertNotNull("WSDL is null", wsdl).     HelloService service = new HelloService(wsdl, serviceName).     assertNotNull("Service is null ", service).     Hello port = service.getHelloPort().     ((BindingProvider) port).getRequestContext().put(BindingProvider.ENDPOINT_ADDRESS_PROPERTY, MTOM_ENDPOINT_ADDRESS).     return port. }
false;protected;1;3;;protected Image getImage(String name) throws Exception {     return ImageIO.read(getClass().getResource(name)). }
false;public;0;20;;@Test public void testInvokingService() throws Exception {     if (MtomTestHelper.isAwtHeadless(null, log)) {         return.     }     Holder<byte[]> photo = new Holder<>("RequestFromCXF".getBytes("UTF-8")).     Holder<Image> image = new Holder<>(getImage("/java.jpg")).     Hello port = getPort().     SOAPBinding binding = (SOAPBinding) ((BindingProvider) port).getBinding().     binding.setMTOMEnabled(true).     port.detail(photo, image).     assertEquals("ResponseFromCamel", new String(photo.value, "UTF-8")).     assertNotNull(image.value). }
