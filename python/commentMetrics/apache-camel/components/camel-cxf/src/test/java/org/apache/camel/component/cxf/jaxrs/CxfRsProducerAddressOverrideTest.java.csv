commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getPort1() {     return port1. }
false;public;0;3;;public int getPort2() {     return port2. }
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfRsSpringProducerAddressOverride.xml"). }
false;protected;1;4;;protected void setupDestinationURL(Message inMessage) {     inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, "http://localhost:" + getPort1() + "/CxfRsProducerAddressOverrideTest"). }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the operation name     inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer").     // using the proxy client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).     // set the parameters , if you just have one parameter     // camel will put this object into an Object[] itself     inMessage.setBody("123").     setupDestinationURL(inMessage). }
false;public;0;24;;@Test public void testGetCustomerWithSyncProxyAPIByOverrideDest() {     Exchange exchange = template.send("direct://proxy", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the operation name             inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer").             // using the proxy client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).             // set the parameters , if you just have one parameter             // camel will put this object into an Object[] itself             inMessage.setBody("123").             setupDestinationURL(inMessage).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // using the http central client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     // Specify the response class , cxfrs will use InputStream as the response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     setupDestinationURL(inMessage). }
false;public;0;25;;@Test public void testGetCustomerWithSyncHttpAPIByOverrideDest() {     Exchange exchange = template.send("direct://http", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // using the http central client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").             // Specify the response class , cxfrs will use InputStream as the response object type             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).             setupDestinationURL(inMessage).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()). }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // set the operation name     inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer").     // using the proxy client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).     // set the parameters , if you just have one parameter     // camel will put this object into an Object[] itself     inMessage.setBody("123").     setupDestinationURL(inMessage). }
false;public;0;24;;@Test public void testGetCustomerWithAsyncProxyAPIByOverrideDest() {     Exchange exchange = template.send("cxfrs:bean:rsClientProxy", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // set the operation name             inMessage.setHeader(CxfConstants.OPERATION_NAME, "getCustomer").             // using the proxy client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.FALSE).             // set the parameters , if you just have one parameter             // camel will put this object into an Object[] itself             inMessage.setBody("123").             setupDestinationURL(inMessage).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null ", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()). }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // using the http central client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     // Specify the response class , cxfrs will use InputStream as     // the response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     setupDestinationURL(inMessage). }
false;public;0;26;;@Test public void testGetCustomerWithAsyncHttpAPIByOverrideDest() {     Exchange exchange = template.send("cxfrs:bean:rsClientHttp", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message inMessage = exchange.getIn().             // using the http central client API             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).             // set the Http method             inMessage.setHeader(Exchange.HTTP_METHOD, "GET").             // set the relative path             inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").             // Specify the response class , cxfrs will use InputStream as             // the response object type             inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).             setupDestinationURL(inMessage).         }     }).     // get the response message     Customer response = (Customer) exchange.getOut().getBody().     assertNotNull("The response should not be null", response).     assertEquals("Get a wrong customer id ", 123, response.getId()).     assertEquals("Get a wrong customer name", "John", response.getName()). }
false;public;0;17;;@Test public void testAddressMultiOverride() {     // First call with override url     Exchange exchange = template.send("direct://http", new SendProcessor("http://localhost:" + getPort1() + "/CxfRsProducerAddressOverrideTest")).     // get the response message     Customer response = exchange.getOut().getBody(Customer.class).     assertNotNull("The response should not be null ", response).     // Second call with override url     exchange = template.send("direct://http", new SendProcessor("http://localhost:" + getPort1() + "/CxfRsProducerNonExistingAddressOverrideTest")).     // Third call with override url ( we reuse the first url there )     exchange = template.send("direct://http", new SendProcessor("http://localhost:" + getPort1() + "/CxfRsProducerAddressOverrideTest")).     // get the response message     response = exchange.getOut().getBody(Customer.class).     assertNotNull("The response should not be null ", response). }
false;public;1;15;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message inMessage = exchange.getIn().     // using the http central client API     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_USING_HTTP_API, Boolean.TRUE).     // set the Http method     inMessage.setHeader(Exchange.HTTP_METHOD, "GET").     // set the relative path     inMessage.setHeader(Exchange.HTTP_PATH, "/customerservice/customers/123").     // Specify the response class , cxfrs will use InputStream as the     // response object type     inMessage.setHeader(CxfConstants.CAMEL_CXF_RS_RESPONSE_CLASS, Customer.class).     inMessage.setHeader(Exchange.DESTINATION_OVERRIDE_URL, address). }
