commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/CxfDispatchMessageBeans.xml"). }
false;public;0;12;;@Test public void testDipatchMessage() throws Exception {     final String name = "Tila".     Exchange exchange = sendJaxWsDispatchMessage(name, false).     assertEquals("The request should be handled sucessfully ", exchange.isFailed(), false).     org.apache.camel.Message response = exchange.getOut().     assertNotNull("The response message must not be null ", response).     String value = decodeResponseFromMessage(response.getBody(InputStream.class), exchange).     assertTrue("The response body must match the request ", value.endsWith(name)). }
false;public;0;11;;@Test public void testDipatchMessageOneway() throws Exception {     final String name = "Tila".     Exchange exchange = sendJaxWsDispatchMessage(name, true).     assertEquals("The request should be handled sucessfully ", exchange.isFailed(), false).     org.apache.camel.Message response = exchange.getOut().     assertNotNull("The response message must not be null ", response).     assertNull("The response body must be null ", response.getBody()). }
false;public;1;8;;public void process(final Exchange exchange) {     InputStream request = encodeRequestInMessage(oneway ? MESSAGE_ONEWAY_TEMPLATE : MESSAGE_TEMPLATE, name, exchange).     exchange.getIn().setBody(request, InputStream.class).     // set the operation for oneway. otherwise use the default operation     if (oneway) {         exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, INVOKE_ONEWAY_NAME).     } }
false;protected;2;13;;protected Exchange sendJaxWsDispatchMessage(final String name, final boolean oneway) {     Exchange exchange = template.send("direct:producer", new Processor() {          public void process(final Exchange exchange) {             InputStream request = encodeRequestInMessage(oneway ? MESSAGE_ONEWAY_TEMPLATE : MESSAGE_TEMPLATE, name, exchange).             exchange.getIn().setBody(request, InputStream.class).             // set the operation for oneway. otherwise use the default operation             if (oneway) {                 exchange.getIn().setHeader(CxfConstants.OPERATION_NAME, INVOKE_ONEWAY_NAME).             }         }     }).     return exchange. }
false;private,static;3;10;;private static InputStream encodeRequestInMessage(String form, String name, Exchange exchange) {     String payloadstr = String.format(form, name).     InputStream message = null.     try {         message = new ByteArrayInputStream(payloadstr.getBytes("utf-8")).     } catch (Exception e) {     // ignore and let it fail     }     return message. }
false;private;2;10;;private String decodeResponseFromMessage(InputStream message, Exchange exchange) {     String value = null.     try {         Document doc = getDocumentBuilderFactory().newDocumentBuilder().parse(message).         value = getResponseType(doc.getDocumentElement()).     } catch (Exception e) {     // ignore and let it fail     }     return value. }
