commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected AbstractXmlApplicationContext createApplicationContext() {     return new ClassPathXmlApplicationContext("org/apache/camel/component/cxf/jaxrs/CxfOperationException.xml"). }
false;public;0;12;;@Test(expected = CamelExecutionException.class) public void testRestServerDirectlyAddCustomer() {     Customer input = new Customer().     input.setName("Donald Duck").     // we cannot convert directly to Customer as we need camel-jaxb     String response = template.requestBodyAndHeader("cxfrs:http://localhost:" + PORT1 + "/CxfOperationExceptionTest/customerservice/customers?throwExceptionOnFailure=true", input, Exchange.HTTP_METHOD, "POST", String.class).     assertNotNull(response).     assertTrue(response.endsWith("<name>Donald Duck</name></Customer>")). }
false;public;0;12;;@Test public void testRestServerDirectlyAddCustomerWithExceptionsTurnedOff() {     Customer input = new Customer().     input.setName("Donald Duck").     // we cannot convert directly to Customer as we need camel-jaxb     String response = template.requestBodyAndHeader("cxfrs:bean:rsClient?throwExceptionOnFailure=false", input, Exchange.HTTP_METHOD, "POST", String.class).     assertNotNull(response).     assertTrue(response.contains("Problem accessing /CxfOperationExceptionTest/rest")). }
