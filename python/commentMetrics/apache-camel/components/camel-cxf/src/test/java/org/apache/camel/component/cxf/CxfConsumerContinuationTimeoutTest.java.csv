commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isCreateCamelContextPerClass() {     return true. }
false;public;2;34;;@Override public boolean process(Exchange exchange, AsyncCallback asyncCallback) {     Message in = exchange.getIn().     // check the content-length header is filtered     Object value = in.getHeader("Content-Length").     assertNull("The Content-Length header should be removed", value).     // Get the request message     String request = in.getBody(String.class).     String priority = in.getHeader("priority", "fast", String.class).     // need not to block this thread to simulate slow response so use a thread pool to wait     if ("slow".equalsIgnoreCase(priority)) {         pool.submit(() -> {             try {                 log.info("Sleeping for 10 seconds to simulate slow response").                 Thread.sleep(10000).             } catch (InterruptedException e) {             // ignore             } finally {                 asyncCallback.done(false).             }         }).         return false.     } else {         // Send the response message back         if (request.indexOf(ECHO_METHOD) > 0) {             exchange.getOut().setBody(ECHO_RESPONSE).         } else {             // echoBoolean call             exchange.getOut().setBody(ECHO_BOOLEAN_RESPONSE).         }     }     asyncCallback.done(true).     return true. }
false;public;0;44;;public void configure() {     pool = context.getExecutorServiceManager().newSingleThreadExecutor(this, "MyPool").     from("direct:start").setBody(constant("Sensitive Data")).to(simpleEndpointURI + "&continuationTimeout=5000&dataFormat=RAW").     from(simpleEndpointURI + "&continuationTimeout=5000&dataFormat=RAW").process(new AsyncProcessorSupport() {          @Override         public boolean process(Exchange exchange, AsyncCallback asyncCallback) {             Message in = exchange.getIn().             // check the content-length header is filtered             Object value = in.getHeader("Content-Length").             assertNull("The Content-Length header should be removed", value).             // Get the request message             String request = in.getBody(String.class).             String priority = in.getHeader("priority", "fast", String.class).             // need not to block this thread to simulate slow response so use a thread pool to wait             if ("slow".equalsIgnoreCase(priority)) {                 pool.submit(() -> {                     try {                         log.info("Sleeping for 10 seconds to simulate slow response").                         Thread.sleep(10000).                     } catch (InterruptedException e) {                     // ignore                     } finally {                         asyncCallback.done(false).                     }                 }).                 return false.             } else {                 // Send the response message back                 if (request.indexOf(ECHO_METHOD) > 0) {                     exchange.getOut().setBody(ECHO_RESPONSE).                 } else {                     // echoBoolean call                     exchange.getOut().setBody(ECHO_BOOLEAN_RESPONSE).                 }             }             asyncCallback.done(true).             return true.         }     }). }
false;protected;0;48;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             pool = context.getExecutorServiceManager().newSingleThreadExecutor(this, "MyPool").             from("direct:start").setBody(constant("Sensitive Data")).to(simpleEndpointURI + "&continuationTimeout=5000&dataFormat=RAW").             from(simpleEndpointURI + "&continuationTimeout=5000&dataFormat=RAW").process(new AsyncProcessorSupport() {                  @Override                 public boolean process(Exchange exchange, AsyncCallback asyncCallback) {                     Message in = exchange.getIn().                     // check the content-length header is filtered                     Object value = in.getHeader("Content-Length").                     assertNull("The Content-Length header should be removed", value).                     // Get the request message                     String request = in.getBody(String.class).                     String priority = in.getHeader("priority", "fast", String.class).                     // need not to block this thread to simulate slow response so use a thread pool to wait                     if ("slow".equalsIgnoreCase(priority)) {                         pool.submit(() -> {                             try {                                 log.info("Sleeping for 10 seconds to simulate slow response").                                 Thread.sleep(10000).                             } catch (InterruptedException e) {                             // ignore                             } finally {                                 asyncCallback.done(false).                             }                         }).                         return false.                     } else {                         // Send the response message back                         if (request.indexOf(ECHO_METHOD) > 0) {                             exchange.getOut().setBody(ECHO_RESPONSE).                         } else {                             // echoBoolean call                             exchange.getOut().setBody(ECHO_BOOLEAN_RESPONSE).                         }                     }                     asyncCallback.done(true).                     return true.                 }             }).         }     }. }
false;public;0;5;;@Test public void testNoTimeout() throws Exception {     Object out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals(ECHO_BOOLEAN_RESPONSE, out). }
false;public;0;5;;@Test public void testTimeout() throws Exception {     String out = template.requestBodyAndHeader("direct:start", "Bye World", "priority", "slow", String.class).     assertTrue(out.contains("The OUT message was not received within: 5000 millis.")). }
