commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void startGrpcChannels() {     syncRequestChannel = ManagedChannelBuilder.forAddress("localhost", GRPC_SYNC_REQUEST_TEST_PORT).usePlaintext().build().     asyncRequestChannel = ManagedChannelBuilder.forAddress("localhost", GRPC_ASYNC_REQUEST_TEST_PORT).usePlaintext().build().     blockingStub = PingPongGrpc.newBlockingStub(syncRequestChannel).     nonBlockingStub = PingPongGrpc.newStub(syncRequestChannel).     asyncNonBlockingStub = PingPongGrpc.newStub(asyncRequestChannel). }
false;public;0;5;;@After public void stopGrpcChannels() {     syncRequestChannel.shutdown().shutdownNow().     asyncRequestChannel.shutdown().shutdownNow(). }
false;public;0;10;;@Test public void testSyncSyncMethodInSync() throws Exception {     LOG.info("gRPC pingSyncSync method blocking test start").     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     PongResponse pongResponse = blockingStub.pingSyncSync(pingRequest).     assertNotNull(pongResponse).     assertEquals(GRPC_TEST_PING_ID, pongResponse.getPongId()).     assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()). }
false;public;0;12;;@Test public void testSyncAsyncMethodInSync() throws Exception {     LOG.info("gRPC pingSyncAsync method blocking test start").     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     Iterator<PongResponse> pongResponseIter = blockingStub.pingSyncAsync(pingRequest).     while (pongResponseIter.hasNext()) {         PongResponse pongResponse = pongResponseIter.next().         assertNotNull(pongResponse).         assertEquals(GRPC_TEST_PING_ID, pongResponse.getPongId()).         assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()).     } }
false;public;0;16;;@Test public void testSyncSyncMethodInAsync() throws Exception {     LOG.info("gRPC pingSyncSync method aync test start").     final CountDownLatch latch = new CountDownLatch(1).     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).     nonBlockingStub.pingSyncSync(pingRequest, responseObserver).     latch.await(5, TimeUnit.SECONDS).     PongResponse pongResponse = responseObserver.getPongResponse().     assertNotNull(pongResponse).     assertEquals(GRPC_TEST_PING_ID, pongResponse.getPongId()).     assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()). }
false;public;0;16;;@Test public void testSyncAsyncMethodInAsync() throws Exception {     LOG.info("gRPC pingSyncAsync method aync test start").     final CountDownLatch latch = new CountDownLatch(1).     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).     nonBlockingStub.pingSyncAsync(pingRequest, responseObserver).     latch.await(5, TimeUnit.SECONDS).     PongResponse pongResponse = responseObserver.getPongResponse().     assertNotNull(pongResponse).     assertEquals(GRPC_TEST_PING_ID, pongResponse.getPongId()).     assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()). }
false;public;0;19;;@Test public void testAsyncSyncMethodInAsync() throws Exception {     LOG.info("gRPC pingAsyncSync method aync test start").     final CountDownLatch latch = new CountDownLatch(1).     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).     StreamObserver<PingRequest> requestObserver = asyncNonBlockingStub.pingAsyncSync(responseObserver).     requestObserver.onNext(pingRequest).     requestObserver.onNext(pingRequest).     requestObserver.onCompleted().     latch.await(5, TimeUnit.SECONDS).     PongResponse pongResponse = responseObserver.getPongResponse().     assertNotNull(pongResponse).     assertEquals(GRPC_TEST_PING_ID, pongResponse.getPongId()).     assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()). }
false;public;0;19;;@Test public void testAsyncAsyncMethodInAsync() throws Exception {     LOG.info("gRPC pingAsyncAsync method aync test start").     final CountDownLatch latch = new CountDownLatch(1).     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).     StreamObserver<PingRequest> requestObserver = asyncNonBlockingStub.pingAsyncAsync(responseObserver).     requestObserver.onNext(pingRequest).     requestObserver.onNext(pingRequest).     requestObserver.onCompleted().     latch.await(5, TimeUnit.SECONDS).     PongResponse pongResponse = responseObserver.getPongResponse().     assertNotNull(pongResponse).     assertEquals(GRPC_TEST_PING_ID, pongResponse.getPongId()).     assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()). }
false;public;0;8;;@Override public void configure() {     from("grpc://localhost:" + GRPC_SYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").bean(new GrpcMessageBuilder(), "buildPongResponse").     from("grpc://localhost:" + GRPC_ASYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").bean(new GrpcMessageBuilder(), "buildAsyncPongResponse"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("grpc://localhost:" + GRPC_SYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").bean(new GrpcMessageBuilder(), "buildPongResponse").             from("grpc://localhost:" + GRPC_ASYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").bean(new GrpcMessageBuilder(), "buildAsyncPongResponse").         }     }. }
false;public;0;3;;public PongResponse getPongResponse() {     return pongResponse. }
false;public;1;4;;@Override public void onNext(PongResponse value) {     pongResponse = value. }
false;public;1;5;;@Override public void onError(Throwable t) {     LOG.info("Exception", t).     latch.countDown(). }
false;public;0;4;;@Override public void onCompleted() {     latch.countDown(). }
false;public;1;3;;public PongResponse buildPongResponse(PingRequest pingRequest) {     return PongResponse.newBuilder().setPongName(pingRequest.getPingName() + GRPC_TEST_PONG_VALUE).setPongId(pingRequest.getPingId()).build(). }
false;public;1;3;;public PongResponse buildAsyncPongResponse(List<PingRequest> pingRequests) {     return PongResponse.newBuilder().setPongName(pingRequests.get(0).getPingName() + GRPC_TEST_PONG_VALUE).setPongId(pingRequests.get(0).getPingId()).build(). }
