commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void startGrpcServer() throws Exception {     pingPongServer = new PingPongImpl().     grpcServer = ServerBuilder.forPort(GRPC_TEST_PORT).addService(pingPongServer).build().start().     LOG.info("gRPC server started on port {}", GRPC_TEST_PORT). }
false;public;0;8;;@After public void stopGrpcServer() throws IOException {     if (grpcServer != null) {         grpcServer.shutdown().         LOG.info("gRPC server stopped").         pingPongServer = null.     } }
false;public;0;17;;@Test public void testPingAsyncAsync() throws Exception {     int messageCount = 10.     for (int i = 1. i <= messageCount. i++) {         template.sendBody("direct:grpc-stream-async-async-route", PingRequest.newBuilder().setPingName(String.valueOf(i)).build()).     }     MockEndpoint replies = getMockEndpoint("mock:grpc-replies").     replies.expectedMessageCount(messageCount).     replies.assertIsSatisfied().     context().stop().     assertNotNull(pingPongServer.getLastStreamRequests()).     assertListSize(pingPongServer.getLastStreamRequests(), 1).     assertListSize(pingPongServer.getLastStreamRequests().get(0), messageCount). }
false;public;0;32;;@Test public void testPingAsyncAsyncRecovery() throws Exception {     int messageGroupCount = 5.     for (int i = 1. i <= messageGroupCount. i++) {         template.sendBody("direct:grpc-stream-async-async-route", PingRequest.newBuilder().setPingName(String.valueOf(i)).build()).     }     template.sendBody("direct:grpc-stream-async-async-route", PingRequest.newBuilder().setPingName(String.valueOf("error")).build()).     MockEndpoint replies = getMockEndpoint("mock:grpc-replies").     replies.expectedMessageCount(messageGroupCount).     replies.assertIsSatisfied().     Thread.sleep(200).     for (int i = messageGroupCount + 1. i <= 2 * messageGroupCount. i++) {         template.sendBody("direct:grpc-stream-async-async-route", PingRequest.newBuilder().setPingName(String.valueOf(i)).build()).     }     replies.reset().     replies.expectedMessageCount(messageGroupCount).     replies.assertIsSatisfied().     context().stop().     assertNotNull(pingPongServer.getLastStreamRequests()).     assertListSize(pingPongServer.getLastStreamRequests(), 2).     assertListSize(pingPongServer.getLastStreamRequests().get(0), messageGroupCount + 1).     assertListSize(pingPongServer.getLastStreamRequests().get(1), messageGroupCount). }
false;public;0;8;;@Override public void configure() {     from("direct:grpc-stream-async-async-route").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?producerStrategy=STREAMING&streamRepliesTo=direct:grpc-replies&method=pingAsyncAsync").     from("direct:grpc-replies").to("mock:grpc-replies"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:grpc-stream-async-async-route").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?producerStrategy=STREAMING&streamRepliesTo=direct:grpc-replies&method=pingAsyncAsync").             from("direct:grpc-replies").to("mock:grpc-replies").         }     }. }
false;public;1;11;;@Override public void onNext(PingRequest request) {     streamRequests.add(request).     if ("error".equals(request.getPingName())) {         PingPongImpl.this.streamRequests.add(streamRequests).         responseObserver.onError(new RuntimeException("Requested error")).     } else {         PongResponse response = PongResponse.newBuilder().setPongName("Hello " + request.getPingName()).build().         responseObserver.onNext(response).     } }
false;public;1;5;;@Override public void onError(Throwable t) {     PingPongImpl.this.streamRequests.add(streamRequests).     LOG.info("Error in pingAsyncAsync() {}", t.getMessage()). }
false;public;0;5;;@Override public void onCompleted() {     PingPongImpl.this.streamRequests.add(streamRequests).     responseObserver.onCompleted(). }
false;public;1;32;;@Override public StreamObserver<PingRequest> pingAsyncAsync(StreamObserver<PongResponse> responseObserver) {     StreamObserver<PingRequest> requestObserver = new StreamObserver<PingRequest>() {          private List<PingRequest> streamRequests = new LinkedList<>().          @Override         public void onNext(PingRequest request) {             streamRequests.add(request).             if ("error".equals(request.getPingName())) {                 PingPongImpl.this.streamRequests.add(streamRequests).                 responseObserver.onError(new RuntimeException("Requested error")).             } else {                 PongResponse response = PongResponse.newBuilder().setPongName("Hello " + request.getPingName()).build().                 responseObserver.onNext(response).             }         }          @Override         public void onError(Throwable t) {             PingPongImpl.this.streamRequests.add(streamRequests).             LOG.info("Error in pingAsyncAsync() {}", t.getMessage()).         }          @Override         public void onCompleted() {             PingPongImpl.this.streamRequests.add(streamRequests).             responseObserver.onCompleted().         }     }.     return requestObserver. }
false;public;0;3;;public List<List<PingRequest>> getLastStreamRequests() {     return streamRequests. }
