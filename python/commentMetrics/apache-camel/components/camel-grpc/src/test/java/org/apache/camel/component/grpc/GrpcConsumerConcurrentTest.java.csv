commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static Integer createId() {     return idCounter.getAndIncrement(). }
false;public,static;0;3;;public static Integer getId() {     return idCounter.get(). }
false;public;0;28;;@Override public void run() {     final CountDownLatch latch = new CountDownLatch(1).     ManagedChannel asyncRequestChannel = NettyChannelBuilder.forAddress("localhost", GRPC_ASYNC_REQUEST_TEST_PORT).usePlaintext().build().     PingPongGrpc.PingPongStub asyncNonBlockingStub = PingPongGrpc.newStub(asyncRequestChannel).     PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).     int instanceId = createId().     final PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(instanceId).build().     StreamObserver<PingRequest> requestObserver = asyncNonBlockingStub.pingAsyncAsync(responseObserver).     requestObserver.onNext(pingRequest).     requestObserver.onNext(pingRequest).     requestObserver.onCompleted().     try {         latch.await(5, TimeUnit.SECONDS).     } catch (InterruptedException e) {         e.printStackTrace().     }     PongResponse pongResponse = responseObserver.getPongResponse().     assertNotNull("instanceId = " + instanceId, pongResponse).     assertEquals(instanceId, pongResponse.getPongId()).     assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()).     asyncRequestChannel.shutdown().shutdownNow(). }
false;public;0;36;;@Test public void testAsyncWithConcurrentThreads() throws Exception {     RunnableAssert ra = new RunnableAssert("foo") {          @Override         public void run() {             final CountDownLatch latch = new CountDownLatch(1).             ManagedChannel asyncRequestChannel = NettyChannelBuilder.forAddress("localhost", GRPC_ASYNC_REQUEST_TEST_PORT).usePlaintext().build().             PingPongGrpc.PingPongStub asyncNonBlockingStub = PingPongGrpc.newStub(asyncRequestChannel).             PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).             int instanceId = createId().             final PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(instanceId).build().             StreamObserver<PingRequest> requestObserver = asyncNonBlockingStub.pingAsyncAsync(responseObserver).             requestObserver.onNext(pingRequest).             requestObserver.onNext(pingRequest).             requestObserver.onCompleted().             try {                 latch.await(5, TimeUnit.SECONDS).             } catch (InterruptedException e) {                 e.printStackTrace().             }             PongResponse pongResponse = responseObserver.getPongResponse().             assertNotNull("instanceId = " + instanceId, pongResponse).             assertEquals(instanceId, pongResponse.getPongId()).             assertEquals(GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE, pongResponse.getPongName()).             asyncRequestChannel.shutdown().shutdownNow().         }     }.     new MultithreadingTester().add(ra).numThreads(CONCURRENT_THREAD_COUNT).numRoundsPerThread(ROUNDS_PER_THREAD_COUNT).run(). }
false;public;0;29;;@Override public void run() {     int instanceId = createId().     final CountDownLatch latch = new CountDownLatch(1).     ManagedChannel asyncRequestChannel = NettyChannelBuilder.forAddress("localhost", GRPC_HEADERS_TEST_PORT).userAgent(GRPC_USER_AGENT_PREFIX + instanceId).usePlaintext().build().     PingPongGrpc.PingPongStub asyncNonBlockingStub = PingPongGrpc.newStub(asyncRequestChannel).     PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).     final PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(instanceId).build().     StreamObserver<PingRequest> requestObserver = asyncNonBlockingStub.pingAsyncAsync(responseObserver).     requestObserver.onNext(pingRequest).     requestObserver.onNext(pingRequest).     requestObserver.onCompleted().     try {         latch.await(5, TimeUnit.SECONDS).     } catch (InterruptedException e) {         e.printStackTrace().     }     PongResponse pongResponse = responseObserver.getPongResponse().     assertNotNull("instanceId = " + instanceId, pongResponse).     assertEquals(instanceId, pongResponse.getPongId()).     assertEquals(GRPC_USER_AGENT_PREFIX + instanceId, pongResponse.getPongName()).     asyncRequestChannel.shutdown().shutdownNow(). }
false;public;0;37;;@Test public void testHeadersWithConcurrentThreads() throws Exception {     RunnableAssert ra = new RunnableAssert("foo") {          @Override         public void run() {             int instanceId = createId().             final CountDownLatch latch = new CountDownLatch(1).             ManagedChannel asyncRequestChannel = NettyChannelBuilder.forAddress("localhost", GRPC_HEADERS_TEST_PORT).userAgent(GRPC_USER_AGENT_PREFIX + instanceId).usePlaintext().build().             PingPongGrpc.PingPongStub asyncNonBlockingStub = PingPongGrpc.newStub(asyncRequestChannel).             PongResponseStreamObserver responseObserver = new PongResponseStreamObserver(latch).             final PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(instanceId).build().             StreamObserver<PingRequest> requestObserver = asyncNonBlockingStub.pingAsyncAsync(responseObserver).             requestObserver.onNext(pingRequest).             requestObserver.onNext(pingRequest).             requestObserver.onCompleted().             try {                 latch.await(5, TimeUnit.SECONDS).             } catch (InterruptedException e) {                 e.printStackTrace().             }             PongResponse pongResponse = responseObserver.getPongResponse().             assertNotNull("instanceId = " + instanceId, pongResponse).             assertEquals(instanceId, pongResponse.getPongId()).             assertEquals(GRPC_USER_AGENT_PREFIX + instanceId, pongResponse.getPongName()).             asyncRequestChannel.shutdown().shutdownNow().         }     }.     new MultithreadingTester().add(ra).numThreads(CONCURRENT_THREAD_COUNT).numRoundsPerThread(ROUNDS_PER_THREAD_COUNT).run(). }
false;public;0;8;;@Override public void configure() {     from("grpc://localhost:" + GRPC_ASYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").bean(new GrpcMessageBuilder(), "buildAsyncPongResponse").     from("grpc://localhost:" + GRPC_HEADERS_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").process(new HeaderExchangeProcessor()). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("grpc://localhost:" + GRPC_ASYNC_REQUEST_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").bean(new GrpcMessageBuilder(), "buildAsyncPongResponse").             from("grpc://localhost:" + GRPC_HEADERS_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?synchronous=true&consumerStrategy=AGGREGATION").process(new HeaderExchangeProcessor()).         }     }. }
false;public;0;3;;public PongResponse getPongResponse() {     return pongResponse. }
false;public;1;4;;@Override public void onNext(PongResponse value) {     pongResponse = value. }
false;public;1;5;;@Override public void onError(Throwable t) {     LOG.info("Exception", t).     latch.countDown(). }
false;public;0;4;;@Override public void onCompleted() {     latch.countDown(). }
false;public;1;3;;public PongResponse buildAsyncPongResponse(List<PingRequest> pingRequests) {     return PongResponse.newBuilder().setPongName(pingRequests.get(0).getPingName() + GRPC_TEST_PONG_VALUE).setPongId(pingRequests.get(0).getPingId()).build(). }
false;public;1;12;;@SuppressWarnings("unchecked") public void process(Exchange exchange) throws Exception {     List<PingRequest> pingRequests = (List<PingRequest>) exchange.getIn().getBody().     String userAgentName = (String) exchange.getIn().getHeader(GrpcConstants.GRPC_USER_AGENT_HEADER).     // As user agent name is prepended the library's user agent     // information it's necessary to extract this value (before first     // space)     PongResponse pongResponse = PongResponse.newBuilder().setPongName(userAgentName.substring(0, userAgentName.indexOf(' '))).setPongId(pingRequests.get(0).getPingId()).build().     exchange.getIn().setBody(pongResponse). }
