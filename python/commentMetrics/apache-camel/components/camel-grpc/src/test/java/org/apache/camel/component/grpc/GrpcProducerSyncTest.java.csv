commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;5;;@BeforeClass public static void startGrpcServer() throws Exception {     grpcServer = ServerBuilder.forPort(GRPC_TEST_PORT).addService(new PingPongImpl()).build().start().     LOG.info("gRPC server started on port {}", GRPC_TEST_PORT). }
false;public,static;0;7;;@AfterClass public static void stopGrpcServer() throws IOException {     if (grpcServer != null) {         grpcServer.shutdown().         LOG.info("gRPC server stoped").     } }
false;public;0;18;;@Test public void testPingSyncSyncMethodInvocation() throws Exception {     LOG.info("gRPC PingSyncSync method test start").     // Testing simple sync method invoke with host and port parameters     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     Object pongResponse = template.requestBody("direct:grpc-sync-sync", pingRequest).     assertNotNull(pongResponse).     assertTrue(pongResponse instanceof PongResponse).     assertEquals(((PongResponse) pongResponse).getPongId(), GRPC_TEST_PING_ID).     assertEquals(((PongResponse) pongResponse).getPongName(), GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE).     // Testing simple sync method with name described in .proto file instead     // of generated class     pongResponse = template.requestBody("direct:grpc-sync-proto-method-name", pingRequest).     assertNotNull(pongResponse).     assertTrue(pongResponse instanceof PongResponse).     assertEquals(((PongResponse) pongResponse).getPongId(), GRPC_TEST_PING_ID). }
false;public;0;12;;@Test public void testPingSyncSyncMultipleInvocation() throws Exception {     final Stopwatch stopwatch = Stopwatch.createStarted().     // Multiple sync methods call for average performance estimation     for (int id = 0. id < MULTIPLE_RUN_TEST_COUNT. id++) {         PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE + id).setPingId(id).build().         Object pongResponse = template.requestBody("direct:grpc-sync-sync", pingRequest).         assertEquals(((PongResponse) pongResponse).getPongId(), id).     }     LOG.info("Multiple sync invocation time {} milliseconds, everage operations/sec {}", stopwatch.stop().elapsed(TimeUnit.MILLISECONDS), Math.round(1000 * MULTIPLE_RUN_TEST_COUNT / stopwatch.elapsed(TimeUnit.MILLISECONDS))). }
false;public;0;13;;@Test @SuppressWarnings("unchecked") public void testPingSyncAsyncMethodInvocation() throws Exception {     LOG.info("gRPC PingSyncAsync method test start").     // Testing simple method with sync request and asyc response in synchronous invocation style     PingRequest pingRequest = PingRequest.newBuilder().setPingName(GRPC_TEST_PING_VALUE).setPingId(GRPC_TEST_PING_ID).build().     Object pongResponse = template.requestBody("direct:grpc-sync-async", pingRequest).     assertNotNull(pongResponse).     assertTrue(pongResponse instanceof List<?>).     assertEquals(((List<PongResponse>) pongResponse).get(0).getPongId(), GRPC_TEST_PONG_ID01).     assertEquals(((List<PongResponse>) pongResponse).get(1).getPongId(), GRPC_TEST_PONG_ID02).     assertEquals(((List<PongResponse>) pongResponse).get(0).getPongName(), GRPC_TEST_PING_VALUE + GRPC_TEST_PONG_VALUE). }
false;public;0;7;;@Override public void configure() {     from("direct:grpc-sync-sync").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?method=pingSyncSync&synchronous=true").     from("direct:grpc-sync-proto-method-name").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?method=PingSyncSync&synchronous=true").     from("direct:grpc-sync-async").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?method=pingSyncAsync&synchronous=true"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:grpc-sync-sync").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?method=pingSyncSync&synchronous=true").             from("direct:grpc-sync-proto-method-name").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?method=PingSyncSync&synchronous=true").             from("direct:grpc-sync-async").to("grpc://localhost:" + GRPC_TEST_PORT + "/org.apache.camel.component.grpc.PingPong?method=pingSyncAsync&synchronous=true").         }     }. }
false;public;2;7;;@Override public void pingSyncSync(PingRequest request, StreamObserver<PongResponse> responseObserver) {     LOG.info("gRPC server received data from PingPong service PingId={} PingName={}", request.getPingId(), request.getPingName()).     PongResponse response = PongResponse.newBuilder().setPongName(request.getPingName() + GRPC_TEST_PONG_VALUE).setPongId(request.getPingId()).build().     responseObserver.onNext(response).     responseObserver.onCompleted(). }
false;public;2;9;;@Override public void pingSyncAsync(PingRequest request, StreamObserver<PongResponse> responseObserver) {     LOG.info("gRPC server received data from PingAsyncResponse service PingId={} PingName={}", request.getPingId(), request.getPingName()).     PongResponse response01 = PongResponse.newBuilder().setPongName(request.getPingName() + GRPC_TEST_PONG_VALUE).setPongId(GRPC_TEST_PONG_ID01).build().     PongResponse response02 = PongResponse.newBuilder().setPongName(request.getPingName() + GRPC_TEST_PONG_VALUE).setPongId(GRPC_TEST_PONG_ID02).build().     responseObserver.onNext(response01).     responseObserver.onNext(response02).     responseObserver.onCompleted(). }
