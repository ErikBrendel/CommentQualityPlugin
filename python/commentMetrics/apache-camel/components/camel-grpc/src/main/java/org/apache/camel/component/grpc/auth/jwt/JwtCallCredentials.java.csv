commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Override public void run() {     try {         LOG.debug("Start to apply for the JWT token header").         Metadata headers = new Metadata().         Metadata.Key<String> jwtKey = GrpcConstants.GRPC_JWT_METADATA_KEY.         headers.put(jwtKey, jwtToken).         applier.apply(headers).     } catch (Throwable e) {         LOG.debug("Unable to set metadata credentials header", e).         applier.fail(Status.UNAUTHENTICATED.withCause(e)).     } }
false;public;4;21;;@Override public void applyRequestMetadata(MethodDescriptor<?, ?> method, Attributes attrs, Executor executor, MetadataApplier applier) {     String authority = attrs.get(ATTR_AUTHORITY).     LOG.debug("Using authority {} for credentials", authority).     executor.execute(new Runnable() {          @Override         public void run() {             try {                 LOG.debug("Start to apply for the JWT token header").                 Metadata headers = new Metadata().                 Metadata.Key<String> jwtKey = GrpcConstants.GRPC_JWT_METADATA_KEY.                 headers.put(jwtKey, jwtToken).                 applier.apply(headers).             } catch (Throwable e) {                 LOG.debug("Unable to set metadata credentials header", e).                 applier.fail(Status.UNAUTHENTICATED.withCause(e)).             }         }     }). }
false;public;0;3;;@Override public void thisUsesUnstableApi() { }
