commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     StreamObserver<Object> streamObserver = this.globalResponseObserver.     if (globalResponseObserver == null) {         streamObserver = new GrpcResponseAggregationStreamObserver(exchange, callback).     }     return forwarder.forward(exchange, streamObserver, callback). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     forwarder.forward(exchange). }
false;protected;0;34;;@Override protected void doStart() throws Exception {     super.doStart().     if (channel == null) {         CallCredentials callCreds = null.         initializeChannel().         if (configuration.getAuthenticationType() == GrpcAuthType.GOOGLE) {             ObjectHelper.notNull(configuration.getKeyCertChainResource(), "serviceAccountResource").             ClassResolver classResolver = endpoint.getCamelContext().getClassResolver().             Credentials creds = GoogleCredentials.fromStream(ResourceHelper.resolveResourceAsInputStream(classResolver, configuration.getServiceAccountResource())).             callCreds = MoreCallCredentials.from(creds).         } else if (configuration.getAuthenticationType() == GrpcAuthType.JWT) {             ObjectHelper.notNull(configuration.getJwtSecret(), "jwtSecret").             String jwtToken = JwtHelper.createJwtToken(configuration.getJwtAlgorithm(), configuration.getJwtSecret(), configuration.getJwtIssuer(), configuration.getJwtSubject()).             callCreds = new JwtCallCredentials(jwtToken).         }         if (endpoint.isSynchronous()) {             log.debug("Getting synchronous method stub from channel").             grpcStub = GrpcUtils.constructGrpcBlockingStub(endpoint.getServicePackage(), endpoint.getServiceName(), channel, callCreds, endpoint.getCamelContext()).         } else {             log.debug("Getting asynchronous method stub from channel").             grpcStub = GrpcUtils.constructGrpcAsyncStub(endpoint.getServicePackage(), endpoint.getServiceName(), channel, callCreds, endpoint.getCamelContext()).         }         forwarder = GrpcExchangeForwarderFactory.createExchangeForwarder(configuration, grpcStub).         if (configuration.getStreamRepliesTo() != null) {             this.globalResponseObserver = new GrpcResponseRouterStreamObserver(configuration, getEndpoint()).         }     } }
false;protected;0;14;;@Override protected void doStop() throws Exception {     if (channel != null) {         forwarder.shutdown().         forwarder = null.         log.debug("Terminating channel to the remote gRPC server").         channel.shutdown().shutdownNow().         channel = null.         grpcStub = null.         globalResponseObserver = null.     }     super.doStop(). }
false;protected;0;34;;protected void initializeChannel() throws Exception {     NettyChannelBuilder channelBuilder = null.     if (!ObjectHelper.isEmpty(configuration.getHost()) && !ObjectHelper.isEmpty(configuration.getPort())) {         log.info("Creating channel to the remote gRPC server {}:{}", configuration.getHost(), configuration.getPort()).         channelBuilder = NettyChannelBuilder.forAddress(configuration.getHost(), configuration.getPort()).     } else {         throw new IllegalArgumentException("No connection properties (host or port) specified").     }     if (configuration.getNegotiationType() == NegotiationType.TLS) {         ObjectHelper.notNull(configuration.getKeyCertChainResource(), "keyCertChainResource").         ObjectHelper.notNull(configuration.getKeyResource(), "keyResource").         ClassResolver classResolver = endpoint.getCamelContext().getClassResolver().         SslContextBuilder sslContextBuilder = GrpcSslContexts.forClient().sslProvider(SslProvider.OPENSSL).keyManager(ResourceHelper.resolveResourceAsInputStream(classResolver, configuration.getKeyCertChainResource()), ResourceHelper.resolveResourceAsInputStream(classResolver, configuration.getKeyResource()), configuration.getKeyPassword()).         if (ObjectHelper.isNotEmpty(configuration.getTrustCertCollectionResource())) {             sslContextBuilder = sslContextBuilder.trustManager(ResourceHelper.resolveResourceAsInputStream(classResolver, configuration.getTrustCertCollectionResource())).         }         channelBuilder = channelBuilder.sslContext(sslContextBuilder.build()).     }     channel = channelBuilder.negotiationType(configuration.getNegotiationType()).flowControlWindow(configuration.getFlowControlWindow()).userAgent(configuration.getUserAgent()).maxInboundMessageSize(configuration.getMaxMessageSize()).build(). }
