commented;modifiers;parameterAmount;loc;comment;code
false;public;4;53;;@Override @SuppressWarnings("unchecked") public Object invoke(Object self, Method thisMethod, Method proceed, Object[] args) throws Throwable {     Map<String, Object> grcpHeaders = new HashMap<>().     grcpHeaders.put(GrpcHeaderInterceptor.USER_AGENT_CONTEXT_KEY.toString(), GrpcHeaderInterceptor.USER_AGENT_CONTEXT_KEY.get()).     grcpHeaders.put(GrpcHeaderInterceptor.CONTENT_TYPE_CONTEXT_KEY.toString(), GrpcHeaderInterceptor.CONTENT_TYPE_CONTEXT_KEY.get()).     grcpHeaders.put(GrpcConstants.GRPC_METHOD_NAME_HEADER, thisMethod.getName()).     // Two incoming parameters and second is instance of the io.grpc.stub.StreamObserver     if (args.length == 2 && args[1] instanceof StreamObserver) {         Exchange exchange = endpoint.createExchange().         exchange.getIn().setBody(args[0]).         exchange.getIn().setHeaders(grcpHeaders).         if (endpoint.isSynchronous()) {             consumer.getProcessor().process(exchange).         } else {             consumer.getAsyncProcessor().process(exchange).         }         StreamObserver<Object> responseObserver = (StreamObserver<Object>) args[1].         Object responseBody = exchange.getIn().getBody().         if (responseBody instanceof List) {             List<Object> responseList = (List<Object>) responseBody.             responseList.forEach((responseItem) -> {                 responseObserver.onNext(responseItem).             }).         } else {             responseObserver.onNext(responseBody).         }         responseObserver.onCompleted().     } else if (args.length == 1 && args[0] instanceof StreamObserver) {         // Single incoming parameter is instance of the io.grpc.stub.StreamObserver         final StreamObserver<Object> responseObserver = (StreamObserver<Object>) args[0].         StreamObserver<Object> requestObserver = null.         if (consumer.getConfiguration().getConsumerStrategy() == GrpcConsumerStrategy.AGGREGATION) {             requestObserver = new GrpcRequestAggregationStreamObserver(endpoint, consumer, responseObserver, grcpHeaders).         } else if (consumer.getConfiguration().getConsumerStrategy() == GrpcConsumerStrategy.PROPAGATION) {             requestObserver = new GrpcRequestPropagationStreamObserver(endpoint, consumer, responseObserver, grcpHeaders).         } else {             throw new IllegalArgumentException("gRPC processing strategy not implemented " + consumer.getConfiguration().getConsumerStrategy()).         }         return requestObserver.     } else {         throw new IllegalArgumentException("Invalid to process gRPC method: " + thisMethod.getName()).     }     return null. }
