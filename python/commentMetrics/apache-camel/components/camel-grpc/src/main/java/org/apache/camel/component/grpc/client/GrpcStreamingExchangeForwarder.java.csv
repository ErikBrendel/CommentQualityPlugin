commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;@Override public boolean forward(Exchange exchange, StreamObserver<Object> responseObserver, AsyncCallback callback) {     Message message = exchange.getIn().     checkAndRecreateStreamObserver(responseObserver).onNext(message.getBody()).     callback.done(true).     return true. }
false;public;1;4;;@Override public void forward(Exchange exchange) {     throw new UnsupportedOperationException("Synchronous call is not supported in streaming mode"). }
false;public;0;5;;@Override public void shutdown() {     checkAndRecreateStreamObserver(this.currentResponseObserver).onCompleted().     doCloseStream(). }
false;private;1;19;;private StreamObserver<Object> checkAndRecreateStreamObserver(StreamObserver<Object> responseObserver) {     StreamObserver<Object> curStream = this.currentStream.     if (curStream == null) {         synchronized (this) {             if (this.currentStream == null) {                 this.currentResponseObserver = responseObserver.                 this.currentStream = doCreateStream(responseObserver).             }             curStream = this.currentStream.         }     }     StreamObserver<Object> curResponseObserver = this.currentResponseObserver.     if (curResponseObserver != null && !curResponseObserver.equals(responseObserver)) {         throw new IllegalArgumentException("This forwarder must always use the same response observer").     }     return curStream. }
false;private;0;6;;private void doCloseStream() {     synchronized (this) {         this.currentStream = null.         this.currentResponseObserver = null.     } }
false;public;1;5;;@Override public void onNext(Object o) {     streamObserver.onNext(o). }
false;public;1;5;;@Override public void onError(Throwable throwable) {     doCloseStream().     streamObserver.onError(throwable). }
false;public;0;5;;@Override public void onCompleted() {     doCloseStream().     streamObserver.onCompleted(). }
false;private;1;24;;private StreamObserver<Object> doCreateStream(StreamObserver<Object> streamObserver) {     return GrpcUtils.invokeAsyncMethodStreaming(grpcStub, configuration.getMethod(), new StreamObserver<Object>() {          @Override         public void onNext(Object o) {             streamObserver.onNext(o).         }          @Override         public void onError(Throwable throwable) {             doCloseStream().             streamObserver.onError(throwable).         }          @Override         public void onCompleted() {             doCloseStream().             streamObserver.onCompleted().         }     }). }
