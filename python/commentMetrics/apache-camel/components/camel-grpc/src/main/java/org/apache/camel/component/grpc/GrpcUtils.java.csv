# id;timestamp;commentText;codeText;commentWords;codeWords
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel);1491565545;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_PREFIX__        try {_            Class grpcServiceClass = Class.forName(serviceClassName)__            Method grpcBlockingMethod = ReflectionUtils.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD)__            }_            grpcBlockingStub = ReflectionUtils.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,class,for,name,service,class,name,method,grpc,blocking,method,reflection,utils,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,grpc,constants,grpc,blocking,stub,reflection,utils,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel);1495006020;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX__        try {_            Class grpcServiceClass = Class.forName(serviceClassName)__            Method grpcBlockingMethod = ReflectionUtils.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD)__            }_            grpcBlockingStub = ReflectionUtils.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,class,for,name,service,class,name,method,grpc,blocking,method,reflection,utils,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,grpc,constants,grpc,blocking,stub,reflection,utils,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel);1495713757;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX__        try {_            Class grpcServiceClass = Class.forName(serviceClassName)__            Method grpcBlockingMethod = ReflectionUtils.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD)__            }_            grpcBlockingStub = ReflectionUtils.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,class,for,name,service,class,name,method,grpc,blocking,method,reflection,utils,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,grpc,constants,grpc,blocking,stub,reflection,utils,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1491565545;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1495006020;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1495713757;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1495870300;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1496058592;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1497028036;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1497626384;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1498568097;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1504860232;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1523994338;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> public static String convertMethod2CamelCase(final String method);1540108163;Migrated MixedLower function from the gRPC converting plugin source code_(https://github.com/grpc/grpc-java/blob/master/compiler/src/java_plugin/cpp/java_generator.cpp)__- decapitalize the first letter_- remove embedded underscores & capitalize the following letter;public static String convertMethod2CamelCase(final String method) {_        StringBuilder sb = new StringBuilder(method.length())__        sb.append(method.substring(0, 1).toLowerCase())__        Boolean afterUnderscore = false__        for (int i = 1_ i < method.length()_ i++) {_            if (method.charAt(i) == '_') {_                afterUnderscore = true__            } else {_                sb.append(afterUnderscore ? Character.toUpperCase(method.charAt(i)) : method.charAt(i))__                afterUnderscore = false__            }_        }_        return sb.toString()__    };migrated,mixed,lower,function,from,the,g,rpc,converting,plugin,source,code,https,github,com,grpc,grpc,java,blob,master,compiler,src,cpp,cpp,decapitalize,the,first,letter,remove,embedded,underscores,capitalize,the,following,letter;public,static,string,convert,method2camel,case,final,string,method,string,builder,sb,new,string,builder,method,length,sb,append,method,substring,0,1,to,lower,case,boolean,after,underscore,false,for,int,i,1,i,method,length,i,if,method,char,at,i,after,underscore,true,else,sb,append,after,underscore,character,to,upper,case,method,char,at,i,method,char,at,i,after,underscore,false,return,sb,to,string
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context);1504860232;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context) {_        Class[] paramChannel = {Channel.class}__        Object grpcStub = null___        String serviceClassName = constructFullClassName(packageName, serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX)__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod)__            }_            grpcStub = ObjectHelper.invokeMethod(grpcMethod, grpcServiceClass, channel)__            _            if (creds != null) {_                return addClientCallCredentials(grpcStub, creds)__            }__        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,call,credentials,creds,final,camel,context,context,class,param,channel,channel,class,object,grpc,stub,null,string,service,class,name,construct,full,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,stub,method,grpc,stub,object,helper,invoke,method,grpc,method,grpc,service,class,channel,if,creds,null,return,add,client,call,credentials,grpc,stub,creds,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context);1523994338;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context) {_        Class[] paramChannel = {Channel.class}__        Object grpcStub = null___        String serviceClassName = constructFullClassName(packageName, serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX)__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod)__            }_            grpcStub = ObjectHelper.invokeMethod(grpcMethod, grpcServiceClass, channel)__            _            if (creds != null) {_                return addClientCallCredentials(grpcStub, creds)__            }__        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,call,credentials,creds,final,camel,context,context,class,param,channel,channel,class,object,grpc,stub,null,string,service,class,name,construct,full,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,stub,method,grpc,stub,object,helper,invoke,method,grpc,method,grpc,service,class,channel,if,creds,null,return,add,client,call,credentials,grpc,stub,creds,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context);1540108163;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CallCredentials creds, final CamelContext context) {_        Class[] paramChannel = {Channel.class}__        Object grpcStub = null___        String serviceClassName = constructFullClassName(packageName, serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX)__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod)__            }_            grpcStub = ObjectHelper.invokeMethod(grpcMethod, grpcServiceClass, channel)__            _            if (creds != null) {_                return addClientCallCredentials(grpcStub, creds)__            }__        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,call,credentials,creds,final,camel,context,context,class,param,channel,channel,class,object,grpc,stub,null,string,service,class,name,construct,full,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,stub,method,grpc,stub,object,helper,invoke,method,grpc,method,grpc,service,class,channel,if,creds,null,return,add,client,call,credentials,grpc,stub,creds,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context);1495870300;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcBlockingMethod = ReflectionUtils.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD)__            }_            grpcBlockingStub = ReflectionUtils.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,camel,context,context,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,blocking,method,reflection,utils,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,grpc,constants,grpc,blocking,stub,reflection,utils,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context);1496058592;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcBlockingMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + GrpcConstants.GRPC_SERVICE_SYNC_STUB_METHOD)__            }_            grpcBlockingStub = ObjectHelper.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,camel,context,context,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,blocking,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,grpc,constants,grpc,blocking,stub,object,helper,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context);1497028036;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcBlockingMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod)__            }_            grpcBlockingStub = ObjectHelper.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,camel,context,context,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,blocking,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,stub,method,grpc,blocking,stub,object,helper,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context);1497626384;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = packageName + "." + serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcBlockingMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod)__            }_            grpcBlockingStub = ObjectHelper.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,camel,context,context,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,blocking,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,stub,method,grpc,blocking,stub,object,helper,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
GrpcUtils -> @SuppressWarnings({"rawtypes"})     private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context);1498568097;Get gRPC stub class instance depends on the invocation style_newBlockingStub - for sync style_newStub - for async style_newFutureStub - for ListenableFuture-style (not implemented yet);@SuppressWarnings({"rawtypes"})_    private static Object constructGrpcStubClass(String packageName, String serviceName, String stubMethod, Channel channel, final CamelContext context) {_        Class[] paramChannel = new Class[1]__        paramChannel[0] = Channel.class__        Object grpcBlockingStub = null___        String serviceClassName = constructFullClassName(packageName, serviceName + GrpcConstants.GRPC_SERVICE_CLASS_POSTFIX)__        try {_            Class grpcServiceClass = context.getClassResolver().resolveMandatoryClass(serviceClassName)__            Method grpcBlockingMethod = ReflectionHelper.findMethod(grpcServiceClass, stubMethod, paramChannel)__            if (grpcBlockingMethod == null) {_                throw new IllegalArgumentException("gRPC service method not found: " + serviceClassName + "." + stubMethod)__            }_            grpcBlockingStub = ObjectHelper.invokeMethod(grpcBlockingMethod, grpcServiceClass, channel)___        } catch (ClassNotFoundException e) {_            throw new IllegalArgumentException("gRPC service class not found: " + serviceClassName)__        }_        return grpcBlockingStub__    };get,g,rpc,stub,class,instance,depends,on,the,invocation,style,new,blocking,stub,for,sync,style,new,stub,for,async,style,new,future,stub,for,listenable,future,style,not,implemented,yet;suppress,warnings,rawtypes,private,static,object,construct,grpc,stub,class,string,package,name,string,service,name,string,stub,method,channel,channel,final,camel,context,context,class,param,channel,new,class,1,param,channel,0,channel,class,object,grpc,blocking,stub,null,string,service,class,name,construct,full,class,name,package,name,service,name,grpc,constants,try,class,grpc,service,class,context,get,class,resolver,resolve,mandatory,class,service,class,name,method,grpc,blocking,method,reflection,helper,find,method,grpc,service,class,stub,method,param,channel,if,grpc,blocking,method,null,throw,new,illegal,argument,exception,g,rpc,service,method,not,found,service,class,name,stub,method,grpc,blocking,stub,object,helper,invoke,method,grpc,blocking,method,grpc,service,class,channel,catch,class,not,found,exception,e,throw,new,illegal,argument,exception,g,rpc,service,class,not,found,service,class,name,return,grpc,blocking,stub
