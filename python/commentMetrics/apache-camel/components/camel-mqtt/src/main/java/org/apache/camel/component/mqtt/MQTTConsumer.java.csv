commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public MQTTEndpoint getEndpoint() {     return (MQTTEndpoint) super.getEndpoint(). }
false;protected;0;7;;protected void doStart() throws Exception {     getEndpoint().addConsumer(this).     if (!getEndpoint().isConnected()) {         getEndpoint().connect().     }     super.doStart(). }
false;protected;0;4;;protected void doStop() throws Exception {     getEndpoint().removeConsumer(this).     super.doStop(). }
false;public;1;6;;@Override public void done(boolean doneSync) {     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange.", exchange, exchange.getException()).     } }
false;;1;21;;void processExchange(final Exchange exchange) {     boolean sync = true.     try {         sync = getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 if (exchange.getException() != null) {                     getExceptionHandler().handleException("Error processing exchange.", exchange, exchange.getException()).                 }             }         }).     } catch (Throwable e) {         exchange.setException(e).     }     if (sync) {         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange.", exchange, exchange.getException()).         }     } }
