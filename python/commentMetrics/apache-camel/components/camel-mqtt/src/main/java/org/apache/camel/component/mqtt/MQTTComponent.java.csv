commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;20;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     MQTTConfiguration configuration = new MQTTConfiguration().     if (host != null) {         configuration.setHost(host).     }     if (userName != null) {         configuration.setUserName(userName).     }     if (password != null) {         configuration.setPassword(password).     }     // and then override from parameters     setProperties(configuration, parameters).     MQTTEndpoint endpoint = new MQTTEndpoint(uri, this, configuration).     endpoint.setName(remaining).     return endpoint. }
false;public;0;4;;@Override public boolean useRawUri() {     // to prevent MQTT "+" wildcard from being lost     return true. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883  */ ;/**  * The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public String getUserName() {     return userName. }
true;public;1;3;/**  * Username to be used for authentication against the MQTT broker  */ ;/**  * Username to be used for authentication against the MQTT broker  */ public void setUserName(String userName) {     this.userName = userName. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Password to be used for authentication against the MQTT broker  */ ;/**  * Password to be used for authentication against the MQTT broker  */ public void setPassword(String password) {     this.password = password. }
