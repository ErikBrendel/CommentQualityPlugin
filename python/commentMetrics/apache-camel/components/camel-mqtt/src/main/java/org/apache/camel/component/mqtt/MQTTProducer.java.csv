commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void onSuccess(Void aVoid) {     log.trace("onSuccess from {}", name).     callback.done(false). }
false;public;1;6;;@Override public void onFailure(Throwable throwable) {     log.trace("onFailure from {}", name).     exchange.setException(throwable).     callback.done(false). }
false;public;2;63;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     if (!mqttEndpoint.isConnected()) {         try {             ensureConnected().         } catch (Exception e) {             exchange.setException(e).             callback.done(true).             return true.         }     }     byte[] body = exchange.getIn().getBody(byte[].class).     if (body != null) {         MQTTConfiguration configuration = mqttEndpoint.getConfiguration().         boolean retain = exchange.getProperty(configuration.getMqttRetainPropertyName(), configuration.isByDefaultRetain(), Boolean.class).         QoS qoS = configuration.getQoS().         Object qoSValue = exchange.getProperty(configuration.getMqttQosPropertyName()).         if (qoSValue != null) {             qoS = MQTTConfiguration.getQoS(qoSValue.toString()).         }         // where should we publish to         String topicName = configuration.getPublishTopicName().         // get the topic name by using the header of MQTT_PUBLISH_TOPIC         Object topicValue = exchange.getIn().getHeader(MQTTConfiguration.MQTT_PUBLISH_TOPIC).         if (topicValue != null) {             topicName = topicValue.toString().         }         final String name = topicName.         try {             log.debug("Publishing to {}", name).             mqttEndpoint.publish(name, body, qoS, retain, new Callback<Void>() {                  @Override                 public void onSuccess(Void aVoid) {                     log.trace("onSuccess from {}", name).                     callback.done(false).                 }                  @Override                 public void onFailure(Throwable throwable) {                     log.trace("onFailure from {}", name).                     exchange.setException(throwable).                     callback.done(false).                 }             }).         } catch (Exception e) {             exchange.setException(e).             callback.done(true).             return true.         }         // we continue async, as the mqtt endpoint will invoke the callback when its done         return false.     } else {         // no data to send so we are done         log.trace("No data to publish").         callback.done(true).         return true.     } }
false;protected;0;6;;protected void doStart() throws Exception {     if (!mqttEndpoint.getConfiguration().isLazySessionCreation()) {         ensureConnected().     }     super.doStart(). }
false;protected,synchronized;0;5;;protected synchronized void ensureConnected() throws Exception {     if (!mqttEndpoint.isConnected()) {         mqttEndpoint.connect().     } }
