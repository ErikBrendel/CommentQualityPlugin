commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMqttBridge() throws Exception {     String expectedBody = "Dummy!".     resultEndpoint.expectedBodiesReceived(expectedBody).     template.sendBody(expectedBody).     resultEndpoint.assertIsSatisfied(). }
false;public;0;10;;@Test public void testMqttBridgeWorkAround() throws Exception {     String expectedBody = "Dummy!".     resultEndpoint.expectedBodiesReceived(expectedBody).     workaroundTemplate.sendBody(expectedBody).     resultEndpoint.assertIsSatisfied(). }
false;public;0;17;;public void configure() {     // Bridge message over two MQTT topics     from("direct:start").to("mqtt:foo?publishTopicName=test/topic1&lazySessionCreation=false&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).     from("mqtt:foo?subscribeTopicName=test/topic1&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).to("log:testlogger?showAll=true").to("mqtt:foo?publishTopicName=test/resulttopic&lazySessionCreation=false&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).log(LoggingLevel.ERROR, "Message processed").     // Bridge message over two MQTT topics with a seda in between     from("direct:startWorkaround").to("mqtt:foo?publishTopicName=test/topic2&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).     from("mqtt:foo?subscribeTopicName=test/topic2&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).to("log:testlogger?showAll=true").to("seda:a").     from("seda:a").to("mqtt:foo?publishTopicName=test/resulttopic&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).log(LoggingLevel.ERROR, "Message processed").     // Forward the result to a mock endpoint to test     from("mqtt:foo?subscribeTopicName=test/resulttopic&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).to("mock:result"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Bridge message over two MQTT topics             from("direct:start").to("mqtt:foo?publishTopicName=test/topic1&lazySessionCreation=false&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).             from("mqtt:foo?subscribeTopicName=test/topic1&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).to("log:testlogger?showAll=true").to("mqtt:foo?publishTopicName=test/resulttopic&lazySessionCreation=false&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).log(LoggingLevel.ERROR, "Message processed").             // Bridge message over two MQTT topics with a seda in between             from("direct:startWorkaround").to("mqtt:foo?publishTopicName=test/topic2&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).             from("mqtt:foo?subscribeTopicName=test/topic2&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).to("log:testlogger?showAll=true").to("seda:a").             from("seda:a").to("mqtt:foo?publishTopicName=test/resulttopic&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).log(LoggingLevel.ERROR, "Message processed").             // Forward the result to a mock endpoint to test             from("mqtt:foo?subscribeTopicName=test/resulttopic&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).to("mock:result").         }     }. }
