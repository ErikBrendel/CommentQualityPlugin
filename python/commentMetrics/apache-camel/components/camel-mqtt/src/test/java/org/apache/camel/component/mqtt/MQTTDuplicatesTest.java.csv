commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMqttDuplicates() throws Exception {     for (int i = 0. i < MESSAGE_COUNT. i++) {         String body = System.currentTimeMillis() + ": Dummy! " + i.         templateWithClientID.asyncSendBody("direct:withClientID", body).         Thread.sleep(WAIT_MILLIS).     }     assertNoDuplicates(). }
false;public;0;22;;@Test public void testMqttDuplicatesAfterBrokerRestartWithoutClientID() throws Exception {     brokerService.stop().     brokerService.waitUntilStopped().     LOG.info(">>>>>>>>>> Restarting broker...").     brokerService = new BrokerService().     brokerService.setPersistent(false).     brokerService.setAdvisorySupport(false).     brokerService.addConnector(MQTTTestSupport.getConnection() + "?trace=true").     brokerService.start().     brokerService.waitUntilStarted().     LOG.info(">>>>>>>>>> Broker restarted").     for (int i = 0. i < MESSAGE_COUNT. i++) {         String body = System.currentTimeMillis() + ": Dummy-restart-without-clientID! " + i.         templateWithoutClientID.asyncSendBody("direct:withoutClientID", body).         Thread.sleep(WAIT_MILLIS).     }     assertNoDuplicates(). }
false;public;0;22;;@Test public void testMqttDuplicatesAfterBrokerRestartWithClientID() throws Exception {     brokerService.stop().     brokerService.waitUntilStopped().     LOG.info(">>>>>>>>>> Restarting broker...").     brokerService = new BrokerService().     brokerService.setPersistent(false).     brokerService.setAdvisorySupport(false).     brokerService.addConnector(MQTTTestSupport.getConnection() + "?trace=true").     brokerService.start().     brokerService.waitUntilStarted().     LOG.info(">>>>>>>>>> Broker restarted").     for (int i = 0. i < MESSAGE_COUNT. i++) {         String body = System.currentTimeMillis() + ": Dummy-restart-with-clientID! " + i.         templateWithClientID.asyncSendBody("direct:withClientID", body).         Thread.sleep(WAIT_MILLIS).     }     assertNoDuplicates(). }
false;private;0;14;;private void assertNoDuplicates() {     List<Exchange> exchanges = resultEndpoint.getExchanges().     Assert.assertTrue("No message was delivered - something wrong happened", exchanges.size() > 0).     Set<String> values = new HashSet<>().     List<String> duplicates = new ArrayList<>().     for (Exchange e : exchanges) {         String body = e.getIn().getBody(String.class).         if (values.contains(body)) {             duplicates.add(body).         }         values.add(body).     }     Assert.assertTrue("Duplicate messages are detected: " + duplicates.toString(), duplicates.isEmpty()). }
false;public;0;28;;public void configure() {     // --------------------     // Without client ID:     // --------------------     from("direct:withoutClientID").routeId("SenderWithoutClientID").log("$$$$$ Sending message: ${body}").to("mqtt:sender?publishTopicName=test/topic1&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).     from("mqtt:reader?subscribeTopicName=test/topic1&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).routeId("ReceiverWithoutClientID").log("$$$$$ Received message: ${body}").to("mock:result").     // --------------------     // With client ID:     // --------------------     from("direct:withClientID").routeId("SenderWithClientID").log("$$$$$ Sending message: ${body}").to("mqtt:sender?publishTopicName=test/topic2&clientId=sender&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).     from("mqtt:reader?subscribeTopicName=test/topic2&clientId=receiver&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).routeId("ReceiverWithClientID").log("$$$$$ Received message: ${body}").to("mock:result"). }
false;protected;0;33;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // --------------------             // Without client ID:             // --------------------             from("direct:withoutClientID").routeId("SenderWithoutClientID").log("$$$$$ Sending message: ${body}").to("mqtt:sender?publishTopicName=test/topic1&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).             from("mqtt:reader?subscribeTopicName=test/topic1&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).routeId("ReceiverWithoutClientID").log("$$$$$ Received message: ${body}").to("mock:result").             // --------------------             // With client ID:             // --------------------             from("direct:withClientID").routeId("SenderWithClientID").log("$$$$$ Sending message: ${body}").to("mqtt:sender?publishTopicName=test/topic2&clientId=sender&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).             from("mqtt:reader?subscribeTopicName=test/topic2&clientId=receiver&qualityOfService=ExactlyOnce&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).routeId("ReceiverWithClientID").log("$$$$$ Received message: ${body}").to("mock:result").         }     }. }
