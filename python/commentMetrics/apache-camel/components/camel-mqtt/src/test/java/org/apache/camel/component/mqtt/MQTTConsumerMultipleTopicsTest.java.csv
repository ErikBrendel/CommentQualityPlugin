commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testConsumeMultipleTopics() throws Exception {     MQTT mqtt = new MQTT().     mqtt.setHost(MQTTTestSupport.getHostForMQTTEndpoint()).     BlockingConnection publisherConnection = mqtt.blockingConnection().     Topic topic1 = new Topic(TEST_TOPIC, QoS.AT_MOST_ONCE).     Topic topic2 = new Topic(TEST_TOPIC_2, QoS.AT_MOST_ONCE).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(numberOfMessages * 2).     publisherConnection.connect().     String payload.     for (int i = 0. i < numberOfMessages. i++) {         payload = "Topic 1, Message " + i.         publisherConnection.publish(topic1.name().toString(), payload.getBytes(), QoS.AT_LEAST_ONCE, false).         payload = "Topic 2, Message " + i.         publisherConnection.publish(topic2.name().toString(), payload.getBytes(), QoS.AT_LEAST_ONCE, false).     }     mock.await(5, TimeUnit.SECONDS).     mock.assertIsSatisfied(). }
false;public;0;5;;public void configure() {     from("mqtt:bar?subscribeTopicNames=" + TEST_TOPICS + "&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).transform(body().convertToString()).to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("mqtt:bar?subscribeTopicNames=" + TEST_TOPICS + "&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).transform(body().convertToString()).to("mock:result").         }     }. }
