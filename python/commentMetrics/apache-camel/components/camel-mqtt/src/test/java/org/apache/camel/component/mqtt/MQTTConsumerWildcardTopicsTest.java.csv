commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testConsumeMultipleTopicsWithWildcards() throws Exception {     MQTT mqtt = new MQTT().     mqtt.setHost(MQTTTestSupport.getHostForMQTTEndpoint()).     BlockingConnection publisherConnection = mqtt.blockingConnection().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(numberOfMessages * (PUBLISH_TOPICS.length - 1)).     publisherConnection.connect().     String payload.     for (String topic : PUBLISH_TOPICS) {         for (int i = 0. i < numberOfMessages. i++) {             payload = "Topic " + topic + ", Message " + i.             publisherConnection.publish(topic, payload.getBytes(), QoS.AT_LEAST_ONCE, false).         }     }     mock.await(5, TimeUnit.SECONDS).     mock.assertIsSatisfied(). }
false;public;0;5;;public void configure() {     from("mqtt:bar?subscribeTopicNames=" + TEST_TOPICS_WITH_WILDCARDS + "&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).transform(body().convertToString()).to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("mqtt:bar?subscribeTopicNames=" + TEST_TOPICS_WITH_WILDCARDS + "&host=" + MQTTTestSupport.getHostForMQTTEndpoint()).transform(body().convertToString()).to("mock:result").         }     }. }
