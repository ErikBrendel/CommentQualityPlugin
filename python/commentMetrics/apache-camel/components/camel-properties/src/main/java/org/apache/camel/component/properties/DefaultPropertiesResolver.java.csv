commented;modifiers;parameterAmount;loc;comment;code
false;public;3;28;;public Properties resolveProperties(CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations) throws Exception {     Properties answer = new Properties().     Properties prop.     for (PropertiesLocation location : locations) {         switch(location.getResolver()) {             case "ref":                 prop = loadPropertiesFromRegistry(context, ignoreMissingLocation, location).                 prop = prepareLoadedProperties(prop).                 answer.putAll(prop).                 break.             case "file":                 prop = loadPropertiesFromFilePath(context, ignoreMissingLocation, location).                 prop = prepareLoadedProperties(prop).                 answer.putAll(prop).                 break.             case "classpath":             default:                 // default to classpath                 prop = loadPropertiesFromClasspath(context, ignoreMissingLocation, location).                 prop = prepareLoadedProperties(prop).                 answer.putAll(prop).                 break.         }     }     return answer. }
false;protected;3;24;;protected Properties loadPropertiesFromFilePath(CamelContext context, boolean ignoreMissingLocation, PropertiesLocation location) throws IOException {     Properties answer = new Properties().     String path = location.getPath().     InputStream is = null.     Reader reader = null.     try {         is = new FileInputStream(path).         if (propertiesComponent.getEncoding() != null) {             reader = new BufferedReader(new InputStreamReader(is, propertiesComponent.getEncoding())).             answer.load(reader).         } else {             answer.load(is).         }     } catch (FileNotFoundException e) {         if (!ignoreMissingLocation && !location.isOptional()) {             throw e.         }     } finally {         IOHelper.close(reader, is).     }     return answer. }
false;protected;3;24;;protected Properties loadPropertiesFromClasspath(CamelContext context, boolean ignoreMissingLocation, PropertiesLocation location) throws IOException {     Properties answer = new Properties().     String path = location.getPath().     InputStream is = context.getClassResolver().loadResourceAsStream(path).     Reader reader = null.     if (is == null) {         if (!ignoreMissingLocation && !location.isOptional()) {             throw new FileNotFoundException("Properties file " + path + " not found in classpath").         }     } else {         try {             if (propertiesComponent.getEncoding() != null) {                 reader = new BufferedReader(new InputStreamReader(is, propertiesComponent.getEncoding())).                 answer.load(reader).             } else {                 answer.load(is).             }         } finally {             IOHelper.close(reader, is).         }     }     return answer. }
false;protected;3;17;;@SuppressWarnings({ "rawtypes", "unchecked" }) protected Properties loadPropertiesFromRegistry(CamelContext context, boolean ignoreMissingLocation, PropertiesLocation location) throws IOException {     String path = location.getPath().     Properties answer.     try {         answer = context.getRegistry().lookupByNameAndType(path, Properties.class).     } catch (Exception ex) {         // just look up the Map as a fault back         Map map = context.getRegistry().lookupByNameAndType(path, Map.class).         answer = new Properties().         answer.putAll(map).     }     if (answer == null && (!ignoreMissingLocation && !location.isOptional())) {         throw new FileNotFoundException("Properties " + path + " not found in registry").     }     return answer != null ? answer : new Properties(). }
true;protected;1;17;/**  * Strategy to prepare loaded properties before being used by Camel.  * <p/>  * This implementation will ensure values are trimmed, as loading properties from  * a file with values having trailing spaces is not automatic trimmed by the Properties API  * from the JDK.  *  * @param properties  the properties  * @return the prepared properties  */ ;/**  * Strategy to prepare loaded properties before being used by Camel.  * <p/>  * This implementation will ensure values are trimmed, as loading properties from  * a file with values having trailing spaces is not automatic trimmed by the Properties API  * from the JDK.  *  * @param properties  the properties  * @return the prepared properties  */ protected Properties prepareLoadedProperties(Properties properties) {     Properties answer = new Properties().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         Object key = entry.getKey().         Object value = entry.getValue().         if (value instanceof String) {             String s = (String) value.             // trim any trailing spaces which can be a problem when loading from             // a properties file, note that java.util.Properties does already this             // for any potential leading spaces so there's nothing to do there             value = trimTrailingWhitespaces(s).         }         answer.put(key, value).     }     return answer. }
false;private,static;1;12;;private static String trimTrailingWhitespaces(String s) {     int endIndex = s.length().     for (int index = s.length() - 1. index >= 0. index--) {         if (s.charAt(index) == ' ') {             endIndex = index.         } else {             break.         }     }     String answer = s.substring(0, endIndex).     return answer. }
