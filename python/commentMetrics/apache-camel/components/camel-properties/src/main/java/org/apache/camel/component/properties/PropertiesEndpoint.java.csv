commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getKey() {     return key. }
true;public;1;3;/**  * Property key to use as placeholder  */ ;/**  * Property key to use as placeholder  */ public void setKey(String key) {     this.key = key. }
false;public;0;3;;public String getLocations() {     return locations. }
true;public;1;3;/**  * A list of locations to load properties. You can use comma to separate multiple locations.  * This option will override any default locations and only use the locations from this option.  */ ;/**  * A list of locations to load properties. You can use comma to separate multiple locations.  * This option will override any default locations and only use the locations from this option.  */ public void setLocations(String locations) {     this.locations = locations. }
false;public;0;3;;public boolean isIgnoreMissingLocation() {     return ignoreMissingLocation. }
true;public;1;3;/**  * Whether to silently ignore if a location cannot be located, such as a properties file not found.  */ ;/**  * Whether to silently ignore if a location cannot be located, such as a properties file not found.  */ public void setIgnoreMissingLocation(boolean ignoreMissingLocation) {     this.ignoreMissingLocation = ignoreMissingLocation. }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return endpoint.createProducer(). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return endpoint.createConsumer(processor). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;4;;@Override public Endpoint getEndpoint() {     return endpoint. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     // add the endpoint as a service so Camel can manage the endpoint and enlist the endpoint in JMX etc.     getCamelContext().addService(endpoint).     super.doStart(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     super.doStop(). // noop }
