commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new SpringBatchProducer(this, jobLauncher, job, jobRegistry). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Not supported"). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;0;13;;@Override protected void doStart() throws Exception {     if (jobLauncher == null) {         jobLauncher = resolveJobLauncher().     }     if (job == null && jobName != null && !jobFromHeader) {         if (jobRegistry != null) {             job = jobRegistry.getJob(jobName).         } else {             job = CamelContextHelper.mandatoryLookup(getCamelContext(), jobName, Job.class).         }     } }
false;private;0;21;;private JobLauncher resolveJobLauncher() {     if (jobLauncherRef != null) {         JobLauncher jobLauncher = getCamelContext().getRegistry().lookupByNameAndType(jobLauncherRef, JobLauncher.class).         if (jobLauncher == null) {             throw new IllegalStateException(String.format("No JobLauncher named %s found in the registry.", jobLauncherRef)).         }         return jobLauncher.     }     if (defaultResolvedJobLauncher != null) {         return defaultResolvedJobLauncher.     }     if (allResolvedJobLaunchers.size() == 1) {         return allResolvedJobLaunchers.values().iterator().next().     } else if (allResolvedJobLaunchers.size() > 1) {         throw new IllegalStateException("Expected single jobLauncher instance. Found: " + allResolvedJobLaunchers.size()).     }     throw new IllegalStateException("Cannot find Spring Batch JobLauncher."). }
false;public;0;3;;public String getJobName() {     return jobName. }
true;public;1;3;/**  * The name of the Spring Batch job located in the registry.  */ ;/**  * The name of the Spring Batch job located in the registry.  */ public void setJobName(String jobName) {     this.jobName = jobName. }
false;public;0;4;;@Deprecated public String getJobLauncherRef() {     return jobLauncherRef. }
true;public;1;4;/**  * Explicitly specifies a JobLauncher to be used looked up from the registry.  */ ;/**  * Explicitly specifies a JobLauncher to be used looked up from the registry.  */ @Deprecated public void setJobLauncherRef(String jobLauncherRef) {     this.jobLauncherRef = jobLauncherRef. }
false;public;0;3;;public JobLauncher getJobLauncher() {     return jobLauncher. }
true;public;1;3;/**  * Explicitly specifies a JobLauncher to be used.  */ ;/**  * Explicitly specifies a JobLauncher to be used.  */ public void setJobLauncher(JobLauncher jobLauncher) {     this.jobLauncher = jobLauncher. }
true;public;1;3;/**  * Explicitly defines if the jobName should be taken from the headers instead of the URI.  */ ;/**  * Explicitly defines if the jobName should be taken from the headers instead of the URI.  */ public void setJobFromHeader(boolean jobFromHeader) {     this.jobFromHeader = jobFromHeader. }
false;public;0;3;;public boolean getJobFromHeader() {     return jobFromHeader. }
false;public;0;3;;public JobRegistry getJobRegistry() {     return jobRegistry. }
true;public;1;3;/**  * Explicitly specifies a JobRegistry to be used.  */ ;/**  * Explicitly specifies a JobRegistry to be used.  */ public void setJobRegistry(JobRegistry jobRegistry) {     this.jobRegistry = jobRegistry. }
