commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     for (String message : inputMessages) {         template.sendBody("seda:inputQueue", message).     } }
false;public;0;9;;@DirtiesContext @Test public void testJobRegistry() throws InterruptedException {     outputEndpoint.expectedBodiesReceived("Echo foo", "Echo bar", "Echo baz").     template.sendBody("direct:start", "Start batch!").     outputEndpoint.assertIsSatisfied(). }
false;public;0;5;;@Override public void configure() {     from("direct:start").to("spring-batch:echoJob?jobRegistry=#jobRegistry").     from("direct:processor").setExchangePattern(ExchangePattern.InOut).setBody(simple("Echo ${body}")). }
false;public;0;10;;@Override public RouteBuilder route() {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:start").to("spring-batch:echoJob?jobRegistry=#jobRegistry").             from("direct:processor").setExchangePattern(ExchangePattern.InOut).setBody(simple("Echo ${body}")).         }     }. }
false;public;0;4;;@Bean public ApplicationContextFactory testJobs() {     return new GenericApplicationContextFactory(ChildBatchConfig.class). }
false;protected;0;4;;@Bean protected ItemReader<Object> reader() throws Exception {     return new CamelItemReader<>(consumerTemplate, "seda:inputQueue"). }
false;protected;0;4;;@Bean protected ItemWriter<Object> writer() throws Exception {     return new CamelItemWriter<>(producerTemplate, "mock:output"). }
false;protected;0;4;;@Bean protected ItemProcessor<Object, Object> processor() throws Exception {     return new CamelItemProcessor<>(producerTemplate, "direct:processor"). }
false;protected;0;4;;@Bean protected JobExecutionListener jobExecutionListener() throws Exception {     return new CamelJobExecutionListener(producerTemplate, "mock:jobExecutionEventsQueue"). }
false;public;0;4;;@Bean public Job echoJob() throws Exception {     return this.jobs.get("echoJob").start(echoStep()).build(). }
false;protected;0;9;;@Bean protected Step echoStep() throws Exception {     return this.steps.get("echoStep").chunk(3).reader(reader()).processor(processor()).writer(writer()).build(). }
