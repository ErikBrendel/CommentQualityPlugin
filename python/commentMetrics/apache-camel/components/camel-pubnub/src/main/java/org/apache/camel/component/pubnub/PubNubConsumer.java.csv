commented;modifiers;parameterAmount;loc;comment;code
false;private;0;8;;private void initCommunication() throws Exception {     endpoint.getPubnub().addListener(new PubNubCallback()).     if (pubNubConfiguration.withPresence()) {         endpoint.getPubnub().subscribe().channels(Arrays.asList(pubNubConfiguration.getChannel())).withPresence().execute().     } else {         endpoint.getPubnub().subscribe().channels(Arrays.asList(pubNubConfiguration.getChannel())).execute().     } }
false;private;0;7;;private void terminateCommunication() {     try {         endpoint.getPubnub().unsubscribe().channels(Arrays.asList(pubNubConfiguration.getChannel())).execute().     } catch (Exception e) {     // ignore     } }
false;protected;0;5;;@Override protected void doStart() throws Exception {     super.doStart().     initCommunication(). }
false;protected;0;5;;@Override protected void doResume() throws Exception {     super.doResume().     initCommunication(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     terminateCommunication().     super.doStop(). }
false;protected;0;5;;@Override protected void doSuspend() throws Exception {     terminateCommunication().     super.doSuspend(). }
false;public;2;9;;@Override public void status(PubNub pubnub, PNStatus status) {     if (status.getCategory() == PNUnexpectedDisconnectCategory || status.getCategory() == PNTimeoutCategory) {         log.trace("Got status: {}. Reconnecting to PubNub", status).         pubnub.reconnect().     } else {         log.trace("Status message: {}", status).     } }
false;public;2;13;;@Override public void message(PubNub pubnub, PNMessageResult message) {     Exchange exchange = endpoint.createExchange().     Message inmessage = exchange.getIn().     inmessage.setBody(message).     inmessage.setHeader(TIMETOKEN, message.getTimetoken()).     inmessage.setHeader(CHANNEL, message.getChannel()).     try {         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException("Error processing exchange", exchange, e).     } }
false;public;2;14;;@Override public void presence(PubNub pubnub, PNPresenceEventResult presence) {     Exchange exchange = endpoint.createExchange().     Message inmessage = exchange.getIn().     inmessage.setBody(presence).     inmessage.setHeader(TIMETOKEN, presence.getTimetoken()).     inmessage.setHeader(CHANNEL, presence.getChannel()).     try {         getProcessor().process(exchange).     } catch (Exception e) {         exchange.setException(e).         getExceptionHandler().handleException("Error processing exchange", exchange, e).     } }
