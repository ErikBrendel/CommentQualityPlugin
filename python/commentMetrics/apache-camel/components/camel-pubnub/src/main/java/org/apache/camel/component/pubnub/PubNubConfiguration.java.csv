commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * The publish key obtained from your PubNub account. Required when publishing messages.  */ ;/**  * The publish key obtained from your PubNub account. Required when publishing messages.  */ public String getPublishKey() {     return this.publishKey. }
false;public;1;3;;public void setPublishKey(String publishKey) {     this.publishKey = publishKey. }
true;public;0;3;/**  * The subscribe key obtained from your PubNub account. Required when subscribing to channels or listening for presence events  */ ;/**  * The subscribe key obtained from your PubNub account. Required when subscribing to channels or listening for presence events  */ public String getSubscribeKey() {     return this.subscribeKey. }
false;public;1;3;;public void setSubscribeKey(String subscribeKey) {     this.subscribeKey = subscribeKey. }
true;public;0;3;/**  * The secret key used for message signing.  */ ;/**  * The secret key used for message signing.  */ public String getSecretKey() {     return this.secretKey. }
false;public;1;3;;public void setSecretKey(String secretKey) {     this.secretKey = secretKey. }
true;public;0;3;/**  * If Access Manager is utilized, client will use this authKey in all restricted requests.  */ ;/**  * If Access Manager is utilized, client will use this authKey in all restricted requests.  */ public String getAuthKey() {     return authKey. }
false;public;1;3;;public void setAuthKey(String authKey) {     this.authKey = authKey. }
true;public;0;3;/**  * If cipher is passed, all communicatons to/from PubNub will be encrypted.  */ ;/**  * If cipher is passed, all communicatons to/from PubNub will be encrypted.  */ public String getCipherKey() {     return cipherKey. }
false;public;1;3;;public void setCipherKey(String cipherKey) {     this.cipherKey = cipherKey. }
true;public;0;3;/**  * Use SSL for secure transmission.  */ ;/**  * Use SSL for secure transmission.  */ public boolean isSecure() {     return this.secure. }
false;public;1;3;;public void setSecure(boolean secure) {     this.secure = secure. }
true;public;0;3;/**  * The channel used for subscribing/publishing events  */ ;/**  * The channel used for subscribing/publishing events  */ public String getChannel() {     return this.channel. }
false;public;1;3;;public void setChannel(String channel) {     this.channel = channel. }
true;public;1;3;/**  * UUID to be used as a device identifier, a default UUID is generated if not passed.  */ ;/**  * UUID to be used as a device identifier, a default UUID is generated if not passed.  */ public void setUuid(String uuid) {     this.uuid = uuid. }
false;public;0;3;;public String getUuid() {     return this.uuid. }
true;public;1;3;/**  * The operation to perform.  * <ul>  * <li>PUBLISH: Default. Send a message to all subscribers of a channel.</li>  * <li>FIRE: allows the client to send a message to BLOCKS Event Handlers. These messages will go directly to any Event Handlers registered on the channel.</li>  * <li>HERENOW: Obtain information about the current state of a channel including a list of unique user-ids currently subscribed to the channel and the total occupancy count.</li>  * <li>WHERENOW: Obtain information about the current list of channels to which a uuid is subscribed to.</li>  * <li>GETSTATE: Used to get key/value pairs specific to a subscriber uuid. State information is supplied as a JSON object of key/value pairs</li>  * <li>SETSTATE: Used to set key/value pairs specific to a subscriber uuid</li>  * <li>GETHISTORY: Fetches historical messages of a channel.</li>  * </ul>  */ ;/**  * The operation to perform.  * <ul>  * <li>PUBLISH: Default. Send a message to all subscribers of a channel.</li>  * <li>FIRE: allows the client to send a message to BLOCKS Event Handlers. These messages will go directly to any Event Handlers registered on the channel.</li>  * <li>HERENOW: Obtain information about the current state of a channel including a list of unique user-ids currently subscribed to the channel and the total occupancy count.</li>  * <li>WHERENOW: Obtain information about the current list of channels to which a uuid is subscribed to.</li>  * <li>GETSTATE: Used to get key/value pairs specific to a subscriber uuid. State information is supplied as a JSON object of key/value pairs</li>  * <li>SETSTATE: Used to set key/value pairs specific to a subscriber uuid</li>  * <li>GETHISTORY: Fetches historical messages of a channel.</li>  * </ul>  */ public void setOperation(String operation) {     this.operation = operation. }
false;public;0;3;;public String getOperation() {     return this.operation. }
true;public;1;3;/**  * Also subscribe to related presence information  */ ;/**  * Also subscribe to related presence information  */ public void setWithPresence(boolean withPresence) {     this.withPresence = withPresence. }
false;public;0;3;;public boolean withPresence() {     return withPresence. }
