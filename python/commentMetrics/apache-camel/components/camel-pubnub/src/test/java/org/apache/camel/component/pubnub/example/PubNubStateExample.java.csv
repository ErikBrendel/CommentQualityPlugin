commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testStateChange() throws Exception {     Map<String, Object> myState = new HashMap<>().     myState.put("state", "online").     myState.put("name", "preben").     Map<String, Object> headers = new HashMap<>().     headers.put(PubNubConstants.OPERATION, "SETSTATE").     PNSetStateResult response = template.requestBodyAndHeaders("direct:publish", myState, headers, PNSetStateResult.class).     assertNotNull(response).     assertNotNull(response.getState()).     assertEquals("preben", response.getState().getAsJsonObject().get("name").getAsString()).     resetMocks().     getMockEndpoint("mock:result").expectedMessageCount(1).     headers.clear().     headers.put(PubNubConstants.OPERATION, "GETSTATE").     PNGetStateResult getStateResult = template.requestBodyAndHeader("direct:publish", null, PubNubConstants.OPERATION, "GETSTATE", PNGetStateResult.class).     assertMockEndpointsSatisfied().     assertEquals("preben", getStateResult.getStateByUUID().get("iot").getAsJsonObject().get("name").getAsString()). }
false;public;0;4;;public void configure() {     from("direct:publish").to("pubnub:iot?uuid=myuuid&publishKey=" + PUBNUB_PUBLISH_KEY + "&subscribeKey=" + PUBNUB_SUBSCRIBE_KEY).to("mock:result"). }
false;protected;0;9;;@Override protected RoutesBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:publish").to("pubnub:iot?uuid=myuuid&publishKey=" + PUBNUB_PUBLISH_KEY + "&subscribeKey=" + PUBNUB_SUBSCRIBE_KEY).to("mock:result").         }     }. }
