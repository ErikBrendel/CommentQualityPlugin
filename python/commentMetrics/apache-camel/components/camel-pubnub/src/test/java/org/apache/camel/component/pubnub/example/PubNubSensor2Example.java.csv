commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;public static void main(String[] args) throws Exception {     Main main = new Main().     main.addRouteBuilder(new PubsubRoute()).     main.addRouteBuilder(new SimulatedDeviceEventGeneratorRoute()).     main.run(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("timer:device2").routeId("device-event-route").bean(PubNubSensor2Example.EventGeneratorBean.class, "getRandomEvent('device2')").to(deviceEP).     from(devicePrivateEP).routeId("device-unicast-route").log("Message from master to device2 : ${body}"). }
false;public;0;13;;@Override public void configure() throws Exception {     from(masterEP).routeId("master-route").bean(PubNubSensor2Example.PubsubRoute.DataProcessorBean.class, "doSomethingInteresting(${body})").log("${body} headers : ${headers}").to("mock:result").     // TODO Could remote control device to turn on/off sensor measurement     from("timer:master?delay=15s&period=5s").routeId("unicast2device-route").setHeader(PubNubConstants.CHANNEL, method(PubNubSensor2Example.PubsubRoute.DataProcessorBean.class, "getUnicastChannelOfDevice()")).setBody(constant("Hello device")).to(masterEP). }
false;public,static;0;4;;public static String getUnicastChannelOfDevice() {     // just get the first channel     return devices.values().iterator().next(). }
false;public,static;1;12;;public static void doSomethingInteresting(PNMessageResult message) {     String deviceUUID.     deviceUUID = message.getPublisher().     if (devices.get(deviceUUID) == null) {         Map<String, Object> headers = new HashMap<>().         headers.put(OPERATION, "WHERENOW").         headers.put(UUID, deviceUUID).         @SuppressWarnings("unchecked")         java.util.List<String> channels = (java.util.List<String>) template.requestBodyAndHeaders(null, headers).         devices.put(deviceUUID, channels.get(0)).     } }
false;public;0;3;;public String getDevice() {     return device. }
false;public;0;3;;public int getHumidity() {     return humidity. }
false;public;0;3;;public int getTemperature() {     return temperature. }
false;public,static;1;3;;public static DeviceWeatherInfo getRandomEvent(String device) {     return new DeviceWeatherInfo(device). }
