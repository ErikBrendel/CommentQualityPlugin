commented;modifiers;parameterAmount;loc;comment;code
true;public;2;23;/**  * Create an event stream with optional starting initial position and add  * listener that will be notified when an event is received.  *  * @param startingPosition  *            - the starting position of the event stream.  * @param listener  *            - the listener to add to event stream.  */ ;/**  * Create an event stream with optional starting initial position and add  * listener that will be notified when an event is received.  *  * @param startingPosition  *            - the starting position of the event stream.  * @param listener  *            - the listener to add to event stream.  */ public void listen(EventListener listener, Long startingPosition) {     try {         LOG.debug("Listening for events with listener=" + listener + " at startingPosition=" + startingPosition).         if (listener == null) {             LOG.debug("Parameter 'listener' is null: will not listen for events").             return.         }         if (startingPosition != null) {             eventStream = new EventStream(boxConnection, startingPosition).         } else {             eventStream = new EventStream(boxConnection).         }         eventStream.addListener(listener).         eventStream.start().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
false;public;0;6;;public void stopListening() {     if (eventStream != null && eventStream.isStarted()) {         eventStream.stop().     }     eventStream = null. }
