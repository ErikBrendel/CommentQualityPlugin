commented;modifiers;parameterAmount;loc;comment;code
true;public;1;13;/**  * Get information about all of the collaborations for folder.  *  * @param folderId  *            - the id of folder to get collaborations information on.  *  * @return The collection of collaboration information for folder.  */ ;/**  * Get information about all of the collaborations for folder.  *  * @param folderId  *            - the id of folder to get collaborations information on.  *  * @return The collection of collaboration information for folder.  */ public Collection<BoxCollaboration.Info> getFolderCollaborations(String folderId) {     try {         LOG.debug("Getting collaborations for folder(id={})", folderId).         if (folderId == null) {             throw new IllegalArgumentException("Parameter 'folderId' can not be null").         }         BoxFolder folder = new BoxFolder(boxConnection, folderId).         return folder.getCollaborations().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;3;24;/**  * Add a collaboration to this folder.  *  * @param folderId  *            - the id of folder to add collaboration to.  * @param collaborator  *            - the collaborator to add.  * @param role  *            - the role of the collaborator.  *  * @return The new collaboration.  */ ;/**  * Add a collaboration to this folder.  *  * @param folderId  *            - the id of folder to add collaboration to.  * @param collaborator  *            - the collaborator to add.  * @param role  *            - the role of the collaborator.  *  * @return The new collaboration.  */ // compiler for some reason thinks 'if @SuppressWarnings("unused") public // (collaborator == null)' clause is dead code. BoxCollaboration addFolderCollaboration(String folderId, BoxCollaborator collaborator, BoxCollaboration.Role role) {     try {         LOG.debug("Creating  collaborations for folder(id=" + folderId + ") with collaborator(" + collaborator.getID() + ")").         if (folderId == null) {             throw new IllegalArgumentException("Parameter 'folderId' can not be null").         }         if (collaborator == null) {             throw new IllegalArgumentException("Parameter 'collaborator' can not be null").         }         if (role == null) {             throw new IllegalArgumentException("Parameter 'role' can not be null").         }         BoxFolder folder = new BoxFolder(boxConnection, folderId).         return folder.collaborate(collaborator, role).getResource().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;3;20;/**  * Add a collaboration to this folder. An email will be sent to the  * collaborator if they don't already have a Box account.  *  * @param folderId  *            - the id of folder to add collaboration to.  * @param email  *            - the email address of the collaborator to add.  * @param role  *            - the role of the collaborator.  *  * @return The new collaboration.  */ ;/**  * Add a collaboration to this folder. An email will be sent to the  * collaborator if they don't already have a Box account.  *  * @param folderId  *            - the id of folder to add collaboration to.  * @param email  *            - the email address of the collaborator to add.  * @param role  *            - the role of the collaborator.  *  * @return The new collaboration.  */ public BoxCollaboration addFolderCollaborationByEmail(String folderId, String email, BoxCollaboration.Role role) {     try {         LOG.debug("Creating  collaborations for folder(id=" + folderId + ") with collaborator(" + email + ")").         if (folderId == null) {             throw new IllegalArgumentException("Parameter 'folderId' can not be null").         }         if (email == null) {             throw new IllegalArgumentException("Parameter 'email' can not be null").         }         if (role == null) {             throw new IllegalArgumentException("Parameter 'role' can not be null").         }         BoxFolder folder = new BoxFolder(boxConnection, folderId).         return folder.collaborate(email, role).getResource().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;15;/**  * Get collaboration information.  *  * @param collaborationId  *            - the id of collaboration.  * @return The collaboration information.  */ ;/**  * Get collaboration information.  *  * @param collaborationId  *            - the id of collaboration.  * @return The collaboration information.  */ public BoxCollaboration.Info getCollaborationInfo(String collaborationId) {     try {         LOG.debug("Getting info for collaboration(id={})", collaborationId).         if (collaborationId == null) {             throw new IllegalArgumentException("Parameter 'collaborationId' can not be null").         }         BoxCollaboration collaboration = new BoxCollaboration(boxConnection, collaborationId).         return collaboration.getInfo().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;2;16;/**  * Update collaboration information.  *  * @param collaborationId  *            - the id of collaboration.  * @return The collaboration with updated information.  */ ;/**  * Update collaboration information.  *  * @param collaborationId  *            - the id of collaboration.  * @return The collaboration with updated information.  */ public BoxCollaboration updateCollaborationInfo(String collaborationId, BoxCollaboration.Info info) {     try {         LOG.debug("Updating info for collaboration(id={})", collaborationId).         if (collaborationId == null) {             throw new IllegalArgumentException("Parameter 'collaborationId' can not be null").         }         BoxCollaboration collaboration = new BoxCollaboration(boxConnection, collaborationId).         collaboration.updateInfo(info).         return collaboration.     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;13;/**  * Delete collaboration.  *  * @param collaborationId  *            - the id of comment to change.  */ ;/**  * Delete collaboration.  *  * @param collaborationId  *            - the id of comment to change.  */ public void deleteCollaboration(String collaborationId) {     try {         LOG.debug("Deleting collaboration(id={})", collaborationId).         if (collaborationId == null) {             throw new IllegalArgumentException("Parameter 'collaborationId' can not be null").         }         BoxCollaboration collaboration = new BoxCollaboration(boxConnection, collaborationId).         collaboration.delete().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;0;8;/**  * Get all pending collaboration invites for the current user.  *  * @return A collection of pending collaboration information.  */ ;/**  * Get all pending collaboration invites for the current user.  *  * @return A collection of pending collaboration information.  */ public Collection<BoxCollaboration.Info> getPendingCollaborations() {     try {         return BoxCollaboration.getPendingCollaborations(boxConnection).     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
