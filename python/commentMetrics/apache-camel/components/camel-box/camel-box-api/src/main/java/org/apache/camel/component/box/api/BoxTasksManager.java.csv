commented;modifiers;parameterAmount;loc;comment;code
true;public;1;16;/**  * Get a list of any tasks on file.  *  * @param fileId  *            - the id of file.  * @return The list of tasks on file.  */ ;/**  * Get a list of any tasks on file.  *  * @param fileId  *            - the id of file.  * @return The list of tasks on file.  */ public List<BoxTask.Info> getFileTasks(String fileId) {     try {         LOG.debug("Getting tasks of file(id={})", fileId).         if (fileId == null) {             throw new IllegalArgumentException("Parameter 'fileId' can not be null").         }         BoxFile file = new BoxFile(boxConnection, fileId).         return file.getTasks().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;4;20;/**  * Add task to file.  *  * @param fileId  *            - the id of file to add task to.  * @param action  *            - the action the task assignee will be prompted to do.  * @param dueAt  *            - - the day at which this task is due.  * @param message  *            - an optional message to include with the task.  * @return The new task.  */ ;/**  * Add task to file.  *  * @param fileId  *            - the id of file to add task to.  * @param action  *            - the action the task assignee will be prompted to do.  * @param dueAt  *            - - the day at which this task is due.  * @param message  *            - an optional message to include with the task.  * @return The new task.  */ public BoxTask addFileTask(String fileId, BoxTask.Action action, Date dueAt, String message) {     try {         LOG.debug("Adding task to file(id=" + fileId + ") to '" + message + "'").         if (fileId == null) {             throw new IllegalArgumentException("Parameter 'fileId' can not be null").         }         if (action == null) {             throw new IllegalArgumentException("Parameter 'action' can not be null").         }         if (dueAt == null) {             throw new IllegalArgumentException("Parameter 'dueAt' can not be null").         }         BoxFile fileToAddTaskOn = new BoxFile(boxConnection, fileId).         return fileToAddTaskOn.addTask(action, message, dueAt).getResource().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;13;/**  * Delete task.  *  * @param taskId  *            - the id of task to delete.  */ ;/**  * Delete task.  *  * @param taskId  *            - the id of task to delete.  */ public void deleteTask(String taskId) {     try {         LOG.debug("Deleting task(id={})", taskId).         if (taskId == null) {             throw new IllegalArgumentException("Parameter 'taskId' can not be null").         }         BoxTask task = new BoxTask(boxConnection, taskId).         task.delete().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;15;/**  * Get task information.  *  * @param taskId  *            - the id of task.  * @return The task information.  */ ;/**  * Get task information.  *  * @param taskId  *            - the id of task.  * @return The task information.  */ public BoxTask.Info getTaskInfo(String taskId) {     try {         LOG.debug("Getting info for task(id={})", taskId).         if (taskId == null) {             throw new IllegalArgumentException("Parameter 'taskId' can not be null").         }         BoxTask task = new BoxTask(boxConnection, taskId).         return task.getInfo().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;2;19;/**  * Update task information.  *  * @param taskId  *            - the id of task.  * @param info  *            - the updated information  * @return The updated task.  */ ;/**  * Update task information.  *  * @param taskId  *            - the id of task.  * @param info  *            - the updated information  * @return The updated task.  */ public BoxTask updateTaskInfo(String taskId, BoxTask.Info info) {     try {         LOG.debug("Updating info for task(id={})", taskId).         if (taskId == null) {             throw new IllegalArgumentException("Parameter 'taskId' can not be null").         }         if (info == null) {             throw new IllegalArgumentException("Parameter 'info' can not be null").         }         BoxTask task = new BoxTask(boxConnection, taskId).         task.updateInfo(info).         return task.     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;16;/**  * Get a list of any assignments for task.  *  * @param taskId  *            - the id of task.  * @return The list of assignments for task.  */ ;/**  * Get a list of any assignments for task.  *  * @param taskId  *            - the id of task.  * @return The list of assignments for task.  */ public List<BoxTaskAssignment.Info> getTaskAssignments(String taskId) {     try {         LOG.debug("Getting assignments for task(id={})", taskId).         if (taskId == null) {             throw new IllegalArgumentException("Parameter 'taskId' can not be null").         }         BoxTask file = new BoxTask(boxConnection, taskId).         return file.getAssignments().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;2;21;/**  * Add assignment for task.  *  * @param taskId  *            - the id of task to add assignment for.  * @param assignTo  *            - the user to assign to task.  * @return The assigned task.  */ ;/**  * Add assignment for task.  *  * @param taskId  *            - the id of task to add assignment for.  * @param assignTo  *            - the user to assign to task.  * @return The assigned task.  */ // compiler for some reason thinks 'if (assignTo @SuppressWarnings("unused") public // == null)' clause is dead code. BoxTask addAssignmentToTask(String taskId, BoxUser assignTo) {     try {         LOG.debug("Assigning task(id=" + taskId + ") to user(id=" + assignTo.getID() + ")").         if (taskId == null) {             throw new IllegalArgumentException("Parameter 'commentId' can not be null").         }         if (assignTo == null) {             throw new IllegalArgumentException("Parameter 'assignTo' can not be null").         }         BoxTask task = new BoxTask(boxConnection, taskId).         task.addAssignment(assignTo).         return task.     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;15;/**  * Get task assignment information.  *  * @param taskAssignmentId  *            - the id of task assignment.  * @return The task assignment information.  */ ;/**  * Get task assignment information.  *  * @param taskAssignmentId  *            - the id of task assignment.  * @return The task assignment information.  */ public BoxTaskAssignment.Info getTaskAssignmentInfo(String taskAssignmentId) {     try {         LOG.debug("Getting info for task(id={})", taskAssignmentId).         if (taskAssignmentId == null) {             throw new IllegalArgumentException("Parameter 'taskAssignmentId' can not be null").         }         BoxTaskAssignment taskAssignment = new BoxTaskAssignment(boxConnection, taskAssignmentId).         return taskAssignment.getInfo().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;13;/**  * Delete task assignment.  *  * @param taskAssignmentId  *            - the id of task assignment to delete.  */ ;// TODO Add this method when BoxTaskAssignment API fixed: // BoxTaskAssignment.update method currently // takes BoxTask.Info instead of BoxTaskAssignment.Info // /** // * Update task assignment information. // * // * @param taskAssignmentId // * - the id of task assignment. // * @param info // * - the updated information // * @return The updated task assignment. // */ // public BoxTaskAssignment updateTaskAssignmentInfo(String // taskAssignmentId, BoxTaskAssignment.Info info) { // try { // LOG.debug("Updating info for task(id={})", taskAssignmentId). // if (taskAssignmentId == null) { // throw new IllegalArgumentException("Parameter 'taskAssignmentId' can not // be null"). // } // if (info == null) { // throw new IllegalArgumentException("Parameter 'info' can not be null"). // } //  // BoxTaskAssignment taskAssignment = new BoxTaskAssignment(boxConnection, // taskAssignmentId). // taskAssignment.updateInfo(info). //  // return taskAssignment. // } catch (BoxAPIException e) { // throw new RuntimeException( // String.format("Box API returned the error code %d\n\n%s", // e.getResponseCode(), e.getResponse()), e). // } // } /**  * Delete task assignment.  *  * @param taskAssignmentId  *            - the id of task assignment to delete.  */ public void deleteTaskAssignment(String taskAssignmentId) {     try {         LOG.debug("Deleting task(id={})", taskAssignmentId).         if (taskAssignmentId == null) {             throw new IllegalArgumentException("Parameter 'taskAssignmentId' can not be null").         }         BoxTaskAssignment taskAssignment = new BoxTaskAssignment(boxConnection, taskAssignmentId).         taskAssignment.delete().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
