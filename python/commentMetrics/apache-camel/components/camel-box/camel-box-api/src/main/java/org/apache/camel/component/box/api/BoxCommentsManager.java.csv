commented;modifiers;parameterAmount;loc;comment;code
true;public;2;18;/**  * Add comment to file.  *  * @param fileId  *            - the id of file to rename.  * @param message  *            - the comment's message.  * @return The commented file.  */ ;/**  * Add comment to file.  *  * @param fileId  *            - the id of file to rename.  * @param message  *            - the comment's message.  * @return The commented file.  */ public BoxFile addFileComment(String fileId, String message) {     try {         LOG.debug("Adding comment to file(id=" + fileId + ") to '" + message + "'").         if (fileId == null) {             throw new IllegalArgumentException("Parameter 'fileId' can not be null").         }         if (message == null) {             throw new IllegalArgumentException("Parameter 'message' can not be null").         }         BoxFile fileToCommentOn = new BoxFile(boxConnection, fileId).         fileToCommentOn.addComment(message).         return fileToCommentOn.     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;16;/**  * Get a list of any comments on this file.  *  * @param fileId  *            - the id of file.  * @return The list of comments on this file.  */ ;/**  * Get a list of any comments on this file.  *  * @param fileId  *            - the id of file.  * @return The list of comments on this file.  */ public List<BoxComment.Info> getFileComments(String fileId) {     try {         LOG.debug("Getting comments of file(id={})", fileId).         if (fileId == null) {             throw new IllegalArgumentException("Parameter 'fileId' can not be null").         }         BoxFile file = new BoxFile(boxConnection, fileId).         return file.getComments().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;15;/**  * Get comment information.  *  * @param commentId  *            - the id of comment.  * @return The comment information.  */ ;/**  * Get comment information.  *  * @param commentId  *            - the id of comment.  * @return The comment information.  */ public BoxComment.Info getCommentInfo(String commentId) {     try {         LOG.debug("Getting info for comment(id={})", commentId).         if (commentId == null) {             throw new IllegalArgumentException("Parameter 'commentId' can not be null").         }         BoxComment comment = new BoxComment(boxConnection, commentId).         return comment.getInfo().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;2;16;/**  * Reply to a comment.  *  * @param commentId  *            - the id of comment to reply to.  * @param message  *            - the message for the reply.  * @return The newly created reply comment.  */ ;/**  * Reply to a comment.  *  * @param commentId  *            - the id of comment to reply to.  * @param message  *            - the message for the reply.  * @return The newly created reply comment.  */ public BoxComment replyToComment(String commentId, String message) {     try {         LOG.debug("Replying to comment(id=" + commentId + ") with message=" + message).         if (commentId == null) {             throw new IllegalArgumentException("Parameter 'commentId' can not be null").         }         if (message == null) {             throw new IllegalArgumentException("Parameter 'message' can not be null").         }         BoxComment comment = new BoxComment(boxConnection, commentId).         return comment.reply(message).getResource().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;2;16;/**  * Change comment message.  *  * @param commentId  *            - the id of comment to change.  * @param message  *            - the new message for the comment.  * @return The comment with changed message.  */ ;/**  * Change comment message.  *  * @param commentId  *            - the id of comment to change.  * @param message  *            - the new message for the comment.  * @return The comment with changed message.  */ public BoxComment changeCommentMessage(String commentId, String message) {     try {         LOG.debug("Changing comment(id=" + commentId + ") message=" + message).         if (commentId == null) {             throw new IllegalArgumentException("Parameter 'commentId' can not be null").         }         if (message == null) {             throw new IllegalArgumentException("Parameter 'message' can not be null").         }         BoxComment comment = new BoxComment(boxConnection, commentId).         return comment.changeMessage(message).getResource().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
true;public;1;13;/**  * Delete comment.  *  * @param commentId  *            - the id of comment to delete.  */ ;/**  * Delete comment.  *  * @param commentId  *            - the id of comment to delete.  */ public void deleteComment(String commentId) {     try {         LOG.debug("Deleting comment(id={})", commentId).         if (commentId == null) {             throw new IllegalArgumentException("Parameter 'commentId' can not be null").         }         BoxComment comment = new BoxComment(boxConnection, commentId).         comment.delete().     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } }
