# id;timestamp;commentText;codeText;commentWords;codeWords
BoxFoldersManager -> public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields);1488797924;Returns a specific range of child items in folder and specifies which_fields of each item to retrieve.__@param folderId_- the id of folder._@param offset_- the index of first child item to retrieve_ if_<code>null</code> all child items are retrieved._@param limit_- the maximum number of children to retrieve after the offset__if <code>null</code> all child items are retrieved._@param fields_- the item fields to retrieve for each child item_ if_<code>null</code> all item fields are retrieved._@return The Items in folder;public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields) {_        try {_            LOG.debug("Getting folder items in folder(id=" + folderId + ") at offset=" + offset + " and limit=" + limit_                    + " with fields=" + Arrays.toString(fields))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            if (fields == null) {_                fields = new String[0]__            }_            if (offset != null && limit != null) {_                return folder.getChildrenRange(offset, limit, fields)__            } else {_                Collection<BoxItem.Info> folderItems = new ArrayList<BoxItem.Info>()__                Iterable<BoxItem.Info> iterable__                if (fields.length > 0) {_                    iterable = folder.getChildren(fields)__                } else {_                    iterable = folder.getChildren()__                }_                for (BoxItem.Info itemInfo : iterable) {_                    folderItems.add(itemInfo)__                }__                return folderItems__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };returns,a,specific,range,of,child,items,in,folder,and,specifies,which,fields,of,each,item,to,retrieve,param,folder,id,the,id,of,folder,param,offset,the,index,of,first,child,item,to,retrieve,if,code,null,code,all,child,items,are,retrieved,param,limit,the,maximum,number,of,children,to,retrieve,after,the,offset,if,code,null,code,all,child,items,are,retrieved,param,fields,the,item,fields,to,retrieve,for,each,child,item,if,code,null,code,all,item,fields,are,retrieved,return,the,items,in,folder;public,collection,box,item,info,get,folder,items,string,folder,id,long,offset,long,limit,string,fields,try,log,debug,getting,folder,items,in,folder,id,folder,id,at,offset,offset,and,limit,limit,with,fields,arrays,to,string,fields,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,new,string,0,if,offset,null,limit,null,return,folder,get,children,range,offset,limit,fields,else,collection,box,item,info,folder,items,new,array,list,box,item,info,iterable,box,item,info,iterable,if,fields,length,0,iterable,folder,get,children,fields,else,iterable,folder,get,children,for,box,item,info,item,info,iterable,folder,items,add,item,info,return,folder,items,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields);1516092507;Returns a specific range of child items in folder and specifies which_fields of each item to retrieve.__@param folderId_- the id of folder._@param offset_- the index of first child item to retrieve_ if_<code>null</code> all child items are retrieved._@param limit_- the maximum number of children to retrieve after the offset__if <code>null</code> all child items are retrieved._@param fields_- the item fields to retrieve for each child item_ if_<code>null</code> all item fields are retrieved._@return The Items in folder;public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields) {_        try {_            LOG.debug("Getting folder items in folder(id=" + folderId + ") at offset=" + offset + " and limit=" + limit_                    + " with fields=" + Arrays.toString(fields))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            if (fields == null) {_                fields = new String[0]__            }_            if (offset != null && limit != null) {_                return folder.getChildrenRange(offset, limit, fields)__            } else {_                Collection<BoxItem.Info> folderItems = new ArrayList<BoxItem.Info>()__                Iterable<BoxItem.Info> iterable__                if (fields.length > 0) {_                    iterable = folder.getChildren(fields)__                } else {_                    iterable = folder.getChildren()__                }_                for (BoxItem.Info itemInfo : iterable) {_                    folderItems.add(itemInfo)__                }__                return folderItems__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };returns,a,specific,range,of,child,items,in,folder,and,specifies,which,fields,of,each,item,to,retrieve,param,folder,id,the,id,of,folder,param,offset,the,index,of,first,child,item,to,retrieve,if,code,null,code,all,child,items,are,retrieved,param,limit,the,maximum,number,of,children,to,retrieve,after,the,offset,if,code,null,code,all,child,items,are,retrieved,param,fields,the,item,fields,to,retrieve,for,each,child,item,if,code,null,code,all,item,fields,are,retrieved,return,the,items,in,folder;public,collection,box,item,info,get,folder,items,string,folder,id,long,offset,long,limit,string,fields,try,log,debug,getting,folder,items,in,folder,id,folder,id,at,offset,offset,and,limit,limit,with,fields,arrays,to,string,fields,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,new,string,0,if,offset,null,limit,null,return,folder,get,children,range,offset,limit,fields,else,collection,box,item,info,folder,items,new,array,list,box,item,info,iterable,box,item,info,iterable,if,fields,length,0,iterable,folder,get,children,fields,else,iterable,folder,get,children,for,box,item,info,item,info,iterable,folder,items,add,item,info,return,folder,items,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields);1523968787;Returns a specific range of child items in folder and specifies which_fields of each item to retrieve.__@param folderId_- the id of folder._@param offset_- the index of first child item to retrieve_ if_<code>null</code> all child items are retrieved._@param limit_- the maximum number of children to retrieve after the offset__if <code>null</code> all child items are retrieved._@param fields_- the item fields to retrieve for each child item_ if_<code>null</code> all item fields are retrieved._@return The Items in folder;public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields) {_        try {_            LOG.debug("Getting folder items in folder(id=" + folderId + ") at offset=" + offset + " and limit=" + limit_                    + " with fields=" + Arrays.toString(fields))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            if (fields == null) {_                fields = new String[0]__            }_            if (offset != null && limit != null) {_                return folder.getChildrenRange(offset, limit, fields)__            } else {_                Collection<BoxItem.Info> folderItems = new ArrayList<>()__                Iterable<BoxItem.Info> iterable__                if (fields.length > 0) {_                    iterable = folder.getChildren(fields)__                } else {_                    iterable = folder.getChildren()__                }_                for (BoxItem.Info itemInfo : iterable) {_                    folderItems.add(itemInfo)__                }__                return folderItems__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };returns,a,specific,range,of,child,items,in,folder,and,specifies,which,fields,of,each,item,to,retrieve,param,folder,id,the,id,of,folder,param,offset,the,index,of,first,child,item,to,retrieve,if,code,null,code,all,child,items,are,retrieved,param,limit,the,maximum,number,of,children,to,retrieve,after,the,offset,if,code,null,code,all,child,items,are,retrieved,param,fields,the,item,fields,to,retrieve,for,each,child,item,if,code,null,code,all,item,fields,are,retrieved,return,the,items,in,folder;public,collection,box,item,info,get,folder,items,string,folder,id,long,offset,long,limit,string,fields,try,log,debug,getting,folder,items,in,folder,id,folder,id,at,offset,offset,and,limit,limit,with,fields,arrays,to,string,fields,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,new,string,0,if,offset,null,limit,null,return,folder,get,children,range,offset,limit,fields,else,collection,box,item,info,folder,items,new,array,list,iterable,box,item,info,iterable,if,fields,length,0,iterable,folder,get,children,fields,else,iterable,folder,get,children,for,box,item,info,item,info,iterable,folder,items,add,item,info,return,folder,items,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields);1534005301;Returns a specific range of child items in folder and specifies which_fields of each item to retrieve.__@param folderId_- the id of folder._@param offset_- the index of first child item to retrieve_ if_<code>null</code> all child items are retrieved._@param limit_- the maximum number of children to retrieve after the offset__if <code>null</code> all child items are retrieved._@param fields_- the item fields to retrieve for each child item_ if_<code>null</code> all item fields are retrieved._@return The Items in folder;public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields) {_        try {_            LOG.debug("Getting folder items in folder(id=" + folderId + ") at offset=" + offset + " and limit=" + limit_                    + " with fields=" + Arrays.toString(fields))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            if (fields == null) {_                fields = new String[0]__            }_            if (offset != null && limit != null) {_                return folder.getChildrenRange(offset, limit, fields)__            } else {_                Collection<BoxItem.Info> folderItems = new ArrayList<>()__                Iterable<BoxItem.Info> iterable__                if (fields.length > 0) {_                    iterable = folder.getChildren(fields)__                } else {_                    iterable = folder.getChildren()__                }_                for (BoxItem.Info itemInfo : iterable) {_                    folderItems.add(itemInfo)__                }__                return folderItems__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };returns,a,specific,range,of,child,items,in,folder,and,specifies,which,fields,of,each,item,to,retrieve,param,folder,id,the,id,of,folder,param,offset,the,index,of,first,child,item,to,retrieve,if,code,null,code,all,child,items,are,retrieved,param,limit,the,maximum,number,of,children,to,retrieve,after,the,offset,if,code,null,code,all,child,items,are,retrieved,param,fields,the,item,fields,to,retrieve,for,each,child,item,if,code,null,code,all,item,fields,are,retrieved,return,the,items,in,folder;public,collection,box,item,info,get,folder,items,string,folder,id,long,offset,long,limit,string,fields,try,log,debug,getting,folder,items,in,folder,id,folder,id,at,offset,offset,and,limit,limit,with,fields,arrays,to,string,fields,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,new,string,0,if,offset,null,limit,null,return,folder,get,children,range,offset,limit,fields,else,collection,box,item,info,folder,items,new,array,list,iterable,box,item,info,iterable,if,fields,length,0,iterable,folder,get,children,fields,else,iterable,folder,get,children,for,box,item,info,item,info,iterable,folder,items,add,item,info,return,folder,items,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields);1536687142;Returns a specific range of child items in folder and specifies which_fields of each item to retrieve.__@param folderId_- the id of folder._@param offset_- the index of first child item to retrieve_ if_<code>null</code> all child items are retrieved._@param limit_- the maximum number of children to retrieve after the offset__if <code>null</code> all child items are retrieved._@param fields_- the item fields to retrieve for each child item_ if_<code>null</code> all item fields are retrieved._@return The Items in folder;public Collection<BoxItem.Info> getFolderItems(String folderId, Long offset, Long limit, String... fields) {_        try {_            LOG.debug("Getting folder items in folder(id=" + folderId + ") at offset=" + offset + " and limit=" + limit_                    + " with fields=" + Arrays.toString(fields))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            if (fields == null) {_                fields = new String[0]__            }_            if (offset != null && limit != null) {_                return folder.getChildrenRange(offset, limit, fields)__            } else {_                Collection<BoxItem.Info> folderItems = new ArrayList<>()__                Iterable<BoxItem.Info> iterable__                if (fields.length > 0) {_                    iterable = folder.getChildren(fields)__                } else {_                    iterable = folder.getChildren()__                }_                for (BoxItem.Info itemInfo : iterable) {_                    folderItems.add(itemInfo)__                }__                return folderItems__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };returns,a,specific,range,of,child,items,in,folder,and,specifies,which,fields,of,each,item,to,retrieve,param,folder,id,the,id,of,folder,param,offset,the,index,of,first,child,item,to,retrieve,if,code,null,code,all,child,items,are,retrieved,param,limit,the,maximum,number,of,children,to,retrieve,after,the,offset,if,code,null,code,all,child,items,are,retrieved,param,fields,the,item,fields,to,retrieve,for,each,child,item,if,code,null,code,all,item,fields,are,retrieved,return,the,items,in,folder;public,collection,box,item,info,get,folder,items,string,folder,id,long,offset,long,limit,string,fields,try,log,debug,getting,folder,items,in,folder,id,folder,id,at,offset,offset,and,limit,limit,with,fields,arrays,to,string,fields,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,new,string,0,if,offset,null,limit,null,return,folder,get,children,range,offset,limit,fields,else,collection,box,item,info,folder,items,new,array,list,iterable,box,item,info,iterable,if,fields,length,0,iterable,folder,get,children,fields,else,iterable,folder,get,children,for,box,item,info,item,info,iterable,folder,items,add,item,info,return,folder,items,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String folderName);1488797924;Create a folder in parent folder with given <code>folderName</code>.__@param parentFolderId_- the id of parent folder._@param folderName_the name of created folder._@return The created folder.;public BoxFolder createFolder(String parentFolderId, String folderName) {_        try {_            LOG.debug("Creating folder with name '" + folderName + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (folderName == null) {_                throw new IllegalArgumentException("Paramerer 'folderName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)__            return parentFolder.createFolder(folderName).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,in,parent,folder,with,given,code,folder,name,code,param,parent,folder,id,the,id,of,parent,folder,param,folder,name,the,name,of,created,folder,return,the,created,folder;public,box,folder,create,folder,string,parent,folder,id,string,folder,name,try,log,debug,creating,folder,with,name,folder,name,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,folder,name,null,throw,new,illegal,argument,exception,paramerer,folder,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,return,parent,folder,create,folder,folder,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String folderName);1516092507;Create a folder in parent folder with given <code>parentFolderId</code>.__@param parentFolderId_- the id of parent folder._@param folderName_the name of created folder._@return The created folder.;public BoxFolder createFolder(String parentFolderId, String folderName) {_        try {_            LOG.debug("Creating folder with name '" + folderName + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (folderName == null) {_                throw new IllegalArgumentException("Paramerer 'folderName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)__            return parentFolder.createFolder(folderName).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,in,parent,folder,with,given,code,parent,folder,id,code,param,parent,folder,id,the,id,of,parent,folder,param,folder,name,the,name,of,created,folder,return,the,created,folder;public,box,folder,create,folder,string,parent,folder,id,string,folder,name,try,log,debug,creating,folder,with,name,folder,name,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,folder,name,null,throw,new,illegal,argument,exception,paramerer,folder,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,return,parent,folder,create,folder,folder,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String folderName);1523968787;Create a folder in parent folder with given <code>parentFolderId</code>.__@param parentFolderId_- the id of parent folder._@param folderName_the name of created folder._@return The created folder.;public BoxFolder createFolder(String parentFolderId, String folderName) {_        try {_            LOG.debug("Creating folder with name '" + folderName + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (folderName == null) {_                throw new IllegalArgumentException("Paramerer 'folderName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)__            return parentFolder.createFolder(folderName).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,in,parent,folder,with,given,code,parent,folder,id,code,param,parent,folder,id,the,id,of,parent,folder,param,folder,name,the,name,of,created,folder,return,the,created,folder;public,box,folder,create,folder,string,parent,folder,id,string,folder,name,try,log,debug,creating,folder,with,name,folder,name,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,folder,name,null,throw,new,illegal,argument,exception,paramerer,folder,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,return,parent,folder,create,folder,folder,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String folderName);1534005301;Create a folder in parent folder with given <code>parentFolderId</code>.__@param parentFolderId_- the id of parent folder._@param folderName_the name of created folder._@return The created folder.;public BoxFolder createFolder(String parentFolderId, String folderName) {_        try {_            LOG.debug("Creating folder with name '" + folderName + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (folderName == null) {_                throw new IllegalArgumentException("Paramerer 'folderName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)__            return parentFolder.createFolder(folderName).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,in,parent,folder,with,given,code,parent,folder,id,code,param,parent,folder,id,the,id,of,parent,folder,param,folder,name,the,name,of,created,folder,return,the,created,folder;public,box,folder,create,folder,string,parent,folder,id,string,folder,name,try,log,debug,creating,folder,with,name,folder,name,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,folder,name,null,throw,new,illegal,argument,exception,paramerer,folder,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,return,parent,folder,create,folder,folder,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String folderName);1536687142;Create a folder in parent folder with given <code>parentFolderId</code>.__@param parentFolderId_- the id of parent folder._@param folderName_the name of created folder._@return The created folder.;public BoxFolder createFolder(String parentFolderId, String folderName) {_        try {_            LOG.debug("Creating folder with name '" + folderName + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (folderName == null) {_                throw new IllegalArgumentException("Paramerer 'folderName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)__            return parentFolder.createFolder(folderName).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,in,parent,folder,with,given,code,parent,folder,id,code,param,parent,folder,id,the,id,of,parent,folder,param,folder,name,the,name,of,created,folder,return,the,created,folder;public,box,folder,create,folder,string,parent,folder,id,string,folder,name,try,log,debug,creating,folder,with,name,folder,name,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,folder,name,null,throw,new,illegal,argument,exception,paramerer,folder,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,return,parent,folder,create,folder,folder,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder.Info getFolderInfo(String folderId, String... fields);1488797924;Get folder information.__@param folderId_- the id of folder._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The folder information.;public BoxFolder.Info getFolderInfo(String folderId, String... fields) {_        try {_            LOG.debug("Getting info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)___            if (fields == null || fields.length == 0) {_                return folder.getInfo()__            } else {_                return folder.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,folder,information,param,folder,id,the,id,of,folder,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,folder,information;public,box,folder,info,get,folder,info,string,folder,id,string,fields,try,log,debug,getting,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,length,0,return,folder,get,info,else,return,folder,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder.Info getFolderInfo(String folderId, String... fields);1516092507;Get folder information.__@param folderId_- the id of folder._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The folder information.;public BoxFolder.Info getFolderInfo(String folderId, String... fields) {_        try {_            LOG.debug("Getting info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)___            if (fields == null || fields.length == 0) {_                return folder.getInfo()__            } else {_                return folder.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,folder,information,param,folder,id,the,id,of,folder,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,folder,information;public,box,folder,info,get,folder,info,string,folder,id,string,fields,try,log,debug,getting,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,length,0,return,folder,get,info,else,return,folder,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder.Info getFolderInfo(String folderId, String... fields);1523968787;Get folder information.__@param folderId_- the id of folder._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The folder information.;public BoxFolder.Info getFolderInfo(String folderId, String... fields) {_        try {_            LOG.debug("Getting info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)___            if (fields == null || fields.length == 0) {_                return folder.getInfo()__            } else {_                return folder.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,folder,information,param,folder,id,the,id,of,folder,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,folder,information;public,box,folder,info,get,folder,info,string,folder,id,string,fields,try,log,debug,getting,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,length,0,return,folder,get,info,else,return,folder,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder.Info getFolderInfo(String folderId, String... fields);1534005301;Get folder information.__@param folderId_- the id of folder._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The folder information.;public BoxFolder.Info getFolderInfo(String folderId, String... fields) {_        try {_            LOG.debug("Getting info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)___            if (fields == null || fields.length == 0) {_                return folder.getInfo()__            } else {_                return folder.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,folder,information,param,folder,id,the,id,of,folder,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,folder,information;public,box,folder,info,get,folder,info,string,folder,id,string,fields,try,log,debug,getting,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,length,0,return,folder,get,info,else,return,folder,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder.Info getFolderInfo(String folderId, String... fields);1536687142;Get folder information.__@param folderId_- the id of folder._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The folder information.;public BoxFolder.Info getFolderInfo(String folderId, String... fields) {_        try {_            LOG.debug("Getting info for folder(id={})", folderId)__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)___            if (fields == null || fields.length == 0) {_                return folder.getInfo()__            } else {_                return folder.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,folder,information,param,folder,id,the,id,of,folder,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,folder,information;public,box,folder,info,get,folder,info,string,folder,id,string,fields,try,log,debug,getting,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,if,fields,null,fields,length,0,return,folder,get,info,else,return,folder,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info);1488797924;Update folder information.__@param folderId_- the id of folder to update._@param info_- the updated information_@return The updated folder.;public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info) {_        try {_            LOG.debug("Updating info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.updateInfo(info)__            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,folder,information,param,folder,id,the,id,of,folder,to,update,param,info,the,updated,information,return,the,updated,folder;public,box,folder,update,folder,info,string,folder,id,box,folder,info,info,try,log,debug,updating,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,update,info,info,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info);1516092507;Update folder information.__@param folderId_- the id of folder to update._@param info_- the updated information_@return The updated folder.;public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info) {_        try {_            LOG.debug("Updating info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.updateInfo(info)__            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,folder,information,param,folder,id,the,id,of,folder,to,update,param,info,the,updated,information,return,the,updated,folder;public,box,folder,update,folder,info,string,folder,id,box,folder,info,info,try,log,debug,updating,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,update,info,info,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info);1523968787;Update folder information.__@param folderId_- the id of folder to update._@param info_- the updated information_@return The updated folder.;public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info) {_        try {_            LOG.debug("Updating info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.updateInfo(info)__            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,folder,information,param,folder,id,the,id,of,folder,to,update,param,info,the,updated,information,return,the,updated,folder;public,box,folder,update,folder,info,string,folder,id,box,folder,info,info,try,log,debug,updating,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,update,info,info,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info);1534005301;Update folder information.__@param folderId_- the id of folder to update._@param info_- the updated information_@return The updated folder.;public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info) {_        try {_            LOG.debug("Updating info for folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.updateInfo(info)__            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,folder,information,param,folder,id,the,id,of,folder,to,update,param,info,the,updated,information,return,the,updated,folder;public,box,folder,update,folder,info,string,folder,id,box,folder,info,info,try,log,debug,updating,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,update,info,info,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info);1536687142;Update folder information.__@param folderId_- the id of folder to update._@param info_- the updated information_@return The updated folder.;public BoxFolder updateFolderInfo(String folderId, BoxFolder.Info info) {_        try {_            LOG.debug("Updating info for folder(id={})", folderId)__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.updateInfo(info)__            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,folder,information,param,folder,id,the,id,of,folder,to,update,param,info,the,updated,information,return,the,updated,folder;public,box,folder,update,folder,info,string,folder,id,box,folder,info,info,try,log,debug,updating,info,for,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,update,info,info,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName);1488797924;Copy folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied folder_ if <code>newName</code> is_<code>null</code>, the copied folder has same name as the_original._@return The copied folder.;public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToCopy = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return folderToCopy.copy(destinationFolder).getResource()__            } else {_                return folderToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,folder,if,code,new,name,code,is,code,null,code,the,copied,folder,has,same,name,as,the,original,return,the,copied,folder;public,box,folder,copy,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,copying,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,copy,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,folder,to,copy,copy,destination,folder,get,resource,else,return,folder,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName);1516092507;Copy folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied folder_ if <code>newName</code> is_<code>null</code>, the copied folder has same name as the_original._@return The copied folder.;public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToCopy = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return folderToCopy.copy(destinationFolder).getResource()__            } else {_                return folderToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,folder,if,code,new,name,code,is,code,null,code,the,copied,folder,has,same,name,as,the,original,return,the,copied,folder;public,box,folder,copy,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,copying,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,copy,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,folder,to,copy,copy,destination,folder,get,resource,else,return,folder,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName);1523968787;Copy folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied folder_ if <code>newName</code> is_<code>null</code>, the copied folder has same name as the_original._@return The copied folder.;public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToCopy = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return folderToCopy.copy(destinationFolder).getResource()__            } else {_                return folderToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,folder,if,code,new,name,code,is,code,null,code,the,copied,folder,has,same,name,as,the,original,return,the,copied,folder;public,box,folder,copy,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,copying,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,copy,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,folder,to,copy,copy,destination,folder,get,resource,else,return,folder,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName);1534005301;Copy folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied folder_ if <code>newName</code> is_<code>null</code>, the copied folder has same name as the_original._@return The copied folder.;public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToCopy = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return folderToCopy.copy(destinationFolder).getResource()__            } else {_                return folderToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,folder,if,code,new,name,code,is,code,null,code,the,copied,folder,has,same,name,as,the,original,return,the,copied,folder;public,box,folder,copy,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,copying,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,copy,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,folder,to,copy,copy,destination,folder,get,resource,else,return,folder,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName);1536687142;Copy folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied folder_ if <code>newName</code> is_<code>null</code>, the copied folder has same name as the_original._@return The copied folder.;public BoxFolder copyFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToCopy = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return folderToCopy.copy(destinationFolder).getResource()__            } else {_                return folderToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,folder,if,code,new,name,code,is,code,null,code,the,copied,folder,has,same,name,as,the,original,return,the,copied,folder;public,box,folder,copy,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,copying,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,copy,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,folder,to,copy,copy,destination,folder,get,resource,else,return,folder,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String... path);1516092507;Create a folder specified by path from parent folder with given <code>parentFolderId</code>,_creating intermediate directories as required.__@param parentFolderId_- the id of parent folder._@param path_- Sequence of Box folder names from parent folder to returned_folder._@return The last folder in path, no fault will be thrown if it already exists.;public BoxFolder createFolder(String parentFolderId, String... path) {_        try {_            LOG.debug("Creating folder with path '" + path + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (path == null) {_                throw new IllegalArgumentException("Paramerer 'path' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, parentFolderId)__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                folder = folder.createFolder(path[folderIndex]).getResource()__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,specified,by,path,from,parent,folder,with,given,code,parent,folder,id,code,creating,intermediate,directories,as,required,param,parent,folder,id,the,id,of,parent,folder,param,path,sequence,of,box,folder,names,from,parent,folder,to,returned,folder,return,the,last,folder,in,path,no,fault,will,be,thrown,if,it,already,exists;public,box,folder,create,folder,string,parent,folder,id,string,path,try,log,debug,creating,folder,with,path,path,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,path,null,throw,new,illegal,argument,exception,paramerer,path,can,not,be,null,box,folder,folder,new,box,folder,box,connection,parent,folder,id,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,folder,folder,create,folder,path,folder,index,get,resource,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String... path);1523968787;Create a folder specified by path from parent folder with given <code>parentFolderId</code>,_creating intermediate directories as required.__@param parentFolderId_- the id of parent folder._@param path_- Sequence of Box folder names from parent folder to returned_folder._@return The last folder in path, no fault will be thrown if it already exists.;public BoxFolder createFolder(String parentFolderId, String... path) {_        try {_            LOG.debug("Creating folder with path '" + path + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (path == null) {_                throw new IllegalArgumentException("Paramerer 'path' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, parentFolderId)__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                folder = folder.createFolder(path[folderIndex]).getResource()__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,specified,by,path,from,parent,folder,with,given,code,parent,folder,id,code,creating,intermediate,directories,as,required,param,parent,folder,id,the,id,of,parent,folder,param,path,sequence,of,box,folder,names,from,parent,folder,to,returned,folder,return,the,last,folder,in,path,no,fault,will,be,thrown,if,it,already,exists;public,box,folder,create,folder,string,parent,folder,id,string,path,try,log,debug,creating,folder,with,path,path,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,path,null,throw,new,illegal,argument,exception,paramerer,path,can,not,be,null,box,folder,folder,new,box,folder,box,connection,parent,folder,id,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,folder,folder,create,folder,path,folder,index,get,resource,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String... path);1534005301;Create a folder specified by path from parent folder with given <code>parentFolderId</code>,_creating intermediate directories as required.__@param parentFolderId_- the id of parent folder._@param path_- Sequence of Box folder names from parent folder to returned_folder._@return The last folder in path, no fault will be thrown if it already exists.;public BoxFolder createFolder(String parentFolderId, String... path) {_        try {_            LOG.debug("Creating folder with path '" + Arrays.toString(path) + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (path == null) {_                throw new IllegalArgumentException("Paramerer 'path' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, parentFolderId)__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                folder = folder.createFolder(path[folderIndex]).getResource()__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,specified,by,path,from,parent,folder,with,given,code,parent,folder,id,code,creating,intermediate,directories,as,required,param,parent,folder,id,the,id,of,parent,folder,param,path,sequence,of,box,folder,names,from,parent,folder,to,returned,folder,return,the,last,folder,in,path,no,fault,will,be,thrown,if,it,already,exists;public,box,folder,create,folder,string,parent,folder,id,string,path,try,log,debug,creating,folder,with,path,arrays,to,string,path,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,path,null,throw,new,illegal,argument,exception,paramerer,path,can,not,be,null,box,folder,folder,new,box,folder,box,connection,parent,folder,id,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,folder,folder,create,folder,path,folder,index,get,resource,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder createFolder(String parentFolderId, String... path);1536687142;Create a folder specified by path from parent folder with given <code>parentFolderId</code>,_creating intermediate directories as required.__@param parentFolderId_- the id of parent folder._@param path_- Sequence of Box folder names from parent folder to returned_folder._@return The last folder in path, no fault will be thrown if it already exists.;public BoxFolder createFolder(String parentFolderId, String... path) {_        try {_            LOG.debug("Creating folder with path '" + Arrays.toString(path) + "' in parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (path == null) {_                throw new IllegalArgumentException("Paramerer 'path' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, parentFolderId)__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                folder = folder.createFolder(path[folderIndex]).getResource()__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,folder,specified,by,path,from,parent,folder,with,given,code,parent,folder,id,code,creating,intermediate,directories,as,required,param,parent,folder,id,the,id,of,parent,folder,param,path,sequence,of,box,folder,names,from,parent,folder,to,returned,folder,return,the,last,folder,in,path,no,fault,will,be,thrown,if,it,already,exists;public,box,folder,create,folder,string,parent,folder,id,string,path,try,log,debug,creating,folder,with,path,arrays,to,string,path,in,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,path,null,throw,new,illegal,argument,exception,paramerer,path,can,not,be,null,box,folder,folder,new,box,folder,box,connection,parent,folder,id,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,folder,folder,create,folder,path,folder,index,get,resource,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getFolder(String... path);1488797924;Return the Box folder referenced by <code>path</code>.__@param path_- Sequence of Box folder names from root folder to returned_folder.__@return The Box folder referenced by <code>path</code> or_<code>null</code> if folder is not found.;public BoxFolder getFolder(String... path) {_        try {_            LOG.debug("Getting folder at path=" + Arrays.toString(path))___            BoxFolder folder = BoxFolder.getRootFolder(boxConnection)__            if (path == null || path.length == 0) {_                _                return folder__            }__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                _                return null__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,box,folder,referenced,by,code,path,code,param,path,sequence,of,box,folder,names,from,root,folder,to,returned,folder,return,the,box,folder,referenced,by,code,path,code,or,code,null,code,if,folder,is,not,found;public,box,folder,get,folder,string,path,try,log,debug,getting,folder,at,path,arrays,to,string,path,box,folder,folder,box,folder,get,root,folder,box,connection,if,path,null,path,length,0,return,folder,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,return,null,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getFolder(String... path);1516092507;Return the Box folder referenced by <code>path</code>.__@param path_- Sequence of Box folder names from root folder to returned_folder.__@return The Box folder referenced by <code>path</code> or_<code>null</code> if folder is not found.;public BoxFolder getFolder(String... path) {_        try {_            LOG.debug("Getting folder at path=" + Arrays.toString(path))___            BoxFolder folder = BoxFolder.getRootFolder(boxConnection)__            if (path == null || path.length == 0) {_                _                return folder__            }__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                _                return null__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,box,folder,referenced,by,code,path,code,param,path,sequence,of,box,folder,names,from,root,folder,to,returned,folder,return,the,box,folder,referenced,by,code,path,code,or,code,null,code,if,folder,is,not,found;public,box,folder,get,folder,string,path,try,log,debug,getting,folder,at,path,arrays,to,string,path,box,folder,folder,box,folder,get,root,folder,box,connection,if,path,null,path,length,0,return,folder,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,return,null,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getFolder(String... path);1523968787;Return the Box folder referenced by <code>path</code>.__@param path_- Sequence of Box folder names from root folder to returned_folder.__@return The Box folder referenced by <code>path</code> or_<code>null</code> if folder is not found.;public BoxFolder getFolder(String... path) {_        try {_            LOG.debug("Getting folder at path=" + Arrays.toString(path))___            BoxFolder folder = BoxFolder.getRootFolder(boxConnection)__            if (path == null || path.length == 0) {_                _                return folder__            }__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                _                return null__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,box,folder,referenced,by,code,path,code,param,path,sequence,of,box,folder,names,from,root,folder,to,returned,folder,return,the,box,folder,referenced,by,code,path,code,or,code,null,code,if,folder,is,not,found;public,box,folder,get,folder,string,path,try,log,debug,getting,folder,at,path,arrays,to,string,path,box,folder,folder,box,folder,get,root,folder,box,connection,if,path,null,path,length,0,return,folder,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,return,null,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getFolder(String... path);1534005301;Return the Box folder referenced by <code>path</code>.__@param path_- Sequence of Box folder names from root folder to returned_folder.__@return The Box folder referenced by <code>path</code> or_<code>null</code> if folder is not found.;public BoxFolder getFolder(String... path) {_        try {_            LOG.debug("Getting folder at path=" + Arrays.toString(path))___            BoxFolder folder = BoxFolder.getRootFolder(boxConnection)__            if (path == null || path.length == 0) {_                _                return folder__            }__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                _                return null__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,box,folder,referenced,by,code,path,code,param,path,sequence,of,box,folder,names,from,root,folder,to,returned,folder,return,the,box,folder,referenced,by,code,path,code,or,code,null,code,if,folder,is,not,found;public,box,folder,get,folder,string,path,try,log,debug,getting,folder,at,path,arrays,to,string,path,box,folder,folder,box,folder,get,root,folder,box,connection,if,path,null,path,length,0,return,folder,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,return,null,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getFolder(String... path);1536687142;Return the Box folder referenced by <code>path</code>.__@param path_- Sequence of Box folder names from root folder to returned_folder.__@return The Box folder referenced by <code>path</code> or_<code>null</code> if folder is not found.;public BoxFolder getFolder(String... path) {_        try {_            LOG.debug("Getting folder at path={}", Arrays.toString(path))___            BoxFolder folder = BoxFolder.getRootFolder(boxConnection)__            if (path == null || path.length == 0) {_                _                return folder__            }__            searchPath: for (int folderIndex = 0_ folderIndex < path.length_ folderIndex++) {_                for (BoxItem.Info itemInfo : folder) {_                    if (itemInfo instanceof BoxFolder.Info && itemInfo.getName().equals(path[folderIndex])) {_                        folder = (BoxFolder) itemInfo.getResource()__                        continue searchPath__                    }_                }_                _                return null__            }_            return folder__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,box,folder,referenced,by,code,path,code,param,path,sequence,of,box,folder,names,from,root,folder,to,returned,folder,return,the,box,folder,referenced,by,code,path,code,or,code,null,code,if,folder,is,not,found;public,box,folder,get,folder,string,path,try,log,debug,getting,folder,at,path,arrays,to,string,path,box,folder,folder,box,folder,get,root,folder,box,connection,if,path,null,path,length,0,return,folder,search,path,for,int,folder,index,0,folder,index,path,length,folder,index,for,box,item,info,item,info,folder,if,item,info,instanceof,box,folder,info,item,info,get,name,equals,path,folder,index,folder,box,folder,item,info,get,resource,continue,search,path,return,null,return,folder,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder renameFolder(String folderId, String newFolderName);1488797924;Rename folder giving it the name <code>newName</code>__@param folderId_- the id of folder to rename._@param newFolderName_- the new name of folder._@return The renamed folder.;public BoxFolder renameFolder(String folderId, String newFolderName) {_        try {_            LOG.debug("Renaming folder(id=" + folderId + ") to '" + newFolderName + "'")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (newFolderName == null) {_                throw new IllegalArgumentException("Parameter 'newFolderName' can not be null")__            }_            BoxFolder folderToRename = new BoxFolder(boxConnection, folderId)__            folderToRename.rename(newFolderName)__            return folderToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,folder,giving,it,the,name,code,new,name,code,param,folder,id,the,id,of,folder,to,rename,param,new,folder,name,the,new,name,of,folder,return,the,renamed,folder;public,box,folder,rename,folder,string,folder,id,string,new,folder,name,try,log,debug,renaming,folder,id,folder,id,to,new,folder,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,new,folder,name,null,throw,new,illegal,argument,exception,parameter,new,folder,name,can,not,be,null,box,folder,folder,to,rename,new,box,folder,box,connection,folder,id,folder,to,rename,rename,new,folder,name,return,folder,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder renameFolder(String folderId, String newFolderName);1516092507;Rename folder giving it the name <code>newName</code>__@param folderId_- the id of folder to rename._@param newFolderName_- the new name of folder._@return The renamed folder.;public BoxFolder renameFolder(String folderId, String newFolderName) {_        try {_            LOG.debug("Renaming folder(id=" + folderId + ") to '" + newFolderName + "'")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (newFolderName == null) {_                throw new IllegalArgumentException("Parameter 'newFolderName' can not be null")__            }_            BoxFolder folderToRename = new BoxFolder(boxConnection, folderId)__            folderToRename.rename(newFolderName)__            return folderToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,folder,giving,it,the,name,code,new,name,code,param,folder,id,the,id,of,folder,to,rename,param,new,folder,name,the,new,name,of,folder,return,the,renamed,folder;public,box,folder,rename,folder,string,folder,id,string,new,folder,name,try,log,debug,renaming,folder,id,folder,id,to,new,folder,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,new,folder,name,null,throw,new,illegal,argument,exception,parameter,new,folder,name,can,not,be,null,box,folder,folder,to,rename,new,box,folder,box,connection,folder,id,folder,to,rename,rename,new,folder,name,return,folder,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder renameFolder(String folderId, String newFolderName);1523968787;Rename folder giving it the name <code>newName</code>__@param folderId_- the id of folder to rename._@param newFolderName_- the new name of folder._@return The renamed folder.;public BoxFolder renameFolder(String folderId, String newFolderName) {_        try {_            LOG.debug("Renaming folder(id=" + folderId + ") to '" + newFolderName + "'")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (newFolderName == null) {_                throw new IllegalArgumentException("Parameter 'newFolderName' can not be null")__            }_            BoxFolder folderToRename = new BoxFolder(boxConnection, folderId)__            folderToRename.rename(newFolderName)__            return folderToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,folder,giving,it,the,name,code,new,name,code,param,folder,id,the,id,of,folder,to,rename,param,new,folder,name,the,new,name,of,folder,return,the,renamed,folder;public,box,folder,rename,folder,string,folder,id,string,new,folder,name,try,log,debug,renaming,folder,id,folder,id,to,new,folder,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,new,folder,name,null,throw,new,illegal,argument,exception,parameter,new,folder,name,can,not,be,null,box,folder,folder,to,rename,new,box,folder,box,connection,folder,id,folder,to,rename,rename,new,folder,name,return,folder,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder renameFolder(String folderId, String newFolderName);1534005301;Rename folder giving it the name <code>newName</code>__@param folderId_- the id of folder to rename._@param newFolderName_- the new name of folder._@return The renamed folder.;public BoxFolder renameFolder(String folderId, String newFolderName) {_        try {_            LOG.debug("Renaming folder(id=" + folderId + ") to '" + newFolderName + "'")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (newFolderName == null) {_                throw new IllegalArgumentException("Parameter 'newFolderName' can not be null")__            }_            BoxFolder folderToRename = new BoxFolder(boxConnection, folderId)__            folderToRename.rename(newFolderName)__            return folderToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,folder,giving,it,the,name,code,new,name,code,param,folder,id,the,id,of,folder,to,rename,param,new,folder,name,the,new,name,of,folder,return,the,renamed,folder;public,box,folder,rename,folder,string,folder,id,string,new,folder,name,try,log,debug,renaming,folder,id,folder,id,to,new,folder,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,new,folder,name,null,throw,new,illegal,argument,exception,parameter,new,folder,name,can,not,be,null,box,folder,folder,to,rename,new,box,folder,box,connection,folder,id,folder,to,rename,rename,new,folder,name,return,folder,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder renameFolder(String folderId, String newFolderName);1536687142;Rename folder giving it the name <code>newName</code>__@param folderId_- the id of folder to rename._@param newFolderName_- the new name of folder._@return The renamed folder.;public BoxFolder renameFolder(String folderId, String newFolderName) {_        try {_            LOG.debug("Renaming folder(id=" + folderId + ") to '" + newFolderName + "'")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (newFolderName == null) {_                throw new IllegalArgumentException("Parameter 'newFolderName' can not be null")__            }_            BoxFolder folderToRename = new BoxFolder(boxConnection, folderId)__            folderToRename.rename(newFolderName)__            return folderToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,folder,giving,it,the,name,code,new,name,code,param,folder,id,the,id,of,folder,to,rename,param,new,folder,name,the,new,name,of,folder,return,the,renamed,folder;public,box,folder,rename,folder,string,folder,id,string,new,folder,name,try,log,debug,renaming,folder,id,folder,id,to,new,folder,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,new,folder,name,null,throw,new,illegal,argument,exception,parameter,new,folder,name,can,not,be,null,box,folder,folder,to,rename,new,box,folder,box,connection,folder,id,folder,to,rename,rename,new,folder,name,return,folder,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public void deleteFolder(String folderId);1488797924;Delete folder.__@param folderId_- the id of folder to delete.;public void deleteFolder(String folderId) {_        try {_            LOG.debug("Deleting folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.delete(true)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,folder,param,folder,id,the,id,of,folder,to,delete;public,void,delete,folder,string,folder,id,try,log,debug,deleting,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,delete,true,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public void deleteFolder(String folderId);1516092507;Delete folder.__@param folderId_- the id of folder to delete.;public void deleteFolder(String folderId) {_        try {_            LOG.debug("Deleting folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.delete(true)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,folder,param,folder,id,the,id,of,folder,to,delete;public,void,delete,folder,string,folder,id,try,log,debug,deleting,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,delete,true,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public void deleteFolder(String folderId);1523968787;Delete folder.__@param folderId_- the id of folder to delete.;public void deleteFolder(String folderId) {_        try {_            LOG.debug("Deleting folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.delete(true)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,folder,param,folder,id,the,id,of,folder,to,delete;public,void,delete,folder,string,folder,id,try,log,debug,deleting,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,delete,true,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public void deleteFolder(String folderId);1534005301;Delete folder.__@param folderId_- the id of folder to delete.;public void deleteFolder(String folderId) {_        try {_            LOG.debug("Deleting folder(id=" + folderId + ")")__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.delete(true)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,folder,param,folder,id,the,id,of,folder,to,delete;public,void,delete,folder,string,folder,id,try,log,debug,deleting,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,delete,true,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public void deleteFolder(String folderId);1536687142;Delete folder.__@param folderId_- the id of folder to delete.;public void deleteFolder(String folderId) {_        try {_            LOG.debug("Deleting folder(id={})", folderId)__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            folder.delete(true)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,folder,param,folder,id,the,id,of,folder,to,delete;public,void,delete,folder,string,folder,id,try,log,debug,deleting,folder,id,folder,id,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,folder,delete,true,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFoldersManager(BoxAPIConnection boxConnection);1488797924;Create folder manager to manage folders of Box connection's authenticated_user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFoldersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,folder,manager,to,manage,folders,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,folders,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFoldersManager -> public BoxFoldersManager(BoxAPIConnection boxConnection);1516092507;Create folder manager to manage folders of Box connection's authenticated_user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFoldersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,folder,manager,to,manage,folders,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,folders,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFoldersManager -> public BoxFoldersManager(BoxAPIConnection boxConnection);1523968787;Create folder manager to manage folders of Box connection's authenticated_user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFoldersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,folder,manager,to,manage,folders,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,folders,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFoldersManager -> public BoxFoldersManager(BoxAPIConnection boxConnection);1534005301;Create folder manager to manage folders of Box connection's authenticated_user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFoldersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,folder,manager,to,manage,folders,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,folders,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFoldersManager -> public BoxFoldersManager(BoxAPIConnection boxConnection);1536687142;Create folder manager to manage folders of Box connection's authenticated_user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFoldersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,folder,manager,to,manage,folders,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,folders,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFoldersManager -> public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1488797924;Create a shared link to folder.__@param folderId_- the id of folder to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for folder(id=" + folderId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + SimpleDateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            return folder.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,folder,param,folder,id,the,id,of,folder,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,folder,shared,link,string,folder,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,folder,id,folder,id,with,access,access,unshare,date,null,unshared,date,simple,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,return,folder,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1516092507;Create a shared link to folder.__@param folderId_- the id of folder to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for folder(id=" + folderId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + SimpleDateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            return folder.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,folder,param,folder,id,the,id,of,folder,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,folder,shared,link,string,folder,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,folder,id,folder,id,with,access,access,unshare,date,null,unshared,date,simple,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,return,folder,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1523968787;Create a shared link to folder.__@param folderId_- the id of folder to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for folder(id=" + folderId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + DateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            return folder.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,folder,param,folder,id,the,id,of,folder,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,folder,shared,link,string,folder,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,folder,id,folder,id,with,access,access,unshare,date,null,unshared,date,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,return,folder,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1534005301;Create a shared link to folder.__@param folderId_- the id of folder to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for folder(id=" + folderId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + DateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            return folder.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,folder,param,folder,id,the,id,of,folder,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,folder,shared,link,string,folder,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,folder,id,folder,id,with,access,access,unshare,date,null,unshared,date,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,return,folder,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1536687142;Create a shared link to folder.__@param folderId_- the id of folder to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFolderSharedLink(String folderId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for folder(id=" + folderId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + DateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFolder folder = new BoxFolder(boxConnection, folderId)__            return folder.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,folder,param,folder,id,the,id,of,folder,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,folder,shared,link,string,folder,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,folder,id,folder,id,with,access,access,unshare,date,null,unshared,date,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,folder,folder,new,box,folder,box,connection,folder,id,return,folder,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName);1488797924;Move folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved folder_ if <code>newName</code> is_<code>null</code>, the moved folder has same name as the_original._@return The moved folder.;public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToMove = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFolder) folderToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFolder) folderToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,folder,if,code,new,name,code,is,code,null,code,the,moved,folder,has,same,name,as,the,original,return,the,moved,folder;public,box,folder,move,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,moving,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,move,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,folder,folder,to,move,move,destination,folder,get,resource,else,return,box,folder,folder,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName);1516092507;Move folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved folder_ if <code>newName</code> is_<code>null</code>, the moved folder has same name as the_original._@return The moved folder.;public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToMove = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFolder) folderToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFolder) folderToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,folder,if,code,new,name,code,is,code,null,code,the,moved,folder,has,same,name,as,the,original,return,the,moved,folder;public,box,folder,move,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,moving,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,move,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,folder,folder,to,move,move,destination,folder,get,resource,else,return,box,folder,folder,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName);1523968787;Move folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved folder_ if <code>newName</code> is_<code>null</code>, the moved folder has same name as the_original._@return The moved folder.;public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToMove = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFolder) folderToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFolder) folderToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,folder,if,code,new,name,code,is,code,null,code,the,moved,folder,has,same,name,as,the,original,return,the,moved,folder;public,box,folder,move,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,moving,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,move,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,folder,folder,to,move,move,destination,folder,get,resource,else,return,box,folder,folder,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName);1534005301;Move folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved folder_ if <code>newName</code> is_<code>null</code>, the moved folder has same name as the_original._@return The moved folder.;public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToMove = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFolder) folderToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFolder) folderToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,folder,if,code,new,name,code,is,code,null,code,the,moved,folder,has,same,name,as,the,original,return,the,moved,folder;public,box,folder,move,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,moving,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,move,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,folder,folder,to,move,move,destination,folder,get,resource,else,return,box,folder,folder,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName);1536687142;Move folder to destination folder while optionally giving it a new name.__@param folderId_- the id of folder to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved folder_ if <code>newName</code> is_<code>null</code>, the moved folder has same name as the_original._@return The moved folder.;public BoxFolder moveFolder(String folderId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving folder(id=" + folderId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (folderId == null) {_                throw new IllegalArgumentException("Parameter 'folderId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFolder folderToMove = new BoxFolder(boxConnection, folderId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFolder) folderToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFolder) folderToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,folder,to,destination,folder,while,optionally,giving,it,a,new,name,param,folder,id,the,id,of,folder,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,folder,if,code,new,name,code,is,code,null,code,the,moved,folder,has,same,name,as,the,original,return,the,moved,folder;public,box,folder,move,folder,string,folder,id,string,destination,folder,id,string,new,name,try,log,debug,moving,folder,id,folder,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,folder,id,null,throw,new,illegal,argument,exception,parameter,folder,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,folder,folder,to,move,new,box,folder,box,connection,folder,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,folder,folder,to,move,move,destination,folder,get,resource,else,return,box,folder,folder,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getRootFolder();1488797924;Return the root folder of authenticated user.__@return The root folder of authenticated user.;public BoxFolder getRootFolder() {_        try {_            LOG.debug("Getting root folder")__            return BoxFolder.getRootFolder(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,root,folder,of,authenticated,user,return,the,root,folder,of,authenticated,user;public,box,folder,get,root,folder,try,log,debug,getting,root,folder,return,box,folder,get,root,folder,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getRootFolder();1516092507;Return the root folder of authenticated user.__@return The root folder of authenticated user.;public BoxFolder getRootFolder() {_        try {_            LOG.debug("Getting root folder")__            return BoxFolder.getRootFolder(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,root,folder,of,authenticated,user,return,the,root,folder,of,authenticated,user;public,box,folder,get,root,folder,try,log,debug,getting,root,folder,return,box,folder,get,root,folder,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getRootFolder();1523968787;Return the root folder of authenticated user.__@return The root folder of authenticated user.;public BoxFolder getRootFolder() {_        try {_            LOG.debug("Getting root folder")__            return BoxFolder.getRootFolder(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,root,folder,of,authenticated,user,return,the,root,folder,of,authenticated,user;public,box,folder,get,root,folder,try,log,debug,getting,root,folder,return,box,folder,get,root,folder,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getRootFolder();1534005301;Return the root folder of authenticated user.__@return The root folder of authenticated user.;public BoxFolder getRootFolder() {_        try {_            LOG.debug("Getting root folder")__            return BoxFolder.getRootFolder(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,root,folder,of,authenticated,user,return,the,root,folder,of,authenticated,user;public,box,folder,get,root,folder,try,log,debug,getting,root,folder,return,box,folder,get,root,folder,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFoldersManager -> public BoxFolder getRootFolder();1536687142;Return the root folder of authenticated user.__@return The root folder of authenticated user.;public BoxFolder getRootFolder() {_        try {_            LOG.debug("Getting root folder")__            return BoxFolder.getRootFolder(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };return,the,root,folder,of,authenticated,user,return,the,root,folder,of,authenticated,user;public,box,folder,get,root,folder,try,log,debug,getting,root,folder,return,box,folder,get,root,folder,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
