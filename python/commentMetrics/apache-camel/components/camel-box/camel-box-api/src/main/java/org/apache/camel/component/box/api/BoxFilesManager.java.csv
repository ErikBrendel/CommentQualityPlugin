# id;timestamp;commentText;codeText;commentWords;codeWords
BoxFilesManager -> public Metadata updateFileMetadata(String fileId, Metadata metadata);1488797924;Update the file properties metadata.__@param fileId_- the id of file to delete._@param metadata_- the new metadata values._@return The metadata returned from the server.;public Metadata updateFileMetadata(String fileId, Metadata metadata) {_        try {_            LOG.debug("Updating metadata for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.updateMetadata(metadata)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete,param,metadata,the,new,metadata,values,return,the,metadata,returned,from,the,server;public,metadata,update,file,metadata,string,file,id,metadata,metadata,try,log,debug,updating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,update,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata updateFileMetadata(String fileId, Metadata metadata);1505897400;Update the file properties metadata.__@param fileId_- the id of file to delete._@param metadata_- the new metadata values._@return The metadata returned from the server.;public Metadata updateFileMetadata(String fileId, Metadata metadata) {_        try {_            LOG.debug("Updating metadata for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.updateMetadata(metadata)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete,param,metadata,the,new,metadata,values,return,the,metadata,returned,from,the,server;public,metadata,update,file,metadata,string,file,id,metadata,metadata,try,log,debug,updating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,update,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata updateFileMetadata(String fileId, Metadata metadata);1523968787;Update the file properties metadata.__@param fileId_- the id of file to delete._@param metadata_- the new metadata values._@return The metadata returned from the server.;public Metadata updateFileMetadata(String fileId, Metadata metadata) {_        try {_            LOG.debug("Updating metadata for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.updateMetadata(metadata)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete,param,metadata,the,new,metadata,values,return,the,metadata,returned,from,the,server;public,metadata,update,file,metadata,string,file,id,metadata,metadata,try,log,debug,updating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,update,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata updateFileMetadata(String fileId, Metadata metadata);1536687142;Update the file properties metadata.__@param fileId_- the id of file to delete._@param metadata_- the new metadata values._@return The metadata returned from the server.;public Metadata updateFileMetadata(String fileId, Metadata metadata) {_        try {_            LOG.debug("Updating metadata for file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.updateMetadata(metadata)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete,param,metadata,the,new,metadata,values,return,the,metadata,returned,from,the,server;public,metadata,update,file,metadata,string,file,id,metadata,metadata,try,log,debug,updating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,update,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile.Info getFileInfo(String fileId, String... fields);1488797924;Get file information.__@param fileId_- the id of file._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The file information.;public BoxFile.Info getFileInfo(String fileId, String... fields) {_        try {_            LOG.debug("Getting info for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (fields == null || fields.length == 0) {_                return file.getInfo()__            } else {_                return file.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,file,information,param,file,id,the,id,of,file,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,file,information;public,box,file,info,get,file,info,string,file,id,string,fields,try,log,debug,getting,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,fields,null,fields,length,0,return,file,get,info,else,return,file,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile.Info getFileInfo(String fileId, String... fields);1505897400;Get file information.__@param fileId_- the id of file._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The file information.;public BoxFile.Info getFileInfo(String fileId, String... fields) {_        try {_            LOG.debug("Getting info for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (fields == null || fields.length == 0) {_                return file.getInfo()__            } else {_                return file.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,file,information,param,file,id,the,id,of,file,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,file,information;public,box,file,info,get,file,info,string,file,id,string,fields,try,log,debug,getting,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,fields,null,fields,length,0,return,file,get,info,else,return,file,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile.Info getFileInfo(String fileId, String... fields);1523968787;Get file information.__@param fileId_- the id of file._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The file information.;public BoxFile.Info getFileInfo(String fileId, String... fields) {_        try {_            LOG.debug("Getting info for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (fields == null || fields.length == 0) {_                return file.getInfo()__            } else {_                return file.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,file,information,param,file,id,the,id,of,file,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,file,information;public,box,file,info,get,file,info,string,file,id,string,fields,try,log,debug,getting,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,fields,null,fields,length,0,return,file,get,info,else,return,file,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile.Info getFileInfo(String fileId, String... fields);1536687142;Get file information.__@param fileId_- the id of file._@param fields_- the information fields to retrieve_ if <code>null</code> all_information fields are retrieved._@return The file information.;public BoxFile.Info getFileInfo(String fileId, String... fields) {_        try {_            LOG.debug("Getting info for file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (fields == null || fields.length == 0) {_                return file.getInfo()__            } else {_                return file.getInfo(fields)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,file,information,param,file,id,the,id,of,file,param,fields,the,information,fields,to,retrieve,if,code,null,code,all,information,fields,are,retrieved,return,the,file,information;public,box,file,info,get,file,info,string,file,id,string,fields,try,log,debug,getting,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,fields,null,fields,length,0,return,file,get,info,else,return,file,get,info,fields,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,             Long size, ProgressListener listener);1488797924;Upload a new file to parent folder.__@param parentFolderId_- the id of parent folder._@param content_- a stream containing contents of the file to upload._@param fileName_the name to give the uploaded file._@param created_- the content created date that will be given to the uploaded_file._@param modified_- the content modified date that will be given to the uploaded_file._@param size_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,_            Long size, ProgressListener listener) {_        try {_            LOG.debug("Uploading file with name '" + fileName + "' to parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (content == null) {_                throw new IllegalArgumentException("Paramerer 'content' can not be null")__            }_            if (fileName == null) {_                throw new IllegalArgumentException("Paramerer 'fileName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)___            FileUploadParams uploadParams = new FileUploadParams()__            uploadParams.setName(fileName)__            uploadParams.setContent(content)__            if (created != null) {_                uploadParams.setCreated(created)__            }_            if (modified != null) {_                uploadParams.setModified(modified)__            }_            if (size != null) {_                uploadParams.setSize(size)__            }_            if (listener != null) {_                uploadParams.setProgressListener(listener)__            }__            return parentFolder.uploadFile(uploadParams).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,file,to,parent,folder,param,parent,folder,id,the,id,of,parent,folder,param,content,a,stream,containing,contents,of,the,file,to,upload,param,file,name,the,name,to,give,the,uploaded,file,param,created,the,content,created,date,that,will,be,given,to,the,uploaded,file,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,file,string,parent,folder,id,input,stream,content,string,file,name,date,created,date,modified,long,size,progress,listener,listener,try,log,debug,uploading,file,with,name,file,name,to,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,content,null,throw,new,illegal,argument,exception,paramerer,content,can,not,be,null,if,file,name,null,throw,new,illegal,argument,exception,paramerer,file,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,file,upload,params,upload,params,new,file,upload,params,upload,params,set,name,file,name,upload,params,set,content,content,if,created,null,upload,params,set,created,created,if,modified,null,upload,params,set,modified,modified,if,size,null,upload,params,set,size,size,if,listener,null,upload,params,set,progress,listener,listener,return,parent,folder,upload,file,upload,params,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,             Long size, ProgressListener listener);1505897400;Upload a new file to parent folder.__@param parentFolderId_- the id of parent folder._@param content_- a stream containing contents of the file to upload._@param fileName_the name to give the uploaded file._@param created_- the content created date that will be given to the uploaded_file._@param modified_- the content modified date that will be given to the uploaded_file._@param size_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,_            Long size, ProgressListener listener) {_        try {_            LOG.debug("Uploading file with name '" + fileName + "' to parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (content == null) {_                throw new IllegalArgumentException("Paramerer 'content' can not be null")__            }_            if (fileName == null) {_                throw new IllegalArgumentException("Paramerer 'fileName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)___            FileUploadParams uploadParams = new FileUploadParams()__            uploadParams.setName(fileName)__            uploadParams.setContent(content)__            if (created != null) {_                uploadParams.setCreated(created)__            }_            if (modified != null) {_                uploadParams.setModified(modified)__            }_            if (size != null) {_                uploadParams.setSize(size)__            }_            if (listener != null) {_                uploadParams.setProgressListener(listener)__            }__            return parentFolder.uploadFile(uploadParams).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,file,to,parent,folder,param,parent,folder,id,the,id,of,parent,folder,param,content,a,stream,containing,contents,of,the,file,to,upload,param,file,name,the,name,to,give,the,uploaded,file,param,created,the,content,created,date,that,will,be,given,to,the,uploaded,file,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,file,string,parent,folder,id,input,stream,content,string,file,name,date,created,date,modified,long,size,progress,listener,listener,try,log,debug,uploading,file,with,name,file,name,to,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,content,null,throw,new,illegal,argument,exception,paramerer,content,can,not,be,null,if,file,name,null,throw,new,illegal,argument,exception,paramerer,file,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,file,upload,params,upload,params,new,file,upload,params,upload,params,set,name,file,name,upload,params,set,content,content,if,created,null,upload,params,set,created,created,if,modified,null,upload,params,set,modified,modified,if,size,null,upload,params,set,size,size,if,listener,null,upload,params,set,progress,listener,listener,return,parent,folder,upload,file,upload,params,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,             Long size, ProgressListener listener);1523968787;Upload a new file to parent folder.__@param parentFolderId_- the id of parent folder._@param content_- a stream containing contents of the file to upload._@param fileName_the name to give the uploaded file._@param created_- the content created date that will be given to the uploaded_file._@param modified_- the content modified date that will be given to the uploaded_file._@param size_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,_            Long size, ProgressListener listener) {_        try {_            LOG.debug("Uploading file with name '" + fileName + "' to parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (content == null) {_                throw new IllegalArgumentException("Paramerer 'content' can not be null")__            }_            if (fileName == null) {_                throw new IllegalArgumentException("Paramerer 'fileName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)___            FileUploadParams uploadParams = new FileUploadParams()__            uploadParams.setName(fileName)__            uploadParams.setContent(content)__            if (created != null) {_                uploadParams.setCreated(created)__            }_            if (modified != null) {_                uploadParams.setModified(modified)__            }_            if (size != null) {_                uploadParams.setSize(size)__            }_            if (listener != null) {_                uploadParams.setProgressListener(listener)__            }__            return parentFolder.uploadFile(uploadParams).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,file,to,parent,folder,param,parent,folder,id,the,id,of,parent,folder,param,content,a,stream,containing,contents,of,the,file,to,upload,param,file,name,the,name,to,give,the,uploaded,file,param,created,the,content,created,date,that,will,be,given,to,the,uploaded,file,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,file,string,parent,folder,id,input,stream,content,string,file,name,date,created,date,modified,long,size,progress,listener,listener,try,log,debug,uploading,file,with,name,file,name,to,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,content,null,throw,new,illegal,argument,exception,paramerer,content,can,not,be,null,if,file,name,null,throw,new,illegal,argument,exception,paramerer,file,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,file,upload,params,upload,params,new,file,upload,params,upload,params,set,name,file,name,upload,params,set,content,content,if,created,null,upload,params,set,created,created,if,modified,null,upload,params,set,modified,modified,if,size,null,upload,params,set,size,size,if,listener,null,upload,params,set,progress,listener,listener,return,parent,folder,upload,file,upload,params,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,             Long size, ProgressListener listener);1536687142;Upload a new file to parent folder.__@param parentFolderId_- the id of parent folder._@param content_- a stream containing contents of the file to upload._@param fileName_the name to give the uploaded file._@param created_- the content created date that will be given to the uploaded_file._@param modified_- the content modified date that will be given to the uploaded_file._@param size_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadFile(String parentFolderId, InputStream content, String fileName, Date created, Date modified,_            Long size, ProgressListener listener) {_        try {_            LOG.debug("Uploading file with name '" + fileName + "' to parent_folder(id=" + parentFolderId + ")")__            if (parentFolderId == null) {_                throw new IllegalArgumentException("Parameter 'parentFolderId' can not be null")__            }_            if (content == null) {_                throw new IllegalArgumentException("Paramerer 'content' can not be null")__            }_            if (fileName == null) {_                throw new IllegalArgumentException("Paramerer 'fileName' can not be null")__            }_            BoxFolder parentFolder = new BoxFolder(boxConnection, parentFolderId)___            FileUploadParams uploadParams = new FileUploadParams()__            uploadParams.setName(fileName)__            uploadParams.setContent(content)__            if (created != null) {_                uploadParams.setCreated(created)__            }_            if (modified != null) {_                uploadParams.setModified(modified)__            }_            if (size != null) {_                uploadParams.setSize(size)__            }_            if (listener != null) {_                uploadParams.setProgressListener(listener)__            }__            return parentFolder.uploadFile(uploadParams).getResource()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,file,to,parent,folder,param,parent,folder,id,the,id,of,parent,folder,param,content,a,stream,containing,contents,of,the,file,to,upload,param,file,name,the,name,to,give,the,uploaded,file,param,created,the,content,created,date,that,will,be,given,to,the,uploaded,file,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,file,string,parent,folder,id,input,stream,content,string,file,name,date,created,date,modified,long,size,progress,listener,listener,try,log,debug,uploading,file,with,name,file,name,to,id,parent,folder,id,if,parent,folder,id,null,throw,new,illegal,argument,exception,parameter,parent,folder,id,can,not,be,null,if,content,null,throw,new,illegal,argument,exception,paramerer,content,can,not,be,null,if,file,name,null,throw,new,illegal,argument,exception,paramerer,file,name,can,not,be,null,box,folder,parent,folder,new,box,folder,box,connection,parent,folder,id,file,upload,params,upload,params,new,file,upload,params,upload,params,set,name,file,name,upload,params,set,content,content,if,created,null,upload,params,set,created,created,if,modified,null,upload,params,set,modified,modified,if,size,null,upload,params,set,size,size,if,listener,null,upload,params,set,progress,listener,listener,return,parent,folder,upload,file,upload,params,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,             ProgressListener listener);1488797924;Upload a new version of file.__@param fileId_- the id of file._@param fileContent_- a stream containing contents of the file to upload._@param modified_- the content modified date that will be given to the uploaded_file._@param fileSize_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,_            ProgressListener listener) {_        try {_            LOG.debug("Uploading new version of file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileContent == null) {_                throw new IllegalArgumentException("Paramerer 'fileContent' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (modified != null) {_                if (fileSize != null && listener != null) {_                    file.uploadVersion(fileContent, modified, fileSize, listener)__                } else {_                    file.uploadVersion(fileContent, modified)__                }_            } else {_                file.uploadVersion(fileContent)__            }__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,version,of,file,param,file,id,the,id,of,file,param,file,content,a,stream,containing,contents,of,the,file,to,upload,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,file,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,new,file,version,string,file,id,input,stream,file,content,date,modified,long,file,size,progress,listener,listener,try,log,debug,uploading,new,version,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,content,null,throw,new,illegal,argument,exception,paramerer,file,content,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,modified,null,if,file,size,null,listener,null,file,upload,version,file,content,modified,file,size,listener,else,file,upload,version,file,content,modified,else,file,upload,version,file,content,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,             ProgressListener listener);1505897400;Upload a new version of file.__@param fileId_- the id of file._@param fileContent_- a stream containing contents of the file to upload._@param modified_- the content modified date that will be given to the uploaded_file._@param fileSize_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,_            ProgressListener listener) {_        try {_            LOG.debug("Uploading new version of file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileContent == null) {_                throw new IllegalArgumentException("Paramerer 'fileContent' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (modified != null) {_                if (fileSize != null) {_                    file.uploadVersion(fileContent, modified, fileSize, listener)__                } else {_                    file.uploadVersion(fileContent, modified, 0, listener)__                }_            } else {_                file.uploadVersion(fileContent)__            }__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,version,of,file,param,file,id,the,id,of,file,param,file,content,a,stream,containing,contents,of,the,file,to,upload,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,file,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,new,file,version,string,file,id,input,stream,file,content,date,modified,long,file,size,progress,listener,listener,try,log,debug,uploading,new,version,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,content,null,throw,new,illegal,argument,exception,paramerer,file,content,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,modified,null,if,file,size,null,file,upload,version,file,content,modified,file,size,listener,else,file,upload,version,file,content,modified,0,listener,else,file,upload,version,file,content,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,             ProgressListener listener);1523968787;Upload a new version of file.__@param fileId_- the id of file._@param fileContent_- a stream containing contents of the file to upload._@param modified_- the content modified date that will be given to the uploaded_file._@param fileSize_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,_            ProgressListener listener) {_        try {_            LOG.debug("Uploading new version of file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileContent == null) {_                throw new IllegalArgumentException("Paramerer 'fileContent' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (modified != null) {_                if (fileSize != null) {_                    file.uploadVersion(fileContent, modified, fileSize, listener)__                } else {_                    file.uploadVersion(fileContent, modified, 0, listener)__                }_            } else {_                file.uploadVersion(fileContent)__            }__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,version,of,file,param,file,id,the,id,of,file,param,file,content,a,stream,containing,contents,of,the,file,to,upload,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,file,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,new,file,version,string,file,id,input,stream,file,content,date,modified,long,file,size,progress,listener,listener,try,log,debug,uploading,new,version,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,content,null,throw,new,illegal,argument,exception,paramerer,file,content,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,modified,null,if,file,size,null,file,upload,version,file,content,modified,file,size,listener,else,file,upload,version,file,content,modified,0,listener,else,file,upload,version,file,content,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,             ProgressListener listener);1536687142;Upload a new version of file.__@param fileId_- the id of file._@param fileContent_- a stream containing contents of the file to upload._@param modified_- the content modified date that will be given to the uploaded_file._@param fileSize_- the size of the file's content used for monitoring the_upload's progress._@param listener_- a listener for monitoring the upload's progress._@return The uploaded file.;public BoxFile uploadNewFileVersion(String fileId, InputStream fileContent, Date modified, Long fileSize,_            ProgressListener listener) {_        try {_            LOG.debug("Uploading new version of file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileContent == null) {_                throw new IllegalArgumentException("Paramerer 'fileContent' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (modified != null) {_                if (fileSize != null) {_                    file.uploadVersion(fileContent, modified, fileSize, listener)__                } else {_                    file.uploadVersion(fileContent, modified, 0, listener)__                }_            } else {_                file.uploadVersion(fileContent)__            }__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };upload,a,new,version,of,file,param,file,id,the,id,of,file,param,file,content,a,stream,containing,contents,of,the,file,to,upload,param,modified,the,content,modified,date,that,will,be,given,to,the,uploaded,file,param,file,size,the,size,of,the,file,s,content,used,for,monitoring,the,upload,s,progress,param,listener,a,listener,for,monitoring,the,upload,s,progress,return,the,uploaded,file;public,box,file,upload,new,file,version,string,file,id,input,stream,file,content,date,modified,long,file,size,progress,listener,listener,try,log,debug,uploading,new,version,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,content,null,throw,new,illegal,argument,exception,paramerer,file,content,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,modified,null,if,file,size,null,file,upload,version,file,content,modified,file,size,listener,else,file,upload,version,file,content,modified,0,listener,else,file,upload,version,file,content,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata getFileMetadata(String fileId, String typeName);1488797924;Gets the file properties metadata.__@param fileId_- the id of the file to retrieve metadata for._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata getFileMetadata(String fileId, String typeName) {_        try {_            LOG.debug("Get metadata for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.getMetadata(typeName)__            } else {_                return file.getMetadata()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }__    };gets,the,file,properties,metadata,param,file,id,the,id,of,the,file,to,retrieve,metadata,for,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,get,file,metadata,string,file,id,string,type,name,try,log,debug,get,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,get,metadata,type,name,else,return,file,get,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata getFileMetadata(String fileId, String typeName);1505897400;Gets the file properties metadata.__@param fileId_- the id of the file to retrieve metadata for._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata getFileMetadata(String fileId, String typeName) {_        try {_            LOG.debug("Get metadata for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.getMetadata(typeName)__            } else {_                return file.getMetadata()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }__    };gets,the,file,properties,metadata,param,file,id,the,id,of,the,file,to,retrieve,metadata,for,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,get,file,metadata,string,file,id,string,type,name,try,log,debug,get,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,get,metadata,type,name,else,return,file,get,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata getFileMetadata(String fileId, String typeName);1523968787;Gets the file properties metadata.__@param fileId_- the id of the file to retrieve metadata for._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata getFileMetadata(String fileId, String typeName) {_        try {_            LOG.debug("Get metadata for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.getMetadata(typeName)__            } else {_                return file.getMetadata()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }__    };gets,the,file,properties,metadata,param,file,id,the,id,of,the,file,to,retrieve,metadata,for,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,get,file,metadata,string,file,id,string,type,name,try,log,debug,get,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,get,metadata,type,name,else,return,file,get,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata getFileMetadata(String fileId, String typeName);1536687142;Gets the file properties metadata.__@param fileId_- the id of the file to retrieve metadata for._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata getFileMetadata(String fileId, String typeName) {_        try {_            LOG.debug("Get metadata for file(id={})", fileId)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.getMetadata(typeName)__            } else {_                return file.getMetadata()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }__    };gets,the,file,properties,metadata,param,file,id,the,id,of,the,file,to,retrieve,metadata,for,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,get,file,metadata,string,file,id,string,type,name,try,log,debug,get,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,get,metadata,type,name,else,return,file,get,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFile(String fileId);1488797924;Delete the file.__@param fileId_- the id of file to delete.;public void deleteFile(String fileId) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,param,file,id,the,id,of,file,to,delete;public,void,delete,file,string,file,id,try,log,debug,deleting,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFile(String fileId);1505897400;Delete the file.__@param fileId_- the id of file to delete.;public void deleteFile(String fileId) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,param,file,id,the,id,of,file,to,delete;public,void,delete,file,string,file,id,try,log,debug,deleting,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFile(String fileId);1523968787;Delete the file.__@param fileId_- the id of file to delete.;public void deleteFile(String fileId) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,param,file,id,the,id,of,file,to,delete;public,void,delete,file,string,file,id,try,log,debug,deleting,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFile(String fileId);1536687142;Delete the file.__@param fileId_- the id of file to delete.;public void deleteFile(String fileId) {_        try {_            LOG.debug("Deleting file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,param,file,id,the,id,of,file,to,delete;public,void,delete,file,string,file,id,try,log,debug,deleting,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile updateFileInfo(String fileId, BoxFile.Info info);1488797924;Update file information.__@param fileId_- the id of file to update._@param info_- the updated information_@return The updated file.;public BoxFile updateFileInfo(String fileId, BoxFile.Info info) {_        try {_            LOG.debug("Updating info for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.updateInfo(info)__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,file,information,param,file,id,the,id,of,file,to,update,param,info,the,updated,information,return,the,updated,file;public,box,file,update,file,info,string,file,id,box,file,info,info,try,log,debug,updating,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,update,info,info,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile updateFileInfo(String fileId, BoxFile.Info info);1505897400;Update file information.__@param fileId_- the id of file to update._@param info_- the updated information_@return The updated file.;public BoxFile updateFileInfo(String fileId, BoxFile.Info info) {_        try {_            LOG.debug("Updating info for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.updateInfo(info)__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,file,information,param,file,id,the,id,of,file,to,update,param,info,the,updated,information,return,the,updated,file;public,box,file,update,file,info,string,file,id,box,file,info,info,try,log,debug,updating,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,update,info,info,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile updateFileInfo(String fileId, BoxFile.Info info);1523968787;Update file information.__@param fileId_- the id of file to update._@param info_- the updated information_@return The updated file.;public BoxFile updateFileInfo(String fileId, BoxFile.Info info) {_        try {_            LOG.debug("Updating info for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.updateInfo(info)__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,file,information,param,file,id,the,id,of,file,to,update,param,info,the,updated,information,return,the,updated,file;public,box,file,update,file,info,string,file,id,box,file,info,info,try,log,debug,updating,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,update,info,info,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile updateFileInfo(String fileId, BoxFile.Info info);1536687142;Update file information.__@param fileId_- the id of file to update._@param info_- the updated information_@return The updated file.;public BoxFile updateFileInfo(String fileId, BoxFile.Info info) {_        try {_            LOG.debug("Updating info for file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.updateInfo(info)__            return file__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,file,information,param,file,id,the,id,of,file,to,update,param,info,the,updated,information,return,the,updated,file;public,box,file,update,file,info,string,file,id,box,file,info,info,try,log,debug,updating,info,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,update,info,info,return,file,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,             ProgressListener listener);1488797924;Download a file.__@param fileId_- the id of file._@param output_- the stream to which the file contents will be written._@param rangeStart_- the byte offset in file at which to start the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param rangeEnd_- the byte offset in file at which to stop the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file.;public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            if (listener != null) {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd, listener)__                } else {_                    file.download(output, listener)__                }_            } else {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd)__                } else {_                    file.download(output)__                }_            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,file,param,file,id,the,id,of,file,param,output,the,stream,to,which,the,file,contents,will,be,written,param,range,start,the,byte,offset,in,file,at,which,to,start,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,range,end,the,byte,offset,in,file,at,which,to,stop,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file;public,output,stream,download,file,string,file,id,output,stream,output,long,range,start,long,range,end,progress,listener,listener,try,log,debug,downloading,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,listener,null,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,listener,else,file,download,output,listener,else,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,else,file,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,             ProgressListener listener);1505897400;Download a file.__@param fileId_- the id of file._@param output_- the stream to which the file contents will be written._@param rangeStart_- the byte offset in file at which to start the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param rangeEnd_- the byte offset in file at which to stop the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file.;public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            if (listener != null) {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd, listener)__                } else {_                    file.download(output, listener)__                }_            } else {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd)__                } else {_                    file.download(output)__                }_            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,file,param,file,id,the,id,of,file,param,output,the,stream,to,which,the,file,contents,will,be,written,param,range,start,the,byte,offset,in,file,at,which,to,start,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,range,end,the,byte,offset,in,file,at,which,to,stop,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file;public,output,stream,download,file,string,file,id,output,stream,output,long,range,start,long,range,end,progress,listener,listener,try,log,debug,downloading,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,listener,null,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,listener,else,file,download,output,listener,else,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,else,file,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,             ProgressListener listener);1523968787;Download a file.__@param fileId_- the id of file._@param output_- the stream to which the file contents will be written._@param rangeStart_- the byte offset in file at which to start the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param rangeEnd_- the byte offset in file at which to stop the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file.;public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            if (listener != null) {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd, listener)__                } else {_                    file.download(output, listener)__                }_            } else {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd)__                } else {_                    file.download(output)__                }_            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,file,param,file,id,the,id,of,file,param,output,the,stream,to,which,the,file,contents,will,be,written,param,range,start,the,byte,offset,in,file,at,which,to,start,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,range,end,the,byte,offset,in,file,at,which,to,stop,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file;public,output,stream,download,file,string,file,id,output,stream,output,long,range,start,long,range,end,progress,listener,listener,try,log,debug,downloading,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,listener,null,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,listener,else,file,download,output,listener,else,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,else,file,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,             ProgressListener listener);1536687142;Download a file.__@param fileId_- the id of file._@param output_- the stream to which the file contents will be written._@param rangeStart_- the byte offset in file at which to start the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param rangeEnd_- the byte offset in file at which to stop the download_ if_<code>null</code> the entire contents of file will be_downloaded._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file.;public OutputStream downloadFile(String fileId, OutputStream output, Long rangeStart, Long rangeEnd,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            if (listener != null) {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd, listener)__                } else {_                    file.download(output, listener)__                }_            } else {_                if (rangeStart != null && rangeEnd != null) {_                    file.downloadRange(output, rangeStart, rangeEnd)__                } else {_                    file.download(output)__                }_            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,file,param,file,id,the,id,of,file,param,output,the,stream,to,which,the,file,contents,will,be,written,param,range,start,the,byte,offset,in,file,at,which,to,start,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,range,end,the,byte,offset,in,file,at,which,to,stop,the,download,if,code,null,code,the,entire,contents,of,file,will,be,downloaded,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file;public,output,stream,download,file,string,file,id,output,stream,output,long,range,start,long,range,end,progress,listener,listener,try,log,debug,downloading,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,listener,null,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,listener,else,file,download,output,listener,else,if,range,start,null,range,end,null,file,download,range,output,range,start,range,end,else,file,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,             Integer minHeight, Integer maxWidth, Integer maxHeight);1488797924;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@param fileType_- either PNG of JPG._@param minWidth_- minimum width._@param minHeight_- minimum height._@param maxWidth_- maximum width._@param maxHeight_- maximum height._@return The byte array of the thumbnail image.;public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,_            Integer minHeight, Integer maxWidth, Integer maxHeight) {_        try {_            LOG.debug("Getting thumbnail for file(id=" + fileId + ") fileType=" + fileType + " minWidth=" + minWidth_                    + " minHeight=" + minHeight + " maxWidth=" + maxWidth + " maxHeight=" + maxHeight)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileType == null) {_                throw new IllegalArgumentException("Parameter 'fileType' can not be null")__            }_            if (minWidth == null) {_                throw new IllegalArgumentException("Parameter 'minWidth' can not be null")__            }_            if (minHeight == null) {_                throw new IllegalArgumentException("Parameter 'minHeight' can not be null")__            }_            if (maxWidth == null) {_                throw new IllegalArgumentException("Parameter 'maxWidth' can not be null")__            }_            if (maxHeight == null) {_                throw new IllegalArgumentException("Parameter 'maxHeight' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getThumbnail(fileType, minWidth, minHeight, maxWidth, maxHeight)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,param,file,type,either,png,of,jpg,param,min,width,minimum,width,param,min,height,minimum,height,param,max,width,maximum,width,param,max,height,maximum,height,return,the,byte,array,of,the,thumbnail,image;public,byte,get,file,thumbnail,string,file,id,box,file,thumbnail,file,type,file,type,integer,min,width,integer,min,height,integer,max,width,integer,max,height,try,log,debug,getting,thumbnail,for,file,id,file,id,file,type,file,type,min,width,min,width,min,height,min,height,max,width,max,width,max,height,max,height,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,type,null,throw,new,illegal,argument,exception,parameter,file,type,can,not,be,null,if,min,width,null,throw,new,illegal,argument,exception,parameter,min,width,can,not,be,null,if,min,height,null,throw,new,illegal,argument,exception,parameter,min,height,can,not,be,null,if,max,width,null,throw,new,illegal,argument,exception,parameter,max,width,can,not,be,null,if,max,height,null,throw,new,illegal,argument,exception,parameter,max,height,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,thumbnail,file,type,min,width,min,height,max,width,max,height,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,             Integer minHeight, Integer maxWidth, Integer maxHeight);1505897400;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@param fileType_- either PNG of JPG._@param minWidth_- minimum width._@param minHeight_- minimum height._@param maxWidth_- maximum width._@param maxHeight_- maximum height._@return The byte array of the thumbnail image.;public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,_            Integer minHeight, Integer maxWidth, Integer maxHeight) {_        try {_            LOG.debug("Getting thumbnail for file(id=" + fileId + ") fileType=" + fileType + " minWidth=" + minWidth_                    + " minHeight=" + minHeight + " maxWidth=" + maxWidth + " maxHeight=" + maxHeight)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileType == null) {_                throw new IllegalArgumentException("Parameter 'fileType' can not be null")__            }_            if (minWidth == null) {_                throw new IllegalArgumentException("Parameter 'minWidth' can not be null")__            }_            if (minHeight == null) {_                throw new IllegalArgumentException("Parameter 'minHeight' can not be null")__            }_            if (maxWidth == null) {_                throw new IllegalArgumentException("Parameter 'maxWidth' can not be null")__            }_            if (maxHeight == null) {_                throw new IllegalArgumentException("Parameter 'maxHeight' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getThumbnail(fileType, minWidth, minHeight, maxWidth, maxHeight)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,param,file,type,either,png,of,jpg,param,min,width,minimum,width,param,min,height,minimum,height,param,max,width,maximum,width,param,max,height,maximum,height,return,the,byte,array,of,the,thumbnail,image;public,byte,get,file,thumbnail,string,file,id,box,file,thumbnail,file,type,file,type,integer,min,width,integer,min,height,integer,max,width,integer,max,height,try,log,debug,getting,thumbnail,for,file,id,file,id,file,type,file,type,min,width,min,width,min,height,min,height,max,width,max,width,max,height,max,height,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,type,null,throw,new,illegal,argument,exception,parameter,file,type,can,not,be,null,if,min,width,null,throw,new,illegal,argument,exception,parameter,min,width,can,not,be,null,if,min,height,null,throw,new,illegal,argument,exception,parameter,min,height,can,not,be,null,if,max,width,null,throw,new,illegal,argument,exception,parameter,max,width,can,not,be,null,if,max,height,null,throw,new,illegal,argument,exception,parameter,max,height,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,thumbnail,file,type,min,width,min,height,max,width,max,height,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,             Integer minHeight, Integer maxWidth, Integer maxHeight);1523968787;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@param fileType_- either PNG of JPG._@param minWidth_- minimum width._@param minHeight_- minimum height._@param maxWidth_- maximum width._@param maxHeight_- maximum height._@return The byte array of the thumbnail image.;public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,_            Integer minHeight, Integer maxWidth, Integer maxHeight) {_        try {_            LOG.debug("Getting thumbnail for file(id=" + fileId + ") fileType=" + fileType + " minWidth=" + minWidth_                    + " minHeight=" + minHeight + " maxWidth=" + maxWidth + " maxHeight=" + maxHeight)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileType == null) {_                throw new IllegalArgumentException("Parameter 'fileType' can not be null")__            }_            if (minWidth == null) {_                throw new IllegalArgumentException("Parameter 'minWidth' can not be null")__            }_            if (minHeight == null) {_                throw new IllegalArgumentException("Parameter 'minHeight' can not be null")__            }_            if (maxWidth == null) {_                throw new IllegalArgumentException("Parameter 'maxWidth' can not be null")__            }_            if (maxHeight == null) {_                throw new IllegalArgumentException("Parameter 'maxHeight' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getThumbnail(fileType, minWidth, minHeight, maxWidth, maxHeight)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,param,file,type,either,png,of,jpg,param,min,width,minimum,width,param,min,height,minimum,height,param,max,width,maximum,width,param,max,height,maximum,height,return,the,byte,array,of,the,thumbnail,image;public,byte,get,file,thumbnail,string,file,id,box,file,thumbnail,file,type,file,type,integer,min,width,integer,min,height,integer,max,width,integer,max,height,try,log,debug,getting,thumbnail,for,file,id,file,id,file,type,file,type,min,width,min,width,min,height,min,height,max,width,max,width,max,height,max,height,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,type,null,throw,new,illegal,argument,exception,parameter,file,type,can,not,be,null,if,min,width,null,throw,new,illegal,argument,exception,parameter,min,width,can,not,be,null,if,min,height,null,throw,new,illegal,argument,exception,parameter,min,height,can,not,be,null,if,max,width,null,throw,new,illegal,argument,exception,parameter,max,width,can,not,be,null,if,max,height,null,throw,new,illegal,argument,exception,parameter,max,height,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,thumbnail,file,type,min,width,min,height,max,width,max,height,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,             Integer minHeight, Integer maxWidth, Integer maxHeight);1536687142;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@param fileType_- either PNG of JPG._@param minWidth_- minimum width._@param minHeight_- minimum height._@param maxWidth_- maximum width._@param maxHeight_- maximum height._@return The byte array of the thumbnail image.;public byte[] getFileThumbnail(String fileId, BoxFile.ThumbnailFileType fileType, Integer minWidth,_            Integer minHeight, Integer maxWidth, Integer maxHeight) {_        try {_            LOG.debug("Getting thumbnail for file(id=" + fileId + ") fileType=" + fileType + " minWidth=" + minWidth_                    + " minHeight=" + minHeight + " maxWidth=" + maxWidth + " maxHeight=" + maxHeight)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (fileType == null) {_                throw new IllegalArgumentException("Parameter 'fileType' can not be null")__            }_            if (minWidth == null) {_                throw new IllegalArgumentException("Parameter 'minWidth' can not be null")__            }_            if (minHeight == null) {_                throw new IllegalArgumentException("Parameter 'minHeight' can not be null")__            }_            if (maxWidth == null) {_                throw new IllegalArgumentException("Parameter 'maxWidth' can not be null")__            }_            if (maxHeight == null) {_                throw new IllegalArgumentException("Parameter 'maxHeight' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getThumbnail(fileType, minWidth, minHeight, maxWidth, maxHeight)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,param,file,type,either,png,of,jpg,param,min,width,minimum,width,param,min,height,minimum,height,param,max,width,maximum,width,param,max,height,maximum,height,return,the,byte,array,of,the,thumbnail,image;public,byte,get,file,thumbnail,string,file,id,box,file,thumbnail,file,type,file,type,integer,min,width,integer,min,height,integer,max,width,integer,max,height,try,log,debug,getting,thumbnail,for,file,id,file,id,file,type,file,type,min,width,min,width,min,height,min,height,max,width,max,width,max,height,max,height,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,file,type,null,throw,new,illegal,argument,exception,parameter,file,type,can,not,be,null,if,min,width,null,throw,new,illegal,argument,exception,parameter,min,width,can,not,be,null,if,min,height,null,throw,new,illegal,argument,exception,parameter,min,height,can,not,be,null,if,max,width,null,throw,new,illegal,argument,exception,parameter,max,width,can,not,be,null,if,max,height,null,throw,new,illegal,argument,exception,parameter,max,height,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,thumbnail,file,type,min,width,min,height,max,width,max,height,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Collection<BoxFileVersion> getFileVersions(String fileId);1488797924;Get any previous versions of file.__@param fileId_- the id of file._@return The list of previous file versions.;public Collection<BoxFileVersion> getFileVersions(String fileId) {_        try {_            LOG.debug("Getting versions of file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getVersions()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,previous,versions,of,file,param,file,id,the,id,of,file,return,the,list,of,previous,file,versions;public,collection,box,file,version,get,file,versions,string,file,id,try,log,debug,getting,versions,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,versions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Collection<BoxFileVersion> getFileVersions(String fileId);1505897400;Get any previous versions of file.__@param fileId_- the id of file._@return The list of previous file versions.;public Collection<BoxFileVersion> getFileVersions(String fileId) {_        try {_            LOG.debug("Getting versions of file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getVersions()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,previous,versions,of,file,param,file,id,the,id,of,file,return,the,list,of,previous,file,versions;public,collection,box,file,version,get,file,versions,string,file,id,try,log,debug,getting,versions,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,versions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Collection<BoxFileVersion> getFileVersions(String fileId);1523968787;Get any previous versions of file.__@param fileId_- the id of file._@return The list of previous file versions.;public Collection<BoxFileVersion> getFileVersions(String fileId) {_        try {_            LOG.debug("Getting versions of file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getVersions()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,previous,versions,of,file,param,file,id,the,id,of,file,return,the,list,of,previous,file,versions;public,collection,box,file,version,get,file,versions,string,file,id,try,log,debug,getting,versions,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,versions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Collection<BoxFileVersion> getFileVersions(String fileId);1536687142;Get any previous versions of file.__@param fileId_- the id of file._@return The list of previous file versions.;public Collection<BoxFileVersion> getFileVersions(String fileId) {_        try {_            LOG.debug("Getting versions of file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getVersions()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,previous,versions,of,file,param,file,id,the,id,of,file,return,the,list,of,previous,file,versions;public,collection,box,file,version,get,file,versions,string,file,id,try,log,debug,getting,versions,of,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,versions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileVersion(String fileId, Integer version);1488797924;Delete a file version.__@param fileId_- the id of file with version to delete._@param version_- the version of file to delete_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on.;public void deleteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            List<BoxFileVersion> versions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = versions.get(version)___            fileVersion.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,a,file,version,param,file,id,the,id,of,file,with,version,to,delete,param,version,the,version,of,file,to,delete,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on;public,void,delete,file,version,string,file,id,integer,version,try,log,debug,deleting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,versions,list,box,file,version,file,get,versions,box,file,version,file,version,versions,get,version,file,version,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileVersion(String fileId, Integer version);1505897400;Delete a file version.__@param fileId_- the id of file with version to delete._@param version_- the version of file to delete_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on.;public void deleteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            List<BoxFileVersion> versions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = versions.get(version)___            fileVersion.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,a,file,version,param,file,id,the,id,of,file,with,version,to,delete,param,version,the,version,of,file,to,delete,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on;public,void,delete,file,version,string,file,id,integer,version,try,log,debug,deleting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,versions,list,box,file,version,file,get,versions,box,file,version,file,version,versions,get,version,file,version,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileVersion(String fileId, Integer version);1523968787;Delete a file version.__@param fileId_- the id of file with version to delete._@param version_- the version of file to delete_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on.;public void deleteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            List<BoxFileVersion> versions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = versions.get(version)___            fileVersion.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,a,file,version,param,file,id,the,id,of,file,with,version,to,delete,param,version,the,version,of,file,to,delete,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on;public,void,delete,file,version,string,file,id,integer,version,try,log,debug,deleting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,versions,list,box,file,version,file,get,versions,box,file,version,file,version,versions,get,version,file,version,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileVersion(String fileId, Integer version);1536687142;Delete a file version.__@param fileId_- the id of file with version to delete._@param version_- the version of file to delete_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on.;public void deleteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Deleting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            List<BoxFileVersion> versions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = versions.get(version)___            fileVersion.delete()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,a,file,version,param,file,id,the,id,of,file,with,version,to,delete,param,version,the,version,of,file,to,delete,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on;public,void,delete,file,version,string,file,id,integer,version,try,log,debug,deleting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,versions,list,box,file,version,file,get,versions,box,file,version,file,version,versions,get,version,file,version,delete,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1488797924;Create a shared link to file.__@param fileId_- the id of the file to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for file(id=" + fileId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + SimpleDateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,file,param,file,id,the,id,of,the,file,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,file,shared,link,string,file,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,file,id,file,id,with,access,access,unshare,date,null,unshared,date,simple,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1505897400;Create a shared link to file.__@param fileId_- the id of the file to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for file(id=" + fileId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + SimpleDateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,file,param,file,id,the,id,of,the,file,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,file,shared,link,string,file,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,file,id,file,id,with,access,access,unshare,date,null,unshared,date,simple,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1523968787;Create a shared link to file.__@param fileId_- the id of the file to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for file(id=" + fileId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + DateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,file,param,file,id,the,id,of,the,file,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,file,shared,link,string,file,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,file,id,file,id,with,access,access,unshare,date,null,unshared,date,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,             BoxSharedLink.Permissions permissions);1536687142;Create a shared link to file.__@param fileId_- the id of the file to create shared link on._@param access_- the access level of the shared link._@param unshareDate_- the date and time at which time the created shared link will_expire_ if <code>unsharedDate</code> is <code>null</code> then_a non-expiring link is created._@param permissions_- the permissions of the created link_ if_<code>permissions</code> is <code>null</code> then the created_shared link is create with default permissions._@return The created shared link.;public BoxSharedLink createFileSharedLink(String fileId, BoxSharedLink.Access access, Date unshareDate,_            BoxSharedLink.Permissions permissions) {_        try {_            LOG.debug("Creating shared link for file(id=" + fileId + ") with access=" + access_                    + (unshareDate == null ? ""_                            : " unsharedDate=" + DateFormat.getDateTimeInstance().format(unshareDate)_                                    + " permissions=" + permissions))___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (access == null) {_                throw new IllegalArgumentException("Parameter 'access' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.createSharedLink(access, unshareDate, permissions)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,a,shared,link,to,file,param,file,id,the,id,of,the,file,to,create,shared,link,on,param,access,the,access,level,of,the,shared,link,param,unshare,date,the,date,and,time,at,which,time,the,created,shared,link,will,expire,if,code,unshared,date,code,is,code,null,code,then,a,non,expiring,link,is,created,param,permissions,the,permissions,of,the,created,link,if,code,permissions,code,is,code,null,code,then,the,created,shared,link,is,create,with,default,permissions,return,the,created,shared,link;public,box,shared,link,create,file,shared,link,string,file,id,box,shared,link,access,access,date,unshare,date,box,shared,link,permissions,permissions,try,log,debug,creating,shared,link,for,file,id,file,id,with,access,access,unshare,date,null,unshared,date,date,format,get,date,time,instance,format,unshare,date,permissions,permissions,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,access,null,throw,new,illegal,argument,exception,parameter,access,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,create,shared,link,access,unshare,date,permissions,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFileVersion promoteFileVersion(String fileId, Integer version);1488797924;Promote a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to promote_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@return The promoted version of file.;public BoxFileVersion promoteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Promoting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            fileVersion.promote()__            return fileVersion__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };promote,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,promote,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,return,the,promoted,version,of,file;public,box,file,version,promote,file,version,string,file,id,integer,version,try,log,debug,promoting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,file,version,promote,return,file,version,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFileVersion promoteFileVersion(String fileId, Integer version);1505897400;Promote a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to promote_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@return The promoted version of file.;public BoxFileVersion promoteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Promoting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            fileVersion.promote()__            return fileVersion__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };promote,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,promote,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,return,the,promoted,version,of,file;public,box,file,version,promote,file,version,string,file,id,integer,version,try,log,debug,promoting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,file,version,promote,return,file,version,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFileVersion promoteFileVersion(String fileId, Integer version);1523968787;Promote a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to promote_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@return The promoted version of file.;public BoxFileVersion promoteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Promoting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            fileVersion.promote()__            return fileVersion__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };promote,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,promote,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,return,the,promoted,version,of,file;public,box,file,version,promote,file,version,string,file,id,integer,version,try,log,debug,promoting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,file,version,promote,return,file,version,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFileVersion promoteFileVersion(String fileId, Integer version);1536687142;Promote a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to promote_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@return The promoted version of file.;public BoxFileVersion promoteFileVersion(String fileId, Integer version) {_        try {_            LOG.debug("Promoting file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            fileVersion.promote()__            return fileVersion__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };promote,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,promote,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,return,the,promoted,version,of,file;public,box,file,version,promote,file,version,string,file,id,integer,version,try,log,debug,promoting,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,file,version,promote,return,file,version,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName);1488797924;Create metadata for file in either the global properties template or the_specified template type.__@param fileId_- the id of the file to create metadata for._@param metadata_- the new metadata values._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName) {_        try {_            LOG.debug("Creating metadata for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.createMetadata(typeName, metadata)__            } else {_                return file.createMetadata(metadata)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,metadata,for,file,in,either,the,global,properties,template,or,the,specified,template,type,param,file,id,the,id,of,the,file,to,create,metadata,for,param,metadata,the,new,metadata,values,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,create,file,metadata,string,file,id,metadata,metadata,string,type,name,try,log,debug,creating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,create,metadata,type,name,metadata,else,return,file,create,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName);1505897400;Create metadata for file in either the global properties template or the_specified template type.__@param fileId_- the id of the file to create metadata for._@param metadata_- the new metadata values._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName) {_        try {_            LOG.debug("Creating metadata for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.createMetadata(typeName, metadata)__            } else {_                return file.createMetadata(metadata)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,metadata,for,file,in,either,the,global,properties,template,or,the,specified,template,type,param,file,id,the,id,of,the,file,to,create,metadata,for,param,metadata,the,new,metadata,values,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,create,file,metadata,string,file,id,metadata,metadata,string,type,name,try,log,debug,creating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,create,metadata,type,name,metadata,else,return,file,create,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName);1523968787;Create metadata for file in either the global properties template or the_specified template type.__@param fileId_- the id of the file to create metadata for._@param metadata_- the new metadata values._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName) {_        try {_            LOG.debug("Creating metadata for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.createMetadata(typeName, metadata)__            } else {_                return file.createMetadata(metadata)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,metadata,for,file,in,either,the,global,properties,template,or,the,specified,template,type,param,file,id,the,id,of,the,file,to,create,metadata,for,param,metadata,the,new,metadata,values,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,create,file,metadata,string,file,id,metadata,metadata,string,type,name,try,log,debug,creating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,create,metadata,type,name,metadata,else,return,file,create,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName);1536687142;Create metadata for file in either the global properties template or the_specified template type.__@param fileId_- the id of the file to create metadata for._@param metadata_- the new metadata values._@param typeName_- the metadata template type name_ if <code>null</code> the_global properties template type is used._@return The metadata returned from the server.;public Metadata createFileMetadata(String fileId, Metadata metadata, String typeName) {_        try {_            LOG.debug("Creating metadata for file(id={})", fileId)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (metadata == null) {_                throw new IllegalArgumentException("Parameter 'metadata' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            if (typeName != null) {_                return file.createMetadata(typeName, metadata)__            } else {_                return file.createMetadata(metadata)__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };create,metadata,for,file,in,either,the,global,properties,template,or,the,specified,template,type,param,file,id,the,id,of,the,file,to,create,metadata,for,param,metadata,the,new,metadata,values,param,type,name,the,metadata,template,type,name,if,code,null,code,the,global,properties,template,type,is,used,return,the,metadata,returned,from,the,server;public,metadata,create,file,metadata,string,file,id,metadata,metadata,string,type,name,try,log,debug,creating,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,metadata,null,throw,new,illegal,argument,exception,parameter,metadata,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,if,type,name,null,return,file,create,metadata,type,name,metadata,else,return,file,create,metadata,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getFilePreviewLink(String fileId);1488797924;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@return The preview link.;public URL getFilePreviewLink(String fileId) {_        try {_            LOG.debug("Getting preview link for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getPreviewLink()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,return,the,preview,link;public,url,get,file,preview,link,string,file,id,try,log,debug,getting,preview,link,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,preview,link,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getFilePreviewLink(String fileId);1505897400;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@return The preview link.;public URL getFilePreviewLink(String fileId) {_        try {_            LOG.debug("Getting preview link for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getPreviewLink()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,return,the,preview,link;public,url,get,file,preview,link,string,file,id,try,log,debug,getting,preview,link,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,preview,link,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getFilePreviewLink(String fileId);1523968787;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@return The preview link.;public URL getFilePreviewLink(String fileId) {_        try {_            LOG.debug("Getting preview link for file(id=" + fileId + ")")___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getPreviewLink()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,return,the,preview,link;public,url,get,file,preview,link,string,file,id,try,log,debug,getting,preview,link,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,preview,link,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getFilePreviewLink(String fileId);1536687142;Get an expiring URL for creating an embedded preview session. The URL_will expire after 60 seconds and the preview session will expire after 60_minutes.__@param fileId_- the id of the file to get preview link on._@return The preview link.;public URL getFilePreviewLink(String fileId) {_        try {_            LOG.debug("Getting preview link for file(id={})", fileId)___            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)__            return file.getPreviewLink()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,creating,an,embedded,preview,session,the,url,will,expire,after,60,seconds,and,the,preview,session,will,expire,after,60,minutes,param,file,id,the,id,of,the,file,to,get,preview,link,on,return,the,preview,link;public,url,get,file,preview,link,string,file,id,try,log,debug,getting,preview,link,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,preview,link,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileMetadata(String fileId);1488797924;Delete the file properties metadata.__@param fileId_- the id of file to delete.;public void deleteFileMetadata(String fileId) {_        try {_            LOG.debug("Deleting metadata for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.deleteMetadata()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete;public,void,delete,file,metadata,string,file,id,try,log,debug,deleting,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileMetadata(String fileId);1505897400;Delete the file properties metadata.__@param fileId_- the id of file to delete.;public void deleteFileMetadata(String fileId) {_        try {_            LOG.debug("Deleting metadata for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.deleteMetadata()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete;public,void,delete,file,metadata,string,file,id,try,log,debug,deleting,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileMetadata(String fileId);1523968787;Delete the file properties metadata.__@param fileId_- the id of file to delete.;public void deleteFileMetadata(String fileId) {_        try {_            LOG.debug("Deleting metadata for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.deleteMetadata()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete;public,void,delete,file,metadata,string,file,id,try,log,debug,deleting,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public void deleteFileMetadata(String fileId);1536687142;Delete the file properties metadata.__@param fileId_- the id of file to delete.;public void deleteFileMetadata(String fileId) {_        try {_            LOG.debug("Deleting metadata for file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)__            file.deleteMetadata()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,the,file,properties,metadata,param,file,id,the,id,of,file,to,delete;public,void,delete,file,metadata,string,file,id,try,log,debug,deleting,metadata,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,file,delete,metadata,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile moveFile(String fileId, String destinationFolderId, String newName);1488797924;Move file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved file_ if <code>newName</code> is_<code>null</code>, the moved file has same name as the_original._@return The moved file.;public BoxFile moveFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToMove = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFile) fileToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFile) fileToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,file,if,code,new,name,code,is,code,null,code,the,moved,file,has,same,name,as,the,original,return,the,moved,file;public,box,file,move,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,moving,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,move,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,file,file,to,move,move,destination,folder,get,resource,else,return,box,file,file,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile moveFile(String fileId, String destinationFolderId, String newName);1505897400;Move file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved file_ if <code>newName</code> is_<code>null</code>, the moved file has same name as the_original._@return The moved file.;public BoxFile moveFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToMove = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFile) fileToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFile) fileToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,file,if,code,new,name,code,is,code,null,code,the,moved,file,has,same,name,as,the,original,return,the,moved,file;public,box,file,move,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,moving,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,move,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,file,file,to,move,move,destination,folder,get,resource,else,return,box,file,file,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile moveFile(String fileId, String destinationFolderId, String newName);1523968787;Move file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved file_ if <code>newName</code> is_<code>null</code>, the moved file has same name as the_original._@return The moved file.;public BoxFile moveFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToMove = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFile) fileToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFile) fileToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,file,if,code,new,name,code,is,code,null,code,the,moved,file,has,same,name,as,the,original,return,the,moved,file;public,box,file,move,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,moving,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,move,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,file,file,to,move,move,destination,folder,get,resource,else,return,box,file,file,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile moveFile(String fileId, String destinationFolderId, String newName);1536687142;Move file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to move._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name of moved file_ if <code>newName</code> is_<code>null</code>, the moved file has same name as the_original._@return The moved file.;public BoxFile moveFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Moving file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToMove = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return (BoxFile) fileToMove.move(destinationFolder).getResource()__            } else {_                return (BoxFile) fileToMove.move(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,move,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,of,moved,file,if,code,new,name,code,is,code,null,code,the,moved,file,has,same,name,as,the,original,return,the,moved,file;public,box,file,move,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,moving,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,move,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,box,file,file,to,move,move,destination,folder,get,resource,else,return,box,file,file,to,move,move,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFilesManager(BoxAPIConnection boxConnection);1488797924;Create files manager to manage the files of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFilesManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,files,manager,to,manage,the,files,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,files,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFilesManager -> public BoxFilesManager(BoxAPIConnection boxConnection);1505897400;Create files manager to manage the files of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFilesManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,files,manager,to,manage,the,files,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,files,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFilesManager -> public BoxFilesManager(BoxAPIConnection boxConnection);1523968787;Create files manager to manage the files of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFilesManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,files,manager,to,manage,the,files,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,files,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFilesManager -> public BoxFilesManager(BoxAPIConnection boxConnection);1536687142;Create files manager to manage the files of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxFilesManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,files,manager,to,manage,the,files,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,files,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxFilesManager -> public BoxFile copyFile(String fileId, String destinationFolderId, String newName);1488797924;Copy file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied file_ if <code>newName</code> is_<code>null</code>, the copied file has same name as the_original._@return The copied file.;public BoxFile copyFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToCopy = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return fileToCopy.copy(destinationFolder).getResource()__            } else {_                return fileToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,file,if,code,new,name,code,is,code,null,code,the,copied,file,has,same,name,as,the,original,return,the,copied,file;public,box,file,copy,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,copying,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,copy,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,file,to,copy,copy,destination,folder,get,resource,else,return,file,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile copyFile(String fileId, String destinationFolderId, String newName);1505897400;Copy file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied file_ if <code>newName</code> is_<code>null</code>, the copied file has same name as the_original._@return The copied file.;public BoxFile copyFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToCopy = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return fileToCopy.copy(destinationFolder).getResource()__            } else {_                return fileToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,file,if,code,new,name,code,is,code,null,code,the,copied,file,has,same,name,as,the,original,return,the,copied,file;public,box,file,copy,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,copying,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,copy,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,file,to,copy,copy,destination,folder,get,resource,else,return,file,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile copyFile(String fileId, String destinationFolderId, String newName);1523968787;Copy file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied file_ if <code>newName</code> is_<code>null</code>, the copied file has same name as the_original._@return The copied file.;public BoxFile copyFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToCopy = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return fileToCopy.copy(destinationFolder).getResource()__            } else {_                return fileToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,file,if,code,new,name,code,is,code,null,code,the,copied,file,has,same,name,as,the,original,return,the,copied,file;public,box,file,copy,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,copying,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,copy,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,file,to,copy,copy,destination,folder,get,resource,else,return,file,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile copyFile(String fileId, String destinationFolderId, String newName);1536687142;Copy file to destination folder while optionally giving it a new name.__@param fileId_- the id of file to copy._@param destinationFolderId_- the id of the destination folder._@param newName_- the new name for copied file_ if <code>newName</code> is_<code>null</code>, the copied file has same name as the_original._@return The copied file.;public BoxFile copyFile(String fileId, String destinationFolderId, String newName) {_        try {_            LOG.debug("Copying file(id=" + fileId + ") to destination_folder(id=" + destinationFolderId + ")"_                    + (newName == null ? "" : " with new name '" + newName + "'"))__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (destinationFolderId == null) {_                throw new IllegalArgumentException("Parameter 'destinationFolderId' can not be null")__            }_            BoxFile fileToCopy = new BoxFile(boxConnection, fileId)__            BoxFolder destinationFolder = new BoxFolder(boxConnection, destinationFolderId)__            if (newName == null) {_                return fileToCopy.copy(destinationFolder).getResource()__            } else {_                return fileToCopy.copy(destinationFolder, newName).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };copy,file,to,destination,folder,while,optionally,giving,it,a,new,name,param,file,id,the,id,of,file,to,copy,param,destination,folder,id,the,id,of,the,destination,folder,param,new,name,the,new,name,for,copied,file,if,code,new,name,code,is,code,null,code,the,copied,file,has,same,name,as,the,original,return,the,copied,file;public,box,file,copy,file,string,file,id,string,destination,folder,id,string,new,name,try,log,debug,copying,file,id,file,id,to,id,destination,folder,id,new,name,null,with,new,name,new,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,destination,folder,id,null,throw,new,illegal,argument,exception,parameter,destination,folder,id,can,not,be,null,box,file,file,to,copy,new,box,file,box,connection,file,id,box,folder,destination,folder,new,box,folder,box,connection,destination,folder,id,if,new,name,null,return,file,to,copy,copy,destination,folder,get,resource,else,return,file,to,copy,copy,destination,folder,new,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,             ProgressListener listener);1488797924;Download a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to download_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@param output_- the stream to which the version contents will be written._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file_version.;public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            if (listener != null) {_                fileVersion.download(output, listener)__            } else {_                fileVersion.download(output)__            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,download,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,param,output,the,stream,to,which,the,version,contents,will,be,written,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file,version;public,output,stream,download,previous,file,version,string,file,id,integer,version,output,stream,output,progress,listener,listener,try,log,debug,downloading,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,if,listener,null,file,version,download,output,listener,else,file,version,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,             ProgressListener listener);1505897400;Download a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to download_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@param output_- the stream to which the version contents will be written._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file_version.;public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            if (listener != null) {_                fileVersion.download(output, listener)__            } else {_                fileVersion.download(output)__            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,download,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,param,output,the,stream,to,which,the,version,contents,will,be,written,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file,version;public,output,stream,download,previous,file,version,string,file,id,integer,version,output,stream,output,progress,listener,listener,try,log,debug,downloading,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,if,listener,null,file,version,download,output,listener,else,file,version,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,             ProgressListener listener);1523968787;Download a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to download_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@param output_- the stream to which the version contents will be written._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file_version.;public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            if (listener != null) {_                fileVersion.download(output, listener)__            } else {_                fileVersion.download(output)__            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,download,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,param,output,the,stream,to,which,the,version,contents,will,be,written,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file,version;public,output,stream,download,previous,file,version,string,file,id,integer,version,output,stream,output,progress,listener,listener,try,log,debug,downloading,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,if,listener,null,file,version,download,output,listener,else,file,version,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,             ProgressListener listener);1536687142;Download a previous version of file.__@param fileId_- the id of file._@param version_- the version of file to download_ initial version of file has_value of <code>0</code>, second version of file is_<code>1</code> and so on._@param output_- the stream to which the version contents will be written._@param listener_- a listener for monitoring the download's progress_ if_<code>null</code> the download's progress will not be_monitored._@return The stream containing the contents of the downloaded file_version.;public OutputStream downloadPreviousFileVersion(String fileId, Integer version, OutputStream output,_            ProgressListener listener) {_        try {_            LOG.debug("Downloading file(id=" + fileId + ", version=" + version + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (version == null) {_                throw new IllegalArgumentException("Parameter 'version' can not be null")__            }_            if (output == null) {_                throw new IllegalArgumentException("Parameter 'output' can not be null")__            }_            BoxFile file = new BoxFile(boxConnection, fileId)___            List<BoxFileVersion> fileVersions = (List<BoxFileVersion>) file.getVersions()__            BoxFileVersion fileVersion = fileVersions.get(version)___            if (listener != null) {_                fileVersion.download(output, listener)__            } else {_                fileVersion.download(output)__            }_            return output__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };download,a,previous,version,of,file,param,file,id,the,id,of,file,param,version,the,version,of,file,to,download,initial,version,of,file,has,value,of,code,0,code,second,version,of,file,is,code,1,code,and,so,on,param,output,the,stream,to,which,the,version,contents,will,be,written,param,listener,a,listener,for,monitoring,the,download,s,progress,if,code,null,code,the,download,s,progress,will,not,be,monitored,return,the,stream,containing,the,contents,of,the,downloaded,file,version;public,output,stream,download,previous,file,version,string,file,id,integer,version,output,stream,output,progress,listener,listener,try,log,debug,downloading,file,id,file,id,version,version,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,version,null,throw,new,illegal,argument,exception,parameter,version,can,not,be,null,if,output,null,throw,new,illegal,argument,exception,parameter,output,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,list,box,file,version,file,versions,list,box,file,version,file,get,versions,box,file,version,file,version,file,versions,get,version,if,listener,null,file,version,download,output,listener,else,file,version,download,output,return,output,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getDownloadURL(String fileId);1488797924;Get an expiring URL for downloading a file directly from Box. This can be_user, for example, for sending as a redirect to a browser to cause the_browser to download the file directly from Box.__@param fileId_- the id of file._@return The temporary download URL;public URL getDownloadURL(String fileId) {_        try {_            LOG.debug("Getting download URL for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getDownloadURL()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,downloading,a,file,directly,from,box,this,can,be,user,for,example,for,sending,as,a,redirect,to,a,browser,to,cause,the,browser,to,download,the,file,directly,from,box,param,file,id,the,id,of,file,return,the,temporary,download,url;public,url,get,download,url,string,file,id,try,log,debug,getting,download,url,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,download,url,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getDownloadURL(String fileId);1505897400;Get an expiring URL for downloading a file directly from Box. This can be_user, for example, for sending as a redirect to a browser to cause the_browser to download the file directly from Box.__@param fileId_- the id of file._@return The temporary download URL;public URL getDownloadURL(String fileId) {_        try {_            LOG.debug("Getting download URL for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getDownloadURL()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,downloading,a,file,directly,from,box,this,can,be,user,for,example,for,sending,as,a,redirect,to,a,browser,to,cause,the,browser,to,download,the,file,directly,from,box,param,file,id,the,id,of,file,return,the,temporary,download,url;public,url,get,download,url,string,file,id,try,log,debug,getting,download,url,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,download,url,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getDownloadURL(String fileId);1523968787;Get an expiring URL for downloading a file directly from Box. This can be_user, for example, for sending as a redirect to a browser to cause the_browser to download the file directly from Box.__@param fileId_- the id of file._@return The temporary download URL;public URL getDownloadURL(String fileId) {_        try {_            LOG.debug("Getting download URL for file(id=" + fileId + ")")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getDownloadURL()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,downloading,a,file,directly,from,box,this,can,be,user,for,example,for,sending,as,a,redirect,to,a,browser,to,cause,the,browser,to,download,the,file,directly,from,box,param,file,id,the,id,of,file,return,the,temporary,download,url;public,url,get,download,url,string,file,id,try,log,debug,getting,download,url,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,download,url,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public URL getDownloadURL(String fileId);1536687142;Get an expiring URL for downloading a file directly from Box. This can be_user, for example, for sending as a redirect to a browser to cause the_browser to download the file directly from Box.__@param fileId_- the id of file._@return The temporary download URL;public URL getDownloadURL(String fileId) {_        try {_            LOG.debug("Getting download URL for file(id={})", fileId)__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxFile file = new BoxFile(boxConnection, fileId)___            return file.getDownloadURL()___        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,an,expiring,url,for,downloading,a,file,directly,from,box,this,can,be,user,for,example,for,sending,as,a,redirect,to,a,browser,to,cause,the,browser,to,download,the,file,directly,from,box,param,file,id,the,id,of,file,return,the,temporary,download,url;public,url,get,download,url,string,file,id,try,log,debug,getting,download,url,for,file,id,file,id,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,file,file,new,box,file,box,connection,file,id,return,file,get,download,url,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile renameFile(String fileId, String newFileName);1488797924;Rename file giving it the name <code>newName</code>__@param fileId_- the id of file to rename._@param newFileName_- the new name of file._@return The renamed file.;public BoxFile renameFile(String fileId, String newFileName) {_        try {_            LOG.debug("Renaming file(id=" + fileId + ") to '" + newFileName + "'")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (newFileName == null) {_                throw new IllegalArgumentException("Parameter 'newName' can not be null")__            }_            BoxFile fileToRename = new BoxFile(boxConnection, fileId)__            fileToRename.rename(newFileName)__            return fileToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,file,giving,it,the,name,code,new,name,code,param,file,id,the,id,of,file,to,rename,param,new,file,name,the,new,name,of,file,return,the,renamed,file;public,box,file,rename,file,string,file,id,string,new,file,name,try,log,debug,renaming,file,id,file,id,to,new,file,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,new,file,name,null,throw,new,illegal,argument,exception,parameter,new,name,can,not,be,null,box,file,file,to,rename,new,box,file,box,connection,file,id,file,to,rename,rename,new,file,name,return,file,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile renameFile(String fileId, String newFileName);1505897400;Rename file giving it the name <code>newName</code>__@param fileId_- the id of file to rename._@param newFileName_- the new name of file._@return The renamed file.;public BoxFile renameFile(String fileId, String newFileName) {_        try {_            LOG.debug("Renaming file(id=" + fileId + ") to '" + newFileName + "'")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (newFileName == null) {_                throw new IllegalArgumentException("Parameter 'newName' can not be null")__            }_            BoxFile fileToRename = new BoxFile(boxConnection, fileId)__            fileToRename.rename(newFileName)__            return fileToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,file,giving,it,the,name,code,new,name,code,param,file,id,the,id,of,file,to,rename,param,new,file,name,the,new,name,of,file,return,the,renamed,file;public,box,file,rename,file,string,file,id,string,new,file,name,try,log,debug,renaming,file,id,file,id,to,new,file,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,new,file,name,null,throw,new,illegal,argument,exception,parameter,new,name,can,not,be,null,box,file,file,to,rename,new,box,file,box,connection,file,id,file,to,rename,rename,new,file,name,return,file,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile renameFile(String fileId, String newFileName);1523968787;Rename file giving it the name <code>newName</code>__@param fileId_- the id of file to rename._@param newFileName_- the new name of file._@return The renamed file.;public BoxFile renameFile(String fileId, String newFileName) {_        try {_            LOG.debug("Renaming file(id=" + fileId + ") to '" + newFileName + "'")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (newFileName == null) {_                throw new IllegalArgumentException("Parameter 'newName' can not be null")__            }_            BoxFile fileToRename = new BoxFile(boxConnection, fileId)__            fileToRename.rename(newFileName)__            return fileToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,file,giving,it,the,name,code,new,name,code,param,file,id,the,id,of,file,to,rename,param,new,file,name,the,new,name,of,file,return,the,renamed,file;public,box,file,rename,file,string,file,id,string,new,file,name,try,log,debug,renaming,file,id,file,id,to,new,file,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,new,file,name,null,throw,new,illegal,argument,exception,parameter,new,name,can,not,be,null,box,file,file,to,rename,new,box,file,box,connection,file,id,file,to,rename,rename,new,file,name,return,file,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxFilesManager -> public BoxFile renameFile(String fileId, String newFileName);1536687142;Rename file giving it the name <code>newName</code>__@param fileId_- the id of file to rename._@param newFileName_- the new name of file._@return The renamed file.;public BoxFile renameFile(String fileId, String newFileName) {_        try {_            LOG.debug("Renaming file(id=" + fileId + ") to '" + newFileName + "'")__            if (fileId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }_            if (newFileName == null) {_                throw new IllegalArgumentException("Parameter 'newName' can not be null")__            }_            BoxFile fileToRename = new BoxFile(boxConnection, fileId)__            fileToRename.rename(newFileName)__            return fileToRename__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };rename,file,giving,it,the,name,code,new,name,code,param,file,id,the,id,of,file,to,rename,param,new,file,name,the,new,name,of,file,return,the,renamed,file;public,box,file,rename,file,string,file,id,string,new,file,name,try,log,debug,renaming,file,id,file,id,to,new,file,name,if,file,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,if,new,file,name,null,throw,new,illegal,argument,exception,parameter,new,name,can,not,be,null,box,file,file,to,rename,new,box,file,box,connection,file,id,file,to,rename,rename,new,file,name,return,file,to,rename,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
