# id;timestamp;commentText;codeText;commentWords;codeWords
BoxUsersManager -> public BoxUser getCurrentUser();1488797924;Get current user.__@return The current user.;public BoxUser getCurrentUser() {_        try {_            LOG.debug("Getting current user")___            return BoxUser.getCurrentUser(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,current,user,return,the,current,user;public,box,user,get,current,user,try,log,debug,getting,current,user,return,box,user,get,current,user,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser getCurrentUser();1505741689;Get current user.__@return The current user.;public BoxUser getCurrentUser() {_        try {_            LOG.debug("Getting current user")___            return BoxUser.getCurrentUser(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,current,user,return,the,current,user;public,box,user,get,current,user,try,log,debug,getting,current,user,return,box,user,get,current,user,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser getCurrentUser();1523968787;Get current user.__@return The current user.;public BoxUser getCurrentUser() {_        try {_            LOG.debug("Getting current user")___            return BoxUser.getCurrentUser(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,current,user,return,the,current,user;public,box,user,get,current,user,try,log,debug,getting,current,user,return,box,user,get,current,user,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser getCurrentUser();1536687142;Get current user.__@return The current user.;public BoxUser getCurrentUser() {_        try {_            LOG.debug("Getting current user")___            return BoxUser.getCurrentUser(boxConnection)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,current,user,return,the,current,user;public,box,user,get,current,user,try,log,debug,getting,current,user,return,box,user,get,current,user,box,connection,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser.Info getUserInfo(String userId);1488797924;Get user information.__@param userId_- the id of user._@return The user information.;public BoxUser.Info getUserInfo(String userId) {_        try {_            LOG.debug("Getting info for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getInfo()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,user,information,param,user,id,the,id,of,user,return,the,user,information;public,box,user,info,get,user,info,string,user,id,try,log,debug,getting,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,info,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser.Info getUserInfo(String userId);1505741689;Get user information.__@param userId_- the id of user._@return The user information.;public BoxUser.Info getUserInfo(String userId) {_        try {_            LOG.debug("Getting info for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getInfo()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,user,information,param,user,id,the,id,of,user,return,the,user,information;public,box,user,info,get,user,info,string,user,id,try,log,debug,getting,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,info,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser.Info getUserInfo(String userId);1523968787;Get user information.__@param userId_- the id of user._@return The user information.;public BoxUser.Info getUserInfo(String userId) {_        try {_            LOG.debug("Getting info for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getInfo()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,user,information,param,user,id,the,id,of,user,return,the,user,information;public,box,user,info,get,user,info,string,user,id,try,log,debug,getting,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,info,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser.Info getUserInfo(String userId);1536687142;Get user information.__@param userId_- the id of user._@return The user information.;public BoxUser.Info getUserInfo(String userId) {_        try {_            LOG.debug("Getting info for user(id={})", userId)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getInfo()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,user,information,param,user,id,the,id,of,user,return,the,user,information;public,box,user,info,get,user,info,string,user,id,try,log,debug,getting,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,info,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUsersManager(BoxAPIConnection boxConnection);1488797924;Create users manager to manage the users of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxUsersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,users,manager,to,manage,the,users,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,users,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxUsersManager -> public BoxUsersManager(BoxAPIConnection boxConnection);1505741689;Create users manager to manage the users of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxUsersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,users,manager,to,manage,the,users,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,users,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxUsersManager -> public BoxUsersManager(BoxAPIConnection boxConnection);1523968787;Create users manager to manage the users of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxUsersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,users,manager,to,manage,the,users,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,users,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxUsersManager -> public BoxUsersManager(BoxAPIConnection boxConnection);1536687142;Create users manager to manage the users of Box connection's_authenticated user.__@param boxConnection_- Box connection to authenticated user account.;public BoxUsersManager(BoxAPIConnection boxConnection) {_        this.boxConnection = boxConnection__    };create,users,manager,to,manage,the,users,of,box,connection,s,authenticated,user,param,box,connection,box,connection,to,authenticated,user,account;public,box,users,manager,box,apiconnection,box,connection,this,box,connection,box,connection
BoxUsersManager -> public void deleteUser(String userId, boolean notifyUser, boolean force);1488797924;Delete user from an enterprise account.__@param userId_- the id of user to delete._@param notifyUser_- whether or not to send an email notification to the user_that their account has been deleted._@param force_- whether or not this user should be deleted even if they_still own files.;public void deleteUser(String userId, boolean notifyUser, boolean force) {_        try {_            LOG.debug("Deleting user(id=" + userId + ") notifyUser=" + notifyUser + " force=" + force)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxUser file = new BoxUser(boxConnection, userId)__            file.delete(notifyUser, force)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,user,from,an,enterprise,account,param,user,id,the,id,of,user,to,delete,param,notify,user,whether,or,not,to,send,an,email,notification,to,the,user,that,their,account,has,been,deleted,param,force,whether,or,not,this,user,should,be,deleted,even,if,they,still,own,files;public,void,delete,user,string,user,id,boolean,notify,user,boolean,force,try,log,debug,deleting,user,id,user,id,notify,user,notify,user,force,force,if,user,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,user,file,new,box,user,box,connection,user,id,file,delete,notify,user,force,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUser(String userId, boolean notifyUser, boolean force);1505741689;Delete user from an enterprise account.__@param userId_- the id of user to delete._@param notifyUser_- whether or not to send an email notification to the user_that their account has been deleted._@param force_- whether or not this user should be deleted even if they_still own files.;public void deleteUser(String userId, boolean notifyUser, boolean force) {_        try {_            LOG.debug("Deleting user(id=" + userId + ") notifyUser=" + notifyUser + " force=" + force)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxUser file = new BoxUser(boxConnection, userId)__            file.delete(notifyUser, force)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,user,from,an,enterprise,account,param,user,id,the,id,of,user,to,delete,param,notify,user,whether,or,not,to,send,an,email,notification,to,the,user,that,their,account,has,been,deleted,param,force,whether,or,not,this,user,should,be,deleted,even,if,they,still,own,files;public,void,delete,user,string,user,id,boolean,notify,user,boolean,force,try,log,debug,deleting,user,id,user,id,notify,user,notify,user,force,force,if,user,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,user,file,new,box,user,box,connection,user,id,file,delete,notify,user,force,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUser(String userId, boolean notifyUser, boolean force);1523968787;Delete user from an enterprise account.__@param userId_- the id of user to delete._@param notifyUser_- whether or not to send an email notification to the user_that their account has been deleted._@param force_- whether or not this user should be deleted even if they_still own files.;public void deleteUser(String userId, boolean notifyUser, boolean force) {_        try {_            LOG.debug("Deleting user(id=" + userId + ") notifyUser=" + notifyUser + " force=" + force)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxUser file = new BoxUser(boxConnection, userId)__            file.delete(notifyUser, force)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,user,from,an,enterprise,account,param,user,id,the,id,of,user,to,delete,param,notify,user,whether,or,not,to,send,an,email,notification,to,the,user,that,their,account,has,been,deleted,param,force,whether,or,not,this,user,should,be,deleted,even,if,they,still,own,files;public,void,delete,user,string,user,id,boolean,notify,user,boolean,force,try,log,debug,deleting,user,id,user,id,notify,user,notify,user,force,force,if,user,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,user,file,new,box,user,box,connection,user,id,file,delete,notify,user,force,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUser(String userId, boolean notifyUser, boolean force);1536687142;Delete user from an enterprise account.__@param userId_- the id of user to delete._@param notifyUser_- whether or not to send an email notification to the user_that their account has been deleted._@param force_- whether or not this user should be deleted even if they_still own files.;public void deleteUser(String userId, boolean notifyUser, boolean force) {_        try {_            LOG.debug("Deleting user(id=" + userId + ") notifyUser=" + notifyUser + " force=" + force)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'fileId' can not be null")__            }__            BoxUser file = new BoxUser(boxConnection, userId)__            file.delete(notifyUser, force)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,user,from,an,enterprise,account,param,user,id,the,id,of,user,to,delete,param,notify,user,whether,or,not,to,send,an,email,notification,to,the,user,that,their,account,has,been,deleted,param,force,whether,or,not,this,user,should,be,deleted,even,if,they,still,own,files;public,void,delete,user,string,user,id,boolean,notify,user,boolean,force,try,log,debug,deleting,user,id,user,id,notify,user,notify,user,force,force,if,user,id,null,throw,new,illegal,argument,exception,parameter,file,id,can,not,be,null,box,user,file,new,box,user,box,connection,user,id,file,delete,notify,user,force,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser updateUserInfo(String userId, BoxUser.Info info);1488797924;Update user information.__@param userId_- the id of user to update._@param info_- the updated information_@return The updated user.;public BoxUser updateUserInfo(String userId, BoxUser.Info info) {_        try {_            LOG.debug("Updating info for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)__            user.updateInfo(info)__            return user__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,user,information,param,user,id,the,id,of,user,to,update,param,info,the,updated,information,return,the,updated,user;public,box,user,update,user,info,string,user,id,box,user,info,info,try,log,debug,updating,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,update,info,info,return,user,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser updateUserInfo(String userId, BoxUser.Info info);1505741689;Update user information.__@param userId_- the id of user to update._@param info_- the updated information_@return The updated user.;public BoxUser updateUserInfo(String userId, BoxUser.Info info) {_        try {_            LOG.debug("Updating info for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)__            user.updateInfo(info)__            return user__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,user,information,param,user,id,the,id,of,user,to,update,param,info,the,updated,information,return,the,updated,user;public,box,user,update,user,info,string,user,id,box,user,info,info,try,log,debug,updating,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,update,info,info,return,user,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser updateUserInfo(String userId, BoxUser.Info info);1523968787;Update user information.__@param userId_- the id of user to update._@param info_- the updated information_@return The updated user.;public BoxUser updateUserInfo(String userId, BoxUser.Info info) {_        try {_            LOG.debug("Updating info for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)__            user.updateInfo(info)__            return user__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,user,information,param,user,id,the,id,of,user,to,update,param,info,the,updated,information,return,the,updated,user;public,box,user,update,user,info,string,user,id,box,user,info,info,try,log,debug,updating,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,update,info,info,return,user,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser updateUserInfo(String userId, BoxUser.Info info);1536687142;Update user information.__@param userId_- the id of user to update._@param info_- the updated information_@return The updated user.;public BoxUser updateUserInfo(String userId, BoxUser.Info info) {_        try {_            LOG.debug("Updating info for user(id={})", userId)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (info == null) {_                throw new IllegalArgumentException("Parameter 'info' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)__            user.updateInfo(info)__            return user__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };update,user,information,param,user,id,the,id,of,user,to,update,param,info,the,updated,information,return,the,updated,user;public,box,user,update,user,info,string,user,id,box,user,info,info,try,log,debug,updating,info,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,info,null,throw,new,illegal,argument,exception,parameter,info,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,update,info,info,return,user,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params);1488797924;Provision a new user in an enterprise with additional user information.__@param login_- the email address the user will use to login._@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params) {_        try {_            LOG.debug("Creating enterprise user with login=" + login + " name=" + name)__            if (login == null) {_                throw new IllegalArgumentException("Parameter 'login' can not be null")__            }_            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createEnterpriseUser(boxConnection, login, name, params).getResource()__            } else {_                return BoxUser.createEnterpriseUser(boxConnection, login, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,user,in,an,enterprise,with,additional,user,information,param,login,the,email,address,the,user,will,use,to,login,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,enterprise,user,string,login,string,name,create,user,params,params,try,log,debug,creating,enterprise,user,with,login,login,name,name,if,login,null,throw,new,illegal,argument,exception,parameter,login,can,not,be,null,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,enterprise,user,box,connection,login,name,params,get,resource,else,return,box,user,create,enterprise,user,box,connection,login,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params);1505741689;Provision a new user in an enterprise with additional user information.__@param login_- the email address the user will use to login._@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params) {_        try {_            LOG.debug("Creating enterprise user with login=" + login + " name=" + name)__            if (login == null) {_                throw new IllegalArgumentException("Parameter 'login' can not be null")__            }_            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createEnterpriseUser(boxConnection, login, name, params).getResource()__            } else {_                return BoxUser.createEnterpriseUser(boxConnection, login, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,user,in,an,enterprise,with,additional,user,information,param,login,the,email,address,the,user,will,use,to,login,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,enterprise,user,string,login,string,name,create,user,params,params,try,log,debug,creating,enterprise,user,with,login,login,name,name,if,login,null,throw,new,illegal,argument,exception,parameter,login,can,not,be,null,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,enterprise,user,box,connection,login,name,params,get,resource,else,return,box,user,create,enterprise,user,box,connection,login,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params);1523968787;Provision a new user in an enterprise with additional user information.__@param login_- the email address the user will use to login._@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params) {_        try {_            LOG.debug("Creating enterprise user with login=" + login + " name=" + name)__            if (login == null) {_                throw new IllegalArgumentException("Parameter 'login' can not be null")__            }_            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createEnterpriseUser(boxConnection, login, name, params).getResource()__            } else {_                return BoxUser.createEnterpriseUser(boxConnection, login, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,user,in,an,enterprise,with,additional,user,information,param,login,the,email,address,the,user,will,use,to,login,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,enterprise,user,string,login,string,name,create,user,params,params,try,log,debug,creating,enterprise,user,with,login,login,name,name,if,login,null,throw,new,illegal,argument,exception,parameter,login,can,not,be,null,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,enterprise,user,box,connection,login,name,params,get,resource,else,return,box,user,create,enterprise,user,box,connection,login,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params);1536687142;Provision a new user in an enterprise with additional user information.__@param login_- the email address the user will use to login._@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createEnterpriseUser(String login, String name, CreateUserParams params) {_        try {_            LOG.debug("Creating enterprise user with login=" + login + " name=" + name)__            if (login == null) {_                throw new IllegalArgumentException("Parameter 'login' can not be null")__            }_            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createEnterpriseUser(boxConnection, login, name, params).getResource()__            } else {_                return BoxUser.createEnterpriseUser(boxConnection, login, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,user,in,an,enterprise,with,additional,user,information,param,login,the,email,address,the,user,will,use,to,login,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,enterprise,user,string,login,string,name,create,user,params,params,try,log,debug,creating,enterprise,user,with,login,login,name,name,if,login,null,throw,new,illegal,argument,exception,parameter,login,can,not,be,null,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,enterprise,user,box,connection,login,name,params,get,resource,else,return,box,user,create,enterprise,user,box,connection,login,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createAppUser(String name, CreateUserParams params);1488797924;Provision a new app user in an enterprise with additional user_information using Box Developer Edition.__@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createAppUser(String name, CreateUserParams params) {_        try {_            LOG.debug("Creating app user with name=" + name)__            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createAppUser(boxConnection, name, params).getResource()__            } else {_                return BoxUser.createAppUser(boxConnection, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,app,user,in,an,enterprise,with,additional,user,information,using,box,developer,edition,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,app,user,string,name,create,user,params,params,try,log,debug,creating,app,user,with,name,name,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,app,user,box,connection,name,params,get,resource,else,return,box,user,create,app,user,box,connection,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createAppUser(String name, CreateUserParams params);1505741689;Provision a new app user in an enterprise with additional user_information using Box Developer Edition.__@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createAppUser(String name, CreateUserParams params) {_        try {_            LOG.debug("Creating app user with name=" + name)__            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createAppUser(boxConnection, name, params).getResource()__            } else {_                return BoxUser.createAppUser(boxConnection, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,app,user,in,an,enterprise,with,additional,user,information,using,box,developer,edition,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,app,user,string,name,create,user,params,params,try,log,debug,creating,app,user,with,name,name,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,app,user,box,connection,name,params,get,resource,else,return,box,user,create,app,user,box,connection,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createAppUser(String name, CreateUserParams params);1523968787;Provision a new app user in an enterprise with additional user_information using Box Developer Edition.__@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createAppUser(String name, CreateUserParams params) {_        try {_            LOG.debug("Creating app user with name=" + name)__            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createAppUser(boxConnection, name, params).getResource()__            } else {_                return BoxUser.createAppUser(boxConnection, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,app,user,in,an,enterprise,with,additional,user,information,using,box,developer,edition,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,app,user,string,name,create,user,params,params,try,log,debug,creating,app,user,with,name,name,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,app,user,box,connection,name,params,get,resource,else,return,box,user,create,app,user,box,connection,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxUser createAppUser(String name, CreateUserParams params);1536687142;Provision a new app user in an enterprise with additional user_information using Box Developer Edition.__@param name_- the name of the user._@param params_- additional user information._@return All the enterprise users or enterprise users that matches the_filter.;public BoxUser createAppUser(String name, CreateUserParams params) {_        try {_            LOG.debug("Creating app user with name={}", name)__            if (name == null) {_                throw new IllegalArgumentException("Parameter 'name' can not be null")__            }__            if (params != null) {_                return BoxUser.createAppUser(boxConnection, name, params).getResource()__            } else {_                return BoxUser.createAppUser(boxConnection, name).getResource()__            }_        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };provision,a,new,app,user,in,an,enterprise,with,additional,user,information,using,box,developer,edition,param,name,the,name,of,the,user,param,params,additional,user,information,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,box,user,create,app,user,string,name,create,user,params,params,try,log,debug,creating,app,user,with,name,name,if,name,null,throw,new,illegal,argument,exception,parameter,name,can,not,be,null,if,params,null,return,box,user,create,app,user,box,connection,name,params,get,resource,else,return,box,user,create,app,user,box,connection,name,get,resource,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public EmailAlias addUserEmailAlias(String userId, String email);1488797924;Add a new email alias to user's account.__@param userId_- the id of user._@param email_- the email address to add as an alias._@return The newly created email alias.;public EmailAlias addUserEmailAlias(String userId, String email) {_        try {_            LOG.debug("Adding email alias '" + email + "' to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (email == null) {_                throw new IllegalArgumentException("Paramerer 'email' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.addEmailAlias(email)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };add,a,new,email,alias,to,user,s,account,param,user,id,the,id,of,user,param,email,the,email,address,to,add,as,an,alias,return,the,newly,created,email,alias;public,email,alias,add,user,email,alias,string,user,id,string,email,try,log,debug,adding,email,alias,email,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,null,throw,new,illegal,argument,exception,paramerer,email,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,add,email,alias,email,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public EmailAlias addUserEmailAlias(String userId, String email);1505741689;Add a new email alias to user's account.__@param userId_- the id of user._@param email_- the email address to add as an alias._@return The newly created email alias.;public EmailAlias addUserEmailAlias(String userId, String email) {_        try {_            LOG.debug("Adding email alias '" + email + "' to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (email == null) {_                throw new IllegalArgumentException("Paramerer 'email' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.addEmailAlias(email)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };add,a,new,email,alias,to,user,s,account,param,user,id,the,id,of,user,param,email,the,email,address,to,add,as,an,alias,return,the,newly,created,email,alias;public,email,alias,add,user,email,alias,string,user,id,string,email,try,log,debug,adding,email,alias,email,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,null,throw,new,illegal,argument,exception,paramerer,email,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,add,email,alias,email,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public EmailAlias addUserEmailAlias(String userId, String email);1523968787;Add a new email alias to user's account.__@param userId_- the id of user._@param email_- the email address to add as an alias._@return The newly created email alias.;public EmailAlias addUserEmailAlias(String userId, String email) {_        try {_            LOG.debug("Adding email alias '" + email + "' to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (email == null) {_                throw new IllegalArgumentException("Paramerer 'email' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.addEmailAlias(email)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };add,a,new,email,alias,to,user,s,account,param,user,id,the,id,of,user,param,email,the,email,address,to,add,as,an,alias,return,the,newly,created,email,alias;public,email,alias,add,user,email,alias,string,user,id,string,email,try,log,debug,adding,email,alias,email,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,null,throw,new,illegal,argument,exception,paramerer,email,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,add,email,alias,email,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public EmailAlias addUserEmailAlias(String userId, String email);1536687142;Add a new email alias to user's account.__@param userId_- the id of user._@param email_- the email address to add as an alias._@return The newly created email alias.;public EmailAlias addUserEmailAlias(String userId, String email) {_        try {_            LOG.debug("Adding email alias '" + email + "' to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (email == null) {_                throw new IllegalArgumentException("Paramerer 'email' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.addEmailAlias(email)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };add,a,new,email,alias,to,user,s,account,param,user,id,the,id,of,user,param,email,the,email,address,to,add,as,an,alias,return,the,newly,created,email,alias;public,email,alias,add,user,email,alias,string,user,id,string,email,try,log,debug,adding,email,alias,email,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,null,throw,new,illegal,argument,exception,paramerer,email,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,add,email,alias,email,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public Collection<EmailAlias> getUserEmailAlias(String userId);1488797924;Get a collection of all the email aliases for user.__@param userId_- the id of user._@return A collection of all the email aliases for user.;public Collection<EmailAlias> getUserEmailAlias(String userId) {_        try {_            LOG.debug("Get email aliases for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getEmailAliases()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,a,collection,of,all,the,email,aliases,for,user,param,user,id,the,id,of,user,return,a,collection,of,all,the,email,aliases,for,user;public,collection,email,alias,get,user,email,alias,string,user,id,try,log,debug,get,email,aliases,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,email,aliases,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public Collection<EmailAlias> getUserEmailAlias(String userId);1505741689;Get a collection of all the email aliases for user.__@param userId_- the id of user._@return A collection of all the email aliases for user.;public Collection<EmailAlias> getUserEmailAlias(String userId) {_        try {_            LOG.debug("Get email aliases for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getEmailAliases()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,a,collection,of,all,the,email,aliases,for,user,param,user,id,the,id,of,user,return,a,collection,of,all,the,email,aliases,for,user;public,collection,email,alias,get,user,email,alias,string,user,id,try,log,debug,get,email,aliases,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,email,aliases,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public Collection<EmailAlias> getUserEmailAlias(String userId);1523968787;Get a collection of all the email aliases for user.__@param userId_- the id of user._@return A collection of all the email aliases for user.;public Collection<EmailAlias> getUserEmailAlias(String userId) {_        try {_            LOG.debug("Get email aliases for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getEmailAliases()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,a,collection,of,all,the,email,aliases,for,user,param,user,id,the,id,of,user,return,a,collection,of,all,the,email,aliases,for,user;public,collection,email,alias,get,user,email,alias,string,user,id,try,log,debug,get,email,aliases,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,email,aliases,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public Collection<EmailAlias> getUserEmailAlias(String userId);1536687142;Get a collection of all the email aliases for user.__@param userId_- the id of user._@return A collection of all the email aliases for user.;public Collection<EmailAlias> getUserEmailAlias(String userId) {_        try {_            LOG.debug("Get email aliases for user(id={})", userId)__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.getEmailAliases()__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,a,collection,of,all,the,email,aliases,for,user,param,user,id,the,id,of,user,return,a,collection,of,all,the,email,aliases,for,user;public,collection,email,alias,get,user,email,alias,string,user,id,try,log,debug,get,email,aliases,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,get,email,aliases,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields);1488797924;Get any managed users that match the filter term as well as any external_users that match the filter term. For managed users it matches any users_names or emails that start with the term. For external, it only does full_match on email. This method is ideal to use in the case where you have a_full email for a user and you don't know if they're managed or external.__@param filterTerm_- The filter term to lookup users by (login for external,_login or name for managed)_ if <code>null</code> all managed_users are returned._@param fields_- the fields to retrieve. Leave this out for the standard_fields._@return All the enterprise users or enterprise users that matches the_filter.;public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields) {_        try {_            LOG.debug("Getting all enterprise users matching filterTerm=" + filterTerm)___            List<BoxUser.Info> users = new ArrayList<BoxUser.Info>()__            Iterable<BoxUser.Info> iterable__            if (filterTerm == null) {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection)__            } else {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection, filterTerm, fields)__            }_            for (BoxUser.Info info : iterable) {_                users.add(info)__            }_            return users__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,managed,users,that,match,the,filter,term,as,well,as,any,external,users,that,match,the,filter,term,for,managed,users,it,matches,any,users,names,or,emails,that,start,with,the,term,for,external,it,only,does,full,match,on,email,this,method,is,ideal,to,use,in,the,case,where,you,have,a,full,email,for,a,user,and,you,don,t,know,if,they,re,managed,or,external,param,filter,term,the,filter,term,to,lookup,users,by,login,for,external,login,or,name,for,managed,if,code,null,code,all,managed,users,are,returned,param,fields,the,fields,to,retrieve,leave,this,out,for,the,standard,fields,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,list,box,user,info,get,all,enterprise,or,external,users,string,filter,term,string,fields,try,log,debug,getting,all,enterprise,users,matching,filter,term,filter,term,list,box,user,info,users,new,array,list,box,user,info,iterable,box,user,info,iterable,if,filter,term,null,iterable,box,user,get,all,enterprise,users,box,connection,else,iterable,box,user,get,all,enterprise,users,box,connection,filter,term,fields,for,box,user,info,info,iterable,users,add,info,return,users,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields);1505741689;Get any managed users that match the filter term as well as any external_users that match the filter term. For managed users it matches any users_names or emails that start with the term. For external, it only does full_match on email. This method is ideal to use in the case where you have a_full email for a user and you don't know if they're managed or external.__@param filterTerm_- The filter term to lookup users by (login for external,_login or name for managed)_ if <code>null</code> all managed_users are returned._@param fields_- the fields to retrieve. Leave this out for the standard_fields._@return All the enterprise users or enterprise users that matches the_filter.;public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields) {_        try {_            LOG.debug("Getting all enterprise users matching filterTerm=" + filterTerm)___            List<BoxUser.Info> users = new ArrayList<BoxUser.Info>()__            Iterable<BoxUser.Info> iterable__            if (filterTerm == null) {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection)__            } else {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection, filterTerm, fields)__            }_            for (BoxUser.Info info : iterable) {_                users.add(info)__            }_            return users__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,managed,users,that,match,the,filter,term,as,well,as,any,external,users,that,match,the,filter,term,for,managed,users,it,matches,any,users,names,or,emails,that,start,with,the,term,for,external,it,only,does,full,match,on,email,this,method,is,ideal,to,use,in,the,case,where,you,have,a,full,email,for,a,user,and,you,don,t,know,if,they,re,managed,or,external,param,filter,term,the,filter,term,to,lookup,users,by,login,for,external,login,or,name,for,managed,if,code,null,code,all,managed,users,are,returned,param,fields,the,fields,to,retrieve,leave,this,out,for,the,standard,fields,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,list,box,user,info,get,all,enterprise,or,external,users,string,filter,term,string,fields,try,log,debug,getting,all,enterprise,users,matching,filter,term,filter,term,list,box,user,info,users,new,array,list,box,user,info,iterable,box,user,info,iterable,if,filter,term,null,iterable,box,user,get,all,enterprise,users,box,connection,else,iterable,box,user,get,all,enterprise,users,box,connection,filter,term,fields,for,box,user,info,info,iterable,users,add,info,return,users,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields);1523968787;Get any managed users that match the filter term as well as any external_users that match the filter term. For managed users it matches any users_names or emails that start with the term. For external, it only does full_match on email. This method is ideal to use in the case where you have a_full email for a user and you don't know if they're managed or external.__@param filterTerm_- The filter term to lookup users by (login for external,_login or name for managed)_ if <code>null</code> all managed_users are returned._@param fields_- the fields to retrieve. Leave this out for the standard_fields._@return All the enterprise users or enterprise users that matches the_filter.;public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields) {_        try {_            LOG.debug("Getting all enterprise users matching filterTerm=" + filterTerm)___            List<BoxUser.Info> users = new ArrayList<>()__            Iterable<BoxUser.Info> iterable__            if (filterTerm == null) {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection)__            } else {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection, filterTerm, fields)__            }_            for (BoxUser.Info info : iterable) {_                users.add(info)__            }_            return users__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,managed,users,that,match,the,filter,term,as,well,as,any,external,users,that,match,the,filter,term,for,managed,users,it,matches,any,users,names,or,emails,that,start,with,the,term,for,external,it,only,does,full,match,on,email,this,method,is,ideal,to,use,in,the,case,where,you,have,a,full,email,for,a,user,and,you,don,t,know,if,they,re,managed,or,external,param,filter,term,the,filter,term,to,lookup,users,by,login,for,external,login,or,name,for,managed,if,code,null,code,all,managed,users,are,returned,param,fields,the,fields,to,retrieve,leave,this,out,for,the,standard,fields,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,list,box,user,info,get,all,enterprise,or,external,users,string,filter,term,string,fields,try,log,debug,getting,all,enterprise,users,matching,filter,term,filter,term,list,box,user,info,users,new,array,list,iterable,box,user,info,iterable,if,filter,term,null,iterable,box,user,get,all,enterprise,users,box,connection,else,iterable,box,user,get,all,enterprise,users,box,connection,filter,term,fields,for,box,user,info,info,iterable,users,add,info,return,users,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields);1536687142;Get any managed users that match the filter term as well as any external_users that match the filter term. For managed users it matches any users_names or emails that start with the term. For external, it only does full_match on email. This method is ideal to use in the case where you have a_full email for a user and you don't know if they're managed or external.__@param filterTerm_- The filter term to lookup users by (login for external,_login or name for managed)_ if <code>null</code> all managed_users are returned._@param fields_- the fields to retrieve. Leave this out for the standard_fields._@return All the enterprise users or enterprise users that matches the_filter.;public List<BoxUser.Info> getAllEnterpriseOrExternalUsers(String filterTerm, String... fields) {_        try {_            LOG.debug("Getting all enterprise users matching filterTerm={}", filterTerm)___            List<BoxUser.Info> users = new ArrayList<>()__            Iterable<BoxUser.Info> iterable__            if (filterTerm == null) {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection)__            } else {_                iterable = BoxUser.getAllEnterpriseUsers(boxConnection, filterTerm, fields)__            }_            for (BoxUser.Info info : iterable) {_                users.add(info)__            }_            return users__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };get,any,managed,users,that,match,the,filter,term,as,well,as,any,external,users,that,match,the,filter,term,for,managed,users,it,matches,any,users,names,or,emails,that,start,with,the,term,for,external,it,only,does,full,match,on,email,this,method,is,ideal,to,use,in,the,case,where,you,have,a,full,email,for,a,user,and,you,don,t,know,if,they,re,managed,or,external,param,filter,term,the,filter,term,to,lookup,users,by,login,for,external,login,or,name,for,managed,if,code,null,code,all,managed,users,are,returned,param,fields,the,fields,to,retrieve,leave,this,out,for,the,standard,fields,return,all,the,enterprise,users,or,enterprise,users,that,matches,the,filter;public,list,box,user,info,get,all,enterprise,or,external,users,string,filter,term,string,fields,try,log,debug,getting,all,enterprise,users,matching,filter,term,filter,term,list,box,user,info,users,new,array,list,iterable,box,user,info,iterable,if,filter,term,null,iterable,box,user,get,all,enterprise,users,box,connection,else,iterable,box,user,get,all,enterprise,users,box,connection,filter,term,fields,for,box,user,info,info,iterable,users,add,info,return,users,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUserEmailAlias(String userId, String emailAliasId);1488797924;Delete an email alias from user's account.__@param userId_- the id of user._@param emailAliasId_- the id of the email alias to delete.;public void deleteUserEmailAlias(String userId, String emailAliasId) {_        try {_            LOG.debug("Deleting email_alias(" + emailAliasId + ") for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (emailAliasId == null) {_                throw new IllegalArgumentException("Parameter 'emailAliasId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            user.deleteEmailAlias(emailAliasId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,an,email,alias,from,user,s,account,param,user,id,the,id,of,user,param,email,alias,id,the,id,of,the,email,alias,to,delete;public,void,delete,user,email,alias,string,user,id,string,email,alias,id,try,log,debug,deleting,email,alias,id,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,alias,id,null,throw,new,illegal,argument,exception,parameter,email,alias,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,delete,email,alias,email,alias,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUserEmailAlias(String userId, String emailAliasId);1505741689;Delete an email alias from user's account.__@param userId_- the id of user._@param emailAliasId_- the id of the email alias to delete.;public void deleteUserEmailAlias(String userId, String emailAliasId) {_        try {_            LOG.debug("Deleting email_alias(" + emailAliasId + ") for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (emailAliasId == null) {_                throw new IllegalArgumentException("Parameter 'emailAliasId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            user.deleteEmailAlias(emailAliasId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,an,email,alias,from,user,s,account,param,user,id,the,id,of,user,param,email,alias,id,the,id,of,the,email,alias,to,delete;public,void,delete,user,email,alias,string,user,id,string,email,alias,id,try,log,debug,deleting,email,alias,id,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,alias,id,null,throw,new,illegal,argument,exception,parameter,email,alias,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,delete,email,alias,email,alias,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUserEmailAlias(String userId, String emailAliasId);1523968787;Delete an email alias from user's account.__@param userId_- the id of user._@param emailAliasId_- the id of the email alias to delete.;public void deleteUserEmailAlias(String userId, String emailAliasId) {_        try {_            LOG.debug("Deleting email_alias(" + emailAliasId + ") for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (emailAliasId == null) {_                throw new IllegalArgumentException("Parameter 'emailAliasId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            user.deleteEmailAlias(emailAliasId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,an,email,alias,from,user,s,account,param,user,id,the,id,of,user,param,email,alias,id,the,id,of,the,email,alias,to,delete;public,void,delete,user,email,alias,string,user,id,string,email,alias,id,try,log,debug,deleting,email,alias,id,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,alias,id,null,throw,new,illegal,argument,exception,parameter,email,alias,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,delete,email,alias,email,alias,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public void deleteUserEmailAlias(String userId, String emailAliasId);1536687142;Delete an email alias from user's account.__@param userId_- the id of user._@param emailAliasId_- the id of the email alias to delete.;public void deleteUserEmailAlias(String userId, String emailAliasId) {_        try {_            LOG.debug("Deleting email_alias(" + emailAliasId + ") for user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (emailAliasId == null) {_                throw new IllegalArgumentException("Parameter 'emailAliasId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            user.deleteEmailAlias(emailAliasId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };delete,an,email,alias,from,user,s,account,param,user,id,the,id,of,user,param,email,alias,id,the,id,of,the,email,alias,to,delete;public,void,delete,user,email,alias,string,user,id,string,email,alias,id,try,log,debug,deleting,email,alias,id,for,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,email,alias,id,null,throw,new,illegal,argument,exception,parameter,email,alias,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,user,delete,email,alias,email,alias,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxFolder.Info moveFolderToUser(String userId, String sourceUserId);1505741689;Move root folder for specified user to current user.__@param userId_- the id of user._@param sourceUserId_- the user id of the user whose files will be the source for this operation.;public BoxFolder.Info moveFolderToUser(String userId, String sourceUserId) {_        try {_            LOG.debug("Moving root folder for user(id=" + sourceUserId + ") to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (sourceUserId == null) {_                throw new IllegalArgumentException("Parameter 'sourceUserId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.moveFolderToUser(sourceUserId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,root,folder,for,specified,user,to,current,user,param,user,id,the,id,of,user,param,source,user,id,the,user,id,of,the,user,whose,files,will,be,the,source,for,this,operation;public,box,folder,info,move,folder,to,user,string,user,id,string,source,user,id,try,log,debug,moving,root,folder,for,user,id,source,user,id,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,source,user,id,null,throw,new,illegal,argument,exception,parameter,source,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,move,folder,to,user,source,user,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxFolder.Info moveFolderToUser(String userId, String sourceUserId);1523968787;Move root folder for specified user to current user.__@param userId_- the id of user._@param sourceUserId_- the user id of the user whose files will be the source for this operation.;public BoxFolder.Info moveFolderToUser(String userId, String sourceUserId) {_        try {_            LOG.debug("Moving root folder for user(id=" + sourceUserId + ") to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (sourceUserId == null) {_                throw new IllegalArgumentException("Parameter 'sourceUserId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.moveFolderToUser(sourceUserId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,root,folder,for,specified,user,to,current,user,param,user,id,the,id,of,user,param,source,user,id,the,user,id,of,the,user,whose,files,will,be,the,source,for,this,operation;public,box,folder,info,move,folder,to,user,string,user,id,string,source,user,id,try,log,debug,moving,root,folder,for,user,id,source,user,id,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,source,user,id,null,throw,new,illegal,argument,exception,parameter,source,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,move,folder,to,user,source,user,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
BoxUsersManager -> public BoxFolder.Info moveFolderToUser(String userId, String sourceUserId);1536687142;Move root folder for specified user to current user.__@param userId_- the id of user._@param sourceUserId_- the user id of the user whose files will be the source for this operation.;public BoxFolder.Info moveFolderToUser(String userId, String sourceUserId) {_        try {_            LOG.debug("Moving root folder for user(id=" + sourceUserId + ") to user(id=" + userId + ")")__            if (userId == null) {_                throw new IllegalArgumentException("Parameter 'userId' can not be null")__            }_            if (sourceUserId == null) {_                throw new IllegalArgumentException("Parameter 'sourceUserId' can not be null")__            }__            BoxUser user = new BoxUser(boxConnection, userId)___            return user.moveFolderToUser(sourceUserId)__        } catch (BoxAPIException e) {_            throw new RuntimeException(_                    String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e)__        }_    };move,root,folder,for,specified,user,to,current,user,param,user,id,the,id,of,user,param,source,user,id,the,user,id,of,the,user,whose,files,will,be,the,source,for,this,operation;public,box,folder,info,move,folder,to,user,string,user,id,string,source,user,id,try,log,debug,moving,root,folder,for,user,id,source,user,id,to,user,id,user,id,if,user,id,null,throw,new,illegal,argument,exception,parameter,user,id,can,not,be,null,if,source,user,id,null,throw,new,illegal,argument,exception,parameter,source,user,id,can,not,be,null,box,user,user,new,box,user,box,connection,user,id,return,user,move,folder,to,user,source,user,id,catch,box,apiexception,e,throw,new,runtime,exception,string,format,box,api,returned,the,error,code,d,n,n,s,e,get,response,code,e,get,response,e
