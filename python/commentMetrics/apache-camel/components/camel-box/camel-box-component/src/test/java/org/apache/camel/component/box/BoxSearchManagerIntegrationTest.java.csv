commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testSearchFolder() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.folderId", "0").     // parameter type is String     headers.put("CamelBox.query", CAMEL_TEST_FILE_NAME).     @SuppressWarnings("rawtypes")     final java.util.Collection result = requestBodyAndHeaders("direct://SEARCHFOLDER", null, headers).     assertNotNull("searchFolder result", result).     assertEquals("searchFolder file found", 1, result.size()).     LOG.debug("searchFolder: " + result). }
false;public;0;5;;public void configure() {     // test route for searchFolder     from("direct://SEARCHFOLDER").to("box://" + PATH_PREFIX + "/searchFolder"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for searchFolder             from("direct://SEARCHFOLDER").to("box://" + PATH_PREFIX + "/searchFolder").         }     }. }
false;public;0;4;;@Before public void setupTest() throws Exception {     createTestFile(). }
false;public;0;4;;@After public void teardownTest() {     deleteTestFile(). }
false;public;0;4;;public BoxAPIConnection getConnection() {     BoxEndpoint endpoint = (BoxEndpoint) context().getEndpoint("box://" + PATH_PREFIX + "/searchFolder").     return endpoint.getBoxConnection(). }
false;private;0;5;;private void createTestFile() throws FileNotFoundException {     BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection()).     InputStream stream = getClass().getResourceAsStream(CAMEL_TEST_FILE).     testFile = rootFolder.uploadFile(stream, CAMEL_TEST_FILE_NAME).getResource(). }
