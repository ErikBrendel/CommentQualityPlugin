commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAddAssignmentToTask() throws Exception {     com.box.sdk.BoxTask result = null.     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.taskId", testTask.getID()).     // parameter type is com.box.sdk.BoxUser     headers.put("CamelBox.assignTo", getCurrentUser()).     result = requestBodyAndHeaders("direct://ADDASSIGNMENTTOTASK", null, headers).     assertNotNull("addAssignmentToTask result", result).     LOG.debug("addAssignmentToTask: " + result). }
false;public;0;30;;@Test public void testAddFileTask() throws Exception {     com.box.sdk.BoxTask result = null.     try {         final Map<String, Object> headers = new HashMap<>().         // parameter type is String         headers.put("CamelBox.fileId", testFile.getID()).         // parameter type is com.box.sdk.BoxTask.Action         headers.put("CamelBox.action", BoxTask.Action.REVIEW).         // parameter type is java.util.Date         Date now = new Date().         Date dueAt = new Date(now.getTime() + TEN_MINUTES_IN_MILLIS).         headers.put("CamelBox.dueAt", dueAt).         // parameter type is String         headers.put("CamelBox.message", CAMEL_TEST_MESSAGE).         result = requestBodyAndHeaders("direct://ADDFILETASK", null, headers).         assertNotNull("addFileTask result", result).         LOG.debug("addFileTask: " + result).     } finally {         if (result != null) {             try {                 result.delete().             } catch (Throwable t) {             }         }     } }
false;public;0;9;;@Test public void testDeleteTask() throws Exception {     // using String message body for single parameter "taskId"     requestBody("direct://DELETETASK", testTask.getID()).     List<BoxTask.Info> tasks = testFile.getTasks().     boolean exists = tasks.size() != 0.     assertEquals("deleteTask task still exists.", false, exists). }
false;public;0;12;;// Receiving "not found" exception from Box API @Ignore @Test public void testDeleteTaskAssignment() throws Exception {     BoxTaskAssignment.Info info = testTask.addAssignment(getCurrentUser()).     // using String message body for single parameter "taskAssignmentId"     requestBody("direct://DELETETASKASSIGNMENT", info.getID()).     List<BoxTaskAssignment.Info> assignments = testTask.getAssignments().     boolean exists = assignments.size() != 0.     assertEquals("deleteTaskAssignment assignment still exists.", false, exists). }
false;public;0;9;;@Test public void testGetFileTasks() throws Exception {     // using String message body for single parameter "fileId"     @SuppressWarnings("rawtypes")     final java.util.List result = requestBody("direct://GETFILETASKS", testFile.getID()).     assertNotNull("getFileTasks result", result).     LOG.debug("getFileTasks: " + result). }
false;public;0;21;;@Ignore @Test public void testGetTaskAssignmentInfo() throws Exception {     BoxTaskAssignment.Info info = testTask.addAssignment(getCurrentUser()).     com.box.sdk.BoxTaskAssignment.Info result = null.     try {         // using String message body for single parameter "taskAssignmentId"         result = requestBody("direct://GETTASKASSIGNMENTINFO", info.getID()).         assertNotNull("getTaskAssignmentInfo result", result).         LOG.debug("getTaskAssignmentInfo: " + result).     } finally {         if (result != null) {             try {                 ((BoxTaskAssignment) result.getResource()).delete().             } catch (Throwable t) {             }         }     } }
false;public;0;9;;@Test public void testGetTaskAssignments() throws Exception {     // using String message body for single parameter "taskId"     @SuppressWarnings("rawtypes")     final java.util.List result = requestBody("direct://GETTASKASSIGNMENTS", testTask.getID()).     assertNotNull("getTaskAssignments result", result).     LOG.debug("getTaskAssignments: " + result). }
false;public;0;8;;@Test public void testGetTaskInfo() throws Exception {     // using String message body for single parameter "taskId"     final com.box.sdk.BoxTask.Info result = requestBody("direct://GETTASKINFO", testTask.getID()).     assertNotNull("getTaskInfo result", result).     LOG.debug("getTaskInfo: " + result). }
false;public;0;16;;// No way to change BoxTask.Info parameters @Ignore @Test public void testUpdateTaskInfo() throws Exception {     BoxTask.Info info = testTask.getInfo().     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.taskId", testTask.getID()).     // parameter type is com.box.sdk.BoxTask.Info     headers.put("CamelBox.info", info).     final com.box.sdk.BoxTask result = requestBodyAndHeaders("direct://UPDATETASKINFO", null, headers).     assertNotNull("updateTaskInfo result", result).     LOG.debug("updateTaskInfo: " + result). }
false;public;0;31;;public void configure() {     // test route for addAssignmentToTask     from("direct://ADDASSIGNMENTTOTASK").to("box://" + PATH_PREFIX + "/addAssignmentToTask").     // test route for addFileTask     from("direct://ADDFILETASK").to("box://" + PATH_PREFIX + "/addFileTask").     // test route for deleteTask     from("direct://DELETETASK").to("box://" + PATH_PREFIX + "/deleteTask?inBody=taskId").     // test route for deleteTaskAssignment     from("direct://DELETETASKASSIGNMENT").to("box://" + PATH_PREFIX + "/deleteTaskAssignment?inBody=taskAssignmentId").     // test route for getFileTasks     from("direct://GETFILETASKS").to("box://" + PATH_PREFIX + "/getFileTasks?inBody=fileId").     // test route for getTaskAssignmentInfo     from("direct://GETTASKASSIGNMENTINFO").to("box://" + PATH_PREFIX + "/getTaskAssignmentInfo?inBody=taskAssignmentId").     // test route for getTaskAssignments     from("direct://GETTASKASSIGNMENTS").to("box://" + PATH_PREFIX + "/getTaskAssignments?inBody=taskId").     // test route for getTaskInfo     from("direct://GETTASKINFO").to("box://" + PATH_PREFIX + "/getTaskInfo?inBody=taskId").     // test route for updateTaskInfo     from("direct://UPDATETASKINFO").to("box://" + PATH_PREFIX + "/updateTaskInfo"). }
false;protected;0;36;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for addAssignmentToTask             from("direct://ADDASSIGNMENTTOTASK").to("box://" + PATH_PREFIX + "/addAssignmentToTask").             // test route for addFileTask             from("direct://ADDFILETASK").to("box://" + PATH_PREFIX + "/addFileTask").             // test route for deleteTask             from("direct://DELETETASK").to("box://" + PATH_PREFIX + "/deleteTask?inBody=taskId").             // test route for deleteTaskAssignment             from("direct://DELETETASKASSIGNMENT").to("box://" + PATH_PREFIX + "/deleteTaskAssignment?inBody=taskAssignmentId").             // test route for getFileTasks             from("direct://GETFILETASKS").to("box://" + PATH_PREFIX + "/getFileTasks?inBody=fileId").             // test route for getTaskAssignmentInfo             from("direct://GETTASKASSIGNMENTINFO").to("box://" + PATH_PREFIX + "/getTaskAssignmentInfo?inBody=taskAssignmentId").             // test route for getTaskAssignments             from("direct://GETTASKASSIGNMENTS").to("box://" + PATH_PREFIX + "/getTaskAssignments?inBody=taskId").             // test route for getTaskInfo             from("direct://GETTASKINFO").to("box://" + PATH_PREFIX + "/getTaskInfo?inBody=taskId").             // test route for updateTaskInfo             from("direct://UPDATETASKINFO").to("box://" + PATH_PREFIX + "/updateTaskInfo").         }     }. }
false;public;0;5;;@Before public void setupTest() throws Exception {     createTestFile().     createTestTask(). }
false;public;0;5;;@After public void teardownTest() {     deleteTestTask().     deleteTestFile(). }
false;public;0;4;;public BoxAPIConnection getConnection() {     BoxEndpoint endpoint = (BoxEndpoint) context().getEndpoint("box://" + PATH_PREFIX + "/addAssignmentToTask").     return endpoint.getBoxConnection(). }
false;private;0;5;;private void createTestTask() {     Date now = new Date().     Date dueAt = new Date(now.getTime() + TEN_MINUTES_IN_MILLIS).     testTask = testFile.addTask(Action.REVIEW, CAMEL_TEST_MESSAGE, dueAt).getResource(). }
false;private;0;7;;private void deleteTestTask() {     try {         testTask.delete().     } catch (Throwable t) {     }     testTask = null. }
false;private;0;5;;private void createTestFile() throws FileNotFoundException {     BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection()).     InputStream stream = getClass().getResourceAsStream(CAMEL_TEST_FILE).     testFile = rootFolder.uploadFile(stream, CAMEL_TEST_FILE_NAME).getResource(). }
false;private;0;3;;private BoxUser getCurrentUser() {     return BoxUser.getCurrentUser(getConnection()). }
