commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testAddFileComment() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.fileId", testFile.getID()).     // parameter type is String     headers.put("CamelBox.message", CAMEL_TEST_FILE_COMMENT).     final com.box.sdk.BoxFile result = requestBodyAndHeaders("direct://ADDFILECOMMENT", null, headers).     assertNotNull("addFileComment result", result).     assertNotNull("addFileComment comments", result.getComments()).     assertTrue("changeCommentMessage comments size", result.getComments().size() > 0).     assertEquals("changeCommentMessage comment message", CAMEL_TEST_FILE_COMMENT, result.getComments().get(0).getMessage()).     LOG.debug("addFileComment: " + result). }
false;public;0;18;;@Test public void testChangeCommentMessage() throws Exception {     BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT).     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.commentId", commentInfo.getID()).     // parameter type is String     headers.put("CamelBox.message", CAMEL_TEST_FILE_CHANGED_COMMENT).     final com.box.sdk.BoxComment result = requestBodyAndHeaders("direct://CHANGECOMMENTMESSAGE", null, headers).     assertNotNull("changeCommentMessage result", result).     assertNotNull("changeCommentMessage message", result.getInfo().getMessage()).     assertEquals("changeCommentMessage message", CAMEL_TEST_FILE_CHANGED_COMMENT, result.getInfo().getMessage()).     LOG.debug("changeCommentMessage: " + result). }
false;public;0;11;;@Test public void testDeleteComment() throws Exception {     BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT).     // using String message body for single parameter "commentId"     requestBody("direct://DELETECOMMENT", commentInfo.getID()).     List<BoxComment.Info> comments = testFile.getComments().     assertNotNull("deleteComment comments", comments).     assertEquals("deleteComment comments empty", 0, comments.size()). }
false;public;0;12;;@Test public void testGetCommentInfo() throws Exception {     BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT).     // using String message body for single parameter "commentId"     final com.box.sdk.BoxComment.Info result = requestBody("direct://GETCOMMENTINFO", commentInfo.getID()).     assertNotNull("getCommentInfo result", result).     assertEquals("getCommentInfo message", CAMEL_TEST_FILE_COMMENT, result.getMessage()).     LOG.debug("getCommentInfo: " + result). }
false;public;0;12;;@Test public void testGetFileComments() throws Exception {     testFile.addComment(CAMEL_TEST_FILE_COMMENT).     // using String message body for single parameter "fileId"     @SuppressWarnings("rawtypes")     final java.util.List result = requestBody("direct://GETFILECOMMENTS", testFile.getID()).     assertNotNull("getFileComments result", result).     assertEquals("getFileComments size", 1, result.size()).     LOG.debug("getFileComments: " + result). }
false;public;0;17;;@Test public void testReplyToComment() throws Exception {     BoxComment.Info commentInfo = testFile.addComment(CAMEL_TEST_FILE_COMMENT).     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.commentId", commentInfo.getID()).     // parameter type is String     headers.put("CamelBox.message", CAMEL_TEST_FILE_REPLY_COMMENT).     final com.box.sdk.BoxComment result = requestBodyAndHeaders("direct://REPLYTOCOMMENT", null, headers).     assertNotNull("replyToComment result", result).     assertEquals("replyToComment result", CAMEL_TEST_FILE_REPLY_COMMENT, result.getInfo().getMessage()).     LOG.debug("replyToComment: " + result). }
false;public;0;20;;public void configure() {     // test route for addFileComment     from("direct://ADDFILECOMMENT").to("box://" + PATH_PREFIX + "/addFileComment").     // test route for changeCommentMessage     from("direct://CHANGECOMMENTMESSAGE").to("box://" + PATH_PREFIX + "/changeCommentMessage").     // test route for deleteComment     from("direct://DELETECOMMENT").to("box://" + PATH_PREFIX + "/deleteComment?inBody=commentId").     // test route for getCommentInfo     from("direct://GETCOMMENTINFO").to("box://" + PATH_PREFIX + "/getCommentInfo?inBody=commentId").     // test route for getFileComments     from("direct://GETFILECOMMENTS").to("box://" + PATH_PREFIX + "/getFileComments?inBody=fileId").     // test route for replyToComment     from("direct://REPLYTOCOMMENT").to("box://" + PATH_PREFIX + "/replyToComment"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for addFileComment             from("direct://ADDFILECOMMENT").to("box://" + PATH_PREFIX + "/addFileComment").             // test route for changeCommentMessage             from("direct://CHANGECOMMENTMESSAGE").to("box://" + PATH_PREFIX + "/changeCommentMessage").             // test route for deleteComment             from("direct://DELETECOMMENT").to("box://" + PATH_PREFIX + "/deleteComment?inBody=commentId").             // test route for getCommentInfo             from("direct://GETCOMMENTINFO").to("box://" + PATH_PREFIX + "/getCommentInfo?inBody=commentId").             // test route for getFileComments             from("direct://GETFILECOMMENTS").to("box://" + PATH_PREFIX + "/getFileComments?inBody=fileId").             // test route for replyToComment             from("direct://REPLYTOCOMMENT").to("box://" + PATH_PREFIX + "/replyToComment").         }     }. }
false;public;0;4;;@Before public void setupTest() throws Exception {     createTestFile(). }
false;public;0;4;;@After public void teardownTest() {     deleteTestFile(). }
false;public;0;4;;public BoxAPIConnection getConnection() {     BoxEndpoint endpoint = (BoxEndpoint) context().getEndpoint("box://" + PATH_PREFIX + "/addFileComment").     return endpoint.getBoxConnection(). }
false;private;0;5;;private void createTestFile() throws FileNotFoundException {     BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection()).     InputStream stream = getClass().getResourceAsStream(CAMEL_TEST_FILE).     testFile = rootFolder.uploadFile(stream, CAMEL_TEST_FILE_NAME).getResource(). }
