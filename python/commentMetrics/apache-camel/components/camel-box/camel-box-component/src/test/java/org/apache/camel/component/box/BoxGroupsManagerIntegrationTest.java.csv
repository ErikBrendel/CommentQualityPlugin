commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testAddGroupMembership() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.groupId", testGroup.getID()).     // parameter type is String     headers.put("CamelBox.userId", testUser.getID()).     // parameter type is com.box.sdk.BoxGroupMembership.Role     headers.put("CamelBox.role", null).     final com.box.sdk.BoxGroupMembership result = requestBodyAndHeaders("direct://ADDGROUPMEMBERSHIP", null, headers).     assertNotNull("addGroupMembership result", result).     LOG.debug("addGroupMembership: " + result). }
false;public;0;19;;@Test public void testCreateGroup() throws Exception {     com.box.sdk.BoxGroup result = null.     try {         // using String message body for single parameter "name"         result = requestBody("direct://CREATEGROUP", CAMEL_TEST_CREATE_GROUP_NAME).         assertNotNull("createGroup result", result).         assertEquals(CAMEL_TEST_CREATE_GROUP_NAME, result.getInfo().getName()).         LOG.debug("createGroup: " + result).     } finally {         if (result != null) {             try {                 result.delete().             } catch (Throwable t) {             }         }     } }
false;public;0;13;;@Test public void testDeleteGroup() throws Exception {     // using String message body for single parameter "groupId"     requestBody("direct://DELETEGROUP", testGroup.getID()).     testGroup = null.     Iterable<BoxGroup.Info> it = BoxGroup.getAllGroups(getConnection()).     int searchResults = sizeOfIterable(it).     boolean exists = searchResults > 0 ? true : false.     assertEquals("deleteGroup exists", false, exists).     LOG.debug("deleteGroup: exists? " + exists). }
false;public;0;11;;@Test public void testDeleteGroupMembership() throws Exception {     BoxGroupMembership.Info info = testGroup.addMembership(testUser, BoxGroupMembership.Role.MEMBER).     // using String message body for single parameter "groupMembershipId"     requestBody("direct://DELETEGROUPMEMBERSHIP", info.getID()).     Collection<BoxGroupMembership.Info> memberships = testGroup.getMemberships().     assertNotNull("deleteGroupMemberships memberships", memberships).     assertEquals("deleteGroupMemberships memberships exists", 0, memberships.size()). }
false;public;0;7;;@Test public void testGetAllGroups() throws Exception {     @SuppressWarnings("rawtypes")     final java.util.Collection result = requestBody("direct://GETALLGROUPS", null).     assertNotNull("getAllGroups result", result).     LOG.debug("getAllGroups: " + result). }
false;public;0;8;;@Test public void testGetGroupInfo() throws Exception {     // using String message body for single parameter "groupId"     final com.box.sdk.BoxGroup.Info result = requestBody("direct://GETGROUPINFO", testGroup.getID()).     assertNotNull("getGroupInfo result", result).     LOG.debug("getGroupInfo: " + result). }
false;public;0;20;;@Test public void testUpdateGroupInfo() throws Exception {     BoxGroup.Info info = testGroup.getInfo().     info.setDescription(CAMEL_TEST_GROUP_DESCRIPTION).     try {         final Map<String, Object> headers = new HashMap<>().         // parameter type is String         headers.put("CamelBox.groupId", testGroup.getID()).         // parameter type is com.box.sdk.BoxGroup.Info         headers.put("CamelBox.groupInfo", info).         final com.box.sdk.BoxGroup result = requestBodyAndHeaders("direct://UPDATEGROUPINFO", null, headers).         assertNotNull("updateGroupInfo result", result).         LOG.debug("updateGroupInfo: " + result).     } finally {         info = testGroup.getInfo().         info.setDescription("").         testGroup.updateInfo(info).     } }
false;public;0;10;;@Test public void testGetGroupMembershipInfo() throws Exception {     BoxGroupMembership.Info info = testGroup.addMembership(testUser, BoxGroupMembership.Role.MEMBER).     // using String message body for single parameter "groupMemebershipId"     final com.box.sdk.BoxGroupMembership.Info result = requestBody("direct://GETGROUPMEMBERSHIPINFO", info.getID()).     assertNotNull("getGroupMembershipInfo result", result).     LOG.debug("getGroupMembershipInfo: " + result). }
false;public;0;8;;@Test public void testGetGroupMemberships() throws Exception {     // using String message body for single parameter "groupId"     @SuppressWarnings("rawtypes")     final java.util.Collection result = requestBody("direct://GETGROUPMEMBERSHIPS", testGroup.getID()).     assertNotNull("getGroupMemberships result", result).     LOG.debug("getGroupMemberships: " + result). }
false;public;0;17;;@Test public void testUpdateGroupMembershipInfo() throws Exception {     BoxGroupMembership.Info info = testGroup.addMembership(testUser, BoxGroupMembership.Role.MEMBER).     info.setRole(BoxGroupMembership.Role.ADMIN).     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.groupMemebershipId", info.getID()).     // parameter type is com.box.sdk.BoxGroupMembership.Info     headers.put("CamelBox.info", info).     final com.box.sdk.BoxGroupMembership result = requestBodyAndHeaders("direct://UPDATEGROUPMEMBERSHIPINFO", null, headers).     assertNotNull("updateGroupMembershipInfo result", result).     LOG.debug("updateGroupMembershipInfo: " + result). }
false;public;0;32;;public void configure() {     // test route for addGroupMembership     from("direct://ADDGROUPMEMBERSHIP").to("box://" + PATH_PREFIX + "/addGroupMembership").     // test route for createGroup     from("direct://CREATEGROUP").to("box://" + PATH_PREFIX + "/createGroup?inBody=name").     // test route for deleteGroup     from("direct://DELETEGROUP").to("box://" + PATH_PREFIX + "/deleteGroup?inBody=groupId").     // test route for deleteGroupMembership     from("direct://DELETEGROUPMEMBERSHIP").to("box://" + PATH_PREFIX + "/deleteGroupMembership?inBody=groupMembershipId").     // test route for getAllGroups     from("direct://GETALLGROUPS").to("box://" + PATH_PREFIX + "/getAllGroups").     // test route for getGroupInfo     from("direct://GETGROUPINFO").to("box://" + PATH_PREFIX + "/getGroupInfo?inBody=groupId").     // test route for getGroupMembershipInfo     from("direct://GETGROUPMEMBERSHIPINFO").to("box://" + PATH_PREFIX + "/getGroupMembershipInfo?inBody=groupMemebershipId").     // test route for getGroupMemberships     from("direct://GETGROUPMEMBERSHIPS").to("box://" + PATH_PREFIX + "/getGroupMemberships?inBody=groupId").     // test route for updateGroupMembershipInfo     from("direct://UPDATEGROUPMEMBERSHIPINFO").to("box://" + PATH_PREFIX + "/updateGroupMembershipInfo"). }
false;protected;0;37;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for addGroupMembership             from("direct://ADDGROUPMEMBERSHIP").to("box://" + PATH_PREFIX + "/addGroupMembership").             // test route for createGroup             from("direct://CREATEGROUP").to("box://" + PATH_PREFIX + "/createGroup?inBody=name").             // test route for deleteGroup             from("direct://DELETEGROUP").to("box://" + PATH_PREFIX + "/deleteGroup?inBody=groupId").             // test route for deleteGroupMembership             from("direct://DELETEGROUPMEMBERSHIP").to("box://" + PATH_PREFIX + "/deleteGroupMembership?inBody=groupMembershipId").             // test route for getAllGroups             from("direct://GETALLGROUPS").to("box://" + PATH_PREFIX + "/getAllGroups").             // test route for getGroupInfo             from("direct://GETGROUPINFO").to("box://" + PATH_PREFIX + "/getGroupInfo?inBody=groupId").             // test route for getGroupMembershipInfo             from("direct://GETGROUPMEMBERSHIPINFO").to("box://" + PATH_PREFIX + "/getGroupMembershipInfo?inBody=groupMemebershipId").             // test route for getGroupMemberships             from("direct://GETGROUPMEMBERSHIPS").to("box://" + PATH_PREFIX + "/getGroupMemberships?inBody=groupId").             // test route for updateGroupMembershipInfo             from("direct://UPDATEGROUPMEMBERSHIPINFO").to("box://" + PATH_PREFIX + "/updateGroupMembershipInfo").         }     }. }
false;public;0;5;;@Before public void setupTest() throws Exception {     createTestGroup().     createTestUser(). }
false;public;0;5;;@After public void teardownTest() {     deleteTestGroup().     deleteTestUser(). }
false;public;0;4;;public BoxAPIConnection getConnection() {     BoxEndpoint endpoint = (BoxEndpoint) context().getEndpoint("box://" + PATH_PREFIX + "/addGroupMembership").     return endpoint.getBoxConnection(). }
false;private;0;3;;private void createTestGroup() {     testGroup = BoxGroup.createGroup(getConnection(), CAMEL_TEST_GROUP_NAME).getResource(). }
false;private;0;9;;private void deleteTestGroup() {     if (testGroup != null) {         try {             testGroup.delete().         } catch (Throwable t) {         }         testGroup = null.     } }
false;private;0;3;;private void createTestUser() {     testUser = getCurrentUser(). }
false;private;0;5;;private void deleteTestUser() {     if (testUser != null) {         testUser = null.     } }
false;private;0;3;;private BoxUser getCurrentUser() {     return BoxUser.getCurrentUser(getConnection()). }
false;private;1;13;;private int sizeOfIterable(Iterable<?> it) {     if (it instanceof Collection) {         return ((Collection<?>) it).size().     } else {         int i = 0.         for (@SuppressWarnings("unused") Object obj : it) {             i++.         }         return i.     } }
