commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testListen() throws Exception {     try {         // generate a file create event         createTestFile().     } finally {         // generate a file delete event         deleteTestFile().     }     MockEndpoint mockEndpoint = getMockEndpoint("mock:boxEvents").     mockEndpoint.expectedMinimumMessageCount(2).     mockEndpoint.setResultWaitTime(TimeUnit.MILLISECONDS.convert(30, TimeUnit.SECONDS)).     mockEndpoint.assertIsSatisfied().     final List<Exchange> exchanges = mockEndpoint.getExchanges().     assertNotNull("poll result", exchanges).     assertFalse("poll result", exchanges.isEmpty()).     LOG.debug("poll result: " + exchanges). }
false;public;0;6;;public void configure() {     // test route for events     from("box://" + PATH_PREFIX + "/listen?startingPosition=0").to("mock:boxEvents"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for events             from("box://" + PATH_PREFIX + "/listen?startingPosition=0").to("mock:boxEvents").         }     }. }
false;public;0;5;;public BoxAPIConnection getConnection() {     BoxEndpoint endpoint = (BoxEndpoint) context().getEndpoint("box://" + PATH_PREFIX + "/listen?startingPosition=0").     return endpoint.getBoxConnection(). }
false;private;0;5;;private void createTestFile() throws FileNotFoundException {     BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection()).     InputStream stream = getClass().getResourceAsStream(CAMEL_TEST_FILE).     testFile = rootFolder.uploadFile(stream, CAMEL_TEST_FILE_NAME).getResource(). }
