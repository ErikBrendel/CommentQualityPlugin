commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testAddFolderCollaborationByEmail() throws Exception {     // delete collaborator created by setupTest     deleteTestCollaborator().     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.folderId", testFolder.getID()).     // parameter type is String     headers.put("CamelBox.email", CAMEL_TEST_COLLABORATOR_EMAIL).     // parameter type is com.box.sdk.BoxCollaboration.Role     headers.put("CamelBox.role", BoxCollaboration.Role.EDITOR).     final com.box.sdk.BoxCollaboration result = requestBodyAndHeaders("direct://ADDFOLDERCOLLABORATIONBYEMAIL", testFolder.getID(), headers).     assertNotNull("addFolderCollaboration result", result).     LOG.debug("addFolderCollaboration: " + result). }
false;public;0;32;;@Test public void testAddFolderCollaboration() throws Exception {     // delete collaborator created by setupTest     deleteTestCollaborator().     BoxUser user = null.     try {         // create test collaborator         CreateUserParams params = new CreateUserParams().         // 1 GB         params.setSpaceAmount(1073741824).         user = BoxUser.createAppUser(getConnection(), CAMEL_TEST_COLLABORATOR_NAME, params).getResource().         final Map<String, Object> headers = new HashMap<>().         // parameter type is String         headers.put("CamelBox.folderId", testFolder.getID()).         // parameter type is String         headers.put("CamelBox.collaborator", user).         // parameter type is com.box.sdk.BoxCollaboration.Role         headers.put("CamelBox.role", BoxCollaboration.Role.EDITOR).         final com.box.sdk.BoxCollaboration result = requestBodyAndHeaders("direct://ADDFOLDERCOLLABORATION", testFolder.getID(), headers).         assertNotNull("addFolderCollaboration result", result).         LOG.debug("addFolderCollaboration: " + result).     } catch (BoxAPIException e) {         throw new RuntimeException(String.format("Box API returned the error code %d\n\n%s", e.getResponseCode(), e.getResponse()), e).     } finally {         if (user != null) {             user.delete(false, true).         }     } }
false;public;0;9;;@Test public void testGetCollaborationInfo() throws Exception {     // using String message body for single parameter "collaborationId"     final com.box.sdk.BoxCollaboration.Info result = requestBody("direct://GETCOLLABORATIONINFO", testCollaboration.getID()).     assertNotNull("getCollaborationInfo result", result).     LOG.debug("getCollaborationInfo: " + result). }
false;public;0;9;;@Test public void testGetFolderCollaborations() throws Exception {     // using String message body for single parameter "folderId"     @SuppressWarnings("rawtypes")     final java.util.Collection result = requestBody("direct://GETFOLDERCOLLABORATIONS", testFolder.getID()).     assertNotNull("getFolderCollaborations result", result).     LOG.debug("getFolderCollaborations: " + result). }
false;public;0;8;;@SuppressWarnings("rawtypes") @Test public void testGetPendingCollaborations() throws Exception {     final java.util.Collection result = requestBody("direct://GETPENDINGCOLLABORATIONS", null).     assertNotNull("getPendingCollaborations result", result).     LOG.debug("getPendingCollaborations: " + result). }
false;public;0;19;;@Test public void testUpdateCollaborationInfo() throws Exception {     final Map<String, Object> headers = new HashMap<>().     // parameter type is String     headers.put("CamelBox.collaborationId", testCollaboration.getID()).     // parameter type is com.box.sdk.BoxCollaboration.Info     BoxCollaboration.Info info = testCollaboration.getInfo().     info.setRole(BoxCollaboration.Role.PREVIEWER).     headers.put("CamelBox.info", info).     final com.box.sdk.BoxCollaboration result = requestBodyAndHeaders("direct://UPDATECOLLABORATIONINFO", null, headers).     assertNotNull("updateCollaborationInfo result", result).     assertNotNull("updateCollaborationInfo info", result.getInfo()).     assertEquals("updateCollaborationInfo info", BoxCollaboration.Role.PREVIEWER, result.getInfo().getRole()).     LOG.debug("updateCollaborationInfo: " + result). }
false;public;0;28;;public void configure() {     // test route for addFolderCollaboration     from("direct://ADDFOLDERCOLLABORATIONBYEMAIL").to("box://" + PATH_PREFIX + "/addFolderCollaborationByEmail").     // test route for addFolderCollaboration     from("direct://ADDFOLDERCOLLABORATION").to("box://" + PATH_PREFIX + "/addFolderCollaboration").     // test route for deleteCollaboration     from("direct://DELETECOLLABORATION").to("box://" + PATH_PREFIX + "/deleteCollaboration?inBody=collaborationId").     // test route for getCollaborationInfo     from("direct://GETCOLLABORATIONINFO").to("box://" + PATH_PREFIX + "/getCollaborationInfo?inBody=collaborationId").     // test route for getFolderCollaborations     from("direct://GETFOLDERCOLLABORATIONS").to("box://" + PATH_PREFIX + "/getFolderCollaborations?inBody=folderId").     // test route for getPendingCollaborations     from("direct://GETPENDINGCOLLABORATIONS").to("box://" + PATH_PREFIX + "/getPendingCollaborations").     // test route for updateCollaborationInfo     from("direct://UPDATECOLLABORATIONINFO").to("box://" + PATH_PREFIX + "/updateCollaborationInfo"). }
false;protected;0;33;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // test route for addFolderCollaboration             from("direct://ADDFOLDERCOLLABORATIONBYEMAIL").to("box://" + PATH_PREFIX + "/addFolderCollaborationByEmail").             // test route for addFolderCollaboration             from("direct://ADDFOLDERCOLLABORATION").to("box://" + PATH_PREFIX + "/addFolderCollaboration").             // test route for deleteCollaboration             from("direct://DELETECOLLABORATION").to("box://" + PATH_PREFIX + "/deleteCollaboration?inBody=collaborationId").             // test route for getCollaborationInfo             from("direct://GETCOLLABORATIONINFO").to("box://" + PATH_PREFIX + "/getCollaborationInfo?inBody=collaborationId").             // test route for getFolderCollaborations             from("direct://GETFOLDERCOLLABORATIONS").to("box://" + PATH_PREFIX + "/getFolderCollaborations?inBody=folderId").             // test route for getPendingCollaborations             from("direct://GETPENDINGCOLLABORATIONS").to("box://" + PATH_PREFIX + "/getPendingCollaborations").             // test route for updateCollaborationInfo             from("direct://UPDATECOLLABORATIONINFO").to("box://" + PATH_PREFIX + "/updateCollaborationInfo").         }     }. }
false;public;0;5;;@Before public void setupTest() throws Exception {     createTestFolder().     createTestCollaborator(). }
false;public;0;5;;@After public void teardownTest() {     deleteTestCollaborator().     deleteTestFolder(). }
false;public;0;5;;public BoxAPIConnection getConnection() {     BoxEndpoint endpoint = (BoxEndpoint) context().getEndpoint("box://" + PATH_PREFIX + "/addFolderCollaboration").     return endpoint.getBoxConnection(). }
false;private;0;4;;private void createTestFolder() throws FileNotFoundException {     BoxFolder rootFolder = BoxFolder.getRootFolder(getConnection()).     testFolder = rootFolder.createFolder(CAMEL_TEST_FOLDER).getResource(). }
false;private;0;4;;private void createTestCollaborator() {     testCollaboration = testFolder.collaborate(CAMEL_TEST_COLLABORATOR_EMAIL, BoxCollaboration.Role.EDITOR).getResource(). }
false;private;0;6;;private void deleteTestCollaborator() {     if (testCollaboration != null) {         testCollaboration.delete().         testCollaboration = null.     } }
