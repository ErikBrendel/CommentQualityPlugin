commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public BoxComponent getComponent() {     return (BoxComponent) super.getComponent(). }
true;public;0;3;/**  * The BoxAPIConnection of endpoint.  */ ;/**  * The BoxAPIConnection of endpoint.  */ public BoxAPIConnection getBoxConnection() {     return boxConnection. }
false;public;0;3;;public Producer createProducer() throws Exception {     return new BoxProducer(this). }
false;public;1;10;;public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final BoxConsumer consumer = new BoxConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<BoxConfiguration> getPropertiesHelper() {     return BoxPropertiesHelper.getHelper(). }
false;protected;0;3;;protected String getThreadProfileName() {     return BoxConstants.THREAD_PROFILE_NAME. }
false;protected;0;6;;@Override protected void afterConfigureProperties() {     // create connection eagerly, a good way to validate configuration     createBoxConnection(). }
false;public;2;8;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     if (apiProxy == null) {         // create API proxy lazily         createApiProxy(args).     }     return apiProxy. }
false;private;0;10;;private void createBoxConnection() {     final BoxComponent component = getComponent().     this.boxConnectionShared = configuration.equals(getComponent().getConfiguration()).     if (boxConnectionShared) {         // get shared singleton connection from Component         this.boxConnection = component.getBoxConnection().     } else {         this.boxConnection = BoxConnectionHelper.createConnection(configuration).     } }
false;private;1;36;;private void createApiProxy(Map<String, Object> args) {     switch(apiName) {         case COLLABORATIONS:             apiProxy = new BoxCollaborationsManager(getBoxConnection()).             break.         case COMMENTS:             apiProxy = new BoxCommentsManager(getBoxConnection()).             break.         case EVENT_LOGS:             apiProxy = new BoxEventLogsManager(getBoxConnection()).             break.         case EVENTS:             apiProxy = new BoxEventsManager(getBoxConnection()).             break.         case FILES:             apiProxy = new BoxFilesManager(getBoxConnection()).             break.         case FOLDERS:             apiProxy = new BoxFoldersManager(getBoxConnection()).             break.         case GROUPS:             apiProxy = new BoxGroupsManager(getBoxConnection()).             break.         case SEARCH:             apiProxy = new BoxSearchManager(getBoxConnection()).             break.         case TASKS:             apiProxy = new BoxTasksManager(getBoxConnection()).             break.         case USERS:             apiProxy = new BoxUsersManager(getBoxConnection()).             break.         default:             throw new IllegalArgumentException("Invalid API name " + apiName).     } }
