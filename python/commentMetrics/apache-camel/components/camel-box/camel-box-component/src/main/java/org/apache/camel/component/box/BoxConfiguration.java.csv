commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * What kind of operation to perform  *  * @return the API Name  */ ;/**  * What kind of operation to perform  *  * @return the API Name  */ public BoxApiName getApiName() {     return apiName. }
true;public;1;3;/**  * What kind of operation to perform  *  * @param apiName  *            the API Name to set  */ ;/**  * What kind of operation to perform  *  * @param apiName  *            the API Name to set  */ public void setApiName(BoxApiName apiName) {     this.apiName = apiName. }
true;public;0;3;/**  * What sub operation to use for the selected operation  *  * @return the methodName  */ ;/**  * What sub operation to use for the selected operation  *  * @return the methodName  */ public String getMethodName() {     return methodName. }
true;public;1;3;/**  * What sub operation to use for the selected operation  *  * @param methodName  *            the methodName to set  */ ;/**  * What sub operation to use for the selected operation  *  * @param methodName  *            the methodName to set  */ public void setMethodName(String methodName) {     this.methodName = methodName. }
true;public;0;3;/**  * The enterprise ID to use for an App Enterprise.  *  * @return the enterpriseId  */ ;/**  * The enterprise ID to use for an App Enterprise.  *  * @return the enterpriseId  */ public String getEnterpriseId() {     return enterpriseId. }
true;public;1;3;/**  * The enterprise ID to use for an App Enterprise.  *  * @param enterpriseId  *            the enterpriseId to set  */ ;/**  * The enterprise ID to use for an App Enterprise.  *  * @param enterpriseId  *            the enterpriseId to set  */ public void setEnterpriseId(String enterpriseId) {     this.enterpriseId = enterpriseId. }
true;public;0;3;/**  * The user ID to use for an App User.  *  * @return the userId  */ ;/**  * The user ID to use for an App User.  *  * @return the userId  */ public String getUserId() {     return userId. }
true;public;1;3;/**  * The user ID to use for an App User.  *  * @param userId  *            the userId to set  */ ;/**  * The user ID to use for an App User.  *  * @param userId  *            the userId to set  */ public void setUserId(String userId) {     this.userId = userId. }
true;public;0;3;/**  * The ID for public key for validating the JWT signature.  *  * @return the publicKeyId  */ ;/**  * The ID for public key for validating the JWT signature.  *  * @return the publicKeyId  */ public String getPublicKeyId() {     return publicKeyId. }
true;public;1;3;/**  * The ID for public key for validating the JWT signature.  *  * @param publicKeyId  *            the publicKeyId to set  */ ;/**  * The ID for public key for validating the JWT signature.  *  * @param publicKeyId  *            the publicKeyId to set  */ public void setPublicKeyId(String publicKeyId) {     this.publicKeyId = publicKeyId. }
true;public;0;3;/**  * The private key for generating the JWT signature.  *  * @return the privateKey  */ ;/**  * The private key for generating the JWT signature.  *  * @return the privateKey  */ public String getPrivateKeyFile() {     return privateKeyFile. }
true;public;1;3;/**  * The private key for generating the JWT signature.  *  * @param privateKey  *            the privateKey to set  */ ;/**  * The private key for generating the JWT signature.  *  * @param privateKey  *            the privateKey to set  */ public void setPrivateKeyFile(String privateKey) {     this.privateKeyFile = privateKey. }
true;public;0;3;/**  * The password for the private key.  *  * @return the privateKeyPassword  */ ;/**  * The password for the private key.  *  * @return the privateKeyPassword  */ public String getPrivateKeyPassword() {     return privateKeyPassword. }
true;public;1;3;/**  * The password for the private key.  *  * @param privateKeyPassword  *            the privateKeyPassword to set  */ ;/**  * The password for the private key.  *  * @param privateKeyPassword  *            the privateKeyPassword to set  */ public void setPrivateKeyPassword(String privateKeyPassword) {     this.privateKeyPassword = privateKeyPassword. }
true;public;0;3;/**  * The maximum number of access tokens in cache.  *  * @return the maxCacheEntries  */ ;/**  * The maximum number of access tokens in cache.  *  * @return the maxCacheEntries  */ public int getMaxCacheEntries() {     return maxCacheEntries. }
true;public;1;3;/**  * The maximum number of access tokens in cache.  *  * @param maxCacheEntries  *            the maxCacheEntries to set  */ ;/**  * The maximum number of access tokens in cache.  *  * @param maxCacheEntries  *            the maxCacheEntries to set  */ public void setMaxCacheEntries(int maxCacheEntries) {     this.maxCacheEntries = maxCacheEntries. }
false;public;1;7;;public void setMaxCacheEntries(String maxCacheEntries) {     try {         this.maxCacheEntries = Integer.decode(maxCacheEntries).     } catch (NumberFormatException e) {         throw new RuntimeCamelException(String.format("Invalid 'maxCacheEntries' value: %s", maxCacheEntries), e).     } }
true;public;0;3;/**  * The type of encryption algorithm for JWT.  *  * @return the encryptionAlgorithm  */ ;/**  * The type of encryption algorithm for JWT.  *  * @return the encryptionAlgorithm  */ public EncryptionAlgorithm getEncryptionAlgorithm() {     return encryptionAlgorithm. }
true;public;1;3;/**  * The type of encryption algorithm for JWT.  *  * <p>  * Supported Algorithms:  * <ul>  * <li>RSA_SHA_256</li>  * <li>RSA_SHA_384</li>  * <li>RSA_SHA_512</li>  * </ul>  *  * @param encryptionAlgorithm  *            the encryptionAlgorithm to set  */ ;/**  * The type of encryption algorithm for JWT.  *  * <p>  * Supported Algorithms:  * <ul>  * <li>RSA_SHA_256</li>  * <li>RSA_SHA_384</li>  * <li>RSA_SHA_512</li>  * </ul>  *  * @param encryptionAlgorithm  *            the encryptionAlgorithm to set  */ public void setEncryptionAlgorithm(EncryptionAlgorithm encryptionAlgorithm) {     this.encryptionAlgorithm = encryptionAlgorithm. }
false;public;1;15;;public void setEncryptionAlgorithm(String encryptionAlgorithm) {     switch(encryptionAlgorithm) {         case RSA_SHA_256:             this.encryptionAlgorithm = EncryptionAlgorithm.RSA_SHA_256.             return.         case RSA_SHA_384:             this.encryptionAlgorithm = EncryptionAlgorithm.RSA_SHA_384.             return.         case RSA_SHA_512:             this.encryptionAlgorithm = EncryptionAlgorithm.RSA_SHA_512.             return.         default:             throw new RuntimeCamelException(String.format("Invalid Encryption Algorithm: %s", encryptionAlgorithm)).     } }
true;public;0;3;/**  * The type of authentication for connection.  *  * <p>  * Types of Authentication:  * <ul>  * <li>STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged)</li>  * <li>SERVER_AUTHENTICATION - OAuth 2.0 with JSON Web Tokens</li>  * </ul>  *  * @return the authenticationType  */ ;/**  * The type of authentication for connection.  *  * <p>  * Types of Authentication:  * <ul>  * <li>STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged)</li>  * <li>SERVER_AUTHENTICATION - OAuth 2.0 with JSON Web Tokens</li>  * </ul>  *  * @return the authenticationType  */ public String getAuthenticationType() {     return authenticationType. }
true;public;1;11;/**  * The type of authentication for connection.  *  * <p>  * Types of Authentication:  * <ul>  * <li>STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged)</li>  * <li>SERVER_AUTHENTICATION - OAuth 2.0 with JSON Web Tokens</li>  * </ul>  *  * @param authenticationType  *            the authenticationType to set  */ ;/**  * The type of authentication for connection.  *  * <p>  * Types of Authentication:  * <ul>  * <li>STANDARD_AUTHENTICATION - OAuth 2.0 (3-legged)</li>  * <li>SERVER_AUTHENTICATION - OAuth 2.0 with JSON Web Tokens</li>  * </ul>  *  * @param authenticationType  *            the authenticationType to set  */ public void setAuthenticationType(String authenticationType) {     switch(authenticationType) {         case STANDARD_AUTHENTICATION:         case APP_USER_AUTHENTICATION:         case APP_ENTERPRISE_AUTHENTICATION:             this.authenticationType = authenticationType.             return.         default:             throw new RuntimeCamelException(String.format("Invalid Authentication Type: %s", authenticationType)).     } }
true;public;0;3;/**  * Box application client ID  *  * @return the clientId  */ ;/**  * Box application client ID  *  * @return the clientId  */ public String getClientId() {     return clientId. }
true;public;1;3;/**  * Box application client ID  *  * @param clientId  *            the clientId to set  */ ;/**  * Box application client ID  *  * @param clientId  *            the clientId to set  */ public void setClientId(String clientId) {     this.clientId = clientId. }
true;public;0;3;/**  * Box application client secret  *  * @return the clientSecret  */ ;/**  * Box application client secret  *  * @return the clientSecret  */ public String getClientSecret() {     return clientSecret. }
true;public;1;3;/**  * Box application client secret  *  * @param clientSecret  *            the clientSecret to set  */ ;/**  * Box application client secret  *  * @param clientSecret  *            the clientSecret to set  */ public void setClientSecret(String clientSecret) {     this.clientSecret = clientSecret. }
true;public;0;3;/**  * Box user name, MUST be provided  *  * @return the userName  */ ;/**  * Box user name, MUST be provided  *  * @return the userName  */ public String getUserName() {     return userName. }
true;public;1;3;/**  * Box user name, MUST be provided  *  * @param userName  *            the userName to set  */ ;/**  * Box user name, MUST be provided  *  * @param userName  *            the userName to set  */ public void setUserName(String userName) {     this.userName = userName. }
true;public;0;3;/**  * Box user password, MUST be provided if authSecureStorage is not set, or  * returns null on first call  *  * @return the userPassword  */ ;/**  * Box user password, MUST be provided if authSecureStorage is not set, or  * returns null on first call  *  * @return the userPassword  */ public String getUserPassword() {     return userPassword. }
true;public;1;3;/**  * Box user password, MUST be provided if authSecureStorage is not set, or  * returns null on first call  *  * @param userPassword  *            the userPassword to set  */ ;/**  * Box user password, MUST be provided if authSecureStorage is not set, or  * returns null on first call  *  * @param userPassword  *            the userPassword to set  */ public void setUserPassword(String userPassword) {     this.userPassword = userPassword. }
true;public;0;3;/**  * Custom HTTP params for settings like proxy host  *  * @return the httpParams  */ ;/**  * Custom HTTP params for settings like proxy host  *  * @return the httpParams  */ public Map<String, Object> getHttpParams() {     return httpParams. }
true;public;1;3;/**  * Custom HTTP params for settings like proxy host  *  * @param httpParams  *            the httpParams to set  */ ;/**  * Custom HTTP params for settings like proxy host  *  * @param httpParams  *            the httpParams to set  */ public void setHttpParams(Map<String, Object> httpParams) {     this.httpParams = httpParams. }
true;public;0;3;/**  * To configure security using SSLContextParameters.  *  * @return the sslContextParameters  */ ;/**  * To configure security using SSLContextParameters.  *  * @return the sslContextParameters  */ public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * To configure security using SSLContextParameters.  *  * @param sslContextParameters  *            the sslContextParameters to set  */ ;/**  * To configure security using SSLContextParameters.  *  * @param sslContextParameters  *            the sslContextParameters to set  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
true;public;0;3;/**  * Custom Access Token Cache for storing and retrieving access tokens.  *  * @return Custom Access Token Cache  */ ;/**  * Custom Access Token Cache for storing and retrieving access tokens.  *  * @return Custom Access Token Cache  */ public IAccessTokenCache getAccessTokenCache() {     return accessTokenCache. }
true;public;1;3;/**  * Custom Access Token Cache for storing and retrieving access tokens.  *  * @param accessTokenCache  *            - the Custom Access Token Cache  */ ;/**  * Custom Access Token Cache for storing and retrieving access tokens.  *  * @param accessTokenCache  *            - the Custom Access Token Cache  */ public void setAccessTokenCache(IAccessTokenCache accessTokenCache) {     this.accessTokenCache = accessTokenCache. }
