commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected BoxApiName getApiName(String apiNameStr) throws IllegalArgumentException {     return BoxApiName.fromValue(apiNameStr). }
true;public;1;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public void setConfiguration(BoxConfiguration configuration) {     super.setConfiguration(configuration). }
true;public;0;4;/**  * To use the shared configuration  */ ;/**  * To use the shared configuration  */ @Override public BoxConfiguration getConfiguration() {     return super.getConfiguration(). }
true;public;0;3;/**  * To use a shared connection  *  * @return the shared connection  */ ;/**  * To use a shared connection  *  * @return the shared connection  */ public BoxAPIConnection getBoxConnection() {     return boxConnection. }
false;protected;4;7;;@Override protected Endpoint createEndpoint(String uri, String methodName, BoxApiName apiName, BoxConfiguration endpointConfiguration) {     endpointConfiguration.setApiName(apiName).     endpointConfiguration.setMethodName(methodName).     return new BoxEndpoint(uri, this, apiName, methodName, endpointConfiguration). }
false;protected;0;12;;@Override protected void doStart() throws Exception {     super.doStart().     if (boxConnection == null) {         if (configuration != null) {             boxConnection = BoxConnectionHelper.createConnection(configuration).         } else {             throw new IllegalArgumentException("Unable to connect, Box component configuration is missing").         }     } }
false;protected;0;6;;@Override protected void doStop() throws Exception {     if (boxConnection != null) {         boxConnection = null.     } }
false;public;0;7;;@Override public void doShutdown() throws Exception {     if (boxConnection != null) {         boxConnection = null.     }     super.doShutdown(). }
