commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void interceptPropertyNames(Set<String> propertyNames) {     propertyNames.add(LISTENER_PROPERTY). }
false;public;1;10;;@Override public void onEvent(BoxEvent event) {     try {         // Convert Events to exchange and process         log.debug("Processed {} event for {}", ApiConsumerHelper.getResultsProcessed(this, event, false), boxConnection).     } catch (Exception e) {         log.info("Received exception consuming event: ", e).     } }
false;public;1;3;;@Override public void onNextPosition(long position) { }
false;public;1;5;;@Override public boolean onException(Throwable e) {     getExceptionHandler().handleException(RuntimeCamelException.wrapRuntimeCamelException(e)).     return true. }
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     // invoke the API method to start listening     ApiMethodHelper.invokeMethod(apiProxy, apiMethod, properties). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     apiProxy.stopListening().     super.doStop(). }
