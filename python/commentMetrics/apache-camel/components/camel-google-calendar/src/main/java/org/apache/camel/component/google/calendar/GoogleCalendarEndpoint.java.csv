commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new GoogleCalendarProducer(this). }
false;public;1;11;;@Override public Consumer createConsumer(Processor processor) throws Exception {     // make sure inBody is not set for consumers     if (inBody != null) {         throw new IllegalArgumentException("Option inBody is not supported for consumer endpoint").     }     final GoogleCalendarConsumer consumer = new GoogleCalendarConsumer(this, processor).     // also set consumer.* properties     configureConsumer(consumer).     return consumer. }
false;protected;0;4;;@Override protected ApiMethodPropertiesHelper<GoogleCalendarConfiguration> getPropertiesHelper() {     return GoogleCalendarPropertiesHelper.getHelper(). }
false;protected;0;4;;@Override protected String getThreadProfileName() {     return GoogleCalendarConstants.THREAD_PROFILE_NAME. }
false;protected;0;31;;@Override protected void afterConfigureProperties() {     switch(apiName) {         case LIST:             apiProxy = getClient().calendarList().             break.         case ACL:             apiProxy = getClient().acl().             break.         case CALENDARS:             apiProxy = getClient().calendars().             break.         case CHANNELS:             apiProxy = getClient().channels().             break.         case COLORS:             apiProxy = getClient().colors().             break.         case EVENTS:             apiProxy = getClient().events().             break.         case FREEBUSY:             apiProxy = getClient().freebusy().             break.         case SETTINGS:             apiProxy = getClient().settings().             break.         default:             throw new IllegalArgumentException("Invalid API name " + apiName).     } }
false;public;0;3;;public Calendar getClient() {     return ((GoogleCalendarComponent) getComponent()).getClient(configuration). }
false;public;2;4;;@Override public Object getApiProxy(ApiMethod method, Map<String, Object> args) {     return apiProxy. }
false;public;0;3;;public GoogleCalendarClientFactory getClientFactory() {     return ((GoogleCalendarComponent) getComponent()).getClientFactory(). }
false;public;1;3;;public void setClientFactory(GoogleCalendarClientFactory clientFactory) {     ((GoogleCalendarComponent) getComponent()).setClientFactory(clientFactory). }
