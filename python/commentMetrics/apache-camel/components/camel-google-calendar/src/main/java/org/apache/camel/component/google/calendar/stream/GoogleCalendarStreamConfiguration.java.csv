commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getClientId() {     return clientId. }
true;public;1;3;/**  * Client ID of the calendar application  */ ;/**  * Client ID of the calendar application  */ public void setClientId(String clientId) {     this.clientId = clientId. }
false;public;0;3;;public String getClientSecret() {     return clientSecret. }
true;public;1;3;/**  * Client secret of the calendar application  */ ;/**  * Client secret of the calendar application  */ public void setClientSecret(String clientSecret) {     this.clientSecret = clientSecret. }
false;public;0;3;;public String getAccessToken() {     return accessToken. }
true;public;1;3;/**  * OAuth 2 access token. This typically expires after an hour so  * refreshToken is recommended for long term usage.  */ ;/**  * OAuth 2 access token. This typically expires after an hour so  * refreshToken is recommended for long term usage.  */ public void setAccessToken(String accessToken) {     this.accessToken = accessToken. }
false;public;0;3;;public String getRefreshToken() {     return refreshToken. }
true;public;1;3;/**  * OAuth 2 refresh token. Using this, the Google Calendar component can  * obtain a new accessToken whenever the current one expires - a necessity  * if the application is long-lived.  */ ;/**  * OAuth 2 refresh token. Using this, the Google Calendar component can  * obtain a new accessToken whenever the current one expires - a necessity  * if the application is long-lived.  */ public void setRefreshToken(String refreshToken) {     this.refreshToken = refreshToken. }
false;public;0;3;;public String getApplicationName() {     return applicationName. }
true;public;1;3;/**  * Google Calendar application name. Example would be "camel-google-calendar/1.0"  */ ;/**  * Google Calendar application name. Example would be "camel-google-calendar/1.0"  */ public void setApplicationName(String applicationName) {     this.applicationName = applicationName. }
false;public;0;3;;public List<String> getScopes() {     return scopes. }
true;public;1;3;/**  * Specifies the level of permissions you want a calendar application to have to  * a user account. See https://developers.google.com/calendar/auth  * for more info.  */ ;/**  * Specifies the level of permissions you want a calendar application to have to  * a user account. See https://developers.google.com/calendar/auth  * for more info.  */ public void setScopes(List<String> scopes) {     this.scopes = scopes. }
false;public;0;3;;public String getIndex() {     return index. }
true;public;1;3;/**  * Specifies an index for the endpoint  */ ;/**  * Specifies an index for the endpoint  */ public void setIndex(String index) {     this.index = index. }
false;public;0;3;;public String getQuery() {     return query. }
true;public;1;3;/**  * The query to execute on calendar  */ ;/**  * The query to execute on calendar  */ public void setQuery(String query) {     this.query = query. }
false;public;0;3;;public int getMaxResults() {     return maxResults. }
true;public;1;3;/**  * Max results to be returned  */ ;/**  * Max results to be returned  */ public void setMaxResults(int maxResults) {     this.maxResults = maxResults. }
false;public;0;3;;public String getCalendarId() {     return calendarId. }
true;public;1;3;/**  * The calendarId to be used  */ ;/**  * The calendarId to be used  */ public void setCalendarId(String calendarId) {     this.calendarId = calendarId. }
false;public;0;3;;public boolean isConsumeFromNow() {     return consumeFromNow. }
true;public;1;3;/**  * Consume events in the selected calendar from now on  */ ;/**  * Consume events in the selected calendar from now on  */ public void setConsumeFromNow(boolean consumeFromNow) {     this.consumeFromNow = consumeFromNow. }
false;public;0;3;;public boolean isConsiderLastUpdate() {     return considerLastUpdate. }
true;public;1;3;/**  * Take into account the lastUpdate of the last event polled as start date for the next poll  */ ;/**  * Take into account the lastUpdate of the last event polled as start date for the next poll  */ public void setConsiderLastUpdate(boolean considerLastUpdate) {     this.considerLastUpdate = considerLastUpdate. }
true;public;0;7;// ************************************************* ;// ************************************************* //  // ************************************************* public GoogleCalendarStreamConfiguration copy() {     try {         return (GoogleCalendarStreamConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
