commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("The camel google calendar stream component doesn't support producer"). }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     final GoogleCalendarStreamConsumer consumer = new GoogleCalendarStreamConsumer(this, processor).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public Calendar getClient() {     return ((GoogleCalendarStreamComponent) getComponent()).getClient(configuration). }
false;public;0;3;;public GoogleCalendarClientFactory getClientFactory() {     return ((GoogleCalendarStreamComponent) getComponent()).getClientFactory(). }
false;public;1;3;;public void setClientFactory(GoogleCalendarClientFactory clientFactory) {     ((GoogleCalendarStreamComponent) getComponent()).setClientFactory(clientFactory). }
false;public;0;3;;public GoogleCalendarStreamConfiguration getConfiguration() {     return configuration. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;2;7;;public Exchange createExchange(ExchangePattern pattern, Event event) {     Exchange exchange = super.createExchange(pattern).     Message message = exchange.getIn().     message.setBody(event).     message.setHeader(GoogleCalendarStreamConstants.EVENT_ID, event.getId()).     return exchange. }
