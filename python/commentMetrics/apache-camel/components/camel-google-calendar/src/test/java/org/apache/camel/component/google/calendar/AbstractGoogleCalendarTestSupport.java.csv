commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void createTestCalendar() {     Calendar calendar = new Calendar().     Random rand = new Random().     calendar.setSummary("camel-calendar-" + rand.nextInt()).     calendar.setTimeZone("America/St_Johns").     this.calendar = requestBody("google-calendar://calendars/insert?inBody=content", calendar). }
false;public;0;10;;@After public void deleteTestCalendar() {     try {         if (calendar != null) {             requestBody("google-calendar://calendars/delete?inBody=calendarId", getCalendar().getId()).             setCalendar(null).         }     } catch (Exception e) {     } }
false;protected;0;29;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     // read GoogleCalendar component configuration from     // TEST_OPTIONS_PROPERTIES     final Properties properties = new Properties().     try {         properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES)).     } catch (Exception e) {         throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e).     }     Map<String, Object> options = new HashMap<>().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         options.put(entry.getKey().toString(), entry.getValue()).     }     final GoogleCalendarConfiguration configuration = new GoogleCalendarConfiguration().     IntrospectionSupport.setProperties(configuration, options).     // add GoogleCalendarComponent to Camel context     final GoogleCalendarComponent component = new GoogleCalendarComponent(context).     component.setConfiguration(configuration).     context.addComponent("google-calendar", component).     return context. }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // only create the context once for this class     return true. }
false;protected;3;4;;@SuppressWarnings("unchecked") protected <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws CamelExecutionException {     return (T) template().requestBodyAndHeaders(endpointUri, body, headers). }
false;protected;2;4;;@SuppressWarnings("unchecked") protected <T> T requestBody(String endpoint, Object body) throws CamelExecutionException {     return (T) template().requestBody(endpoint, body). }
false;public;0;6;;public Calendar getCalendar() {     if (calendar == null) {         createTestCalendar().     }     return calendar. }
false;public;1;3;;public void setCalendar(Calendar calendar) {     this.calendar = calendar. }
