commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;28;;@Override protected CamelContext createCamelContext() throws Exception {     final CamelContext context = super.createCamelContext().     // read GoogleCalendar component configuration from TEST_OPTIONS_PROPERTIES     final Properties properties = new Properties().     try {         properties.load(getClass().getResourceAsStream(TEST_OPTIONS_PROPERTIES)).     } catch (Exception e) {         throw new IOException(String.format("%s could not be loaded: %s", TEST_OPTIONS_PROPERTIES, e.getMessage()), e).     }     Map<String, Object> options = new HashMap<>().     for (Map.Entry<Object, Object> entry : properties.entrySet()) {         options.put(entry.getKey().toString(), entry.getValue()).     }     final GoogleCalendarStreamConfiguration configuration = new GoogleCalendarStreamConfiguration().     IntrospectionSupport.setProperties(configuration, options).     // add GoogleCalendarComponent to Camel context     final GoogleCalendarStreamComponent component = new GoogleCalendarStreamComponent(context).     component.setConfiguration(configuration).     context.addComponent("google-calendar-stream", component).     return context. }
false;public;0;5;;@Override public boolean isCreateCamelContextPerClass() {     // only create the context once for this class     return true. }
