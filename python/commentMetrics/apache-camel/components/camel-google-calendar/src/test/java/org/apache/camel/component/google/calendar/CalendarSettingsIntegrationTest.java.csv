commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testGet() throws Exception {     // using String message body for single parameter "setting"     final com.google.api.services.calendar.model.Setting result = requestBody("direct://GET", "timezone").     assertNotNull("get result", result).     LOG.debug("get: " + result). }
false;public;0;7;;@Test public void testList() throws Exception {     final com.google.api.services.calendar.model.Settings result = requestBody("direct://LIST", null).     assertNotNull("list result", result).     LOG.debug("list: " + result). }
false;public;0;12;;@Override public void configure() {     // test route for get     from("direct://GET").to("google-calendar://" + PATH_PREFIX + "/get?inBody=setting").     // test route for list     from("direct://LIST").to("google-calendar://" + PATH_PREFIX + "/list").     // test route for watch     from("direct://WATCH").to("google-calendar://" + PATH_PREFIX + "/watch?inBody=contentChannel"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             // test route for get             from("direct://GET").to("google-calendar://" + PATH_PREFIX + "/get?inBody=setting").             // test route for list             from("direct://LIST").to("google-calendar://" + PATH_PREFIX + "/list").             // test route for watch             from("direct://WATCH").to("google-calendar://" + PATH_PREFIX + "/watch?inBody=contentChannel").         }     }. }
