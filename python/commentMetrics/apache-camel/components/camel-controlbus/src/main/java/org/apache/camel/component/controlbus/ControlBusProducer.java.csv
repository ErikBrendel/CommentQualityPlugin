commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ControlBusEndpoint getEndpoint() {     return (ControlBusEndpoint) super.getEndpoint(). }
false;public;2;19;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     if (getEndpoint().getLanguage() != null) {         try {             processByLanguage(exchange, getEndpoint().getLanguage()).         } catch (Exception e) {             exchange.setException(e).         }     } else if (getEndpoint().getAction() != null) {         try {             processByAction(exchange).         } catch (Exception e) {             exchange.setException(e).         }     }     callback.done(true).     return true. }
false;protected;2;8;;protected void processByLanguage(Exchange exchange, Language language) throws Exception {     LanguageTask task = new LanguageTask(exchange, language).     if (getEndpoint().isAsync()) {         getEndpoint().getComponent().getExecutorService().submit(task).     } else {         task.run().     } }
false;protected;1;8;;protected void processByAction(Exchange exchange) throws Exception {     ActionTask task = new ActionTask(exchange).     if (getEndpoint().isAsync()) {         getEndpoint().getComponent().getExecutorService().submit(task).     } else {         task.run().     } }
false;private,static;1;13;;private static String getRouteId(Exchange exchange) {     String answer = null.     UnitOfWork uow = exchange.getUnitOfWork().     RouteContext rc = uow != null ? uow.getRouteContext() : null.     if (rc != null) {         answer = rc.getRoute().getId().     }     if (answer == null) {         // fallback and get from route id on the exchange         answer = exchange.getFromRouteId().     }     return answer. }
false;public;0;27;;@Override public void run() {     String task = null.     Object result = null.     try {         // create dummy exchange         Exchange dummy = ExchangeHelper.createCopy(exchange, true).         task = dummy.getIn().getMandatoryBody(String.class).         if (task != null) {             Expression exp = language.createExpression(task).             result = exp.evaluate(dummy, Object.class).         }         if (result != null && !getEndpoint().isAsync()) {             // can only set result on exchange if sync             exchange.getIn().setBody(result).         }         if (task != null) {             logger.log("ControlBus task done [" + task + "] with result -> " + (result != null ? result : "void")).         }     } catch (Exception e) {         logger.log("Error executing ControlBus task [" + task + "]. This exception will be ignored.", e).     } }
false;public;0;82;;@Override public void run() {     String action = getEndpoint().getAction().     String id = getEndpoint().getRouteId().     if (ObjectHelper.equal("current", id)) {         id = getRouteId(exchange).     }     Object result = null.     String task = action + " route " + id.     try {         if ("start".equals(action)) {             log.debug("Starting route: {}", id).             getEndpoint().getCamelContext().getRouteController().startRoute(id).         } else if ("stop".equals(action)) {             log.debug("Stopping route: {}", id).             getEndpoint().getCamelContext().getRouteController().stopRoute(id).         } else if ("suspend".equals(action)) {             log.debug("Suspending route: {}", id).             getEndpoint().getCamelContext().getRouteController().suspendRoute(id).         } else if ("resume".equals(action)) {             log.debug("Resuming route: {}", id).             getEndpoint().getCamelContext().getRouteController().resumeRoute(id).         } else if ("restart".equals(action)) {             log.debug("Restarting route: {}", id).             getEndpoint().getCamelContext().getRouteController().stopRoute(id).             int delay = getEndpoint().getRestartDelay().             if (delay > 0) {                 try {                     log.debug("Sleeping {} ms before starting route: {}", delay, id).                     Thread.sleep(delay).                 } catch (InterruptedException e) {                 // ignore                 }             }             getEndpoint().getCamelContext().getRouteController().startRoute(id).         } else if ("status".equals(action)) {             log.debug("Route status: {}", id).             ServiceStatus status = getEndpoint().getCamelContext().getRouteController().getRouteStatus(id).             if (status != null) {                 result = status.name().             }         } else if ("stats".equals(action)) {             log.debug("Route stats: {}", id).             // camel context or per route             String name = getEndpoint().getCamelContext().getManagementName().             if (name == null) {                 result = "JMX is disabled, cannot get stats".             } else {                 ObjectName on.                 String operation.                 if (id == null) {                     CamelContext camelContext = getEndpoint().getCamelContext().                     on = getEndpoint().getCamelContext().getManagementStrategy().getManagementObjectNameStrategy().getObjectNameForCamelContext(camelContext).                     operation = "dumpRoutesStatsAsXml".                 } else {                     Route route = getEndpoint().getCamelContext().getRoute(id).                     on = getEndpoint().getCamelContext().getManagementStrategy().getManagementObjectNameStrategy().getObjectNameForRoute(route).                     operation = "dumpRouteStatsAsXml".                 }                 if (on != null) {                     MBeanServer server = getEndpoint().getCamelContext().getManagementStrategy().getManagementAgent().getMBeanServer().                     result = server.invoke(on, operation, new Object[] { true, true }, new String[] { "boolean", "boolean" }).                 } else {                     result = "Cannot lookup route with id " + id.                 }             }         }         if (result != null && !getEndpoint().isAsync()) {             // can only set result on exchange if sync             exchange.getIn().setBody(result).         }         logger.log("ControlBus task done [" + task + "] with result -> " + (result != null ? result : "void")).     } catch (Exception e) {         logger.log("Error executing ControlBus task [" + task + "]. This exception will be ignored.", e).     } }
