commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public Producer createProducer() throws Exception {     CamelLogger logger = new CamelLogger(ControlBusProducer.class.getName(), loggingLevel).     return new ControlBusProducer(this, logger). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new RuntimeCamelException("Cannot consume from a ControlBusEndpoint: " + getEndpointUri()). }
false;public;0;5;;@Override public boolean isSingleton() {     // we dont want to be enlisted in JMX, so lets just be non-singleton     return false. }
false;public;0;4;;@Override public ControlBusComponent getComponent() {     return (ControlBusComponent) super.getComponent(). }
false;public;0;3;;public Language getLanguage() {     return language. }
true;public;1;3;/**  * Allows you to specify the name of a Language to use for evaluating the message body.  * If there is any result from the evaluation, then the result is put in the message body.  */ ;/**  * Allows you to specify the name of a Language to use for evaluating the message body.  * If there is any result from the evaluation, then the result is put in the message body.  */ public void setLanguage(Language language) {     this.language = language. }
false;public;0;3;;public String getRouteId() {     return routeId. }
true;public;1;3;/**  * To specify a route by its id.  * The special keyword "current" indicates the current route.  */ ;/**  * To specify a route by its id.  * The special keyword "current" indicates the current route.  */ public void setRouteId(String routeId) {     this.routeId = routeId. }
false;public;0;3;;public String getAction() {     return action. }
true;public;1;3;/**  * To denote an action that can be either: start, stop, or status.  * <p/>  * To either start or stop a route, or to get the status of the route as output in the message body.  * You can use suspend and resume from Camel 2.11.1 onwards to either suspend or resume a route.  * And from Camel 2.11.1 onwards you can use stats to get performance statics returned in XML format.  * the routeId option can be used to define which route to get the performance stats for, if routeId is not defined,  * then you get statistics for the entire CamelContext. The restart action will restart the route.  */ ;/**  * To denote an action that can be either: start, stop, or status.  * <p/>  * To either start or stop a route, or to get the status of the route as output in the message body.  * You can use suspend and resume from Camel 2.11.1 onwards to either suspend or resume a route.  * And from Camel 2.11.1 onwards you can use stats to get performance statics returned in XML format.  * the routeId option can be used to define which route to get the performance stats for, if routeId is not defined,  * then you get statistics for the entire CamelContext. The restart action will restart the route.  */ public void setAction(String action) {     this.action = action. }
false;public;0;3;;public int getRestartDelay() {     return restartDelay. }
true;public;1;3;/**  * The delay in millis to use when restarting a route.  */ ;/**  * The delay in millis to use when restarting a route.  */ public void setRestartDelay(int restartDelay) {     this.restartDelay = restartDelay. }
false;public;0;3;;public boolean isAsync() {     return async. }
true;public;1;3;/**  * Whether to execute the control bus task asynchronously.  * <p/>  * Important: If this option is enabled, then any result from the task is not set on the Exchange.  * This is only possible if executing tasks synchronously.  */ ;/**  * Whether to execute the control bus task asynchronously.  * <p/>  * Important: If this option is enabled, then any result from the task is not set on the Exchange.  * This is only possible if executing tasks synchronously.  */ public void setAsync(boolean async) {     this.async = async. }
false;public;0;3;;public LoggingLevel getLoggingLevel() {     return loggingLevel. }
true;public;1;3;/**  * Logging level used for logging when task is done, or if any exceptions occurred during processing the task.  */ ;/**  * Logging level used for logging when task is done, or if any exceptions occurred during processing the task.  */ public void setLoggingLevel(LoggingLevel loggingLevel) {     this.loggingLevel = loggingLevel. }
