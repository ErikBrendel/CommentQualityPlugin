commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;9;;@Override protected void doStart() throws Exception {     super.doStart().     LOGGER.debug("Using ClusterService instance {} (id={}, type={})", clusterService, clusterService.getId(), clusterService.getClass().getName()).     view = clusterService.getView(masterEndpoint.getNamespace()).     view.addEventListener(leadershipListener). }
false;protected;0;16;;@Override protected void doStop() throws Exception {     super.doStop().     if (view != null) {         view.removeEventListener(leadershipListener).         clusterService.releaseView(view).         view = null.     }     ServiceHelper.stopAndShutdownServices(delegatedConsumer).     ServiceHelper.stopAndShutdownServices(delegatedEndpoint).     delegatedConsumer = null. }
false;protected;0;7;;@Override protected void doResume() throws Exception {     if (delegatedConsumer instanceof SuspendableService) {         ((SuspendableService) delegatedConsumer).resume().     }     super.doResume(). }
false;protected;0;7;;@Override protected void doSuspend() throws Exception {     if (delegatedConsumer instanceof SuspendableService) {         ((SuspendableService) delegatedConsumer).suspend().     }     super.doSuspend(). }
false;public;0;6;;@ManagedAttribute(description = "Are we the master") public boolean isMaster() {     return view != null ? view.getLocalMember().isLeader() : false. }
false;private,synchronized;0;19;;// ************************************** // Helpers // ************************************** private synchronized void onLeadershipTaken() throws Exception {     if (!isRunAllowed()) {         return.     }     if (delegatedConsumer != null) {         return.     }     delegatedConsumer = delegatedEndpoint.createConsumer(processor).     if (delegatedConsumer instanceof StartupListener) {         getEndpoint().getCamelContext().addStartupListener((StartupListener) delegatedConsumer).     }     ServiceHelper.startService(delegatedEndpoint).     ServiceHelper.startService(delegatedConsumer).     LOGGER.info("Leadership taken: consumer started: {}", delegatedEndpoint). }
false;private,synchronized;0;8;;private synchronized void onLeadershipLost() throws Exception {     ServiceHelper.stopAndShutdownServices(delegatedConsumer).     ServiceHelper.stopAndShutdownServices(delegatedEndpoint).     delegatedConsumer = null.     LOGGER.info("Leadership lost: consumer stopped: {}", delegatedEndpoint). }
false;public;2;16;;@Override public void leadershipChanged(CamelClusterView view, Optional<CamelClusterMember> leader) {     if (!isRunAllowed()) {         return.     }     try {         if (view.getLocalMember().isLeader()) {             onLeadershipTaken().         } else if (delegatedConsumer != null) {             onLeadershipLost().         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
