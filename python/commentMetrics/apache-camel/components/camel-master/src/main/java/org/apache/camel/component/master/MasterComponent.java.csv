commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;23;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> params) throws Exception {     // we are registering a regular endpoint     String namespace = StringHelper.before(remaining, ":").     String delegateUri = StringHelper.after(remaining, ":").     if (ObjectHelper.isEmpty(namespace) || ObjectHelper.isEmpty(delegateUri)) {         throw new IllegalArgumentException("Wrong uri syntax : master:namespace:uri, got " + remaining).     }     // we need to apply the params here     if (params != null && params.size() > 0) {         delegateUri = delegateUri + "?" + uri.substring(uri.indexOf('?') + 1).     }     return new MasterEndpoint(uri, this, getClusterService(), namespace, delegateUri). }
false;public;0;3;;public CamelClusterService getService() {     return service. }
true;public;1;3;/**  * Inject the service to use.  */ ;/**  * Inject the service to use.  */ public void setService(CamelClusterService service) {     this.service = service. }
false;public;0;3;;public CamelClusterService.Selector getServiceSelector() {     return serviceSelector. }
true;public;1;3;/**  * Inject the service selector used to lookup the {@link CamelClusterService} to use.  */ ;/**  * Inject the service selector used to lookup the {@link CamelClusterService} to use.  */ public void setServiceSelector(CamelClusterService.Selector serviceSelector) {     this.serviceSelector = serviceSelector. }
false;private;0;13;;// ******************************** // Helpers // ******************************** private CamelClusterService getClusterService() throws Exception {     if (service == null) {         CamelContext context = getCamelContext().         ObjectHelper.notNull(context, "Camel Context").         service = ClusterServiceHelper.lookupService(context, serviceSelector).orElseThrow(() -> new IllegalStateException("No cluster service found")).     }     return service. }
