commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void test() throws Exception {     for (String instance : INSTANCES) {         SCHEDULER.submit(() -> run(instance)).     }     LATCH.await(1, TimeUnit.MINUTES).     SCHEDULER.shutdownNow().     Assert.assertEquals(INSTANCES.size(), RESULTS.size()).     Assert.assertTrue(RESULTS.containsAll(INSTANCES)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("master:ns:timer:test?delay=1s&period=1s").routeId("route-" + id).log("From ${routeId}").process(e -> contextLatch.countDown()). }
false;private,static;1;42;;// ************************************ // Run a Camel node // ************************************ private static void run(String id) {     try {         int events = ThreadLocalRandom.current().nextInt(2, 6).         CountDownLatch contextLatch = new CountDownLatch(events).         FileLockClusterService service = new FileLockClusterService().         service.setId(id).         service.setRoot("target/cluster").         service.setAcquireLockDelay(1, TimeUnit.SECONDS).         service.setAcquireLockInterval(1, TimeUnit.SECONDS).         DefaultCamelContext context = new DefaultCamelContext().         context.disableJMX().         context.setName("context-" + id).         context.addService(service).         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("master:ns:timer:test?delay=1s&period=1s").routeId("route-" + id).log("From ${routeId}").process(e -> contextLatch.countDown()).             }         }).         // Start the context after some random time so the startup order         // changes for each test.         Thread.sleep(ThreadLocalRandom.current().nextInt(500)).         context.start().         contextLatch.await().         LOGGER.debug("Shutting down node {}", id).         RESULTS.add(id).         context.stop().         LATCH.countDown().     } catch (Exception e) {         LOGGER.warn("", e).     } }
