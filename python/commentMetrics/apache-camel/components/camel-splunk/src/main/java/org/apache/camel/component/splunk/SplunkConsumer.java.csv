commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void done(boolean doneSync) {     log.trace("Done processing exchange [{}]...", exchange). }
false;public;1;22;;@Override public void process(SplunkEvent splunkEvent) {     final Exchange exchange = getEndpoint().createExchange().     Message message = exchange.getIn().     message.setBody(splunkEvent).     try {         log.trace("Processing exchange [{}]...", exchange).         getAsyncProcessor().process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 log.trace("Done processing exchange [{}]...", exchange).             }         }).     } catch (Exception e) {         exchange.setException(e).     }     if (exchange.getException() != null) {         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).     } }
false;protected;0;43;;@Override protected int poll() throws Exception {     try {         if (endpoint.getConfiguration().isStreaming()) {             dataReader.read(new SplunkResultProcessor() {                  @Override                 public void process(SplunkEvent splunkEvent) {                     final Exchange exchange = getEndpoint().createExchange().                     Message message = exchange.getIn().                     message.setBody(splunkEvent).                     try {                         log.trace("Processing exchange [{}]...", exchange).                         getAsyncProcessor().process(exchange, new AsyncCallback() {                              @Override                             public void done(boolean doneSync) {                                 log.trace("Done processing exchange [{}]...", exchange).                             }                         }).                     } catch (Exception e) {                         exchange.setException(e).                     }                     if (exchange.getException() != null) {                         getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).                     }                 }             }).             // Return 0: no exchanges returned by poll, as exchanges have been returned asynchronously             return 0.         } else {             List<SplunkEvent> events = dataReader.read().             Queue<Exchange> exchanges = createExchanges(events).             return processBatch(CastUtils.cast(exchanges)).         }     } catch (Exception e) {         endpoint.reset(e).         getExceptionHandler().handleException(e).         return 0.     } }
false;protected;1;11;;protected Queue<Exchange> createExchanges(List<SplunkEvent> splunkEvents) {     log.trace("Received {} messages in this poll", splunkEvents.size()).     Queue<Exchange> answer = new LinkedList<>().     for (SplunkEvent splunkEvent : splunkEvents) {         Exchange exchange = getEndpoint().createExchange().         Message message = exchange.getIn().         message.setBody(splunkEvent).         answer.add(exchange).     }     return answer. }
false;public;1;21;;@Override public int processBatch(Queue<Object> exchanges) throws Exception {     int total = exchanges.size().     for (int index = 0. index < total && isBatchAllowed(). index++) {         Exchange exchange = ObjectHelper.cast(Exchange.class, exchanges.poll()).         exchange.setProperty(Exchange.BATCH_INDEX, index).         exchange.setProperty(Exchange.BATCH_SIZE, total).         exchange.setProperty(Exchange.BATCH_COMPLETE, index == total - 1).         try {             log.trace("Processing exchange [{}]...", exchange).             getProcessor().process(exchange).         } catch (Exception e) {             exchange.setException(e).         }         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     }     return total. }
