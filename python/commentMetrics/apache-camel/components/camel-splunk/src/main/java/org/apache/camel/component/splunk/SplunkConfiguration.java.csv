commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getInitEarliestTime() {     return initEarliestTime. }
true;public;1;3;/**  * Initial start offset of the first search  */ ;/**  * Initial start offset of the first search  */ public void setInitEarliestTime(String initEarliestTime) {     this.initEarliestTime = initEarliestTime. }
false;public;0;3;;public int getCount() {     return count. }
true;public;1;3;/**  * A number that indicates the maximum number of entities to return.  */ ;/**  * A number that indicates the maximum number of entities to return.  */ public void setCount(int count) {     this.count = count. }
false;public;0;3;;public String getSearch() {     return search. }
true;public;1;3;/**  * The Splunk query to run  */ ;/**  * The Splunk query to run  */ public void setSearch(String search) {     this.search = search. }
false;public;0;3;;public String getEarliestTime() {     return earliestTime. }
true;public;1;3;/**  * Earliest time of the search time window.  */ ;/**  * Earliest time of the search time window.  */ public void setEarliestTime(String earliestTime) {     this.earliestTime = earliestTime. }
false;public;0;3;;public String getLatestTime() {     return latestTime. }
true;public;1;3;/**  * Latest time of the search time window.  */ ;/**  * Latest time of the search time window.  */ public void setLatestTime(String latestTime) {     this.latestTime = latestTime. }
false;public;0;3;;public int getTcpReceiverPort() {     return tcpReceiverPort. }
true;public;1;3;/**  * Splunk tcp receiver port  */ ;/**  * Splunk tcp receiver port  */ public void setTcpReceiverPort(int tcpReceiverPort) {     this.tcpReceiverPort = tcpReceiverPort. }
false;public;0;3;;public boolean isRaw() {     return raw. }
true;public;1;3;/**  * Should the payload be inserted raw  */ ;/**  * Should the payload be inserted raw  */ public void setRaw(boolean raw) {     this.raw = raw. }
false;public;0;3;;public String getSourceType() {     return sourceType. }
true;public;1;3;/**  * Splunk sourcetype argument  */ ;/**  * Splunk sourcetype argument  */ public void setSourceType(String sourceType) {     this.sourceType = sourceType. }
false;public;0;3;;public String getSource() {     return source. }
true;public;1;3;/**  * Splunk source argument  */ ;/**  * Splunk source argument  */ public void setSource(String source) {     this.source = source. }
false;public;0;3;;public String getEventHost() {     return eventHost. }
true;public;1;3;/**  * Override the default Splunk event host field  */ ;/**  * Override the default Splunk event host field  */ public void setEventHost(String eventHost) {     this.eventHost = eventHost. }
true;public;1;3;/**  * Splunk index to write to  */ ;/**  * Splunk index to write to  */ public void setIndex(String index) {     this.index = index. }
false;public;0;3;;public String getIndex() {     return index. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * Splunk host.  */ ;/**  * Splunk host.  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public int getPort() {     return port. }
true;public;1;3;/**  * Splunk port  */ ;/**  * Splunk port  */ public void setPort(int port) {     this.port = port. }
false;public;0;3;;public SSLSecurityProtocol getSslProtocol() {     return sslProtocol. }
true;public;1;3;/**  * Set the ssl protocol to use  *  * @param sslProtocol  */ ;/**  * Set the ssl protocol to use  *  * @param sslProtocol  */ public void setSslProtocol(SSLSecurityProtocol sslProtocol) {     this.sslProtocol = sslProtocol. }
false;public;0;3;;public String getScheme() {     return scheme. }
true;public;1;3;/**  * Splunk scheme  */ ;/**  * Splunk scheme  */ public void setScheme(String scheme) {     this.scheme = scheme. }
false;public;0;3;;public String getApp() {     return app. }
true;public;1;3;/**  * Splunk app  */ ;/**  * Splunk app  */ public void setApp(String app) {     this.app = app. }
false;public;0;3;;public String getOwner() {     return owner. }
true;public;1;3;/**  * Splunk owner  */ ;/**  * Splunk owner  */ public void setOwner(String owner) {     this.owner = owner. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * Username for Splunk  */ ;/**  * Username for Splunk  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Password for Splunk  */ ;/**  * Password for Splunk  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public boolean isStreaming() {     return streaming != null ? streaming : false. }
true;public;1;3;/**  * Sets streaming mode.  * <p>  * Streaming mode sends exchanges as they are received, rather than in a batch.  */ ;/**  * Sets streaming mode.  * <p>  * Streaming mode sends exchanges as they are received, rather than in a batch.  */ public void setStreaming(boolean streaming) {     this.streaming = streaming. }
false;public;0;3;;public int getConnectionTimeout() {     return connectionTimeout. }
true;public;1;3;/**  * Timeout in MS when connecting to Splunk server  */ ;/**  * Timeout in MS when connecting to Splunk server  */ public void setConnectionTimeout(int timeout) {     this.connectionTimeout = timeout. }
false;public;0;3;;public boolean isUseSunHttpsHandler() {     return useSunHttpsHandler. }
true;public;1;3;/**  * Use sun.net.www.protocol.https.Handler Https handler to establish the Splunk Connection.  * Can be useful when running in application servers to avoid app. server https handling.  */ ;/**  * Use sun.net.www.protocol.https.Handler Https handler to establish the Splunk Connection.  * Can be useful when running in application servers to avoid app. server https handling.  */ public void setUseSunHttpsHandler(boolean useSunHttpsHandler) {     this.useSunHttpsHandler = useSunHttpsHandler. }
false;public;0;3;;public String getSavedSearch() {     return this.savedSearch. }
true;public;1;3;/**  * The name of the query saved in Splunk to run  */ ;/**  * The name of the query saved in Splunk to run  */ public void setSavedSearch(String savedSearch) {     this.savedSearch = savedSearch. }
false;public;0;3;;public SplunkConnectionFactory getConnectionFactory() {     return connectionFactory != null ? connectionFactory : createDefaultConnectionFactory(). }
true;public;1;3;/**  * Splunk connection factory.  */ ;/**  * Splunk connection factory.  */ public void setConnectionFactory(SplunkConnectionFactory connectionFactory) {     this.connectionFactory = connectionFactory. }
false;private;0;14;;private SplunkConnectionFactory createDefaultConnectionFactory() {     SplunkConnectionFactory splunkConnectionFactory.     if (ObjectHelper.isNotEmpty(getHost()) && getPort() > 0) {         splunkConnectionFactory = new SplunkConnectionFactory(getHost(), getPort(), getUsername(), getPassword()).     } else {         splunkConnectionFactory = new SplunkConnectionFactory(getUsername(), getPassword()).     }     splunkConnectionFactory.setApp(getApp()).     splunkConnectionFactory.setConnectionTimeout(getConnectionTimeout()).     splunkConnectionFactory.setScheme(getScheme()).     splunkConnectionFactory.setUseSunHttpsHandler(isUseSunHttpsHandler()).     splunkConnectionFactory.setSslProtocol(getSslProtocol()).     return splunkConnectionFactory. }
