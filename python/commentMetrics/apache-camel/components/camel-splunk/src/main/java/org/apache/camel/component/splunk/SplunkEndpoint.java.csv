commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public Producer createProducer() throws Exception {     String[] uriSplit = splitUri(getEndpointUri()).     if (uriSplit.length > 0) {         ProducerType producerType = ProducerType.fromUri(uriSplit[0]).         return new SplunkProducer(this, producerType).     }     throw new IllegalArgumentException("Cannot create any producer with uri " + getEndpointUri() + ". A producer type was not provided (or an incorrect pairing was used)."). }
false;public;1;13;;public Consumer createConsumer(Processor processor) throws Exception {     if (configuration.getInitEarliestTime() == null) {         throw new IllegalArgumentException("Required initialEarliestTime option could not be found").     }     String[] uriSplit = splitUri(getEndpointUri()).     if (uriSplit.length > 0) {         ConsumerType consumerType = ConsumerType.fromUri(uriSplit[0]).         SplunkConsumer consumer = new SplunkConsumer(this, processor, consumerType).         configureConsumer(consumer).         return consumer.     }     throw new IllegalArgumentException("Cannot create any consumer with uri " + getEndpointUri() + ". A consumer type was not provided (or an incorrect pairing was used)."). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;5;;@Override protected void doStop() throws Exception {     service = null.     super.doStop(). }
false;public;0;6;;public Service getService() {     if (service == null) {         this.service = configuration.getConnectionFactory().createService(getCamelContext()).     }     return service. }
false;private,static;1;6;;private static String[] splitUri(String uri) {     uri = SPLUNK_SCHEMA_PATTERN.matcher(uri).replaceAll("").     uri = SPLUNK_OPTIONS_PATTER.matcher(uri).replaceAll("").     return uri.split("/"). }
false;public;0;3;;public SplunkConfiguration getConfiguration() {     return configuration. }
false;public,synchronized;1;9;;public synchronized boolean reset(Exception e) {     boolean answer = false.     if ((e instanceof RuntimeException && ((RuntimeException) e).getCause() instanceof ConnectException) || ((e instanceof SocketException) || (e instanceof SSLException))) {         log.warn("Got exception from Splunk. Service will be reset.").         this.service = null.         answer = true.     }     return answer. }
