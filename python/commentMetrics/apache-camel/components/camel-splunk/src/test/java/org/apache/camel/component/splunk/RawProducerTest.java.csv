commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Before public void setup() throws IOException {     when(service.getIndexes()).thenReturn(indexColl).     when(service.getInputs()).thenReturn(inputCollection).     when(input.attach()).thenReturn(socket).     when(inputCollection.get(anyString())).thenReturn(input).     when(indexColl.get(anyString())).thenReturn(index).     when(index.attach(isA(Args.class))).thenReturn(socket).     when(socket.getOutputStream()).thenReturn(System.out). }
false;public;0;8;;@Test public void testStreamWriter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:stream-result").     mock.setExpectedMessageCount(1).     mock.expectedBodiesReceived(PAYLOAD).     template.sendBody("direct:stream", PAYLOAD).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testSubmitWriter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:submitresult").     mock.setExpectedMessageCount(1).     mock.expectedBodiesReceived(PAYLOAD).     template.sendBody("direct:submit", PAYLOAD).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testTcpWriter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:tcpresult").     mock.setExpectedMessageCount(1).     mock.expectedBodiesReceived(PAYLOAD).     template.sendBody("direct:tcp", PAYLOAD).     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() {     from("direct:stream").to("splunk://stream?username=foo&password=bar&index=myindex&sourceType=SourceType&source=Source&raw=true").to("mock:stream-result").     from("direct:submit").to("splunk://submit?username=foo&password=bar&index=myindex&sourceType=testSource&source=test&raw=true").to("mock:submitresult").     from("direct:tcp").to("splunk://tcp?username=foo&password=bar&tcpReceiverPort=2222&index=myindex&sourceType=testSource&source=test&raw=true").to("mock:tcpresult"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:stream").to("splunk://stream?username=foo&password=bar&index=myindex&sourceType=SourceType&source=Source&raw=true").to("mock:stream-result").             from("direct:submit").to("splunk://submit?username=foo&password=bar&index=myindex&sourceType=testSource&source=test&raw=true").to("mock:submitresult").             from("direct:tcp").to("splunk://tcp?username=foo&password=bar&tcpReceiverPort=2222&index=myindex&sourceType=testSource&source=test&raw=true").to("mock:tcpresult").         }     }. }
