commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testStreamWriter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:stream-result").     mock.expectedMinimumMessageCount(1).     SplunkEvent splunkEvent = new SplunkEvent().     splunkEvent.addPair("key11", "value1").     splunkEvent.addPair("key22", "value2").     splunkEvent.addPair("key33", "value3").     template.sendBody("direct:stream", splunkEvent).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSubmitWriter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:submitresult").     mock.expectedMinimumMessageCount(1).     SplunkEvent splunkEvent = new SplunkEvent().     splunkEvent.addPair("key1", "value1").     splunkEvent.addPair("key2", "value2").     splunkEvent.addPair("key3", "value1").     template.sendBody("direct:submit", splunkEvent).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testTcpWriter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:tcpresult").     mock.expectedMinimumMessageCount(1).     SplunkEvent splunkEvent = new SplunkEvent().     splunkEvent.addPair("key1", "value1").     splunkEvent.addPair("key2", "value2").     splunkEvent.addPair("key3", "value3").     template.sendBody("direct:tcp", splunkEvent).     assertMockEndpointsSatisfied(). }
false;public;0;10;;public void configure() {     from("direct:stream").to("splunk://stream?username=" + SPLUNK_USERNAME + "&password=" + SPLUNK_PASSWORD + "&index=" + INDEX + "&sourceType=StreamSourceType&source=StreamSource").to("mock:stream-result").     from("direct:submit").to("splunk://submit?username=" + SPLUNK_USERNAME + "&password=" + SPLUNK_PASSWORD + "&index=" + INDEX + "&sourceType=testSource&source=test").to("mock:submitresult").     from("direct:tcp").to("splunk://tcp?username=" + SPLUNK_USERNAME + "&password=" + SPLUNK_PASSWORD + "&tcpReceiverPort=" + TCP_RECIEVER_PORT + "&index=" + INDEX + "&sourceType=testSource&source=test").to("mock:tcpresult"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:stream").to("splunk://stream?username=" + SPLUNK_USERNAME + "&password=" + SPLUNK_PASSWORD + "&index=" + INDEX + "&sourceType=StreamSourceType&source=StreamSource").to("mock:stream-result").             from("direct:submit").to("splunk://submit?username=" + SPLUNK_USERNAME + "&password=" + SPLUNK_PASSWORD + "&index=" + INDEX + "&sourceType=testSource&source=test").to("mock:submitresult").             from("direct:tcp").to("splunk://tcp?username=" + SPLUNK_USERNAME + "&password=" + SPLUNK_PASSWORD + "&tcpReceiverPort=" + TCP_RECIEVER_PORT + "&index=" + INDEX + "&sourceType=testSource&source=test").to("mock:tcpresult").         }     }. }
