commented;modifiers;parameterAmount;loc;comment;code
false;public;1;26;;public Timer getTimer(TimerConsumer consumer) {     String key = consumer.getEndpoint().getTimerName().     if (!consumer.getEndpoint().isDaemon()) {         key = "nonDaemon:" + key.     }     Timer answer.     synchronized (timers) {         answer = timers.get(key).         if (answer == null) {             // the timer name is also the thread name, so lets resolve a name to be used             String name = consumer.getEndpoint().getCamelContext().getExecutorServiceManager().resolveThreadName("timer://" + consumer.getEndpoint().getTimerName()).             answer = new Timer(name, consumer.getEndpoint().isDaemon()).             timers.put(key, answer).             // store new reference counter             refCounts.put(key, new AtomicInteger(1)).         } else {             // increase reference counter             AtomicInteger counter = refCounts.get(key).             if (counter != null) {                 counter.incrementAndGet().             }         }     }     return answer. }
false;public;1;19;;public void removeTimer(TimerConsumer consumer) {     String key = consumer.getEndpoint().getTimerName().     if (!consumer.getEndpoint().isDaemon()) {         key = "nonDaemon:" + key.     }     synchronized (timers) {         // decrease reference counter         AtomicInteger counter = refCounts.get(key).         if (counter != null && counter.decrementAndGet() <= 0) {             refCounts.remove(key).             // remove timer as its no longer in use             Timer timer = timers.remove(key).             if (timer != null) {                 timer.cancel().             }         }     } }
false;protected;3;24;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     TimerEndpoint answer = new TimerEndpoint(uri, this, remaining).     // convert time from String to a java.util.Date using the supported patterns     String time = getAndRemoveOrResolveReferenceParameter(parameters, "time", String.class).     String pattern = getAndRemoveOrResolveReferenceParameter(parameters, "pattern", String.class).     if (time != null) {         SimpleDateFormat sdf.         if (pattern != null) {             sdf = new SimpleDateFormat(pattern).         } else if (time.contains("T")) {             sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss").         } else {             sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").         }         Date date = sdf.parse(time).         answer.setTime(date).         answer.setPattern(pattern).     }     setProperties(answer, parameters).     return answer. }
false;protected;0;9;;@Override protected void doStop() throws Exception {     Collection<Timer> collection = timers.values().     for (Timer timer : collection) {         timer.cancel().     }     timers.clear().     refCounts.clear(). }
