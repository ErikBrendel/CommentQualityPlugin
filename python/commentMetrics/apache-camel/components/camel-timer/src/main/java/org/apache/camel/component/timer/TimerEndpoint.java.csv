commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public TimerComponent getComponent() {     return (TimerComponent) super.getComponent(). }
false;public;0;3;;public Producer createProducer() throws Exception {     throw new RuntimeCamelException("Cannot produce to a TimerEndpoint: " + getEndpointUri()). }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     Consumer answer = new TimerConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     if (timerName == null) {         timerName = getEndpointUri().     } // do nothing in regards to setTimer, the timer will be set when the first consumer will request it }
false;protected;0;5;;@Override protected void doStop() throws Exception {     setTimer(null).     super.doStop(). }
false;public;0;4;;@ManagedAttribute public boolean isMultipleConsumersSupported() {     return true. }
false;public;0;4;;@ManagedAttribute(description = "Timer Name") public String getTimerName() {     return timerName. }
true;public;1;4;/**  * The name of the timer  */ ;/**  * The name of the timer  */ @ManagedAttribute(description = "Timer Name") public void setTimerName(String timerName) {     this.timerName = timerName. }
false;public;0;4;;@ManagedAttribute(description = "Timer Daemon") public boolean isDaemon() {     return daemon. }
true;public;1;4;/**  * Specifies whether or not the thread associated with the timer endpoint runs as a daemon.  * <p/>  * The default value is true.  */ ;/**  * Specifies whether or not the thread associated with the timer endpoint runs as a daemon.  * <p/>  * The default value is true.  */ @ManagedAttribute(description = "Timer Daemon") public void setDaemon(boolean daemon) {     this.daemon = daemon. }
false;public;0;4;;@ManagedAttribute(description = "Timer Delay") public long getDelay() {     return delay. }
true;public;1;4;/**  * The number of milliseconds to wait before the first event is generated. Should not be used in conjunction with the time option.  * <p/>  * The default value is 1000.  * You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour).  * @see <a href="http://camel.apache.org/how-do-i-specify-time-period-in-a-human-friendly-syntax.html">human friendly syntax</a>  */ ;/**  * The number of milliseconds to wait before the first event is generated. Should not be used in conjunction with the time option.  * <p/>  * The default value is 1000.  * You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour).  * @see <a href="http://camel.apache.org/how-do-i-specify-time-period-in-a-human-friendly-syntax.html">human friendly syntax</a>  */ @ManagedAttribute(description = "Timer Delay") public void setDelay(long delay) {     this.delay = delay. }
false;public;0;4;;@ManagedAttribute(description = "Timer FixedRate") public boolean isFixedRate() {     return fixedRate. }
true;public;1;4;/**  * Events take place at approximately regular intervals, separated by the specified period.  */ ;/**  * Events take place at approximately regular intervals, separated by the specified period.  */ @ManagedAttribute(description = "Timer FixedRate") public void setFixedRate(boolean fixedRate) {     this.fixedRate = fixedRate. }
false;public;0;4;;@ManagedAttribute(description = "Timer Period") public long getPeriod() {     return period. }
true;public;1;4;/**  * If greater than 0, generate periodic events every period milliseconds.  * <p/>  * The default value is 1000.  * You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour).  * @see <a href="http://camel.apache.org/how-do-i-specify-time-period-in-a-human-friendly-syntax.html">human friendly syntax</a>  */ ;/**  * If greater than 0, generate periodic events every period milliseconds.  * <p/>  * The default value is 1000.  * You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour).  * @see <a href="http://camel.apache.org/how-do-i-specify-time-period-in-a-human-friendly-syntax.html">human friendly syntax</a>  */ @ManagedAttribute(description = "Timer Period") public void setPeriod(long period) {     this.period = period. }
false;public;0;4;;@ManagedAttribute(description = "Repeat Count") public long getRepeatCount() {     return repeatCount. }
true;public;1;4;/**  * Specifies a maximum limit of number of fires.  * So if you set it to 1, the timer will only fire once.  * If you set it to 5, it will only fire five times.  * A value of zero or negative means fire forever.  */ ;/**  * Specifies a maximum limit of number of fires.  * So if you set it to 1, the timer will only fire once.  * If you set it to 5, it will only fire five times.  * A value of zero or negative means fire forever.  */ @ManagedAttribute(description = "Repeat Count") public void setRepeatCount(long repeatCount) {     this.repeatCount = repeatCount. }
false;public;0;3;;public Date getTime() {     return time. }
true;public;1;3;/**  * A java.util.Date the first event should be generated. If using the URI, the pattern expected is: yyyy-MM-dd HH:mm:ss or yyyy-MM-dd'T'HH:mm:ss.  */ ;/**  * A java.util.Date the first event should be generated. If using the URI, the pattern expected is: yyyy-MM-dd HH:mm:ss or yyyy-MM-dd'T'HH:mm:ss.  */ public void setTime(Date time) {     this.time = time. }
false;public;0;3;;public String getPattern() {     return pattern. }
true;public;1;3;/**  * Allows you to specify a custom Date pattern to use for setting the time option using URI syntax.  */ ;/**  * Allows you to specify a custom Date pattern to use for setting the time option using URI syntax.  */ public void setPattern(String pattern) {     this.pattern = pattern. }
false;public;1;7;;public Timer getTimer(TimerConsumer consumer) {     if (timer != null) {         // use custom timer         return timer.     }     return getComponent().getTimer(consumer). }
true;public;1;3;/**  * To use a custom {@link Timer}  */ ;/**  * To use a custom {@link Timer}  */ public void setTimer(Timer timer) {     this.timer = timer. }
false;public;1;6;;public void removeTimer(TimerConsumer consumer) {     if (timer == null) {         // only remove timer if we are not using a custom timer         getComponent().removeTimer(consumer).     } }
