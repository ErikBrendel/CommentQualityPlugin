commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return new CassandraProducer(this). }
false;public;1;5;;public Consumer createConsumer(Processor processor) throws Exception {     CassandraConsumer consumer = new CassandraConsumer(this, processor).     configureConsumer(consumer).     return consumer. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;33;;@Override protected void doStart() throws Exception {     super.doStart().     if (cluster == null && beanRef != null) {         Object bean = CamelContextHelper.mandatoryLookup(getCamelContext(), beanRef).         if (bean instanceof Session) {             session = (Session) bean.             cluster = session.getCluster().             keyspace = session.getLoggedKeyspace().         } else if (bean instanceof Cluster) {             cluster = (Cluster) bean.             session = null.         } else {             throw new IllegalArgumentException("CQL Bean type should be of type Session or Cluster but was " + bean).         }     }     if (cluster == null && hosts != null) {         // use the cluster builder to create the cluster         cluster = createClusterBuilder().build().     }     if (cluster != null) {         sessionHolder = new CassandraSessionHolder(cluster, keyspace).     } else {         sessionHolder = new CassandraSessionHolder(session).     }     sessionHolder.start(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     super.doStop().     sessionHolder.stop(). }
false;protected;0;3;;protected CassandraSessionHolder getSessionHolder() {     return sessionHolder. }
false;protected;0;20;;protected Cluster.Builder createClusterBuilder() throws Exception {     CassandraLoadBalancingPolicies cassLoadBalancingPolicies = new CassandraLoadBalancingPolicies().     Cluster.Builder clusterBuilder = Cluster.builder().     for (String host : hosts.split(",")) {         clusterBuilder = clusterBuilder.addContactPoint(host).     }     if (port != null) {         clusterBuilder = clusterBuilder.withPort(port).     }     if (clusterName != null) {         clusterBuilder = clusterBuilder.withClusterName(clusterName).     }     if (username != null && !username.isEmpty() && password != null) {         clusterBuilder.withCredentials(username, password).     }     if (loadBalancingPolicy != null && !loadBalancingPolicy.isEmpty()) {         clusterBuilder.withLoadBalancingPolicy(cassLoadBalancingPolicies.getLoadBalancingPolicy(loadBalancingPolicy)).     }     return clusterBuilder. }
true;protected;1;7;/**  * Create and configure a Prepared CQL statement  */ ;/**  * Create and configure a Prepared CQL statement  */ protected PreparedStatement prepareStatement(String cql) {     PreparedStatement preparedStatement = getSessionHolder().getSession().prepare(cql).     if (consistencyLevel != null) {         preparedStatement.setConsistencyLevel(consistencyLevel).     }     return preparedStatement. }
true;protected;0;3;/**  * Create and configure a Prepared CQL statement  */ ;/**  * Create and configure a Prepared CQL statement  */ protected PreparedStatement prepareStatement() {     return prepareStatement(cql). }
true;protected;2;3;/**  * Copy ResultSet into Message.  */ ;/**  * Copy ResultSet into Message.  */ protected void fillMessage(ResultSet resultSet, Message message) {     message.setBody(resultSetConversionStrategy.getBody(resultSet)). }
false;public;0;3;;public String getBean() {     return beanRef. }
true;public;1;3;/**  * Instead of using a hostname:port, refer to an existing configured Session or Cluster from the Camel registry to be used.  */ ;/**  * Instead of using a hostname:port, refer to an existing configured Session or Cluster from the Camel registry to be used.  */ public void setBean(String beanRef) {     this.beanRef = beanRef. }
false;public;0;4;;@Deprecated public String getBeanRef() {     return beanRef. }
false;public;1;4;;@Deprecated public void setBeanRef(String beanRef) {     this.beanRef = beanRef. }
false;public;0;3;;public String getHosts() {     return hosts. }
true;public;1;3;/**  * Hostname(s) cassansdra server(s). Multiple hosts can be separated by comma.  */ ;/**  * Hostname(s) cassansdra server(s). Multiple hosts can be separated by comma.  */ public void setHosts(String hosts) {     this.hosts = hosts. }
false;public;0;3;;public Integer getPort() {     return port. }
true;public;1;3;/**  * Port number of cassansdra server(s)  */ ;/**  * Port number of cassansdra server(s)  */ public void setPort(Integer port) {     this.port = port. }
false;public;0;3;;public String getKeyspace() {     return keyspace. }
true;public;1;3;/**  * Keyspace to use  */ ;/**  * Keyspace to use  */ public void setKeyspace(String keyspace) {     this.keyspace = keyspace. }
false;public;0;3;;public String getCql() {     return cql. }
true;public;1;3;/**  * CQL query to perform. Can be overridden with the message header with key CamelCqlQuery.  */ ;/**  * CQL query to perform. Can be overridden with the message header with key CamelCqlQuery.  */ public void setCql(String cql) {     this.cql = cql. }
false;public;0;3;;public Cluster getCluster() {     return cluster. }
true;public;1;3;/**  * To use the Cluster instance (you would normally not use this option)  */ ;/**  * To use the Cluster instance (you would normally not use this option)  */ public void setCluster(Cluster cluster) {     this.cluster = cluster. }
false;public;0;7;;public Session getSession() {     if (session == null) {         return sessionHolder.getSession().     } else {         return session.     } }
true;public;1;3;/**  * To use the Session instance (you would normally not use this option)  */ ;/**  * To use the Session instance (you would normally not use this option)  */ public void setSession(Session session) {     this.session = session. }
false;public;0;3;;public String getClusterName() {     return clusterName. }
true;public;1;3;/**  * Cluster name  */ ;/**  * Cluster name  */ public void setClusterName(String clusterName) {     this.clusterName = clusterName. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;3;/**  * Username for session authentication  */ ;/**  * Username for session authentication  */ public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * Password for session authentication  */ ;/**  * Password for session authentication  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public ConsistencyLevel getConsistencyLevel() {     return consistencyLevel. }
true;public;1;3;/**  * Consistency level to use  */ ;/**  * Consistency level to use  */ public void setConsistencyLevel(ConsistencyLevel consistencyLevel) {     this.consistencyLevel = consistencyLevel. }
false;public;0;3;;public ResultSetConversionStrategy getResultSetConversionStrategy() {     return resultSetConversionStrategy. }
true;public;1;3;/**  * To use a custom class that implements logic for converting ResultSet into message body ALL, ONE, LIMIT_10, LIMIT_100...  */ ;/**  * To use a custom class that implements logic for converting ResultSet into message body ALL, ONE, LIMIT_10, LIMIT_100...  */ public void setResultSetConversionStrategy(ResultSetConversionStrategy resultSetConversionStrategy) {     this.resultSetConversionStrategy = resultSetConversionStrategy. }
false;public;0;3;;public boolean isPrepareStatements() {     return prepareStatements. }
true;public;1;3;/**  * Whether to use PreparedStatements or regular Statements  */ ;/**  * Whether to use PreparedStatements or regular Statements  */ public void setPrepareStatements(boolean prepareStatements) {     this.prepareStatements = prepareStatements. }
true;public;0;3;/**  * To use a specific LoadBalancingPolicy  */ ;/**  * To use a specific LoadBalancingPolicy  */ public String getLoadBalancingPolicy() {     return loadBalancingPolicy. }
false;public;1;3;;public void setLoadBalancingPolicy(String loadBalancingPolicy) {     this.loadBalancingPolicy = loadBalancingPolicy. }
