commented;modifiers;parameterAmount;loc;comment;code
false;public;3;18;;public ByteBuffer marshallExchange(CamelContext camelContext, Exchange exchange, boolean allowSerializedHeaders) throws IOException {     // use DefaultExchangeHolder to marshal to a serialized object     DefaultExchangeHolder pe = DefaultExchangeHolder.marshal(exchange, false, allowSerializedHeaders).     // add the aggregated size and timeout property as the only properties we want to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_SIZE, exchange.getProperty(Exchange.AGGREGATED_SIZE, Integer.class)).     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_TIMEOUT, exchange.getProperty(Exchange.AGGREGATED_TIMEOUT, Long.class)).     // add the aggregated completed by property to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_COMPLETED_BY, exchange.getProperty(Exchange.AGGREGATED_COMPLETED_BY, String.class)).     // add the aggregated correlation key property to retain     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_CORRELATION_KEY, exchange.getProperty(Exchange.AGGREGATED_CORRELATION_KEY, String.class)).     // and a guard property if using the flexible toolbox aggregator     DefaultExchangeHolder.addProperty(pe, Exchange.AGGREGATED_COLLECTION_GUARD, exchange.getProperty(Exchange.AGGREGATED_COLLECTION_GUARD, String.class)).     // persist the from endpoint as well     if (exchange.getFromEndpoint() != null) {         DefaultExchangeHolder.addProperty(pe, "CamelAggregatedFromEndpoint", exchange.getFromEndpoint().getEndpointUri()).     }     return ByteBuffer.wrap(serialize(pe)). }
false;public;2;14;;public Exchange unmarshallExchange(CamelContext camelContext, ByteBuffer buffer) throws IOException, ClassNotFoundException {     DefaultExchangeHolder pe = (DefaultExchangeHolder) deserialize(new ByteBufferInputStream(buffer)).     Exchange answer = new DefaultExchange(camelContext).     DefaultExchangeHolder.unmarshal(answer, pe).     // restore the from endpoint     String fromEndpointUri = (String) answer.removeProperty("CamelAggregatedFromEndpoint").     if (fromEndpointUri != null) {         Endpoint fromEndpoint = camelContext.hasEndpoint(fromEndpointUri).         if (fromEndpoint != null) {             answer.setFromEndpoint(fromEndpoint).         }     }     return answer. }
false;private;1;7;;private byte[] serialize(Object object) throws IOException {     ByteArrayOutputStream bytesOut = new ByteArrayOutputStream().     ObjectOutputStream objectOut = new ObjectOutputStream(bytesOut).     objectOut.writeObject(object).     objectOut.close().     return bytesOut.toByteArray(). }
false;private;1;6;;private Object deserialize(InputStream bytes) throws IOException, ClassNotFoundException {     ObjectInputStream objectIn = new ObjectInputStream(bytes).     Object object = objectIn.readObject().     objectIn.close().     return object. }
false;public;0;7;;@Override public int read() throws IOException {     if (!buffer.hasRemaining()) {         return -1.     }     return buffer.get(). }
false;public;3;9;;@Override public int read(byte[] bytes, int off, int len) throws IOException {     if (!buffer.hasRemaining()) {         return -1.     }     len = Math.min(len, buffer.remaining()).     buffer.get(bytes, off, len).     return len. }
