commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CassandraEndpoint getEndpoint() {     return (CassandraEndpoint) super.getEndpoint(). }
false;protected;0;27;;@Override protected int poll() throws Exception {     // Execute CQL Query     Session session = getEndpoint().getSessionHolder().getSession().     ResultSet resultSet.     if (isPrepareStatements()) {         resultSet = session.execute(preparedStatement.bind()).     } else {         resultSet = session.execute(getEndpoint().getCql()).     }     // Create message from ResultSet     Exchange exchange = getEndpoint().createExchange().     Message message = exchange.getIn().     getEndpoint().fillMessage(resultSet, message).     try {         // send message to next processor in the route         getProcessor().process(exchange).         // number of messages polled         return 1.     } finally {         // log exception if an exception occurred and was not handled         if (exchange.getException() != null) {             getExceptionHandler().handleException("Error processing exchange", exchange, exchange.getException()).         }     } }
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     if (isPrepareStatements()) {         preparedStatement = getEndpoint().prepareStatement().     } }
false;protected;0;5;;@Override protected void doStop() throws Exception {     this.preparedStatement = null.     super.doStop(). }
false;public;0;3;;public boolean isPrepareStatements() {     return getEndpoint().isPrepareStatements(). }
