commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected void doStart() throws Exception {     super.doStart().     if (isPrepareStatements() && getEndpoint().getCql() != null) {         this.preparedStatement = getEndpoint().prepareStatement().     } }
false;protected;0;5;;@Override protected void doStop() throws Exception {     this.preparedStatement = null.     super.doStop(). }
false;public;0;4;;@Override public CassandraEndpoint getEndpoint() {     return (CassandraEndpoint) super.getEndpoint(). }
false;public;0;3;;public boolean isPrepareStatements() {     return getEndpoint().isPrepareStatements(). }
false;private;1;16;;private Object[] getCqlParams(Message message) {     Object cqlParamsObj = message.getBody().     Object[] cqlParams.     final Class<Object[]> objectArrayClazz = Object[].class.     if (cqlParamsObj == null) {         cqlParams = null.     } else if (objectArrayClazz.isInstance(cqlParamsObj)) {         cqlParams = objectArrayClazz.cast(cqlParamsObj).     } else if (cqlParamsObj instanceof Collection) {         final Collection cqlParamsColl = (Collection) cqlParamsObj.         cqlParams = cqlParamsColl.toArray().     } else {         cqlParams = new Object[] { cqlParamsObj }.     }     return cqlParams. }
true;private;1;17;/**  * Execute CQL query using incoming message body has statement parameters.  */ ;/**  * Execute CQL query using incoming message body has statement parameters.  */ private ResultSet execute(Message message) {     Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY).     // Convert Empty string to null     if (messageCql instanceof String && ((String) messageCql).isEmpty()) {         messageCql = null.     }     Object[] cqlParams = getCqlParams(message).     ResultSet resultSet.     Session session = getEndpoint().getSessionHolder().getSession().     if (isPrepareStatements()) {         resultSet = executePreparedStatement(session, messageCql, cqlParams).     } else {         resultSet = executeStatement(session, messageCql, cqlParams).     }     return resultSet. }
true;private;3;22;/**  * Execute CQL as PreparedStatement  */ ;/**  * Execute CQL as PreparedStatement  */ private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {     ResultSet resultSet.     PreparedStatement lPreparedStatement.     if (messageCql == null) {         // URI CQL         lPreparedStatement = this.preparedStatement.     } else if (messageCql instanceof String) {         // Message CQL         lPreparedStatement = getEndpoint().prepareStatement((String) messageCql).     } else if (messageCql instanceof RegularStatement) {         // Message Statement         lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql).     } else {         throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header").     }     if (isEmpty(cqlParams)) {         resultSet = session.execute(lPreparedStatement.bind()).     } else {         resultSet = session.execute(lPreparedStatement.bind(cqlParams)).     }     return resultSet. }
true;private;3;25;/**  * Execute CQL as is  */ ;/**  * Execute CQL as is  */ private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {     ResultSet resultSet.     String cql = null.     RegularStatement statement = null.     if (messageCql == null) {         // URI CQL         cql = getEndpoint().getCql().     } else if (messageCql instanceof String) {         // Message CQL         cql = (String) messageCql.     } else if (messageCql instanceof RegularStatement) {         // Message Statement         statement = (RegularStatement) messageCql.     } else {         throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header").     }     if (statement != null) {         resultSet = session.execute(statement).     } else if (isEmpty(cqlParams)) {         resultSet = session.execute(cql).     } else {         resultSet = session.execute(cql, cqlParams).     }     return resultSet. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     // copy the header of in message to the out message     exchange.getOut().copyFrom(exchange.getIn()).     ResultSet resultSet = execute(exchange.getIn()).     getEndpoint().fillMessage(resultSet, exchange.getOut()). }
