# id;timestamp;commentText;codeText;commentWords;codeWords
CassandraProducer -> private ResultSet execute(Message message);1419330065;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        String messageCql = message.getHeader(CassandraConstants.CQL_QUERY, String.class)__        Object[] cqlParams = getCqlParams(message)__        _        ResultSet resultSet_  _        PreparedStatement lPreparedStatement__        if (messageCql == null || messageCql.isEmpty()) {_            _            if (preparedStatement == null) {_                this.preparedStatement = getEndpoint().prepareStatement()__            }_            lPreparedStatement = this.preparedStatement__        } else {_            _            lPreparedStatement = getEndpoint().prepareStatement(messageCql)__        }_        Session session = getEndpoint().getSession()__        if (cqlParams == null) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }            _        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,string,message,cql,message,get,header,cassandra,constants,string,class,object,cql,params,get,cql,params,message,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,message,cql,is,empty,if,prepared,statement,null,this,prepared,statement,get,endpoint,prepare,statement,l,prepared,statement,this,prepared,statement,else,l,prepared,statement,get,endpoint,prepare,statement,message,cql,session,session,get,endpoint,get,session,if,cql,params,null,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1419331245;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        String messageCql = message.getHeader(CassandraConstants.CQL_QUERY, String.class)__        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null || messageCql.isEmpty()) {_            _            if (preparedStatement == null) {_                this.preparedStatement = getEndpoint().prepareStatement()__            }_            lPreparedStatement = this.preparedStatement__        } else {_            _            lPreparedStatement = getEndpoint().prepareStatement(messageCql)__        }_        Session session = getEndpoint().getSession()__        if (cqlParams == null) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,string,message,cql,message,get,header,cassandra,constants,string,class,object,cql,params,get,cql,params,message,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,message,cql,is,empty,if,prepared,statement,null,this,prepared,statement,get,endpoint,prepare,statement,l,prepared,statement,this,prepared,statement,else,l,prepared,statement,get,endpoint,prepare,statement,message,cql,session,session,get,endpoint,get,session,if,cql,params,null,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1420547396;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        String messageCql = message.getHeader(CassandraConstants.CQL_QUERY, String.class)__        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null || messageCql.isEmpty()) {_            _            if (preparedStatement == null) {_                this.preparedStatement = getEndpoint().prepareStatement()__            }_            lPreparedStatement = this.preparedStatement__        } else {_            _            lPreparedStatement = getEndpoint().prepareStatement(messageCql)__        }_        Session session = getEndpoint().getSessionHolder().getSession()__        if (cqlParams == null) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,string,message,cql,message,get,header,cassandra,constants,string,class,object,cql,params,get,cql,params,message,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,message,cql,is,empty,if,prepared,statement,null,this,prepared,statement,get,endpoint,prepare,statement,l,prepared,statement,this,prepared,statement,else,l,prepared,statement,get,endpoint,prepare,statement,message,cql,session,session,get,endpoint,get,session,holder,get,session,if,cql,params,null,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1424250048;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        String messageCql = message.getHeader(CassandraConstants.CQL_QUERY, String.class)__        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null || messageCql.isEmpty()) {_            _            if (preparedStatement == null) {_                this.preparedStatement = getEndpoint().prepareStatement()__            }_            lPreparedStatement = this.preparedStatement__        } else {_            _            lPreparedStatement = getEndpoint().prepareStatement(messageCql)__        }_        Session session = getEndpoint().getSessionHolder().getSession()__        if (cqlParams == null || cqlParams.length==0) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,string,message,cql,message,get,header,cassandra,constants,string,class,object,cql,params,get,cql,params,message,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,message,cql,is,empty,if,prepared,statement,null,this,prepared,statement,get,endpoint,prepare,statement,l,prepared,statement,this,prepared,statement,else,l,prepared,statement,get,endpoint,prepare,statement,message,cql,session,session,get,endpoint,get,session,holder,get,session,if,cql,params,null,cql,params,length,0,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1424250048;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        String messageCql = message.getHeader(CassandraConstants.CQL_QUERY, String.class)__        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,string,message,cql,message,get,header,cassandra,constants,string,class,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1424250049;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY)__        _        if (messageCql instanceof String && ((String) messageCql).isEmpty()) {_            messageCql = null__        }_        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,object,message,cql,message,get,header,cassandra,constants,if,message,cql,instanceof,string,string,message,cql,is,empty,message,cql,null,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1424250565;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY)__        _        if (messageCql instanceof String && ((String) messageCql).isEmpty()) {_            messageCql = null__        }_        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,object,message,cql,message,get,header,cassandra,constants,if,message,cql,instanceof,string,string,message,cql,is,empty,message,cql,null,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1441350815;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY)__        _        if (messageCql instanceof String && ((String) messageCql).isEmpty()) {_            messageCql = null__        }_        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,object,message,cql,message,get,header,cassandra,constants,if,message,cql,instanceof,string,string,message,cql,is,empty,message,cql,null,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1460968274;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY)__        _        if (messageCql instanceof String && ((String) messageCql).isEmpty()) {_            messageCql = null__        }_        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,object,message,cql,message,get,header,cassandra,constants,if,message,cql,instanceof,string,string,message,cql,is,empty,message,cql,null,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1540108160;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY)__        _        if (messageCql instanceof String && ((String) messageCql).isEmpty()) {_            messageCql = null__        }_        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,object,message,cql,message,get,header,cassandra,constants,if,message,cql,instanceof,string,string,message,cql,is,empty,message,cql,null,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet execute(Message message);1540108163;Execute CQL query using incoming message body has statement parameters.;private ResultSet execute(Message message) {_        Object messageCql = message.getHeader(CassandraConstants.CQL_QUERY)__        _        if (messageCql instanceof String && ((String) messageCql).isEmpty()) {_            messageCql = null__        }_        Object[] cqlParams = getCqlParams(message)___        ResultSet resultSet__        Session session = getEndpoint().getSessionHolder().getSession()__        if (isPrepareStatements()) {_            resultSet = executePreparedStatement(session, messageCql, cqlParams)__        } else {_            resultSet = executeStatement(session, messageCql, cqlParams)__        }_        return resultSet__    };execute,cql,query,using,incoming,message,body,has,statement,parameters;private,result,set,execute,message,message,object,message,cql,message,get,header,cassandra,constants,if,message,cql,instanceof,string,string,message,cql,is,empty,message,cql,null,object,cql,params,get,cql,params,message,result,set,result,set,session,session,get,endpoint,get,session,holder,get,session,if,is,prepare,statements,result,set,execute,prepared,statement,session,message,cql,cql,params,else,result,set,execute,statement,session,message,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams);1424250049;Execute CQL as is;private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        String cql = null__        RegularStatement statement = null__        if (messageCql == null) {_            _            cql = getEndpoint().getCql()__        } else if (messageCql instanceof String) {_            _            cql = (String) messageCql__        } else if (messageCql instanceof RegularStatement) {_            _            statement = (RegularStatement) messageCql__        } else {_            throw new IllegalArgumentException("Invalid "+CassandraConstants.CQL_QUERY+" header")__        }_        if (statement != null) {_            resultSet = session.execute(statement)__        } else if (isEmpty(cqlParams)) {_            resultSet = session.execute(cql)__        } else {_            resultSet = session.execute(cql, cqlParams)__        }_        return resultSet__    };execute,cql,as,is;private,result,set,execute,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,string,cql,null,regular,statement,statement,null,if,message,cql,null,cql,get,endpoint,get,cql,else,if,message,cql,instanceof,string,cql,string,message,cql,else,if,message,cql,instanceof,regular,statement,statement,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,statement,null,result,set,session,execute,statement,else,if,is,empty,cql,params,result,set,session,execute,cql,else,result,set,session,execute,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams);1424250565;Execute CQL as is;private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        String cql = null__        RegularStatement statement = null__        if (messageCql == null) {_            _            cql = getEndpoint().getCql()__        } else if (messageCql instanceof String) {_            _            cql = (String) messageCql__        } else if (messageCql instanceof RegularStatement) {_            _            statement = (RegularStatement) messageCql__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (statement != null) {_            resultSet = session.execute(statement)__        } else if (isEmpty(cqlParams)) {_            resultSet = session.execute(cql)__        } else {_            resultSet = session.execute(cql, cqlParams)__        }_        return resultSet__    };execute,cql,as,is;private,result,set,execute,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,string,cql,null,regular,statement,statement,null,if,message,cql,null,cql,get,endpoint,get,cql,else,if,message,cql,instanceof,string,cql,string,message,cql,else,if,message,cql,instanceof,regular,statement,statement,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,statement,null,result,set,session,execute,statement,else,if,is,empty,cql,params,result,set,session,execute,cql,else,result,set,session,execute,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams);1441350815;Execute CQL as is;private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        String cql = null__        RegularStatement statement = null__        if (messageCql == null) {_            _            cql = getEndpoint().getCql()__        } else if (messageCql instanceof String) {_            _            cql = (String) messageCql__        } else if (messageCql instanceof RegularStatement) {_            _            statement = (RegularStatement) messageCql__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (statement != null) {_            resultSet = session.execute(statement)__        } else if (isEmpty(cqlParams)) {_            resultSet = session.execute(cql)__        } else {_            resultSet = session.execute(cql, cqlParams)__        }_        return resultSet__    };execute,cql,as,is;private,result,set,execute,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,string,cql,null,regular,statement,statement,null,if,message,cql,null,cql,get,endpoint,get,cql,else,if,message,cql,instanceof,string,cql,string,message,cql,else,if,message,cql,instanceof,regular,statement,statement,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,statement,null,result,set,session,execute,statement,else,if,is,empty,cql,params,result,set,session,execute,cql,else,result,set,session,execute,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams);1460968274;Execute CQL as is;private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        String cql = null__        RegularStatement statement = null__        if (messageCql == null) {_            _            cql = getEndpoint().getCql()__        } else if (messageCql instanceof String) {_            _            cql = (String) messageCql__        } else if (messageCql instanceof RegularStatement) {_            _            statement = (RegularStatement) messageCql__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (statement != null) {_            resultSet = session.execute(statement)__        } else if (isEmpty(cqlParams)) {_            resultSet = session.execute(cql)__        } else {_            resultSet = session.execute(cql, cqlParams)__        }_        return resultSet__    };execute,cql,as,is;private,result,set,execute,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,string,cql,null,regular,statement,statement,null,if,message,cql,null,cql,get,endpoint,get,cql,else,if,message,cql,instanceof,string,cql,string,message,cql,else,if,message,cql,instanceof,regular,statement,statement,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,statement,null,result,set,session,execute,statement,else,if,is,empty,cql,params,result,set,session,execute,cql,else,result,set,session,execute,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams);1540108160;Execute CQL as is;private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        String cql = null__        RegularStatement statement = null__        if (messageCql == null) {_            _            cql = getEndpoint().getCql()__        } else if (messageCql instanceof String) {_            _            cql = (String) messageCql__        } else if (messageCql instanceof RegularStatement) {_            _            statement = (RegularStatement) messageCql__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (statement != null) {_            resultSet = session.execute(statement)__        } else if (isEmpty(cqlParams)) {_            resultSet = session.execute(cql)__        } else {_            resultSet = session.execute(cql, cqlParams)__        }_        return resultSet__    };execute,cql,as,is;private,result,set,execute,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,string,cql,null,regular,statement,statement,null,if,message,cql,null,cql,get,endpoint,get,cql,else,if,message,cql,instanceof,string,cql,string,message,cql,else,if,message,cql,instanceof,regular,statement,statement,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,statement,null,result,set,session,execute,statement,else,if,is,empty,cql,params,result,set,session,execute,cql,else,result,set,session,execute,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams);1540108163;Execute CQL as is;private ResultSet executeStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        String cql = null__        RegularStatement statement = null__        if (messageCql == null) {_            _            cql = getEndpoint().getCql()__        } else if (messageCql instanceof String) {_            _            cql = (String) messageCql__        } else if (messageCql instanceof RegularStatement) {_            _            statement = (RegularStatement) messageCql__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (statement != null) {_            resultSet = session.execute(statement)__        } else if (isEmpty(cqlParams)) {_            resultSet = session.execute(cql)__        } else {_            resultSet = session.execute(cql, cqlParams)__        }_        return resultSet__    };execute,cql,as,is;private,result,set,execute,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,string,cql,null,regular,statement,statement,null,if,message,cql,null,cql,get,endpoint,get,cql,else,if,message,cql,instanceof,string,cql,string,message,cql,else,if,message,cql,instanceof,regular,statement,statement,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,statement,null,result,set,session,execute,statement,else,if,is,empty,cql,params,result,set,session,execute,cql,else,result,set,session,execute,cql,cql,params,return,result,set
CassandraProducer -> private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams);1424250049;Execute CQL as PreparedStatement;private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null) {_            _            lPreparedStatement = this.preparedStatement__        } else if (messageCql instanceof String) {_            _            lPreparedStatement = getEndpoint().prepareStatement((String) messageCql)__        } else if (messageCql instanceof RegularStatement) {_            _            lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql)__        } else {_            throw new IllegalArgumentException("Invalid "+CassandraConstants.CQL_QUERY+" header")__        }_        if (isEmpty(cqlParams)) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,as,prepared,statement;private,result,set,execute,prepared,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,l,prepared,statement,this,prepared,statement,else,if,message,cql,instanceof,string,l,prepared,statement,get,endpoint,prepare,statement,string,message,cql,else,if,message,cql,instanceof,regular,statement,l,prepared,statement,get,endpoint,get,session,prepare,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,is,empty,cql,params,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams);1424250565;Execute CQL as PreparedStatement;private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null) {_            _            lPreparedStatement = this.preparedStatement__        } else if (messageCql instanceof String) {_            _            lPreparedStatement = getEndpoint().prepareStatement((String) messageCql)__        } else if (messageCql instanceof RegularStatement) {_            _            lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql)__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (isEmpty(cqlParams)) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,as,prepared,statement;private,result,set,execute,prepared,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,l,prepared,statement,this,prepared,statement,else,if,message,cql,instanceof,string,l,prepared,statement,get,endpoint,prepare,statement,string,message,cql,else,if,message,cql,instanceof,regular,statement,l,prepared,statement,get,endpoint,get,session,prepare,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,is,empty,cql,params,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams);1441350815;Execute CQL as PreparedStatement;private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null) {_            _            lPreparedStatement = this.preparedStatement__        } else if (messageCql instanceof String) {_            _            lPreparedStatement = getEndpoint().prepareStatement((String) messageCql)__        } else if (messageCql instanceof RegularStatement) {_            _            lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql)__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (isEmpty(cqlParams)) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,as,prepared,statement;private,result,set,execute,prepared,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,l,prepared,statement,this,prepared,statement,else,if,message,cql,instanceof,string,l,prepared,statement,get,endpoint,prepare,statement,string,message,cql,else,if,message,cql,instanceof,regular,statement,l,prepared,statement,get,endpoint,get,session,prepare,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,is,empty,cql,params,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams);1460968274;Execute CQL as PreparedStatement;private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null) {_            _            lPreparedStatement = this.preparedStatement__        } else if (messageCql instanceof String) {_            _            lPreparedStatement = getEndpoint().prepareStatement((String) messageCql)__        } else if (messageCql instanceof RegularStatement) {_            _            lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql)__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (isEmpty(cqlParams)) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,as,prepared,statement;private,result,set,execute,prepared,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,l,prepared,statement,this,prepared,statement,else,if,message,cql,instanceof,string,l,prepared,statement,get,endpoint,prepare,statement,string,message,cql,else,if,message,cql,instanceof,regular,statement,l,prepared,statement,get,endpoint,get,session,prepare,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,is,empty,cql,params,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams);1540108160;Execute CQL as PreparedStatement;private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null) {_            _            lPreparedStatement = this.preparedStatement__        } else if (messageCql instanceof String) {_            _            lPreparedStatement = getEndpoint().prepareStatement((String) messageCql)__        } else if (messageCql instanceof RegularStatement) {_            _            lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql)__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (isEmpty(cqlParams)) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,as,prepared,statement;private,result,set,execute,prepared,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,l,prepared,statement,this,prepared,statement,else,if,message,cql,instanceof,string,l,prepared,statement,get,endpoint,prepare,statement,string,message,cql,else,if,message,cql,instanceof,regular,statement,l,prepared,statement,get,endpoint,get,session,prepare,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,is,empty,cql,params,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
CassandraProducer -> private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams);1540108163;Execute CQL as PreparedStatement;private ResultSet executePreparedStatement(Session session, Object messageCql, Object[] cqlParams) {_        ResultSet resultSet__        PreparedStatement lPreparedStatement__        if (messageCql == null) {_            _            lPreparedStatement = this.preparedStatement__        } else if (messageCql instanceof String) {_            _            lPreparedStatement = getEndpoint().prepareStatement((String) messageCql)__        } else if (messageCql instanceof RegularStatement) {_            _            lPreparedStatement = getEndpoint().getSession().prepare((RegularStatement) messageCql)__        } else {_            throw new IllegalArgumentException("Invalid " + CassandraConstants.CQL_QUERY + " header")__        }_        if (isEmpty(cqlParams)) {_            resultSet = session.execute(lPreparedStatement.bind())__        } else {_            resultSet = session.execute(lPreparedStatement.bind(cqlParams))__        }_        return resultSet__    };execute,cql,as,prepared,statement;private,result,set,execute,prepared,statement,session,session,object,message,cql,object,cql,params,result,set,result,set,prepared,statement,l,prepared,statement,if,message,cql,null,l,prepared,statement,this,prepared,statement,else,if,message,cql,instanceof,string,l,prepared,statement,get,endpoint,prepare,statement,string,message,cql,else,if,message,cql,instanceof,regular,statement,l,prepared,statement,get,endpoint,get,session,prepare,regular,statement,message,cql,else,throw,new,illegal,argument,exception,invalid,cassandra,constants,header,if,is,empty,cql,params,result,set,session,execute,l,prepared,statement,bind,else,result,set,session,execute,l,prepared,statement,bind,cql,params,return,result,set
