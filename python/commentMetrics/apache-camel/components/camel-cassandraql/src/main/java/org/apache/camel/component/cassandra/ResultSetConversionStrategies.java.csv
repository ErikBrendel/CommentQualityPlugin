commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Object getBody(ResultSet resultSet) {     return resultSet.all(). }
false;public;1;4;;@Override public Object getBody(ResultSet resultSet) {     return resultSet.one(). }
true;public,static;0;3;/**  * Retrieve all rows.  * Message body contains a big list of {@link Row}s  */ ;/**  * Retrieve all rows.  * Message body contains a big list of {@link Row}s  */ public static ResultSetConversionStrategy all() {     return ALL. }
true;public,static;0;3;/**  * Retrieve a single row.  * Message body contains a single {@link Row}  */ ;/**  * Retrieve a single row.  * Message body contains a single {@link Row}  */ public static ResultSetConversionStrategy one() {     return ONE. }
false;public;1;11;;@Override public Object getBody(ResultSet resultSet) {     List<Row> rows = new ArrayList<>(rowMax).     int rowCount = 0.     Iterator<Row> rowIter = resultSet.iterator().     while (rowIter.hasNext() && rowCount < rowMax) {         rows.add(rowIter.next()).         rowCount++.     }     return rows. }
true;public,static;1;3;/**  * Retrieve a limited list of rows.  * Message body contains a list of {@link Row} containing at most rowMax rows.  */ ;/**  * Retrieve a limited list of rows.  * Message body contains a list of {@link Row} containing at most rowMax rows.  */ public static ResultSetConversionStrategy limit(int rowMax) {     return new LimitResultSetConversionStrategy(rowMax). }
true;public,static;1;17;/**  * Get {@link ResultSetConversionStrategy} from String  */ ;/**  * Get {@link ResultSetConversionStrategy} from String  */ public static ResultSetConversionStrategy fromName(String name) {     if (name == null) {         return null.     }     if (name.equals("ALL")) {         return ResultSetConversionStrategies.all().     }     if (name.equals("ONE")) {         return ResultSetConversionStrategies.one().     }     Matcher matcher = LIMIT_NAME_PATTERN.matcher(name).     if (matcher.matches()) {         int limit = Integer.parseInt(matcher.group(1)).         return limit(limit).     }     throw new IllegalArgumentException("Unknown conversion strategy " + name). }
