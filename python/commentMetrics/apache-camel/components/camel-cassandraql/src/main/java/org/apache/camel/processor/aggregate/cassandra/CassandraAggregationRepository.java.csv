commented;modifiers;parameterAmount;loc;comment;code
true;protected;1;3;/**  * Generate primary key values from aggregation key.  */ ;/**  * Generate primary key values from aggregation key.  */ protected Object[] getPKValues(String key) {     return append(prefixPKValues, key). }
true;private;0;3;/**  * Get aggregation key colum name.  */ ;/**  * Get aggregation key colum name.  */ private String getKeyColumn() {     return pkColumns[pkColumns.length - 1]. }
false;private;0;3;;private String[] getAllColumns() {     return append(pkColumns, exchangeIdColumn, exchangeColumn). }
false;protected;0;9;;// -------------------------------------------------------------------------- // Service support @Override protected void doStart() throws Exception {     sessionHolder.start().     initInsertStatement().     initSelectStatement().     initDeleteStatement().     initSelectKeyIdStatement().     initDeleteIfIdStatement(). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     sessionHolder.stop(). }
false;private;0;8;;// ------------------------------------------------------------------------- // Add exchange to repository private void initInsertStatement() {     Insert insert = generateInsert(table, getAllColumns(), false, ttl).     insert = applyConsistencyLevel(insert, writeConsistencyLevel).     LOGGER.debug("Generated Insert {}", insert).     insertStatement = getSession().prepare(insert). }
true;public;3;13;/**  * Insert or update exchange in aggregation table.  */ ;/**  * Insert or update exchange in aggregation table.  */ @Override public Exchange add(CamelContext camelContext, String key, Exchange exchange) {     final Object[] idValues = getPKValues(key).     LOGGER.debug("Inserting key {} exchange {}", idValues, exchange).     try {         ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange, allowSerializedHeaders).         Object[] cqlParams = concat(idValues, new Object[] { exchange.getExchangeId(), marshalledExchange }).         getSession().execute(insertStatement.bind(cqlParams)).         return exchange.     } catch (IOException iOException) {         throw new CassandraAggregationException("Failed to write exchange", exchange, iOException).     } }
false;protected;0;8;;// ------------------------------------------------------------------------- // Get exchange from repository protected void initSelectStatement() {     Select select = generateSelect(table, getAllColumns(), pkColumns).     select = applyConsistencyLevel(select, readConsistencyLevel).     LOGGER.debug("Generated Select {}", select).     selectStatement = getSession().prepare(select). }
true;public;2;17;/**  * Get exchange from aggregation table by aggregation key.  */ ;/**  * Get exchange from aggregation table by aggregation key.  */ @Override public Exchange get(CamelContext camelContext, String key) {     Object[] pkValues = getPKValues(key).     LOGGER.debug("Selecting key {}", pkValues).     Row row = getSession().execute(selectStatement.bind(pkValues)).one().     Exchange exchange = null.     if (row != null) {         try {             exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn)).         } catch (IOException iOException) {             throw new CassandraAggregationException("Failed to read exchange", exchange, iOException).         } catch (ClassNotFoundException classNotFoundException) {             throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException).         }     }     return exchange. }
true;private;0;7;// Confirm exchange in repository ;// ------------------------------------------------------------------------- // Confirm exchange in repository private void initDeleteIfIdStatement() {     Delete delete = generateDelete(table, pkColumns, false).     Delete.Conditions deleteIf = delete.onlyIf(eq(exchangeIdColumn, bindMarker())).     deleteIf = applyConsistencyLevel(deleteIf, writeConsistencyLevel).     LOGGER.debug("Generated Delete If Id {}", deleteIf).     deleteIfIdStatement = getSession().prepare(deleteIf). }
true;public;2;14;/**  * Remove exchange by Id from aggregation table.  */ ;/**  * Remove exchange by Id from aggregation table.  */ @Override public void confirm(CamelContext camelContext, String exchangeId) {     String keyColumn = getKeyColumn().     LOGGER.debug("Selecting Ids").     List<Row> rows = selectKeyIds().     for (Row row : rows) {         if (row.getString(exchangeIdColumn).equals(exchangeId)) {             String key = row.getString(keyColumn).             Object[] cqlParams = append(getPKValues(key), exchangeId).             LOGGER.debug("Deleting If Id {}", cqlParams).             getSession().execute(deleteIfIdStatement.bind(cqlParams)).         }     } }
false;private;0;6;;// ------------------------------------------------------------------------- // Remove exchange from repository private void initDeleteStatement() {     Delete delete = generateDelete(table, pkColumns, false).     delete = applyConsistencyLevel(delete, writeConsistencyLevel).     LOGGER.debug("Generated Delete {}", delete).     deleteStatement = getSession().prepare(delete). }
true;public;3;6;/**  * Remove exchange by aggregation key from aggregation table.  */ ;/**  * Remove exchange by aggregation key from aggregation table.  */ @Override public void remove(CamelContext camelContext, String key, Exchange exchange) {     Object[] idValues = getPKValues(key).     LOGGER.debug("Deleting key {}", (Object) idValues).     getSession().execute(deleteStatement.bind(idValues)). }
true;private;0;8;// ------------------------------------------------------------------------- ;// ------------------------------------------------------------------------- private void initSelectKeyIdStatement() {     Select select = generateSelect(table, // Key + Exchange Id columns     new String[] { getKeyColumn(), exchangeIdColumn }, pkColumns, // Where fixed PK columns     pkColumns.length - 1).     select = applyConsistencyLevel(select, readConsistencyLevel).     LOGGER.debug("Generated Select keys {}", select).     selectKeyIdStatement = getSession().prepare(select). }
false;protected;0;4;;protected List<Row> selectKeyIds() {     LOGGER.debug("Selecting keys {}", getPrefixPKValues()).     return getSession().execute(selectKeyIdStatement.bind(getPrefixPKValues())).all(). }
true;public;0;10;/**  * Get aggregation exchangeIds from aggregation table.  */ ;/**  * Get aggregation exchangeIds from aggregation table.  */ @Override public Set<String> getKeys() {     List<Row> rows = selectKeyIds().     Set<String> keys = new HashSet<>(rows.size()).     String keyColumnName = getKeyColumn().     for (Row row : rows) {         keys.add(row.getString(keyColumnName)).     }     return keys. }
true;public;1;9;/**  * Get exchange IDs to be recovered  *  * @return Exchange IDs  */ ;/**  * Get exchange IDs to be recovered  *  * @return Exchange IDs  */ @Override public Set<String> scan(CamelContext camelContext) {     List<Row> rows = selectKeyIds().     Set<String> exchangeIds = new HashSet<>(rows.size()).     for (Row row : rows) {         exchangeIds.add(row.getString(exchangeIdColumn)).     }     return exchangeIds. }
true;public;2;14;/**  * Get exchange by exchange ID.  * This is far from optimal.  */ ;/**  * Get exchange by exchange ID.  * This is far from optimal.  */ @Override public Exchange recover(CamelContext camelContext, String exchangeId) {     List<Row> rows = selectKeyIds().     String keyColumnName = getKeyColumn().     String lKey = null.     for (Row row : rows) {         String lExchangeId = row.getString(exchangeIdColumn).         if (lExchangeId.equals(exchangeId)) {             lKey = row.getString(keyColumnName).             break.         }     }     return lKey == null ? null : get(camelContext, lKey). }
false;public;0;3;;// ------------------------------------------------------------------------- // Getters and Setters public Session getSession() {     return sessionHolder.getSession(). }
false;public;1;3;;public void setSession(Session session) {     this.sessionHolder = new CassandraSessionHolder(session). }
false;public;0;3;;public String getTable() {     return table. }
false;public;1;3;;public void setTable(String table) {     this.table = table. }
false;public;0;3;;public Object[] getPrefixPKValues() {     return prefixPKValues. }
false;public;1;3;;public void setPrefixPKValues(Object... prefixPKValues) {     this.prefixPKValues = prefixPKValues. }
false;public;0;3;;public String[] getPKColumns() {     return pkColumns. }
false;public;1;3;;public void setPKColumns(String... pkColumns) {     this.pkColumns = pkColumns. }
false;public;0;3;;public String getExchangeIdColumn() {     return exchangeIdColumn. }
false;public;1;3;;public void setExchangeIdColumn(String exchangeIdColumn) {     this.exchangeIdColumn = exchangeIdColumn. }
false;public;0;3;;public ConsistencyLevel getWriteConsistencyLevel() {     return writeConsistencyLevel. }
false;public;1;3;;public void setWriteConsistencyLevel(ConsistencyLevel writeConsistencyLevel) {     this.writeConsistencyLevel = writeConsistencyLevel. }
false;public;0;3;;public ConsistencyLevel getReadConsistencyLevel() {     return readConsistencyLevel. }
false;public;1;3;;public void setReadConsistencyLevel(ConsistencyLevel readConsistencyLevel) {     this.readConsistencyLevel = readConsistencyLevel. }
false;public;0;3;;public String getExchangeColumn() {     return exchangeColumn. }
false;public;1;3;;public void setExchangeColumn(String exchangeColumnName) {     this.exchangeColumn = exchangeColumnName. }
false;public;0;3;;public Integer getTtl() {     return ttl. }
false;public;1;3;;public void setTtl(Integer ttl) {     this.ttl = ttl. }
false;public;0;4;;@Override public long getRecoveryIntervalInMillis() {     return recoveryIntervalInMillis. }
false;public;1;3;;public void setRecoveryIntervalInMillis(long recoveryIntervalInMillis) {     this.recoveryIntervalInMillis = recoveryIntervalInMillis. }
false;public;2;4;;@Override public void setRecoveryInterval(long interval, TimeUnit timeUnit) {     this.recoveryIntervalInMillis = timeUnit.toMillis(interval). }
false;public;1;4;;@Override public void setRecoveryInterval(long recoveryIntervalInMillis) {     this.recoveryIntervalInMillis = recoveryIntervalInMillis. }
false;public;0;4;;@Override public boolean isUseRecovery() {     return useRecovery. }
false;public;1;4;;@Override public void setUseRecovery(boolean useRecovery) {     this.useRecovery = useRecovery. }
false;public;0;4;;@Override public String getDeadLetterUri() {     return deadLetterUri. }
false;public;1;4;;@Override public void setDeadLetterUri(String deadLetterUri) {     this.deadLetterUri = deadLetterUri. }
false;public;0;4;;@Override public int getMaximumRedeliveries() {     return maximumRedeliveries. }
false;public;1;4;;@Override public void setMaximumRedeliveries(int maximumRedeliveries) {     this.maximumRedeliveries = maximumRedeliveries. }
false;public;0;3;;public boolean isAllowSerializedHeaders() {     return allowSerializedHeaders. }
false;public;1;3;;public void setAllowSerializedHeaders(boolean allowSerializedHeaders) {     this.allowSerializedHeaders = allowSerializedHeaders. }
