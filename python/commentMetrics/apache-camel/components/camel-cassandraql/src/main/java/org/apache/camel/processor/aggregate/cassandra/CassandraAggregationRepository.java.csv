# id;timestamp;commentText;codeText;commentWords;codeWords
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1424250049;Get exchange IDs to be recovered_@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<String>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,string,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1424250049;Get exchange IDs to be recovered_@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<String>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,string,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1424250049;Get exchange IDs to be recovered_@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<String>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,string,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1424250565;Get exchange IDs to be recovered__@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<String>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,string,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1451410872;Get exchange IDs to be recovered__@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<String>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,string,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1455781764;Get exchange IDs to be recovered__@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<String>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,string,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1523968798;Get exchange IDs to be recovered__@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1536258755;Get exchange IDs to be recovered__@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> scan(CamelContext camelContext);1548175645;Get exchange IDs to be recovered__@return Exchange IDs;@Override_    public Set<String> scan(CamelContext camelContext) {_        List<Row> rows = selectKeyIds()__        Set<String> exchangeIds = new HashSet<>(rows.size())__        for (Row row : rows) {_            exchangeIds.add(row.getString(exchangeIdColumn))__        }_        return exchangeIds__    };get,exchange,ids,to,be,recovered,return,exchange,ids;override,public,set,string,scan,camel,context,camel,context,list,row,rows,select,key,ids,set,string,exchange,ids,new,hash,set,rows,size,for,row,row,rows,exchange,ids,add,row,get,string,exchange,id,column,return,exchange,ids
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1419330065;Get aggregation keys from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getPKColumns()[1]__        for(Row row:rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,keys,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,pkcolumns,1,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1419331245;Get aggregation keys from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getPKColumns()[1]__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,keys,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,pkcolumns,1,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1424250049;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getPKColumns()[1]__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,pkcolumns,1,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1424250049;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1424250049;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1424250565;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1451410872;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1455781764;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<String>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,string,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1523968798;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1536258755;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> @Override     public Set<String> getKeys();1548175645;Get aggregation exchangeIds from aggregation table.;@Override_    public Set<String> getKeys() {_        List<Row> rows = selectKeyIds()__        Set<String> keys = new HashSet<>(rows.size())__        String keyColumnName = getKeyColumn()__        for (Row row : rows) {_            keys.add(row.getString(keyColumnName))__        }_        return keys__    };get,aggregation,exchange,ids,from,aggregation,table;override,public,set,string,get,keys,list,row,rows,select,key,ids,set,string,keys,new,hash,set,rows,size,string,key,column,name,get,key,column,for,row,row,rows,keys,add,row,get,string,key,column,name,return,keys
CassandraAggregationRepository -> protected abstract Object[] getPKValues()_;1419330065;Get fixed primary key values.;protected abstract Object[] getPKValues()_;get,fixed,primary,key,values;protected,abstract,object,get,pkvalues
CassandraAggregationRepository -> protected abstract Object[] getPKValues()_;1419331245;Get fixed primary key values.;protected abstract Object[] getPKValues()_;get,fixed,primary,key,values;protected,abstract,object,get,pkvalues
CassandraAggregationRepository -> protected abstract Object[] getPKValues()_;1424250049;Get fixed primary key values.;protected abstract Object[] getPKValues()_;get,fixed,primary,key,values;protected,abstract,object,get,pkvalues
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1424250049;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getPKColumns()[1]__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }            _        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,pkcolumns,1,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1424250049;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }            _        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1424250049;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }            _        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1424250565;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }_        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1451410872;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }_        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1455781764;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }_        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1523968798;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }_        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1536258755;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }_        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> @Override     public Exchange recover(CamelContext camelContext, String exchangeId);1548175645;Get exchange by exchange ID._This is far from optimal.;@Override_    public Exchange recover(CamelContext camelContext, String exchangeId) {_        List<Row> rows = selectKeyIds()__        String keyColumnName = getKeyColumn()__        String lKey = null__        for (Row row : rows) {_            String lExchangeId = row.getString(exchangeIdColumn)__            if (lExchangeId.equals(exchangeId)) {_                lKey = row.getString(keyColumnName)__                break__            }_        }_        return lKey == null ? null : get(camelContext, lKey)__    };get,exchange,by,exchange,id,this,is,far,from,optimal;override,public,exchange,recover,camel,context,camel,context,string,exchange,id,list,row,rows,select,key,ids,string,key,column,name,get,key,column,string,l,key,null,for,row,row,rows,string,l,exchange,id,row,get,string,exchange,id,column,if,l,exchange,id,equals,exchange,id,l,key,row,get,string,key,column,name,break,return,l,key,null,null,get,camel,context,l,key
CassandraAggregationRepository -> private String getKeyColumn();1419330065;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length-1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1419331245;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1424250049;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1424250049;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1424250049;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1424250565;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1451410872;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1455781764;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1523968798;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1536258755;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> private String getKeyColumn();1548175645;Get aggregation key colum name.;private String getKeyColumn() {_        return pkColumns[pkColumns.length - 1]__    };get,aggregation,key,colum,name;private,string,get,key,column,return,pk,columns,pk,columns,length,1
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1419330065;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1419331245;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1424250049;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1424250049;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1424250049;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1424250565;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1451410872;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1455781764;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange, allowSerializedHeaders)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,allow,serialized,headers,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1523968798;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange, allowSerializedHeaders)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,allow,serialized,headers,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1536258755;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange, allowSerializedHeaders)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,allow,serialized,headers,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public Exchange add(CamelContext camelContext, String key, Exchange exchange);1548175645;Insert or update exchange in aggregation table.;@Override_    public Exchange add(CamelContext camelContext, String key, Exchange exchange) {_        final Object[] idValues = getPKValues(key)__        LOGGER.debug("Inserting key {} exchange {}", idValues, exchange)__        try {_            ByteBuffer marshalledExchange = exchangeCodec.marshallExchange(camelContext, exchange, allowSerializedHeaders)__            Object[] cqlParams = concat(idValues, new Object[]{exchange.getExchangeId(), marshalledExchange})__            getSession().execute(insertStatement.bind(cqlParams))__            return exchange__        } catch (IOException iOException) {_            throw new CassandraAggregationException("Failed to write exchange", exchange, iOException)__        }_    };insert,or,update,exchange,in,aggregation,table;override,public,exchange,add,camel,context,camel,context,string,key,exchange,exchange,final,object,id,values,get,pkvalues,key,logger,debug,inserting,key,exchange,id,values,exchange,try,byte,buffer,marshalled,exchange,exchange,codec,marshall,exchange,camel,context,exchange,allow,serialized,headers,object,cql,params,concat,id,values,new,object,exchange,get,exchange,id,marshalled,exchange,get,session,execute,insert,statement,bind,cql,params,return,exchange,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,write,exchange,exchange,i,oexception
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1419330065;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        Object[] pkValues = getPKValues()__        String keyColumn= getKeyColumn()__        LOGGER.debug("Selecting Ids {} ", pkValues)__        List<Row> rows = selectKeyIds()__        for(Row row:rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(pkValues, key, exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,object,pk,values,get,pkvalues,string,key,column,get,key,column,logger,debug,selecting,ids,pk,values,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,pk,values,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1419331245;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        Object[] pkValues = getPKValues()__        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids {} ", pkValues)__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(pkValues, key, exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,object,pk,values,get,pkvalues,string,key,column,get,key,column,logger,debug,selecting,ids,pk,values,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,pk,values,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1424250049;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        Object[] pkValues = getPKValues()__        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids {} ", pkValues)__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(pkValues, key, exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,object,pk,values,get,pkvalues,string,key,column,get,key,column,logger,debug,selecting,ids,pk,values,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,pk,values,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1424250049;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1424250049;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1424250565;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1451410872;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1455781764;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1523968798;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {} ", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1536258755;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {}", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public void confirm(CamelContext camelContext, String exchangeId);1548175645;Remove exchange by Id from aggregation table.;@Override_    public void confirm(CamelContext camelContext, String exchangeId) {_        String keyColumn = getKeyColumn()__        LOGGER.debug("Selecting Ids")__        List<Row> rows = selectKeyIds()__        for (Row row : rows) {_            if (row.getString(exchangeIdColumn).equals(exchangeId)) {_                String key = row.getString(keyColumn)__                Object[] cqlParams = append(getPKValues(key), exchangeId)__                LOGGER.debug("Deleting If Id {}", cqlParams)__                getSession().execute(deleteIfIdStatement.bind(cqlParams))__            }_        }_    };remove,exchange,by,id,from,aggregation,table;override,public,void,confirm,camel,context,camel,context,string,exchange,id,string,key,column,get,key,column,logger,debug,selecting,ids,list,row,rows,select,key,ids,for,row,row,rows,if,row,get,string,exchange,id,column,equals,exchange,id,string,key,row,get,string,key,column,object,cql,params,append,get,pkvalues,key,exchange,id,logger,debug,deleting,if,id,cql,params,get,session,execute,delete,if,id,statement,bind,cql,params
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1419330065;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row!=null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1419331245;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1424250049;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1424250049;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1424250049;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1424250565;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1451410872;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1455781764;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1523968798;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {} ", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1536258755;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {}", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public Exchange get(CamelContext camelContext, String key);1548175645;Get exchange from aggregation table by aggregation key.;@Override_    public Exchange get(CamelContext camelContext, String key) {_        Object[] pkValues = getPKValues(key)__        LOGGER.debug("Selecting key {}", pkValues)__        Row row = getSession().execute(selectStatement.bind(pkValues)).one()__        Exchange exchange = null__        if (row != null) {_            try {_                exchange = exchangeCodec.unmarshallExchange(camelContext, row.getBytes(exchangeColumn))__            } catch (IOException iOException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, iOException)__            } catch (ClassNotFoundException classNotFoundException) {_                throw new CassandraAggregationException("Failed to read exchange", exchange, classNotFoundException)__            }_        }_        return exchange__    };get,exchange,from,aggregation,table,by,aggregation,key;override,public,exchange,get,camel,context,camel,context,string,key,object,pk,values,get,pkvalues,key,logger,debug,selecting,key,pk,values,row,row,get,session,execute,select,statement,bind,pk,values,one,exchange,exchange,null,if,row,null,try,exchange,exchange,codec,unmarshall,exchange,camel,context,row,get,bytes,exchange,column,catch,ioexception,i,oexception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,i,oexception,catch,class,not,found,exception,class,not,found,exception,throw,new,cassandra,aggregation,exception,failed,to,read,exchange,exchange,class,not,found,exception,return,exchange
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1419330065;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1419331245;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1424250049;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1424250049;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1424250049;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1424250565;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1451410872;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1455781764;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1523968798;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1536258755;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> @Override     public void remove(CamelContext camelContext, String key, Exchange exchange);1548175645;Remove exchange by aggregation key from aggregation table.;@Override_    public void remove(CamelContext camelContext, String key, Exchange exchange) {_        Object[] idValues = getPKValues(key)__        LOGGER.debug("Deleting key {}", (Object) idValues)__        getSession().execute(deleteStatement.bind(idValues))__    };remove,exchange,by,aggregation,key,from,aggregation,table;override,public,void,remove,camel,context,camel,context,string,key,exchange,exchange,object,id,values,get,pkvalues,key,logger,debug,deleting,key,object,id,values,get,session,execute,delete,statement,bind,id,values
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1419330065;Generate primary key values: fixed + aggregation key.;protected Object[] getPKValues(String key) {_        return append(getPKValues(), key)__    };generate,primary,key,values,fixed,aggregation,key;protected,object,get,pkvalues,string,key,return,append,get,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1419331245;Generate primary key values: fixed + aggregation key.;protected Object[] getPKValues(String key) {_        return append(getPKValues(), key)__    };generate,primary,key,values,fixed,aggregation,key;protected,object,get,pkvalues,string,key,return,append,get,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1424250049;Generate primary key values: fixed + aggregation key.;protected Object[] getPKValues(String key) {_        return append(getPKValues(), key)__    };generate,primary,key,values,fixed,aggregation,key;protected,object,get,pkvalues,string,key,return,append,get,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1424250049;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1424250049;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1424250565;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1451410872;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1455781764;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1523968798;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1536258755;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
CassandraAggregationRepository -> protected Object[] getPKValues(String key);1548175645;Generate primary key values from aggregation key.;protected Object[] getPKValues(String key) {_        return append(prefixPKValues, key)__    };generate,primary,key,values,from,aggregation,key;protected,object,get,pkvalues,string,key,return,append,prefix,pkvalues,key
