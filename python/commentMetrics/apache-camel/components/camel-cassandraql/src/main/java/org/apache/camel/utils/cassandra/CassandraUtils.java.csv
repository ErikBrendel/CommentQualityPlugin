commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Test if the array is null or empty.  */ ;/**  * Test if the array is null or empty.  */ public static boolean isEmpty(Object[] array) {     return array == null || array.length == 0. }
true;public,static;2;12;/**  * Concatenate 2 arrays.  */ ;/**  * Concatenate 2 arrays.  */ public static Object[] concat(Object[] array1, Object[] array2) {     if (isEmpty(array1)) {         return array2.     }     if (isEmpty(array2)) {         return array1.     }     Object[] array = new Object[array1.length + array2.length].     System.arraycopy(array1, 0, array, 0, array1.length).     System.arraycopy(array2, 0, array, array1.length, array2.length).     return array. }
false;private,static;1;3;;private static int size(String[] array) {     return array == null ? 0 : array.length. }
false;private,static;1;3;;private static boolean isEmpty(String[] array) {     return size(array) == 0. }
true;public,static;2;12;/**  * Concatenate 2 arrays.  */ ;/**  * Concatenate 2 arrays.  */ public static String[] concat(String[] array1, String[] array2) {     if (isEmpty(array1)) {         return array2.     }     if (isEmpty(array2)) {         return array1.     }     String[] array = new String[array1.length + array2.length].     System.arraycopy(array1, 0, array, 0, array1.length).     System.arraycopy(array2, 0, array, array1.length, array2.length).     return array. }
true;public,static;2;3;/**  * Append values to given array.  */ ;/**  * Append values to given array.  */ public static Object[] append(Object[] array1, Object... array2) {     return concat(array1, array2). }
true;public,static;2;3;/**  * Append values to given array.  */ ;/**  * Append values to given array.  */ public static String[] append(String[] array1, String... array2) {     return concat(array1, array2). }
true;public,static;4;13;/**  * Generate Insert CQL.  */ ;/**  * Generate Insert CQL.  */ public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {     Insert insert = insertInto(table).     for (String column : columns) {         insert = insert.value(column, bindMarker()).     }     if (ifNotExists) {         insert = insert.ifNotExists().     }     if (ttl != null) {         insert.using(ttl(ttl)).     }     return insert. }
true;public,static;3;3;/**  * Generate select where columns = ? CQL.  */ ;/**  * Generate select where columns = ? CQL.  */ public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns) {     return generateSelect(table, selectColumns, whereColumns, size(whereColumns)). }
true;public,static;4;10;/**  * Generate select where columns = ? CQL.  */ ;/**  * Generate select where columns = ? CQL.  */ public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {     Select select = select(selectColumns).from(table).     if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {         Select.Where where = select.where().         for (int i = 0. i < whereColumns.length && i < whereColumnsMaxIndex. i++) {             where.and(eq(whereColumns[i], bindMarker())).         }     }     return select. }
true;public,static;3;3;/**  * Generate delete where columns = ? CQL.  */ ;/**  * Generate delete where columns = ? CQL.  */ public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists) {     return generateDelete(table, whereColumns, size(whereColumns), ifExists). }
true;public,static;4;13;/**  * Generate delete where columns = ? CQL.  */ ;/**  * Generate delete where columns = ? CQL.  */ public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {     Delete delete = delete().from(table).     if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {         Delete.Where where = delete.where().         for (int i = 0. i < whereColumns.length && i < whereColumnsMaxIndex. i++) {             where.and(eq(whereColumns[i], bindMarker())).         }     }     if (ifExists) {         delete = delete.ifExists().     }     return delete. }
false;private,static;2;3;;private static boolean isWhereClause(String[] whereColumns, int whereColumnsMaxIndex) {     return !isEmpty(whereColumns) && whereColumnsMaxIndex > 0. }
true;public,static;1;4;/**  * Generate delete where columns = ? CQL.  */ ;/**  * Generate delete where columns = ? CQL.  */ public static Truncate generateTruncate(String table) {     Truncate truncate = QueryBuilder.truncate(table).     return truncate. }
true;public,static;2;6;/**  * Apply consistency level if provided, else leave default.  */ ;/**  * Apply consistency level if provided, else leave default.  */ public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel) {     if (consistencyLevel != null) {         statement.setConsistencyLevel(consistencyLevel).     }     return statement. }
