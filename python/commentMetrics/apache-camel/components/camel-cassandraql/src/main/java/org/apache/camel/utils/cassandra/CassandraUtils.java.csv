# id;timestamp;commentText;codeText;commentWords;codeWords
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1419330065;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        Object[] array = new Object[array1.length+array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1419331245;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        Object[] array = new Object[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1424250049;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        Object[] array = new Object[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1424250049;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        Object[] array = new Object[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1424250049;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        Object[] array = new Object[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1424250565;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        Object[] array = new Object[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] concat(Object[] array1, Object[] array2);1435936056;Concatenate 2 arrays.;public static Object[] concat(Object[] array1, Object[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        Object[] array = new Object[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,object,concat,object,array1,object,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,object,array,new,object,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static Object[] append(Object[] array1, Object... array2);1419331245;Append values to given array.;public static Object[] append(Object[] array1, Object... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,object,append,object,array1,object,array2,return,concat,array1,array2
CassandraUtils -> public static Object[] append(Object[] array1, Object... array2);1424250049;Append values to given array.;public static Object[] append(Object[] array1, Object... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,object,append,object,array1,object,array2,return,concat,array1,array2
CassandraUtils -> public static Object[] append(Object[] array1, Object... array2);1424250049;Append values to given array.;public static Object[] append(Object[] array1, Object... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,object,append,object,array1,object,array2,return,concat,array1,array2
CassandraUtils -> public static Object[] append(Object[] array1, Object... array2);1424250049;Append values to given array.;public static Object[] append(Object[] array1, Object... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,object,append,object,array1,object,array2,return,concat,array1,array2
CassandraUtils -> public static Object[] append(Object[] array1, Object... array2);1424250565;Append values to given array.;public static Object[] append(Object[] array1, Object... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,object,append,object,array1,object,array2,return,concat,array1,array2
CassandraUtils -> public static Object[] append(Object[] array1, Object... array2);1435936056;Append values to given array.;public static Object[] append(Object[] array1, Object... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,object,append,object,array1,object,array2,return,concat,array1,array2
CassandraUtils -> public static void appendWhere(StringBuilder cqlBuilder, String[] columns, int maxColumnIndex);1419330065;Append where columns = ? to CQL.;public static void appendWhere(StringBuilder cqlBuilder, String[] columns, int maxColumnIndex) {_        cqlBuilder.append(" where ")__        appendColumns(cqlBuilder, columns, "=? and ", maxColumnIndex)__        cqlBuilder.append("=?")__    };append,where,columns,to,cql;public,static,void,append,where,string,builder,cql,builder,string,columns,int,max,column,index,cql,builder,append,where,append,columns,cql,builder,columns,and,max,column,index,cql,builder,append
CassandraUtils -> public static void appendWhere(StringBuilder cqlBuilder, String[] columns, int maxColumnIndex);1419331245;Append where columns = ? to CQL.;public static void appendWhere(StringBuilder cqlBuilder, String[] columns, int maxColumnIndex) {_        cqlBuilder.append(" where ")__        appendColumns(cqlBuilder, columns, "=? and ", maxColumnIndex)__        cqlBuilder.append("=?")__    };append,where,columns,to,cql;public,static,void,append,where,string,builder,cql,builder,string,columns,int,max,column,index,cql,builder,append,where,append,columns,cql,builder,columns,and,max,column,index,cql,builder,append
CassandraUtils -> public static void appendWhere(StringBuilder cqlBuilder, String[] columns, int maxColumnIndex);1424250049;Append where columns = ? to CQL.;public static void appendWhere(StringBuilder cqlBuilder, String[] columns, int maxColumnIndex) {_        if (isEmpty(columns) || maxColumnIndex<= 0) {_            return__        }_        cqlBuilder.append(" where ")__        appendColumns(cqlBuilder, columns, "=? and ", maxColumnIndex)__        cqlBuilder.append("=?")__    };append,where,columns,to,cql;public,static,void,append,where,string,builder,cql,builder,string,columns,int,max,column,index,if,is,empty,columns,max,column,index,0,return,cql,builder,append,where,append,columns,cql,builder,columns,and,max,column,index,cql,builder,append
CassandraUtils -> public static String[] append(String[] array1, String... array2);1419331245;Append values to given array.;public static String[] append(String[] array1, String... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,string,append,string,array1,string,array2,return,concat,array1,array2
CassandraUtils -> public static String[] append(String[] array1, String... array2);1424250049;Append values to given array.;public static String[] append(String[] array1, String... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,string,append,string,array1,string,array2,return,concat,array1,array2
CassandraUtils -> public static String[] append(String[] array1, String... array2);1424250049;Append values to given array.;public static String[] append(String[] array1, String... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,string,append,string,array1,string,array2,return,concat,array1,array2
CassandraUtils -> public static String[] append(String[] array1, String... array2);1424250049;Append values to given array.;public static String[] append(String[] array1, String... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,string,append,string,array1,string,array2,return,concat,array1,array2
CassandraUtils -> public static String[] append(String[] array1, String... array2);1424250565;Append values to given array.;public static String[] append(String[] array1, String... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,string,append,string,array1,string,array2,return,concat,array1,array2
CassandraUtils -> public static String[] append(String[] array1, String... array2);1435936056;Append values to given array.;public static String[] append(String[] array1, String... array2) {_        return concat(array1, array2)__    };append,values,to,given,array;public,static,string,append,string,array1,string,array2,return,concat,array1,array2
CassandraUtils -> public static boolean isEmpty(Object[] array);1424250049;Test if the array is null or empty.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };test,if,the,array,is,null,or,empty;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CassandraUtils -> public static boolean isEmpty(Object[] array);1424250565;Test if the array is null or empty.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };test,if,the,array,is,null,or,empty;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CassandraUtils -> public static boolean isEmpty(Object[] array);1435936056;Test if the array is null or empty.;public static boolean isEmpty(Object[] array) {_        return array == null || array.length == 0__    };test,if,the,array,is,null,or,empty;public,static,boolean,is,empty,object,array,return,array,null,array,length,0
CassandraUtils -> public static PreparedStatement applyConsistencyLevel(PreparedStatement statement, ConsistencyLevel consistencyLevel);1419330065;Apply consistency level if provided, else leave default.;public static PreparedStatement applyConsistencyLevel(PreparedStatement statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel!=null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,prepared,statement,apply,consistency,level,prepared,statement,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static PreparedStatement applyConsistencyLevel(PreparedStatement statement, ConsistencyLevel consistencyLevel);1419331245;Apply consistency level if provided, else leave default.;public static PreparedStatement applyConsistencyLevel(PreparedStatement statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel != null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,prepared,statement,apply,consistency,level,prepared,statement,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static PreparedStatement applyConsistencyLevel(PreparedStatement statement, ConsistencyLevel consistencyLevel);1424250049;Apply consistency level if provided, else leave default.;public static PreparedStatement applyConsistencyLevel(PreparedStatement statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel != null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,prepared,statement,apply,consistency,level,prepared,statement,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static StringBuilder generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1419330065;Generate delete where columns = ? CQL.;public static StringBuilder generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        StringBuilder cqlBuilder = new StringBuilder("delete from ")_            .append(table)__        appendWhere(cqlBuilder, whereColumns, whereColumnsMaxIndex)__        if (ifExists) {_            cqlBuilder.append(" if exists")__        }_        return cqlBuilder__    };generate,delete,where,columns,cql;public,static,string,builder,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,string,builder,cql,builder,new,string,builder,delete,from,append,table,append,where,cql,builder,where,columns,where,columns,max,index,if,if,exists,cql,builder,append,if,exists,return,cql,builder
CassandraUtils -> public static StringBuilder generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1419331245;Generate delete where columns = ? CQL.;public static StringBuilder generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        StringBuilder cqlBuilder = new StringBuilder("delete from ")_                .append(table)__        appendWhere(cqlBuilder, whereColumns, whereColumnsMaxIndex)__        if (ifExists) {_            cqlBuilder.append(" if exists")__        }_        return cqlBuilder__    };generate,delete,where,columns,cql;public,static,string,builder,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,string,builder,cql,builder,new,string,builder,delete,from,append,table,append,where,cql,builder,where,columns,where,columns,max,index,if,if,exists,cql,builder,append,if,exists,return,cql,builder
CassandraUtils -> public static StringBuilder generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1424250049;Generate delete where columns = ? CQL.;public static StringBuilder generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        StringBuilder cqlBuilder = new StringBuilder("delete from ")_                .append(table)__        appendWhere(cqlBuilder, whereColumns, whereColumnsMaxIndex)__        if (ifExists) {_            cqlBuilder.append(" if exists")__        }_        return cqlBuilder__    };generate,delete,where,columns,cql;public,static,string,builder,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,string,builder,cql,builder,new,string,builder,delete,from,append,table,append,where,cql,builder,where,columns,where,columns,max,index,if,if,exists,cql,builder,append,if,exists,return,cql,builder
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1424250049;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        Select select = select(selectColumns).from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Select.Where where = select.where()__            for(int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        return select__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,select,select,select,select,columns,from,table,if,is,where,clause,where,columns,where,columns,max,index,select,where,where,select,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,return,select
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1424250049;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        Select select = select(selectColumns).from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Select.Where where = select.where()__            for(int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        return select__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,select,select,select,select,columns,from,table,if,is,where,clause,where,columns,where,columns,max,index,select,where,where,select,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,return,select
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1424250565;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        Select select = select(selectColumns).from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Select.Where where = select.where()__            for (int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        return select__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,select,select,select,select,columns,from,table,if,is,where,clause,where,columns,where,columns,max,index,select,where,where,select,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,return,select
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1435936056;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        Select select = select(selectColumns).from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Select.Where where = select.where()__            for (int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        return select__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,select,select,select,select,columns,from,table,if,is,where,clause,where,columns,where,columns,max,index,select,where,where,select,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,return,select
CassandraUtils -> public static StringBuilder generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1419330065;Generate Insert CQL.;public static StringBuilder generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        StringBuilder cqlBuilder = new StringBuilder("insert into ")_                .append(table).append("(")__        appendColumns(cqlBuilder, columns, ",")__        cqlBuilder.append(") values (")__        appendPlaceholders(cqlBuilder, columns.length)__        cqlBuilder.append(")")__        if (ifNotExists) {_            cqlBuilder.append(" if not exists")__        }_        if (ttl!=null) {_            cqlBuilder.append(" using ttl=").append(ttl)__        }_        return cqlBuilder_        _    };generate,insert,cql;public,static,string,builder,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,string,builder,cql,builder,new,string,builder,insert,into,append,table,append,append,columns,cql,builder,columns,cql,builder,append,values,append,placeholders,cql,builder,columns,length,cql,builder,append,if,if,not,exists,cql,builder,append,if,not,exists,if,ttl,null,cql,builder,append,using,ttl,append,ttl,return,cql,builder
CassandraUtils -> public static StringBuilder generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1419331245;Generate Insert CQL.;public static StringBuilder generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        StringBuilder cqlBuilder = new StringBuilder("insert into ")_                .append(table).append("(")__        appendColumns(cqlBuilder, columns, ",")__        cqlBuilder.append(") values (")__        appendPlaceholders(cqlBuilder, columns.length)__        cqlBuilder.append(")")__        if (ifNotExists) {_            cqlBuilder.append(" if not exists")__        }_        if (ttl != null) {_            cqlBuilder.append(" using ttl=").append(ttl)__        }_        return cqlBuilder__    };generate,insert,cql;public,static,string,builder,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,string,builder,cql,builder,new,string,builder,insert,into,append,table,append,append,columns,cql,builder,columns,cql,builder,append,values,append,placeholders,cql,builder,columns,length,cql,builder,append,if,if,not,exists,cql,builder,append,if,not,exists,if,ttl,null,cql,builder,append,using,ttl,append,ttl,return,cql,builder
CassandraUtils -> public static StringBuilder generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1424250049;Generate Insert CQL.;public static StringBuilder generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        StringBuilder cqlBuilder = new StringBuilder("insert into ")_                .append(table).append("(")__        appendColumns(cqlBuilder, columns, ",")__        cqlBuilder.append(") values (")__        appendPlaceholders(cqlBuilder, columns.length)__        cqlBuilder.append(")")__        if (ifNotExists) {_            cqlBuilder.append(" if not exists")__        }_        if (ttl != null) {_            cqlBuilder.append(" using ttl=").append(ttl)__        }_        return cqlBuilder__    };generate,insert,cql;public,static,string,builder,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,string,builder,cql,builder,new,string,builder,insert,into,append,table,append,append,columns,cql,builder,columns,cql,builder,append,values,append,placeholders,cql,builder,columns,length,cql,builder,append,if,if,not,exists,cql,builder,append,if,not,exists,if,ttl,null,cql,builder,append,using,ttl,append,ttl,return,cql,builder
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1424250049;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        Delete delete = delete().from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Delete.Where where = delete.where()__            for(int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        if (ifExists) {_            delete = delete.ifExists()__        }_        return delete__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,delete,delete,delete,from,table,if,is,where,clause,where,columns,where,columns,max,index,delete,where,where,delete,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,if,if,exists,delete,delete,if,exists,return,delete
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1424250049;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        Delete delete = delete().from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Delete.Where where = delete.where()__            for(int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        if (ifExists) {_            delete = delete.ifExists()__        }_        return delete__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,delete,delete,delete,from,table,if,is,where,clause,where,columns,where,columns,max,index,delete,where,where,delete,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,if,if,exists,delete,delete,if,exists,return,delete
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1424250565;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        Delete delete = delete().from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Delete.Where where = delete.where()__            for (int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        if (ifExists) {_            delete = delete.ifExists()__        }_        return delete__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,delete,delete,delete,from,table,if,is,where,clause,where,columns,where,columns,max,index,delete,where,where,delete,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,if,if,exists,delete,delete,if,exists,return,delete
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists);1435936056;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, int whereColumnsMaxIndex, boolean ifExists) {_        Delete delete = delete().from(table)__        if (isWhereClause(whereColumns, whereColumnsMaxIndex)) {_            Delete.Where where = delete.where()__            for (int i = 0_ i < whereColumns.length && i < whereColumnsMaxIndex_ i++) {_                where.and(eq(whereColumns[i], bindMarker()))__            }_        }_        if (ifExists) {_            delete = delete.ifExists()__        }_        return delete__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,int,where,columns,max,index,boolean,if,exists,delete,delete,delete,from,table,if,is,where,clause,where,columns,where,columns,max,index,delete,where,where,delete,where,for,int,i,0,i,where,columns,length,i,where,columns,max,index,i,where,and,eq,where,columns,i,bind,marker,if,if,exists,delete,delete,if,exists,return,delete
CassandraUtils -> public void appendWhere(StringBuilder cqlBuilder, String[] columns);1419330065;Append where columns = ? to CQL.;public void appendWhere(StringBuilder cqlBuilder, String[] columns) {_        appendWhere(cqlBuilder, columns, columns.length)__    };append,where,columns,to,cql;public,void,append,where,string,builder,cql,builder,string,columns,append,where,cql,builder,columns,columns,length
CassandraUtils -> public void appendWhere(StringBuilder cqlBuilder, String[] columns);1419331245;Append where columns = ? to CQL.;public void appendWhere(StringBuilder cqlBuilder, String[] columns) {_        appendWhere(cqlBuilder, columns, columns.length)__    };append,where,columns,to,cql;public,void,append,where,string,builder,cql,builder,string,columns,append,where,cql,builder,columns,columns,length
CassandraUtils -> public void appendWhere(StringBuilder cqlBuilder, String[] columns);1424250049;Append where columns = ? to CQL.;public void appendWhere(StringBuilder cqlBuilder, String[] columns) {_        appendWhere(cqlBuilder, columns, columns.length)__    };append,where,columns,to,cql;public,void,append,where,string,builder,cql,builder,string,columns,append,where,cql,builder,columns,columns,length
CassandraUtils -> public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns);1419330065;Generate select where columns = ? CQL.;public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, whereColumns.length)__    };generate,select,where,columns,cql;public,static,string,builder,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,where,columns,length
CassandraUtils -> public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns);1419331245;Generate select where columns = ? CQL.;public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, whereColumns.length)__    };generate,select,where,columns,cql;public,static,string,builder,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,where,columns,length
CassandraUtils -> public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns);1424250049;Generate select where columns = ? CQL.;public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, size(whereColumns))__    };generate,select,where,columns,cql;public,static,string,builder,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,size,where,columns
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1419330065;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        String[] array = new String[array1.length+array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1419331245;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        String[] array = new String[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1424250049;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        String[] array = new String[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1424250049;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        String[] array = new String[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1424250049;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        String[] array = new String[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1424250565;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        String[] array = new String[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static String[] concat(String[] array1, String[] array2);1435936056;Concatenate 2 arrays.;public static String[] concat(String[] array1, String[] array2) {_        if (isEmpty(array1)) {_            return array2__        }_        if (isEmpty(array2)) {_            return array1__        }_        String[] array = new String[array1.length + array2.length]__        System.arraycopy(array1, 0, array, 0, array1.length)__        System.arraycopy(array2, 0, array, array1.length, array2.length)__        return array__    };concatenate,2,arrays;public,static,string,concat,string,array1,string,array2,if,is,empty,array1,return,array2,if,is,empty,array2,return,array1,string,array,new,string,array1,length,array2,length,system,arraycopy,array1,0,array,0,array1,length,system,arraycopy,array2,0,array,array1,length,array2,length,return,array
CassandraUtils -> public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep, int maxColumnIndex);1419330065;Append columns to CQL.;public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep, int maxColumnIndex) {_        for (int i = 0_ i < maxColumnIndex_ i++) {_            if (i > 0) {_                cqlBuilder.append(sep)__            }_            cqlBuilder.append(columns[i])__        }_    };append,columns,to,cql;public,static,void,append,columns,string,builder,cql,builder,string,columns,string,sep,int,max,column,index,for,int,i,0,i,max,column,index,i,if,i,0,cql,builder,append,sep,cql,builder,append,columns,i
CassandraUtils -> public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep, int maxColumnIndex);1419331245;Append columns to CQL.;public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep, int maxColumnIndex) {_        for (int i = 0_ i < maxColumnIndex_ i++) {_            if (i > 0) {_                cqlBuilder.append(sep)__            }_            cqlBuilder.append(columns[i])__        }_    };append,columns,to,cql;public,static,void,append,columns,string,builder,cql,builder,string,columns,string,sep,int,max,column,index,for,int,i,0,i,max,column,index,i,if,i,0,cql,builder,append,sep,cql,builder,append,columns,i
CassandraUtils -> public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep, int maxColumnIndex);1424250049;Append columns to CQL.;public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep, int maxColumnIndex) {_        for (int i = 0_ i < maxColumnIndex_ i++) {_            if (i > 0) {_                cqlBuilder.append(sep)__            }_            cqlBuilder.append(columns[i])__        }_    };append,columns,to,cql;public,static,void,append,columns,string,builder,cql,builder,string,columns,string,sep,int,max,column,index,for,int,i,0,i,max,column,index,i,if,i,0,cql,builder,append,sep,cql,builder,append,columns,i
CassandraUtils -> public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep);1419331245;Append columns to CQL.;public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep) {_        appendColumns(cqlBuilder, columns, sep, columns.length)__    };append,columns,to,cql;public,static,void,append,columns,string,builder,cql,builder,string,columns,string,sep,append,columns,cql,builder,columns,sep,columns,length
CassandraUtils -> public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep);1424250049;Append columns to CQL.;public static void appendColumns(StringBuilder cqlBuilder, String[] columns, String sep) {_        appendColumns(cqlBuilder, columns, sep, columns.length)__    };append,columns,to,cql;public,static,void,append,columns,string,builder,cql,builder,string,columns,string,sep,append,columns,cql,builder,columns,sep,columns,length
CassandraUtils -> public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel);1424250049;Apply consistency level if provided, else leave default.;public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel != null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,t,extends,regular,statement,t,apply,consistency,level,t,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel);1424250049;Apply consistency level if provided, else leave default.;public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel != null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,t,extends,regular,statement,t,apply,consistency,level,t,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel);1424250565;Apply consistency level if provided, else leave default.;public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel != null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,t,extends,regular,statement,t,apply,consistency,level,t,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel);1435936056;Apply consistency level if provided, else leave default.;public static <T extends RegularStatement> T applyConsistencyLevel(T statement, ConsistencyLevel consistencyLevel) {_        if (consistencyLevel != null) {_            statement.setConsistencyLevel(consistencyLevel)__        }_        return statement__    };apply,consistency,level,if,provided,else,leave,default;public,static,t,extends,regular,statement,t,apply,consistency,level,t,statement,consistency,level,consistency,level,if,consistency,level,null,statement,set,consistency,level,consistency,level,return,statement
CassandraUtils -> public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1424250049;Generate Insert CQL.;public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        Insert insert = insertInto(table)__        for(String column: columns) {_            insert = insert.value(column, bindMarker())__        }_        if (ifNotExists) {_            insert = insert.ifNotExists()__        }_        if (ttl != null) {_            insert.using(ttl(ttl))__        }_        return insert__    };generate,insert,cql;public,static,insert,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,insert,insert,insert,into,table,for,string,column,columns,insert,insert,value,column,bind,marker,if,if,not,exists,insert,insert,if,not,exists,if,ttl,null,insert,using,ttl,ttl,return,insert
CassandraUtils -> public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1424250049;Generate Insert CQL.;public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        Insert insert = insertInto(table)__        for(String column: columns) {_            insert = insert.value(column, bindMarker())__        }_        if (ifNotExists) {_            insert = insert.ifNotExists()__        }_        if (ttl != null) {_            insert.using(ttl(ttl))__        }_        return insert__    };generate,insert,cql;public,static,insert,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,insert,insert,insert,into,table,for,string,column,columns,insert,insert,value,column,bind,marker,if,if,not,exists,insert,insert,if,not,exists,if,ttl,null,insert,using,ttl,ttl,return,insert
CassandraUtils -> public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1424250565;Generate Insert CQL.;public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        Insert insert = insertInto(table)__        for (String column : columns) {_            insert = insert.value(column, bindMarker())__        }_        if (ifNotExists) {_            insert = insert.ifNotExists()__        }_        if (ttl != null) {_            insert.using(ttl(ttl))__        }_        return insert__    };generate,insert,cql;public,static,insert,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,insert,insert,insert,into,table,for,string,column,columns,insert,insert,value,column,bind,marker,if,if,not,exists,insert,insert,if,not,exists,if,ttl,null,insert,using,ttl,ttl,return,insert
CassandraUtils -> public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl);1435936056;Generate Insert CQL.;public static Insert generateInsert(String table, String[] columns, boolean ifNotExists, Integer ttl) {_        Insert insert = insertInto(table)__        for (String column : columns) {_            insert = insert.value(column, bindMarker())__        }_        if (ifNotExists) {_            insert = insert.ifNotExists()__        }_        if (ttl != null) {_            insert.using(ttl(ttl))__        }_        return insert__    };generate,insert,cql;public,static,insert,generate,insert,string,table,string,columns,boolean,if,not,exists,integer,ttl,insert,insert,insert,into,table,for,string,column,columns,insert,insert,value,column,bind,marker,if,if,not,exists,insert,insert,if,not,exists,if,ttl,null,insert,using,ttl,ttl,return,insert
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists);1424250049;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, size(whereColumns), ifExists)__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,size,where,columns,if,exists
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists);1424250049;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, size(whereColumns), ifExists)__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,size,where,columns,if,exists
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists);1424250565;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, size(whereColumns), ifExists)__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,size,where,columns,if,exists
CassandraUtils -> public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists);1435936056;Generate delete where columns = ? CQL.;public static Delete generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, size(whereColumns), ifExists)__    };generate,delete,where,columns,cql;public,static,delete,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,size,where,columns,if,exists
CassandraUtils -> public static void appendPlaceholders(StringBuilder cqlBuilder, int columnCount);1419330065;Append ?,? to CQL.;public static void appendPlaceholders(StringBuilder cqlBuilder, int columnCount) {_        for (int i = 0_ i < columnCount_ i++) {_            if (i > 0) {_                cqlBuilder.append(",")__            }_            cqlBuilder.append("?")__        }_    };append,to,cql;public,static,void,append,placeholders,string,builder,cql,builder,int,column,count,for,int,i,0,i,column,count,i,if,i,0,cql,builder,append,cql,builder,append
CassandraUtils -> public static void appendPlaceholders(StringBuilder cqlBuilder, int columnCount);1419331245;Append ?,? to CQL.;public static void appendPlaceholders(StringBuilder cqlBuilder, int columnCount) {_        for (int i = 0_ i < columnCount_ i++) {_            if (i > 0) {_                cqlBuilder.append(",")__            }_            cqlBuilder.append("?")__        }_    };append,to,cql;public,static,void,append,placeholders,string,builder,cql,builder,int,column,count,for,int,i,0,i,column,count,i,if,i,0,cql,builder,append,cql,builder,append
CassandraUtils -> public static void appendPlaceholders(StringBuilder cqlBuilder, int columnCount);1424250049;Append ?,? to CQL.;public static void appendPlaceholders(StringBuilder cqlBuilder, int columnCount) {_        for (int i = 0_ i < columnCount_ i++) {_            if (i > 0) {_                cqlBuilder.append(",")__            }_            cqlBuilder.append("?")__        }_    };append,to,cql;public,static,void,append,placeholders,string,builder,cql,builder,int,column,count,for,int,i,0,i,column,count,i,if,i,0,cql,builder,append,cql,builder,append
CassandraUtils -> public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1419330065;Generate select where columns = ? CQL.;public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        StringBuilder cqlBuilder = new StringBuilder("select ")__        appendColumns(cqlBuilder, selectColumns, ",")__        cqlBuilder.append(" from ").append(table)__        appendWhere(cqlBuilder, whereColumns, whereColumnsMaxIndex)__        return cqlBuilder__    };generate,select,where,columns,cql;public,static,string,builder,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,string,builder,cql,builder,new,string,builder,select,append,columns,cql,builder,select,columns,cql,builder,append,from,append,table,append,where,cql,builder,where,columns,where,columns,max,index,return,cql,builder
CassandraUtils -> public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1419331245;Generate select where columns = ? CQL.;public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        StringBuilder cqlBuilder = new StringBuilder("select ")__        appendColumns(cqlBuilder, selectColumns, ",")__        cqlBuilder.append(" from ").append(table)__        appendWhere(cqlBuilder, whereColumns, whereColumnsMaxIndex)__        return cqlBuilder__    };generate,select,where,columns,cql;public,static,string,builder,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,string,builder,cql,builder,new,string,builder,select,append,columns,cql,builder,select,columns,cql,builder,append,from,append,table,append,where,cql,builder,where,columns,where,columns,max,index,return,cql,builder
CassandraUtils -> public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex);1424250049;Generate select where columns = ? CQL.;public static StringBuilder generateSelect(String table, String[] selectColumns, String[] whereColumns, int whereColumnsMaxIndex) {_        StringBuilder cqlBuilder = new StringBuilder("select ")__        appendColumns(cqlBuilder, selectColumns, ",")__        cqlBuilder.append(" from ").append(table)__        appendWhere(cqlBuilder, whereColumns, whereColumnsMaxIndex)__        return cqlBuilder__    };generate,select,where,columns,cql;public,static,string,builder,generate,select,string,table,string,select,columns,string,where,columns,int,where,columns,max,index,string,builder,cql,builder,new,string,builder,select,append,columns,cql,builder,select,columns,cql,builder,append,from,append,table,append,where,cql,builder,where,columns,where,columns,max,index,return,cql,builder
CassandraUtils -> public static StringBuilder generateDelete(String table, String[] whereColumns, boolean ifExists);1419330065;Generate delete where columns = ? CQL.;public static StringBuilder generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, whereColumns.length, ifExists)__    };generate,delete,where,columns,cql;public,static,string,builder,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,where,columns,length,if,exists
CassandraUtils -> public static StringBuilder generateDelete(String table, String[] whereColumns, boolean ifExists);1419331245;Generate delete where columns = ? CQL.;public static StringBuilder generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, whereColumns.length, ifExists)__    };generate,delete,where,columns,cql;public,static,string,builder,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,where,columns,length,if,exists
CassandraUtils -> public static StringBuilder generateDelete(String table, String[] whereColumns, boolean ifExists);1424250049;Generate delete where columns = ? CQL.;public static StringBuilder generateDelete(String table, String[] whereColumns, boolean ifExists) {_        return generateDelete(table, whereColumns, size(whereColumns), ifExists)__    };generate,delete,where,columns,cql;public,static,string,builder,generate,delete,string,table,string,where,columns,boolean,if,exists,return,generate,delete,table,where,columns,size,where,columns,if,exists
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns);1424250049;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, size(whereColumns))__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,size,where,columns
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns);1424250049;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, size(whereColumns))__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,size,where,columns
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns);1424250565;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, size(whereColumns))__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,size,where,columns
CassandraUtils -> public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns);1435936056;Generate select where columns = ? CQL.;public static Select generateSelect(String table, String[] selectColumns, String[] whereColumns) {_        return generateSelect(table, selectColumns, whereColumns, size(whereColumns))__    };generate,select,where,columns,cql;public,static,select,generate,select,string,table,string,select,columns,string,where,columns,return,generate,select,table,select,columns,where,columns,size,where,columns
