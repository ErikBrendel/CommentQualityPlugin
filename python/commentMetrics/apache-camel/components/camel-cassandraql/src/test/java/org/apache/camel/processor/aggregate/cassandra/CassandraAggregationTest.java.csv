commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;public static boolean canTest() {     // we cannot test on CI     return System.getenv("BUILD_ID") == null. }
false;protected;0;14;;@Override protected void doPreSetup() throws Exception {     if (canTest()) {         CassandraUnitUtils.startEmbeddedCassandra().         cluster = CassandraUnitUtils.cassandraCluster().         Session rootSession = cluster.connect().         CassandraUnitUtils.loadCQLDataSet(rootSession, "NamedAggregationDataSet.cql").         rootSession.close().         aggregationRepository = new NamedCassandraAggregationRepository(cluster, CassandraUnitUtils.KEYSPACE, "ID").         aggregationRepository.setTable("NAMED_CAMEL_AGGREGATION").         aggregationRepository.start().     }     super.doPreSetup(). }
false;public;0;14;;@Override @After public void tearDown() throws Exception {     super.tearDown().     if (canTest()) {         aggregationRepository.stop().         cluster.close().         try {             CassandraUnitUtils.cleanEmbeddedCassandra().         } catch (Throwable e) {         // ignore shutdown errors         }     } }
false;public;2;10;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String oldBody = oldExchange.getIn().getBody(String.class).     String newBody = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(oldBody + "," + newBody).     return oldExchange. }
false;public;0;20;;@Override public void configure() throws Exception {     AggregationStrategy aggregationStrategy = new AggregationStrategy() {          @Override         public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String oldBody = oldExchange.getIn().getBody(String.class).             String newBody = newExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(oldBody + "," + newBody).             return oldExchange.         }     }.     from("direct:input").aggregate(header("aggregationId"), aggregationStrategy).completionSize(3).completionTimeout(3000L).aggregationRepository(aggregationRepository).to("mock:output"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             AggregationStrategy aggregationStrategy = new AggregationStrategy() {                  @Override                 public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String oldBody = oldExchange.getIn().getBody(String.class).                     String newBody = newExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(oldBody + "," + newBody).                     return oldExchange.                 }             }.             from("direct:input").aggregate(header("aggregationId"), aggregationStrategy).completionSize(3).completionTimeout(3000L).aggregationRepository(aggregationRepository).to("mock:output").         }     }. }
false;private;2;3;;private void send(String aggregationId, String body) {     super.template.sendBodyAndHeader("direct:input", body, "aggregationId", aggregationId). }
false;public;0;19;;@Test public void testAggregationRoute() throws Exception {     if (!canTest()) {         return.     }     // Given     MockEndpoint mockOutput = getMockEndpoint("mock:output").     mockOutput.expectedMessageCount(2).     mockOutput.expectedBodiesReceivedInAnyOrder("A,C,E", "B,D").     // When     send("1", "A").     send("2", "B").     send("1", "C").     send("2", "D").     send("1", "E").     // Then     mockOutput.assertIsSatisfied(4000L). }
