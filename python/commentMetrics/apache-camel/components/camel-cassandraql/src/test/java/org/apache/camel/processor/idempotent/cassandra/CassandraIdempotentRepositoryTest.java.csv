commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Before public void setUp() throws Exception {     if (canTest()) {         cluster = CassandraUnitUtils.cassandraCluster().         session = cluster.connect(CassandraUnitUtils.KEYSPACE).         idempotentRepository = new CassandraIdempotentRepository(session).         idempotentRepository.start().     } }
false;public;0;8;;@After public void tearDown() throws Exception {     if (canTest()) {         idempotentRepository.stop().         session.close().         cluster.close().     } }
false;private;1;5;;private boolean exists(String key) {     return session.execute("select KEY from CAMEL_IDEMPOTENT where KEY=?", key).one() != null. }
false;public;0;15;;@Test public void testAddNotExists() {     if (!canTest()) {         return.     }     // Given     String key = "Add_NotExists".     assertFalse(exists(key)).     // When     boolean result = idempotentRepository.add(key).     // Then     assertTrue(result).     assertTrue(exists(key)). }
false;public;0;15;;@Test public void testAddExists() {     if (!canTest()) {         return.     }     // Given     String key = "Add_Exists".     assertTrue(exists(key)).     // When     boolean result = idempotentRepository.add(key).     // Then     assertFalse(result).     assertTrue(exists(key)). }
false;public;0;14;;@Test public void testContainsNotExists() {     if (!canTest()) {         return.     }     // Given     String key = "Contains_NotExists".     assertFalse(exists(key)).     // When     boolean result = idempotentRepository.contains(key).     // Then     assertFalse(result). }
false;public;0;14;;@Test public void testContainsExists() {     if (!canTest()) {         return.     }     // Given     String key = "Contains_Exists".     assertTrue(exists(key)).     // When     boolean result = idempotentRepository.contains(key).     // Then     assertTrue(result). }
false;public;0;14;;@Test public void testRemoveNotExists() {     if (!canTest()) {         return.     }     // Given     String key = "Remove_NotExists".     assertFalse(exists(key)).     // When     boolean result = idempotentRepository.contains(key).     // Then     assertFalse(result). }
false;public;0;14;;@Test public void testRemoveExists() {     if (!canTest()) {         return.     }     // Given     String key = "Remove_Exists".     assertTrue(exists(key)).     // When     boolean result = idempotentRepository.remove(key).     // Then     assertTrue(result). }
false;public;0;14;;@Test public void testClear() {     if (!canTest()) {         return.     }     // Given     String key = "Remove_Exists".     assertTrue(exists(key)).     // When     idempotentRepository.clear().     // Then     assertFalse(idempotentRepository.contains(key)). }
