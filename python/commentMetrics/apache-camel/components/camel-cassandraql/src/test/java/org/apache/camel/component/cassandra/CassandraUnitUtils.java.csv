commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;8;/**  * Create Cassandra JUnit Rule.  */ ;/**  * Create Cassandra JUnit Rule.  */ public static CassandraCQLUnit cassandraCQLUnit() {     if (canTest()) {         if (cassandraCQLUnit == null) {             cassandraCQLUnit = cassandraCQLUnit("BasicDataSet.cql").         }     }     return cassandraCQLUnit. }
false;public,static;1;7;;public static CassandraCQLUnit cassandraCQLUnit(String dataSetCql) {     if (canTest()) {         return cassandraCQLUnit(cqlDataSet(dataSetCql)).     } else {         return null.     } }
false;public,static;1;7;;public static CQLDataSet cqlDataSet(String dataSetCql) {     if (canTest()) {         return new ClassPathCQLDataSet(dataSetCql, KEYSPACE).     } else {         return null.     } }
false;public,static;2;6;;public static void loadCQLDataSet(Session session, String dataSetCql) {     if (canTest()) {         CQLDataLoader loader = new CQLDataLoader(session).         loader.load(cqlDataSet(dataSetCql)).     } }
false;public,static;1;7;;public static CassandraCQLUnit cassandraCQLUnit(CQLDataSet dataset) {     if (canTest()) {         return new CassandraCQLUnit(dataset, "/camel-cassandra.yaml").     } else {         return null.     } }
true;public,static;0;5;/**  * Start embedded Cassandra.  */ ;/**  * Start embedded Cassandra.  */ public static void startEmbeddedCassandra() throws Exception {     if (canTest()) {         EmbeddedCassandraServerHelper.startEmbeddedCassandra("/camel-cassandra.yaml", "target/camel-cassandra", 30000).     } }
true;public,static;0;5;/**  * Clean embedded Cassandra.  */ ;/**  * Clean embedded Cassandra.  */ public static void cleanEmbeddedCassandra() throws Exception {     if (canTest()) {         EmbeddedCassandraServerHelper.cleanEmbeddedCassandra().     } }
false;public,static;0;10;;public static Cluster cassandraCluster() {     if (canTest()) {         return Cluster.builder().addContactPoint(HOST).withClusterName("camel-cluster").build().     } else {         return null.     } }
