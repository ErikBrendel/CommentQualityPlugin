# id;timestamp;commentText;codeText;commentWords;codeWords
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1424250049;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        Object response = producerTemplate.requestBodyAndHeader(null,_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,object,response,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1424250565;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        Object response = producerTemplate.requestBodyAndHeader(null,_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,object,response,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1473946230;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        Object response = producerTemplate.requestBodyAndHeader(null,_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,object,response,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1473946805;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        Object response = producerTemplate.requestBodyAndHeader(null,_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,object,response,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1474272626;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        Object response = producerTemplate.requestBodyAndHeader(null,_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,object,response,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1511469566;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        producerTemplate.requestBodyAndHeader(null, CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerUnpreparedTest -> @Test     public void testRequestMessageStatement() throws Exception;1523968798;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", "Claus 2"))_                .and(set("last_name", "Ibsen 2"))_                .where(eq("login", "c_ibsen"))__        producerTemplate.requestBodyAndHeader(null, CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,claus,2,and,set,ibsen,2,where,eq,login,producer,template,request,body,and,header,null,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
