commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public void configure() {     from("direct:input").to("cql://localhost/camel_ks?cql=" + CQL + "&prepareStatements=false").     from("direct:inputNoParameter").to("cql://localhost/camel_ks?cql=" + NO_PARAMETER_CQL + "&prepareStatements=false"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:input").to("cql://localhost/camel_ks?cql=" + CQL + "&prepareStatements=false").             from("direct:inputNoParameter").to("cql://localhost/camel_ks?cql=" + NO_PARAMETER_CQL + "&prepareStatements=false").         }     }. }
false;public;0;14;;@Test public void testRequestUriCql() throws Exception {     producerTemplate.requestBody(Arrays.asList("w_jiang", "Willem", "Jiang")).     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "w_jiang").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Willem", row.getString("first_name")).     assertEquals("Jiang", row.getString("last_name")).     session.close().     cluster.close(). }
false;public;0;7;;@Test public void testRequestNoParameterNull() throws Exception {     Object response = noParameterProducerTemplate.requestBody(null).     assertNotNull(response).     assertIsInstanceOf(List.class, response). }
false;public;0;7;;@Test public void testRequestNoParameterEmpty() throws Exception {     Object response = noParameterProducerTemplate.requestBody(null).     assertNotNull(response).     assertIsInstanceOf(List.class, response). }
false;public;0;15;;@Test public void testRequestMessageCql() throws Exception {     producerTemplate.requestBodyAndHeader(new Object[] { "Claus 2", "Ibsen 2", "c_ibsen" }, CassandraConstants.CQL_QUERY, "update camel_user set first_name=?, last_name=? where login=?").     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Claus 2", row.getString("first_name")).     assertEquals("Ibsen 2", row.getString("last_name")).     session.close().     cluster.close(). }
true;public;0;18;/**  * Test with incoming message containing a header with RegularStatement.  */ ;/**  * Test with incoming message containing a header with RegularStatement.  */ @Test public void testRequestMessageStatement() throws Exception {     Update.Where update = update("camel_user").with(set("first_name", "Claus 2")).and(set("last_name", "Ibsen 2")).where(eq("login", "c_ibsen")).     producerTemplate.requestBodyAndHeader(null, CassandraConstants.CQL_QUERY, update).     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Claus 2", row.getString("first_name")).     assertEquals("Ibsen 2", row.getString("last_name")).     session.close().     cluster.close(). }
