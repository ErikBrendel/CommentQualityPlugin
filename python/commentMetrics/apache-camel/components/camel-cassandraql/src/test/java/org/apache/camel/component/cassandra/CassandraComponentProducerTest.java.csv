# id;timestamp;commentText;codeText;commentWords;codeWords
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1424250049;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1424250565;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1438790153;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1441350815;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1441352221;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1473946230;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1473946805;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1474272626;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        Object response = producerTemplate.requestBodyAndHeader(new Object[]{"Claus 2", "Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,if,can,test,return,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,object,response,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1511469566;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        producerTemplate.requestBodyAndHeader(new Object[] {"Claus 2", "Ibsen 2", "c_ibsen"}, CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,if,can,test,return,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1523968798;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        producerTemplate.requestBodyAndHeader(new Object[] {"Claus 2", "Ibsen 2", "c_ibsen"}, CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,if,can,test,return,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testRequestMessageStatement() throws Exception;1524168259;Test with incoming message containing a header with RegularStatement.;@Test_    public void testRequestMessageStatement() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where update = update("camel_user")_                .with(set("first_name", bindMarker()))_                .and(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        producerTemplate.requestBodyAndHeader(new Object[] {"Claus 2", "Ibsen 2", "c_ibsen"}, CassandraConstants.CQL_QUERY, update)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row = resultSet.one()__        assertNotNull(row)__        assertEquals("Claus 2", row.getString("first_name"))__        assertEquals("Ibsen 2", row.getString("last_name"))__        session.close()__        cluster.close()__    };test,with,incoming,message,containing,a,header,with,regular,statement;test,public,void,test,request,message,statement,throws,exception,if,can,test,return,update,where,update,update,with,set,bind,marker,and,set,bind,marker,where,eq,login,bind,marker,producer,template,request,body,and,header,new,object,claus,2,ibsen,2,cassandra,constants,update,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set,session,execute,select,login,from,where,login,row,row,result,set,one,assert,not,null,row,assert,equals,claus,2,row,get,string,assert,equals,ibsen,2,row,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1441350815;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_		Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)__        _        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))__        _        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_		Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)__        _        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1441352221;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1473946230;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1473946805;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1474272626;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,if,can,test,return,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1511469566;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,if,can,test,return,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1523968798;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response1 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        @SuppressWarnings("unused")_        Object response2 = producerTemplateNoEndpointCql.requestBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,if,can,test,return,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response1,producer,template,no,endpoint,cql,request,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,suppress,warnings,unused,object,response2,producer,template,no,endpoint,cql,request,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
CassandraComponentProducerTest -> @Test     public void testEndpointNoCqlParameter() throws Exception;1524168259;Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter;@Test_    public void testEndpointNoCqlParameter() throws Exception {_        if (!canTest()) {_            return__        }__        Update.Where updateFirstName = update("camel_user")_                .with(set("first_name", bindMarker()))_                .where(eq("login", bindMarker()))__        producerTemplateNoEndpointCql.sendBodyAndHeader(new Object[]{"Claus 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateFirstName)___        Cluster cluster = CassandraUnitUtils.cassandraCluster()__        Session session = cluster.connect(CassandraUnitUtils.KEYSPACE)__        ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row1 = resultSet1.one()__        assertNotNull(row1)__        assertEquals("Claus 2", row1.getString("first_name"))__        assertEquals("Ibsen", row1.getString("last_name"))___        Update.Where updateLastName = update("camel_user")_                .with(set("last_name", bindMarker()))_                .where(eq("login", bindMarker()))__        producerTemplateNoEndpointCql.sendBodyAndHeader(new Object[]{"Ibsen 2", "c_ibsen"},_                CassandraConstants.CQL_QUERY, updateLastName)___        ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen")__        Row row2 = resultSet2.one()__        assertNotNull(row2)__        assertEquals("Claus 2", row2.getString("first_name"))__        assertEquals("Ibsen 2", row2.getString("last_name"))___        session.close()__        cluster.close()__    };simulate,different,cql,statements,in,the,incoming,message,containing,a,header,with,regular,statement,justifying,the,cassandracql,endpoint,not,containing,a,cql,uri,parameter;test,public,void,test,endpoint,no,cql,parameter,throws,exception,if,can,test,return,update,where,update,first,name,update,with,set,bind,marker,where,eq,login,bind,marker,producer,template,no,endpoint,cql,send,body,and,header,new,object,claus,2,cassandra,constants,update,first,name,cluster,cluster,cassandra,unit,utils,cassandra,cluster,session,session,cluster,connect,cassandra,unit,utils,keyspace,result,set,result,set1,session,execute,select,login,from,where,login,row,row1,result,set1,one,assert,not,null,row1,assert,equals,claus,2,row1,get,string,assert,equals,ibsen,row1,get,string,update,where,update,last,name,update,with,set,bind,marker,where,eq,login,bind,marker,producer,template,no,endpoint,cql,send,body,and,header,new,object,ibsen,2,cassandra,constants,update,last,name,result,set,result,set2,session,execute,select,login,from,where,login,row,row2,result,set2,one,assert,not,null,row2,assert,equals,claus,2,row2,get,string,assert,equals,ibsen,2,row2,get,string,session,close,cluster,close
