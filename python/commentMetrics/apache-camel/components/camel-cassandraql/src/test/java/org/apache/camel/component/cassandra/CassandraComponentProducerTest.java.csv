commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void configure() {     from("direct:input").to("cql://localhost/camel_ks?cql=" + CQL).     from("direct:inputNoParameter").to("cql://localhost/camel_ks?cql=" + NO_PARAMETER_CQL).     from("direct:loadBalancingPolicy").to("cql://localhost/camel_ks?cql=" + NO_PARAMETER_CQL + "&loadBalancingPolicy=RoundRobinPolicy").     from("direct:inputNotConsistent").to(NOT_CONSISTENT_URI).     from("direct:inputNoEndpointCql").to("cql://localhost/camel_ks"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:input").to("cql://localhost/camel_ks?cql=" + CQL).             from("direct:inputNoParameter").to("cql://localhost/camel_ks?cql=" + NO_PARAMETER_CQL).             from("direct:loadBalancingPolicy").to("cql://localhost/camel_ks?cql=" + NO_PARAMETER_CQL + "&loadBalancingPolicy=RoundRobinPolicy").             from("direct:inputNotConsistent").to(NOT_CONSISTENT_URI).             from("direct:inputNoEndpointCql").to("cql://localhost/camel_ks").         }     }. }
false;public;0;18;;@Test public void testRequestUriCql() throws Exception {     if (!canTest()) {         return.     }     producerTemplate.requestBody(Arrays.asList("w_jiang", "Willem", "Jiang")).     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "w_jiang").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Willem", row.getString("first_name")).     assertEquals("Jiang", row.getString("last_name")).     session.close().     cluster.close(). }
false;public;0;11;;@Test public void testRequestNoParameterNull() throws Exception {     if (!canTest()) {         return.     }     Object response = noParameterProducerTemplate.requestBody(null).     assertNotNull(response).     assertIsInstanceOf(List.class, response). }
false;public;0;11;;@Test public void testRequestNoParameterEmpty() throws Exception {     if (!canTest()) {         return.     }     Object response = noParameterProducerTemplate.requestBody(Collections.emptyList()).     assertNotNull(response).     assertIsInstanceOf(List.class, response). }
false;public;0;19;;@Test public void testRequestMessageCql() throws Exception {     if (!canTest()) {         return.     }     producerTemplate.requestBodyAndHeader(new Object[] { "Claus 2", "Ibsen 2", "c_ibsen" }, CassandraConstants.CQL_QUERY, "update camel_user set first_name=?, last_name=? where login=?").     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Claus 2", row.getString("first_name")).     assertEquals("Ibsen 2", row.getString("last_name")).     session.close().     cluster.close(). }
false;public;0;19;;@Test public void testLoadBalancing() throws Exception {     if (!canTest()) {         return.     }     loadBalancingPolicyTemplate.requestBodyAndHeader(new Object[] { "Claus 2", "Ibsen 2", "c_ibsen" }, CassandraConstants.CQL_QUERY, "update camel_user set first_name=?, last_name=? where login=?").     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Claus 2", row.getString("first_name")).     assertEquals("Ibsen 2", row.getString("last_name")).     session.close().     cluster.close(). }
true;public;0;22;/**  * Test with incoming message containing a header with RegularStatement.  */ ;/**  * Test with incoming message containing a header with RegularStatement.  */ @Test public void testRequestMessageStatement() throws Exception {     if (!canTest()) {         return.     }     Update.Where update = update("camel_user").with(set("first_name", bindMarker())).and(set("last_name", bindMarker())).where(eq("login", bindMarker())).     producerTemplate.requestBodyAndHeader(new Object[] { "Claus 2", "Ibsen 2", "c_ibsen" }, CassandraConstants.CQL_QUERY, update).     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row = resultSet.one().     assertNotNull(row).     assertEquals("Claus 2", row.getString("first_name")).     assertEquals("Ibsen 2", row.getString("last_name")).     session.close().     cluster.close(). }
true;public;0;35;/**  * Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter  */ ;/**  * Simulate different CQL statements in the incoming message containing a header with RegularStatement, justifying the cassandracql endpoint not containing a "cql" Uri parameter  */ @Test public void testEndpointNoCqlParameter() throws Exception {     if (!canTest()) {         return.     }     Update.Where updateFirstName = update("camel_user").with(set("first_name", bindMarker())).where(eq("login", bindMarker())).     producerTemplateNoEndpointCql.sendBodyAndHeader(new Object[] { "Claus 2", "c_ibsen" }, CassandraConstants.CQL_QUERY, updateFirstName).     Cluster cluster = CassandraUnitUtils.cassandraCluster().     Session session = cluster.connect(CassandraUnitUtils.KEYSPACE).     ResultSet resultSet1 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row1 = resultSet1.one().     assertNotNull(row1).     assertEquals("Claus 2", row1.getString("first_name")).     assertEquals("Ibsen", row1.getString("last_name")).     Update.Where updateLastName = update("camel_user").with(set("last_name", bindMarker())).where(eq("login", bindMarker())).     producerTemplateNoEndpointCql.sendBodyAndHeader(new Object[] { "Ibsen 2", "c_ibsen" }, CassandraConstants.CQL_QUERY, updateLastName).     ResultSet resultSet2 = session.execute("select login, first_name, last_name from camel_user where login = ?", "c_ibsen").     Row row2 = resultSet2.one().     assertNotNull(row2).     assertEquals("Claus 2", row2.getString("first_name")).     assertEquals("Ibsen 2", row2.getString("last_name")).     session.close().     cluster.close(). }
false;public;0;11;;@Test public void testRequestNotConsistent() throws Exception {     if (!canTest()) {         return.     }     CassandraEndpoint endpoint = getMandatoryEndpoint(NOT_CONSISTENT_URI, CassandraEndpoint.class).     assertEquals(ConsistencyLevel.ANY, endpoint.getConsistencyLevel()).     notConsistentProducerTemplate.requestBody(Arrays.asList("j_anstey", "Jonathan", "Anstey")). }
