commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     Object body = exchange.getIn().getBody().     assertTrue(body instanceof List). }
false;public;0;18;;@Test public void testConsumeAll() throws Exception {     if (!canTest()) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:resultAll").     mock.expectedMinimumMessageCount(1).     mock.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Object body = exchange.getIn().getBody().             assertTrue(body instanceof List).         }     }).     mock.await(1, TimeUnit.SECONDS).     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     Object body = exchange.getIn().getBody().     assertTrue(body instanceof List). }
false;public;0;18;;@Test public void testConsumeUnprepared() throws Exception {     if (!canTest()) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:resultUnprepared").     mock.expectedMinimumMessageCount(1).     mock.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Object body = exchange.getIn().getBody().             assertTrue(body instanceof List).         }     }).     mock.await(1, TimeUnit.SECONDS).     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     Object body = exchange.getIn().getBody().     assertTrue(body instanceof Row). }
false;public;0;19;;@Test public void testConsumeOne() throws Exception {     if (!canTest()) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:resultOne").     mock.expectedMinimumMessageCount(1).     mock.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Object body = exchange.getIn().getBody().             assertTrue(body instanceof Row).         }     }).     mock.await(1, TimeUnit.SECONDS).     assertMockEndpointsSatisfied(). }
false;public;0;8;;public void configure() {     from("cql://localhost/camel_ks?cql=" + CQL).to("mock:resultAll").     from("cql://localhost/camel_ks?cql=" + CQL + "&prepareStatements=false").to("mock:resultUnprepared").     from("cql://localhost/camel_ks?cql=" + CQL + "&resultSetConversionStrategy=ONE").to("mock:resultOne"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("cql://localhost/camel_ks?cql=" + CQL).to("mock:resultAll").             from("cql://localhost/camel_ks?cql=" + CQL + "&prepareStatements=false").to("mock:resultUnprepared").             from("cql://localhost/camel_ks?cql=" + CQL + "&resultSetConversionStrategy=ONE").to("mock:resultOne").         }     }. }
