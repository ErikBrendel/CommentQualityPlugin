commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;66;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     URI url = new URI(uri).     // must use copy as each endpoint can have different options     MailConfiguration config = getConfiguration().copy().     // only configure if we have a url with a known protocol     config.configure(url).     configureAdditionalJavaMailProperties(config, parameters).     MailEndpoint endpoint = new MailEndpoint(uri, this, config).     // special for search term bean reference     Object searchTerm = getAndRemoveOrResolveReferenceParameter(parameters, "searchTerm", Object.class).     if (searchTerm != null) {         SearchTerm st.         if (searchTerm instanceof SimpleSearchTerm) {             // okay its a SimpleSearchTerm then lets convert that to SearchTerm             st = MailConverters.toSearchTerm((SimpleSearchTerm) searchTerm, getCamelContext().getTypeConverter()).         } else {             st = getCamelContext().getTypeConverter().mandatoryConvertTo(SearchTerm.class, searchTerm).         }         endpoint.setSearchTerm(st).     }     // special for sort term     Object sortTerm = getAndRemoveOrResolveReferenceParameter(parameters, "sortTerm", Object.class).     if (sortTerm != null) {         SortTerm[] st.         if (sortTerm instanceof String) {             // okay its a String then lets convert that to SortTerm             st = MailConverters.toSortTerm((String) sortTerm).         } else if (sortTerm instanceof SortTerm[]) {             st = (SortTerm[]) sortTerm.         } else {             throw new IllegalArgumentException("SortTerm must either be SortTerm[] or a String value").         }         endpoint.setSortTerm(st).     }     endpoint.setContentTypeResolver(contentTypeResolver).     setProperties(endpoint.getConfiguration(), parameters).     setProperties(endpoint, parameters).     // special for searchTerm.xxx options     Map<String, Object> sstParams = IntrospectionSupport.extractProperties(parameters, "searchTerm.").     if (!sstParams.isEmpty()) {         // use SimpleSearchTerm as POJO to store the configuration and then convert that to the actual SearchTerm         SimpleSearchTerm sst = new SimpleSearchTerm().         setProperties(sst, sstParams).         SearchTerm st = MailConverters.toSearchTerm(sst, getCamelContext().getTypeConverter()).         endpoint.setSearchTerm(st).     }     // sanity check that we know the mail server     StringHelper.notEmpty(config.getHost(), "host").     StringHelper.notEmpty(config.getProtocol(), "protocol").     // Use global ssl if present     if (endpoint.getConfiguration().getSslContextParameters() == null) {         endpoint.getConfiguration().setSslContextParameters(retrieveGlobalSslContextParameters()).     }     return endpoint. }
false;private;2;15;;private void configureAdditionalJavaMailProperties(MailConfiguration config, Map<String, Object> parameters) {     // we cannot remove while iterating, as we will get a modification exception     Set<Object> toRemove = new HashSet<>().     for (Map.Entry<String, Object> entry : parameters.entrySet()) {         if (entry.getKey().toString().startsWith("mail.")) {             config.getAdditionalJavaMailProperties().put(entry.getKey(), entry.getValue()).             toRemove.add(entry.getKey()).         }     }     for (Object key : toRemove) {         parameters.remove(key).     } }
false;public;0;6;;public MailConfiguration getConfiguration() {     if (configuration == null) {         configuration = new MailConfiguration(getCamelContext()).     }     return configuration. }
true;public;1;3;/**  * Sets the Mail configuration  *  * @param configuration the configuration to use by default for endpoints  */ ;/**  * Sets the Mail configuration  *  * @param configuration the configuration to use by default for endpoints  */ public void setConfiguration(MailConfiguration configuration) {     this.configuration = configuration. }
false;public;0;3;;public ContentTypeResolver getContentTypeResolver() {     return contentTypeResolver. }
true;public;1;3;/**  * Resolver to determine Content-Type for file attachments.  */ ;/**  * Resolver to determine Content-Type for file attachments.  */ public void setContentTypeResolver(ContentTypeResolver contentTypeResolver) {     this.contentTypeResolver = contentTypeResolver. }
false;public;0;4;;@Override public boolean isUseGlobalSslContextParameters() {     return this.useGlobalSslContextParameters. }
true;public;1;4;/**  * Enable usage of global SSL context parameters.  */ ;/**  * Enable usage of global SSL context parameters.  */ @Override public void setUseGlobalSslContextParameters(boolean useGlobalSslContextParameters) {     this.useGlobalSslContextParameters = useGlobalSslContextParameters. }
