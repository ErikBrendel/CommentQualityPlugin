commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * Returns a copy of this configuration  */ ;/**  * Returns a copy of this configuration  */ public MailConfiguration copy() {     try {         MailConfiguration copy = (MailConfiguration) clone().         // must set a new recipients map as clone just reuse the same reference         copy.recipients = new HashMap<>().         copy.recipients.putAll(this.recipients).         return copy.     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public;1;32;;public void configure(URI uri) {     String value = uri.getHost().     if (value != null) {         setHost(value).     }     if (!isIgnoreUriScheme()) {         String scheme = uri.getScheme().         if (scheme != null) {             setProtocol(scheme).         }     }     String userInfo = uri.getUserInfo().     if (userInfo != null) {         String[] parts = uri.getUserInfo().split(":").         if (parts.length == 2) {             setUsername(parts[0]).             setPassword(parts[1]).         } else {             setUsername(userInfo).         }     }     int port = uri.getPort().     if (port > 0) {         setPort(port).     } else if (this.port <= 0) {         // resolve default port if no port number was provided, and not already configured with a port number         setPort(MailUtils.getDefaultPortForProtocol(uri.getScheme())).     } }
false;protected;0;49;;protected JavaMailSender createJavaMailSender() {     JavaMailSender answer = new DefaultJavaMailSender().     if (javaMailProperties != null) {         answer.setJavaMailProperties(javaMailProperties).     } else {         // set default properties if none provided         answer.setJavaMailProperties(createJavaMailProperties()).         // add additional properties if provided         if (additionalJavaMailProperties != null) {             answer.getJavaMailProperties().putAll(additionalJavaMailProperties).         }     }     if (host != null) {         answer.setHost(host).     }     if (port >= 0) {         answer.setPort(port).     }     if (username != null) {         answer.setUsername(username).     }     if (password != null) {         answer.setPassword(password).     }     if (protocol != null) {         answer.setProtocol(protocol).     }     if (session != null) {         answer.setSession(session).     } else {         ClassLoader tccl = Thread.currentThread().getContextClassLoader().         try {             if (applicationClassLoader != null) {                 Thread.currentThread().setContextClassLoader(applicationClassLoader).             }             // use our authenticator that does no live user interaction but returns the already configured username and password             Session session = Session.getInstance(answer.getJavaMailProperties(), new DefaultAuthenticator(getUsername(), getPassword())).             // sets the debug mode of the underlying mail framework             session.setDebug(debugMode).             answer.setSession(session).         } finally {             Thread.currentThread().setContextClassLoader(tccl).         }     }     return answer. }
false;private;0;46;;private Properties createJavaMailProperties() {     // clone the system properties and set the java mail properties     Properties properties = (Properties) System.getProperties().clone().     properties.put("mail." + protocol + ".connectiontimeout", connectionTimeout).     properties.put("mail." + protocol + ".timeout", connectionTimeout).     properties.put("mail." + protocol + ".host", host).     properties.put("mail." + protocol + ".port", "" + port).     if (username != null) {         properties.put("mail." + protocol + ".user", username).         properties.put("mail.user", username).         properties.put("mail." + protocol + ".auth", "true").     } else {         properties.put("mail." + protocol + ".auth", "false").     }     properties.put("mail.transport.protocol", protocol).     properties.put("mail.store.protocol", protocol).     properties.put("mail.host", host).     if (debugMode) {         // add more debug for the SSL communication as well         properties.put("javax.net.debug", "all").     }     if (sslContextParameters != null && isSecureProtocol()) {         properties.put("mail." + protocol + ".socketFactory", createSSLContext().getSocketFactory()).         properties.put("mail." + protocol + ".socketFactory.fallback", "false").         properties.put("mail." + protocol + ".socketFactory.port", "" + port).     }     if (sslContextParameters != null && isStartTlsEnabled()) {         properties.put("mail." + protocol + ".ssl.socketFactory", createSSLContext().getSocketFactory()).         properties.put("mail." + protocol + ".ssl.socketFactory.port", "" + port).     }     if (dummyTrustManager && isSecureProtocol()) {         // set the custom SSL properties         properties.put("mail." + protocol + ".socketFactory.class", "org.apache.camel.component.mail.DummySSLSocketFactory").         properties.put("mail." + protocol + ".socketFactory.fallback", "false").         properties.put("mail." + protocol + ".socketFactory.port", "" + port).     }     if (dummyTrustManager && isStartTlsEnabled()) {         // set the custom SSL properties         properties.put("mail." + protocol + ".ssl.socketFactory.class", "org.apache.camel.component.mail.DummySSLSocketFactory").         properties.put("mail." + protocol + ".ssl.socketFactory.port", "" + port).     }     return properties. }
false;private;0;7;;private SSLContext createSSLContext() {     try {         return sslContextParameters.createSSLContext(null).     } catch (Exception e) {         throw new RuntimeCamelException("Error initializing SSLContext.", e).     } }
true;public;0;4;/**  * Is the used protocol to be secure or not  */ ;/**  * Is the used protocol to be secure or not  */ public boolean isSecureProtocol() {     return this.protocol.equalsIgnoreCase("smtps") || this.protocol.equalsIgnoreCase("pop3s") || this.protocol.equalsIgnoreCase("imaps"). }
false;public;0;8;;public boolean isStartTlsEnabled() {     if (additionalJavaMailProperties != null) {         return ObjectHelper.equal(additionalJavaMailProperties.getProperty("mail." + protocol + ".starttls.enable"), "true", true) || ObjectHelper.equal(additionalJavaMailProperties.getProperty("mail." + protocol + ".starttls.required"), "true", true).     }     return false. }
false;public;0;8;;public String getMailStoreLogInformation() {     String ssl = "".     if (isSecureProtocol()) {         ssl = " (SSL enabled" + (dummyTrustManager ? " using DummyTrustManager)" : ")").     }     return protocol + "://" + host + ":" + port + ssl + ", folder=" + folderName. }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public JavaMailSender getJavaMailSender() {     return javaMailSender. }
true;public;1;3;/**  * To use a custom {@link org.apache.camel.component.mail.JavaMailSender} for sending emails.  */ ;/**  * To use a custom {@link org.apache.camel.component.mail.JavaMailSender} for sending emails.  */ public void setJavaMailSender(JavaMailSender javaMailSender) {     this.javaMailSender = javaMailSender. }
false;public;0;3;;public String getHost() {     return host. }
true;public;1;3;/**  * The mail server host name  */ ;/**  * The mail server host name  */ public void setHost(String host) {     this.host = host. }
false;public;0;3;;public Properties getJavaMailProperties() {     return javaMailProperties. }
true;public;1;3;/**  * Sets the java mail options. Will clear any default properties and only use the properties  * provided for this method.  */ ;/**  * Sets the java mail options. Will clear any default properties and only use the properties  * provided for this method.  */ public void setJavaMailProperties(Properties javaMailProperties) {     this.javaMailProperties = javaMailProperties. }
false;public;0;6;;public Properties getAdditionalJavaMailProperties() {     if (additionalJavaMailProperties == null) {         additionalJavaMailProperties = new Properties().     }     return additionalJavaMailProperties. }
true;public;1;3;/**  * Sets additional java mail properties, that will append/override any default properties  * that is set based on all the other options. This is useful if you need to add some  * special options but want to keep the others as is.  */ ;/**  * Sets additional java mail properties, that will append/override any default properties  * that is set based on all the other options. This is useful if you need to add some  * special options but want to keep the others as is.  */ public void setAdditionalJavaMailProperties(Properties additionalJavaMailProperties) {     this.additionalJavaMailProperties = additionalJavaMailProperties. }
false;public;0;3;;public String getPassword() {     return password. }
true;public;1;3;/**  * The password for login  */ ;/**  * The password for login  */ public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public String getSubject() {     return subject. }
true;public;1;3;/**  * The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option.  */ ;/**  * The Subject of the message being sent. Note: Setting the subject in the header takes precedence over this option.  */ public void setSubject(String subject) {     this.subject = subject. }
false;public;0;3;;public int getPort() {     return port. }
true;public;1;3;/**  * The port number of the mail server  */ ;/**  * The port number of the mail server  */ public void setPort(int port) {     this.port = port. }
false;public;0;3;;public String getProtocol() {     return protocol. }
true;public;1;3;/**  * The protocol for communicating with the mail server  */ ;/**  * The protocol for communicating with the mail server  */ public void setProtocol(String protocol) {     this.protocol = protocol. }
false;public;0;3;;public Session getSession() {     return session. }
true;public;1;3;/**  * Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where  * mail sessions are created and managed by some other resource, such as a JavaEE container.  * If this is not specified, Camel automatically creates the mail session for you.  */ ;/**  * Specifies the mail session that camel should use for all mail interactions. Useful in scenarios where  * mail sessions are created and managed by some other resource, such as a JavaEE container.  * If this is not specified, Camel automatically creates the mail session for you.  */ public void setSession(Session session) {     this.session = session. }
false;public;0;3;;public String getUsername() {     return username. }
true;public;1;12;/**  * The username for login  */ ;/**  * The username for login  */ public void setUsername(String username) {     this.username = username.     if (getRecipients().size() == 0) {         // set default destination to username@host for backwards compatibility         // can be overridden by URI parameters         String address = username.         if (address.indexOf("@") == -1) {             address += "@" + host.         }         setTo(address).     } }
false;public;0;3;;public String getFrom() {     return from. }
true;public;1;3;/**  * The from email address  */ ;/**  * The from email address  */ public void setFrom(String from) {     this.from = from. }
false;public;0;3;;public boolean isDelete() {     return delete. }
true;public;1;3;/**  * Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message.  * If false, the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a  * header with the key delete to determine if the mail should be deleted or not.  */ ;/**  * Deletes the messages after they have been processed. This is done by setting the DELETED flag on the mail message.  * If false, the SEEN flag is set instead. As of Camel 2.10 you can override this configuration option by setting a  * header with the key delete to determine if the mail should be deleted or not.  */ public void setDelete(boolean delete) {     this.delete = delete. }
false;public;0;3;;public boolean isMapMailMessage() {     return mapMailMessage. }
true;public;1;3;/**  * Specifies whether Camel should map the received mail message to Camel body/headers.  * If set to true, the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers.  * If this option is set to false then the IN message contains a raw javax.mail.Message.  * You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class).  */ ;/**  * Specifies whether Camel should map the received mail message to Camel body/headers.  * If set to true, the body of the mail message is mapped to the body of the Camel IN message and the mail headers are mapped to IN headers.  * If this option is set to false then the IN message contains a raw javax.mail.Message.  * You can retrieve this raw message by calling exchange.getIn().getBody(javax.mail.Message.class).  */ public void setMapMailMessage(boolean mapMailMessage) {     this.mapMailMessage = mapMailMessage. }
false;public;0;3;;public String getFolderName() {     return folderName. }
true;public;1;3;/**  * The folder to poll.  */ ;/**  * The folder to poll.  */ public void setFolderName(String folderName) {     this.folderName = folderName. }
false;public;0;3;;public boolean isIgnoreUriScheme() {     return ignoreUriScheme. }
true;public;1;3;/**  * Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported  * then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.  */ ;/**  * Option to let Camel ignore unsupported charset in the local JVM when sending mails. If the charset is unsupported  * then charset=XXX (where XXX represents the unsupported charset) is removed from the content-type and it relies on the platform default instead.  */ public void setIgnoreUriScheme(boolean ignoreUriScheme) {     this.ignoreUriScheme = ignoreUriScheme. }
false;public;0;3;;public boolean isUnseen() {     return unseen. }
true;public;1;3;/**  * Whether to limit by unseen mails only.  */ ;/**  * Whether to limit by unseen mails only.  */ public void setUnseen(boolean unseen) {     this.unseen = unseen. }
true;public;1;4;/**  * Sets the To email address. Separate multiple email addresses with comma.  */ ;/**  * Sets the To email address. Separate multiple email addresses with comma.  */ public void setTo(String address) {     this.to = address.     recipients.put(Message.RecipientType.TO, address). }
false;public;0;3;;public String getTo() {     return to. }
true;public;1;4;/**  * Sets the CC email address. Separate multiple email addresses with comma.  */ ;/**  * Sets the CC email address. Separate multiple email addresses with comma.  */ public void setCc(String address) {     this.cc = address.     recipients.put(Message.RecipientType.CC, address). }
false;public;0;3;;public String getCc() {     return cc. }
true;public;1;4;/**  * Sets the BCC email address. Separate multiple email addresses with comma.  */ ;/**  * Sets the BCC email address. Separate multiple email addresses with comma.  */ public void setBcc(String address) {     this.bcc = address.     recipients.put(Message.RecipientType.BCC, address). }
false;public;0;3;;public String getBcc() {     return bcc. }
false;public;0;3;;public Map<Message.RecipientType, String> getRecipients() {     return recipients. }
false;public;0;3;;public String getReplyTo() {     return replyTo. }
true;public;1;3;/**  * The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma.  */ ;/**  * The Reply-To recipients (the receivers of the response mail). Separate multiple email addresses with a comma.  */ public void setReplyTo(String replyTo) {     this.replyTo = replyTo. }
false;public;0;3;;public int getFetchSize() {     return fetchSize. }
true;public;1;3;/**  * Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server,  * if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed.  * Setting the value to 0 is a special corner case, where Camel will not consume any messages at all.  */ ;/**  * Sets the maximum number of messages to consume during a poll. This can be used to avoid overloading a mail server,  * if a mailbox folder contains a lot of messages. Default value of -1 means no fetch size and all messages will be consumed.  * Setting the value to 0 is a special corner case, where Camel will not consume any messages at all.  */ public void setFetchSize(int fetchSize) {     this.fetchSize = fetchSize. }
false;public;0;3;;public boolean isDebugMode() {     return debugMode. }
true;public;1;3;/**  * Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default.  */ ;/**  * Enable debug mode on the underlying mail framework. The SUN Mail framework logs the debug messages to System.out by default.  */ public void setDebugMode(boolean debugMode) {     this.debugMode = debugMode. }
false;public;0;3;;public long getConnectionTimeout() {     return connectionTimeout. }
true;public;1;3;/**  * The connection timeout in milliseconds.  */ ;/**  * The connection timeout in milliseconds.  */ public void setConnectionTimeout(int connectionTimeout) {     this.connectionTimeout = connectionTimeout. }
false;public;0;3;;public boolean isDummyTrustManager() {     return dummyTrustManager. }
true;public;1;3;/**  * To use a dummy security setting for trusting all certificates. Should only be used for development mode, and not production.  */ ;/**  * To use a dummy security setting for trusting all certificates. Should only be used for development mode, and not production.  */ public void setDummyTrustManager(boolean dummyTrustManager) {     this.dummyTrustManager = dummyTrustManager. }
false;public;0;3;;public String getContentType() {     return contentType. }
true;public;1;3;/**  * The mail message content type. Use text/html for HTML mails.  */ ;/**  * The mail message content type. Use text/html for HTML mails.  */ public void setContentType(String contentType) {     this.contentType = contentType. }
false;public;0;3;;public String getAlternativeBodyHeader() {     return alternativeBodyHeader. }
true;public;1;3;/**  * Specifies the key to an IN message header that contains an alternative email body.  * For example, if you send emails in text/html format and want to provide an alternative mail body for  * non-HTML email clients, set the alternative mail body with this key as a header.  */ ;/**  * Specifies the key to an IN message header that contains an alternative email body.  * For example, if you send emails in text/html format and want to provide an alternative mail body for  * non-HTML email clients, set the alternative mail body with this key as a header.  */ public void setAlternativeBodyHeader(String alternativeBodyHeader) {     this.alternativeBodyHeader = alternativeBodyHeader. }
false;public;0;3;;public boolean isUseInlineAttachments() {     return useInlineAttachments. }
true;public;1;3;/**  * Whether to use disposition inline or attachment.  */ ;/**  * Whether to use disposition inline or attachment.  */ public void setUseInlineAttachments(boolean useInlineAttachments) {     this.useInlineAttachments = useInlineAttachments. }
false;public;0;3;;public boolean isIgnoreUnsupportedCharset() {     return ignoreUnsupportedCharset. }
true;public;1;3;/**  * Option to let Camel ignore unsupported charset in the local JVM when sending mails.  * If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset)  * is removed from the content-type and it relies on the platform default instead.  */ ;/**  * Option to let Camel ignore unsupported charset in the local JVM when sending mails.  * If the charset is unsupported then charset=XXX (where XXX represents the unsupported charset)  * is removed from the content-type and it relies on the platform default instead.  */ public void setIgnoreUnsupportedCharset(boolean ignoreUnsupportedCharset) {     this.ignoreUnsupportedCharset = ignoreUnsupportedCharset. }
false;public;0;3;;public boolean isDisconnect() {     return disconnect. }
true;public;1;3;/**  * Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll.  */ ;/**  * Whether the consumer should disconnect after polling. If enabled this forces Camel to connect on each poll.  */ public void setDisconnect(boolean disconnect) {     this.disconnect = disconnect. }
false;public;0;3;;public boolean isCloseFolder() {     return closeFolder. }
true;public;1;3;/**  * Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well,  * then the consumer keep the folder open between polls.  */ ;/**  * Whether the consumer should close the folder after polling. Setting this option to false and having disconnect=false as well,  * then the consumer keep the folder open between polls.  */ public void setCloseFolder(boolean closeFolder) {     this.closeFolder = closeFolder. }
false;public;0;3;;public SSLContextParameters getSslContextParameters() {     return sslContextParameters. }
true;public;1;3;/**  * To configure security using SSLContextParameters.  */ ;/**  * To configure security using SSLContextParameters.  */ public void setSslContextParameters(SSLContextParameters sslContextParameters) {     this.sslContextParameters = sslContextParameters. }
false;public;0;3;;public String getCopyTo() {     return copyTo. }
true;public;1;3;/**  * After processing a mail message, it can be copied to a mail folder with the given name.  * You can override this configuration value, with a header with the key copyTo, allowing you to copy messages  * to folder names configured at runtime.  */ ;/**  * After processing a mail message, it can be copied to a mail folder with the given name.  * You can override this configuration value, with a header with the key copyTo, allowing you to copy messages  * to folder names configured at runtime.  */ public void setCopyTo(String copyTo) {     this.copyTo = copyTo. }
false;public;0;3;;public boolean isPeek() {     return peek. }
true;public;1;3;/**  * Will mark the javax.mail.Message as peeked before processing the mail message.  * This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on  * the mail server, which allows us to rollback the mail message if there is an error processing in Camel.  */ ;/**  * Will mark the javax.mail.Message as peeked before processing the mail message.  * This applies to IMAPMessage messages types only. By using peek the mail will not be eager marked as SEEN on  * the mail server, which allows us to rollback the mail message if there is an error processing in Camel.  */ public void setPeek(boolean peek) {     this.peek = peek. }
false;public;0;3;;public boolean isSkipFailedMessage() {     return skipFailedMessage. }
true;public;1;3;/**  * If the mail consumer cannot retrieve a given mail message, then this option allows to skip  * the message and move on to retrieve the next mail message.  * <p/>  * The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.  */ ;/**  * If the mail consumer cannot retrieve a given mail message, then this option allows to skip  * the message and move on to retrieve the next mail message.  * <p/>  * The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.  */ public void setSkipFailedMessage(boolean skipFailedMessage) {     this.skipFailedMessage = skipFailedMessage. }
false;public;0;3;;public boolean isHandleFailedMessage() {     return handleFailedMessage. }
true;public;1;3;/**  * If the mail consumer cannot retrieve a given mail message, then this option allows to handle  * the caused exception by the consumer's error handler. By enable the bridge error handler on the consumer,  * then the Camel routing error handler can handle the exception instead.  * <p/>  * The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.  */ ;/**  * If the mail consumer cannot retrieve a given mail message, then this option allows to handle  * the caused exception by the consumer's error handler. By enable the bridge error handler on the consumer,  * then the Camel routing error handler can handle the exception instead.  * <p/>  * The default behavior would be the consumer throws an exception and no mails from the batch would be able to be routed by Camel.  */ public void setHandleFailedMessage(boolean handleFailedMessage) {     this.handleFailedMessage = handleFailedMessage. }
false;public;0;3;;public AttachmentsContentTransferEncodingResolver getAttachmentsContentTransferEncodingResolver() {     return attachmentsContentTransferEncodingResolver. }
true;public;1;3;/**  * To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments.  */ ;/**  * To use a custom AttachmentsContentTransferEncodingResolver to resolve what content-type-encoding to use for attachments.  */ public void setAttachmentsContentTransferEncodingResolver(AttachmentsContentTransferEncodingResolver attachmentsContentTransferEncodingResolver) {     this.attachmentsContentTransferEncodingResolver = attachmentsContentTransferEncodingResolver. }
true;public;1;3;/**  * This option enables transparent MIME decoding and unfolding for mail headers.  */ ;/**  * This option enables transparent MIME decoding and unfolding for mail headers.  */ public void setMimeDecodeHeaders(boolean mimeDecodeHeaders) {     this.mimeDecodeHeaders = mimeDecodeHeaders. }
false;public;0;3;;public boolean isMimeDecodeHeaders() {     return mimeDecodeHeaders. }
