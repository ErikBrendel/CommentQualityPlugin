commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public String toString() {     // do not dump the mail content, as it requires live connection to the mail server     return "MailMessage@" + ObjectHelper.getIdentityHashCode(this). }
false;public;0;13;;public MailMessage copy() {     MailMessage answer = (MailMessage) super.copy().     answer.originalMailMessage = originalMailMessage.     answer.mailMessage = mailMessage.     if (mapMailMessage) {         // force attachments to be created (by getting attachments) to ensure they are always available due Camel error handler         // makes defensive copies, and we have optimized it to avoid populating initial attachments, when not needed,         // as all other Camel components do not use attachments         getAttachments().     }     return answer. }
true;public;0;3;/**  * Returns the original underlying Mail message  */ ;/**  * Returns the original underlying Mail message  */ public Message getOriginalMessage() {     return originalMailMessage. }
true;public;0;3;/**  * Returns the underlying Mail message  */ ;/**  * Returns the underlying Mail message  */ public Message getMessage() {     return mailMessage. }
false;public;1;6;;public void setMessage(Message mailMessage) {     if (this.originalMailMessage == null) {         this.originalMailMessage = mailMessage.     }     this.mailMessage = mailMessage. }
false;public;0;6;;@Override public MailMessage newInstance() {     MailMessage answer = new MailMessage(null, null, this.mapMailMessage).     answer.setCamelContext(getCamelContext()).     return answer. }
false;protected;0;8;;@Override protected Object createBody() {     if (mailMessage != null) {         MailBinding binding = ExchangeHelper.getBinding(getExchange(), MailBinding.class).         return binding != null ? binding.extractBodyFromMail(getExchange(), this) : null.     }     return null. }
false;protected;1;13;;@Override protected void populateInitialHeaders(Map<String, Object> map) {     if (mailMessage != null) {         try {             MailBinding binding = ExchangeHelper.getBinding(getExchange(), MailBinding.class).             if (binding != null) {                 map.putAll(binding.extractHeadersFromMail(mailMessage, getExchange())).             }         } catch (MessagingException | IOException e) {             throw new RuntimeCamelException("Error accessing headers due to: " + e.getMessage(), e).         }     } }
false;protected;1;13;;@Override protected void populateInitialAttachments(Map<String, Attachment> map) {     if (mailMessage != null) {         try {             MailBinding binding = ExchangeHelper.getBinding(getExchange(), MailBinding.class).             if (binding != null) {                 binding.extractAttachmentsFromMail(mailMessage, map).             }         } catch (Exception e) {             throw new RuntimeCamelException("Error populating the initial mail message attachments", e).         }     } }
false;public;1;21;;public void copyFrom(org.apache.camel.Message that) {     // only do a deep copy if we need to (yes when that is not a mail message, or if the mapMailMessage is true)     boolean needCopy = !(that instanceof MailMessage) || (((MailMessage) that).mapMailMessage).     if (needCopy) {         super.copyFrom(that).     } else {         // no deep copy needed, but copy message id         setMessageId(that.getMessageId()).         setFault(that.isFault()).     }     if (that instanceof MailMessage) {         MailMessage mailMessage = (MailMessage) that.         this.originalMailMessage = mailMessage.originalMailMessage.         this.mailMessage = mailMessage.mailMessage.         this.mapMailMessage = mailMessage.mapMailMessage.     }     // cover over exchange if none has been assigned     if (getExchange() == null) {         setExchange(that.getExchange()).     } }
