commented;modifiers;parameterAmount;loc;comment;code
false;;0;18;;int asNum() {     switch(this) {         case LE:             return ComparisonTerm.LE.         case LT:             return ComparisonTerm.LT.         case EQ:             return ComparisonTerm.EQ.         case NE:             return ComparisonTerm.NE.         case GT:             return ComparisonTerm.GT.         case GE:             return ComparisonTerm.GE.         default:             throw new IllegalArgumentException("Unknown comparison " + this).     } }
false;public;0;3;;public SearchTerm build() {     return term. }
false;public;0;3;;public SearchTermBuilder unseen() {     return unseen(Op.and). }
false;public;1;5;;public SearchTermBuilder unseen(Op op) {     SearchTerm st = new FlagTerm(new Flags(Flags.Flag.SEEN), false).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder header(String headerName, String pattern) {     return header(Op.and, headerName, pattern). }
false;public;3;5;;public SearchTermBuilder header(Op op, String headerName, String pattern) {     SearchTerm st = new HeaderTerm(headerName, pattern).     addTerm(op, st).     return this. }
false;public;1;3;;public SearchTermBuilder subject(String pattern) {     return subject(Op.and, pattern). }
false;public;2;5;;public SearchTermBuilder subject(Op op, String pattern) {     SearchTerm st = new SubjectTerm(pattern).     addTerm(op, st).     return this. }
false;public;1;3;;public SearchTermBuilder body(String pattern) {     return body(Op.and, pattern). }
false;public;2;5;;public SearchTermBuilder body(Op op, String pattern) {     SearchTerm st = new BodyTerm(pattern).     addTerm(op, st).     return this. }
false;public;1;3;;public SearchTermBuilder from(String pattern) {     return from(Op.and, pattern). }
false;public;2;5;;public SearchTermBuilder from(Op op, String pattern) {     SearchTerm st = new FromStringTerm(pattern).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder recipient(Message.RecipientType type, String pattern) {     return recipient(Op.and, type, pattern). }
false;public;3;5;;public SearchTermBuilder recipient(Op op, Message.RecipientType type, String pattern) {     SearchTerm st = new RecipientStringTerm(type, pattern).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder flag(Flags flags, boolean set) {     return flag(Op.and, flags, set). }
false;public;3;5;;public SearchTermBuilder flag(Op op, Flags flags, boolean set) {     SearchTerm st = new FlagTerm(flags, set).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder sent(Comparison comparison, Date date) {     return sent(Op.and, comparison, date). }
false;public;3;5;;public SearchTermBuilder sent(Op op, Comparison comparison, Date date) {     SentDateTerm st = new SentDateTerm(comparison.asNum(), date).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder sentNow(Comparison comparison, long offset) {     return sentNow(Op.and, comparison, offset). }
false;public;3;5;;public SearchTermBuilder sentNow(Op op, Comparison comparison, long offset) {     NowSearchTerm st = new NowSearchTerm(comparison.asNum(), true, offset).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder received(Comparison comparison, Date date) {     return received(Op.and, comparison, date). }
false;public;3;5;;public SearchTermBuilder received(Op op, Comparison comparison, Date date) {     ReceivedDateTerm st = new ReceivedDateTerm(comparison.asNum(), date).     addTerm(op, st).     return this. }
false;public;2;3;;public SearchTermBuilder receivedNow(Comparison comparison, long offset) {     return sentNow(Op.and, comparison, offset). }
false;public;3;5;;public SearchTermBuilder receivedNow(Op op, Comparison comparison, long offset) {     NowSearchTerm st = new NowSearchTerm(comparison.asNum(), false, offset).     addTerm(op, st).     return this. }
false;public;1;4;;public SearchTermBuilder and(SearchTerm term) {     addTerm(Op.and, term).     return this. }
false;public;1;4;;public SearchTermBuilder or(SearchTerm term) {     addTerm(Op.or, term).     return this. }
false;public;1;4;;public SearchTermBuilder not(SearchTerm term) {     addTerm(Op.not, term).     return this. }
false;private;2;12;;private void addTerm(Op op, SearchTerm newTerm) {     if (term == null) {         term = newTerm.     } else if (op == Op.and) {         term = new AndTerm(term, newTerm).     } else if (op == Op.or) {         term = new OrTerm(term, newTerm).     } else {         // need to and the existing with the not         term = new AndTerm(term, new NotTerm(newTerm)).     } }
