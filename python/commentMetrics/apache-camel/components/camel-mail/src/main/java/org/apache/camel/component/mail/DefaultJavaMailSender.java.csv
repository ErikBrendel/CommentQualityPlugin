commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getHost() {     return host. }
false;public;1;3;;public void setHost(String host) {     this.host = host. }
false;public;0;6;;public Properties getJavaMailProperties() {     if (javaMailProperties == null) {         javaMailProperties = new Properties().     }     return javaMailProperties. }
false;public;1;3;;public void setJavaMailProperties(Properties javaMailProperties) {     this.javaMailProperties = javaMailProperties. }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
false;public;0;6;;public Session getSession() {     if (session == null) {         session = Session.getInstance(getJavaMailProperties(), new DefaultAuthenticator(username, password)).     }     return session. }
false;public;1;3;;public void setSession(Session session) {     this.session = session. }
false;public;0;3;;public String getUsername() {     return username. }
false;public;1;3;;public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public int getPort() {     return port. }
false;public;1;3;;public void setPort(int port) {     this.port = port. }
false;public;0;3;;public String getProtocol() {     return protocol. }
false;public;1;3;;public void setProtocol(String protocol) {     this.protocol = protocol. }
false;public;1;25;;@Override public void send(MimeMessage mimeMessage) throws MessagingException {     Transport transport = getTransport(getSession()).     LOG.debug("Connecting to {}:{}", host, port).     transport.connect(getHost(), getPort(), getUsername(), getPassword()).     try {         if (mimeMessage.getSentDate() == null) {             mimeMessage.setSentDate(new Date()).         }         String messageId = mimeMessage.getMessageID().         mimeMessage.saveChanges().         if (messageId != null) {             // preserve explicitly specified message id, as it may be lost on save             mimeMessage.setHeader("Message-ID", messageId).         }         LOG.debug("Sending MimeMessage: {} using host: {}", mimeMessage, host).         transport.sendMessage(mimeMessage, mimeMessage.getAllRecipients()).     } finally {         try {             transport.close().         } catch (MessagingException e) {             LOG.warn("Error closing transport to host " + host + ". This exception will be ignored.", e).         }     } }
true;protected;1;3;/**  * Strategy to get the {@link Transport} from the mail {@link Session}.  */ ;/**  * Strategy to get the {@link Transport} from the mail {@link Session}.  */ protected Transport getTransport(Session session) throws NoSuchProviderException {     return session.getTransport(getProtocol()). }
