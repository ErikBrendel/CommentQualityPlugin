# id;timestamp;commentText;codeText;commentWords;codeWords
MailSorter -> SortTermWithDescending -> public SortTerm getTerm();1415211488;@return Actual search term;public SortTerm getTerm() {_            return term__        };return,actual,search,term;public,sort,term,get,term,return,term
MailSorter -> SortTermWithDescending -> public SortTerm getTerm();1425286479;@return Actual search term;public SortTerm getTerm() {_            return term__        };return,actual,search,term;public,sort,term,get,term,return,term
MailSorter -> SortTermWithDescending -> public SortTerm getTerm();1524063106;@return Actual search term;public SortTerm getTerm() {_            return term__        };return,actual,search,term;public,sort,term,get,term,return,term
MailSorter -> private static List<SortTermWithDescending> getSortTermsWithDescending(SortTerm[] sortTerm);1415211488;Compute the potentially descendingd sort terms from the input list__@param sortTerm Input list_@return Sort terms list including if the respective sort should be sorted in descending order;private static List<SortTermWithDescending> getSortTermsWithDescending(SortTerm[] sortTerm) {_        _        final List<SortTermWithDescending> sortTermsWithDescending = new ArrayList<>(sortTerm.length)__        _        boolean descendingNext = false__        for (SortTerm term : sortTerm) {_            if (term.equals(SortTerm.REVERSE)) {_                if (descendingNext) {_                    throw new IllegalArgumentException("Double reverse in sort term is not allowed")__                }_                descendingNext = true__            } else {_                sortTermsWithDescending.add(new SortTermWithDescending(term, descendingNext))__                descendingNext = false__            }_        }_        return sortTermsWithDescending__    };compute,the,potentially,descendingd,sort,terms,from,the,input,list,param,sort,term,input,list,return,sort,terms,list,including,if,the,respective,sort,should,be,sorted,in,descending,order;private,static,list,sort,term,with,descending,get,sort,terms,with,descending,sort,term,sort,term,final,list,sort,term,with,descending,sort,terms,with,descending,new,array,list,sort,term,length,boolean,descending,next,false,for,sort,term,term,sort,term,if,term,equals,sort,term,reverse,if,descending,next,throw,new,illegal,argument,exception,double,reverse,in,sort,term,is,not,allowed,descending,next,true,else,sort,terms,with,descending,add,new,sort,term,with,descending,term,descending,next,descending,next,false,return,sort,terms,with,descending
MailSorter -> private static List<SortTermWithDescending> getSortTermsWithDescending(SortTerm[] sortTerm);1425286479;Compute the potentially descending sort terms from the input list__@param sortTerm Input list_@return Sort terms list including if the respective sort should be sorted in descending order;private static List<SortTermWithDescending> getSortTermsWithDescending(SortTerm[] sortTerm) {_        _        final List<SortTermWithDescending> sortTermsWithDescending = new ArrayList<SortTermWithDescending>(sortTerm.length)__        _        boolean descendingNext = false__        for (SortTerm term : sortTerm) {_            if (term.equals(SortTerm.REVERSE)) {_                if (descendingNext) {_                    throw new IllegalArgumentException("Double reverse in sort term is not allowed")__                }_                descendingNext = true__            } else {_                sortTermsWithDescending.add(new SortTermWithDescending(term, descendingNext))__                descendingNext = false__            }_        }_        return sortTermsWithDescending__    };compute,the,potentially,descending,sort,terms,from,the,input,list,param,sort,term,input,list,return,sort,terms,list,including,if,the,respective,sort,should,be,sorted,in,descending,order;private,static,list,sort,term,with,descending,get,sort,terms,with,descending,sort,term,sort,term,final,list,sort,term,with,descending,sort,terms,with,descending,new,array,list,sort,term,with,descending,sort,term,length,boolean,descending,next,false,for,sort,term,term,sort,term,if,term,equals,sort,term,reverse,if,descending,next,throw,new,illegal,argument,exception,double,reverse,in,sort,term,is,not,allowed,descending,next,true,else,sort,terms,with,descending,add,new,sort,term,with,descending,term,descending,next,descending,next,false,return,sort,terms,with,descending
MailSorter -> private static List<SortTermWithDescending> getSortTermsWithDescending(SortTerm[] sortTerm);1524063106;Compute the potentially descending sort terms from the input list__@param sortTerm Input list_@return Sort terms list including if the respective sort should be sorted in descending order;private static List<SortTermWithDescending> getSortTermsWithDescending(SortTerm[] sortTerm) {_        _        final List<SortTermWithDescending> sortTermsWithDescending = new ArrayList<>(sortTerm.length)__        _        boolean descendingNext = false__        for (SortTerm term : sortTerm) {_            if (term.equals(SortTerm.REVERSE)) {_                if (descendingNext) {_                    throw new IllegalArgumentException("Double reverse in sort term is not allowed")__                }_                descendingNext = true__            } else {_                sortTermsWithDescending.add(new SortTermWithDescending(term, descendingNext))__                descendingNext = false__            }_        }_        return sortTermsWithDescending__    };compute,the,potentially,descending,sort,terms,from,the,input,list,param,sort,term,input,list,return,sort,terms,list,including,if,the,respective,sort,should,be,sorted,in,descending,order;private,static,list,sort,term,with,descending,get,sort,terms,with,descending,sort,term,sort,term,final,list,sort,term,with,descending,sort,terms,with,descending,new,array,list,sort,term,length,boolean,descending,next,false,for,sort,term,term,sort,term,if,term,equals,sort,term,reverse,if,descending,next,throw,new,illegal,argument,exception,double,reverse,in,sort,term,is,not,allowed,descending,next,true,else,sort,terms,with,descending,add,new,sort,term,with,descending,term,descending,next,descending,next,false,return,sort,terms,with,descending
MailSorter -> SortTermWithDescending -> public boolean isDescending();1415211488;@return true if sorting should be descending, false if it should be ascending;public boolean isDescending() {_            return descending__        };return,true,if,sorting,should,be,descending,false,if,it,should,be,ascending;public,boolean,is,descending,return,descending
MailSorter -> SortTermWithDescending -> public boolean isDescending();1425286479;@return true if sorting should be descending, false if it should be ascending;public boolean isDescending() {_            return descending__        };return,true,if,sorting,should,be,descending,false,if,it,should,be,ascending;public,boolean,is,descending,return,descending
MailSorter -> SortTermWithDescending -> public boolean isDescending();1524063106;@return true if sorting should be descending, false if it should be ascending;public boolean isDescending() {_            return descending__        };return,true,if,sorting,should,be,descending,false,if,it,should,be,ascending;public,boolean,is,descending,return,descending
MailSorter -> private static void sortMessages(Message[] messages, final List<SortTermWithDescending> sortTermsWithDescending);1415211488;Sort messages using the list of properties__@param messages             Messages to sort. Are sorted in place_@param sortTermsWithDescending Sort terms list including if the respective sort should be sorted in descending order;private static void sortMessages(Message[] messages, final List<SortTermWithDescending> sortTermsWithDescending) {_        Arrays.sort(messages, new Comparator<Message>() {_            @Override_            public int compare(Message m1, Message m2) {_                try {_                    for (SortTermWithDescending reversableTerm : sortTermsWithDescending) {_                        int comparison = compareMessageProperty(m1, m2, reversableTerm.getTerm())__                        _                        if (reversableTerm.isDescending()) {_                            comparison = -comparison__                        }_                        _                        if (comparison != 0) {_                            return comparison__                        }_                    }_                    _                    return 0__                } catch (MessagingException e) {_                    throw new IllegalArgumentException(e)__                }_            }_        })__    };sort,messages,using,the,list,of,properties,param,messages,messages,to,sort,are,sorted,in,place,param,sort,terms,with,descending,sort,terms,list,including,if,the,respective,sort,should,be,sorted,in,descending,order;private,static,void,sort,messages,message,messages,final,list,sort,term,with,descending,sort,terms,with,descending,arrays,sort,messages,new,comparator,message,override,public,int,compare,message,m1,message,m2,try,for,sort,term,with,descending,reversable,term,sort,terms,with,descending,int,comparison,compare,message,property,m1,m2,reversable,term,get,term,if,reversable,term,is,descending,comparison,comparison,if,comparison,0,return,comparison,return,0,catch,messaging,exception,e,throw,new,illegal,argument,exception,e
MailSorter -> private static void sortMessages(Message[] messages, final List<SortTermWithDescending> sortTermsWithDescending);1425286479;Sort messages using the list of properties__@param messages             Messages to sort. Are sorted in place_@param sortTermsWithDescending Sort terms list including if the respective sort should be sorted in descending order;private static void sortMessages(Message[] messages, final List<SortTermWithDescending> sortTermsWithDescending) {_        Arrays.sort(messages, new Comparator<Message>() {_            @Override_            public int compare(Message m1, Message m2) {_                try {_                    for (SortTermWithDescending reversableTerm : sortTermsWithDescending) {_                        int comparison = compareMessageProperty(m1, m2, reversableTerm.getTerm())__                        _                        if (reversableTerm.isDescending()) {_                            comparison = -comparison__                        }_                        _                        if (comparison != 0) {_                            return comparison__                        }_                    }_                    _                    return 0__                } catch (MessagingException e) {_                    throw new IllegalArgumentException(e)__                }_            }_        })__    };sort,messages,using,the,list,of,properties,param,messages,messages,to,sort,are,sorted,in,place,param,sort,terms,with,descending,sort,terms,list,including,if,the,respective,sort,should,be,sorted,in,descending,order;private,static,void,sort,messages,message,messages,final,list,sort,term,with,descending,sort,terms,with,descending,arrays,sort,messages,new,comparator,message,override,public,int,compare,message,m1,message,m2,try,for,sort,term,with,descending,reversable,term,sort,terms,with,descending,int,comparison,compare,message,property,m1,m2,reversable,term,get,term,if,reversable,term,is,descending,comparison,comparison,if,comparison,0,return,comparison,return,0,catch,messaging,exception,e,throw,new,illegal,argument,exception,e
MailSorter -> private static void sortMessages(Message[] messages, final List<SortTermWithDescending> sortTermsWithDescending);1524063106;Sort messages using the list of properties__@param messages             Messages to sort. Are sorted in place_@param sortTermsWithDescending Sort terms list including if the respective sort should be sorted in descending order;private static void sortMessages(Message[] messages, final List<SortTermWithDescending> sortTermsWithDescending) {_        Arrays.sort(messages, new Comparator<Message>() {_            @Override_            public int compare(Message m1, Message m2) {_                try {_                    for (SortTermWithDescending reversableTerm : sortTermsWithDescending) {_                        int comparison = compareMessageProperty(m1, m2, reversableTerm.getTerm())__                        _                        if (reversableTerm.isDescending()) {_                            comparison = -comparison__                        }_                        _                        if (comparison != 0) {_                            return comparison__                        }_                    }_                    _                    return 0__                } catch (MessagingException e) {_                    throw new IllegalArgumentException(e)__                }_            }_        })__    };sort,messages,using,the,list,of,properties,param,messages,messages,to,sort,are,sorted,in,place,param,sort,terms,with,descending,sort,terms,list,including,if,the,respective,sort,should,be,sorted,in,descending,order;private,static,void,sort,messages,message,messages,final,list,sort,term,with,descending,sort,terms,with,descending,arrays,sort,messages,new,comparator,message,override,public,int,compare,message,m1,message,m2,try,for,sort,term,with,descending,reversable,term,sort,terms,with,descending,int,comparison,compare,message,property,m1,m2,reversable,term,get,term,if,reversable,term,is,descending,comparison,comparison,if,comparison,0,return,comparison,return,0,catch,messaging,exception,e,throw,new,illegal,argument,exception,e
MailSorter -> private MailSorter();1415211488;No instances;private MailSorter() {_    };no,instances;private,mail,sorter
MailSorter -> private MailSorter();1425286479;No instances;private MailSorter() {_    };no,instances;private,mail,sorter
MailSorter -> private MailSorter();1524063106;No instances;private MailSorter() {_    };no,instances;private,mail,sorter
MailSorter -> public static void sortMessages(Message[] messages, final SortTerm[] sortTerm);1415211488;Sort the messages. This emulates sorting the messages on the server if the server doesn't have the sorting_capability. See RFC 5256_Does not support complex sorting like in the RFC (with Base Subject or other similar stuff), just simple_comparisons.__@param messages Messages to sort. Are sorted in place_@param sortTerm Sort term;public static void sortMessages(Message[] messages, final SortTerm[] sortTerm) {_        final List<SortTermWithDescending> sortTermsWithDescending = getSortTermsWithDescending(sortTerm)__        sortMessages(messages, sortTermsWithDescending)__    };sort,the,messages,this,emulates,sorting,the,messages,on,the,server,if,the,server,doesn,t,have,the,sorting,capability,see,rfc,5256,does,not,support,complex,sorting,like,in,the,rfc,with,base,subject,or,other,similar,stuff,just,simple,comparisons,param,messages,messages,to,sort,are,sorted,in,place,param,sort,term,sort,term;public,static,void,sort,messages,message,messages,final,sort,term,sort,term,final,list,sort,term,with,descending,sort,terms,with,descending,get,sort,terms,with,descending,sort,term,sort,messages,messages,sort,terms,with,descending
MailSorter -> public static void sortMessages(Message[] messages, final SortTerm[] sortTerm);1425286479;Sort the messages. This emulates sorting the messages on the server if the server doesn't have the sorting_capability. See RFC 5256_Does not support complex sorting like in the RFC (with Base Subject or other similar stuff), just simple_comparisons.__@param messages Messages to sort. Are sorted in place_@param sortTerm Sort term;public static void sortMessages(Message[] messages, final SortTerm[] sortTerm) {_        final List<SortTermWithDescending> sortTermsWithDescending = getSortTermsWithDescending(sortTerm)__        sortMessages(messages, sortTermsWithDescending)__    };sort,the,messages,this,emulates,sorting,the,messages,on,the,server,if,the,server,doesn,t,have,the,sorting,capability,see,rfc,5256,does,not,support,complex,sorting,like,in,the,rfc,with,base,subject,or,other,similar,stuff,just,simple,comparisons,param,messages,messages,to,sort,are,sorted,in,place,param,sort,term,sort,term;public,static,void,sort,messages,message,messages,final,sort,term,sort,term,final,list,sort,term,with,descending,sort,terms,with,descending,get,sort,terms,with,descending,sort,term,sort,messages,messages,sort,terms,with,descending
MailSorter -> public static void sortMessages(Message[] messages, final SortTerm[] sortTerm);1524063106;Sort the messages. This emulates sorting the messages on the server if the server doesn't have the sorting_capability. See RFC 5256_Does not support complex sorting like in the RFC (with Base Subject or other similar stuff), just simple_comparisons.__@param messages Messages to sort. Are sorted in place_@param sortTerm Sort term;public static void sortMessages(Message[] messages, final SortTerm[] sortTerm) {_        final List<SortTermWithDescending> sortTermsWithDescending = getSortTermsWithDescending(sortTerm)__        sortMessages(messages, sortTermsWithDescending)__    };sort,the,messages,this,emulates,sorting,the,messages,on,the,server,if,the,server,doesn,t,have,the,sorting,capability,see,rfc,5256,does,not,support,complex,sorting,like,in,the,rfc,with,base,subject,or,other,similar,stuff,just,simple,comparisons,param,messages,messages,to,sort,are,sorted,in,place,param,sort,term,sort,term;public,static,void,sort,messages,message,messages,final,sort,term,sort,term,final,list,sort,term,with,descending,sort,terms,with,descending,get,sort,terms,with,descending,sort,term,sort,messages,messages,sort,terms,with,descending
MailSorter -> private static int compareMessageProperty(Message msg1, Message msg2, SortTerm property) throws MessagingException;1415211488;Compare the value of the property of the two messages.__@param msg1     Message 1_@param msg2     Message 2_@param property Property to compare_@return msg1.property.compareTo(msg2.property)_@throws javax.mail.MessagingException If message data could not be read.;private static int compareMessageProperty(Message msg1, Message msg2, SortTerm property) throws MessagingException {_        if (property.equals(SortTerm.TO)) {_            InternetAddress addr1 = (InternetAddress) msg1.getRecipients(Message.RecipientType.TO)[0]__            InternetAddress addr2 = (InternetAddress) msg2.getRecipients(Message.RecipientType.TO)[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.CC)) {_            InternetAddress addr1 = (InternetAddress) msg1.getRecipients(Message.RecipientType.CC)[0]__            InternetAddress addr2 = (InternetAddress) msg2.getRecipients(Message.RecipientType.CC)[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.FROM)) {_            InternetAddress addr1 = (InternetAddress) msg1.getFrom()[0]__            InternetAddress addr2 = (InternetAddress) msg2.getFrom()[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.ARRIVAL)) {_            Date arr1 = msg1.getReceivedDate()__            Date arr2 = msg2.getReceivedDate()__            return arr1.compareTo(arr2)__        } else if (property.equals(SortTerm.DATE)) {_            Date sent1 = msg1.getSentDate()__            Date sent2 = msg2.getSentDate()__            return sent1.compareTo(sent2)__        } else if (property.equals(SortTerm.SIZE)) {_            int size1 = msg1.getSize()__            int size2 = msg2.getSize()__            return Integer.compare(size1, size2)__        } else if (property.equals(SortTerm.SUBJECT)) {_            String sub1 = msg1.getSubject()__            String sub2 = msg2.getSubject()__            return sub1.compareTo(sub2)__        }_        throw new IllegalArgumentException(String.format("Unknown sort term: %s", property.toString()))__    };compare,the,value,of,the,property,of,the,two,messages,param,msg1,message,1,param,msg2,message,2,param,property,property,to,compare,return,msg1,property,compare,to,msg2,property,throws,javax,mail,messaging,exception,if,message,data,could,not,be,read;private,static,int,compare,message,property,message,msg1,message,msg2,sort,term,property,throws,messaging,exception,if,property,equals,sort,term,to,internet,address,addr1,internet,address,msg1,get,recipients,message,recipient,type,to,0,internet,address,addr2,internet,address,msg2,get,recipients,message,recipient,type,to,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,cc,internet,address,addr1,internet,address,msg1,get,recipients,message,recipient,type,cc,0,internet,address,addr2,internet,address,msg2,get,recipients,message,recipient,type,cc,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,from,internet,address,addr1,internet,address,msg1,get,from,0,internet,address,addr2,internet,address,msg2,get,from,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,arrival,date,arr1,msg1,get,received,date,date,arr2,msg2,get,received,date,return,arr1,compare,to,arr2,else,if,property,equals,sort,term,date,date,sent1,msg1,get,sent,date,date,sent2,msg2,get,sent,date,return,sent1,compare,to,sent2,else,if,property,equals,sort,term,size,int,size1,msg1,get,size,int,size2,msg2,get,size,return,integer,compare,size1,size2,else,if,property,equals,sort,term,subject,string,sub1,msg1,get,subject,string,sub2,msg2,get,subject,return,sub1,compare,to,sub2,throw,new,illegal,argument,exception,string,format,unknown,sort,term,s,property,to,string
MailSorter -> private static int compareMessageProperty(Message msg1, Message msg2, SortTerm property) throws MessagingException;1425286479;Compare the value of the property of the two messages.__@param msg1     Message 1_@param msg2     Message 2_@param property Property to compare_@return msg1.property.compareTo(msg2.property)_@throws javax.mail.MessagingException If message data could not be read.;private static int compareMessageProperty(Message msg1, Message msg2, SortTerm property) throws MessagingException {_        if (property.equals(SortTerm.TO)) {_            InternetAddress addr1 = (InternetAddress) msg1.getRecipients(Message.RecipientType.TO)[0]__            InternetAddress addr2 = (InternetAddress) msg2.getRecipients(Message.RecipientType.TO)[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.CC)) {_            InternetAddress addr1 = (InternetAddress) msg1.getRecipients(Message.RecipientType.CC)[0]__            InternetAddress addr2 = (InternetAddress) msg2.getRecipients(Message.RecipientType.CC)[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.FROM)) {_            InternetAddress addr1 = (InternetAddress) msg1.getFrom()[0]__            InternetAddress addr2 = (InternetAddress) msg2.getFrom()[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.ARRIVAL)) {_            Date arr1 = msg1.getReceivedDate()__            Date arr2 = msg2.getReceivedDate()__            return arr1.compareTo(arr2)__        } else if (property.equals(SortTerm.DATE)) {_            Date sent1 = msg1.getSentDate()__            Date sent2 = msg2.getSentDate()__            return sent1.compareTo(sent2)__        } else if (property.equals(SortTerm.SIZE)) {_            int size1 = msg1.getSize()__            int size2 = msg2.getSize()__            return Integer.compare(size1, size2)__        } else if (property.equals(SortTerm.SUBJECT)) {_            String sub1 = msg1.getSubject()__            String sub2 = msg2.getSubject()__            return sub1.compareTo(sub2)__        }_        throw new IllegalArgumentException(String.format("Unknown sort term: %s", property.toString()))__    };compare,the,value,of,the,property,of,the,two,messages,param,msg1,message,1,param,msg2,message,2,param,property,property,to,compare,return,msg1,property,compare,to,msg2,property,throws,javax,mail,messaging,exception,if,message,data,could,not,be,read;private,static,int,compare,message,property,message,msg1,message,msg2,sort,term,property,throws,messaging,exception,if,property,equals,sort,term,to,internet,address,addr1,internet,address,msg1,get,recipients,message,recipient,type,to,0,internet,address,addr2,internet,address,msg2,get,recipients,message,recipient,type,to,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,cc,internet,address,addr1,internet,address,msg1,get,recipients,message,recipient,type,cc,0,internet,address,addr2,internet,address,msg2,get,recipients,message,recipient,type,cc,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,from,internet,address,addr1,internet,address,msg1,get,from,0,internet,address,addr2,internet,address,msg2,get,from,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,arrival,date,arr1,msg1,get,received,date,date,arr2,msg2,get,received,date,return,arr1,compare,to,arr2,else,if,property,equals,sort,term,date,date,sent1,msg1,get,sent,date,date,sent2,msg2,get,sent,date,return,sent1,compare,to,sent2,else,if,property,equals,sort,term,size,int,size1,msg1,get,size,int,size2,msg2,get,size,return,integer,compare,size1,size2,else,if,property,equals,sort,term,subject,string,sub1,msg1,get,subject,string,sub2,msg2,get,subject,return,sub1,compare,to,sub2,throw,new,illegal,argument,exception,string,format,unknown,sort,term,s,property,to,string
MailSorter -> private static int compareMessageProperty(Message msg1, Message msg2, SortTerm property) throws MessagingException;1524063106;Compare the value of the property of the two messages.__@param msg1     Message 1_@param msg2     Message 2_@param property Property to compare_@return msg1.property.compareTo(msg2.property)_@throws javax.mail.MessagingException If message data could not be read.;private static int compareMessageProperty(Message msg1, Message msg2, SortTerm property) throws MessagingException {_        if (property.equals(SortTerm.TO)) {_            InternetAddress addr1 = (InternetAddress) msg1.getRecipients(Message.RecipientType.TO)[0]__            InternetAddress addr2 = (InternetAddress) msg2.getRecipients(Message.RecipientType.TO)[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.CC)) {_            InternetAddress addr1 = (InternetAddress) msg1.getRecipients(Message.RecipientType.CC)[0]__            InternetAddress addr2 = (InternetAddress) msg2.getRecipients(Message.RecipientType.CC)[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.FROM)) {_            InternetAddress addr1 = (InternetAddress) msg1.getFrom()[0]__            InternetAddress addr2 = (InternetAddress) msg2.getFrom()[0]__            return addr1.getAddress().compareTo(addr2.getAddress())__        } else if (property.equals(SortTerm.ARRIVAL)) {_            Date arr1 = msg1.getReceivedDate()__            Date arr2 = msg2.getReceivedDate()__            return arr1.compareTo(arr2)__        } else if (property.equals(SortTerm.DATE)) {_            Date sent1 = msg1.getSentDate()__            Date sent2 = msg2.getSentDate()__            return sent1.compareTo(sent2)__        } else if (property.equals(SortTerm.SIZE)) {_            int size1 = msg1.getSize()__            int size2 = msg2.getSize()__            return Integer.compare(size1, size2)__        } else if (property.equals(SortTerm.SUBJECT)) {_            String sub1 = msg1.getSubject()__            String sub2 = msg2.getSubject()__            return sub1.compareTo(sub2)__        }_        throw new IllegalArgumentException(String.format("Unknown sort term: %s", property.toString()))__    };compare,the,value,of,the,property,of,the,two,messages,param,msg1,message,1,param,msg2,message,2,param,property,property,to,compare,return,msg1,property,compare,to,msg2,property,throws,javax,mail,messaging,exception,if,message,data,could,not,be,read;private,static,int,compare,message,property,message,msg1,message,msg2,sort,term,property,throws,messaging,exception,if,property,equals,sort,term,to,internet,address,addr1,internet,address,msg1,get,recipients,message,recipient,type,to,0,internet,address,addr2,internet,address,msg2,get,recipients,message,recipient,type,to,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,cc,internet,address,addr1,internet,address,msg1,get,recipients,message,recipient,type,cc,0,internet,address,addr2,internet,address,msg2,get,recipients,message,recipient,type,cc,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,from,internet,address,addr1,internet,address,msg1,get,from,0,internet,address,addr2,internet,address,msg2,get,from,0,return,addr1,get,address,compare,to,addr2,get,address,else,if,property,equals,sort,term,arrival,date,arr1,msg1,get,received,date,date,arr2,msg2,get,received,date,return,arr1,compare,to,arr2,else,if,property,equals,sort,term,date,date,sent1,msg1,get,sent,date,date,sent2,msg2,get,sent,date,return,sent1,compare,to,sent2,else,if,property,equals,sort,term,size,int,size1,msg1,get,size,int,size2,msg2,get,size,return,integer,compare,size1,size2,else,if,property,equals,sort,term,subject,string,sub1,msg1,get,subject,string,sub2,msg2,get,subject,return,sub1,compare,to,sub2,throw,new,illegal,argument,exception,string,format,unknown,sort,term,s,property,to,string
