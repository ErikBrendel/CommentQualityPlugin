commented;modifiers;parameterAmount;loc;comment;code
false;public;2;12;;@Override public String generateUuid(MailEndpoint mailEndpoint, Message message) {     String answer = generateMessageIdHeader(message).     if (answer == null) {         answer = generateMessageHash(message).     }     // fallback and use message number     if (answer == null || ObjectHelper.isEmpty(answer)) {         answer = Integer.toString(message.getMessageNumber()).     }     return answer. }
false;private;1;17;;private String generateMessageIdHeader(Message message) {     LOG.trace("generateMessageIdHeader for msg: {}", message).     // there should be a Message-ID header with the UID     try {         String[] values = message.getHeader("Message-ID").         if (values != null && values.length > 0) {             String uid = values[0].             LOG.trace("Message-ID header found: {}", uid).             return uid.         }     } catch (MessagingException e) {         LOG.warn("Cannot read headers from mail message. This exception will be ignored.", e).     }     return null. }
false;public;1;23;;public String generateMessageHash(Message message) {     LOG.trace("generateMessageHash for msg: {}", message).     String uid = null.     // create an UID based on message headers on the message, that ought to be unique     StringBuilder buffer = new StringBuilder().     try {         Enumeration<?> it = message.getAllHeaders().         while (it.hasMoreElements()) {             Header header = (Header) it.nextElement().             buffer.append(header.getName()).append("=").append(header.getValue()).append("\n").         }         if (buffer.length() > 0) {             LOG.trace("Generating UID from the following:\n {}", buffer).             uid = UUID.nameUUIDFromBytes(buffer.toString().getBytes()).toString().         }     } catch (MessagingException e) {         LOG.warn("Cannot read headers from mail message. This exception will be ignored.", e).     }     return uid. }
