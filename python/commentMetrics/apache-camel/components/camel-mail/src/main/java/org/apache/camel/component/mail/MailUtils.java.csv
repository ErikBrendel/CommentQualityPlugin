# id;timestamp;commentText;codeText;commentWords;codeWords
MailUtils -> public static String replaceCharSet(String contentType, String charset);1307876483;Replaces the charset in the content-type__@param contentType the content-type_@param charset  the charset to replace, can be <tt>null</tt> to remove charset_@return the content-type with replaced charset;public static String replaceCharSet(String contentType, String charset) {_        boolean replaced = false__        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            part = part.trim()__            if (!part.startsWith("charset")) {_                part = part.trim()__                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append(part)__            } else if (charset != null) {_                _                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append("charset=")__                sb.append(charset)__                replaced = true__            }_        }__        _        if (!replaced && charset != null) {_            if (sb.length() > 0) {_                sb.append("_ ")__            }_            sb.append("charset=")__            sb.append(charset)__        }__        return sb.toString()__    };replaces,the,charset,in,the,content,type,param,content,type,the,content,type,param,charset,the,charset,to,replace,can,be,tt,null,tt,to,remove,charset,return,the,content,type,with,replaced,charset;public,static,string,replace,char,set,string,content,type,string,charset,boolean,replaced,false,string,builder,sb,new,string,builder,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,part,part,trim,if,part,starts,with,charset,part,part,trim,if,sb,length,0,sb,append,sb,append,part,else,if,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,replaced,true,if,replaced,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,return,sb,to,string
MailUtils -> public static String replaceCharSet(String contentType, String charset);1325694383;Replaces the charset in the content-type__@param contentType the content-type_@param charset  the charset to replace, can be <tt>null</tt> to remove charset_@return the content-type with replaced charset;public static String replaceCharSet(String contentType, String charset) {_        boolean replaced = false__        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (!part.startsWith("charset")) {_                part = part.trim()__                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append(part)__            } else if (charset != null) {_                _                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append("charset=")__                sb.append(charset)__                replaced = true__            }_        }__        _        if (!replaced && charset != null) {_            if (sb.length() > 0) {_                sb.append("_ ")__            }_            sb.append("charset=")__            sb.append(charset)__        }__        return sb.toString()__    };replaces,the,charset,in,the,content,type,param,content,type,the,content,type,param,charset,the,charset,to,replace,can,be,tt,null,tt,to,remove,charset,return,the,content,type,with,replaced,charset;public,static,string,replace,char,set,string,content,type,string,charset,boolean,replaced,false,string,builder,sb,new,string,builder,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,part,part,trim,if,sb,length,0,sb,append,sb,append,part,else,if,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,replaced,true,if,replaced,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,return,sb,to,string
MailUtils -> public static String replaceCharSet(String contentType, String charset);1468923824;Replaces the charset in the content-type__@param contentType the content-type_@param charset  the charset to replace, can be <tt>null</tt> to remove charset_@return the content-type with replaced charset;public static String replaceCharSet(String contentType, String charset) {_        boolean replaced = false__        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (!part.startsWith("charset")) {_                part = part.trim()__                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append(part)__            } else if (charset != null) {_                _                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append("charset=")__                sb.append(charset)__                replaced = true__            }_        }__        _        if (!replaced && charset != null) {_            if (sb.length() > 0) {_                sb.append("_ ")__            }_            sb.append("charset=")__            sb.append(charset)__        }__        return sb.toString()__    };replaces,the,charset,in,the,content,type,param,content,type,the,content,type,param,charset,the,charset,to,replace,can,be,tt,null,tt,to,remove,charset,return,the,content,type,with,replaced,charset;public,static,string,replace,char,set,string,content,type,string,charset,boolean,replaced,false,string,builder,sb,new,string,builder,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,part,part,trim,if,sb,length,0,sb,append,sb,append,part,else,if,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,replaced,true,if,replaced,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,return,sb,to,string
MailUtils -> public static String replaceCharSet(String contentType, String charset);1535969486;Replaces the charset in the content-type__@param contentType the content-type_@param charset  the charset to replace, can be <tt>null</tt> to remove charset_@return the content-type with replaced charset;public static String replaceCharSet(String contentType, String charset) {_        boolean replaced = false__        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (!part.startsWith("charset")) {_                part = part.trim()__                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append(part)__            } else if (charset != null) {_                _                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append("charset=")__                sb.append(charset)__                replaced = true__            }_        }__        _        if (!replaced && charset != null) {_            if (sb.length() > 0) {_                sb.append("_ ")__            }_            sb.append("charset=")__            sb.append(charset)__        }__        return sb.toString()__    };replaces,the,charset,in,the,content,type,param,content,type,the,content,type,param,charset,the,charset,to,replace,can,be,tt,null,tt,to,remove,charset,return,the,content,type,with,replaced,charset;public,static,string,replace,char,set,string,content,type,string,charset,boolean,replaced,false,string,builder,sb,new,string,builder,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,part,part,trim,if,sb,length,0,sb,append,sb,append,part,else,if,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,replaced,true,if,replaced,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,return,sb,to,string
MailUtils -> public static String replaceCharSet(String contentType, String charset);1540108161;Replaces the charset in the content-type__@param contentType the content-type_@param charset  the charset to replace, can be <tt>null</tt> to remove charset_@return the content-type with replaced charset;public static String replaceCharSet(String contentType, String charset) {_        boolean replaced = false__        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (!part.startsWith("charset")) {_                part = part.trim()__                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append(part)__            } else if (charset != null) {_                _                if (sb.length() > 0) {_                    sb.append("_ ")__                }_                sb.append("charset=")__                sb.append(charset)__                replaced = true__            }_        }__        _        if (!replaced && charset != null) {_            if (sb.length() > 0) {_                sb.append("_ ")__            }_            sb.append("charset=")__            sb.append(charset)__        }__        return sb.toString()__    };replaces,the,charset,in,the,content,type,param,content,type,the,content,type,param,charset,the,charset,to,replace,can,be,tt,null,tt,to,remove,charset,return,the,content,type,with,replaced,charset;public,static,string,replace,char,set,string,content,type,string,charset,boolean,replaced,false,string,builder,sb,new,string,builder,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,part,part,trim,if,sb,length,0,sb,append,sb,append,part,else,if,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,replaced,true,if,replaced,charset,null,if,sb,length,0,sb,append,sb,append,charset,sb,append,charset,return,sb,to,string
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1209291811;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1209311485;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1209522075;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1209814362;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1209821985;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1210058722;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1210406876;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1238598020;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1245903785;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1297975937;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1307876483;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1325694383;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1468923824;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1535969486;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static int getDefaultPortForProtocol(final String protocol);1540108161;Returns the default port for a given protocol._<p>_If a protocol could not successfully be determined the default port number for SMTP protocol is returned.__@param protocol the protocol_@return the default port;public static int getDefaultPortForProtocol(final String protocol) {_        int port = DEFAULT_PORT_SMTP___        if (protocol != null) {_            if (protocol.equalsIgnoreCase(PROTOCOL_IMAP)) {_                port = DEFAULT_PORT_IMAP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_IMAPS)) {_                port = DEFAULT_PORT_IMAPS__            } else if (protocol.equalsIgnoreCase(PROTOCOL_NNTP)) {_                port = DEFAULT_PORT_NNTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3)) {_                port = DEFAULT_PORT_POP3__            } else if (protocol.equalsIgnoreCase(PROTOCOL_POP3S)) {_                port = DEFAULT_PORT_POP3S__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTP)) {_                port = DEFAULT_PORT_SMTP__            } else if (protocol.equalsIgnoreCase(PROTOCOL_SMTPS)) {_                port = DEFAULT_PORT_SMTPS__            } else {_                port = DEFAULT_PORT_SMTP__            }_        }__        return port__    };returns,the,default,port,for,a,given,protocol,p,if,a,protocol,could,not,successfully,be,determined,the,default,port,number,for,smtp,protocol,is,returned,param,protocol,the,protocol,return,the,default,port;public,static,int,get,default,port,for,protocol,final,string,protocol,int,port,if,protocol,null,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,if,protocol,equals,ignore,case,port,else,port,return,port
MailUtils -> public static String padContentType(String contentType);1307876483;Pads the content-type so it has a space after semi colon that separate pairs._<p/>_This is needed as some mail servers will choke otherwise__@param contentType the content type_@return the padded content type;public static String padContentType(String contentType) {_        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            if (ObjectHelper.isNotEmpty(part)) {_                part = part.trim()__                sb.append(part)__                if (i < parts.length - 1) {_                    sb.append("_ ")__                }_            }_        }_        return sb.toString()__    };pads,the,content,type,so,it,has,a,space,after,semi,colon,that,separate,pairs,p,this,is,needed,as,some,mail,servers,will,choke,otherwise,param,content,type,the,content,type,return,the,padded,content,type;public,static,string,pad,content,type,string,content,type,string,builder,sb,new,string,builder,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,if,object,helper,is,not,empty,part,part,part,trim,sb,append,part,if,i,parts,length,1,sb,append,return,sb,to,string
MailUtils -> public static String padContentType(String contentType);1325694383;Pads the content-type so it has a space after semi colon that separate pairs._<p/>_This is needed as some mail servers will choke otherwise__@param contentType the content type_@return the padded content type;public static String padContentType(String contentType) {_        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            if (ObjectHelper.isNotEmpty(part)) {_                part = part.trim()__                sb.append(part)__                if (i < parts.length - 1) {_                    sb.append("_ ")__                }_            }_        }_        return sb.toString()__    };pads,the,content,type,so,it,has,a,space,after,semi,colon,that,separate,pairs,p,this,is,needed,as,some,mail,servers,will,choke,otherwise,param,content,type,the,content,type,return,the,padded,content,type;public,static,string,pad,content,type,string,content,type,string,builder,sb,new,string,builder,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,if,object,helper,is,not,empty,part,part,part,trim,sb,append,part,if,i,parts,length,1,sb,append,return,sb,to,string
MailUtils -> public static String padContentType(String contentType);1468923824;Pads the content-type so it has a space after semi colon that separate pairs._<p/>_This is needed as some mail servers will choke otherwise__@param contentType the content type_@return the padded content type;public static String padContentType(String contentType) {_        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            if (ObjectHelper.isNotEmpty(part)) {_                part = part.trim()__                sb.append(part)__                if (i < parts.length - 1) {_                    sb.append("_ ")__                }_            }_        }_        return sb.toString()__    };pads,the,content,type,so,it,has,a,space,after,semi,colon,that,separate,pairs,p,this,is,needed,as,some,mail,servers,will,choke,otherwise,param,content,type,the,content,type,return,the,padded,content,type;public,static,string,pad,content,type,string,content,type,string,builder,sb,new,string,builder,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,if,object,helper,is,not,empty,part,part,part,trim,sb,append,part,if,i,parts,length,1,sb,append,return,sb,to,string
MailUtils -> public static String padContentType(String contentType);1535969486;Pads the content-type so it has a space after semi colon that separate pairs._<p/>_This is needed as some mail servers will choke otherwise__@param contentType the content type_@return the padded content type;public static String padContentType(String contentType) {_        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            if (ObjectHelper.isNotEmpty(part)) {_                part = part.trim()__                sb.append(part)__                if (i < parts.length - 1) {_                    sb.append("_ ")__                }_            }_        }_        return sb.toString()__    };pads,the,content,type,so,it,has,a,space,after,semi,colon,that,separate,pairs,p,this,is,needed,as,some,mail,servers,will,choke,otherwise,param,content,type,the,content,type,return,the,padded,content,type;public,static,string,pad,content,type,string,content,type,string,builder,sb,new,string,builder,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,if,object,helper,is,not,empty,part,part,part,trim,sb,append,part,if,i,parts,length,1,sb,append,return,sb,to,string
MailUtils -> public static String padContentType(String contentType);1540108161;Pads the content-type so it has a space after semi colon that separate pairs._<p/>_This is needed as some mail servers will choke otherwise__@param contentType the content type_@return the padded content type;public static String padContentType(String contentType) {_        StringBuilder sb = new StringBuilder()__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            if (ObjectHelper.isNotEmpty(part)) {_                part = part.trim()__                sb.append(part)__                if (i < parts.length - 1) {_                    sb.append("_ ")__                }_            }_        }_        return sb.toString()__    };pads,the,content,type,so,it,has,a,space,after,semi,colon,that,separate,pairs,p,this,is,needed,as,some,mail,servers,will,choke,otherwise,param,content,type,the,content,type,return,the,padded,content,type;public,static,string,pad,content,type,string,content,type,string,builder,sb,new,string,builder,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,if,object,helper,is,not,empty,part,part,part,trim,sb,append,part,if,i,parts,length,1,sb,append,return,sb,to,string
MailUtils -> public static String dumpMessage(Message message) throws MessagingException;1209814362;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped_@throws MessagingException can be thrown by the Mail API;public static String dumpMessage(Message message) throws MessagingException {_        StringBuilder sb = new StringBuilder()___        int number = message.getMessageNumber()__        sb.append("messageNumber=[").append(number).append("]")___        Address[] from = message.getFrom()__        if (from != null) {_            for (Address adr : from) {_                sb.append(", from=[").append(adr).append("]")__            }_        }__        Address[] to = message.getRecipients(Message.RecipientType.TO)__        if (to != null) {_            for (Address adr : to) {_                sb.append(", to=[").append(adr).append("]")__            }_        }__        _        String subject = message.getSubject()__        if (subject != null) {_            sb.append(", subject=[").append(subject).append("]")__        }__        Date sentDate = message.getSentDate()__        if (sentDate != null) {_            sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__        }__        Date receivedDate = message.getReceivedDate()__        if (receivedDate != null) {_            sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__        }__        return sb.toString()__    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped,throws,messaging,exception,can,be,thrown,by,the,mail,api;public,static,string,dump,message,message,message,throws,messaging,exception,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string
MailUtils -> public static String dumpMessage(Message message) throws MessagingException;1209821985;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped_@throws MessagingException can be thrown by the Mail API;public static String dumpMessage(Message message) throws MessagingException {_        StringBuilder sb = new StringBuilder()___        int number = message.getMessageNumber()__        sb.append("messageNumber=[").append(number).append("]")___        Address[] from = message.getFrom()__        if (from != null) {_            for (Address adr : from) {_                sb.append(", from=[").append(adr).append("]")__            }_        }__        Address[] to = message.getRecipients(Message.RecipientType.TO)__        if (to != null) {_            for (Address adr : to) {_                sb.append(", to=[").append(adr).append("]")__            }_        }__        String subject = message.getSubject()__        if (subject != null) {_            sb.append(", subject=[").append(subject).append("]")__        }__        Date sentDate = message.getSentDate()__        if (sentDate != null) {_            sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__        }__        Date receivedDate = message.getReceivedDate()__        if (receivedDate != null) {_            sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__        }__        return sb.toString()__    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped,throws,messaging,exception,can,be,thrown,by,the,mail,api;public,static,string,dump,message,message,message,throws,messaging,exception,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string
MailUtils -> public static String dumpMessage(Message message) throws MessagingException;1210058722;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped_@throws MessagingException can be thrown by the Mail API;public static String dumpMessage(Message message) throws MessagingException {_        StringBuilder sb = new StringBuilder()___        int number = message.getMessageNumber()__        sb.append("messageNumber=[").append(number).append("]")___        Address[] from = message.getFrom()__        if (from != null) {_            for (Address adr : from) {_                sb.append(", from=[").append(adr).append("]")__            }_        }__        Address[] to = message.getRecipients(Message.RecipientType.TO)__        if (to != null) {_            for (Address adr : to) {_                sb.append(", to=[").append(adr).append("]")__            }_        }__        String subject = message.getSubject()__        if (subject != null) {_            sb.append(", subject=[").append(subject).append("]")__        }__        Date sentDate = message.getSentDate()__        if (sentDate != null) {_            sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__        }__        Date receivedDate = message.getReceivedDate()__        if (receivedDate != null) {_            sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__        }__        return sb.toString()__    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped,throws,messaging,exception,can,be,thrown,by,the,mail,api;public,static,string,dump,message,message,message,throws,messaging,exception,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string
MailUtils -> public static String getCharSetFromContentType(String contentType);1307876483;Gets the charset from the content-type__@param contentType the content-type_@return the charset, or <tt>null</tt> if no charset existed;public static String getCharSetFromContentType(String contentType) {_        if (contentType == null) {_            return null__        }__        String[] parts = contentType.split("_")__        for (int i = 0_ i < parts.length_ i++) {_            String part = parts[i]__            part = part.trim()__            if (part.startsWith("charset")) {_                return ObjectHelper.after(part, "charset=")__            }_        }_        return null__    };gets,the,charset,from,the,content,type,param,content,type,the,content,type,return,the,charset,or,tt,null,tt,if,no,charset,existed;public,static,string,get,char,set,from,content,type,string,content,type,if,content,type,null,return,null,string,parts,content,type,split,for,int,i,0,i,parts,length,i,string,part,parts,i,part,part,trim,if,part,starts,with,charset,return,object,helper,after,part,charset,return,null
MailUtils -> public static String getCharSetFromContentType(String contentType);1325694383;Gets the charset from the content-type__@param contentType the content-type_@return the charset, or <tt>null</tt> if no charset existed;public static String getCharSetFromContentType(String contentType) {_        if (contentType == null) {_            return null__        }__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (part.startsWith("charset")) {_                return ObjectHelper.after(part, "charset=")__            }_        }_        return null__    };gets,the,charset,from,the,content,type,param,content,type,the,content,type,return,the,charset,or,tt,null,tt,if,no,charset,existed;public,static,string,get,char,set,from,content,type,string,content,type,if,content,type,null,return,null,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,return,object,helper,after,part,charset,return,null
MailUtils -> public static String getCharSetFromContentType(String contentType);1468923824;Gets the charset from the content-type__@param contentType the content-type_@return the charset, or <tt>null</tt> if no charset existed;public static String getCharSetFromContentType(String contentType) {_        if (contentType == null) {_            return null__        }__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (part.startsWith("charset")) {_                return ObjectHelper.after(part, "charset=")__            }_        }_        return null__    };gets,the,charset,from,the,content,type,param,content,type,the,content,type,return,the,charset,or,tt,null,tt,if,no,charset,existed;public,static,string,get,char,set,from,content,type,string,content,type,if,content,type,null,return,null,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,return,object,helper,after,part,charset,return,null
MailUtils -> public static String getCharSetFromContentType(String contentType);1535969486;Gets the charset from the content-type__@param contentType the content-type_@return the charset, or <tt>null</tt> if no charset existed;public static String getCharSetFromContentType(String contentType) {_        if (contentType == null) {_            return null__        }__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (part.startsWith("charset")) {_                return StringHelper.after(part, "charset=")__            }_        }_        return null__    };gets,the,charset,from,the,content,type,param,content,type,the,content,type,return,the,charset,or,tt,null,tt,if,no,charset,existed;public,static,string,get,char,set,from,content,type,string,content,type,if,content,type,null,return,null,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,return,string,helper,after,part,charset,return,null
MailUtils -> public static String getCharSetFromContentType(String contentType);1540108161;Gets the charset from the content-type__@param contentType the content-type_@return the charset, or <tt>null</tt> if no charset existed;public static String getCharSetFromContentType(String contentType) {_        if (contentType == null) {_            return null__        }__        String[] parts = contentType.split("_")__        for (String part : parts) {_            part = part.trim()__            if (part.startsWith("charset")) {_                return StringHelper.after(part, "charset=")__            }_        }_        return null__    };gets,the,charset,from,the,content,type,param,content,type,the,content,type,return,the,charset,or,tt,null,tt,if,no,charset,existed;public,static,string,get,char,set,from,content,type,string,content,type,if,content,type,null,return,null,string,parts,content,type,split,for,string,part,parts,part,part,trim,if,part,starts,with,charset,return,string,helper,after,part,charset,return,null
MailUtils -> public static String dumpMessage(Message message);1210406876;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }__    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1238598020;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }__    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1245903785;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1297975937;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1307876483;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1325694383;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1468923824;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1535969486;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
MailUtils -> public static String dumpMessage(Message message);1540108161;Gets a log dump of the given message that can be used for tracing etc.__@param message the Mail message_@return a log string with important fields dumped;public static String dumpMessage(Message message) {_        if (message == null) {_            return "null"__        }_        _        try {_            StringBuilder sb = new StringBuilder()___            int number = message.getMessageNumber()__            sb.append("messageNumber=[").append(number).append("]")___            Address[] from = message.getFrom()__            if (from != null) {_                for (Address adr : from) {_                    sb.append(", from=[").append(adr).append("]")__                }_            }__            Address[] to = message.getRecipients(Message.RecipientType.TO)__            if (to != null) {_                for (Address adr : to) {_                    sb.append(", to=[").append(adr).append("]")__                }_            }__            String subject = message.getSubject()__            if (subject != null) {_                sb.append(", subject=[").append(subject).append("]")__            }__            Date sentDate = message.getSentDate()__            if (sentDate != null) {_                sb.append(", sentDate=[").append(DateFormat.getDateTimeInstance().format(sentDate)).append("]")__            }__            Date receivedDate = message.getReceivedDate()__            if (receivedDate != null) {_                sb.append(", receivedDate=[").append(DateFormat.getDateTimeInstance().format(receivedDate)).append("]")__            }__            return sb.toString()__        } catch (MessagingException e) {_            _            return message.toString()__        }_    };gets,a,log,dump,of,the,given,message,that,can,be,used,for,tracing,etc,param,message,the,mail,message,return,a,log,string,with,important,fields,dumped;public,static,string,dump,message,message,message,if,message,null,return,null,try,string,builder,sb,new,string,builder,int,number,message,get,message,number,sb,append,message,number,append,number,append,address,from,message,get,from,if,from,null,for,address,adr,from,sb,append,from,append,adr,append,address,to,message,get,recipients,message,recipient,type,to,if,to,null,for,address,adr,to,sb,append,to,append,adr,append,string,subject,message,get,subject,if,subject,null,sb,append,subject,append,subject,append,date,sent,date,message,get,sent,date,if,sent,date,null,sb,append,sent,date,append,date,format,get,date,time,instance,format,sent,date,append,date,received,date,message,get,received,date,if,received,date,null,sb,append,received,date,append,date,format,get,date,time,instance,format,received,date,append,return,sb,to,string,catch,messaging,exception,e,return,message,to,string
