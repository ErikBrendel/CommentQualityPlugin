commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     super.setUp(). }
false;public;0;15;;@Test public void testCommitOnCompletion() throws Exception {     Mailbox mailbox = Mailbox.get("jones@localhost").     assertEquals(5, mailbox.size()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hi Message 0", "Hi Message 1", "Hi Message 2", "Hi Message 3", "Hi Message 4").     mock.assertIsSatisfied().     // wait a bit because delete is on completion     Thread.sleep(500).     assertEquals(0, mailbox.size()). }
false;private;0;20;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("pop3").     store.connect("localhost", 25, "jones", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge().     // inserts 5 new messages     Message[] messages = new Message[5].     for (int i = 0. i < 5. i++) {         messages[i] = new MimeMessage(sender.getSession()).         messages[i].setHeader("Message-ID", "" + i).         messages[i].setText("Message " + i).     }     folder.appendMessages(messages).     folder.close(true). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // now f*** up and create a new OUT Message (without propagating the IN message)     String msg = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Hi " + msg). }
false;public;0;11;;public void configure() throws Exception {     from("pop3://jones@localhost?password=secret&delete=true&consumer.initialDelay=100&consumer.delay=100").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // now f*** up and create a new OUT Message (without propagating the IN message)             String msg = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Hi " + msg).         }     }).to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://jones@localhost?password=secret&delete=true&consumer.initialDelay=100&consumer.delay=100").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // now f*** up and create a new OUT Message (without propagating the IN message)                     String msg = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Hi " + msg).                 }             }).to("mock:result").         }     }. }
