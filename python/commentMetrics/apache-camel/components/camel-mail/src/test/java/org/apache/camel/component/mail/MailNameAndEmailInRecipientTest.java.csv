commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSendWithNameAndEmailInRecipient() throws Exception {     Mailbox.clearAll().     // START SNIPPET: e1     Map<String, Object> headers = new HashMap<>().     headers.put("to", "Claus Ibsen <davsclaus@localhost>").     headers.put("cc", "James Strachan <jstrachan@localhost>").     assertMailbox("davsclaus").     assertMailbox("jstrachan").     template.sendBodyAndHeaders("smtp://localhost", "Hello World", headers).     // END SNIPPET: e1     assertMockEndpointsSatisfied(). }
false;private;1;6;;private void assertMailbox(String name) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:" + name).     mock.expectedBodiesReceived("Hello World").     mock.message(0).header("to").isEqualTo("Claus Ibsen <davsclaus@localhost>").     mock.message(0).header("cc").isEqualTo("James Strachan <jstrachan@localhost>"). }
false;public;0;5;;public void configure() throws Exception {     from("pop3://davsclaus@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:davsclaus").     from("pop3://jstrachan@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:jstrachan"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://davsclaus@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:davsclaus").             from("pop3://jstrachan@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:jstrachan").         }     }. }
