commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     super.setUp(). }
false;public;0;7;;@Test public void testConsumeUnsupportedCharset() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     mock.assertIsSatisfied(). }
false;private;0;17;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("imap").     store.connect("localhost", 25, "jones", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge().     Message[] msg = new Message[1].     MimeMessage mime = new MimeMessage(sender.getSession()).     mime.setContent("Bye World", "text/plain. charset=ThisIsNotAKnownCharset").     msg[0] = mime.     folder.appendMessages(msg).     folder.close(true). }
false;public;0;3;;public void configure() throws Exception {     from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&ignoreUnsupportedCharset=true").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&ignoreUnsupportedCharset=true").to("mock:result").         }     }. }
