commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testSendWithRecipientsInHeaders() throws Exception {     Mailbox.clearAll().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("to", "claus@localhost").     mock.expectedHeaderReceived("cc", "willem@localhost").     mock.expectedHeaderReceived("bcc", "hadrian@localhost").     Map<String, Object> headers = new HashMap<>().     headers.put("to", "claus@localhost").     headers.put("cc", "willem@localhost").     headers.put("bcc", "hadrian@localhost").     template.sendBodyAndHeaders("smtp://james3@localhost", "Hello World", headers).     mock.assertIsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from("pop3://claus@localhost?to=someone@outhere.com&cc=none@world.com&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://claus@localhost?to=someone@outhere.com&cc=none@world.com&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
