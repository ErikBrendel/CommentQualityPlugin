commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAdditionalMailProperties() throws Exception {     // clear mailbox     Mailbox.clearAll().     MailEndpoint endpoint = context.getEndpoint("pop3://localhost?username=james&mail.pop3.forgettopheaders=true&consumer.initialDelay=100&consumer.delay=100", MailEndpoint.class).     Properties prop = endpoint.getConfiguration().getAdditionalJavaMailProperties().     assertEquals("true", prop.get("mail.pop3.forgettopheaders")). }
false;public;0;14;;@Test public void testConsumeWithAdditionalProperties() throws Exception {     // clear mailbox     Mailbox.clearAll().     MockEndpoint mock = getMockEndpoint("mock:result").     template.sendBodyAndHeader("smtp://james@localhost", "Hello james how are you?", "subject", "Hello").     mock.expectedBodiesReceived("Hello james how are you?").     mock.expectedHeaderReceived("subject", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("pop3://james@localhost?mail.pop3.forgettopheaders=true&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("pop3://james@localhost?mail.pop3.forgettopheaders=true&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
