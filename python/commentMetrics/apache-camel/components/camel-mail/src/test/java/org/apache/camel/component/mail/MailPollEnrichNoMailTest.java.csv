commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     super.setUp(). }
false;public;0;9;;@Test public void testPollEnrich() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.message(0).body().isNull().     template.sendBody("direct:start", "").     mock.assertIsSatisfied(). }
false;public;0;9;;@Test public void testPollEnrichNullBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.message(0).body().isNull().     template.sendBody("direct:start", null).     mock.assertIsSatisfied(). }
false;private;0;10;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("pop3").     store.connect("localhost", 25, "bill", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").pollEnrich("pop3://bill@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100", 0).to("log:mail", "mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").pollEnrich("pop3://bill@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100", 0).to("log:mail", "mock:result").         }     }. }
