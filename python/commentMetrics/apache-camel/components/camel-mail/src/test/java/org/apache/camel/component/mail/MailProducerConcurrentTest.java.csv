commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testNoConcurrentProducers() throws Exception {     doSendMessages(1, 1). }
false;public;0;4;;@Test public void testConcurrentProducers() throws Exception {     doSendMessages(10, 5). }
false;public;0;5;;public Object call() throws Exception {     template.sendBodyAndHeader("direct:start", "Message " + index, "To", "someone@localhost").     latch.countDown().     return null. }
false;private;2;39;;private void doSendMessages(int files, int poolSize) throws Exception {     Mailbox.clearAll().     NotifyBuilder builder = new NotifyBuilder(context).whenDone(files).create().     getMockEndpoint("mock:result").expectedMessageCount(files).     getMockEndpoint("mock:result").expectsNoDuplicates(body()).     final CountDownLatch latch = new CountDownLatch(files).     ExecutorService executor = Executors.newFixedThreadPool(poolSize).     for (int i = 0. i < files. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBodyAndHeader("direct:start", "Message " + index, "To", "someone@localhost").                 latch.countDown().                 return null.             }         }).     }     // wait first for all the exchanges above to be thoroughly sent asynchronously     assertTrue(latch.await(5, TimeUnit.SECONDS)).     assertMockEndpointsSatisfied().     assertTrue(builder.matchesMockWaitTime()).     Mailbox box = Mailbox.get("someone@localhost").     assertEquals(files, box.size()).     // as we use concurrent producers the mails can arrive out of order     Set<Object> bodies = new HashSet<>().     for (int i = 0. i < files. i++) {         bodies.add(box.get(i).getContent()).     }     assertEquals("There should be " + files + " unique mails", files, bodies.size()).     executor.shutdownNow(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("smtp://camel@localhost", "mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("smtp://camel@localhost", "mock:result").         }     }. }
