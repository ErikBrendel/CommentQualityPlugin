commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&ignoreUnsupportedCharset=true").to("mock:result"). }
false;public;0;28;;@Test public void testSencUnsupportedCharset() throws Exception {     Mailbox.clearAll().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&ignoreUnsupportedCharset=true").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World", "Bye World").     mock.allMessages().header("Content-Type").isEqualTo("text/plain").     Map<String, Object> headers = new HashMap<>().     headers.put("To", "jones@localhost").     headers.put("Content-Type", "text/plain").     template.sendBodyAndHeaders("smtp://localhost?ignoreUnsupportedCharset=true", "Hello World", headers).     headers.clear().     headers.put("To", "jones@localhost").     headers.put("Content-Type", "text/plain. charset=ansi_x3.110-1983").     template.sendBodyAndHeaders("smtp://localhost?ignoreUnsupportedCharset=true", "Bye World", headers).     mock.assertIsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&ignoreUnsupportedCharset=false").to("mock:result"). }
false;public;0;33;;@Test public void testSencUnsupportedCharsetDisabledOption() throws Exception {     Mailbox.clearAll().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&ignoreUnsupportedCharset=false").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.allMessages().header("Content-Type").isEqualTo("text/plain").     Map<String, Object> headers = new HashMap<>().     headers.put("To", "jones@localhost").     headers.put("Content-Type", "text/plain").     template.sendBodyAndHeaders("smtp://localhost?ignoreUnsupportedCharset=false", "Hello World", headers).     headers.clear().     headers.put("To", "jones@localhost").     headers.put("Content-Type", "text/plain. charset=XXX").     try {         template.sendBodyAndHeaders("smtp://localhost?ignoreUnsupportedCharset=false", "Bye World", headers).         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(UnsupportedEncodingException.class, e.getCause()).     }     mock.assertIsSatisfied(). }
