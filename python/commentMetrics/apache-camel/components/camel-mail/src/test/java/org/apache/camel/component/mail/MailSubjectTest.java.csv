commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testMailSubject() throws Exception {     Mailbox.clearAll().     String body = "Hello Claus.\nYes it does.\n\nRegards James.".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("subject", subject).     mock.expectedBodiesReceived(body).     template.sendBody("direct:a", body).     mock.assertIsSatisfied().     assertFalse("Should not have attachements", mock.getExchanges().get(0).getIn().hasAttachments()). }
false;public;0;7;;public void configure() throws Exception {     // START SNIPPET: e1     from("direct:a").setHeader("subject", constant(subject)).to("smtp://james2@localhost").     // END SNIPPET: e1     from("pop3://localhost?username=james2&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             from("direct:a").setHeader("subject", constant(subject)).to("smtp://james2@localhost").             // END SNIPPET: e1             from("pop3://localhost?username=james2&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
