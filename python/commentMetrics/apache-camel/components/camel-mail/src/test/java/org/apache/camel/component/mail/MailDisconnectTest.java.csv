commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testDisconnect() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(5).     // send 5 mails with some delay so we do multiple polls with disconnect between     template.sendBodyAndHeader("smtp://jones@localhost", "A Bla bla", "Subject", "Hello A").     template.sendBodyAndHeader("smtp://jones@localhost", "B Bla bla", "Subject", "Hello B").     Thread.sleep(500).     template.sendBodyAndHeader("smtp://jones@localhost", "C Bla bla", "Subject", "Hello C").     Thread.sleep(500).     template.sendBodyAndHeader("smtp://jones@localhost", "D Bla bla", "Subject", "Hello D").     Thread.sleep(500).     template.sendBodyAndHeader("smtp://jones@localhost", "E Bla bla", "Subject", "Hello E").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from("pop3://jones@localhost?password=secret&disconnect=true&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://jones@localhost?password=secret&disconnect=true&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
