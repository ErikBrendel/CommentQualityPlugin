commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testLongMailSubject() throws Exception {     Mailbox.clearAll().     // The email subject is >76 chars and will get MIME folded.     template.sendBody("direct:longSubject", "").     // When mimeDecodeHeaders=true is used, expect the received subject to be MIME unfolded.     MockEndpoint mockDecoded = getMockEndpoint("mock:decoded").     mockDecoded.expectedMessageCount(1).     mockDecoded.expectedHeaderReceived("subject", longSubject).     mockDecoded.setResultWaitTime(10000).     mockDecoded.assertIsSatisfied().     // When mimeDecodeHeaders=false or missing, expect the received subject to be MIME folded.     MockEndpoint mockPlain = getMockEndpoint("mock:plain").     mockPlain.expectedMessageCount(1).     mockPlain.expectedHeaderReceived("subject", foldedLongSubject).     mockPlain.setResultWaitTime(10000).     mockPlain.assertIsSatisfied(). }
false;public;0;19;;@Test public void testNonAsciiMailSubject() throws Exception {     Mailbox.clearAll().     // The email subject contains non-ascii characters and will be encoded.     template.sendBody("direct:nonAsciiSubject", "").     // When mimeDecodeHeaders=true is used, expect the received subject to be MIME encoded.     MockEndpoint mockDecoded = getMockEndpoint("mock:decoded").     mockDecoded.expectedMessageCount(1).     mockDecoded.expectedHeaderReceived("subject", nonAsciiSubject).     mockDecoded.assertIsSatisfied().     // When mimeDecodeHeaders=false or missing, expect the received subject to be MIME encoded.     MockEndpoint mockPlain = getMockEndpoint("mock:plain").     mockPlain.expectedMessageCount(1).     mockPlain.expectedHeaderReceived("subject", encodedNonAsciiSubject).     mockPlain.assertIsSatisfied(). }
false;public;0;15;;public void configure() throws Exception {     from("direct:longSubject").setHeader("subject", constant(longSubject)).to("smtp://plain@localhost", "smtp://decoded@localhost").     from("direct:nonAsciiSubject").setHeader("subject", constant(nonAsciiSubject)).to("smtp://plain@localhost", "smtp://decoded@localhost").     from("pop3://localhost?username=plain&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:plain").     from("pop3://localhost?username=decoded&password=secret&consumer.initialDelay=100&consumer.delay=100&mimeDecodeHeaders=true").to("mock:decoded"). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:longSubject").setHeader("subject", constant(longSubject)).to("smtp://plain@localhost", "smtp://decoded@localhost").             from("direct:nonAsciiSubject").setHeader("subject", constant(nonAsciiSubject)).to("smtp://plain@localhost", "smtp://decoded@localhost").             from("pop3://localhost?username=plain&password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:plain").             from("pop3://localhost?username=decoded&password=secret&consumer.initialDelay=100&consumer.delay=100&mimeDecodeHeaders=true").to("mock:decoded").         }     }. }
