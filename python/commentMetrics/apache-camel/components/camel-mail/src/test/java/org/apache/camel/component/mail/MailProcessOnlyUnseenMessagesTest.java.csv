commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     super.setUp(). }
false;public;0;18;;@Test public void testProcessOnlyUnseenMessages() throws Exception {     sendBody("direct:a", "Message 3").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Message 3").     mock.assertIsSatisfied().     // reset mock so we can make new assertions     mock.reset().     // send a new message, now we should only receive this new massages as all the others has been SEEN     sendBody("direct:a", "Message 4").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Message 4").     mock.assertIsSatisfied(). }
false;private;0;23;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("imap").     store.connect("localhost", 25, "claus", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge().     // inserts two messages with the SEEN flag     Message[] msg = new Message[2].     msg[0] = new MimeMessage(sender.getSession()).     msg[0].setText("Message 1").     msg[0].setHeader("Message-ID", "0").     msg[0].setFlag(Flags.Flag.SEEN, true).     msg[1] = new MimeMessage(sender.getSession()).     msg[1].setText("Message 2").     msg[0].setHeader("Message-ID", "1").     msg[1].setFlag(Flags.Flag.SEEN, true).     folder.appendMessages(msg).     folder.close(true). }
false;public;0;5;;public void configure() throws Exception {     from("direct:a").to("smtp://claus@localhost").     from("imap://localhost?username=claus&password=secret&unseen=true&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("smtp://claus@localhost").             from("imap://localhost?username=claus&password=secret&unseen=true&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
