commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testIdempotent() throws Exception {     assertEquals(1, myRepo.getCacheSize()).     MockEndpoint mock = getMockEndpoint("mock:result").     // no 3 is already in the idempotent repo     mock.expectedBodiesReceived("Message 0", "Message 1", "Message 2", "Message 4").     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     // windows need a little slack     Thread.sleep(500).     assertEquals(0, Mailbox.get("jones@localhost").getNewMessageCount()).     // they are not removed so we should have all 5 in the repo now     assertEquals(5, myRepo.getCacheSize()). }
false;public;0;5;;public void configure() throws Exception {     from("imap://jones@localhost?password=secret&idempotentRepository=#myRepo&idempotentRepositoryRemoveOnCommit=false&consumer.initialDelay=100&consumer.delay=100").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("imap://jones@localhost?password=secret&idempotentRepository=#myRepo&idempotentRepositoryRemoveOnCommit=false&consumer.initialDelay=100&consumer.delay=100").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
