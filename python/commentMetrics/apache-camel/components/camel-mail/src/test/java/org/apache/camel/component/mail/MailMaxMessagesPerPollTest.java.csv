commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     super.setUp(). }
false;public;0;20;;@Test public void testBatchConsumer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.setResultWaitTime(2000).     mock.expectedMessageCount(3).     mock.message(0).body().isEqualTo("Message 0").     mock.message(1).body().isEqualTo("Message 1").     mock.message(2).body().isEqualTo("Message 2").     mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 3).     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedMessageCount(2).     mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 2).     mock.message(0).body().isEqualTo("Message 3").     mock.message(1).body().isEqualTo("Message 4").     assertMockEndpointsSatisfied(). }
false;private;0;20;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("pop3").     store.connect("localhost", 25, "jones", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge().     // inserts 5 new messages     Message[] messages = new Message[5].     for (int i = 0. i < 5. i++) {         messages[i] = new MimeMessage(sender.getSession()).         messages[i].setHeader("Message-ID", "" + i).         messages[i].setText("Message " + i).     }     folder.appendMessages(messages).     folder.close(true). }
false;public;0;4;;public void configure() throws Exception {     from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&maxMessagesPerPoll=3" + "&delete=true").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://jones@localhost?password=secret&consumer.initialDelay=100&consumer.delay=100&maxMessagesPerPoll=3" + "&delete=true").to("mock:result").         }     }. }
