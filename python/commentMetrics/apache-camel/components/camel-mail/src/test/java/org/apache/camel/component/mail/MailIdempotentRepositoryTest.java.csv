commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myRepo", myRepo).     return jndi. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     super.setUp(). }
false;public;0;18;;@Test public void testIdempotent() throws Exception {     assertEquals(0, myRepo.getCacheSize()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(5).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     // windows need a little slack     Thread.sleep(500).     assertEquals(0, Mailbox.get("jones@localhost").getNewMessageCount()).     // they get deleted after processing by default so we should be back to 0     assertEquals(0, myRepo.getCacheSize()). }
false;private;0;20;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("pop3").     store.connect("localhost", 25, "jones", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge().     // inserts 5 new messages     Message[] messages = new Message[5].     for (int i = 0. i < 5. i++) {         messages[i] = new MimeMessage(sender.getSession()).         messages[i].setText("Message " + i).         messages[i].setHeader("Message-ID", "myuid-" + i).     }     folder.appendMessages(messages).     folder.close(true). }
false;public;0;4;;public void configure() throws Exception {     from("imap://jones@localhost?password=secret&idempotentRepository=#myRepo&consumer.initialDelay=100&consumer.delay=100").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("imap://jones@localhost?password=secret&idempotentRepository=#myRepo&consumer.initialDelay=100&consumer.delay=100").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
