commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     prepareMailbox().     action = new TestPostProcessAction().     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("postProcessAction", action).     return jndi. }
false;public;0;11;;@Test public void testActionCalled() throws Exception {     Mailbox mailbox = Mailbox.get("bill@localhost").     assertEquals(1, mailbox.size()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("TestText").     assertMockEndpointsSatisfied().     waitForActionCalled(). }
false;private;0;11;;private void waitForActionCalled() throws InterruptedException {     // Wait for a maximum of 500 ms for the action to be called     for (int i = 0. i < 50. i++) {         if (action.hasBeenCalled()) {             break.         }         LOG.debug("Sleeping for 10 millis to wait for action call").         Thread.sleep(10).     }     assertEquals(true, action.hasBeenCalled()). }
false;private;0;20;;private void prepareMailbox() throws Exception {     // connect to mailbox     Mailbox.clearAll().     JavaMailSender sender = new DefaultJavaMailSender().     Store store = sender.getSession().getStore("pop3").     store.connect("localhost", 25, "bill", "secret").     Folder folder = store.getFolder("INBOX").     folder.open(Folder.READ_WRITE).     folder.expunge().     // inserts 1 new message     Message[] messages = new Message[1].     messages[0] = new MimeMessage(sender.getSession()).     messages[0].setSubject("TestSubject").     messages[0].setHeader("Message-ID", "0").     messages[0].setText("TestText").     folder.appendMessages(messages).     folder.close(true). }
false;public;0;3;;public void configure() throws Exception {     from("pop3://bill@localhost?password=secret&postProcessAction=#postProcessAction&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://bill@localhost?password=secret&postProcessAction=#postProcessAction&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
false;public;1;9;;@Override public void process(Folder folder) throws Exception {     // Assert that we are looking at the correct folder with our message     final Message[] messages = folder.getMessages().     assertEquals(1, messages.length).     assertEquals("TestSubject", messages[0].getSubject()).     // And mark ourselves as "called"     called = true. }
true;public;0;3;/**  * @return true if the action has been called  */ ;/**  * @return true if the action has been called  */ public boolean hasBeenCalled() {     return called. }
