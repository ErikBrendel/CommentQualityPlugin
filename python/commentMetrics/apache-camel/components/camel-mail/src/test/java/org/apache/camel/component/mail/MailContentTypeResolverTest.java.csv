commented;modifiers;parameterAmount;loc;comment;code
false;public;0;45;;@Test public void testCustomContentTypeResolver() throws Exception {     // clear mailbox     Mailbox.clearAll().     // create an exchange with a normal body and attachment to be produced as email     Endpoint endpoint = context.getEndpoint("smtp://james@mymailserver.com?password=secret").     // create the exchange with the mail message that is multipart with a file and a Hello World text/plain message.     Exchange exchange = endpoint.createExchange().     Message in = exchange.getIn().     in.setBody("Hello World").     in.addAttachment("logo.jpeg", new DataHandler(new FileDataSource("src/test/data/logo.jpeg"))).     // create a producer that can produce the exchange (= send the mail)     Producer producer = endpoint.createProducer().     // start the producer     producer.start().     // and let it go (processes the exchange by sending the email)     producer.process(exchange).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.assertIsSatisfied().     Exchange out = mock.assertExchangeReceived(0).     // plain text     assertEquals("Hello World", out.getIn().getBody(String.class)).     // attachment     Map<String, DataHandler> attachments = out.getIn().getAttachments().     assertNotNull("Should have attachments", attachments).     assertEquals(1, attachments.size()).     DataHandler handler = out.getIn().getAttachment("logo.jpeg").     assertNotNull("The logo should be there", handler).     // as we use a custom content type resolver the content type should then be fixed and correct     // content type should match     boolean match1 = "image/jpeg. name=logo.jpeg".equals(handler.getContentType()).     boolean match2 = "application/octet-stream. name=logo.jpeg".equals(handler.getContentType()).     assertTrue("Should match 1 or 2", match1 || match2).     producer.stop(). }
false;public;1;3;;public String resolveContentType(String fileName) {     return "image/jpeg". }
false;public;0;10;;public void configure() throws Exception {     MailComponent mail = getContext().getComponent("smtp", MailComponent.class).     mail.setContentTypeResolver(new ContentTypeResolver() {          public String resolveContentType(String fileName) {             return "image/jpeg".         }     }).     from("pop3://james@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             MailComponent mail = getContext().getComponent("smtp", MailComponent.class).             mail.setContentTypeResolver(new ContentTypeResolver() {                  public String resolveContentType(String fileName) {                     return "image/jpeg".                 }             }).             from("pop3://james@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
