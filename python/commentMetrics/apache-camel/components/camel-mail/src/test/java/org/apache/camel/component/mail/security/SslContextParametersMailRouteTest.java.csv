commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;public void configure() {     from("imaps://" + imapHost + "?username=" + username + "&password=" + password + "&delete=false&unseen=true&fetchSize=1&consumer.useFixedDelay=true&consumer.initialDelay=100&consumer.delay=100").to("mock:in").     from("direct:in").to("smtps://" + smtpHost + "?username=" + username + "&password=" + password). }
false;public;0;30;;@Test public void testSendAndReceiveMails() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("imaps://" + imapHost + "?username=" + username + "&password=" + password + "&delete=false&unseen=true&fetchSize=1&consumer.useFixedDelay=true&consumer.initialDelay=100&consumer.delay=100").to("mock:in").             from("direct:in").to("smtps://" + smtpHost + "?username=" + username + "&password=" + password).         }     }).     context.start().     MockEndpoint resultEndpoint = getMockEndpoint("mock:in").     resultEndpoint.expectedBodiesReceived("Test Email Body\r\n").     Map<String, Object> headers = new HashMap<>().     headers.put("To", email).     headers.put("From", email).     headers.put("Reply-to", email).     headers.put("Subject", "SSL/TLS Test").     template.sendBodyAndHeaders("direct:in", "Test Email Body", headers).     resultEndpoint.assertIsSatisfied(). }
false;public;0;6;;public void configure() {     from("direct:in").to("smtps://" + smtpHost + "?username=" + username + "&password=" + password + "&sslContextParameters=#sslContextParameters"). }
false;public;0;29;;@Test public void testSendAndReceiveMailsWithCustomTrustStore() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:in").to("smtps://" + smtpHost + "?username=" + username + "&password=" + password + "&sslContextParameters=#sslContextParameters").         }     }).     context.start().     Map<String, Object> headers = new HashMap<>().     headers.put("To", email).     headers.put("From", email).     headers.put("Reply-to", email).     headers.put("Subject", "SSL/TLS Test").     try {         template.sendBodyAndHeaders("direct:in", "Test Email Body", headers).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertTrue(e.getCause().getCause() instanceof SSLHandshakeException).         assertTrue(e.getCause().getCause().getMessage().contains("unable to find valid certification path to requested target")).     } }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     addSslContextParametersToRegistry(reg).     return reg. }
false;protected;1;3;;protected void addSslContextParametersToRegistry(JndiRegistry registry) {     registry.bind("sslContextParameters", MailTestHelper.createSslContextParameters()). }
true;public;0;4;/**  * Stop Camel startup.  */ ;/**  * Stop Camel startup.  */ @Override public boolean isUseAdviceWith() {     return true. }
