commented;modifiers;parameterAmount;loc;comment;code
false;public;0;50;;@Test public void testSendAndReceiveMailWithAttachments() throws Exception {     // clear mailbox     Mailbox.clearAll().     // create an exchange with a normal body and attachment to be produced as email     Endpoint endpoint = context.getEndpoint("smtp://james@mymailserver.com?password=secret").     // create the exchange with the mail message that is multipart with a file and a Hello World text/plain message.     Exchange exchange = endpoint.createExchange().     Message in = exchange.getIn().     in.setBody("Hello World").     // unicode 00DC is german umlaut     String name = "logo2\u00DC".     // use existing logo.jpeg file, but lets name it with the umlaut     in.addAttachment(name, new DataHandler(new FileDataSource("src/test/data/logo.jpeg"))).     // create a producer that can produce the exchange (= send the mail)     Producer producer = endpoint.createProducer().     // start the producer     producer.start().     // and let it go (processes the exchange by sending the email)     producer.process(exchange).     // need some time for the mail to arrive on the inbox (consumed and sent to the mock)     Thread.sleep(2000).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     Exchange out = mock.assertExchangeReceived(0).     mock.assertIsSatisfied().     // plain text     assertEquals("Hello World", out.getIn().getBody(String.class)).     // attachment     Map<String, DataHandler> attachments = out.getIn().getAttachments().     assertNotNull("Should have attachments", attachments).     assertEquals(1, attachments.size()).     DataHandler handler = out.getIn().getAttachment(name).     assertNotNull("The " + name + " should be there", handler).     String nameURLEncoded = URLEncoder.encode(name, Charset.defaultCharset().name()).     assertTrue("Handler content type should end with URL-encoded name", handler.getContentType().endsWith(nameURLEncoded)).     assertEquals("Handler name should be the file name", name, handler.getName()).     producer.stop(). }
false;public;0;3;;public void configure() throws Exception {     from("pop3://james@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://james@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
