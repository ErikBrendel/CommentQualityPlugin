commented;modifiers;parameterAmount;loc;comment;code
false;public;0;52;;@Test public void testSendAndReceiveMails() throws Exception {     Mailbox.clearAll().     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMinimumMessageCount(1).     MimeMessage message = new MimeMessage(mailSession).     message.setText(body).     message.setRecipients(Message.RecipientType.TO, new Address[] { new InternetAddress("james@localhost"), new InternetAddress("bar@localhost") }).     Transport.send(message).     // lets test the receive worked     resultEndpoint.assertIsSatisfied(100000).     Exchange exchange = resultEndpoint.getReceivedExchanges().get(0).     org.apache.camel.Message in = exchange.getIn().     assertNotNull("Should have headers", in.getHeaders()).     MailMessage msg = (MailMessage) exchange.getIn().     Message inMessage = msg != null ? msg.getMessage() : null.     assertNotNull("In message has no JavaMail message!", inMessage).     String text = in.getBody(String.class).     assertEquals("mail body", body, text).     // need to use iterator as some mail impl returns String[] and others a single String with comma as separator     // so we let Camel create an iterator so we can use the same code for the test     Object to = in.getHeader("TO").     Iterator<String> it = CastUtils.cast(ObjectHelper.createIterator(to)).     int i = 0.     while (it.hasNext()) {         if (i == 0) {             assertEquals("james@localhost", it.next().trim()).         } else {             assertEquals("bar@localhost", it.next().trim()).         }         i++.     }     Enumeration<Header> iter = CastUtils.cast(inMessage.getAllHeaders()).     while (iter.hasMoreElements()) {         Header header = iter.nextElement().         String[] value = message.getHeader(header.getName()).         log.debug("Header: " + header.getName() + " has value: " + org.apache.camel.util.ObjectHelper.asString(value)).     } }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     Properties properties = new Properties().     properties.put("mail.smtp.host", "localhost").     mailSession = Session.getInstance(properties, null).     super.setUp(). }
false;public;0;3;;public void configure() {     from("pop3://james@localhost?password=foo&consumer.initialDelay=100&consumer.delay=100").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("pop3://james@localhost?password=foo&consumer.initialDelay=100&consumer.delay=100").to("mock:result").         }     }. }
