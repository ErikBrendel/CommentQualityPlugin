commented;modifiers;parameterAmount;loc;comment;code
false;private;0;20;;private void sendMultipartEmail() throws Exception {     Mailbox.clearAll().     // create an exchange with a normal body and attachment to be produced as email     MailEndpoint endpoint = context.getEndpoint("smtp://sachin@mymailserver.com?password=secret&contentType=text/html. charset=UTF-8", MailEndpoint.class).     endpoint.getConfiguration().setAlternativeBodyHeader(MailConstants.MAIL_ALTERNATIVE_BODY).     // create the exchange with the mail message that is multipart with a file and a Hello World text/plain message.     Exchange exchange = endpoint.createExchange().     Message in = exchange.getIn().     in.setBody(htmlBody).     in.setHeader(MAIL_ALTERNATIVE_BODY, alternativeBody).     // create a producer that can produce the exchange (= send the mail)     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(MailConstants.MAIL_ALTERNATIVE_BODY).isNull().     context.createProducerTemplate().send(endpoint, exchange). }
false;private;1;17;;private void verifyTheRecivedEmail(String expectString) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.assertIsSatisfied().     Exchange out = mock.assertExchangeReceived(0).     ByteArrayOutputStream baos = new ByteArrayOutputStream(((MailMessage) out.getIn()).getMessage().getSize()).     ((MailMessage) out.getIn()).getMessage().writeTo(baos).     String dumpedMessage = baos.toString().     assertTrue("There should have the " + expectString, dumpedMessage.indexOf(expectString) > 0).     log.trace("multipart alternative: \n{}", dumpedMessage).     // plain text     assertEquals(alternativeBody, out.getIn().getBody(String.class)).     assertEquals("multipart body should have 2 parts", 2, out.getIn().getBody(MimeMultipart.class).getCount()). }
false;public;0;6;;@Test public void testMultipartEmailContentType() throws Exception {     sendMultipartEmail().     verifyTheRecivedEmail("Content-Type: text/plain. charset=UTF-8").     verifyTheRecivedEmail("Content-Type: text/html. charset=UTF-8"). }
false;public;0;3;;public void configure() throws Exception {     from("pop3://sachin@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100&contentType=text/html. charset=UTF-8").to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://sachin@mymailserver.com?password=secret&consumer.initialDelay=100&consumer.delay=100&contentType=text/html. charset=UTF-8").to("mock:result").         }     }. }
