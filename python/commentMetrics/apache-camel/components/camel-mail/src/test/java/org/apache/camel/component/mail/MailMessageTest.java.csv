commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testMailMessageHandlesMultipleHeaders() throws Exception {     mimeMessage.setRecipients(Message.RecipientType.TO, new Address[] { new InternetAddress("foo@localhost"), new InternetAddress("bar@localhost") }).     Exchange exchange = endpoint.createExchange(mimeMessage).     MailMessage in = (MailMessage) exchange.getIn().     assertNotNull(in).     assertEquals("mail body", body, in.getBody()).     // need to use iterator as some mail impl returns String[] and others a single String with comma as separator     // so we let Camel create an iterator so we can use the same code for the test     Object to = in.getHeader("TO").     Iterator<String> it = CastUtils.cast(ObjectHelper.createIterator(to)).     int i = 0.     while (it.hasNext()) {         if (i == 0) {             assertEquals("foo@localhost", it.next().trim()).         } else {             assertEquals("bar@localhost", it.next().trim()).         }         i++.     } }
false;public;0;13;;@Test public void testMailMessageHandlesSingleHeader() throws Exception {     mimeMessage.setRecipients(Message.RecipientType.TO, new Address[] { new InternetAddress("frank@localhost") }).     Exchange exchange = endpoint.createExchange(mimeMessage).     MailMessage in = (MailMessage) exchange.getIn().     assertNotNull(in).     Object header = in.getHeader("TO").     String value = assertIsInstanceOf(String.class, header).     assertEquals("value", "frank@localhost", value).     assertEquals("body", body, in.getBody()). }
false;public;0;15;;@Override @Before public void setUp() throws Exception {     super.setUp().     Mailbox.clearAll().     endpoint = resolveMandatoryEndpoint("pop3://someone@myhost:30/subject").     Properties properties = new Properties().     properties.put("mail.smtp.host", "localhost").     mailSession = Session.getInstance(properties, null).     mimeMessage = new MimeMessage(mailSession).     mimeMessage.setText(body). }
false;protected;1;5;;@Override protected MailEndpoint resolveMandatoryEndpoint(String uri) {     Endpoint endpoint = super.resolveMandatoryEndpoint(uri).     return assertIsInstanceOf(MailEndpoint.class, endpoint). }
