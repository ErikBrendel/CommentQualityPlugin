commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testSendFileAsMail() throws Exception {     Mailbox.clearAll().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.message(0).body().isInstanceOf(GenericFile.class).     template.sendBodyAndHeader("file://target/mailtext", "Hi how are you", Exchange.FILE_NAME, "mail.txt").     assertMockEndpointsSatisfied().     Mailbox mailbox = Mailbox.get("james@localhost").     assertEquals(1, mailbox.size()).     Object body = mailbox.get(0).getContent().     assertEquals("Hi how are you", body).     Object subject = mailbox.get(0).getSubject().     assertEquals("Hello World", subject). }
false;public;0;8;;@Override public void configure() throws Exception {     from("file://target/mailtext?consumer.initialDelay=100&consumer.delay=100").setHeader("Subject", constant("Hello World")).setHeader("To", constant("james@localhost")).setHeader("From", constant("claus@localhost")).to("smtp://localhost?password=secret&username=claus&consumer.initialDelay=100&consumer.delay=100", "mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/mailtext?consumer.initialDelay=100&consumer.delay=100").setHeader("Subject", constant("Hello World")).setHeader("To", constant("james@localhost")).setHeader("From", constant("claus@localhost")).to("smtp://localhost?password=secret&username=claus&consumer.initialDelay=100&consumer.delay=100", "mock:result").         }     }. }
