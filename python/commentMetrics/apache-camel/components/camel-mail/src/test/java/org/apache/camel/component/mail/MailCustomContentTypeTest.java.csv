commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSendHtmlMail() throws Exception {     Mailbox.clearAll().     sendBody("direct:a", "<html><body><h1>Hello</h1>World</body></html>").     Mailbox box = Mailbox.get("claus@localhost").     Message msg = box.get(0).     assertTrue(msg.getContentType().startsWith("text/html")).     assertEquals("text/html. charset=UTF-8", msg.getContentType()).     assertEquals("<html><body><h1>Hello</h1>World</body></html>", msg.getContent()). }
false;public;0;13;;@Test public void testSendHtmlMailIso88591() throws Exception {     Mailbox.clearAll().     sendBody("direct:c", "<html><body><h1>Hello</h1>World</body></html>").     Mailbox box = Mailbox.get("claus@localhost").     Message msg = box.get(0).     assertTrue(msg.getContentType().startsWith("text/html")).     assertEquals("text/html. charset=iso-8859-1", msg.getContentType()).     assertEquals("<html><body><h1>Hello</h1>World</body></html>", msg.getContent()). }
false;public;0;11;;@Test public void testNullBody() throws Exception {     Mailbox.clearAll().     template.sendBodyAndHeader("direct:b", null, "contentType", "text/plain. charset=iso-8859-1").     Mailbox box = Mailbox.get("claus@localhost").     Message msg = box.get(0).     assertEquals("text/plain. charset=iso-8859-1", msg.getContentType()).     assertEquals("", msg.getContent()). }
false;public;0;11;;@Test public void testSendPlainMailContentTypeInHeader() throws Exception {     Mailbox.clearAll().     template.sendBodyAndHeader("direct:b", "Hello World", "contentType", "text/plain. charset=iso-8859-1").     Mailbox box = Mailbox.get("claus@localhost").     Message msg = box.get(0).     assertEquals("text/plain. charset=iso-8859-1", msg.getContentType()).     assertEquals("Hello World", msg.getContent()). }
false;public;0;11;;@Test public void testSendPlainMailContentTypeInHeader2() throws Exception {     Mailbox.clearAll().     template.sendBodyAndHeader("direct:b", "Hello World", Exchange.CONTENT_TYPE, "text/plain. charset=iso-8859-1").     Mailbox box = Mailbox.get("claus@localhost").     Message msg = box.get(0).     assertEquals("text/plain. charset=iso-8859-1", msg.getContentType()).     assertEquals("Hello World", msg.getContent()). }
false;public;0;13;;@Test public void testSendPlainMailContentTypeTinyTypeInHeader() throws Exception {     Mailbox.clearAll().     // Camel will fixup the Content-Type if you do not have a space after the semi colon     template.sendBodyAndHeader("direct:b", "Hello World", "contentType", "text/plain.charset=iso-8859-1").     Mailbox box = Mailbox.get("claus@localhost").     Message msg = box.get(0).     // the content type should have a space after the semi colon     assertEquals("text/plain. charset=iso-8859-1", msg.getContentType()).     assertEquals("Hello World", msg.getContent()). }
false;public;0;5;;public void configure() throws Exception {     from("direct:a").to("smtp://claus@localhost?contentType=text/html.charset=UTF-8").     from("direct:b").to("smtp://claus@localhost").     from("direct:c").to("smtp://claus@localhost?contentType=text/html.charset=iso-8859-1"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("smtp://claus@localhost?contentType=text/html.charset=UTF-8").             from("direct:b").to("smtp://claus@localhost").             from("direct:c").to("smtp://claus@localhost?contentType=text/html.charset=iso-8859-1").         }     }. }
