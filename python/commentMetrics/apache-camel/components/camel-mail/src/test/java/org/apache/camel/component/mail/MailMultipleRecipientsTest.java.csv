commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testSendWithMultipleRecipientsInHeader() throws Exception {     Mailbox.clearAll().     // START SNIPPET: e1     Map<String, Object> headers = new HashMap<>().     // test with both comma and semi colon as Camel supports both kind of separators     headers.put("to", "claus@localhost, willem@localhost . hadrian@localhost, \"Snell, Tracy\" <tracy@localhost>").     headers.put("cc", "james@localhost").     assertMailbox("claus").     assertMailbox("willem").     assertMailbox("hadrian").     assertMailbox("tracy").     template.sendBodyAndHeaders("smtp://localhost", "Hello World", headers).     // END SNIPPET: e1     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testSendWithMultipleRecipientsPreConfigured() throws Exception {     Mailbox.clearAll().     assertMailbox("claus").     assertMailbox("willem").     // START SNIPPET: e2     // here we have pre configured the to receivers to claus and willem. Notice we use comma to separate     // the two recipients. Camel also support using colon as separator char     template.sendBody("smtp://localhost?to=claus@localhost,willem@localhost&cc=james@localhost", "Hello World").     // END SNIPPET: e2     assertMockEndpointsSatisfied(). }
false;private;1;6;;private void assertMailbox(String name) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:" + name).     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("cc", "james@localhost"). }
false;public;0;9;;public void configure() throws Exception {     from("pop3://claus@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:claus").     from("pop3://willem@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:willem").     from("pop3://hadrian@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:hadrian").     from("pop3://tracy@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:tracy"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("pop3://claus@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:claus").             from("pop3://willem@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:willem").             from("pop3://hadrian@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:hadrian").             from("pop3://tracy@localhost?consumer.initialDelay=100&consumer.delay=100").to("mock:tracy").         }     }. }
