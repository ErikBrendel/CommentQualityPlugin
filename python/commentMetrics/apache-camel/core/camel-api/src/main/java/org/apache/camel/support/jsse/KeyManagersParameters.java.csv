commented;modifiers;parameterAmount;loc;comment;code
true;public;0;35;/**  * Creates {@link KeyManager}s based on this instance's configuration and the  * {@code KeyStore} produced by the configuration returned from  * {@link #getKeyStore()}. The {@code KeyManager}s are produced from a  * factory created by using the provider and algorithm identifiers returned  * by {@link #getProvider()} and {@link #getAlgorithm()}, respectively. If  * either of these methods returns null, the default JSSE value is used  * instead.  *  * @return the initialized {@code KeyManager}s  * @throws GeneralSecurityException if there is an error creating the  *             {@code KeyManager}s or in creating the {@code KeyStore}  * @throws IOException if there is an error loading the {@code KeyStore}  *  * @see KeyStoreParameters#createKeyStore()  */ ;/**  * Creates {@link KeyManager}s based on this instance's configuration and the  * {@code KeyStore} produced by the configuration returned from  * {@link #getKeyStore()}. The {@code KeyManager}s are produced from a  * factory created by using the provider and algorithm identifiers returned  * by {@link #getProvider()} and {@link #getAlgorithm()}, respectively. If  * either of these methods returns null, the default JSSE value is used  * instead.  *  * @return the initialized {@code KeyManager}s  * @throws GeneralSecurityException if there is an error creating the  *             {@code KeyManager}s or in creating the {@code KeyStore}  * @throws IOException if there is an error loading the {@code KeyStore}  *  * @see KeyStoreParameters#createKeyStore()  */ public KeyManager[] createKeyManagers() throws GeneralSecurityException, IOException {     LOG.trace("Creating KeyManager[] from KeyManagersParameters [{}].", this).     KeyManager[] keyManagers.     String kmfAlgorithm = this.parsePropertyValue(this.getAlgorithm()).     if (kmfAlgorithm == null) {         kmfAlgorithm = KeyManagerFactory.getDefaultAlgorithm().     }     KeyManagerFactory kmf.     if (this.getProvider() == null) {         kmf = KeyManagerFactory.getInstance(kmfAlgorithm).     } else {         kmf = KeyManagerFactory.getInstance(kmfAlgorithm, this.parsePropertyValue(this.getProvider())).     }     LOG.debug("KeyManagerFactory [{}], initialized from [{}], is using provider [{}] and algorithm [{}].", new Object[] { kmf, this, kmf.getProvider(), kmf.getAlgorithm() }).     char[] kmfPassword = null.     if (this.getKeyPassword() != null) {         kmfPassword = this.parsePropertyValue(this.getKeyPassword()).toCharArray().     }     KeyStore ks = this.getKeyStore() == null ? null : this.getKeyStore().createKeyStore().     kmf.init(ks, kmfPassword).     keyManagers = kmf.getKeyManagers().     LOG.debug("KeyManager[] [{}], initialized from KeyManagerFactory [{}].", keyManagers, kmf).     return keyManagers. }
true;public;0;3;/**  * @see #setKeyStore(KeyStoreParameters)  */ ;/**  * @see #setKeyStore(KeyStoreParameters)  */ public KeyStoreParameters getKeyStore() {     return keyStore. }
true;public;1;3;/**  * Sets the key store configuration used to create the {@link KeyStore} that the  * {@link KeyManager}s produced by this object's configuration expose.  *  * @param value the configuration to use  */ ;/**  * Sets the key store configuration used to create the {@link KeyStore} that the  * {@link KeyManager}s produced by this object's configuration expose.  *  * @param value the configuration to use  */ public void setKeyStore(KeyStoreParameters value) {     this.keyStore = value. }
true;public;0;3;/**  * @see #setKeyPassword(String)  */ ;/**  * @see #setKeyPassword(String)  */ public String getKeyPassword() {     return keyPassword. }
true;public;1;3;/**  * Sets the optional password for recovering keys in the key store. Used by the  * {@link KeyManagerFactory} that creates the {@link KeyManager}s  * represented by this object's configuration.  *  * @param value the value to use  */ ;/**  * Sets the optional password for recovering keys in the key store. Used by the  * {@link KeyManagerFactory} that creates the {@link KeyManager}s  * represented by this object's configuration.  *  * @param value the value to use  */ public void setKeyPassword(String value) {     this.keyPassword = value. }
true;public;0;3;/**  * @see #setProvider(String)  */ ;/**  * @see #setProvider(String)  */ public String getProvider() {     return provider. }
true;public;1;3;/**  * Sets the optional provider identifier for the {@link KeyManagerFactory} used to create  * the {@link KeyManager}s represented by this object's configuration.  *  * @param value the desired provider identifier or {@code null} to use the  *            highest priority provider implementing the algorithm  *  * @see Security#getProviders()  */ ;/**  * Sets the optional provider identifier for the {@link KeyManagerFactory} used to create  * the {@link KeyManager}s represented by this object's configuration.  *  * @param value the desired provider identifier or {@code null} to use the  *            highest priority provider implementing the algorithm  *  * @see Security#getProviders()  */ public void setProvider(String value) {     this.provider = value. }
true;public;0;3;/**  * @see KeyManagerFactory#getDefaultAlgorithm()  */ ;/**  * @see KeyManagerFactory#getDefaultAlgorithm()  */ public String getAlgorithm() {     return algorithm. }
true;public;1;3;/**  * Sets optional algorithm name for the {@link KeyManagerFactory} used to create  * the {@link KeyManager}s represented by this object's configuration.  See the <a href=  * "http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html"  * >Java Secure Socket Extension Reference Guide</a> for information about  * standard algorithm names.  *  * @param value the desired algorithm or {@code null} to use default  *  * @see KeyManagerFactory#getDefaultAlgorithm()  */ ;/**  * Sets optional algorithm name for the {@link KeyManagerFactory} used to create  * the {@link KeyManager}s represented by this object's configuration.  See the <a href=  * "http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html"  * >Java Secure Socket Extension Reference Guide</a> for information about  * standard algorithm names.  *  * @param value the desired algorithm or {@code null} to use default  *  * @see KeyManagerFactory#getDefaultAlgorithm()  */ public void setAlgorithm(String value) {     this.algorithm = value. }
false;public;0;14;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("KeyManagersParameters[keyStore=").     builder.append(keyStore).     builder.append(", keyPassword=").     builder.append("********").     builder.append(", provider=").     builder.append(provider).     builder.append(", algorithm=").     builder.append(algorithm).     builder.append("]").     return builder.toString(). }
