commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Add the given {@link Exchange} under the correlation key.  * <p/>  * Will replace any existing exchange.  * <p/>  * <b>Important:</b> This method is <b>not</b> invoked if only one exchange was completed, and therefore  * the exchange does not need to be added to a repository, as its completed immediately.  *  * @param camelContext   the current CamelContext  * @param key            the correlation key  * @param exchange       the aggregated exchange  * @return the old exchange if any existed  */ ;/**  * Add the given {@link Exchange} under the correlation key.  * <p/>  * Will replace any existing exchange.  * <p/>  * <b>Important:</b> This method is <b>not</b> invoked if only one exchange was completed, and therefore  * the exchange does not need to be added to a repository, as its completed immediately.  *  * @param camelContext   the current CamelContext  * @param key            the correlation key  * @param exchange       the aggregated exchange  * @return the old exchange if any existed  */ Exchange add(CamelContext camelContext, String key, Exchange exchange).
true;;2;1;/**  * Gets the given exchange with the correlation key  * <p/>  * This method is always invoked for any incoming exchange in the aggregator.  *  * @param camelContext   the current CamelContext  * @param key            the correlation key  * @return the exchange, or <tt>null</tt> if no exchange was previously added  */ ;/**  * Gets the given exchange with the correlation key  * <p/>  * This method is always invoked for any incoming exchange in the aggregator.  *  * @param camelContext   the current CamelContext  * @param key            the correlation key  * @return the exchange, or <tt>null</tt> if no exchange was previously added  */ Exchange get(CamelContext camelContext, String key).
true;;3;1;/**  * Removes the exchange with the given correlation key, which should happen  * when an {@link Exchange} is completed  * <p/>  * <b>Important:</b> This method is <b>not</b> invoked if only one exchange was completed, and therefore  * the exchange does not need to be added to a repository, as its completed immediately.  *  * @param camelContext   the current CamelContext  * @param key            the correlation key  * @param exchange       the exchange to remove  */ ;/**  * Removes the exchange with the given correlation key, which should happen  * when an {@link Exchange} is completed  * <p/>  * <b>Important:</b> This method is <b>not</b> invoked if only one exchange was completed, and therefore  * the exchange does not need to be added to a repository, as its completed immediately.  *  * @param camelContext   the current CamelContext  * @param key            the correlation key  * @param exchange       the exchange to remove  */ void remove(CamelContext camelContext, String key, Exchange exchange).
true;;2;1;/**  * Confirms the completion of the {@link Exchange}.  * <p/>  * This method is always invoked.  *  * @param camelContext  the current CamelContext  * @param exchangeId    exchange id to confirm  */ ;/**  * Confirms the completion of the {@link Exchange}.  * <p/>  * This method is always invoked.  *  * @param camelContext  the current CamelContext  * @param exchangeId    exchange id to confirm  */ void confirm(CamelContext camelContext, String exchangeId).
true;;0;1;/**  * Gets the keys currently in the repository.  *  * @return the keys  */ ;/**  * Gets the keys currently in the repository.  *  * @return the keys  */ Set<String> getKeys().
