commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Scans the repository for {@link Exchange}s to be recovered  *  * @param camelContext   the current CamelContext  * @return the exchange ids for to be recovered  */ ;/**  * Scans the repository for {@link Exchange}s to be recovered  *  * @param camelContext   the current CamelContext  * @return the exchange ids for to be recovered  */ Set<String> scan(CamelContext camelContext).
true;;2;1;/**  * Recovers the exchange with the given exchange id  *  * @param camelContext   the current CamelContext  * @param exchangeId     exchange id  * @return the recovered exchange or <tt>null</tt> if not found  */ ;/**  * Recovers the exchange with the given exchange id  *  * @param camelContext   the current CamelContext  * @param exchangeId     exchange id  * @return the recovered exchange or <tt>null</tt> if not found  */ Exchange recover(CamelContext camelContext, String exchangeId).
true;;2;1;/**  * Sets the interval between recovery scans  *  * @param interval  the interval  * @param timeUnit  the time unit  */ ;/**  * Sets the interval between recovery scans  *  * @param interval  the interval  * @param timeUnit  the time unit  */ void setRecoveryInterval(long interval, TimeUnit timeUnit).
true;;1;1;/**  * Sets the interval between recovery scans  *  * @param interval  the interval in millis  */ ;/**  * Sets the interval between recovery scans  *  * @param interval  the interval in millis  */ void setRecoveryInterval(long interval).
true;;0;1;/**  * Gets the interval between recovery scans in millis.  *  * @return the interval in millis  */ ;/**  * Gets the interval between recovery scans in millis.  *  * @return the interval in millis  */ long getRecoveryIntervalInMillis().
true;;1;1;/**  * Sets whether or not recovery is enabled  *  * @param useRecovery whether or not recovery is enabled  */ ;/**  * Sets whether or not recovery is enabled  *  * @param useRecovery whether or not recovery is enabled  */ void setUseRecovery(boolean useRecovery).
true;;0;1;/**  * Whether or not recovery is enabled or not  *  * @return <tt>true</tt> to use recovery, <tt>false</tt> otherwise.  */ ;/**  * Whether or not recovery is enabled or not  *  * @return <tt>true</tt> to use recovery, <tt>false</tt> otherwise.  */ boolean isUseRecovery().
true;;1;1;/**  * Sets an optional dead letter channel which exhausted recovered {@link Exchange}  * should be send to.  * <p/>  * By default this option is disabled  *  * @param deadLetterUri  the uri of the dead letter channel  */ ;/**  * Sets an optional dead letter channel which exhausted recovered {@link Exchange}  * should be send to.  * <p/>  * By default this option is disabled  *  * @param deadLetterUri  the uri of the dead letter channel  */ void setDeadLetterUri(String deadLetterUri).
true;;0;1;/**  * Gets the dead letter channel  *  * @return  the uri of the dead letter channel  */ ;/**  * Gets the dead letter channel  *  * @return  the uri of the dead letter channel  */ String getDeadLetterUri().
true;;1;1;/**  * Sets an optional limit of the number of redelivery attempt of recovered {@link Exchange}  * should be attempted, before its exhausted.  * <p/>  * When this limit is hit, then the {@link Exchange} is moved to the dead letter channel.  * <p/>  * By default this option is disabled  *  * @param maximumRedeliveries the maximum redeliveries  */ ;/**  * Sets an optional limit of the number of redelivery attempt of recovered {@link Exchange}  * should be attempted, before its exhausted.  * <p/>  * When this limit is hit, then the {@link Exchange} is moved to the dead letter channel.  * <p/>  * By default this option is disabled  *  * @param maximumRedeliveries the maximum redeliveries  */ void setMaximumRedeliveries(int maximumRedeliveries).
true;;0;1;/**  * Gets the maximum redelivery attempts to do before a recovered {@link Exchange} is doomed  * as exhausted and moved to the dead letter channel.  *  * @return the maximum redeliveries  */ ;/**  * Gets the maximum redelivery attempts to do before a recovered {@link Exchange} is doomed  * as exhausted and moved to the dead letter channel.  *  * @return the maximum redeliveries  */ int getMaximumRedeliveries().
