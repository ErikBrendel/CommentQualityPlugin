commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public DataType getInputType() {     return inputType. }
true;public;1;4;/**  * Set the input data type.  *  * @param inputType input data type  */ ;/**  * Set the input data type.  *  * @param inputType input data type  */ public void setInputType(String inputType) {     this.inputType = new DataType(inputType).     this.contractString = null. }
true;public;1;4;/**  * Set the input data type with Java class.  *  * @param clazz Java class which represents input data type  */ ;/**  * Set the input data type with Java class.  *  * @param clazz Java class which represents input data type  */ public void setInputType(Class<?> clazz) {     this.inputType = new DataType(clazz).     this.contractString = null. }
false;public;0;3;;public DataType getOutputType() {     return outputType. }
true;public;1;4;/**  * Set the output data type.  *  * @param outputType output data type  */ ;/**  * Set the output data type.  *  * @param outputType output data type  */ public void setOutputType(String outputType) {     this.outputType = new DataType(outputType).     this.contractString = null. }
true;public;1;4;/**  * Set the output data type with Java class.  *  * @param clazz Java class which represents output data type  */ ;/**  * Set the output data type with Java class.  *  * @param clazz Java class which represents output data type  */ public void setOutputType(Class<?> clazz) {     this.outputType = new DataType(clazz).     this.contractString = null. }
false;public;0;3;;public boolean isValidateInput() {     return validateInput. }
true;public;1;3;/**  * Whether to validate the input  */ ;/**  * Whether to validate the input  */ public void setValidateInput(boolean validate) {     this.validateInput = validate. }
false;public;0;3;;public boolean isValidateOutput() {     return validateOutput. }
true;public;1;3;/**  * Whether to validate the output  */ ;/**  * Whether to validate the output  */ public void setValidateOutput(boolean validate) {     this.validateOutput = validate. }
false;public;0;7;;@Override public String toString() {     if (contractString == null) {         this.contractString = "DataType[input=" + this.inputType + ", output=" + this.outputType + "]".     }     return contractString. }
false;public;0;3;;public boolean isEmpty() {     return inputType == null && outputType == null. }
false;public;1;20;;@Override public boolean equals(Object target) {     if (!(target instanceof Contract)) {         return false.     }     Contract targetContract = (Contract) target.     if (getInputType() != null || targetContract.getInputType() != null) {         if (getInputType() == null || targetContract.getInputType() == null || !getInputType().equals(targetContract.getInputType())) {             return false.         }     }     if (getOutputType() != null || targetContract.getOutputType() != null) {         if (getOutputType() == null || targetContract.getOutputType() == null || !getOutputType().equals(targetContract.getOutputType())) {             return false.         }     }     return true. }
false;public;0;4;;@Override public int hashCode() {     return toString().hashCode(). }
