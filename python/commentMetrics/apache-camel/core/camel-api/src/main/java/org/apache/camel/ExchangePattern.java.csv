commented;modifiers;parameterAmount;loc;comment;code
true;public;0;12;/**  * Returns the WSDL URI for this message exchange pattern  */ ;/**  * Returns the WSDL URI for this message exchange pattern  */ public String getWsdlUri() {     switch(this) {         case InOnly:             return "http://www.w3.org/ns/wsdl/in-only".         case InOptionalOut:             return "http://www.w3.org/ns/wsdl/in-opt-out".         case InOut:             return "http://www.w3.org/ns/wsdl/in-out".         default:             throw new IllegalArgumentException("Unknown message exchange pattern: " + this).     } }
true;public;0;3;/**  * Return true if there can be an IN message  */ ;/**  * Return true if there can be an IN message  */ public boolean isInCapable() {     return true. }
true;public;0;8;/**  * Return true if there can be an OUT message  */ ;/**  * Return true if there can be an OUT message  */ public boolean isOutCapable() {     switch(this) {         case InOnly:             return false.         default:             return true.     } }
true;public;0;8;/**  * Return true if there can be a FAULT message  */ ;/**  * Return true if there can be a FAULT message  */ public boolean isFaultCapable() {     switch(this) {         case InOnly:             return false.         default:             return true.     } }
true;public,static;1;3;/**  * Converts the WSDL URI into a {@link ExchangePattern} instance  */ ;/**  * Converts the WSDL URI into a {@link ExchangePattern} instance  */ public static ExchangePattern fromWsdlUri(String wsdlUri) {     return MAP.get(wsdlUri). }
false;public,static;1;7;;public static ExchangePattern asEnum(String value) {     try {         return valueOf(value).     } catch (Exception e) {         throw new IllegalArgumentException("Unknown message exchange pattern: " + value, e).     } }
