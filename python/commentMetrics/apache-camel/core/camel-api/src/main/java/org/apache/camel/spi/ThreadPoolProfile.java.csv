commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the id of this profile  *  * @return the id of this profile  */ ;/**  * Gets the id of this profile  *  * @return the id of this profile  */ public String getId() {     return id. }
true;public;1;3;/**  * Sets the id of this profile  *  * @param id profile id  */ ;/**  * Sets the id of this profile  *  * @param id profile id  */ public void setId(String id) {     this.id = id. }
true;public;0;3;/**  * Whether this profile is the default profile (there can only be one).  *  * @return <tt>true</tt> if its the default profile, <tt>false</tt> otherwise  */ ;/**  * Whether this profile is the default profile (there can only be one).  *  * @return <tt>true</tt> if its the default profile, <tt>false</tt> otherwise  */ public Boolean isDefaultProfile() {     return defaultProfile != null && defaultProfile. }
true;public;1;3;/**  * Sets whether this profile is the default profile (there can only be one).  *  * @param defaultProfile the option  */ ;/**  * Sets whether this profile is the default profile (there can only be one).  *  * @param defaultProfile the option  */ public void setDefaultProfile(Boolean defaultProfile) {     this.defaultProfile = defaultProfile. }
true;public;0;3;/**  * Gets the core pool size (threads to keep minimum in pool)  *  * @return the pool size  */ ;/**  * Gets the core pool size (threads to keep minimum in pool)  *  * @return the pool size  */ public Integer getPoolSize() {     return poolSize. }
true;public;1;3;/**  * Sets the core pool size (threads to keep minimum in pool)  *  * @param poolSize the pool size  */ ;/**  * Sets the core pool size (threads to keep minimum in pool)  *  * @param poolSize the pool size  */ public void setPoolSize(Integer poolSize) {     this.poolSize = poolSize. }
true;public;0;3;/**  * Gets the maximum pool size  *  * @return the maximum pool size  */ ;/**  * Gets the maximum pool size  *  * @return the maximum pool size  */ public Integer getMaxPoolSize() {     return maxPoolSize. }
true;public;1;3;/**  * Sets the maximum pool size  *  * @param maxPoolSize the max pool size  */ ;/**  * Sets the maximum pool size  *  * @param maxPoolSize the max pool size  */ public void setMaxPoolSize(Integer maxPoolSize) {     this.maxPoolSize = maxPoolSize. }
true;public;0;3;/**  * Gets the keep alive time for inactive threads  *  * @return the keep alive time  */ ;/**  * Gets the keep alive time for inactive threads  *  * @return the keep alive time  */ public Long getKeepAliveTime() {     return keepAliveTime. }
true;public;1;3;/**  * Sets the keep alive time for inactive threads  *  * @param keepAliveTime the keep alive time  */ ;/**  * Sets the keep alive time for inactive threads  *  * @param keepAliveTime the keep alive time  */ public void setKeepAliveTime(Long keepAliveTime) {     this.keepAliveTime = keepAliveTime. }
true;public;0;3;/**  * Gets the time unit used for keep alive time  *  * @return the time unit  */ ;/**  * Gets the time unit used for keep alive time  *  * @return the time unit  */ public TimeUnit getTimeUnit() {     return timeUnit. }
true;public;1;3;/**  * Sets the time unit used for keep alive time  *  * @param timeUnit the time unit  */ ;/**  * Sets the time unit used for keep alive time  *  * @param timeUnit the time unit  */ public void setTimeUnit(TimeUnit timeUnit) {     this.timeUnit = timeUnit. }
true;public;0;3;/**  * Gets the maximum number of tasks in the work queue.  * <p/>  * Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue  *  * @return the max queue size  */ ;/**  * Gets the maximum number of tasks in the work queue.  * <p/>  * Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue  *  * @return the max queue size  */ public Integer getMaxQueueSize() {     return maxQueueSize. }
true;public;1;3;/**  * Sets the maximum number of tasks in the work queue.  * <p/>  * Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue  *  * @param maxQueueSize the max queue size  */ ;/**  * Sets the maximum number of tasks in the work queue.  * <p/>  * Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue  *  * @param maxQueueSize the max queue size  */ public void setMaxQueueSize(Integer maxQueueSize) {     this.maxQueueSize = maxQueueSize. }
true;public;0;3;/**  * Gets whether to allow core threads to timeout  *  * @return the allow core threads to timeout  */ ;/**  * Gets whether to allow core threads to timeout  *  * @return the allow core threads to timeout  */ public Boolean getAllowCoreThreadTimeOut() {     return allowCoreThreadTimeOut. }
true;public;1;3;/**  * Sets whether to allow core threads to timeout  *  * @param allowCoreThreadTimeOut <tt>true</tt> to allow timeout  */ ;/**  * Sets whether to allow core threads to timeout  *  * @param allowCoreThreadTimeOut <tt>true</tt> to allow timeout  */ public void setAllowCoreThreadTimeOut(Boolean allowCoreThreadTimeOut) {     this.allowCoreThreadTimeOut = allowCoreThreadTimeOut. }
true;public;0;3;/**  * Gets the policy for tasks which cannot be executed by the thread pool.  *  * @return the policy for the handler  */ ;/**  * Gets the policy for tasks which cannot be executed by the thread pool.  *  * @return the policy for the handler  */ public ThreadPoolRejectedPolicy getRejectedPolicy() {     return rejectedPolicy. }
true;public;0;6;/**  * Gets the handler for tasks which cannot be executed by the thread pool.  *  * @return the handler, or <tt>null</tt> if none defined  */ ;/**  * Gets the handler for tasks which cannot be executed by the thread pool.  *  * @return the handler, or <tt>null</tt> if none defined  */ public RejectedExecutionHandler getRejectedExecutionHandler() {     if (rejectedPolicy != null) {         return rejectedPolicy.asRejectedExecutionHandler().     }     return null. }
true;public;1;3;/**  * Sets the handler for tasks which cannot be executed by the thread pool.  *  * @param rejectedPolicy  the policy for the handler  */ ;/**  * Sets the handler for tasks which cannot be executed by the thread pool.  *  * @param rejectedPolicy  the policy for the handler  */ public void setRejectedPolicy(ThreadPoolRejectedPolicy rejectedPolicy) {     this.rejectedPolicy = rejectedPolicy. }
true;public;1;26;/**  * Overwrites each attribute that is null with the attribute from defaultProfile  *  * @param defaultProfile profile with default values  */ ;/**  * Overwrites each attribute that is null with the attribute from defaultProfile  *  * @param defaultProfile profile with default values  */ public void addDefaults(ThreadPoolProfile defaultProfile) {     if (defaultProfile == null) {         return.     }     if (poolSize == null) {         poolSize = defaultProfile.getPoolSize().     }     if (maxPoolSize == null) {         maxPoolSize = defaultProfile.getMaxPoolSize().     }     if (keepAliveTime == null) {         keepAliveTime = defaultProfile.getKeepAliveTime().     }     if (timeUnit == null) {         timeUnit = defaultProfile.getTimeUnit().     }     if (maxQueueSize == null) {         maxQueueSize = defaultProfile.getMaxQueueSize().     }     if (allowCoreThreadTimeOut == null) {         allowCoreThreadTimeOut = defaultProfile.getAllowCoreThreadTimeOut().     }     if (rejectedPolicy == null) {         rejectedPolicy = defaultProfile.getRejectedPolicy().     } }
false;public;0;14;;@Override public ThreadPoolProfile clone() {     ThreadPoolProfile cloned = new ThreadPoolProfile().     cloned.setDefaultProfile(defaultProfile).     cloned.setId(id).     cloned.setKeepAliveTime(keepAliveTime).     cloned.setMaxPoolSize(maxPoolSize).     cloned.setMaxQueueSize(maxQueueSize).     cloned.setPoolSize(maxPoolSize).     cloned.setAllowCoreThreadTimeOut(allowCoreThreadTimeOut).     cloned.setRejectedPolicy(rejectedPolicy).     cloned.setTimeUnit(timeUnit).     return cloned. }
false;public;0;6;;@Override public String toString() {     return "ThreadPoolProfile[" + id + " (" + defaultProfile + ") size:" + poolSize + "-" + maxPoolSize + ", keepAlive: " + keepAliveTime + " " + timeUnit + ", maxQueue: " + maxQueueSize + ", allowCoreThreadTimeOut:" + allowCoreThreadTimeOut + ", rejectedPolicy:" + rejectedPolicy + "]". }
