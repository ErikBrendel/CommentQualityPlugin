commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Looks up the value in the map by the given key.  *  * @param key the key of the value to search for  * @return the value for the given key or <tt>null</tt> if it is not present (or has timed out)  */ ;/**  * Looks up the value in the map by the given key.  *  * @param key the key of the value to search for  * @return the value for the given key or <tt>null</tt> if it is not present (or has timed out)  */ V get(K key).
true;;0;1;/**  * Returns a copy of the keys in the map  *  * @return the keys  */ ;/**  * Returns a copy of the keys in the map  *  * @return the keys  */ Object[] getKeys().
true;;0;1;/**  * Returns the size of the map  *  * @return the size  */ ;/**  * Returns the size of the map  *  * @return the size  */ int size().
true;;3;1;/**  * Adds the key value pair into the map such that some time after the given  * timeout the entry will be evicted  *  * @param key   the key  * @param value the value  * @param timeoutMillis  timeout in millis  * @return the previous value associated with <tt>key</tt>, or  *         <tt>null</tt> if there was no mapping for <tt>key</tt>.  */ ;/**  * Adds the key value pair into the map such that some time after the given  * timeout the entry will be evicted  *  * @param key   the key  * @param value the value  * @param timeoutMillis  timeout in millis  * @return the previous value associated with <tt>key</tt>, or  *         <tt>null</tt> if there was no mapping for <tt>key</tt>.  */ V put(K key, V value, long timeoutMillis).
true;;3;1;/**  * Adds the key value pair into the map if the specified key is not already associated with a value  * such that some time after the given timeout the entry will be evicted  *  * @param key   the key  * @param value the value  * @param timeoutMillis  timeout in millis  * @return the value associated with <tt>key</tt>, or  *         <tt>null</tt> if there was no mapping for <tt>key</tt>.  */ ;/**  * Adds the key value pair into the map if the specified key is not already associated with a value  * such that some time after the given timeout the entry will be evicted  *  * @param key   the key  * @param value the value  * @param timeoutMillis  timeout in millis  * @return the value associated with <tt>key</tt>, or  *         <tt>null</tt> if there was no mapping for <tt>key</tt>.  */ V putIfAbsent(K key, V value, long timeoutMillis).
true;;2;1;/**  * Callback when the value has been evicted  *  * @param key the key  * @param value the value  * @return <tt>true</tt> to remove the evicted value,  *         or <tt>false</tt> to veto the eviction and thus keep the value.  */ ;/**  * Callback when the value has been evicted  *  * @param key the key  * @param value the value  * @return <tt>true</tt> to remove the evicted value,  *         or <tt>false</tt> to veto the eviction and thus keep the value.  */ boolean onEviction(K key, V value).
true;;1;1;/**  * Removes the object with the given key  *  * @param key  key for the object to remove  * @return the value for the given key or <tt>null</tt> if it is not present (or has timed out)  */ ;/**  * Removes the object with the given key  *  * @param key  key for the object to remove  * @return the value for the given key or <tt>null</tt> if it is not present (or has timed out)  */ V remove(K key).
true;;0;1;/**  * Purges any old entries from the map  */ ;/**  * Purges any old entries from the map  */ void purge().
