commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;public InputStream getInputStream() {     try {         return new ByteArrayInputStream(text.getBytes(encoding)).     } catch (UnsupportedEncodingException e) {         throw new RuntimeException(e).     } }
false;public;0;3;;public Reader getReader() {     return new StringReader(text). }
false;public;0;3;;public String toString() {     return "StringSource[" + text + "]". }
false;public;0;3;;public String getText() {     return text. }
false;public;0;3;;public String getEncoding() {     return encoding. }
false;public;1;16;;public void writeExternal(ObjectOutput out) throws IOException {     int b = (text != null ? 0x01 : 0x00) + (encoding != null ? 0x02 : 0x00) + (getPublicId() != null ? 0x04 : 0x00) + (getSystemId() != null ? 0x08 : 0x00).     out.writeByte(b).     if ((b & 0x01) != 0) {         out.writeUTF(text).     }     if ((b & 0x02) != 0) {         out.writeUTF(encoding).     }     if ((b & 0x04) != 0) {         out.writeUTF(getPublicId()).     }     if ((b & 0x08) != 0) {         out.writeUTF(getSystemId()).     } }
false;public;1;15;;public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {     int b = in.readByte().     if ((b & 0x01) != 0) {         text = in.readUTF().     }     if ((b & 0x02) != 0) {         encoding = in.readUTF().     }     if ((b & 0x04) != 0) {         setPublicId(in.readUTF()).     }     if ((b & 0x08) != 0) {         setSystemId(in.readUTF()).     } }
