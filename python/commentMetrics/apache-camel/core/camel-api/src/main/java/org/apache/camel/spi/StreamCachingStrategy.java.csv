commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the counter for number of in-memory {@link StreamCache} created.  */ ;/**  * Gets the counter for number of in-memory {@link StreamCache} created.  */ long getCacheMemoryCounter().
true;;0;1;/**  * Gets the total accumulated number of bytes which has been stream cached for in-memory stream caches.  */ ;/**  * Gets the total accumulated number of bytes which has been stream cached for in-memory stream caches.  */ long getCacheMemorySize().
true;;0;1;/**  * Gets the average number of bytes per cached stream for in-memory stream caches.  */ ;/**  * Gets the average number of bytes per cached stream for in-memory stream caches.  */ long getCacheMemoryAverageSize().
true;;0;1;/**  * Gets the counter for number of spooled (not in-memory) {@link StreamCache} created.  */ ;/**  * Gets the counter for number of spooled (not in-memory) {@link StreamCache} created.  */ long getCacheSpoolCounter().
true;;0;1;/**  * Gets the total accumulated number of bytes which has been stream cached for spooled stream caches.  */ ;/**  * Gets the total accumulated number of bytes which has been stream cached for spooled stream caches.  */ long getCacheSpoolSize().
true;;0;1;/**  * Gets the average number of bytes per cached stream for spooled (not in-memory) stream caches.  */ ;/**  * Gets the average number of bytes per cached stream for spooled (not in-memory) stream caches.  */ long getCacheSpoolAverageSize().
true;;0;1;/**  * Reset the counters  */ ;/**  * Reset the counters  */ void reset().
true;;0;1;/**  * Whether statistics is enabled.  */ ;/**  * Whether statistics is enabled.  */ boolean isStatisticsEnabled().
true;;1;1;/**  * Sets whether statistics is enabled.  *  * @param statisticsEnabled <tt>true</tt> to enable  */ ;/**  * Sets whether statistics is enabled.  *  * @param statisticsEnabled <tt>true</tt> to enable  */ void setStatisticsEnabled(boolean statisticsEnabled).
true;;1;1;/**  * Determines if the stream should be spooled or not. For example if the stream length is  * over a threshold.  * <p/>  * This allows implementations to use custom strategies to determine if spooling is needed or not.  *  * @param length the length of the stream  * @return <tt>true</tt> to spool the cache, or <tt>false</tt> to keep the cache in-memory  */ ;/**  * Determines if the stream should be spooled or not. For example if the stream length is  * over a threshold.  * <p/>  * This allows implementations to use custom strategies to determine if spooling is needed or not.  *  * @param length the length of the stream  * @return <tt>true</tt> to spool the cache, or <tt>false</tt> to keep the cache in-memory  */ boolean shouldSpoolCache(long length).
true;;1;1;/**  * Sets whether the stream caching is enabled.  * <p/>  * <b>Notice:</b> This cannot be changed at runtime.  */ ;/**  * Sets whether the stream caching is enabled.  * <p/>  * <b>Notice:</b> This cannot be changed at runtime.  */ void setEnabled(boolean enabled).
false;;0;1;;boolean isEnabled().
true;;1;1;/**  * Sets the spool (temporary) directory to use for overflow and spooling to disk.  * <p/>  * If no spool directory has been explicit configured, then a temporary directory  * is created in the <tt>java.io.tmpdir</tt> directory.  */ ;/**  * Sets the spool (temporary) directory to use for overflow and spooling to disk.  * <p/>  * If no spool directory has been explicit configured, then a temporary directory  * is created in the <tt>java.io.tmpdir</tt> directory.  */ void setSpoolDirectory(File path).
false;;0;1;;File getSpoolDirectory().
false;;1;1;;void setSpoolDirectory(String path).
true;;1;1;/**  * Threshold in bytes when overflow to disk is activated.  * <p/>  * The default threshold is {@link org.apache.camel.StreamCache#DEFAULT_SPOOL_THRESHOLD} bytes (eg 128kb).  * Use <tt>-1</tt> to disable overflow to disk.  */ ;/**  * Threshold in bytes when overflow to disk is activated.  * <p/>  * The default threshold is {@link org.apache.camel.StreamCache#DEFAULT_SPOOL_THRESHOLD} bytes (eg 128kb).  * Use <tt>-1</tt> to disable overflow to disk.  */ void setSpoolThreshold(long threshold).
false;;0;1;;long getSpoolThreshold().
true;;1;1;/**  * Sets a percentage (1-99) of used heap memory threshold to activate spooling to disk.  *  * @param percentage percentage of used heap memory.  */ ;/**  * Sets a percentage (1-99) of used heap memory threshold to activate spooling to disk.  *  * @param percentage percentage of used heap memory.  */ void setSpoolUsedHeapMemoryThreshold(int percentage).
false;;0;1;;int getSpoolUsedHeapMemoryThreshold().
true;;1;1;/**  * Sets what the upper bounds should be when {@link #setSpoolUsedHeapMemoryThreshold(int)}  * is in use.  *  * @param bounds the bounds  */ ;/**  * Sets what the upper bounds should be when {@link #setSpoolUsedHeapMemoryThreshold(int)}  * is in use.  *  * @param bounds the bounds  */ void setSpoolUsedHeapMemoryLimit(SpoolUsedHeapMemoryLimit bounds).
false;;0;1;;SpoolUsedHeapMemoryLimit getSpoolUsedHeapMemoryLimit().
true;;1;1;/**  * Sets the buffer size to use when allocating in-memory buffers used for in-memory stream caches.  * <p/>  * The default size is {@link org.apache.camel.util.IOHelper#DEFAULT_BUFFER_SIZE}  */ ;/**  * Sets the buffer size to use when allocating in-memory buffers used for in-memory stream caches.  * <p/>  * The default size is {@link org.apache.camel.util.IOHelper#DEFAULT_BUFFER_SIZE}  */ void setBufferSize(int bufferSize).
false;;0;1;;int getBufferSize().
true;;1;1;/**  * Sets a chiper name to use when spooling to disk to write with encryption.  * <p/>  * By default the data is not encrypted.  */ ;/**  * Sets a chiper name to use when spooling to disk to write with encryption.  * <p/>  * By default the data is not encrypted.  */ void setSpoolChiper(String chiper).
false;;0;1;;String getSpoolChiper().
true;;1;1;/**  * Whether to remove the temporary directory when stopping.  * <p/>  * This option is default <tt>true</tt>  */ ;/**  * Whether to remove the temporary directory when stopping.  * <p/>  * This option is default <tt>true</tt>  */ void setRemoveSpoolDirectoryWhenStopping(boolean remove).
false;;0;1;;boolean isRemoveSpoolDirectoryWhenStopping().
true;;1;1;/**  * Sets whether if just any of the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rules  * returns <tt>true</tt> then {@link #shouldSpoolCache(long)} returns <tt>true</tt>.  * If this option is <tt>false</tt>, then <b>all</b> the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} must  * return <tt>true</tt>.  * <p/>  * The default value is <tt>false</tt> which means that all the rules must return <tt>true</tt>.  */ ;/**  * Sets whether if just any of the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rules  * returns <tt>true</tt> then {@link #shouldSpoolCache(long)} returns <tt>true</tt>.  * If this option is <tt>false</tt>, then <b>all</b> the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} must  * return <tt>true</tt>.  * <p/>  * The default value is <tt>false</tt> which means that all the rules must return <tt>true</tt>.  */ void setAnySpoolRules(boolean any).
false;;0;1;;boolean isAnySpoolRules().
true;;0;1;/**  * Gets the utilization statistics.  */ ;/**  * Gets the utilization statistics.  */ Statistics getStatistics().
true;;1;1;/**  * Adds the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rule to be used.  */ ;/**  * Adds the {@link org.apache.camel.spi.StreamCachingStrategy.SpoolRule} rule to be used.  */ void addSpoolRule(SpoolRule rule).
true;;1;1;/**  * Determines if the stream should be spooled or not. For example if the stream length is  * over a threshold.  * <p/>  * This allows implementations to use custom strategies to determine if spooling is needed or not.  *  * @param length the length of the stream  * @return <tt>true</tt> to spool the cache, or <tt>false</tt> to keep the cache in-memory  */ ;/**  * Determines if the stream should be spooled or not. For example if the stream length is  * over a threshold.  * <p/>  * This allows implementations to use custom strategies to determine if spooling is needed or not.  *  * @param length the length of the stream  * @return <tt>true</tt> to spool the cache, or <tt>false</tt> to keep the cache in-memory  */ boolean shouldSpoolCache(long length).
true;;1;1;/**  * Caches the body aas a {@link StreamCache}.  *  * @param exchange the exchange  * @return the body cached as a {@link StreamCache}, or <tt>null</tt> if not possible or no need to cache the body  */ ;/**  * Caches the body aas a {@link StreamCache}.  *  * @param exchange the exchange  * @return the body cached as a {@link StreamCache}, or <tt>null</tt> if not possible or no need to cache the body  */ StreamCache cache(Exchange exchange).
