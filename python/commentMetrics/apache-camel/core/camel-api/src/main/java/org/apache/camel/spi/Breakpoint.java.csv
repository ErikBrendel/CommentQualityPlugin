commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the state of this break  *  * @return the state  */ ;/**  * Gets the state of this break  *  * @return the state  */ State getState().
true;;0;1;/**  * Suspend this breakpoint  */ ;/**  * Suspend this breakpoint  */ void suspend().
true;;0;1;/**  * Activates this breakpoint  */ ;/**  * Activates this breakpoint  */ void activate().
true;;3;1;/**  * Callback invoked when the breakpoint was hit and the {@link Exchange} is about to be processed (before).  *  @param exchange   the {@link Exchange}  * @param processor  the {@link Processor} about to be processed  * @param definition the {@link NamedNode} definition of the processor  */ ;/**  * Callback invoked when the breakpoint was hit and the {@link Exchange} is about to be processed (before).  *  @param exchange   the {@link Exchange}  * @param processor  the {@link Processor} about to be processed  * @param definition the {@link NamedNode} definition of the processor  */ void beforeProcess(Exchange exchange, Processor processor, NamedNode definition).
true;;4;1;/**  * Callback invoked when the breakpoint was hit and the {@link Exchange} has been processed (after).  *  @param exchange   the {@link Exchange}  * @param processor  the {@link Processor} which was processed  * @param definition the {@link NamedNode} definition of the processor  * @param timeTaken  time in millis it took to process the {@link Exchange} - time spend in breakpoint callbacks may affect this time  */ ;/**  * Callback invoked when the breakpoint was hit and the {@link Exchange} has been processed (after).  *  @param exchange   the {@link Exchange}  * @param processor  the {@link Processor} which was processed  * @param definition the {@link NamedNode} definition of the processor  * @param timeTaken  time in millis it took to process the {@link Exchange} - time spend in breakpoint callbacks may affect this time  */ void afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken).
true;;3;1;/**  * Callback invoked when the breakpoint was hit and any of the {@link Exchange} {@link EventObject event}s occurred.  *  * @param exchange   the {@link Exchange}  * @param event      the event (instance of {@link ExchangeEvent}  * @param definition the {@link NamedNode} definition of the last processor executed,  *                   may be <tt>null</tt> if not possible to resolve from tracing  * @see ExchangeEvent  */ ;/**  * Callback invoked when the breakpoint was hit and any of the {@link Exchange} {@link EventObject event}s occurred.  *  * @param exchange   the {@link Exchange}  * @param event      the event (instance of {@link ExchangeEvent}  * @param definition the {@link NamedNode} definition of the last processor executed,  *                   may be <tt>null</tt> if not possible to resolve from tracing  * @see ExchangeEvent  */ void onEvent(Exchange exchange, ExchangeEvent event, NamedNode definition).
