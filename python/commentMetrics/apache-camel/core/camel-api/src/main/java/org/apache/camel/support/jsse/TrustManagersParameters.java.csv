commented;modifiers;parameterAmount;loc;comment;code
true;public;0;35;/**  * Creates {@link TrustManager}s based on this instance's configuration and the  * {@code KeyStore} produced by the configuration returned from  * {@link #getKeyStore()}. The {@code KeyManager}s are produced from a  * factory created by using the provider and algorithm identifiers returned  * by {@link #getProvider()} and {@link #getAlgorithm()}, respectively. If  * either of these methods returns null, the default JSSE value is used  * instead.  *  * @return the initialized {@code TrustManager}s  * @throws GeneralSecurityException if there is an error creating the  *             {@code TrustManagers}s or in creating the {@code KeyStore}  * @throws IOException if there is an error loading the {@code KeyStore}  *  * @see KeyStoreParameters#createKeyStore()  */ ;/**  * Creates {@link TrustManager}s based on this instance's configuration and the  * {@code KeyStore} produced by the configuration returned from  * {@link #getKeyStore()}. The {@code KeyManager}s are produced from a  * factory created by using the provider and algorithm identifiers returned  * by {@link #getProvider()} and {@link #getAlgorithm()}, respectively. If  * either of these methods returns null, the default JSSE value is used  * instead.  *  * @return the initialized {@code TrustManager}s  * @throws GeneralSecurityException if there is an error creating the  *             {@code TrustManagers}s or in creating the {@code KeyStore}  * @throws IOException if there is an error loading the {@code KeyStore}  *  * @see KeyStoreParameters#createKeyStore()  */ public TrustManager[] createTrustManagers() throws GeneralSecurityException, IOException {     if (trustManager != null) {         // use existing trust manager         return new TrustManager[] { trustManager }.     }     LOG.trace("Creating TrustManager[] from TrustManagersParameters [{}]", this).     TrustManager[] trustManagers = null.     if (this.getKeyStore() != null) {         String tmfAlgorithm = this.parsePropertyValue(this.getAlgorithm()).         if (tmfAlgorithm == null) {             tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm().         }         TrustManagerFactory tmf.         if (this.getProvider() == null) {             tmf = TrustManagerFactory.getInstance(tmfAlgorithm).         } else {             tmf = TrustManagerFactory.getInstance(tmfAlgorithm, this.parsePropertyValue(this.getProvider())).         }         LOG.debug("TrustManagerFactory [{}] is using provider [{}] and algorithm [{}].", new Object[] { tmf, tmf.getProvider(), tmf.getAlgorithm() }).         KeyStore ks = this.getKeyStore() == null ? null : this.getKeyStore().createKeyStore().         tmf.init(ks).         trustManagers = tmf.getTrustManagers().         LOG.debug("TrustManager[] [{}], initialized from TrustManagerFactory [{}].", trustManagers, tmf).     }     return trustManagers. }
false;public;0;3;;public KeyStoreParameters getKeyStore() {     return keyStore. }
true;public;1;3;/**  * Sets the key store configuration used to create the {@link KeyStoreParameters} that the  * {@link TrustManager}s produced by this object's configuration expose.  *  * @param value the configuration to use  */ ;/**  * Sets the key store configuration used to create the {@link KeyStoreParameters} that the  * {@link TrustManager}s produced by this object's configuration expose.  *  * @param value the configuration to use  */ public void setKeyStore(KeyStoreParameters value) {     this.keyStore = value. }
false;public;0;3;;public String getProvider() {     return provider. }
true;public;1;3;/**  * Sets the optional provider identifier for the {@link TrustManagerFactory}  * used to create the {@link TrustManager}s represented by this object's  * configuration.  *  * @param value the desired provider identifier or {@code null} to use the  *            highest priority provider implementing the algorithm  *  * @see Security#getProviders()  */ ;/**  * Sets the optional provider identifier for the {@link TrustManagerFactory}  * used to create the {@link TrustManager}s represented by this object's  * configuration.  *  * @param value the desired provider identifier or {@code null} to use the  *            highest priority provider implementing the algorithm  *  * @see Security#getProviders()  */ public void setProvider(String value) {     this.provider = value. }
false;public;0;3;;public String getAlgorithm() {     return algorithm. }
true;public;1;3;/**  * Sets optional algorithm name for the {@link TrustManagerFactory} used to create  * the {@link TrustManager}s represented by this object's configuration.  See the <a href=  * "http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html"  * >Java Secure Socket Extension Reference Guide</a> for information about  * standard algorithm names.  *  * @param value the desired algorithm or {@code null} to use default  *  * @see TrustManagerFactory#getDefaultAlgorithm()  */ ;/**  * Sets optional algorithm name for the {@link TrustManagerFactory} used to create  * the {@link TrustManager}s represented by this object's configuration.  See the <a href=  * "http://download.oracle.com/javase/6/docs/technotes/guides/security/jsse/JSSERefGuide.html"  * >Java Secure Socket Extension Reference Guide</a> for information about  * standard algorithm names.  *  * @param value the desired algorithm or {@code null} to use default  *  * @see TrustManagerFactory#getDefaultAlgorithm()  */ public void setAlgorithm(String value) {     this.algorithm = value. }
false;public;0;3;;public TrustManager getTrustManager() {     return trustManager. }
true;public;1;3;/**  * To use a existing configured trust manager instead of using {@link TrustManagerFactory} to  * get the {@link TrustManager}.  */ ;/**  * To use a existing configured trust manager instead of using {@link TrustManagerFactory} to  * get the {@link TrustManager}.  */ public void setTrustManager(TrustManager trustManager) {     this.trustManager = trustManager. }
false;public;0;18;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     if (trustManager != null) {         builder.append("TrustManagerType[trustManager=").         builder.append(trustManager).         builder.append("]").     } else {         builder.append("TrustManagerType[keyStore=").         builder.append(keyStore).         builder.append(", provider=").         builder.append(provider).         builder.append(", algorithm=").         builder.append(algorithm).         builder.append("]").     }     return builder.toString(). }
