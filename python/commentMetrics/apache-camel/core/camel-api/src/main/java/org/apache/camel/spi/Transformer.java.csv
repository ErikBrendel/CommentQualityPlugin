commented;modifiers;parameterAmount;loc;comment;code
true;public,abstract;3;1;/**  * Perform data transformation with specified from/to type.  *  * @param message message to apply transformation  * @param from 'from' data type  * @param to 'to' data type  */ ;/**  * Perform data transformation with specified from/to type.  *  * @param message message to apply transformation  * @param from 'from' data type  * @param to 'to' data type  */ public abstract void transform(Message message, DataType from, DataType to) throws Exception.
true;public;0;3;/**  * Get a data model which is supported by this transformer.  */ ;/**  * Get a data model which is supported by this transformer.  */ public String getModel() {     return model. }
true;public;0;3;/**  * Get 'from' data type.  */ ;/**  * Get 'from' data type.  */ public DataType getFrom() {     return from. }
true;public;0;3;/**  * Get 'to' data type.  */ ;/**  * Get 'to' data type.  */ public DataType getTo() {     return to. }
true;public;1;4;/**  * Set data model.  *  * @param model data model  */ ;/**  * Set data model.  *  * @param model data model  */ public Transformer setModel(String model) {     this.model = model.     return this. }
true;public;1;4;/**  * Set 'from' data type.  *  * @param from 'from' data type  */ ;/**  * Set 'from' data type.  *  * @param from 'from' data type  */ public Transformer setFrom(String from) {     this.from = new DataType(from).     return this. }
true;public;1;4;/**  * Set 'to' data type.  *  * @param to 'to' data type  */ ;/**  * Set 'to' data type.  *  * @param to 'to' data type  */ public Transformer setTo(String to) {     this.to = new DataType(to).     return this. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return this.camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext context) {     this.camelContext = context. }
false;public;0;4;;@Override public String toString() {     return String.format("%s[scheme='%s', from='%s', to='%s']", this.getClass().getSimpleName(), model, from, to). }
false;protected;0;4;;@Override protected void doStart() throws Exception { // no-op }
false;protected;0;4;;@Override protected void doStop() throws Exception { // no-op }
