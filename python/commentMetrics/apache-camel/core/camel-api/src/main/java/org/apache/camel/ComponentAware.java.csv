commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Injects the {@link Component}  *  * @param component the component  */ ;/**  * Injects the {@link Component}  *  * @param component the component  */ void setComponent(Component component).
true;;0;1;/**  * Get the {@link Component}  *  * @return the component  */ ;/**  * Get the {@link Component}  *  * @return the component  */ Component getComponent().
true;default;1;15;/**  * Get the {@link Component} as the specified type.  *  * @param type the proprietary class or interface of the underlying concrete Component.  * @return an instance of the underlying concrete Component as the required type.  * @throws IllegalArgumentException if the component class can't be cast to required type,  */ ;/**  * Get the {@link Component} as the specified type.  *  * @param type the proprietary class or interface of the underlying concrete Component.  * @return an instance of the underlying concrete Component as the required type.  * @throws IllegalArgumentException if the component class can't be cast to required type,  */ default <T extends Component> T getComponent(Class<T> type) {     final Component component = getComponent().     if (component == null) {         return null.     }     if (Component.class.isAssignableFrom(type)) {         return type.cast(component).     }     throw new IllegalArgumentException("Unable to unwrap the Component type (" + component.getClass() + ") to the required type (" + type + ")"). }
