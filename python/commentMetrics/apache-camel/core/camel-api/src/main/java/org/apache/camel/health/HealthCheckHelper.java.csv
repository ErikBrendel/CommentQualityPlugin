commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Get the group of the given check or an empty string if the group is not set.  *  * @param check the health check  * @return the {@link HealthCheck#getGroup()} or an empty string if it is <code>null</code>  */ ;/**  * Get the group of the given check or an empty string if the group is not set.  *  * @param check the health check  * @return the {@link HealthCheck#getGroup()} or an empty string if it is <code>null</code>  */ public static String getGroup(HealthCheck check) {     return ObjectHelper.supplyIfEmpty(check.getGroup(), () -> ""). }
true;public,static;1;3;/**  * Invokes the checks and returns a collection of results.  */ ;/**  * Invokes the checks and returns a collection of results.  */ public static Collection<HealthCheck.Result> invoke(CamelContext camelContext) {     return invoke(camelContext, check -> Collections.emptyMap(), check -> false). }
true;public,static;2;6;/**  * Invokes the checks and returns a collection of results.  */ ;/**  * Invokes the checks and returns a collection of results.  */ public static Collection<HealthCheck.Result> invoke(CamelContext camelContext, Function<HealthCheck, Map<String, Object>> optionsSupplier) {     return invoke(camelContext, optionsSupplier, check -> false). }
true;public,static;2;6;/**  * Invokes the checks and returns a collection of results.  */ ;/**  * Invokes the checks and returns a collection of results.  */ public static Collection<HealthCheck.Result> invoke(CamelContext camelContext, HealthCheckFilter filter) {     return invoke(camelContext, check -> Collections.emptyMap(), filter). }
true;public,static;3;32;/**  * Invokes the checks and returns a collection of results.  *  * @param camelContext the camel context.  * @param optionsSupplier a supplier for options.  * @param filter filter to exclude some checks.  */ ;/**  * Invokes the checks and returns a collection of results.  *  * @param camelContext the camel context.  * @param optionsSupplier a supplier for options.  * @param filter filter to exclude some checks.  */ public static Collection<HealthCheck.Result> invoke(CamelContext camelContext, Function<HealthCheck, Map<String, Object>> optionsSupplier, HealthCheckFilter filter) {     final HealthCheckRegistry registry = HealthCheckRegistry.get(camelContext).     final HealthCheckService service = camelContext.hasService(HealthCheckService.class).     if (service != null) {         // of the checks hold by the service.         return service.getResults().stream().filter(result -> !filter.test(result.getCheck())).collect(Collectors.toList()).     } else if (registry != null) {         // check one by one.         return registry.stream().collect(Collectors.groupingBy(HealthCheckHelper::getGroup)).entrySet().stream().map(Map.Entry::getValue).flatMap(Collection::stream).filter(check -> !filter.test(check)).sorted(Comparator.comparingInt(HealthCheck::getOrder)).map(check -> check.call(optionsSupplier.apply(check))).collect(Collectors.toList()).     } else {         LOGGER.debug("No health check source found").     }     return Collections.emptyList(). }
true;public,static;3;16;/**  * Query the status of a check by id. Note that this may result in an effective  * invocation of the {@link HealthCheck}, i.e. when no {@link HealthCheckService}  * is available.  *  * @param camelContext the camel context.  * @param id the check id.  * @param options the check options.  * @return an optional {@link HealthCheck.Result}.  */ ;/**  * Query the status of a check by id. Note that this may result in an effective  * invocation of the {@link HealthCheck}, i.e. when no {@link HealthCheckService}  * is available.  *  * @param camelContext the camel context.  * @param id the check id.  * @param options the check options.  * @return an optional {@link HealthCheck.Result}.  */ public static Optional<HealthCheck.Result> query(CamelContext camelContext, String id, Map<String, Object> options) {     final HealthCheckRegistry registry = HealthCheckRegistry.get(camelContext).     final HealthCheckService service = camelContext.hasService(HealthCheckService.class).     if (service != null) {         return service.getResults().stream().filter(result -> ObjectHelper.equal(result.getCheck().getId(), id)).findFirst().     } else if (registry != null) {         return registry.getCheck(id).map(check -> check.call(options)).     } else {         LOGGER.debug("No health check source found").     }     return Optional.empty(). }
true;public,static;3;14;/**  * Invoke a check by id.  *  * @param camelContext the camel context.  * @param id the check id.  * @param options the check options.  * @return an optional {@link HealthCheck.Result}.  */ ;/**  * Invoke a check by id.  *  * @param camelContext the camel context.  * @param id the check id.  * @param options the check options.  * @return an optional {@link HealthCheck.Result}.  */ public static Optional<HealthCheck.Result> invoke(CamelContext camelContext, String id, Map<String, Object> options) {     final HealthCheckRegistry registry = HealthCheckRegistry.get(camelContext).     final HealthCheckService service = camelContext.hasService(HealthCheckService.class).     if (service != null) {         return service.call(id, options).     } else if (registry != null) {         return registry.getCheck(id).map(check -> check.call(options)).     } else {         LOGGER.debug("No health check source found").     }     return Optional.empty(). }
