commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Whether the type converter allows returning null as a valid response.  * <p/>  * By default <tt>null</tt> is not a valid response, returning <tt>false</tt> from this method.  */ ;/**  * Whether the type converter allows returning null as a valid response.  * <p/>  * By default <tt>null</tt> is not a valid response, returning <tt>false</tt> from this method.  */ boolean allowNull().
true;;2;1;/**  * Converts the value to the specified type  *  * @param type the requested type  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  * @throws TypeConversionException is thrown if error during type conversion  */ ;/**  * Converts the value to the specified type  *  * @param type the requested type  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  * @throws TypeConversionException is thrown if error during type conversion  */ <T> T convertTo(Class<T> type, Object value) throws TypeConversionException.
true;;3;1;/**  * Converts the value to the specified type in the context of an exchange  * <p/>  * Used when conversion requires extra information from the current  * exchange (such as encoding).  *  * @param type the requested type  * @param exchange the current exchange  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  * @throws TypeConversionException is thrown if error during type conversion  */ ;/**  * Converts the value to the specified type in the context of an exchange  * <p/>  * Used when conversion requires extra information from the current  * exchange (such as encoding).  *  * @param type the requested type  * @param exchange the current exchange  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  * @throws TypeConversionException is thrown if error during type conversion  */ <T> T convertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException.
true;;2;1;/**  * Converts the value to the specified type  *  * @param type the requested type  * @param value the value to be converted  * @return the converted value, is never <tt>null</tt>  * @throws TypeConversionException is thrown if error during type conversion  * @throws NoTypeConversionAvailableException if no type converters exists to convert to the given type  */ ;/**  * Converts the value to the specified type  *  * @param type the requested type  * @param value the value to be converted  * @return the converted value, is never <tt>null</tt>  * @throws TypeConversionException is thrown if error during type conversion  * @throws NoTypeConversionAvailableException if no type converters exists to convert to the given type  */ <T> T mandatoryConvertTo(Class<T> type, Object value) throws TypeConversionException, NoTypeConversionAvailableException.
true;;3;1;/**  * Converts the value to the specified type in the context of an exchange  * <p/>  * Used when conversion requires extra information from the current  * exchange (such as encoding).  *  * @param type the requested type  * @param exchange the current exchange  * @param value the value to be converted  * @return the converted value, is never <tt>null</tt>  * @throws TypeConversionException is thrown if error during type conversion  * @throws NoTypeConversionAvailableException if no type converters exists to convert to the given type  */ ;/**  * Converts the value to the specified type in the context of an exchange  * <p/>  * Used when conversion requires extra information from the current  * exchange (such as encoding).  *  * @param type the requested type  * @param exchange the current exchange  * @param value the value to be converted  * @return the converted value, is never <tt>null</tt>  * @throws TypeConversionException is thrown if error during type conversion  * @throws NoTypeConversionAvailableException if no type converters exists to convert to the given type  */ <T> T mandatoryConvertTo(Class<T> type, Exchange exchange, Object value) throws TypeConversionException, NoTypeConversionAvailableException.
true;;2;1;/**  * Tries to convert the value to the specified type,  * returning <tt>null</tt> if not possible to convert.  * <p/>  * This method will <b>not</b> throw an exception if an exception occurred during conversion.  *  * @param type the requested type  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  */ ;/**  * Tries to convert the value to the specified type,  * returning <tt>null</tt> if not possible to convert.  * <p/>  * This method will <b>not</b> throw an exception if an exception occurred during conversion.  *  * @param type the requested type  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  */ <T> T tryConvertTo(Class<T> type, Object value).
true;;3;1;/**  * Tries to convert the value to the specified type in the context of an exchange,  * returning <tt>null</tt> if not possible to convert.  * <p/>  * This method will <b>not</b> throw an exception if an exception occurred during conversion.  * Converts the value to the specified type in the context of an exchange  * <p/>  * Used when conversion requires extra information from the current  * exchange (such as encoding).  *  * @param type the requested type  * @param exchange the current exchange  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  */ ;/**  * Tries to convert the value to the specified type in the context of an exchange,  * returning <tt>null</tt> if not possible to convert.  * <p/>  * This method will <b>not</b> throw an exception if an exception occurred during conversion.  * Converts the value to the specified type in the context of an exchange  * <p/>  * Used when conversion requires extra information from the current  * exchange (such as encoding).  *  * @param type the requested type  * @param exchange the current exchange  * @param value the value to be converted  * @return the converted value, or <tt>null</tt> if not possible to convert  */ <T> T tryConvertTo(Class<T> type, Exchange exchange, Object value).
