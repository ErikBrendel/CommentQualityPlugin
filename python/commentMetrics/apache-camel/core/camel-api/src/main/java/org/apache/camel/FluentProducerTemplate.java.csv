commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Get the {@link CamelContext}  *  * @return camelContext the Camel context  */ ;/**  * Get the {@link CamelContext}  *  * @return camelContext the Camel context  */ CamelContext getCamelContext().
true;;0;1;/**  * Gets the maximum cache size used in the backing cache pools.  *  * @return the maximum cache size  */ ;// Configuration methods // ----------------------------------------------------------------------- /**  * Gets the maximum cache size used in the backing cache pools.  *  * @return the maximum cache size  */ int getMaximumCacheSize().
true;;1;1;/**  * Sets a custom maximum cache size to use in the backing cache pools.  *  * @param maximumCacheSize the custom maximum cache size  */ ;/**  * Sets a custom maximum cache size to use in the backing cache pools.  *  * @param maximumCacheSize the custom maximum cache size  */ void setMaximumCacheSize(int maximumCacheSize).
true;;0;1;/**  * Gets an approximated size of the current cached resources in the backing cache pools.  *  * @return the size of current cached resources  */ ;/**  * Gets an approximated size of the current cached resources in the backing cache pools.  *  * @return the size of current cached resources  */ int getCurrentCacheSize().
true;;0;1;/**  * Get the default endpoint to use if none is specified  *  * @return the default endpoint instance  */ ;/**  * Get the default endpoint to use if none is specified  *  * @return the default endpoint instance  */ Endpoint getDefaultEndpoint().
true;;1;1;/**  * Sets the default endpoint to use if none is specified  *  * @param defaultEndpoint the default endpoint instance  */ ;/**  * Sets the default endpoint to use if none is specified  *  * @param defaultEndpoint the default endpoint instance  */ void setDefaultEndpoint(Endpoint defaultEndpoint).
true;;1;1;/**  * Sets the default endpoint uri to use if none is specified  *  *  @param endpointUri the default endpoint uri  */ ;/**  * Sets the default endpoint uri to use if none is specified  *  *  @param endpointUri the default endpoint uri  */ void setDefaultEndpointUri(String endpointUri).
true;;1;1;/**  * Sets whether the {@link org.apache.camel.spi.EventNotifier} should be  * used by this {@link ProducerTemplate} to send events about the {@link Exchange}  * being sent.  * <p/>  * By default this is enabled.  *  * @param enabled <tt>true</tt> to enable, <tt>false</tt> to disable.  */ ;/**  * Sets whether the {@link org.apache.camel.spi.EventNotifier} should be  * used by this {@link ProducerTemplate} to send events about the {@link Exchange}  * being sent.  * <p/>  * By default this is enabled.  *  * @param enabled <tt>true</tt> to enable, <tt>false</tt> to disable.  */ void setEventNotifierEnabled(boolean enabled).
true;;0;1;/**  * Whether the {@link org.apache.camel.spi.EventNotifier} should be  * used by this {@link ProducerTemplate} to send events about the {@link Exchange}  * being sent.  *  * @return <tt>true</tt> if enabled, <tt>false</tt> otherwise  */ ;/**  * Whether the {@link org.apache.camel.spi.EventNotifier} should be  * used by this {@link ProducerTemplate} to send events about the {@link Exchange}  * being sent.  *  * @return <tt>true</tt> if enabled, <tt>false</tt> otherwise  */ boolean isEventNotifierEnabled().
true;;0;1;/**  * Cleanup the cache (purging stale entries)  */ ;/**  * Cleanup the cache (purging stale entries)  */ void cleanUp().
true;;0;1;/**  * Remove the body and headers.  */ ;// Fluent methods // ----------------------------------------------------------------------- /**  * Remove the body and headers.  */ FluentProducerTemplate clearAll().
true;;2;1;/**  * Set the header  *  * @param key the key of the header  * @param value the value of the header  */ ;/**  * Set the header  *  * @param key the key of the header  * @param value the value of the header  */ FluentProducerTemplate withHeader(String key, Object value).
true;;0;1;/**  * Remove the headers.  */ ;/**  * Remove the headers.  */ FluentProducerTemplate clearHeaders().
true;;1;1;/**  * Set the message body  *  * @param body the body  */ ;/**  * Set the message body  *  * @param body the body  */ FluentProducerTemplate withBody(Object body).
true;;2;1;/**  * Set the message body after converting it to the given type  *  * @param body the body  * @param type the type which the body should be converted to  */ ;/**  * Set the message body after converting it to the given type  *  * @param body the body  * @param type the type which the body should be converted to  */ FluentProducerTemplate withBodyAs(Object body, Class<?> type).
true;;0;1;/**  * Remove the body.  */ ;/**  * Remove the body.  */ FluentProducerTemplate clearBody().
true;;1;1;/**  * To customize the producer template for advanced usage like to set the  * executor service to use.  *  * <pre>  * {@code  * FluentProducerTemplate.on(context)  *     .withTemplateCustomizer(  *         template -> {  *             template.setExecutorService(myExecutor).  *             template.setMaximumCacheSize(10).  *         }  *      )  *     .withBody("the body")  *     .to("direct:start")  *     .request()}  * </pre>  *  * Note that it is invoked only once.  *  * @param templateCustomizer the customizer  */ ;/**  * To customize the producer template for advanced usage like to set the  * executor service to use.  *  * <pre>  * {@code  * FluentProducerTemplate.on(context)  *     .withTemplateCustomizer(  *         template -> {  *             template.setExecutorService(myExecutor).  *             template.setMaximumCacheSize(10).  *         }  *      )  *     .withBody("the body")  *     .to("direct:start")  *     .request()}  * </pre>  *  * Note that it is invoked only once.  *  * @param templateCustomizer the customizer  */ FluentProducerTemplate withTemplateCustomizer(java.util.function.Consumer<ProducerTemplate> templateCustomizer).
true;;1;1;/**  * Set the exchange to use for send.  *  * When using withExchange then you must use the send method (request is not supported).  *  * @param exchange the exchange  */ ;/**  * Set the exchange to use for send.  *  * When using withExchange then you must use the send method (request is not supported).  *  * @param exchange the exchange  */ FluentProducerTemplate withExchange(Exchange exchange).
true;;1;1;/**  * Set the exchangeSupplier which will be invoke to get the exchange to be  * used for send.  *  * When using withExchange then you must use the send method (request is not supported).  *  * @param exchangeSupplier the supplier  */ ;/**  * Set the exchangeSupplier which will be invoke to get the exchange to be  * used for send.  *  * When using withExchange then you must use the send method (request is not supported).  *  * @param exchangeSupplier the supplier  */ FluentProducerTemplate withExchange(Supplier<Exchange> exchangeSupplier).
true;;1;1;/**  * Set the processor to use for send/request.  *  * <pre>  * {@code  * FluentProducerTemplate.on(context)  *     .withProcessor(  *         exchange -> {  *             exchange.getIn().setHeader("Key1", "Val1").  *             exchange.getIn().setHeader("Key2", "Val2").  *             exchange.getIn().setBody("the body").  *         }  *      )  *     .to("direct:start")  *     .request()}  * </pre>  *  * @param processor  */ ;/**  * Set the processor to use for send/request.  *  * <pre>  * {@code  * FluentProducerTemplate.on(context)  *     .withProcessor(  *         exchange -> {  *             exchange.getIn().setHeader("Key1", "Val1").  *             exchange.getIn().setHeader("Key2", "Val2").  *             exchange.getIn().setBody("the body").  *         }  *      )  *     .to("direct:start")  *     .request()}  * </pre>  *  * @param processor  */ FluentProducerTemplate withProcessor(Processor processor).
true;;1;1;/**  * Set the processorSupplier which will be invoke to get the processor to be  * used for send/request.  *  * @param processorSupplier the supplier  */ ;/**  * Set the processorSupplier which will be invoke to get the processor to be  * used for send/request.  *  * @param processorSupplier the supplier  */ FluentProducerTemplate withProcessor(Supplier<Processor> processorSupplier).
true;;1;1;/**  * Endpoint to send to  *  * @param endpointUri the endpoint URI to send to  */ ;/**  * Endpoint to send to  *  * @param endpointUri the endpoint URI to send to  */ FluentProducerTemplate to(String endpointUri).
true;;1;1;/**  * Endpoint to send to  *  * @param endpoint the endpoint to send to  */ ;/**  * Endpoint to send to  *  * @param endpoint the endpoint to send to  */ FluentProducerTemplate to(Endpoint endpoint).
true;;0;1;/**  * Send to an endpoint (InOut) returning any result output body.  *  * @return the result  * @throws CamelExecutionException is thrown if error occurred  */ ;/**  * Send to an endpoint (InOut) returning any result output body.  *  * @return the result  * @throws CamelExecutionException is thrown if error occurred  */ Object request() throws CamelExecutionException.
true;;1;1;/**  * Send to an endpoint (InOut).  *  * @param type the expected response type  * @return the result  * @throws CamelExecutionException is thrown if error occurred  */ ;/**  * Send to an endpoint (InOut).  *  * @param type the expected response type  * @return the result  * @throws CamelExecutionException is thrown if error occurred  */ <T> T request(Class<T> type) throws CamelExecutionException.
true;;0;1;/**  * Sends asynchronously to the given endpoint (InOut).  *  * @return a handle to be used to get the response in the future  */ ;/**  * Sends asynchronously to the given endpoint (InOut).  *  * @return a handle to be used to get the response in the future  */ Future<Object> asyncRequest().
true;;1;1;/**  * Sends asynchronously to the given endpoint (InOut).  *  * @param type the expected response type  * @return a handle to be used to get the response in the future  */ ;/**  * Sends asynchronously to the given endpoint (InOut).  *  * @param type the expected response type  * @return a handle to be used to get the response in the future  */ <T> Future<T> asyncRequest(Class<T> type).
true;;0;1;/**  * Send to an endpoint (InOnly)  *  * @throws CamelExecutionException is thrown if error occurred  */ ;/**  * Send to an endpoint (InOnly)  *  * @throws CamelExecutionException is thrown if error occurred  */ Exchange send() throws CamelExecutionException.
true;;0;1;/**  * Sends asynchronously to the given endpoint (InOnly).  *  * @return a handle to be used to get the response in the future  */ ;/**  * Sends asynchronously to the given endpoint (InOnly).  *  * @return a handle to be used to get the response in the future  */ Future<Exchange> asyncSend().
