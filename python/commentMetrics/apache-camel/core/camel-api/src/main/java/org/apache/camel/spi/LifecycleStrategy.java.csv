commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Notification on starting a {@link CamelContext}.  *  * @param context the camel context  * @throws VetoCamelContextStartException can be thrown to veto starting {@link CamelContext}.  *                                        Any other runtime exceptions will be logged at <tt>WARN</tt> level by Camel will continue starting itself.  */ ;/**  * Notification on starting a {@link CamelContext}.  *  * @param context the camel context  * @throws VetoCamelContextStartException can be thrown to veto starting {@link CamelContext}.  *                                        Any other runtime exceptions will be logged at <tt>WARN</tt> level by Camel will continue starting itself.  */ void onContextStart(CamelContext context) throws VetoCamelContextStartException.
true;;1;1;/**  * Notification on stopping a {@link CamelContext}.  *  * @param context the camel context  */ ;/**  * Notification on stopping a {@link CamelContext}.  *  * @param context the camel context  */ void onContextStop(CamelContext context).
true;;2;1;/**  * Notification on adding an {@link org.apache.camel.Component}.  *  * @param name      the unique name of this component  * @param component the added component  */ ;/**  * Notification on adding an {@link org.apache.camel.Component}.  *  * @param name      the unique name of this component  * @param component the added component  */ void onComponentAdd(String name, Component component).
true;;2;1;/**  * Notification on removing an {@link org.apache.camel.Component}.  *  * @param name      the unique name of this component  * @param component the removed component  */ ;/**  * Notification on removing an {@link org.apache.camel.Component}.  *  * @param name      the unique name of this component  * @param component the removed component  */ void onComponentRemove(String name, Component component).
true;;1;1;/**  * Notification on adding an {@link Endpoint}.  *  * @param endpoint the added endpoint  */ ;/**  * Notification on adding an {@link Endpoint}.  *  * @param endpoint the added endpoint  */ void onEndpointAdd(Endpoint endpoint).
true;;1;1;/**  * Notification on removing an {@link Endpoint}.  *  * @param endpoint the removed endpoint  */ ;/**  * Notification on removing an {@link Endpoint}.  *  * @param endpoint the removed endpoint  */ void onEndpointRemove(Endpoint endpoint).
true;;3;1;/**  * Notification on adding a {@link Service}.  *  * @param context the camel context  * @param service the added service  * @param route   the route the service belongs to if any possible to determine  */ ;/**  * Notification on adding a {@link Service}.  *  * @param context the camel context  * @param service the added service  * @param route   the route the service belongs to if any possible to determine  */ void onServiceAdd(CamelContext context, Service service, Route route).
true;;3;1;/**  * Notification on removing a {@link Service}.  *  * @param context the camel context  * @param service the removed service  * @param route   the route the service belongs to if any possible to determine  */ ;/**  * Notification on removing a {@link Service}.  *  * @param context the camel context  * @param service the removed service  * @param route   the route the service belongs to if any possible to determine  */ void onServiceRemove(CamelContext context, Service service, Route route).
true;;1;1;/**  * Notification on adding {@link Route}(s).  *  * @param routes the added routes  */ ;/**  * Notification on adding {@link Route}(s).  *  * @param routes the added routes  */ void onRoutesAdd(Collection<Route> routes).
true;;1;1;/**  * Notification on removing {@link Route}(s).  *  * @param routes the removed routes  */ ;/**  * Notification on removing {@link Route}(s).  *  * @param routes the removed routes  */ void onRoutesRemove(Collection<Route> routes).
true;;1;1;/**  * Notification on adding {@link RouteContext}(s).  *  * @param routeContext the added route context  */ ;/**  * Notification on adding {@link RouteContext}(s).  *  * @param routeContext the added route context  */ void onRouteContextCreate(RouteContext routeContext).
true;;3;1;/**  * Notification on adding error handler.  *  * @param routeContext        the added route context  * @param errorHandler        the error handler  * @param errorHandlerBuilder the error handler builder  */ ;/**  * Notification on adding error handler.  *  * @param routeContext        the added route context  * @param errorHandler        the error handler  * @param errorHandlerBuilder the error handler builder  */ void onErrorHandlerAdd(RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory errorHandlerBuilder).
true;;3;1;/**  * Notification on removing error handler.  *  * @param routeContext        the removed route context  * @param errorHandler        the error handler  * @param errorHandlerBuilder the error handler builder  */ ;/**  * Notification on removing error handler.  *  * @param routeContext        the removed route context  * @param errorHandler        the error handler  * @param errorHandlerBuilder the error handler builder  */ void onErrorHandlerRemove(RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory errorHandlerBuilder).
true;;6;2;/**  * Notification on adding a thread pool.  *  * @param camelContext        the camel context  * @param threadPool          the thread pool  * @param id                  id of the thread pool (can be null in special cases)  * @param sourceId            id of the source creating the thread pool (can be null in special cases)  * @param routeId             id of the route for the source (is null if no source)  * @param threadPoolProfileId id of the thread pool profile, if used for creating this thread pool (can be null)  */ ;/**  * Notification on adding a thread pool.  *  * @param camelContext        the camel context  * @param threadPool          the thread pool  * @param id                  id of the thread pool (can be null in special cases)  * @param sourceId            id of the source creating the thread pool (can be null in special cases)  * @param routeId             id of the route for the source (is null if no source)  * @param threadPoolProfileId id of the thread pool profile, if used for creating this thread pool (can be null)  */ void onThreadPoolAdd(CamelContext camelContext, ThreadPoolExecutor threadPool, String id, String sourceId, String routeId, String threadPoolProfileId).
true;;2;1;/**  * Notification on removing a thread pool.  *  * @param camelContext the camel context  * @param threadPool   the thread pool  */ ;/**  * Notification on removing a thread pool.  *  * @param camelContext the camel context  * @param threadPool   the thread pool  */ void onThreadPoolRemove(CamelContext camelContext, ThreadPoolExecutor threadPool).
