commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets the component name.  *  * @param scheme  name of the component  */ ;/**  * Sets the component name.  *  * @param scheme  name of the component  */ void setScheme(String scheme).
true;;0;1;/**  * Gets the component name  */ ;/**  * Gets the component name  */ String getScheme().
false;public;0;3;;public String getUri() {     return uri. }
false;public;0;3;;public String getOriginalUri() {     return originalUri. }
false;public;0;3;;public Map<String, String> getProperties() {     return properties. }
false;public;0;3;;public Map<String, String> getLenientProperties() {     return lenientProperties. }
true;;3;1;/**  * Prepares for using optimised dynamic to by parsing the uri and returning an entry of details that are  * used for creating the pre and post processors, and the static uri.  *  * @param exchange     the exchange  * @param uri          the resolved uri which is intended to be used  * @param originalUri  the original uri of the endpoint before any dynamic evaluation  * @return prepared information about the dynamic endpoint to use  * @throws Exception is thrown if error parsing the uri  */ ;/**  * Prepares for using optimised dynamic to by parsing the uri and returning an entry of details that are  * used for creating the pre and post processors, and the static uri.  *  * @param exchange     the exchange  * @param uri          the resolved uri which is intended to be used  * @param originalUri  the original uri of the endpoint before any dynamic evaluation  * @return prepared information about the dynamic endpoint to use  * @throws Exception is thrown if error parsing the uri  */ DynamicAwareEntry prepare(Exchange exchange, String uri, String originalUri) throws Exception.
true;;2;1;/**  * Resolves the static part of the uri that are used for creating a single {@link org.apache.camel.Endpoint}  * and {@link Producer} that will be reused for processing the optimised toD.  *  * @param exchange    the exchange  * @param entry       prepared information about the dynamic endpoint to use  * @return the static uri, or <tt>null</tt> to not let toD use this optimisation.  * @throws Exception is thrown if error resolving the static uri.  */ ;/**  * Resolves the static part of the uri that are used for creating a single {@link org.apache.camel.Endpoint}  * and {@link Producer} that will be reused for processing the optimised toD.  *  * @param exchange    the exchange  * @param entry       prepared information about the dynamic endpoint to use  * @return the static uri, or <tt>null</tt> to not let toD use this optimisation.  * @throws Exception is thrown if error resolving the static uri.  */ String resolveStaticUri(Exchange exchange, DynamicAwareEntry entry) throws Exception.
true;;2;1;/**  * Creates the pre {@link Processor} that will prepare the {@link Exchange}  * with dynamic details from the given recipient.  *  * @param exchange    the exchange  * @param entry       prepared information about the dynamic endpoint to use  * @return the processor, or <tt>null</tt> to not let toD use this optimisation.  * @throws Exception is thrown if error creating the pre processor.  */ ;/**  * Creates the pre {@link Processor} that will prepare the {@link Exchange}  * with dynamic details from the given recipient.  *  * @param exchange    the exchange  * @param entry       prepared information about the dynamic endpoint to use  * @return the processor, or <tt>null</tt> to not let toD use this optimisation.  * @throws Exception is thrown if error creating the pre processor.  */ Processor createPreProcessor(Exchange exchange, DynamicAwareEntry entry) throws Exception.
true;;2;1;/**  * Creates an optional post {@link Processor} that will be executed afterwards  * when the message has been sent dynamic.  *  * @param exchange    the exchange  * @param entry       prepared information about the dynamic endpoint to use  * @return the post processor, or <tt>null</tt> if no post processor is needed.  * @throws Exception is thrown if error creating the post processor.  */ ;/**  * Creates an optional post {@link Processor} that will be executed afterwards  * when the message has been sent dynamic.  *  * @param exchange    the exchange  * @param entry       prepared information about the dynamic endpoint to use  * @return the post processor, or <tt>null</tt> if no post processor is needed.  * @throws Exception is thrown if error creating the post processor.  */ Processor createPostProcessor(Exchange exchange, DynamicAwareEntry entry) throws Exception.
