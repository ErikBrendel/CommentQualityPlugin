commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the value which could not be converted  */ ;/**  * Returns the value which could not be converted  */ public Object getValue() {     return value. }
true;public;0;3;/**  * Returns the required <tt>to</tt> type  */ ;/**  * Returns the required <tt>to</tt> type  */ public Class<?> getToType() {     return type. }
true;public;0;7;/**  * Returns the required <tt>from</tt> type.  * Returns <tt>null</tt> if the provided value was null.  */ ;/**  * Returns the required <tt>from</tt> type.  * Returns <tt>null</tt> if the provided value was null.  */ public Class<?> getFromType() {     if (value != null) {         return value.getClass().     } else {         return null.     } }
true;public,static;2;4;/**  * Returns an error message for no type converter available.  */ ;/**  * Returns an error message for no type converter available.  */ public static String createMessage(Object value, Class<?> type) {     return "No type converter available to convert from type: " + (value != null ? value.getClass().getCanonicalName() : null) + " to the required type: " + type.getCanonicalName() + " with value " + value. }
true;public,static;3;5;/**  * Returns an error message for no type converter available with the cause.  */ ;/**  * Returns an error message for no type converter available with the cause.  */ public static String createMessage(Object value, Class<?> type, Throwable cause) {     return "Converting Exception when converting from type: " + (value != null ? value.getClass().getCanonicalName() : null) + " to the required type: " + type.getCanonicalName() + " with value " + value + ", which is caused by " + cause. }
