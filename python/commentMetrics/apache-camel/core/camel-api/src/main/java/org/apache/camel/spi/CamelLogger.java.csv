commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "Logger[" + log + "]". }
false;public;2;6;;public void log(String message, LoggingLevel loggingLevel) {     LoggingLevel oldLogLevel = getLevel().     setLevel(loggingLevel).     log(message).     setLevel(oldLogLevel). }
true;public;1;5;/**  * Logs the message <b>with</b> checking the {@link #shouldLog()} method first.  *  * @param message the message to log, if {@link #shouldLog()} returned <tt>true</tt>  */ ;/**  * Logs the message <b>with</b> checking the {@link #shouldLog()} method first.  *  * @param message the message to log, if {@link #shouldLog()} returned <tt>true</tt>  */ public void log(String message) {     if (shouldLog(log, level)) {         log(log, level, marker, message).     } }
true;public;1;3;/**  * Logs the message <b>without</b> checking the {@link #shouldLog()} method first.  *  * @param message the message to log  */ ;/**  * Logs the message <b>without</b> checking the {@link #shouldLog()} method first.  *  * @param message the message to log  */ public void doLog(String message) {     log(log, level, marker, message). }
false;public;3;3;;public void log(String message, Throwable exception, LoggingLevel loggingLevel) {     log(log, loggingLevel, marker, message, exception). }
false;public;2;5;;public void log(String message, Throwable exception) {     if (shouldLog(log, level)) {         log(log, level, marker, message, exception).     } }
false;public;0;3;;public Logger getLog() {     return log. }
false;public;1;3;;public void setLog(Logger log) {     this.log = log. }
false;public;0;3;;public LoggingLevel getLevel() {     return level. }
false;public;1;7;;public void setLevel(LoggingLevel level) {     if (level == null) {         throw new IllegalArgumentException("Log level may not be null").     }     this.level = level. }
false;public;1;3;;public void setLogName(String logName) {     this.log = LoggerFactory.getLogger(logName). }
false;public;0;3;;public Marker getMarker() {     return marker. }
false;public;1;3;;public void setMarker(Marker marker) {     this.marker = marker. }
false;public;1;7;;public void setMarker(String marker) {     if (ObjectHelper.isNotEmpty(marker)) {         this.marker = MarkerFactory.getMarker(marker).     } else {         this.marker = null.     } }
false;public,static;3;20;;public static void log(Logger log, LoggingLevel level, String message) {     switch(level) {         case DEBUG:             log.debug(message).             break.         case ERROR:             log.error(message).             break.         case INFO:             log.info(message).             break.         case TRACE:             log.trace(message).             break.         case WARN:             log.warn(message).             break.         default:     } }
false;public,static;4;26;;public static void log(Logger log, LoggingLevel level, Marker marker, String message) {     if (marker == null) {         log(log, level, message).         return.     }     // marker must be provided     switch(level) {         case DEBUG:             log.debug(marker, message).             break.         case ERROR:             log.error(marker, message).             break.         case INFO:             log.info(marker, message).             break.         case TRACE:             log.trace(marker, message).             break.         case WARN:             log.warn(marker, message).             break.         default:     } }
false;public,static;4;20;;public static void log(Logger log, LoggingLevel level, String message, Throwable th) {     switch(level) {         case DEBUG:             log.debug(message, th).             break.         case ERROR:             log.error(message, th).             break.         case INFO:             log.info(message, th).             break.         case TRACE:             log.trace(message, th).             break.         case WARN:             log.warn(message, th).             break.         default:     } }
false;public,static;5;26;;public static void log(Logger log, LoggingLevel level, Marker marker, String message, Throwable th) {     if (marker == null) {         log(log, level, message, th).         return.     }     // marker must be provided     switch(level) {         case DEBUG:             log.debug(marker, message, th).             break.         case ERROR:             log.error(marker, message, th).             break.         case INFO:             log.info(marker, message, th).             break.         case TRACE:             log.trace(marker, message, th).             break.         case WARN:             log.warn(marker, message, th).             break.         default:     } }
false;public;0;3;;public boolean shouldLog() {     return CamelLogger.shouldLog(log, level). }
false;public,static;2;16;;public static boolean shouldLog(Logger log, LoggingLevel level) {     switch(level) {         case DEBUG:             return log.isDebugEnabled().         case ERROR:             return log.isErrorEnabled().         case INFO:             return log.isInfoEnabled().         case TRACE:             return log.isTraceEnabled().         case WARN:             return log.isWarnEnabled().         default:     }     return false. }
