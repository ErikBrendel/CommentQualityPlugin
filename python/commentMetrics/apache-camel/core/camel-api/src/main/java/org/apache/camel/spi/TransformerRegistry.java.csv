commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Lookup a {@link Transformer} in the registry which supports the transformation for  * the data types represented by the key.  * @param key a key represents the from/to data types to transform  * @return {@link Transformer} if matched, otherwise null  */ ;/**  * Lookup a {@link Transformer} in the registry which supports the transformation for  * the data types represented by the key.  * @param key a key represents the from/to data types to transform  * @return {@link Transformer} if matched, otherwise null  */ Transformer resolveTransformer(K key).
true;;0;1;/**  * Number of transformers in the static registry.  */ ;/**  * Number of transformers in the static registry.  */ int staticSize().
true;;0;1;/**  * Number of transformers in the dynamic registry  */ ;/**  * Number of transformers in the dynamic registry  */ int dynamicSize().
true;;0;1;/**  * Maximum number of entries to store in the dynamic registry  */ ;/**  * Maximum number of entries to store in the dynamic registry  */ int getMaximumCacheSize().
true;;0;1;/**  * Purges the cache (removes transformers from the dynamic cache)  */ ;/**  * Purges the cache (removes transformers from the dynamic cache)  */ void purge().
true;;1;1;/**  * Whether the given transformer is stored in the static cache  *  * @param scheme the scheme supported by this transformer  * @return <tt>true</tt> if in static cache, <tt>false</tt> if not  */ ;/**  * Whether the given transformer is stored in the static cache  *  * @param scheme the scheme supported by this transformer  * @return <tt>true</tt> if in static cache, <tt>false</tt> if not  */ boolean isStatic(String scheme).
true;;2;1;/**  * Whether the given transformer is stored in the static cache  *  * @param from  'from' data type  * @param to 'to' data type  * @return <tt>true</tt> if in static cache, <tt>false</tt> if not  */ ;/**  * Whether the given transformer is stored in the static cache  *  * @param from  'from' data type  * @param to 'to' data type  * @return <tt>true</tt> if in static cache, <tt>false</tt> if not  */ boolean isStatic(DataType from, DataType to).
true;;1;1;/**  * Whether the given transformer is stored in the dynamic cache  *  * @param scheme the scheme supported by this transformer  * @return <tt>true</tt> if in dynamic cache, <tt>false</tt> if not  */ ;/**  * Whether the given transformer is stored in the dynamic cache  *  * @param scheme the scheme supported by this transformer  * @return <tt>true</tt> if in dynamic cache, <tt>false</tt> if not  */ boolean isDynamic(String scheme).
true;;2;1;/**  * Whether the given {@link Transformer} is stored in the dynamic cache  *  * @param from 'from' data type  * @param to 'to' data type  * @return <tt>true</tt> if in dynamic cache, <tt>false</tt> if not  */ ;/**  * Whether the given {@link Transformer} is stored in the dynamic cache  *  * @param from 'from' data type  * @param to 'to' data type  * @return <tt>true</tt> if in dynamic cache, <tt>false</tt> if not  */ boolean isDynamic(DataType from, DataType to).
true;;0;1;/**  * Cleanup the cache (purging stale entries)  */ ;/**  * Cleanup the cache (purging stale entries)  */ void cleanUp().
