commented;modifiers;parameterAmount;loc;comment;code
false;default;0;4;;@Override default int getOrder() {     return Ordered.LOWEST. }
true;;1;1;/**  * Get a view of the cluster bound to a namespace creating it if needed. Multiple  * calls to this method with the same namespace should return the same instance.  * The instance is automatically started the first time it is instantiated and  * if the cluster service is ready.  *  * @param namespace the namespace the view refer to.  * @return the view.  * @throws Exception if the view can't be created.  */ ;/**  * Get a view of the cluster bound to a namespace creating it if needed. Multiple  * calls to this method with the same namespace should return the same instance.  * The instance is automatically started the first time it is instantiated and  * if the cluster service is ready.  *  * @param namespace the namespace the view refer to.  * @return the view.  * @throws Exception if the view can't be created.  */ CamelClusterView getView(String namespace) throws Exception.
true;;1;1;/**  * Release a view if it has no references.  *  * @param view the view.  * @throws Exception  */ ;/**  * Release a view if it has no references.  *  * @param view the view.  * @throws Exception  */ void releaseView(CamelClusterView view) throws Exception.
true;;0;1;/**  * Return the namespaces handled by this service.  */ ;/**  * Return the namespaces handled by this service.  */ Collection<String> getNamespaces().
true;;1;1;/**  * Force start of the view associated to the give namespace.  */ ;/**  * Force start of the view associated to the give namespace.  */ void startView(String namespace) throws Exception.
true;;1;1;/**  * Force stop of the view associated to the give namespace.  */ ;/**  * Force stop of the view associated to the give namespace.  */ void stopView(String namespace) throws Exception.
true;;1;1;/**  * Check if the service is the leader on the given namespace.  *  * @param namespace the namespace.  * @return  */ ;/**  * Check if the service is the leader on the given namespace.  *  * @param namespace the namespace.  * @return  */ boolean isLeader(String namespace).
true;default;0;3;/**  * Attributes associated to the service.  */ ;/**  * Attributes associated to the service.  */ default Map<String, Object> getAttributes() {     return Collections.emptyMap(). }
true;default;1;9;/**  * Access the underlying concrete CamelClusterService implementation to  * provide access to further features.  *  * @param clazz the proprietary class or interface of the underlying concrete CamelClusterService.  * @return an instance of the underlying concrete CamelClusterService as the required type.  */ ;/**  * Access the underlying concrete CamelClusterService implementation to  * provide access to further features.  *  * @param clazz the proprietary class or interface of the underlying concrete CamelClusterService.  * @return an instance of the underlying concrete CamelClusterService as the required type.  */ default <T extends CamelClusterService> T unwrap(Class<T> clazz) {     if (CamelClusterService.class.isAssignableFrom(clazz)) {         return clazz.cast(this).     }     throw new IllegalArgumentException("Unable to unwrap this CamelClusterService type (" + getClass() + ") to the required type (" + clazz + ")"). }
true;;1;1;/**  * Select a specific CamelClusterService instance among a collection.  */ ;/**  * Select a specific CamelClusterService instance among a collection.  */ Optional<CamelClusterService> select(Collection<CamelClusterService> services).
