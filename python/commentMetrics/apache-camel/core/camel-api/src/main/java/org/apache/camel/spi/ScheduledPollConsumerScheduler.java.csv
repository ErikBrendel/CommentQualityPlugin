commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Initializes this {@link ScheduledPollConsumerScheduler} with the associated {@link Consumer}.  *  * @param consumer the consumer.  */ ;/**  * Initializes this {@link ScheduledPollConsumerScheduler} with the associated {@link Consumer}.  *  * @param consumer the consumer.  */ void onInit(Consumer consumer).
true;;1;1;/**  * Schedules the task to run.  *  * @param task the task to run.  */ ;/**  * Schedules the task to run.  *  * @param task the task to run.  */ void scheduleTask(Runnable task).
true;;0;1;/**  * Attempts to unschedules the last task which was scheduled.  * <p/>  * An implementation may not implement this method.  */ ;/**  * Attempts to unschedules the last task which was scheduled.  * <p/>  * An implementation may not implement this method.  */ void unscheduleTask().
true;;0;1;/**  * Starts the scheduler.  * <p/>  * If the scheduler is already started, then this is a noop method call.  */ ;/**  * Starts the scheduler.  * <p/>  * If the scheduler is already started, then this is a noop method call.  */ void startScheduler().
true;;0;1;/**  * Whether the scheduler has been started.  *  * @return <tt>true</tt> if started, <tt>false</tt> otherwise.  */ ;/**  * Whether the scheduler has been started.  *  * @return <tt>true</tt> if started, <tt>false</tt> otherwise.  */ boolean isSchedulerStarted().
