commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Adds a managed object allowing the ManagementStrategy implementation to record or expose  * the object as it sees fit.  *  * @param managedObject the managed object  * @throws Exception can be thrown if the object could not be added  */ ;/**  * Adds a managed object allowing the ManagementStrategy implementation to record or expose  * the object as it sees fit.  *  * @param managedObject the managed object  * @throws Exception can be thrown if the object could not be added  */ void manageObject(Object managedObject) throws Exception.
true;;1;1;/**  * Removes the managed object.  *  * @param managedObject the managed object  * @throws Exception can be thrown if the object could not be removed  */ ;/**  * Removes the managed object.  *  * @param managedObject the managed object  * @throws Exception can be thrown if the object could not be removed  */ void unmanageObject(Object managedObject) throws Exception.
true;;1;1;/**  * Determines if an object or name is managed.  *  * @param managedObject the object to consider  * @return <tt>true</tt> if the given object is managed  */ ;/**  * Determines if an object or name is managed.  *  * @param managedObject the object to consider  * @return <tt>true</tt> if the given object is managed  */ boolean isManaged(Object managedObject).
true;;1;1;/**  * Determines if an object or name is managed.  *  * @param name the name to consider  * @return <tt>true</tt> if the given name is managed  */ ;/**  * Determines if an object or name is managed.  *  * @param name the name to consider  * @return <tt>true</tt> if the given name is managed  */ boolean isManagedName(Object name).
true;;1;1;/**  * Management events provide a single model for capturing information about execution points in the  * application code. Management strategy implementations decide if and where to record these events.  * Applications communicate events to management strategy implementations via the notify(EventObject)  * method.  *  * @param event the event  * @throws Exception can be thrown if the notification failed  */ ;/**  * Management events provide a single model for capturing information about execution points in the  * application code. Management strategy implementations decide if and where to record these events.  * Applications communicate events to management strategy implementations via the notify(EventObject)  * method.  *  * @param event the event  * @throws Exception can be thrown if the notification failed  */ void notify(CamelEvent event) throws Exception.
true;;0;1;/**  * Gets the event notifiers.  *  * @return event notifiers  */ ;/**  * Gets the event notifiers.  *  * @return event notifiers  */ List<EventNotifier> getEventNotifiers().
true;;1;1;/**  * Adds the event notifier to use.  * <p/>  * Ensure the event notifier has been started if its a {@link Service}, as otherwise  * it would not be used.  *  * @param eventNotifier event notifier  */ ;/**  * Adds the event notifier to use.  * <p/>  * Ensure the event notifier has been started if its a {@link Service}, as otherwise  * it would not be used.  *  * @param eventNotifier event notifier  */ void addEventNotifier(EventNotifier eventNotifier).
true;;1;1;/**  * Removes the event notifier  *  * @param eventNotifier event notifier to remove  * @return <tt>true</tt> if removed, <tt>false</tt> if already removed  */ ;/**  * Removes the event notifier  *  * @param eventNotifier event notifier to remove  * @return <tt>true</tt> if removed, <tt>false</tt> if already removed  */ boolean removeEventNotifier(EventNotifier eventNotifier).
true;;0;1;/**  * Gets the event factory  *  * @return event factory  */ ;/**  * Gets the event factory  *  * @return event factory  */ EventFactory getEventFactory().
true;;1;1;/**  * Sets the event factory to use  *  * @param eventFactory event factory  */ ;/**  * Sets the event factory to use  *  * @param eventFactory event factory  */ void setEventFactory(EventFactory eventFactory).
true;;0;1;/**  * Gets the naming strategy to use  *  * @return naming strategy  */ ;/**  * Gets the naming strategy to use  *  * @return naming strategy  */ ManagementObjectNameStrategy getManagementObjectNameStrategy().
true;;1;1;/**  * Sets the naming strategy to use  *  * @param strategy naming strategy  */ ;/**  * Sets the naming strategy to use  *  * @param strategy naming strategy  */ void setManagementObjectNameStrategy(ManagementObjectNameStrategy strategy).
true;;0;1;/**  * Gets the object strategy to use  *  * @return object strategy  */ ;/**  * Gets the object strategy to use  *  * @return object strategy  */ ManagementObjectStrategy getManagementObjectStrategy().
true;;1;1;/**  * Sets the object strategy to use  *  * @param strategy object strategy  */ ;/**  * Sets the object strategy to use  *  * @param strategy object strategy  */ void setManagementObjectStrategy(ManagementObjectStrategy strategy).
true;;0;1;/**  * Gets the management agent  *  * @return management agent  */ ;/**  * Gets the management agent  *  * @return management agent  */ ManagementAgent getManagementAgent().
true;;1;1;/**  * Sets the management agent to use  *  * @param managementAgent management agent  */ ;/**  * Sets the management agent to use  *  * @param managementAgent management agent  */ void setManagementAgent(ManagementAgent managementAgent).
true;;1;1;/**  * Filter whether the processor should be managed or not.  * <p/>  * Is used to filter out unwanted processors to avoid managing at too fine grained level.  *  * @param definition definition of the processor  * @return <tt>true</tt> to manage it  */ ;/**  * Filter whether the processor should be managed or not.  * <p/>  * Is used to filter out unwanted processors to avoid managing at too fine grained level.  *  * @param definition definition of the processor  * @return <tt>true</tt> to manage it  */ boolean manageProcessor(NamedNode definition).
