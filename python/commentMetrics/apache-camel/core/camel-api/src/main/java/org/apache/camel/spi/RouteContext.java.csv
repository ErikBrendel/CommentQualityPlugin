commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the from type  *  * @return the from type  */ ;/**  * Gets the from type  *  * @return the from type  */ NamedNode getFrom().
true;;0;1;/**  * Get the route type  *  * @return the route type  */ ;/**  * Get the route type  *  * @return the route type  */ NamedNode getRoute().
true;;0;1;/**  * Gets the camel context  *  * @return the camel context  */ ;/**  * Gets the camel context  *  * @return the camel context  */ CamelContext getCamelContext().
true;;1;1;/**  * Resolves an endpoint from the URI  *  * @param uri the URI  * @return the resolved endpoint  */ ;/**  * Resolves an endpoint from the URI  *  * @param uri the URI  * @return the resolved endpoint  */ Endpoint resolveEndpoint(String uri).
true;;2;1;/**  * Resolves an endpoint from either a URI or a named reference  *  * @param uri  the URI or  * @param ref  the named reference  * @return the resolved endpoint  */ ;/**  * Resolves an endpoint from either a URI or a named reference  *  * @param uri  the URI or  * @param ref  the named reference  * @return the resolved endpoint  */ Endpoint resolveEndpoint(String uri, String ref).
true;;2;1;/**  * lookup an object by name and type  *  * @param name  the name to lookup  * @param type  the expected type  * @return the found object  */ ;/**  * lookup an object by name and type  *  * @param name  the name to lookup  * @param type  the expected type  * @return the found object  */ <T> T lookup(String name, Class<T> type).
true;;2;1;/**  * lookup an object by name and type or throws {@link org.apache.camel.NoSuchBeanException} if not found.  *  * @param name  the name to lookup  * @param type  the expected type  * @return the found object  */ ;/**  * lookup an object by name and type or throws {@link org.apache.camel.NoSuchBeanException} if not found.  *  * @param name  the name to lookup  * @param type  the expected type  * @return the found object  */ <T> T mandatoryLookup(String name, Class<T> type).
true;;1;1;/**  * lookup objects by type  *  * @param type the expected type  * @return the found objects with the name as the key in the map. Returns an empty map if none found.  */ ;/**  * lookup objects by type  *  * @param type the expected type  * @return the found objects with the name as the key in the map. Returns an empty map if none found.  */ <T> Map<String, T> lookupByType(Class<T> type).
true;;0;1;/**  * For completing the route creation, creating a single event driven route  * for the current from endpoint with any processors required  */ ;/**  * For completing the route creation, creating a single event driven route  * for the current from endpoint with any processors required  */ void commit().
true;;1;1;/**  * Adds an event driven processor  *  * @param processor the processor  */ ;/**  * Adds an event driven processor  *  * @param processor the processor  */ void addEventDrivenProcessor(Processor processor).
true;;0;1;/**  * This method retrieves the InterceptStrategy instances this route context.  *  * @return the strategy  */ ;/**  * This method retrieves the InterceptStrategy instances this route context.  *  * @return the strategy  */ List<InterceptStrategy> getInterceptStrategies().
true;;1;1;/**  * This method sets the InterceptStrategy instances on this route context.  *  * @param interceptStrategies the strategies  */ ;/**  * This method sets the InterceptStrategy instances on this route context.  *  * @param interceptStrategies the strategies  */ void setInterceptStrategies(List<InterceptStrategy> interceptStrategies).
true;;1;1;/**  * Adds a InterceptStrategy to this route context  *  * @param interceptStrategy the strategy  */ ;/**  * Adds a InterceptStrategy to this route context  *  * @param interceptStrategy the strategy  */ void addInterceptStrategy(InterceptStrategy interceptStrategy).
true;;1;1;/**  * Sets a special intercept strategy for management.  * <p/>  * Is by default used to correlate managed performance counters with processors  * when the runtime route is being constructed  *  * @param interceptStrategy the managed intercept strategy  */ ;/**  * Sets a special intercept strategy for management.  * <p/>  * Is by default used to correlate managed performance counters with processors  * when the runtime route is being constructed  *  * @param interceptStrategy the managed intercept strategy  */ void setManagementInterceptStrategy(ManagementInterceptStrategy interceptStrategy).
true;;0;1;/**  * Gets the special managed intercept strategy if any  *  * @return the managed intercept strategy, or <tt>null</tt> if not managed  */ ;/**  * Gets the special managed intercept strategy if any  *  * @return the managed intercept strategy, or <tt>null</tt> if not managed  */ ManagementInterceptStrategy getManagementInterceptStrategy().
true;;1;1;/**  * If this flag is true, {@link org.apache.camel.model.ProcessorDefinition#addRoutes(RouteContext, java.util.Collection)}  * will not add processor to addEventDrivenProcessor to the RouteContext and it  * will prevent from adding an EventDrivenRoute.  *  * @param value the flag  */ ;/**  * If this flag is true, {@link org.apache.camel.model.ProcessorDefinition#addRoutes(RouteContext, java.util.Collection)}  * will not add processor to addEventDrivenProcessor to the RouteContext and it  * will prevent from adding an EventDrivenRoute.  *  * @param value the flag  */ void setIsRouteAdded(boolean value).
true;;0;1;/**  * Returns the isRouteAdded flag  *  * @return the flag  */ ;/**  * Returns the isRouteAdded flag  *  * @return the flag  */ boolean isRouteAdded().
true;;0;1;/**  * Gets the route policy List  *  * @return the route policy list if any  */ ;/**  * Gets the route policy List  *  * @return the route policy list if any  */ List<RoutePolicy> getRoutePolicyList().
true;;1;1;/**  * Sets a custom route policy List  *  * @param routePolicyList the custom route policy list  */ ;/**  * Sets a custom route policy List  *  * @param routePolicyList the custom route policy list  */ void setRoutePolicyList(List<RoutePolicy> routePolicyList).
true;;1;1;/**  * A private counter that increments, is used to as book keeping  * when building a route based on the model  * <p/>  * We need this special book keeping be able to assign the correct  * {@link org.apache.camel.model.ProcessorDefinition} to the {@link org.apache.camel.Channel}  *  * @param node the current node  * @return the current count  */ ;/**  * A private counter that increments, is used to as book keeping  * when building a route based on the model  * <p/>  * We need this special book keeping be able to assign the correct  * {@link org.apache.camel.model.ProcessorDefinition} to the {@link org.apache.camel.Channel}  *  * @param node the current node  * @return the current count  */ int getAndIncrement(NamedNode node).
true;default;0;3;/**  * Gets the last error.  *  * @return the error  */ ;/**  * Gets the last error.  *  * @return the error  */ default RouteError getLastError() {     return null. }
true;default;1;2;/**  * Sets the last error.  *  * @param error the error  */ ;/**  * Sets the last error.  *  * @param error the error  */ default void setLastError(RouteError error) { }
true;default;0;4;/**  * Gets the  {@link RouteController} for this route.  *  * @return the route controller,  */ ;/**  * Gets the  {@link RouteController} for this route.  *  * @return the route controller,  */ @Experimental default RouteController getRouteController() {     return null. }
true;default;1;3;/**  * Sets the {@link RouteController} for this route.  *  * @param controller the RouteController  */ ;/**  * Sets the {@link RouteController} for this route.  *  * @param controller the RouteController  */ @Experimental default void setRouteController(RouteController controller) { }
