commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the name of the Camel component to use as the REST consumer  *  * @return the component name, or <tt>null</tt> to let Camel search the {@link Registry} to find suitable implementation  */ ;/**  * Gets the name of the Camel component to use as the REST consumer  *  * @return the component name, or <tt>null</tt> to let Camel search the {@link Registry} to find suitable implementation  */ public String getComponent() {     return component. }
true;public;1;3;/**  * Sets the name of the Camel component to use as the REST consumer  *  * @param componentName the name of the component (such as restlet, spark-rest, etc.)  */ ;/**  * Sets the name of the Camel component to use as the REST consumer  *  * @param componentName the name of the component (such as restlet, spark-rest, etc.)  */ public void setComponent(String componentName) {     this.component = componentName. }
true;public;0;3;/**  * Gets the name of the Camel component to use as the REST API (such as swagger)  *  * @return the component name, or <tt>null</tt> to let Camel use the default name <tt>swagger</tt>  */ ;/**  * Gets the name of the Camel component to use as the REST API (such as swagger)  *  * @return the component name, or <tt>null</tt> to let Camel use the default name <tt>swagger</tt>  */ public String getApiComponent() {     return apiComponent. }
true;public;1;3;/**  * Sets the name of the Camel component to use as the REST API (such as swagger)  *  * @param apiComponent the name of the component (such as swagger)  */ ;/**  * Sets the name of the Camel component to use as the REST API (such as swagger)  *  * @param apiComponent the name of the component (such as swagger)  */ public void setApiComponent(String apiComponent) {     this.apiComponent = apiComponent. }
true;public;0;3;/**  * Gets the name of the Camel component to use as the REST producer  *  * @return the component name, or <tt>null</tt> to let Camel search the {@link Registry} to find suitable implementation  */ ;/**  * Gets the name of the Camel component to use as the REST producer  *  * @return the component name, or <tt>null</tt> to let Camel search the {@link Registry} to find suitable implementation  */ public String getProducerComponent() {     return producerComponent. }
true;public;1;3;/**  * Sets the name of the Camel component to use as the REST producer  *  * @param componentName the name of the component (such as restlet, jetty, etc.)  */ ;/**  * Sets the name of the Camel component to use as the REST producer  *  * @param componentName the name of the component (such as restlet, jetty, etc.)  */ public void setProducerComponent(String componentName) {     this.producerComponent = componentName. }
true;public;0;3;/**  * Gets the location of the api document (swagger api) the REST producer will use  * to validate the REST uri and query parameters are valid accordingly to the api document.  */ ;/**  * Gets the location of the api document (swagger api) the REST producer will use  * to validate the REST uri and query parameters are valid accordingly to the api document.  */ public String getProducerApiDoc() {     return producerApiDoc. }
true;public;1;3;/**  * Sets the location of the api document (swagger api) the REST producer will use  * to validate the REST uri and query parameters are valid accordingly to the api document.  * This requires adding camel-swagger-java to the classpath, and any miss configuration  * will let Camel fail on startup and report the error(s).  * <p/>  * The location of the api document is loaded from classpath by default, but you can use  * <tt>file:</tt> or <tt>http:</tt> to refer to resources to load from file or http url.  */ ;/**  * Sets the location of the api document (swagger api) the REST producer will use  * to validate the REST uri and query parameters are valid accordingly to the api document.  * This requires adding camel-swagger-java to the classpath, and any miss configuration  * will let Camel fail on startup and report the error(s).  * <p/>  * The location of the api document is loaded from classpath by default, but you can use  * <tt>file:</tt> or <tt>http:</tt> to refer to resources to load from file or http url.  */ public void setProducerApiDoc(String producerApiDoc) {     this.producerApiDoc = producerApiDoc. }
true;public;0;3;/**  * Gets the hostname to use by the REST consumer  *  * @return the hostname, or <tt>null</tt> to use default hostname  */ ;/**  * Gets the hostname to use by the REST consumer  *  * @return the hostname, or <tt>null</tt> to use default hostname  */ public String getHost() {     return host. }
true;public;1;3;/**  * Sets the hostname to use by the REST consumer  *  * @param host the hostname  */ ;/**  * Sets the hostname to use by the REST consumer  *  * @param host the hostname  */ public void setHost(String host) {     this.host = host. }
true;public;0;3;/**  * WWhether to use X-Forward headers to set host etc. for Swagger.  * <p/>  * This option is default <tt>true</tt>.  */ ;/**  * WWhether to use X-Forward headers to set host etc. for Swagger.  * <p/>  * This option is default <tt>true</tt>.  */ public boolean isUseXForwardHeaders() {     return useXForwardHeaders. }
true;public;1;3;/**  * WWhether to use X-Forward headers to set host etc. for Swagger.  * <p/>  * This option is default <tt>true</tt>.  *  * @param useXForwardHeaders whether to use X-Forward headers  */ ;/**  * WWhether to use X-Forward headers to set host etc. for Swagger.  * <p/>  * This option is default <tt>true</tt>.  *  * @param useXForwardHeaders whether to use X-Forward headers  */ public void setUseXForwardHeaders(boolean useXForwardHeaders) {     this.useXForwardHeaders = useXForwardHeaders. }
false;public;0;3;;public String getApiHost() {     return apiHost. }
true;public;1;3;/**  * To use an specific hostname for the API documentation (eg swagger)  * <p/>  * This can be used to override the generated host with this configured hostname  */ ;/**  * To use an specific hostname for the API documentation (eg swagger)  * <p/>  * This can be used to override the generated host with this configured hostname  */ public void setApiHost(String apiHost) {     this.apiHost = apiHost. }
true;public;0;3;/**  * Gets the scheme to use by the REST consumer  *  * @return the scheme, or <tt>null</tt> to use default scheme  */ ;/**  * Gets the scheme to use by the REST consumer  *  * @return the scheme, or <tt>null</tt> to use default scheme  */ public String getScheme() {     return scheme. }
true;public;1;3;/**  * Sets the scheme to use by the REST consumer  *  * @param scheme the scheme  */ ;/**  * Sets the scheme to use by the REST consumer  *  * @param scheme the scheme  */ public void setScheme(String scheme) {     this.scheme = scheme. }
true;public;0;3;/**  * Gets the port to use by the REST consumer  *  * @return the port, or <tt>0</tt> or <tt>-1</tt> to use default port  */ ;/**  * Gets the port to use by the REST consumer  *  * @return the port, or <tt>0</tt> or <tt>-1</tt> to use default port  */ public int getPort() {     return port. }
true;public;1;3;/**  * Sets the port to use by the REST consumer  *  * @param port the port number  */ ;/**  * Sets the port to use by the REST consumer  *  * @param port the port number  */ public void setPort(int port) {     this.port = port. }
true;public;0;3;/**  * Gets the configured context-path  *  * @return the context path, or <tt>null</tt> if none configured.  */ ;/**  * Gets the configured context-path  *  * @return the context path, or <tt>null</tt> if none configured.  */ public String getContextPath() {     return contextPath. }
true;public;1;3;/**  * Sets a leading context-path the REST services will be using.  * <p/>  * This can be used when using components such as <tt>camel-servlet</tt> where the deployed web application  * is deployed using a context-path. Or for components such as <tt>camel-jetty</tt> or <tt>camel-netty4-http</tt>  * that includes a HTTP server.  *  * @param contextPath the context path  */ ;/**  * Sets a leading context-path the REST services will be using.  * <p/>  * This can be used when using components such as <tt>camel-servlet</tt> where the deployed web application  * is deployed using a context-path. Or for components such as <tt>camel-jetty</tt> or <tt>camel-netty4-http</tt>  * that includes a HTTP server.  *  * @param contextPath the context path  */ public void setContextPath(String contextPath) {     this.contextPath = contextPath. }
false;public;0;3;;public String getApiContextPath() {     return apiContextPath. }
true;public;1;3;/**  * Sets a leading API context-path the REST API services will be using.  * <p/>  * This can be used when using components such as <tt>camel-servlet</tt> where the deployed web application  * is deployed using a context-path.  *  * @param contextPath the API context path  */ ;/**  * Sets a leading API context-path the REST API services will be using.  * <p/>  * This can be used when using components such as <tt>camel-servlet</tt> where the deployed web application  * is deployed using a context-path.  *  * @param contextPath the API context path  */ public void setApiContextPath(String contextPath) {     this.apiContextPath = contextPath. }
false;public;0;3;;public String getApiContextRouteId() {     return apiContextRouteId. }
true;public;1;3;/**  * Sets the route id to use for the route that services the REST API.  * <p/>  * The route will by default use an auto assigned route id.  *  * @param apiContextRouteId  the route id  */ ;/**  * Sets the route id to use for the route that services the REST API.  * <p/>  * The route will by default use an auto assigned route id.  *  * @param apiContextRouteId  the route id  */ public void setApiContextRouteId(String apiContextRouteId) {     this.apiContextRouteId = apiContextRouteId. }
false;public;0;3;;public String getApiContextIdPattern() {     return apiContextIdPattern. }
true;public;1;3;/**  * Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.  * <p/>  * The pattern <tt>#name#</tt> refers to the CamelContext name, to match on the current CamelContext only.  * For any other value, the pattern uses the rules from {@link org.apache.camel.support.EndpointHelper#matchPattern(String, String)}  *  * @param apiContextIdPattern  the pattern  */ ;/**  * Optional CamelContext id pattern to only allow Rest APIs from rest services within CamelContext's which name matches the pattern.  * <p/>  * The pattern <tt>#name#</tt> refers to the CamelContext name, to match on the current CamelContext only.  * For any other value, the pattern uses the rules from {@link org.apache.camel.support.EndpointHelper#matchPattern(String, String)}  *  * @param apiContextIdPattern  the pattern  */ public void setApiContextIdPattern(String apiContextIdPattern) {     this.apiContextIdPattern = apiContextIdPattern. }
false;public;0;3;;public boolean isApiContextListing() {     return apiContextListing. }
true;public;1;3;/**  * Sets whether listing of all available CamelContext's with REST services in the JVM is enabled. If enabled it allows to discover  * these contexts, if <tt>false</tt> then only the current CamelContext is in use.  */ ;/**  * Sets whether listing of all available CamelContext's with REST services in the JVM is enabled. If enabled it allows to discover  * these contexts, if <tt>false</tt> then only the current CamelContext is in use.  */ public void setApiContextListing(boolean apiContextListing) {     this.apiContextListing = apiContextListing. }
false;public;0;3;;public boolean isApiVendorExtension() {     return apiVendorExtension. }
true;public;1;3;/**  * Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information  * as vendor extension (eg keys starting with x-) such as route ids, class names etc.  * Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.  */ ;/**  * Whether vendor extension is enabled in the Rest APIs. If enabled then Camel will include additional information  * as vendor extension (eg keys starting with x-) such as route ids, class names etc.  * Not all 3rd party API gateways and tools supports vendor-extensions when importing your API docs.  */ public void setApiVendorExtension(boolean apiVendorExtension) {     this.apiVendorExtension = apiVendorExtension. }
true;public;0;3;/**  * Gets the resolver to use for resolving hostname  *  * @return the resolver  */ ;/**  * Gets the resolver to use for resolving hostname  *  * @return the resolver  */ public RestHostNameResolver getHostNameResolver() {     return hostNameResolver. }
true;public;1;3;/**  * Sets the resolver to use for resolving hostname  *  * @param hostNameResolver the resolver  */ ;/**  * Sets the resolver to use for resolving hostname  *  * @param hostNameResolver the resolver  */ public void setHostNameResolver(RestHostNameResolver hostNameResolver) {     this.hostNameResolver = hostNameResolver. }
true;public;1;3;/**  * Sets the resolver to use for resolving hostname  *  * @param hostNameResolver the resolver  */ ;/**  * Sets the resolver to use for resolving hostname  *  * @param hostNameResolver the resolver  */ public void setHostNameResolver(String hostNameResolver) {     this.hostNameResolver = RestHostNameResolver.valueOf(hostNameResolver). }
true;public;0;3;/**  * Gets the binding mode used by the REST consumer  *  * @return the binding mode  */ ;/**  * Gets the binding mode used by the REST consumer  *  * @return the binding mode  */ public RestBindingMode getBindingMode() {     return bindingMode. }
true;public;1;3;/**  * Sets the binding mode to be used by the REST consumer  *  * @param bindingMode the binding mode  */ ;/**  * Sets the binding mode to be used by the REST consumer  *  * @param bindingMode the binding mode  */ public void setBindingMode(RestBindingMode bindingMode) {     this.bindingMode = bindingMode. }
true;public;1;3;/**  * Sets the binding mode to be used by the REST consumer  *  * @param bindingMode the binding mode  */ ;/**  * Sets the binding mode to be used by the REST consumer  *  * @param bindingMode the binding mode  */ public void setBindingMode(String bindingMode) {     this.bindingMode = RestBindingMode.valueOf(bindingMode). }
true;public;0;3;/**  * Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is.  * <p/>  * This option is default <tt>true</tt>.  *  * @return whether to skip binding on error code  */ ;/**  * Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is.  * <p/>  * This option is default <tt>true</tt>.  *  * @return whether to skip binding on error code  */ public boolean isSkipBindingOnErrorCode() {     return skipBindingOnErrorCode. }
true;public;1;3;/**  * Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is.  * <p/>  * This option is default <tt>true</tt>.  *  * @param skipBindingOnErrorCode whether to skip binding on error code  */ ;/**  * Whether to skip binding output if there is a custom HTTP error code, and instead use the response body as-is.  * <p/>  * This option is default <tt>true</tt>.  *  * @param skipBindingOnErrorCode whether to skip binding on error code  */ public void setSkipBindingOnErrorCode(boolean skipBindingOnErrorCode) {     this.skipBindingOnErrorCode = skipBindingOnErrorCode. }
false;public;0;3;;public boolean isClientRequestValidation() {     return clientRequestValidation. }
true;public;1;3;/**  * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from  * the client is supported by the Rest-DSL configuration of its consumes/produces settings.  * <p/>  * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.  * <p/>  * The default value is false.  */ ;/**  * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from  * the client is supported by the Rest-DSL configuration of its consumes/produces settings.  * <p/>  * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.  * <p/>  * The default value is false.  */ public void setClientRequestValidation(boolean clientRequestValidation) {     this.clientRequestValidation = clientRequestValidation. }
true;public;0;3;/**  * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.  * <p/>  * This option is default <tt>false</tt>  *  * @return whether CORS is enabled or not  */ ;/**  * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.  * <p/>  * This option is default <tt>false</tt>  *  * @return whether CORS is enabled or not  */ public boolean isEnableCORS() {     return enableCORS. }
true;public;1;3;/**  * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.  * <p/>  * This option is default <tt>false</tt>  *  * @param enableCORS <tt>true</tt> to enable CORS  */ ;/**  * To specify whether to enable CORS which means Camel will automatic include CORS in the HTTP headers in the response.  * <p/>  * This option is default <tt>false</tt>  *  * @param enableCORS <tt>true</tt> to enable CORS  */ public void setEnableCORS(boolean enableCORS) {     this.enableCORS = enableCORS. }
true;public;0;3;/**  * Gets the name of the json data format.  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @return the name, or <tt>null</tt> to use default  */ ;/**  * Gets the name of the json data format.  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @return the name, or <tt>null</tt> to use default  */ public String getJsonDataFormat() {     return jsonDataFormat. }
true;public;1;3;/**  * Sets a custom json data format to be used  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @param name name of the data format  */ ;/**  * Sets a custom json data format to be used  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @param name name of the data format  */ public void setJsonDataFormat(String name) {     this.jsonDataFormat = name. }
true;public;0;3;/**  * Gets the name of the xml data format.  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @return the name, or <tt>null</tt> to use default  */ ;/**  * Gets the name of the xml data format.  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @return the name, or <tt>null</tt> to use default  */ public String getXmlDataFormat() {     return xmlDataFormat. }
true;public;1;3;/**  * Sets a custom xml data format to be used.  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @param name name of the data format  */ ;/**  * Sets a custom xml data format to be used.  * <p/>  * <b>Important:</b> This option is only for setting a custom name of the data format, not to refer to an existing data format instance.  *  * @param name name of the data format  */ public void setXmlDataFormat(String name) {     this.xmlDataFormat = name. }
true;public;0;3;/**  * Gets additional options on component level  *  * @return additional options  */ ;/**  * Gets additional options on component level  *  * @return additional options  */ public Map<String, Object> getComponentProperties() {     return componentProperties. }
true;public;1;3;/**  * Sets additional options on component level  *  * @param componentProperties the options  */ ;/**  * Sets additional options on component level  *  * @param componentProperties the options  */ public void setComponentProperties(Map<String, Object> componentProperties) {     this.componentProperties = componentProperties. }
true;public;0;3;/**  * Gets additional options on endpoint level  *  * @return additional options  */ ;/**  * Gets additional options on endpoint level  *  * @return additional options  */ public Map<String, Object> getEndpointProperties() {     return endpointProperties. }
true;public;1;3;/**  * Sets additional options on endpoint level  *  * @param endpointProperties the options  */ ;/**  * Sets additional options on endpoint level  *  * @param endpointProperties the options  */ public void setEndpointProperties(Map<String, Object> endpointProperties) {     this.endpointProperties = endpointProperties. }
true;public;0;3;/**  * Gets additional options on consumer level  *  * @return additional options  */ ;/**  * Gets additional options on consumer level  *  * @return additional options  */ public Map<String, Object> getConsumerProperties() {     return consumerProperties. }
true;public;1;3;/**  * Sets additional options on consumer level  *  * @param consumerProperties the options  */ ;/**  * Sets additional options on consumer level  *  * @param consumerProperties the options  */ public void setConsumerProperties(Map<String, Object> consumerProperties) {     this.consumerProperties = consumerProperties. }
true;public;0;3;/**  * Gets additional options on data format level  *  * @return additional options  */ ;/**  * Gets additional options on data format level  *  * @return additional options  */ public Map<String, Object> getDataFormatProperties() {     return dataFormatProperties. }
true;public;1;3;/**  * Sets additional options on data format level  *  * @param dataFormatProperties the options  */ ;/**  * Sets additional options on data format level  *  * @param dataFormatProperties the options  */ public void setDataFormatProperties(Map<String, Object> dataFormatProperties) {     this.dataFormatProperties = dataFormatProperties. }
false;public;0;3;;public Map<String, Object> getApiProperties() {     return apiProperties. }
true;public;1;3;/**  * Sets additional options on api level  *  * @param apiProperties the options  */ ;/**  * Sets additional options on api level  *  * @param apiProperties the options  */ public void setApiProperties(Map<String, Object> apiProperties) {     this.apiProperties = apiProperties. }
true;public;0;3;/**  * Gets the CORS headers to use if CORS has been enabled.  *  * @return the CORS headers  */ ;/**  * Gets the CORS headers to use if CORS has been enabled.  *  * @return the CORS headers  */ public Map<String, String> getCorsHeaders() {     return corsHeaders. }
true;public;1;3;/**  * Sets the CORS headers to use if CORS has been enabled.  *  * @param corsHeaders the CORS headers  */ ;/**  * Sets the CORS headers to use if CORS has been enabled.  *  * @param corsHeaders the CORS headers  */ public void setCorsHeaders(Map<String, String> corsHeaders) {     this.corsHeaders = corsHeaders. }
