commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Creates the {@link ManagementStrategy}.  *  * @param context     the camel context  * @param properties  optional options to set on {@link ManagementAgent}  * @return the created strategy  * @throws Exception is thrown if error creating the strategy  */ ;/**  * Creates the {@link ManagementStrategy}.  *  * @param context     the camel context  * @param properties  optional options to set on {@link ManagementAgent}  * @return the created strategy  * @throws Exception is thrown if error creating the strategy  */ ManagementStrategy create(CamelContext context, Map<String, Object> properties) throws Exception.
true;;1;1;/**  * Creates the associated {@link LifecycleStrategy} that the management strategy uses.  *  * @param context     the camel context  * @return the created lifecycle strategy  * @throws Exception is thrown if error creating the lifecycle strategy  */ ;/**  * Creates the associated {@link LifecycleStrategy} that the management strategy uses.  *  * @param context     the camel context  * @return the created lifecycle strategy  * @throws Exception is thrown if error creating the lifecycle strategy  */ LifecycleStrategy createLifecycle(CamelContext context) throws Exception.
true;;3;1;/**  * Setup the management on the {@link CamelContext}.  * <p/>  * This allows implementations to provide the logic for setting up management on Camel.  *  * @param camelContext  the camel context  * @param strategy      the management strategy  * @param lifecycle      the associated lifecycle strategy (optional)  */ ;/**  * Setup the management on the {@link CamelContext}.  * <p/>  * This allows implementations to provide the logic for setting up management on Camel.  *  * @param camelContext  the camel context  * @param strategy      the management strategy  * @param lifecycle      the associated lifecycle strategy (optional)  */ void setupManagement(CamelContext camelContext, ManagementStrategy strategy, LifecycleStrategy lifecycle).
