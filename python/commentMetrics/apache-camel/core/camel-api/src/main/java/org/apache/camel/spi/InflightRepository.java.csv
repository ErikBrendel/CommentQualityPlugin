commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * The exchange being inflight  */ ;/**  * The exchange being inflight  */ Exchange getExchange().
true;;0;1;/**  * The duration in millis the exchange has been inflight  */ ;/**  * The duration in millis the exchange has been inflight  */ long getDuration().
true;;0;1;/**  * The elapsed time in millis processing the exchange at the current node  */ ;/**  * The elapsed time in millis processing the exchange at the current node  */ long getElapsed().
true;;0;1;/**  * The id of the node from the route where the exchange currently is being processed  * <p/>  * Is <tt>null</tt> if message history is disabled.  */ ;/**  * The id of the node from the route where the exchange currently is being processed  * <p/>  * Is <tt>null</tt> if message history is disabled.  */ String getNodeId().
true;;0;1;/**  * The id of the route where the exchange originates (started)  */ ;/**  * The id of the route where the exchange originates (started)  */ String getFromRouteId().
true;;0;1;/**  * The id of the route where the exchange currently is being processed  * <p/>  * Is <tt>null</tt> if message history is disabled.  */ ;/**  * The id of the route where the exchange currently is being processed  * <p/>  * Is <tt>null</tt> if message history is disabled.  */ String getAtRouteId().
true;;1;1;/**  * Adds the exchange to the inflight registry to the total counter  *  * @param exchange  the exchange  */ ;/**  * Adds the exchange to the inflight registry to the total counter  *  * @param exchange  the exchange  */ void add(Exchange exchange).
true;;1;1;/**  * Removes the exchange from the inflight registry to the total counter  *  * @param exchange  the exchange  */ ;/**  * Removes the exchange from the inflight registry to the total counter  *  * @param exchange  the exchange  */ void remove(Exchange exchange).
true;;2;1;/**  * Adds the exchange to the inflight registry associated to the given route  *  * @param exchange  the exchange  * @param routeId the id of the route  */ ;/**  * Adds the exchange to the inflight registry associated to the given route  *  * @param exchange  the exchange  * @param routeId the id of the route  */ void add(Exchange exchange, String routeId).
true;;2;1;/**  * Removes the exchange from the inflight registry removing association to the given route  *  * @param exchange  the exchange  * @param routeId the id of the route  */ ;/**  * Removes the exchange from the inflight registry removing association to the given route  *  * @param exchange  the exchange  * @param routeId the id of the route  */ void remove(Exchange exchange, String routeId).
true;;0;1;/**  * Current size of inflight exchanges.  * <p/>  * Will return 0 if there are no inflight exchanges.  *  * @return number of exchanges currently in flight.  */ ;/**  * Current size of inflight exchanges.  * <p/>  * Will return 0 if there are no inflight exchanges.  *  * @return number of exchanges currently in flight.  */ int size().
true;;1;1;/**  * Adds the route from the in flight registry.  * <p/>  * Is used for initializing up resources  *  * @param routeId the id of the route  */ ;/**  * Adds the route from the in flight registry.  * <p/>  * Is used for initializing up resources  *  * @param routeId the id of the route  */ void addRoute(String routeId).
true;;1;1;/**  * Removes the route from the in flight registry.  * <p/>  * Is used for cleaning up resources to avoid leaking.  *  * @param routeId the id of the route  */ ;/**  * Removes the route from the in flight registry.  * <p/>  * Is used for cleaning up resources to avoid leaking.  *  * @param routeId the id of the route  */ void removeRoute(String routeId).
true;;1;1;/**  * Current size of inflight exchanges which are from the given route.  * <p/>  * Will return 0 if there are no inflight exchanges.  *  * @param routeId the id of the route  * @return number of exchanges currently in flight.  */ ;/**  * Current size of inflight exchanges which are from the given route.  * <p/>  * Will return 0 if there are no inflight exchanges.  *  * @param routeId the id of the route  * @return number of exchanges currently in flight.  */ int size(String routeId).
true;;0;1;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight.  */ ;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight.  */ Collection<InflightExchange> browse().
true;;1;1;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight that started from the given route.  *  * @param fromRouteId  the route id, or <tt>null</tt> for all routes.  */ ;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight that started from the given route.  *  * @param fromRouteId  the route id, or <tt>null</tt> for all routes.  */ Collection<InflightExchange> browse(String fromRouteId).
true;;2;1;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight.  *  * @param limit maximum number of entries to return  * @param sortByLongestDuration to sort by the longest duration. Set to <tt>true</tt> to include the exchanges that has been inflight the longest time,  *                              set to <tt>false</tt> to sort by exchange id  */ ;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight.  *  * @param limit maximum number of entries to return  * @param sortByLongestDuration to sort by the longest duration. Set to <tt>true</tt> to include the exchanges that has been inflight the longest time,  *                              set to <tt>false</tt> to sort by exchange id  */ Collection<InflightExchange> browse(int limit, boolean sortByLongestDuration).
true;;3;1;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight that started from the given route.  *  * @param fromRouteId  the route id, or <tt>null</tt> for all routes.  * @param limit maximum number of entries to return  * @param sortByLongestDuration to sort by the longest duration. Set to <tt>true</tt> to include the exchanges that has been inflight the longest time,  *                              set to <tt>false</tt> to sort by exchange id  */ ;/**  * A <i>read-only</i> browser of the {@link InflightExchange}s that are currently inflight that started from the given route.  *  * @param fromRouteId  the route id, or <tt>null</tt> for all routes.  * @param limit maximum number of entries to return  * @param sortByLongestDuration to sort by the longest duration. Set to <tt>true</tt> to include the exchanges that has been inflight the longest time,  *                              set to <tt>false</tt> to sort by exchange id  */ Collection<InflightExchange> browse(String fromRouteId, int limit, boolean sortByLongestDuration).
true;;1;1;/**  * Gets the oldest {@link InflightExchange} that are currently inflight that started from the given route.  *  * @param fromRouteId  the route id, or <tt>null</tt> for all routes.  * @return the oldest, or <tt>null</tt> if none inflight  */ ;/**  * Gets the oldest {@link InflightExchange} that are currently inflight that started from the given route.  *  * @param fromRouteId  the route id, or <tt>null</tt> for all routes.  * @return the oldest, or <tt>null</tt> if none inflight  */ InflightExchange oldest(String fromRouteId).
