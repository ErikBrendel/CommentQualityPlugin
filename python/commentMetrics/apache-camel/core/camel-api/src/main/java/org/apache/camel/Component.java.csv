commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Attempt to resolve an endpoint for the given URI if the component is  * capable of handling the URI.  * <p/>  * See {@link #useRawUri()} for controlling whether the passed in uri  * should be as-is (raw), or encoded (default).  *  * @param uri the URI to create. either raw or encoded (default)  * @return a newly created {@link Endpoint} or null if this component cannot create  *         {@link Endpoint} instances using the given uri  * @throws Exception is thrown if error creating the endpoint  * @see #useRawUri()  */ ;/**  * Attempt to resolve an endpoint for the given URI if the component is  * capable of handling the URI.  * <p/>  * See {@link #useRawUri()} for controlling whether the passed in uri  * should be as-is (raw), or encoded (default).  *  * @param uri the URI to create. either raw or encoded (default)  * @return a newly created {@link Endpoint} or null if this component cannot create  *         {@link Endpoint} instances using the given uri  * @throws Exception is thrown if error creating the endpoint  * @see #useRawUri()  */ Endpoint createEndpoint(String uri) throws Exception.
true;;0;1;/**  * Whether to use raw or encoded uri, when creating endpoints.  * <p/>  * <b>Notice:</b> When using raw uris, then the parameter values is raw as well.  *  * @return <tt>true</tt> to use raw uris, <tt>false</tt> to use encoded uris (default).  *  * @since Camel 2.11.0  */ ;/**  * Whether to use raw or encoded uri, when creating endpoints.  * <p/>  * <b>Notice:</b> When using raw uris, then the parameter values is raw as well.  *  * @return <tt>true</tt> to use raw uris, <tt>false</tt> to use encoded uris (default).  *  * @since Camel 2.11.0  */ boolean useRawUri().
true;default;0;3;/**  * Gets a list of supported extensions.  *  * @return the list of extensions.  */ ;/**  * Gets a list of supported extensions.  *  * @return the list of extensions.  */ default Collection<Class<? extends ComponentExtension>> getSupportedExtensions() {     return Collections.emptyList(). }
true;default;1;3;/**  * Gets the extension of the given type.  *  * @param extensionType tye type of the extensions  * @return an optional extension  */ ;/**  * Gets the extension of the given type.  *  * @param extensionType tye type of the extensions  * @return an optional extension  */ default <T extends ComponentExtension> Optional<T> getExtension(Class<T> extensionType) {     return Optional.empty(). }
true;static;2;7;/**  * Set the {@link Component} context if the component is an instance of {@link ComponentAware}.  */ ;/**  * Set the {@link Component} context if the component is an instance of {@link ComponentAware}.  */ static <T> T trySetComponent(T object, Component component) {     if (object instanceof ComponentAware) {         ((ComponentAware) object).setComponent(component).     }     return object. }
