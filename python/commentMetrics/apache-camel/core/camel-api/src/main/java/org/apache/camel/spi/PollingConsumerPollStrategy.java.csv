commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Called when poll is about to begin  *  * @param consumer the consumer  * @param endpoint the endpoint being consumed  * @return <tt>true</tt> to begin polling, or <tt>false</tt> to skip polling this time.  */ ;/**  * Called when poll is about to begin  *  * @param consumer the consumer  * @param endpoint the endpoint being consumed  * @return <tt>true</tt> to begin polling, or <tt>false</tt> to skip polling this time.  */ boolean begin(Consumer consumer, Endpoint endpoint).
true;;3;1;/**  * Called when poll is completed successfully  *  * @param consumer the consumer  * @param endpoint the endpoint being consumed  * @param polledMessages number of messages polled, will be <tt>0</tt> if no message was polled at all.  */ ;/**  * Called when poll is completed successfully  *  * @param consumer the consumer  * @param endpoint the endpoint being consumed  * @param polledMessages number of messages polled, will be <tt>0</tt> if no message was polled at all.  */ void commit(Consumer consumer, Endpoint endpoint, int polledMessages).
true;;4;1;/**  * Called when poll failed  *  * @param consumer the consumer  * @param endpoint the endpoint being consumed  * @param retryCounter current retry attempt, starting from 0.  * @param cause the caused exception  * @throws Exception can be used to rethrow the caused exception. Notice that thrown an exception will  *         terminate the scheduler and thus Camel will not trigger again. So if you want to let the scheduler  *         to continue to run then do <b>not</b> throw any exception from this method.  * @return whether to retry immediately or not. Return <tt>false</tt> to ignore the problem,  *         <tt>true</tt> to try immediately again  */ ;/**  * Called when poll failed  *  * @param consumer the consumer  * @param endpoint the endpoint being consumed  * @param retryCounter current retry attempt, starting from 0.  * @param cause the caused exception  * @throws Exception can be used to rethrow the caused exception. Notice that thrown an exception will  *         terminate the scheduler and thus Camel will not trigger again. So if you want to let the scheduler  *         to continue to run then do <b>not</b> throw any exception from this method.  * @return whether to retry immediately or not. Return <tt>false</tt> to ignore the problem,  *         <tt>true</tt> to try immediately again  */ boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause) throws Exception.
