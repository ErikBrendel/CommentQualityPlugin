commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @see #setClientAuthentication(String)  */ ;/**  * @see #setClientAuthentication(String)  */ public String getClientAuthentication() {     return clientAuthentication. }
true;public;1;3;/**  * Sets the configuration options for server-side client-authentication requirements.  * The value must be one of NONE, WANT, REQUIRE as defined in {@link ClientAuthentication}.  *  * @param value the desired configuration options or {@code null} to use the defaults  */ ;/**  * Sets the configuration options for server-side client-authentication requirements.  * The value must be one of NONE, WANT, REQUIRE as defined in {@link ClientAuthentication}.  *  * @param value the desired configuration options or {@code null} to use the defaults  */ public void setClientAuthentication(String value) {     this.clientAuthentication = value. }
false;protected;0;4;;@Override protected boolean getAllowPassthrough() {     return true. }
false;protected;1;9;;@Override protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {     LOG.trace("Configuring server-side SSLContext parameters on SSLContext [{}]...", context).     if (this.getSessionTimeout() != null) {         LOG.debug("Configuring server-side SSLContext session timeout on SSLContext [{}] to [{}].", context, this.getSessionTimeout()).         this.configureSessionContext(context.getServerSessionContext(), this.getSessionTimeout()).     }     LOG.trace("Configured server-side SSLContext parameters on SSLContext [{}].", context). }
false;public;1;20;;@Override public SSLEngine configure(SSLEngine engine) {     LOG.trace("Configuring client-auth on SSLEngine [{}] to [{}].", engine, clientAuthValue).     switch(clientAuthValue) {         case NONE:             engine.setWantClientAuth(false).             engine.setNeedClientAuth(false).             break.         case WANT:             engine.setWantClientAuth(true).             break.         case REQUIRE:             engine.setNeedClientAuth(true).             break.         default:             throw new RuntimeCamelException("Unknown ClientAuthentication value: " + clientAuthValue).     }     return engine. }
true;protected;1;41;/**  * {@inheritDoc}  * <p/>  * This implementation allows for configuration of the need and want settings  * for client authentication, but ignores the enabled cipher suites  * and protocols as they are not client and server side specific in an  * {@code SSLEngine}. Consequently, overriding them here would be a bit odd  * as the server side specific configuration shouldn't really override a  * shared client/server configuration option.  */ ;/**  * {@inheritDoc}  * <p/>  * This implementation allows for configuration of the need and want settings  * for client authentication, but ignores the enabled cipher suites  * and protocols as they are not client and server side specific in an  * {@code SSLEngine}. Consequently, overriding them here would be a bit odd  * as the server side specific configuration shouldn't really override a  * shared client/server configuration option.  */ @Override protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {     // NOTE: if the super class gets additional shared configuration options beyond     // cipher suites and protocols, this method needs to address that.     // As is, we do NOT pass the configurers along for those two settings.     List<Configurer<SSLEngine>> sslEngineConfigurers = new LinkedList<>().     if (this.getClientAuthentication() != null) {         final ClientAuthentication clientAuthValue = ClientAuthentication.valueOf(this.parsePropertyValue(this.getClientAuthentication())).         Configurer<SSLEngine> sslEngineConfigurer = new Configurer<SSLEngine>() {              @Override             public SSLEngine configure(SSLEngine engine) {                 LOG.trace("Configuring client-auth on SSLEngine [{}] to [{}].", engine, clientAuthValue).                 switch(clientAuthValue) {                     case NONE:                         engine.setWantClientAuth(false).                         engine.setNeedClientAuth(false).                         break.                     case WANT:                         engine.setWantClientAuth(true).                         break.                     case REQUIRE:                         engine.setNeedClientAuth(true).                         break.                     default:                         throw new RuntimeCamelException("Unknown ClientAuthentication value: " + clientAuthValue).                 }                 return engine.             }         }.         sslEngineConfigurers.add(sslEngineConfigurer).     }     return sslEngineConfigurers. }
false;public;1;20;;@Override public SSLServerSocket configure(SSLServerSocket socket) {     LOG.trace("Configuring client-auth on SSLServerSocket [{}] to [{}].", socket, clientAuthValue).     switch(clientAuthValue) {         case NONE:             socket.setWantClientAuth(false).             socket.setNeedClientAuth(false).             break.         case WANT:             socket.setWantClientAuth(true).             break.         case REQUIRE:             socket.setNeedClientAuth(true).             break.         default:             throw new RuntimeCamelException("Unknown ClientAuthentication value: " + clientAuthValue).     }     return socket. }
false;protected;1;38;;@Override protected List<Configurer<SSLServerSocket>> getSSLServerSocketFactorySSLServerSocketConfigurers(SSLContext context) {     List<Configurer<SSLServerSocket>> sslServerSocketConfigurers = super.getSSLServerSocketFactorySSLServerSocketConfigurers(context).     if (this.getClientAuthentication() != null) {         final ClientAuthentication clientAuthValue = ClientAuthentication.valueOf(this.parsePropertyValue(this.getClientAuthentication())).         Configurer<SSLServerSocket> sslServerSocketConfigurer = new Configurer<SSLServerSocket>() {              @Override             public SSLServerSocket configure(SSLServerSocket socket) {                 LOG.trace("Configuring client-auth on SSLServerSocket [{}] to [{}].", socket, clientAuthValue).                 switch(clientAuthValue) {                     case NONE:                         socket.setWantClientAuth(false).                         socket.setNeedClientAuth(false).                         break.                     case WANT:                         socket.setWantClientAuth(true).                         break.                     case REQUIRE:                         socket.setNeedClientAuth(true).                         break.                     default:                         throw new RuntimeCamelException("Unknown ClientAuthentication value: " + clientAuthValue).                 }                 return socket.             }         }.         sslServerSocketConfigurers.add(sslServerSocketConfigurer).     }     return sslServerSocketConfigurers. }
true;protected;1;4;/**  * This class has no bearing on {@code SSLSocketFactory} instances and therefore provides no  * configurers for that purpose.  */ ;/**  * This class has no bearing on {@code SSLSocketFactory} instances and therefore provides no  * configurers for that purpose.  */ @Override protected List<Configurer<SSLSocketFactory>> getSSLSocketFactoryConfigurers(SSLContext context) {     return Collections.emptyList(). }
false;public;0;18;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("SSLContextServerParameters[clientAuthentication=").     builder.append(clientAuthentication).     builder.append(", getCipherSuites()=").     builder.append(getCipherSuites()).     builder.append(", getCipherSuitesFilter()=").     builder.append(getCipherSuitesFilter()).     builder.append(", getSecureSocketProtocols()=").     builder.append(getSecureSocketProtocols()).     builder.append(", getSecureSocketProtocolsFilter()=").     builder.append(getSecureSocketProtocolsFilter()).     builder.append(", getSessionTimeout()=").     builder.append(getSessionTimeout()).     builder.append("]").     return builder.toString(). }
