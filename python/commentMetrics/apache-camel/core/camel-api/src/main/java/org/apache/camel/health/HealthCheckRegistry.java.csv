commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Registers a service {@link HealthCheck}.  */ ;/**  * Registers a service {@link HealthCheck}.  */ boolean register(HealthCheck check).
true;;1;1;/**  * Unregisters a service {@link HealthCheck}.  */ ;/**  * Unregisters a service {@link HealthCheck}.  */ boolean unregister(HealthCheck check).
true;;1;1;/**  * Set the health check repositories to use..  */ ;/**  * Set the health check repositories to use..  */ void setRepositories(Collection<HealthCheckRepository> repositories).
true;;0;1;/**  * Get a collection of health check repositories.  */ ;/**  * Get a collection of health check repositories.  */ Collection<HealthCheckRepository> getRepositories().
true;;1;1;/**  * Add an Health Check repository.  */ ;/**  * Add an Health Check repository.  */ boolean addRepository(HealthCheckRepository repository).
true;;1;1;/**  * Remove an Health Check repository.  */ ;/**  * Remove an Health Check repository.  */ boolean removeRepository(HealthCheckRepository repository).
true;default;0;5;/**  * A collection of health check IDs.  */ ;/**  * A collection of health check IDs.  */ default Collection<String> getCheckIDs() {     return stream().map(HealthCheck::getId).collect(Collectors.toList()). }
true;default;1;5;/**  * Returns the check identified by the given <code>id</code> if available.  */ ;/**  * Returns the check identified by the given <code>id</code> if available.  */ default Optional<HealthCheck> getCheck(String id) {     return stream().filter(check -> ObjectHelper.equal(check.getId(), id)).findFirst(). }
true;static;1;3;/**  * Returns an optional {@link HealthCheckRegistry}, by default no registry is  * present and it must be explicit activated. Components can register/unregister  * health checks in response to life-cycle events (i.e. start/stop).  *  * This registry is not used by the camel context but it is up to the impl to  * properly use it, i.e.  *  * - a RouteController could use the registry to decide to restart a route  *   with failing health checks  * - spring boot could integrate such checks within its health endpoint or  *   make it available only as separate endpoint.  */ ;/**  * Returns an optional {@link HealthCheckRegistry}, by default no registry is  * present and it must be explicit activated. Components can register/unregister  * health checks in response to life-cycle events (i.e. start/stop).  *  * This registry is not used by the camel context but it is up to the impl to  * properly use it, i.e.  *  * - a RouteController could use the registry to decide to restart a route  *   with failing health checks  * - spring boot could integrate such checks within its health endpoint or  *   make it available only as separate endpoint.  */ static HealthCheckRegistry get(CamelContext context) {     return context.getExtension(HealthCheckRegistry.class). }
