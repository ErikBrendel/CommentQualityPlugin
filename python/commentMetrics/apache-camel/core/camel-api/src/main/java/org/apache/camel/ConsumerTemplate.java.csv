commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Get the {@link CamelContext}  *  * @return camelContext the Camel context  */ ;/**  * Get the {@link CamelContext}  *  * @return camelContext the Camel context  */ CamelContext getCamelContext().
true;;0;1;/**  * Gets the maximum cache size used.  *  * @return the maximum cache size  */ ;// Configuration methods // ----------------------------------------------------------------------- /**  * Gets the maximum cache size used.  *  * @return the maximum cache size  */ int getMaximumCacheSize().
true;;1;1;/**  * Sets a custom maximum cache size.  *  * @param maximumCacheSize the custom maximum cache size  */ ;/**  * Sets a custom maximum cache size.  *  * @param maximumCacheSize the custom maximum cache size  */ void setMaximumCacheSize(int maximumCacheSize).
true;;0;1;/**  * Gets an approximated size of the current cached resources in the backing cache pools.  *  * @return the size of current cached resources  */ ;/**  * Gets an approximated size of the current cached resources in the backing cache pools.  *  * @return the size of current cached resources  */ int getCurrentCacheSize().
true;;0;1;/**  * Cleanup the cache (purging stale entries)  */ ;/**  * Cleanup the cache (purging stale entries)  */ void cleanUp().
true;;1;1;/**  * Receives from the endpoint, waiting until there is a response  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpointUri the endpoint to receive from  * @return the returned exchange  */ ;// Synchronous methods // ----------------------------------------------------------------------- /**  * Receives from the endpoint, waiting until there is a response  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpointUri the endpoint to receive from  * @return the returned exchange  */ Exchange receive(String endpointUri).
true;;1;1;/**  * Receives from the endpoint, waiting until there is a response.  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpoint the endpoint to receive from  * @return the returned exchange  * @see #doneUoW(Exchange)  */ ;/**  * Receives from the endpoint, waiting until there is a response.  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpoint the endpoint to receive from  * @return the returned exchange  * @see #doneUoW(Exchange)  */ Exchange receive(Endpoint endpoint).
true;;2;1;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpointUri the endpoint to receive from  * @param timeout     timeout in millis to wait for a response  * @return the returned exchange, or <tt>null</tt> if no response  * @see #doneUoW(Exchange)  */ ;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpointUri the endpoint to receive from  * @param timeout     timeout in millis to wait for a response  * @return the returned exchange, or <tt>null</tt> if no response  * @see #doneUoW(Exchange)  */ Exchange receive(String endpointUri, long timeout).
true;;2;1;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpoint the endpoint to receive from  * @param timeout  timeout in millis to wait for a response  * @return the returned exchange, or <tt>null</tt> if no response  * @see #doneUoW(Exchange)  */ ;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpoint the endpoint to receive from  * @param timeout  timeout in millis to wait for a response  * @return the returned exchange, or <tt>null</tt> if no response  * @see #doneUoW(Exchange)  */ Exchange receive(Endpoint endpoint, long timeout).
true;;1;1;/**  * Receives from the endpoint, not waiting for a response if non exists.  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpointUri the endpoint to receive from  * @return the returned exchange, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, not waiting for a response if non exists.  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpointUri the endpoint to receive from  * @return the returned exchange, or <tt>null</tt> if no response  */ Exchange receiveNoWait(String endpointUri).
true;;1;1;/**  * Receives from the endpoint, not waiting for a response if non exists.  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpoint the endpoint to receive from  * @return the returned exchange, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, not waiting for a response if non exists.  * <p/>  * <b>Important:</b> See {@link #doneUoW(Exchange)}  *  * @param endpoint the endpoint to receive from  * @return the returned exchange, or <tt>null</tt> if no response  */ Exchange receiveNoWait(Endpoint endpoint).
true;;1;1;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpointUri the endpoint to receive from  * @return the returned response body  */ ;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpointUri the endpoint to receive from  * @return the returned response body  */ Object receiveBody(String endpointUri).
true;;1;1;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpoint the endpoint to receive from  * @return the returned response body  */ ;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpoint the endpoint to receive from  * @return the returned response body  */ Object receiveBody(Endpoint endpoint).
true;;2;1;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpointUri the endpoint to receive from  * @param timeout     timeout in millis to wait for a response  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpointUri the endpoint to receive from  * @param timeout     timeout in millis to wait for a response  * @return the returned response body, or <tt>null</tt> if no response  */ Object receiveBody(String endpointUri, long timeout).
true;;2;1;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpoint the endpoint to receive from  * @param timeout  timeout in millis to wait for a response  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpoint the endpoint to receive from  * @param timeout  timeout in millis to wait for a response  * @return the returned response body, or <tt>null</tt> if no response  */ Object receiveBody(Endpoint endpoint, long timeout).
true;;1;1;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpointUri the endpoint to receive from  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpointUri the endpoint to receive from  * @return the returned response body, or <tt>null</tt> if no response  */ Object receiveBodyNoWait(String endpointUri).
true;;1;1;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpoint the endpoint to receive from  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpoint the endpoint to receive from  * @return the returned response body, or <tt>null</tt> if no response  */ Object receiveBodyNoWait(Endpoint endpoint).
true;;2;1;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpointUri the endpoint to receive from  * @param type        the expected response type  * @return the returned response body  */ ;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpointUri the endpoint to receive from  * @param type        the expected response type  * @return the returned response body  */ <T> T receiveBody(String endpointUri, Class<T> type).
true;;2;1;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpoint the endpoint to receive from  * @param type     the expected response type  * @return the returned response body  */ ;/**  * Receives from the endpoint, waiting until there is a response  *  * @param endpoint the endpoint to receive from  * @param type     the expected response type  * @return the returned response body  */ <T> T receiveBody(Endpoint endpoint, Class<T> type).
true;;3;1;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpointUri the endpoint to receive from  * @param timeout     timeout in millis to wait for a response  * @param type        the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpointUri the endpoint to receive from  * @param timeout     timeout in millis to wait for a response  * @param type        the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ <T> T receiveBody(String endpointUri, long timeout, Class<T> type).
true;;3;1;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpoint the endpoint to receive from  * @param timeout  timeout in millis to wait for a response  * @param type     the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, waiting until there is a response  * or the timeout occurs  *  * @param endpoint the endpoint to receive from  * @param timeout  timeout in millis to wait for a response  * @param type     the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ <T> T receiveBody(Endpoint endpoint, long timeout, Class<T> type).
true;;2;1;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpointUri the endpoint to receive from  * @param type        the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpointUri the endpoint to receive from  * @param type        the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ <T> T receiveBodyNoWait(String endpointUri, Class<T> type).
true;;2;1;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpoint the endpoint to receive from  * @param type     the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ ;/**  * Receives from the endpoint, not waiting for a response if non exists.  *  * @param endpoint the endpoint to receive from  * @param type     the expected response type  * @return the returned response body, or <tt>null</tt> if no response  */ <T> T receiveBodyNoWait(Endpoint endpoint, Class<T> type).
true;;1;1;/**  * If you have used any of the <tt>receive</tt> methods which returns a {@link Exchange} type  * then you need to invoke this method when you are done using the returned {@link Exchange}.  * <p/>  * This is needed to ensure any {@link org.apache.camel.spi.Synchronization} works is being executed.  * For example if you consumed from a file endpoint, then the consumed file is only moved/delete when  * you done the {@link Exchange}.  * <p/>  * Note for all the other <tt>receive</tt> methods which does <b>not</b> return a {@link Exchange} type,  * the done has been executed automatic by Camel itself.  *  * @param exchange  the exchange  */ ;/**  * If you have used any of the <tt>receive</tt> methods which returns a {@link Exchange} type  * then you need to invoke this method when you are done using the returned {@link Exchange}.  * <p/>  * This is needed to ensure any {@link org.apache.camel.spi.Synchronization} works is being executed.  * For example if you consumed from a file endpoint, then the consumed file is only moved/delete when  * you done the {@link Exchange}.  * <p/>  * Note for all the other <tt>receive</tt> methods which does <b>not</b> return a {@link Exchange} type,  * the done has been executed automatic by Camel itself.  *  * @param exchange  the exchange  */ void doneUoW(Exchange exchange).
