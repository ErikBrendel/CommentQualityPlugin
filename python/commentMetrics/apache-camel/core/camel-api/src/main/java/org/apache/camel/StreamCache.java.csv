commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Resets the StreamCache for a new stream consumption.  */ ;/**  * Resets the StreamCache for a new stream consumption.  */ void reset().
true;;1;1;/**  * Writes the stream to the given output  *  * @param os the destination to write to  * @throws java.io.IOException is thrown if write fails  */ ;/**  * Writes the stream to the given output  *  * @param os the destination to write to  * @throws java.io.IOException is thrown if write fails  */ void writeTo(OutputStream os) throws IOException.
true;;1;1;/**  * Create a copy of the stream. If possible use the same cached data in the  * copied instance.  * <p/>  * This method is useful for parallel processing.  * <p/>  * Implementations note: A copy of the stream is recommended to read from the start  * of the stream.  *  * @param exchange exchange in which the stream cache object is used.  *                 can be used to delete resources of the stream cache when the exchange is completed  * @return a copy, or <tt>null</tt> if copy is not possible  * @throws java.io.IOException is thrown if the copy fails  */ ;/**  * Create a copy of the stream. If possible use the same cached data in the  * copied instance.  * <p/>  * This method is useful for parallel processing.  * <p/>  * Implementations note: A copy of the stream is recommended to read from the start  * of the stream.  *  * @param exchange exchange in which the stream cache object is used.  *                 can be used to delete resources of the stream cache when the exchange is completed  * @return a copy, or <tt>null</tt> if copy is not possible  * @throws java.io.IOException is thrown if the copy fails  */ StreamCache copy(Exchange exchange) throws IOException.
true;;0;1;/**  * Whether this {@link StreamCache} is in memory only or  * spooled to persistent storage such as files.  */ ;/**  * Whether this {@link StreamCache} is in memory only or  * spooled to persistent storage such as files.  */ boolean inMemory().
true;;0;1;/**  * Gets the length of the cached stream.  * <p/>  * The implementation may return <tt>0</tt> in cases where the length  * cannot be computed, or if the implementation does not support this.  *  * @return number of bytes in the cache.  */ ;/**  * Gets the length of the cached stream.  * <p/>  * The implementation may return <tt>0</tt> in cases where the length  * cannot be computed, or if the implementation does not support this.  *  * @return number of bytes in the cache.  */ long length().
