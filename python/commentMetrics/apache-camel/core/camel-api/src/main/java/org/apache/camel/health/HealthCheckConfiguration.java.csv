commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return true if the check associated to this configuration is enabled,  *         false otherwise.  */ ;// ************************************************* // Properties // ************************************************* /**  * @return true if the check associated to this configuration is enabled,  *         false otherwise.  */ public Boolean isEnabled() {     return enabled. }
true;public;1;3;/**  * Set if the check associated to this configuration is enabled or not.  */ ;/**  * Set if the check associated to this configuration is enabled or not.  */ public void setEnabled(Boolean enabled) {     this.enabled = enabled. }
true;public;0;3;/**  * @return the check interval.  */ ;/**  * @return the check interval.  */ public Duration getInterval() {     return interval. }
true;public;1;3;/**  * Set the check interval.  */ ;/**  * Set the check interval.  */ public void setInterval(Duration interval) {     this.interval = interval. }
true;public;1;7;/**  * Set the check interval in a human readable format.  */ ;/**  * Set the check interval in a human readable format.  */ public void setInterval(String interval) {     if (ObjectHelper.isNotEmpty(interval)) {         this.interval = Duration.ofMillis(TimeUtils.toMilliSeconds(interval)).     } else {         this.interval = null.     } }
true;public;0;3;/**  * @return the number of failure before reporting the service as un-healthy.  */ ;/**  * @return the number of failure before reporting the service as un-healthy.  */ public Integer getFailureThreshold() {     return failureThreshold. }
true;public;1;3;/**  * Set the number of failure before reporting the service as un-healthy.  */ ;/**  * Set the number of failure before reporting the service as un-healthy.  */ public void setFailureThreshold(Integer failureThreshold) {     this.failureThreshold = failureThreshold. }
true;public,static;0;3;// ************************************************* ;// ************************************************* //  // ************************************************* public static Boolean defaultValueEnabled() {     return DEFAULT_VALUE_ENABLED. }
false;public,static;0;3;;public static Duration defaultValueInterval() {     return DEFAULT_VALUE_INTERVAL. }
false;public,static;0;3;;public static Integer defaultValueFailureThreshold() {     return DEFAULT_VALUE_FAILURE_THRESHOLD. }
false;public;0;7;;public HealthCheckConfiguration copy() {     try {         return (HealthCheckConfiguration) super.clone().     } catch (CloneNotSupportedException e) {         throw new RuntimeCamelException(e).     } }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;15;;public Builder complete(HealthCheckConfiguration template) {     if (template != null) {         if (this.enabled == null) {             this.enabled = template.enabled.         }         if (this.interval == null) {             this.interval = template.interval.         }         if (this.failureThreshold == null) {             this.failureThreshold = template.failureThreshold.         }     }     return this. }
false;public;1;4;;public Builder enabled(Boolean enabled) {     this.enabled = enabled.     return this. }
false;public;1;4;;public Builder interval(Duration interval) {     this.interval = interval.     return this. }
false;public;1;5;;public Builder interval(Long interval) {     return ObjectHelper.isNotEmpty(interval) ? interval(Duration.ofMillis(interval)) : this. }
false;public;1;5;;public Builder interval(String interval) {     return ObjectHelper.isNotEmpty(interval) ? interval(TimeUtils.toMilliSeconds(interval)) : this. }
false;public;1;4;;public Builder failureThreshold(Integer failureThreshold) {     this.failureThreshold = failureThreshold.     return this. }
false;public;0;9;;@Override public HealthCheckConfiguration build() {     HealthCheckConfiguration conf = new HealthCheckConfiguration().     conf.setEnabled(ObjectHelper.supplyIfEmpty(enabled, HealthCheckConfiguration::defaultValueEnabled)).     conf.setInterval(ObjectHelper.supplyIfEmpty(interval, HealthCheckConfiguration::defaultValueInterval)).     conf.setFailureThreshold(ObjectHelper.supplyIfEmpty(failureThreshold, HealthCheckConfiguration::defaultValueFailureThreshold)).     return conf. }
