commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the resource classpath.  *  * @return the resource classpath.  */ ;/**  * Gets the resource classpath.  *  * @return the resource classpath.  */ String getResourcePath().
true;;1;1;/**  * Creates a new class instance using the key to lookup  *  * @param key is the key to add to the path to find a text file containing the factory name  * @return a newly created instance  * @throws org.apache.camel.NoFactoryAvailableException is thrown if no factories exist for the given key  */ ;/**  * Creates a new class instance using the key to lookup  *  * @param key is the key to add to the path to find a text file containing the factory name  * @return a newly created instance  * @throws org.apache.camel.NoFactoryAvailableException is thrown if no factories exist for the given key  */ Object newInstance(String key) throws NoFactoryAvailableException.
true;;3;1;/**  * Creates a new class instance using the key to lookup  *  * @param key is the key to add to the path to find a text file containing the factory name  * @param injector injector to use  * @param type expected type  * @return a newly created instance as the expected type  * @throws ClassNotFoundException is thrown if not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ ;/**  * Creates a new class instance using the key to lookup  *  * @param key is the key to add to the path to find a text file containing the factory name  * @param injector injector to use  * @param type expected type  * @return a newly created instance as the expected type  * @throws ClassNotFoundException is thrown if not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ <T> List<T> newInstances(String key, Injector injector, Class<T> type) throws ClassNotFoundException, IOException.
true;;1;1;/**  * Finds the given factory class using the key to lookup.  *  * @param key is the key to add to the path to find a text file containing the factory name  * @return the factory class  * @throws ClassNotFoundException is thrown if class not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ ;/**  * Finds the given factory class using the key to lookup.  *  * @param key is the key to add to the path to find a text file containing the factory name  * @return the factory class  * @throws ClassNotFoundException is thrown if class not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ Class<?> findClass(String key) throws ClassNotFoundException, IOException.
true;;2;1;/**  * Finds the given factory class using the key to lookup.  *  * @param key is the key to add to the path to find a text file containing the factory name  * @param propertyPrefix prefix on key  * @return the factory class  * @throws ClassNotFoundException is thrown if not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ ;/**  * Finds the given factory class using the key to lookup.  *  * @param key is the key to add to the path to find a text file containing the factory name  * @param propertyPrefix prefix on key  * @return the factory class  * @throws ClassNotFoundException is thrown if not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ Class<?> findClass(String key, String propertyPrefix) throws ClassNotFoundException, IOException.
true;;3;1;/**  * Finds the given factory class using the key to lookup.  *  * @param key is the key to add to the path to find a text file containing the factory name  * @param propertyPrefix prefix on key  * @param clazz the class which is used for checking compatible  * @return the factory class  * @throws ClassNotFoundException is thrown if not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ ;/**  * Finds the given factory class using the key to lookup.  *  * @param key is the key to add to the path to find a text file containing the factory name  * @param propertyPrefix prefix on key  * @param clazz the class which is used for checking compatible  * @return the factory class  * @throws ClassNotFoundException is thrown if not found  * @throws java.io.IOException is thrown if loading the class or META-INF file not found  */ Class<?> findClass(String key, String propertyPrefix, Class<?> clazz) throws ClassNotFoundException, IOException.
