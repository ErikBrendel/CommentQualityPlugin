commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Adds the key to the repository.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified element  */ ;/**  * Adds the key to the repository.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified element  */ boolean add(String key).
true;;1;1;/**  * Returns <tt>true</tt> if this repository contains the specified element.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message  * @return <tt>true</tt> if this repository contains the specified element  */ ;/**  * Returns <tt>true</tt> if this repository contains the specified element.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message  * @return <tt>true</tt> if this repository contains the specified element  */ boolean contains(String key).
true;;1;1;/**  * Removes the key from the repository.  * <p/>  * Is usually invoked if the exchange failed.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was removed  */ ;/**  * Removes the key from the repository.  * <p/>  * Is usually invoked if the exchange failed.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was removed  */ boolean remove(String key).
true;;1;1;/**  * Confirms the key, after the exchange has been processed successfully.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was confirmed  */ ;/**  * Confirms the key, after the exchange has been processed successfully.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was confirmed  */ boolean confirm(String key).
true;;0;1;/**  * Clear the repository.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  */ ;/**  * Clear the repository.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  */ void clear().
true;default;2;3;/**  * Adds the key to the repository.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified element  */ ;/**  * Adds the key to the repository.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified element  */ default boolean add(Exchange exchange, String key) {     return add(key). }
true;default;2;3;/**  * Returns <tt>true</tt> if this repository contains the specified element.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message  * @return <tt>true</tt> if this repository contains the specified element  */ ;/**  * Returns <tt>true</tt> if this repository contains the specified element.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message  * @return <tt>true</tt> if this repository contains the specified element  */ default boolean contains(Exchange exchange, String key) {     return contains(key). }
true;default;2;3;/**  * Removes the key from the repository.  * <p/>  * Is usually invoked if the exchange failed.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was removed  */ ;/**  * Removes the key from the repository.  * <p/>  * Is usually invoked if the exchange failed.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was removed  */ default boolean remove(Exchange exchange, String key) {     return remove(key). }
true;default;2;3;/**  * Confirms the key, after the exchange has been processed successfully.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was confirmed  */ ;/**  * Confirms the key, after the exchange has been processed successfully.  * <p/>  * <b>Important:</b> Read the class javadoc about eager vs non-eager mode.  *  * @param key the key of the message for duplicate test  * @return <tt>true</tt> if the key was confirmed  */ default boolean confirm(Exchange exchange, String key) {     return confirm(key). }
