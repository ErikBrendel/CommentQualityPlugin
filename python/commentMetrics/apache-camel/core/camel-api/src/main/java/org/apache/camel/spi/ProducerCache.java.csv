commented;modifiers;parameterAmount;loc;comment;code
false;;1;1;;AsyncProducer acquireProducer(Endpoint endpoint).
false;;2;1;;void releaseProducer(Endpoint endpoint, AsyncProducer producer).
false;;3;1;;Exchange send(Endpoint endpoint, Exchange exchange, Processor resultProcessor).
false;;6;2;;CompletableFuture<Exchange> asyncSendExchange(Endpoint endpoint, ExchangePattern pattern, Processor processor, Processor resultProcessor, Exchange inExchange, CompletableFuture<Exchange> exchangeFuture).
false;;0;1;;Object getSource().
false;;0;1;;int size().
false;;0;1;;int getCapacity().
false;;0;1;;long getHits().
false;;0;1;;long getMisses().
false;;0;1;;long getEvicted().
false;;0;1;;void resetCacheStatistics().
false;;0;1;;void purge().
false;;0;1;;void cleanUp().
false;;0;1;;boolean isEventNotifierEnabled().
false;;1;1;;void setEventNotifierEnabled(boolean eventNotifierEnabled).
false;;0;1;;EndpointUtilizationStatistics getEndpointUtilizationStatistics().
false;;4;1;;boolean doInAsyncProducer(Endpoint endpoint, Exchange exchange, AsyncCallback callback, AsyncProducerCallback asyncProducerCallback).
true;;3;1;/**  * Performs operation on the given producer to send the given exchange.  *  * @param asyncProducer   the async producer, is never <tt>null</tt>  * @param exchange        the exchange to process  * @param callback        the async callback  * @return (doneSync) <tt>true</tt> to continue execute synchronously, <tt>false</tt> to continue being executed asynchronously  */ ;/**  * Performs operation on the given producer to send the given exchange.  *  * @param asyncProducer   the async producer, is never <tt>null</tt>  * @param exchange        the exchange to process  * @param callback        the async callback  * @return (doneSync) <tt>true</tt> to continue execute synchronously, <tt>false</tt> to continue being executed asynchronously  */ boolean doInAsyncProducer(AsyncProducer asyncProducer, Exchange exchange, AsyncCallback callback).
