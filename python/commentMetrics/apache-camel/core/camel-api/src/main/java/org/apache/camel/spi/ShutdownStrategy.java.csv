commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Shutdown the routes, forcing shutdown being more aggressive, if timeout occurred.  * <p/>  * This operation is used when {@link CamelContext} is shutting down, to ensure Camel will shutdown  * if messages seems to be <i>stuck</i>.  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @throws Exception is thrown if error shutting down the consumers, however its preferred to avoid this  */ ;/**  * Shutdown the routes, forcing shutdown being more aggressive, if timeout occurred.  * <p/>  * This operation is used when {@link CamelContext} is shutting down, to ensure Camel will shutdown  * if messages seems to be <i>stuck</i>.  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @throws Exception is thrown if error shutting down the consumers, however its preferred to avoid this  */ void shutdownForced(CamelContext context, List<RouteStartupOrder> routes) throws Exception.
true;;2;1;/**  * Shutdown the routes  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @throws Exception is thrown if error shutting down the consumers, however its preferred to avoid this  */ ;/**  * Shutdown the routes  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @throws Exception is thrown if error shutting down the consumers, however its preferred to avoid this  */ void shutdown(CamelContext context, List<RouteStartupOrder> routes) throws Exception.
true;;2;1;/**  * Suspends the routes  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @throws Exception is thrown if error suspending the consumers, however its preferred to avoid this  */ ;/**  * Suspends the routes  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @throws Exception is thrown if error suspending the consumers, however its preferred to avoid this  */ void suspend(CamelContext context, List<RouteStartupOrder> routes) throws Exception.
true;;4;1;/**  * Shutdown the routes using a specified timeout instead of the default timeout values  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @param timeout   timeout  * @param timeUnit  the unit to use  * @throws Exception is thrown if error shutting down the consumers, however its preferred to avoid this  */ ;/**  * Shutdown the routes using a specified timeout instead of the default timeout values  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @param timeout   timeout  * @param timeUnit  the unit to use  * @throws Exception is thrown if error shutting down the consumers, however its preferred to avoid this  */ void shutdown(CamelContext context, List<RouteStartupOrder> routes, long timeout, TimeUnit timeUnit) throws Exception.
true;;5;1;/**  * Shutdown the route using a specified timeout instead of the default timeout values and supports abortAfterTimeout mode  *  * @param context   the camel context  * @param route     the route  * @param timeout   timeout  * @param timeUnit  the unit to use  * @param abortAfterTimeout   should abort shutdown after timeout  * @return <tt>true</tt> if the route is stopped before the timeout  * @throws Exception is thrown if error shutting down the consumer, however its preferred to avoid this  */ ;/**  * Shutdown the route using a specified timeout instead of the default timeout values and supports abortAfterTimeout mode  *  * @param context   the camel context  * @param route     the route  * @param timeout   timeout  * @param timeUnit  the unit to use  * @param abortAfterTimeout   should abort shutdown after timeout  * @return <tt>true</tt> if the route is stopped before the timeout  * @throws Exception is thrown if error shutting down the consumer, however its preferred to avoid this  */ boolean shutdown(CamelContext context, RouteStartupOrder route, long timeout, TimeUnit timeUnit, boolean abortAfterTimeout) throws Exception.
true;;4;1;/**  * Suspends the routes using a specified timeout instead of the default timeout values  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @param timeout   timeout  * @param timeUnit  the unit to use  * @throws Exception is thrown if error suspending the consumers, however its preferred to avoid this  */ ;/**  * Suspends the routes using a specified timeout instead of the default timeout values  *  * @param context   the camel context  * @param routes    the routes, ordered by the order they was started  * @param timeout   timeout  * @param timeUnit  the unit to use  * @throws Exception is thrown if error suspending the consumers, however its preferred to avoid this  */ void suspend(CamelContext context, List<RouteStartupOrder> routes, long timeout, TimeUnit timeUnit) throws Exception.
true;;1;1;/**  * Set an timeout to wait for the shutdown to complete.  * <p/>  * You must set a positive value. If you want to wait (forever) then use  * a very high value such as {@link Long#MAX_VALUE}  * <p/>  * The default timeout unit is <tt>SECONDS</tt>  *  * @throws IllegalArgumentException if the timeout value is 0 or negative  * @param timeout timeout  */ ;/**  * Set an timeout to wait for the shutdown to complete.  * <p/>  * You must set a positive value. If you want to wait (forever) then use  * a very high value such as {@link Long#MAX_VALUE}  * <p/>  * The default timeout unit is <tt>SECONDS</tt>  *  * @throws IllegalArgumentException if the timeout value is 0 or negative  * @param timeout timeout  */ void setTimeout(long timeout).
true;;0;1;/**  * Gets the timeout.  * <p/>  * The default timeout unit is <tt>SECONDS</tt>  *  * @return the timeout  */ ;/**  * Gets the timeout.  * <p/>  * The default timeout unit is <tt>SECONDS</tt>  *  * @return the timeout  */ long getTimeout().
true;;1;1;/**  * Set the time unit to use  *  * @param timeUnit the unit to use  */ ;/**  * Set the time unit to use  *  * @param timeUnit the unit to use  */ void setTimeUnit(TimeUnit timeUnit).
true;;0;1;/**  * Gets the time unit used  *  * @return the time unit  */ ;/**  * Gets the time unit used  *  * @return the time unit  */ TimeUnit getTimeUnit().
true;;1;1;/**  * Whether Camel should try to suppress logging during shutdown and timeout was triggered,  * meaning forced shutdown is happening. And during forced shutdown we want to avoid logging  * errors/warnings et all in the logs as a side-effect of the forced timeout.  * <p/>  * By default this is <tt>false</tt>  * <p/>  * Notice the suppress is a <i>best effort</i> as there may still be some logs coming  * from 3rd party libraries and whatnot, which Camel cannot control.  *  * @param suppressLoggingOnTimeout <tt>true</tt> to suppress logging, false to log as usual.  */ ;/**  * Whether Camel should try to suppress logging during shutdown and timeout was triggered,  * meaning forced shutdown is happening. And during forced shutdown we want to avoid logging  * errors/warnings et all in the logs as a side-effect of the forced timeout.  * <p/>  * By default this is <tt>false</tt>  * <p/>  * Notice the suppress is a <i>best effort</i> as there may still be some logs coming  * from 3rd party libraries and whatnot, which Camel cannot control.  *  * @param suppressLoggingOnTimeout <tt>true</tt> to suppress logging, false to log as usual.  */ void setSuppressLoggingOnTimeout(boolean suppressLoggingOnTimeout).
true;;0;1;/**  * Whether Camel should try to suppress logging during shutdown and timeout was triggered,  * meaning forced shutdown is happening. And during forced shutdown we want to avoid logging  * errors/warnings et all in the logs as a side-effect of the forced timeout.  * <p/>  * By default this is <tt>false</tt>  * <p/>  * Notice the suppress is a <i>best effort</i> as there may still be some logs coming  * from 3rd party libraries and whatnot, which Camel cannot control.  */ ;/**  * Whether Camel should try to suppress logging during shutdown and timeout was triggered,  * meaning forced shutdown is happening. And during forced shutdown we want to avoid logging  * errors/warnings et all in the logs as a side-effect of the forced timeout.  * <p/>  * By default this is <tt>false</tt>  * <p/>  * Notice the suppress is a <i>best effort</i> as there may still be some logs coming  * from 3rd party libraries and whatnot, which Camel cannot control.  */ boolean isSuppressLoggingOnTimeout().
true;;1;1;/**  * Sets whether to force shutdown of all consumers when a timeout occurred and thus  * not all consumers was shutdown within that period.  * <p/>  * You should have good reasons to set this option to <tt>false</tt> as it means that the routes  * keep running and is halted abruptly when {@link CamelContext} has been shutdown.  *  * @param shutdownNowOnTimeout <tt>true</tt> to force shutdown, <tt>false</tt> to leave them running  */ ;/**  * Sets whether to force shutdown of all consumers when a timeout occurred and thus  * not all consumers was shutdown within that period.  * <p/>  * You should have good reasons to set this option to <tt>false</tt> as it means that the routes  * keep running and is halted abruptly when {@link CamelContext} has been shutdown.  *  * @param shutdownNowOnTimeout <tt>true</tt> to force shutdown, <tt>false</tt> to leave them running  */ void setShutdownNowOnTimeout(boolean shutdownNowOnTimeout).
true;;0;1;/**  * Whether to force shutdown of all consumers when a timeout occurred.  *  * @return force shutdown or not  */ ;/**  * Whether to force shutdown of all consumers when a timeout occurred.  *  * @return force shutdown or not  */ boolean isShutdownNowOnTimeout().
true;;1;1;/**  * Sets whether routes should be shutdown in reverse or the same order as they where started.  *  * @param shutdownRoutesInReverseOrder <tt>true</tt> to shutdown in reverse order  */ ;/**  * Sets whether routes should be shutdown in reverse or the same order as they where started.  *  * @param shutdownRoutesInReverseOrder <tt>true</tt> to shutdown in reverse order  */ void setShutdownRoutesInReverseOrder(boolean shutdownRoutesInReverseOrder).
true;;0;1;/**  * Whether to shutdown routes in reverse order than they where started.  * <p/>  * This option is by default set to <tt>true</tt>.  *  * @return <tt>true</tt> if routes should be shutdown in reverse order.  */ ;/**  * Whether to shutdown routes in reverse order than they where started.  * <p/>  * This option is by default set to <tt>true</tt>.  *  * @return <tt>true</tt> if routes should be shutdown in reverse order.  */ boolean isShutdownRoutesInReverseOrder().
true;;1;1;/**  * Sets whether to log information about the inflight {@link org.apache.camel.Exchange}s which are still running  * during a shutdown which didn't complete without the given timeout.  *  * @param logInflightExchangesOnTimeout <tt>true</tt> to log information about the inflight exchanges, <tt>false</tt> to not log  */ ;/**  * Sets whether to log information about the inflight {@link org.apache.camel.Exchange}s which are still running  * during a shutdown which didn't complete without the given timeout.  *  * @param logInflightExchangesOnTimeout <tt>true</tt> to log information about the inflight exchanges, <tt>false</tt> to not log  */ void setLogInflightExchangesOnTimeout(boolean logInflightExchangesOnTimeout).
true;;0;1;/**  * Whether to log information about the inflight {@link org.apache.camel.Exchange}s which are still running  * during a shutdown which didn't complete without the given timeout.  */ ;/**  * Whether to log information about the inflight {@link org.apache.camel.Exchange}s which are still running  * during a shutdown which didn't complete without the given timeout.  */ boolean isLogInflightExchangesOnTimeout().
true;;1;1;/**  * Whether a service is forced to shutdown.  * <p/>  * Can be used to signal to services that they are no longer allowed to run, such as if a forced  * shutdown is currently in progress.  * <p/>  * For example the Camel {@link org.apache.camel.processor.RedeliveryErrorHandler} uses this information  * to know if a forced shutdown is in progress, and then break out of redelivery attempts.  *  * @param service the service  * @return <tt>true</tt> indicates the service is to be forced to shutdown, <tt>false</tt> the service can keep running.  */ ;/**  * Whether a service is forced to shutdown.  * <p/>  * Can be used to signal to services that they are no longer allowed to run, such as if a forced  * shutdown is currently in progress.  * <p/>  * For example the Camel {@link org.apache.camel.processor.RedeliveryErrorHandler} uses this information  * to know if a forced shutdown is in progress, and then break out of redelivery attempts.  *  * @param service the service  * @return <tt>true</tt> indicates the service is to be forced to shutdown, <tt>false</tt> the service can keep running.  */ boolean forceShutdown(Service service).
true;;0;1;/**  * Whether a timeout has occurred during a shutdown.  */ ;/**  * Whether a timeout has occurred during a shutdown.  */ boolean hasTimeoutOccurred().
