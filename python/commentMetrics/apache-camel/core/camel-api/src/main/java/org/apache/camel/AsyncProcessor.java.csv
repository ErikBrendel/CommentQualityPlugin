commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Processes the message exchange.  * Similar to {@link Processor#process}, but the caller supports having the exchange asynchronously processed.  * <p/>  * If there was a failure processing then the caused {@link Exception} would be set on the {@link Exchange}.  *  * @param exchange the message exchange  * @param callback the {@link AsyncCallback} will be invoked when the processing of the exchange is completed.  *                 If the exchange is completed synchronously, then the callback is also invoked synchronously.  *                 The callback should therefore be careful of starting recursive loop.  * @return (doneSync) <tt>true</tt> to continue execute synchronously, <tt>false</tt> to continue being executed asynchronously  */ ;/**  * Processes the message exchange.  * Similar to {@link Processor#process}, but the caller supports having the exchange asynchronously processed.  * <p/>  * If there was a failure processing then the caused {@link Exception} would be set on the {@link Exchange}.  *  * @param exchange the message exchange  * @param callback the {@link AsyncCallback} will be invoked when the processing of the exchange is completed.  *                 If the exchange is completed synchronously, then the callback is also invoked synchronously.  *                 The callback should therefore be careful of starting recursive loop.  * @return (doneSync) <tt>true</tt> to continue execute synchronously, <tt>false</tt> to continue being executed asynchronously  */ boolean process(Exchange exchange, AsyncCallback callback).
false;;1;1;;CompletableFuture<Exchange> processAsync(Exchange exchange).
