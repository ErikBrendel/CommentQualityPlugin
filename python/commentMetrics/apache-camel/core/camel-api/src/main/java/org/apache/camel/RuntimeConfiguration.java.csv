commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets whether stream caching is enabled or not (default is disabled).  *  * @param cache whether stream caching is enabled or not  */ ;/**  * Sets whether stream caching is enabled or not (default is disabled).  *  * @param cache whether stream caching is enabled or not  */ void setStreamCaching(Boolean cache).
true;;0;1;/**  * Returns whether stream cache is enabled  *  * @return <tt>true</tt> if stream cache is enabled  */ ;/**  * Returns whether stream cache is enabled  *  * @return <tt>true</tt> if stream cache is enabled  */ Boolean isStreamCaching().
true;;1;1;/**  * Sets whether tracing is enabled or not (default is disabled).  *  * @param tracing whether to enable tracing.  */ ;/**  * Sets whether tracing is enabled or not (default is disabled).  *  * @param tracing whether to enable tracing.  */ void setTracing(Boolean tracing).
true;;0;1;/**  * Returns whether tracing enabled  *  * @return <tt>true</tt> if tracing is enabled  */ ;/**  * Returns whether tracing enabled  *  * @return <tt>true</tt> if tracing is enabled  */ Boolean isTracing().
true;;1;1;/**  * Sets whether message history is enabled or not (default is enabled).  *  * @param messageHistory whether message history is enabled  */ ;/**  * Sets whether message history is enabled or not (default is enabled).  *  * @param messageHistory whether message history is enabled  */ void setMessageHistory(Boolean messageHistory).
true;;0;1;/**  * Returns whether message history is enabled  *  * @return <tt>true</tt> if message history is enabled  */ ;/**  * Returns whether message history is enabled  *  * @return <tt>true</tt> if message history is enabled  */ Boolean isMessageHistory().
true;;1;1;/**  * Sets whether security mask for Logging is enabled or not (default is disabled).  *  * @param logMask <tt>true</tt> if mask is enabled  */ ;/**  * Sets whether security mask for Logging is enabled or not (default is disabled).  *  * @param logMask <tt>true</tt> if mask is enabled  */ void setLogMask(Boolean logMask).
true;;0;1;/**  * Gets whether security mask for Logging is enabled or not.  *  * @return <tt>true</tt> if mask is enabled  */ ;/**  * Gets whether security mask for Logging is enabled or not.  *  * @return <tt>true</tt> if mask is enabled  */ Boolean isLogMask().
true;;1;1;/**  * Sets whether to log exhausted message body with message history.  *  * @param logExhaustedMessageBody whether message body should be logged  */ ;/**  * Sets whether to log exhausted message body with message history.  *  * @param logExhaustedMessageBody whether message body should be logged  */ void setLogExhaustedMessageBody(Boolean logExhaustedMessageBody).
true;;0;1;/**  * Returns whether to log exhausted message body with message history.  *  * @return <tt>true</tt> if logging of message body is enabled  */ ;/**  * Returns whether to log exhausted message body with message history.  *  * @return <tt>true</tt> if logging of message body is enabled  */ Boolean isLogExhaustedMessageBody().
true;;1;1;/**  * Sets whether fault handling is enabled or not (default is disabled).  *  * @param handleFault whether to enable fault handling.  */ ;/**  * Sets whether fault handling is enabled or not (default is disabled).  *  * @param handleFault whether to enable fault handling.  */ void setHandleFault(Boolean handleFault).
true;;0;1;/**  * Returns whether fault handling enabled  *  * @return <tt>true</tt> if fault handling is enabled  */ ;/**  * Returns whether fault handling enabled  *  * @return <tt>true</tt> if fault handling is enabled  */ Boolean isHandleFault().
true;;1;1;/**  * Sets a delay value in millis that a message is delayed at every step it takes in the route path,  * slowing the process down to better observe what is occurring  * <p/>  * Is disabled by default  *  * @param delay delay in millis  */ ;/**  * Sets a delay value in millis that a message is delayed at every step it takes in the route path,  * slowing the process down to better observe what is occurring  * <p/>  * Is disabled by default  *  * @param delay delay in millis  */ void setDelayer(Long delay).
true;;0;1;/**  * Gets the delay value  *  * @return delay in millis, or <tt>null</tt> if disabled  */ ;/**  * Gets the delay value  *  * @return delay in millis, or <tt>null</tt> if disabled  */ Long getDelayer().
true;;1;1;/**  * Sets whether the object should automatically start when Camel starts.  * <p/>  * <b>Important:</b> Currently only routes can be disabled, as {@link CamelContext}s are always started.  * <br/>  * <b>Note:</b> When setting auto startup <tt>false</tt> on {@link CamelContext} then that takes precedence  * and <i>no</i> routes is started. You would need to start {@link CamelContext} explicit using  * the {@link org.apache.camel.CamelContext#start()} method, to start the context, and then  * you would need to start the routes manually using {@link org.apache.camel.spi.RouteController#startRoute(String)}.  * <p/>  * Default is <tt>true</tt> to always start up.  *  * @param autoStartup whether to start up automatically.  */ ;/**  * Sets whether the object should automatically start when Camel starts.  * <p/>  * <b>Important:</b> Currently only routes can be disabled, as {@link CamelContext}s are always started.  * <br/>  * <b>Note:</b> When setting auto startup <tt>false</tt> on {@link CamelContext} then that takes precedence  * and <i>no</i> routes is started. You would need to start {@link CamelContext} explicit using  * the {@link org.apache.camel.CamelContext#start()} method, to start the context, and then  * you would need to start the routes manually using {@link org.apache.camel.spi.RouteController#startRoute(String)}.  * <p/>  * Default is <tt>true</tt> to always start up.  *  * @param autoStartup whether to start up automatically.  */ void setAutoStartup(Boolean autoStartup).
true;;0;1;/**  * Gets whether the object should automatically start when Camel starts.  * <p/>  * <b>Important:</b> Currently only routes can be disabled, as {@link CamelContext}s are always started.  * <br/>  * Default is <tt>true</tt> to always start up.  *  * @return <tt>true</tt> if object should automatically start  */ ;/**  * Gets whether the object should automatically start when Camel starts.  * <p/>  * <b>Important:</b> Currently only routes can be disabled, as {@link CamelContext}s are always started.  * <br/>  * Default is <tt>true</tt> to always start up.  *  * @return <tt>true</tt> if object should automatically start  */ Boolean isAutoStartup().
true;;1;1;/**  * Sets the ShutdownRoute option for routes.  *  * @param shutdownRoute the option to use.  */ ;/**  * Sets the ShutdownRoute option for routes.  *  * @param shutdownRoute the option to use.  */ void setShutdownRoute(ShutdownRoute shutdownRoute).
true;;0;1;/**  * Gets the option to use when shutting down the route.  *  * @return the option  */ ;/**  * Gets the option to use when shutting down the route.  *  * @return the option  */ ShutdownRoute getShutdownRoute().
true;;1;1;/**  * Sets the ShutdownRunningTask option to use when shutting down a route.  *  * @param shutdownRunningTask the option to use.  */ ;/**  * Sets the ShutdownRunningTask option to use when shutting down a route.  *  * @param shutdownRunningTask the option to use.  */ void setShutdownRunningTask(ShutdownRunningTask shutdownRunningTask).
true;;0;1;/**  * Gets the ShutdownRunningTask option in use when shutting down a route.  *  * @return the option  */ ;/**  * Gets the ShutdownRunningTask option in use when shutting down a route.  *  * @return the option  */ ShutdownRunningTask getShutdownRunningTask().
true;;1;1;/**  * Sets whether to allow access to the original message from Camel's error handler,  * or from {@link org.apache.camel.spi.UnitOfWork#getOriginalInMessage()}.  * <p/>  * Turning this off can optimize performance, as defensive copy of the original message is not needed.  *  * @param allowUseOriginalMessage the option to use.  */ ;/**  * Sets whether to allow access to the original message from Camel's error handler,  * or from {@link org.apache.camel.spi.UnitOfWork#getOriginalInMessage()}.  * <p/>  * Turning this off can optimize performance, as defensive copy of the original message is not needed.  *  * @param allowUseOriginalMessage the option to use.  */ void setAllowUseOriginalMessage(Boolean allowUseOriginalMessage).
true;;0;1;/**  * Gets whether access to the original message from Camel's error handler,  * or from {@link org.apache.camel.spi.UnitOfWork#getOriginalInMessage()} is allowed.  *  * @return the option  */ ;/**  * Gets whether access to the original message from Camel's error handler,  * or from {@link org.apache.camel.spi.UnitOfWork#getOriginalInMessage()} is allowed.  *  * @return the option  */ Boolean isAllowUseOriginalMessage().
