commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the custom name pattern.  *  * @return the custom name pattern, or <tt>null</tt> if using the default pattern strategy.  */ ;/**  * Gets the custom name pattern.  *  * @return the custom name pattern, or <tt>null</tt> if using the default pattern strategy.  */ String getNamePattern().
true;;1;1;/**  * Sets a custom name pattern, which will be used instead of any default patterns.  *  * @param pattern a custom name pattern.  */ ;/**  * Sets a custom name pattern, which will be used instead of any default patterns.  *  * @param pattern a custom name pattern.  */ void setNamePattern(String pattern).
true;;0;1;/**  * Gets the name  * <p/>  * The {@link #isFixedName()} determines if the name can be re-calculated such as when using a counter,  * or the name is always fixed.  *  * @return the name.  */ ;/**  * Gets the name  * <p/>  * The {@link #isFixedName()} determines if the name can be re-calculated such as when using a counter,  * or the name is always fixed.  *  * @return the name.  */ String getName().
true;;0;1;/**  * Gets the next calculated name, if this strategy is not using fixed names.  * <p/>  * The {@link #isFixedName()} determines if the name can be re-calculated such as when using a counter,  * or the name is always fixed.  *  * @return the next name  */ ;/**  * Gets the next calculated name, if this strategy is not using fixed names.  * <p/>  * The {@link #isFixedName()} determines if the name can be re-calculated such as when using a counter,  * or the name is always fixed.  *  * @return the next name  */ String getNextName().
true;;0;1;/**  * Whether the name will be fixed, or allow re-calculation such as by using an unique counter.  *  * @return <tt>true</tt> for fixed names, <tt>false</tt> for names which can re-calculated  */ ;/**  * Whether the name will be fixed, or allow re-calculation such as by using an unique counter.  *  * @return <tt>true</tt> for fixed names, <tt>false</tt> for names which can re-calculated  */ boolean isFixedName().
true;;3;1;/**  * Creates a new management name with the given pattern.  *  * @param pattern the pattern  * @param name    the name  * @param invalidCheck whether to check for invalid pattern  * @return the management name  * @throws IllegalArgumentException if the pattern or name is invalid or empty  */ ;/**  * Creates a new management name with the given pattern.  *  * @param pattern the pattern  * @param name    the name  * @param invalidCheck whether to check for invalid pattern  * @return the management name  * @throws IllegalArgumentException if the pattern or name is invalid or empty  */ String resolveManagementName(String pattern, String name, boolean invalidCheck).
