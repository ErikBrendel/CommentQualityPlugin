commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Add a listener to invoke when the state of a check change.  *  * @param consumer the event listener.  */ ;/**  * Add a listener to invoke when the state of a check change.  *  * @param consumer the event listener.  */ void addStateChangeListener(BiConsumer<HealthCheck.State, HealthCheck> consumer).
true;;1;1;/**  * Remove the state change listener.  *  * @param consumer the event listener to remove.  */ ;/**  * Remove the state change listener.  *  * @param consumer the event listener to remove.  */ void removeStateChangeListener(BiConsumer<HealthCheck.State, HealthCheck> consumer).
true;;2;1;/**  * Sets the options to be used when invoking the check identified by the  * given id.  *  * @param id the health check id.  * @param options the health check options.  */ ;/**  * Sets the options to be used when invoking the check identified by the  * given id.  *  * @param id the health check id.  * @param options the health check options.  */ void setHealthCheckOptions(String id, Map<String, Object> options).
true;default;1;3;/**  * @see {@link #call(String, Map)}  *  * @param id the health check id.  * @return the result of the check or {@link Optional#empty()} if the id is unknown.  */ ;/**  * @see {@link #call(String, Map)}  *  * @param id the health check id.  * @return the result of the check or {@link Optional#empty()} if the id is unknown.  */ default Optional<HealthCheck.Result> call(String id) {     return call(id, Collections.emptyMap()). }
true;;2;1;/**  * Invokes the check identified by the given <code>id</code> with the given  * <code>options</code>.  *  * @param id the health check id.  * @param options the health check options.  * @return the result of the check or {@link Optional#empty()} if the id is unknown.  */ ;/**  * Invokes the check identified by the given <code>id</code> with the given  * <code>options</code>.  *  * @param id the health check id.  * @param options the health check options.  * @return the result of the check or {@link Optional#empty()} if the id is unknown.  */ Optional<HealthCheck.Result> call(String id, Map<String, Object> options).
true;;2;1;/**  * Notify the service that a check has changed status. This may be useful for  * stateful checks like checks rely on tcp/ip connections.  *  * @param check the health check.  * @param result the health check result.  */ ;/**  * Notify the service that a check has changed status. This may be useful for  * stateful checks like checks rely on tcp/ip connections.  *  * @param check the health check.  * @param result the health check result.  */ void notify(HealthCheck check, HealthCheck.Result result).
true;;0;1;/**  * Return a list of the known checks status.  *  * @return the list of results.  */ ;/**  * Return a list of the known checks status.  *  * @return the list of results.  */ Collection<HealthCheck.Result> getResults().
true;default;1;9;/**  * Access the underlying concrete HealthCheckService implementation to  * provide access to further features.  *  * @param clazz the proprietary class or interface of the underlying concrete HealthCheckService.  * @return an instance of the underlying concrete HealthCheckService as the required type.  */ ;/**  * Access the underlying concrete HealthCheckService implementation to  * provide access to further features.  *  * @param clazz the proprietary class or interface of the underlying concrete HealthCheckService.  * @return an instance of the underlying concrete HealthCheckService as the required type.  */ default <T extends HealthCheckService> T unwrap(Class<T> clazz) {     if (HealthCheckService.class.isAssignableFrom(clazz)) {         return clazz.cast(this).     }     throw new IllegalArgumentException("Unable to unwrap this HealthCheckService type (" + getClass() + ") to the required type (" + clazz + ")"). }
