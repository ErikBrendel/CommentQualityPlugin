commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel is starting.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel is starting.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextStartingEvent(CamelContext context).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel has been started successfully.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel has been started successfully.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextStartedEvent(CamelContext context).
true;;2;1;/**  * Creates an {@link CamelEvent} for Camel failing to start  *  * @param context camel context  * @param cause   the cause exception  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel failing to start  *  * @param context camel context  * @param cause   the cause exception  * @return the created event  */ CamelEvent createCamelContextStartupFailureEvent(CamelContext context, Throwable cause).
true;;2;1;/**  * Creates an {@link CamelEvent} for Camel failing to stop cleanly  *  * @param context camel context  * @param cause   the cause exception  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel failing to stop cleanly  *  * @param context camel context  * @param cause   the cause exception  * @return the created event  */ CamelEvent createCamelContextStopFailureEvent(CamelContext context, Throwable cause).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel is stopping.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel is stopping.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextStoppingEvent(CamelContext context).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel has been stopped successfully.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel has been stopped successfully.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextStoppedEvent(CamelContext context).
true;;3;1;/**  * Creates an {@link CamelEvent} for a Service failed to start cleanly  *  * @param context camel context  * @param service the service  * @param cause   the cause exception  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for a Service failed to start cleanly  *  * @param context camel context  * @param service the service  * @param cause   the cause exception  * @return the created event  */ CamelEvent createServiceStartupFailureEvent(CamelContext context, Object service, Throwable cause).
true;;3;1;/**  * Creates an {@link CamelEvent} for a Service failed to stop cleanly  *  * @param context camel context  * @param service the service  * @param cause   the cause exception  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for a Service failed to stop cleanly  *  * @param context camel context  * @param service the service  * @param cause   the cause exception  * @return the created event  */ CamelEvent createServiceStopFailureEvent(CamelContext context, Object service, Throwable cause).
true;;1;1;/**  * Creates an {@link CamelEvent} for {@link Route} has been started successfully.  *  * @param route the route  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for {@link Route} has been started successfully.  *  * @param route the route  * @return the created event  */ CamelEvent createRouteStartedEvent(Route route).
true;;1;1;/**  * Creates an {@link CamelEvent} for {@link Route} has been stopped successfully.  *  * @param route the route  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for {@link Route} has been stopped successfully.  *  * @param route the route  * @return the created event  */ CamelEvent createRouteStoppedEvent(Route route).
true;;1;1;/**  * Creates an {@link CamelEvent} for {@link Route} has been added successfully.  *  * @param route the route  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for {@link Route} has been added successfully.  *  * @param route the route  * @return the created event  */ CamelEvent createRouteAddedEvent(Route route).
true;;1;1;/**  * Creates an {@link CamelEvent} for {@link Route} has been removed successfully.  *  * @param route the route  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for {@link Route} has been removed successfully.  *  * @param route the route  * @return the created event  */ CamelEvent createRouteRemovedEvent(Route route).
true;;1;1;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has been created  *  * @param exchange the exchange  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has been created  *  * @param exchange the exchange  * @return the created event  */ CamelEvent createExchangeCreatedEvent(Exchange exchange).
true;;1;1;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has been completed successfully  *  * @param exchange the exchange  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has been completed successfully  *  * @param exchange the exchange  * @return the created event  */ CamelEvent createExchangeCompletedEvent(Exchange exchange).
true;;1;1;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has failed  *  * @param exchange the exchange  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has failed  *  * @param exchange the exchange  * @return the created event  */ CamelEvent createExchangeFailedEvent(Exchange exchange).
true;;4;2;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has failed  * but is being handled by the Camel error handlers such as an dead letter channel, or a doTry .. doCatch block.  * <p/>  * This event is triggered <b>before</b> sending the failure handler, where as  * <tt>createExchangeFailureHandledEvent</tt> if the event <b>after</b>.  *  * @param exchange          the exchange  * @param failureHandler    the failure handler such as moving the message to a dead letter queue  * @param deadLetterChannel whether it was a dead letter channel or not handling the failure  * @param deadLetterUri     the dead letter uri, if its a dead letter channel  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has failed  * but is being handled by the Camel error handlers such as an dead letter channel, or a doTry .. doCatch block.  * <p/>  * This event is triggered <b>before</b> sending the failure handler, where as  * <tt>createExchangeFailureHandledEvent</tt> if the event <b>after</b>.  *  * @param exchange          the exchange  * @param failureHandler    the failure handler such as moving the message to a dead letter queue  * @param deadLetterChannel whether it was a dead letter channel or not handling the failure  * @param deadLetterUri     the dead letter uri, if its a dead letter channel  * @return the created event  */ CamelEvent createExchangeFailureHandlingEvent(Exchange exchange, Processor failureHandler, boolean deadLetterChannel, String deadLetterUri).
true;;4;2;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has failed  * but was handled by the Camel error handlers such as an dead letter channel, or a doTry .. doCatch block.  * <p/>  * This event is triggered <b>after</b> the exchange was sent to failure handler, where as  * <tt>createExchangeFailureHandlingEvent</tt> if the event <b>before</b>.  *  * @param exchange          the exchange  * @param failureHandler    the failure handler such as moving the message to a dead letter queue  * @param deadLetterChannel whether it was a dead letter channel or not handling the failure  * @param deadLetterUri     the dead letter uri, if its a dead letter channel  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has failed  * but was handled by the Camel error handlers such as an dead letter channel, or a doTry .. doCatch block.  * <p/>  * This event is triggered <b>after</b> the exchange was sent to failure handler, where as  * <tt>createExchangeFailureHandlingEvent</tt> if the event <b>before</b>.  *  * @param exchange          the exchange  * @param failureHandler    the failure handler such as moving the message to a dead letter queue  * @param deadLetterChannel whether it was a dead letter channel or not handling the failure  * @param deadLetterUri     the dead letter uri, if its a dead letter channel  * @return the created event  */ CamelEvent createExchangeFailureHandledEvent(Exchange exchange, Processor failureHandler, boolean deadLetterChannel, String deadLetterUri).
true;;2;1;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} is about to be redelivered  *  * @param exchange the exchange  * @param attempt  the current redelivery attempt (starts from 1)  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} is about to be redelivered  *  * @param exchange the exchange  * @param attempt  the current redelivery attempt (starts from 1)  * @return the created event  */ CamelEvent createExchangeRedeliveryEvent(Exchange exchange, int attempt).
true;;2;1;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} is about to be sent to the endpoint (eg before).  *  * @param exchange  the exchange  * @param endpoint  the destination  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} is about to be sent to the endpoint (eg before).  *  * @param exchange  the exchange  * @param endpoint  the destination  * @return the created event  */ CamelEvent createExchangeSendingEvent(Exchange exchange, Endpoint endpoint).
true;;3;1;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has completely been sent to the endpoint (eg after).  *  * @param exchange  the exchange  * @param endpoint  the destination  * @param timeTaken time in millis taken  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} when an {@link org.apache.camel.Exchange} has completely been sent to the endpoint (eg after).  *  * @param exchange  the exchange  * @param endpoint  the destination  * @param timeTaken time in millis taken  * @return the created event  */ CamelEvent createExchangeSentEvent(Exchange exchange, Endpoint endpoint, long timeTaken).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel is suspending.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel is suspending.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextSuspendingEvent(CamelContext context).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel has been suspended successfully.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel has been suspended successfully.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextSuspendedEvent(CamelContext context).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel is resuming.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel is resuming.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextResumingEvent(CamelContext context).
true;;1;1;/**  * Creates an {@link CamelEvent} for Camel has been resumed successfully.  *  * @param context camel context  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel has been resumed successfully.  *  * @param context camel context  * @return the created event  */ CamelEvent createCamelContextResumedEvent(CamelContext context).
true;;2;1;/**  * Creates an {@link CamelEvent} for Camel failing to resume  *  * @param context camel context  * @param cause   the cause exception  * @return the created event  */ ;/**  * Creates an {@link CamelEvent} for Camel failing to resume  *  * @param context camel context  * @param cause   the cause exception  * @return the created event  */ CamelEvent createCamelContextResumeFailureEvent(CamelContext context, Throwable cause).
