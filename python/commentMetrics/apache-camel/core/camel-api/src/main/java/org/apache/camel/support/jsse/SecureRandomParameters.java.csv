commented;modifiers;parameterAmount;loc;comment;code
true;public;0;16;/**  * Returns a {@code SecureRandom} instance initialized using the configured  * algorithm and provider, if specified.  *  * @return the configured instance  *  * @throws GeneralSecurityException if the algorithm is not implemented by  *             any registered provider or if the identified provider does  *             not exist.  */ ;/**  * Returns a {@code SecureRandom} instance initialized using the configured  * algorithm and provider, if specified.  *  * @return the configured instance  *  * @throws GeneralSecurityException if the algorithm is not implemented by  *             any registered provider or if the identified provider does  *             not exist.  */ public SecureRandom createSecureRandom() throws GeneralSecurityException {     LOG.debug("Creating SecureRandom from SecureRandomParameters: {}", this).     SecureRandom secureRandom.     if (this.getProvider() != null) {         secureRandom = SecureRandom.getInstance(this.parsePropertyValue(this.getAlgorithm()), this.parsePropertyValue(this.getProvider())).     } else {         secureRandom = SecureRandom.getInstance(this.parsePropertyValue(this.getAlgorithm())).     }     LOG.debug("SecureRandom [{}] is using provider [{}] and algorithm [{}].", new Object[] { secureRandom, secureRandom.getProvider(), secureRandom.getAlgorithm() }).     return secureRandom. }
true;public;0;3;/**  * @see #setAlgorithm(String)  */ ;/**  * @see #setAlgorithm(String)  */ public String getAlgorithm() {     return algorithm. }
true;public;1;3;/**  * Sets the Random Number Generator (RNG) algorithm identifier for the  * {@link SecureRandom} factory method used to create the  * {@link SecureRandom} represented by this object's configuration.  * See Appendix A in the <a href=  * "http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA"  * > Java Cryptography Architecture Reference Guide</a>  * for information about standard RNG algorithm names.  *  * @param value the algorithm identifier  */ ;/**  * Sets the Random Number Generator (RNG) algorithm identifier for the  * {@link SecureRandom} factory method used to create the  * {@link SecureRandom} represented by this object's configuration.  * See Appendix A in the <a href=  * "http://download.oracle.com/javase/6/docs/technotes/guides/security/crypto/CryptoSpec.html#AppA"  * > Java Cryptography Architecture Reference Guide</a>  * for information about standard RNG algorithm names.  *  * @param value the algorithm identifier  */ public void setAlgorithm(String value) {     this.algorithm = value. }
true;public;0;3;/**  * @see #setProvider(String)  */ ;/**  * @see #setProvider(String)  */ public String getProvider() {     return provider. }
true;public;1;3;/**  * Sets the optional provider identifier for the {@link SecureRandom}  * factory method used to create the {@link SecureRandom} represented by  * this object's configuration.  *  * @param value the provider identifier or {@code null} to use the highest  *            priority provider implementing the desired algorithm  *  * @see Security#getProviders()  */ ;/**  * Sets the optional provider identifier for the {@link SecureRandom}  * factory method used to create the {@link SecureRandom} represented by  * this object's configuration.  *  * @param value the provider identifier or {@code null} to use the highest  *            priority provider implementing the desired algorithm  *  * @see Security#getProviders()  */ public void setProvider(String value) {     this.provider = value. }
false;public;0;10;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("SecureRandomParameters[algorithm=").     builder.append(algorithm).     builder.append(", provider=").     builder.append(provider).     builder.append("]").     return builder.toString(). }
