commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @see #setType(String)  */ ;/**  * @see #setType(String)  */ public String getType() {     return type. }
true;public;1;3;/**  * Sets the type of the key store to create and load. See Appendix A in the  * <a href="http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyStore"  * >Java Cryptography Architecture Standard Algorithm Name  * Documentation</a> for more information on standard names.  *  * @param value the key store type identifier (may be {@code null})  */ ;/**  * Sets the type of the key store to create and load. See Appendix A in the  * <a href="http://download.oracle.com/javase/6/docs/technotes/guides/security/StandardNames.html#KeyStore"  * >Java Cryptography Architecture Standard Algorithm Name  * Documentation</a> for more information on standard names.  *  * @param value the key store type identifier (may be {@code null})  */ public void setType(String value) {     this.type = value. }
true;public;0;3;/**  * @see #getPassword()  */ ;/**  * @see #getPassword()  */ public String getPassword() {     return password. }
true;public;1;3;/**  * Set the optional password for reading/opening/verifying the key store.  *  * @param value the password value (may be {@code null})  */ ;/**  * Set the optional password for reading/opening/verifying the key store.  *  * @param value the password value (may be {@code null})  */ public void setPassword(String value) {     this.password = value. }
true;public;0;3;/**  * @see #setProvider(String)  */ ;/**  * @see #setProvider(String)  */ public String getProvider() {     return provider. }
true;public;1;3;/**  * Sets the optional provider identifier for instantiating the key store.  *  * @param value the provider identifier (may be {@code null})  *  * @see Security#getProviders()  */ ;/**  * Sets the optional provider identifier for instantiating the key store.  *  * @param value the provider identifier (may be {@code null})  *  * @see Security#getProviders()  */ public void setProvider(String value) {     this.provider = value. }
true;public;0;3;/**  * @see #getResource()  */ ;/**  * @see #getResource()  */ public String getResource() {     return resource. }
true;public;1;3;/**  * Sets the optional file path, class path resource, or URL of the resource  * used to load the key store.  *  * @param value the resource (may be {@code null})  */ ;/**  * Sets the optional file path, class path resource, or URL of the resource  * used to load the key store.  *  * @param value the resource (may be {@code null})  */ public void setResource(String value) {     this.resource = value. }
true;public;0;41;/**  * Creates a {@link KeyStoreParameters} instance based off of the configuration state  * of this instance. If {@link #getType()} returns {@code null}, the default  * key store type is loaded, otherwise the type will be of that specified.  * <p/>  * The created instance will always be loaded, but if the type requires an  * input stream and {@link #getResource()} returns {@code null}, the  * instance will be empty. The loading of the resource, if not {@code null},  * is attempted by treating the resource as a file path, a class path  * resource, and a URL in that order. An exception is thrown if the resource  * cannot be resolved to readable input stream using any of the above  * methods.  *  * @return a configured and loaded key store  * @throws GeneralSecurityException if there is an error creating an instance  *             with the given configuration  * @throws IOException if there is an error resolving the configured  *             resource to an input stream  */ ;/**  * Creates a {@link KeyStoreParameters} instance based off of the configuration state  * of this instance. If {@link #getType()} returns {@code null}, the default  * key store type is loaded, otherwise the type will be of that specified.  * <p/>  * The created instance will always be loaded, but if the type requires an  * input stream and {@link #getResource()} returns {@code null}, the  * instance will be empty. The loading of the resource, if not {@code null},  * is attempted by treating the resource as a file path, a class path  * resource, and a URL in that order. An exception is thrown if the resource  * cannot be resolved to readable input stream using any of the above  * methods.  *  * @return a configured and loaded key store  * @throws GeneralSecurityException if there is an error creating an instance  *             with the given configuration  * @throws IOException if there is an error resolving the configured  *             resource to an input stream  */ public KeyStore createKeyStore() throws GeneralSecurityException, IOException {     LOG.trace("Creating KeyStore instance from KeyStoreParameters [{}].", this).     String ksType = this.parsePropertyValue(this.type).     if (ksType == null) {         ksType = KeyStore.getDefaultType().     }     char[] ksPassword = null.     if (this.password != null) {         ksPassword = this.parsePropertyValue(this.password).toCharArray().     }     KeyStore ks.     if (this.provider == null) {         ks = KeyStore.getInstance(ksType).     } else {         ks = KeyStore.getInstance(ksType, this.parsePropertyValue(this.provider)).     }     if (this.resource == null) {         ks.load(null, ksPassword).     } else {         InputStream is = this.resolveResource(this.parsePropertyValue(this.resource)).         ks.load(is, ksPassword).     }     if (LOG.isDebugEnabled()) {         List<String> aliases = new LinkedList<>().         Enumeration<String> aliasEnum = ks.aliases().         while (aliasEnum.hasMoreElements()) {             aliases.add(aliasEnum.nextElement()).         }         LOG.debug("KeyStore [{}], initialized from [{}], is using provider [{}], has type [{}], and contains aliases {}.", new Object[] { ks, this, ks.getProvider(), ks.getType(), aliases }).     }     return ks. }
false;public;0;14;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("KeyStoreParameters[type=").     builder.append(type).     builder.append(", password=").     builder.append("********").     builder.append(", provider=").     builder.append(provider).     builder.append(", resource=").     builder.append(resource).     builder.append("]").     return builder.toString(). }
