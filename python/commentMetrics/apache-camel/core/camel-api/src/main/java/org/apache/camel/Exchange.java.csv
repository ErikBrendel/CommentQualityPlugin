commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the {@link ExchangePattern} (MEP) of this exchange.  *  * @return the message exchange pattern of this exchange  */ ;/**  * Returns the {@link ExchangePattern} (MEP) of this exchange.  *  * @return the message exchange pattern of this exchange  */ ExchangePattern getPattern().
true;;1;1;/**  * Allows the {@link ExchangePattern} (MEP) of this exchange to be customized.  *  * This typically won't be required as an exchange can be created with a specific MEP  * by calling {@link Endpoint#createExchange(ExchangePattern)} but it is here just in case  * it is needed.  *  * @param pattern  the pattern  */ ;/**  * Allows the {@link ExchangePattern} (MEP) of this exchange to be customized.  *  * This typically won't be required as an exchange can be created with a specific MEP  * by calling {@link Endpoint#createExchange(ExchangePattern)} but it is here just in case  * it is needed.  *  * @param pattern  the pattern  */ void setPattern(ExchangePattern pattern).
true;;1;1;/**  * Returns a property associated with this exchange by name  *  * @param name the name of the property  * @return the value of the given property or <tt>null</tt> if there is no property for  *         the given name  */ ;/**  * Returns a property associated with this exchange by name  *  * @param name the name of the property  * @return the value of the given property or <tt>null</tt> if there is no property for  *         the given name  */ Object getProperty(String name).
true;;2;1;/**  * Returns a property associated with this exchange by name  *  * @param name the name of the property  * @param defaultValue the default value to return if property was absent  * @return the value of the given property or <tt>defaultValue</tt> if there is no  *         property for the given name  */ ;/**  * Returns a property associated with this exchange by name  *  * @param name the name of the property  * @param defaultValue the default value to return if property was absent  * @return the value of the given property or <tt>defaultValue</tt> if there is no  *         property for the given name  */ Object getProperty(String name, Object defaultValue).
true;;2;1;/**  * Returns a property associated with this exchange by name and specifying  * the type required  *  * @param name the name of the property  * @param type the type of the property  * @return the value of the given property or <tt>null</tt> if there is no property for  *         the given name or <tt>null</tt> if it cannot be converted to the given type  */ ;/**  * Returns a property associated with this exchange by name and specifying  * the type required  *  * @param name the name of the property  * @param type the type of the property  * @return the value of the given property or <tt>null</tt> if there is no property for  *         the given name or <tt>null</tt> if it cannot be converted to the given type  */ <T> T getProperty(String name, Class<T> type).
true;;3;1;/**  * Returns a property associated with this exchange by name and specifying  * the type required  *  * @param name the name of the property  * @param defaultValue the default value to return if property was absent  * @param type the type of the property  * @return the value of the given property or <tt>defaultValue</tt> if there is no property for  *         the given name or <tt>null</tt> if it cannot be converted to the given type  */ ;/**  * Returns a property associated with this exchange by name and specifying  * the type required  *  * @param name the name of the property  * @param defaultValue the default value to return if property was absent  * @param type the type of the property  * @return the value of the given property or <tt>defaultValue</tt> if there is no property for  *         the given name or <tt>null</tt> if it cannot be converted to the given type  */ <T> T getProperty(String name, Object defaultValue, Class<T> type).
true;;2;1;/**  * Sets a property on the exchange  *  * @param name  of the property  * @param value to associate with the name  */ ;/**  * Sets a property on the exchange  *  * @param name  of the property  * @param value to associate with the name  */ void setProperty(String name, Object value).
true;;1;1;/**  * Removes the given property on the exchange  *  * @param name of the property  * @return the old value of the property  */ ;/**  * Removes the given property on the exchange  *  * @param name of the property  * @return the old value of the property  */ Object removeProperty(String name).
true;;1;1;/**  * Remove all of the properties associated with the exchange matching a specific pattern  *  * @param pattern pattern of names  * @return boolean whether any properties matched  */ ;/**  * Remove all of the properties associated with the exchange matching a specific pattern  *  * @param pattern pattern of names  * @return boolean whether any properties matched  */ boolean removeProperties(String pattern).
true;;2;1;/**  * Removes the properties from this exchange that match the given <tt>pattern</tt>,  * except for the ones matching one ore more <tt>excludePatterns</tt>  *  * @param pattern pattern of names that should be removed  * @param excludePatterns one or more pattern of properties names that should be excluded (= preserved)  * @return boolean whether any properties matched  */ ;/**  * Removes the properties from this exchange that match the given <tt>pattern</tt>,  * except for the ones matching one ore more <tt>excludePatterns</tt>  *  * @param pattern pattern of names that should be removed  * @param excludePatterns one or more pattern of properties names that should be excluded (= preserved)  * @return boolean whether any properties matched  */ boolean removeProperties(String pattern, String... excludePatterns).
true;;0;1;/**  * Returns all of the properties associated with the exchange  *  * @return all the headers in a Map  */ ;/**  * Returns all of the properties associated with the exchange  *  * @return all the headers in a Map  */ Map<String, Object> getProperties().
true;;0;1;/**  * Returns whether any properties has been set  *  * @return <tt>true</tt> if any properties has been set  */ ;/**  * Returns whether any properties has been set  *  * @return <tt>true</tt> if any properties has been set  */ boolean hasProperties().
true;;0;1;/**  * Returns the inbound request message  *  * @return the message  */ ;/**  * Returns the inbound request message  *  * @return the message  */ Message getIn().
true;;0;1;/**  * Returns the current message  *  * @return the current message  */ ;/**  * Returns the current message  *  * @return the current message  */ Message getMessage().
true;;1;1;/**  * Returns the current message as the given type  *  * @param type the given type  * @return the message as the given type or <tt>null</tt> if not possible to covert to given type  */ ;/**  * Returns the current message as the given type  *  * @param type the given type  * @return the message as the given type or <tt>null</tt> if not possible to covert to given type  */ <T> T getMessage(Class<T> type).
true;;1;1;/**  * Replace the current message instance.  *  * @param message the new message  */ ;/**  * Replace the current message instance.  *  * @param message the new message  */ void setMessage(Message message).
true;;1;1;/**  * Returns the inbound request message as the given type  *  * @param type the given type  * @return the message as the given type or <tt>null</tt> if not possible to covert to given type  */ ;/**  * Returns the inbound request message as the given type  *  * @param type the given type  * @return the message as the given type or <tt>null</tt> if not possible to covert to given type  */ <T> T getIn(Class<T> type).
true;;1;1;/**  * Sets the inbound message instance  *  * @param in the inbound message  */ ;/**  * Sets the inbound message instance  *  * @param in the inbound message  */ void setIn(Message in).
true;;0;1;/**  * Returns the outbound message, lazily creating one if one has not already  * been associated with this exchange.  * <p/>  * <br/><b>Important:</b> If you want to change the current message, then use {@link #getIn()} instead as it will  * ensure headers etc. is kept and propagated when routing continues. Bottom line end users should rarely use  * this method.  * <p/>  * <br/>If you want to test whether an OUT message have been set or not, use the {@link #hasOut()} method.  * <p/>  * See also the class java doc for this {@link Exchange} for more details and this  * <a href="http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html">FAQ entry</a>.  *  * @return the response  * @see #getIn()  */ ;/**  * Returns the outbound message, lazily creating one if one has not already  * been associated with this exchange.  * <p/>  * <br/><b>Important:</b> If you want to change the current message, then use {@link #getIn()} instead as it will  * ensure headers etc. is kept and propagated when routing continues. Bottom line end users should rarely use  * this method.  * <p/>  * <br/>If you want to test whether an OUT message have been set or not, use the {@link #hasOut()} method.  * <p/>  * See also the class java doc for this {@link Exchange} for more details and this  * <a href="http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html">FAQ entry</a>.  *  * @return the response  * @see #getIn()  */ Message getOut().
true;;1;1;/**  * Returns the outbound request message as the given type  * <p/>  * <br/><b>Important:</b> If you want to change the current message, then use {@link #getIn()} instead as it will  * ensure headers etc. is kept and propagated when routing continues. Bottom line end users should rarely use  * this method.  * <p/>  * <br/>If you want to test whether an OUT message have been set or not, use the {@link #hasOut()} method.  * <p/>  * See also the class java doc for this {@link Exchange} for more details and this  * <a href="http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html">FAQ entry</a>.  *  * @param type the given type  * @return the message as the given type or <tt>null</tt> if not possible to covert to given type  * @see #getIn(Class)  */ ;/**  * Returns the outbound request message as the given type  * <p/>  * <br/><b>Important:</b> If you want to change the current message, then use {@link #getIn()} instead as it will  * ensure headers etc. is kept and propagated when routing continues. Bottom line end users should rarely use  * this method.  * <p/>  * <br/>If you want to test whether an OUT message have been set or not, use the {@link #hasOut()} method.  * <p/>  * See also the class java doc for this {@link Exchange} for more details and this  * <a href="http://camel.apache.org/using-getin-or-getout-methods-on-exchange.html">FAQ entry</a>.  *  * @param type the given type  * @return the message as the given type or <tt>null</tt> if not possible to covert to given type  * @see #getIn(Class)  */ <T> T getOut(Class<T> type).
true;;0;1;/**  * Returns whether an OUT message has been set or not.  *  * @return <tt>true</tt> if an OUT message exists, <tt>false</tt> otherwise.  */ ;/**  * Returns whether an OUT message has been set or not.  *  * @return <tt>true</tt> if an OUT message exists, <tt>false</tt> otherwise.  */ boolean hasOut().
true;;1;1;/**  * Sets the outbound message  *  * @param out the outbound message  */ ;/**  * Sets the outbound message  *  * @param out the outbound message  */ void setOut(Message out).
true;;0;1;/**  * Returns the exception associated with this exchange  *  * @return the exception (or null if no faults)  */ ;/**  * Returns the exception associated with this exchange  *  * @return the exception (or null if no faults)  */ Exception getException().
true;;1;1;/**  * Returns the exception associated with this exchange.  * <p/>  * Is used to get the caused exception that typically have been wrapped in some sort  * of Camel wrapper exception  * <p/>  * The strategy is to look in the exception hierarchy to find the first given cause that matches the type.  * Will start from the bottom (the real cause) and walk upwards.  *  * @param type the exception type  * @return the exception (or <tt>null</tt> if no caused exception matched)  */ ;/**  * Returns the exception associated with this exchange.  * <p/>  * Is used to get the caused exception that typically have been wrapped in some sort  * of Camel wrapper exception  * <p/>  * The strategy is to look in the exception hierarchy to find the first given cause that matches the type.  * Will start from the bottom (the real cause) and walk upwards.  *  * @param type the exception type  * @return the exception (or <tt>null</tt> if no caused exception matched)  */ <T> T getException(Class<T> type).
true;;1;1;/**  * Sets the exception associated with this exchange  * <p/>  * Camel will wrap {@link Throwable} into {@link Exception} type to  * accommodate for the {@link #getException()} method returning a plain {@link Exception} type.  *  * @param t  the caused exception  */ ;/**  * Sets the exception associated with this exchange  * <p/>  * Camel will wrap {@link Throwable} into {@link Exception} type to  * accommodate for the {@link #getException()} method returning a plain {@link Exception} type.  *  * @param t  the caused exception  */ void setException(Throwable t).
true;;0;1;/**  * Returns true if this exchange failed due to either an exception or fault  *  * @return true if this exchange failed due to either an exception or fault  * @see Exchange#getException()  * @see Message#setFault(boolean)  * @see Message#isFault()  */ ;/**  * Returns true if this exchange failed due to either an exception or fault  *  * @return true if this exchange failed due to either an exception or fault  * @see Exchange#getException()  * @see Message#setFault(boolean)  * @see Message#isFault()  */ boolean isFailed().
true;;0;1;/**  * Returns true if this exchange is transacted  */ ;/**  * Returns true if this exchange is transacted  */ boolean isTransacted().
true;;0;1;/**  * Returns true if this exchange is an external initiated redelivered message (such as a JMS broker).  * <p/>  * <b>Important: </b> It is not always possible to determine if the message is a redelivery  * or not, and therefore <tt>null</tt> is returned. Such an example would be a JDBC message.  * However JMS brokers provides details if a message is redelivered.  *  * @return <tt>true</tt> if redelivered, <tt>false</tt> if not, <tt>null</tt> if not able to determine  */ ;/**  * Returns true if this exchange is an external initiated redelivered message (such as a JMS broker).  * <p/>  * <b>Important: </b> It is not always possible to determine if the message is a redelivery  * or not, and therefore <tt>null</tt> is returned. Such an example would be a JDBC message.  * However JMS brokers provides details if a message is redelivered.  *  * @return <tt>true</tt> if redelivered, <tt>false</tt> if not, <tt>null</tt> if not able to determine  */ Boolean isExternalRedelivered().
true;;0;1;/**  * Returns true if this exchange is marked for rollback  */ ;/**  * Returns true if this exchange is marked for rollback  */ boolean isRollbackOnly().
true;;0;1;/**  * Returns the container so that a processor can resolve endpoints from URIs  *  * @return the container which owns this exchange  */ ;/**  * Returns the container so that a processor can resolve endpoints from URIs  *  * @return the container which owns this exchange  */ CamelContext getContext().
true;;0;1;/**  * Creates a copy of the current message exchange so that it can be  * forwarded to another destination  */ ;/**  * Creates a copy of the current message exchange so that it can be  * forwarded to another destination  */ Exchange copy().
true;;0;1;/**  * Returns the endpoint which originated this message exchange if a consumer on an endpoint  * created the message exchange, otherwise this property will be <tt>null</tt>  */ ;/**  * Returns the endpoint which originated this message exchange if a consumer on an endpoint  * created the message exchange, otherwise this property will be <tt>null</tt>  */ Endpoint getFromEndpoint().
true;;1;1;/**  * Sets the endpoint which originated this message exchange. This method  * should typically only be called by {@link org.apache.camel.Endpoint} implementations  *  * @param fromEndpoint the endpoint which is originating this message exchange  */ ;/**  * Sets the endpoint which originated this message exchange. This method  * should typically only be called by {@link org.apache.camel.Endpoint} implementations  *  * @param fromEndpoint the endpoint which is originating this message exchange  */ void setFromEndpoint(Endpoint fromEndpoint).
true;;0;1;/**  * Returns the route id which originated this message exchange if a route consumer on an endpoint  * created the message exchange, otherwise this property will be <tt>null</tt>  */ ;/**  * Returns the route id which originated this message exchange if a route consumer on an endpoint  * created the message exchange, otherwise this property will be <tt>null</tt>  */ String getFromRouteId().
true;;1;1;/**  * Sets the route id which originated this message exchange. This method  * should typically only be called by the internal framework.  *  * @param fromRouteId the from route id  */ ;/**  * Sets the route id which originated this message exchange. This method  * should typically only be called by the internal framework.  *  * @param fromRouteId the from route id  */ void setFromRouteId(String fromRouteId).
true;;0;1;/**  * Returns the unit of work that this exchange belongs to. which may map to  * zero, one or more physical transactions  */ ;/**  * Returns the unit of work that this exchange belongs to. which may map to  * zero, one or more physical transactions  */ UnitOfWork getUnitOfWork().
true;;1;1;/**  * Sets the unit of work that this exchange belongs to. which may map to  * zero, one or more physical transactions  */ ;/**  * Sets the unit of work that this exchange belongs to. which may map to  * zero, one or more physical transactions  */ void setUnitOfWork(UnitOfWork unitOfWork).
true;;0;1;/**  * Returns the exchange id (unique)  */ ;/**  * Returns the exchange id (unique)  */ String getExchangeId().
true;;1;1;/**  * Set the exchange id  */ ;/**  * Set the exchange id  */ void setExchangeId(String id).
true;;1;1;/**  * Adds a {@link org.apache.camel.spi.Synchronization} to be invoked as callback when  * this exchange is completed.  *  * @param onCompletion  the callback to invoke on completion of this exchange  */ ;/**  * Adds a {@link org.apache.camel.spi.Synchronization} to be invoked as callback when  * this exchange is completed.  *  * @param onCompletion  the callback to invoke on completion of this exchange  */ void addOnCompletion(Synchronization onCompletion).
true;;1;1;/**  * Checks if the passed {@link org.apache.camel.spi.Synchronization} instance is  * already contained on this exchange.  *  * @param onCompletion  the callback instance that is being checked for  * @return <tt>true</tt>, if callback instance is already contained on this exchange, else <tt>false</tt>  */ ;/**  * Checks if the passed {@link org.apache.camel.spi.Synchronization} instance is  * already contained on this exchange.  *  * @param onCompletion  the callback instance that is being checked for  * @return <tt>true</tt>, if callback instance is already contained on this exchange, else <tt>false</tt>  */ boolean containsOnCompletion(Synchronization onCompletion).
true;;1;1;/**  * Handover all the on completions from this exchange to the target exchange.  *  * @param target the target exchange  */ ;/**  * Handover all the on completions from this exchange to the target exchange.  *  * @param target the target exchange  */ void handoverCompletions(Exchange target).
true;;0;1;/**  * Handover all the on completions from this exchange  *  * @return the on completions  */ ;/**  * Handover all the on completions from this exchange  *  * @return the on completions  */ List<Synchronization> handoverCompletions().
true;;0;1;/**  * Gets the timestamp when this exchange was created.  */ ;/**  * Gets the timestamp when this exchange was created.  */ Date getCreated().
