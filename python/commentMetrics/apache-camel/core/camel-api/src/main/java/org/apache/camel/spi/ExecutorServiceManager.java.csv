commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the {@link ThreadPoolFactory} to use for creating the thread pools.  *  * @return the thread pool factory  */ ;/**  * Gets the {@link ThreadPoolFactory} to use for creating the thread pools.  *  * @return the thread pool factory  */ ThreadPoolFactory getThreadPoolFactory().
true;;1;1;/**  * Sets a custom {@link ThreadPoolFactory} to use  *  * @param threadPoolFactory the thread pool factory  */ ;/**  * Sets a custom {@link ThreadPoolFactory} to use  *  * @param threadPoolFactory the thread pool factory  */ void setThreadPoolFactory(ThreadPoolFactory threadPoolFactory).
true;;1;1;/**  * Creates a full thread name  *  * @param name name which is appended to the full thread name  * @return the full thread name  */ ;/**  * Creates a full thread name  *  * @param name name which is appended to the full thread name  * @return the full thread name  */ String resolveThreadName(String name).
true;;1;1;/**  * Gets the thread pool profile by the given id  *  * @param id id of the thread pool profile to get  * @return the found profile, or <tt>null</tt> if not found  */ ;/**  * Gets the thread pool profile by the given id  *  * @param id id of the thread pool profile to get  * @return the found profile, or <tt>null</tt> if not found  */ ThreadPoolProfile getThreadPoolProfile(String id).
true;;1;1;/**  * Registers the given thread pool profile  *  * @param profile the profile  */ ;/**  * Registers the given thread pool profile  *  * @param profile the profile  */ void registerThreadPoolProfile(ThreadPoolProfile profile).
true;;1;1;/**  * Sets the default thread pool profile  *  * @param defaultThreadPoolProfile the new default thread pool profile  */ ;/**  * Sets the default thread pool profile  *  * @param defaultThreadPoolProfile the new default thread pool profile  */ void setDefaultThreadPoolProfile(ThreadPoolProfile defaultThreadPoolProfile).
true;;0;1;/**  * Gets the default thread pool profile  *  * @return the default profile which are newer <tt>null</tt>  */ ;/**  * Gets the default thread pool profile  *  * @return the default profile which are newer <tt>null</tt>  */ ThreadPoolProfile getDefaultThreadPoolProfile().
true;;1;1;/**  * Sets the thread name pattern used for creating the full thread name.  * <p/>  * The default pattern is: <tt>Camel (#camelId#) thread ##counter# - #name#</tt>  * <p/>  * Where <tt>#camelId#</tt> is the name of the {@link org.apache.camel.CamelContext}  * <br/>and <tt>#counter#</tt> is a unique incrementing counter.  * <br/>and <tt>#name#</tt> is the regular thread name.  * <br/>You can also use <tt>#longName#</tt> is the long thread name which can include endpoint parameters etc.  *  * @param pattern the pattern  * @throws IllegalArgumentException if the pattern is invalid.  */ ;/**  * Sets the thread name pattern used for creating the full thread name.  * <p/>  * The default pattern is: <tt>Camel (#camelId#) thread ##counter# - #name#</tt>  * <p/>  * Where <tt>#camelId#</tt> is the name of the {@link org.apache.camel.CamelContext}  * <br/>and <tt>#counter#</tt> is a unique incrementing counter.  * <br/>and <tt>#name#</tt> is the regular thread name.  * <br/>You can also use <tt>#longName#</tt> is the long thread name which can include endpoint parameters etc.  *  * @param pattern the pattern  * @throws IllegalArgumentException if the pattern is invalid.  */ void setThreadNamePattern(String pattern) throws IllegalArgumentException.
true;;0;1;/**  * Gets the thread name pattern to use  *  * @return the pattern  */ ;/**  * Gets the thread name pattern to use  *  * @return the pattern  */ String getThreadNamePattern().
true;;1;1;/**  * Sets the time to wait for thread pools to shutdown orderly, when invoking the  * {@link #shutdown()} method.  * <p/>  * The default value is <tt>10000</tt> millis.  *  * @param timeInMillis time in millis.  */ ;/**  * Sets the time to wait for thread pools to shutdown orderly, when invoking the  * {@link #shutdown()} method.  * <p/>  * The default value is <tt>10000</tt> millis.  *  * @param timeInMillis time in millis.  */ void setShutdownAwaitTermination(long timeInMillis).
true;;0;1;/**  * Gets the time to wait for thread pools to shutdown orderly, when invoking the  * {@link #shutdown()} method.  * <p/>  * The default value is <tt>10000</tt> millis.  *  * @return the timeout value  */ ;/**  * Gets the time to wait for thread pools to shutdown orderly, when invoking the  * {@link #shutdown()} method.  * <p/>  * The default value is <tt>10000</tt> millis.  *  * @return the timeout value  */ long getShutdownAwaitTermination().
true;;2;1;/**  * Creates a new daemon thread with the given name.  *  * @param name     name which is appended to the thread name  * @param runnable a runnable to be executed by new thread instance  * @return the created thread  */ ;/**  * Creates a new daemon thread with the given name.  *  * @param name     name which is appended to the thread name  * @param runnable a runnable to be executed by new thread instance  * @return the created thread  */ Thread newThread(String name, Runnable runnable).
true;;2;1;/**  * Creates a new thread pool using the default thread pool profile.  *  * @param source the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name   name which is appended to the thread name  * @return the created thread pool  */ ;/**  * Creates a new thread pool using the default thread pool profile.  *  * @param source the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name   name which is appended to the thread name  * @return the created thread pool  */ ExecutorService newDefaultThreadPool(Object source, String name).
true;;2;1;/**  * Creates a new scheduled thread pool using the default thread pool profile.  *  * @param source the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name   name which is appended to the thread name  * @return the created thread pool  */ ;/**  * Creates a new scheduled thread pool using the default thread pool profile.  *  * @param source the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name   name which is appended to the thread name  * @return the created thread pool  */ ScheduledExecutorService newDefaultScheduledThreadPool(Object source, String name).
true;;3;1;/**  * Creates a new thread pool using the given profile  *  * @param source   the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name     name which is appended to the thread name  * @param profile the profile with the thread pool settings to use  * @return the created thread pool  */ ;/**  * Creates a new thread pool using the given profile  *  * @param source   the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name     name which is appended to the thread name  * @param profile the profile with the thread pool settings to use  * @return the created thread pool  */ ExecutorService newThreadPool(Object source, String name, ThreadPoolProfile profile).
true;;3;1;/**  * Creates a new thread pool using using the given profile id  *  * @param source    the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name      name which is appended to the thread name  * @param profileId the id of the profile with the thread pool settings to use  * @return the created thread pool, or <tt>null</tt> if the thread pool profile could not be found  */ ;/**  * Creates a new thread pool using using the given profile id  *  * @param source    the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name      name which is appended to the thread name  * @param profileId the id of the profile with the thread pool settings to use  * @return the created thread pool, or <tt>null</tt> if the thread pool profile could not be found  */ ExecutorService newThreadPool(Object source, String name, String profileId).
true;;4;1;/**  * Creates a new thread pool.  * <p/>  * Will fallback and use values from the default thread pool profile for keep alive time, rejection policy  * and other parameters which cannot be specified.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param poolSize    the core pool size  * @param maxPoolSize the maximum pool size  * @return the created thread pool  */ ;/**  * Creates a new thread pool.  * <p/>  * Will fallback and use values from the default thread pool profile for keep alive time, rejection policy  * and other parameters which cannot be specified.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param poolSize    the core pool size  * @param maxPoolSize the maximum pool size  * @return the created thread pool  */ ExecutorService newThreadPool(Object source, String name, int poolSize, int maxPoolSize).
true;;2;1;/**  * Creates a new single-threaded thread pool. This is often used for background threads.  * <p/>  * Notice that there will always be a single thread in the pool. If you want the pool to be  * able to shrink to no threads, then use the <tt>newThreadPool</tt> method, and use  * 0 in core pool size, and 1 in max pool size.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @return the created thread pool  */ ;/**  * Creates a new single-threaded thread pool. This is often used for background threads.  * <p/>  * Notice that there will always be a single thread in the pool. If you want the pool to be  * able to shrink to no threads, then use the <tt>newThreadPool</tt> method, and use  * 0 in core pool size, and 1 in max pool size.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @return the created thread pool  */ ExecutorService newSingleThreadExecutor(Object source, String name).
true;;2;1;/**  * Creates a new cached thread pool.  * <p/>  * <b>Important:</b> Using cached thread pool is discouraged as they have no upper bound and can overload the JVM.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @return the created thread pool  */ ;/**  * Creates a new cached thread pool.  * <p/>  * <b>Important:</b> Using cached thread pool is discouraged as they have no upper bound and can overload the JVM.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @return the created thread pool  */ ExecutorService newCachedThreadPool(Object source, String name).
true;;3;1;/**  * Creates a new fixed thread pool.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param poolSize    the core pool size  * @return the created thread pool  */ ;/**  * Creates a new fixed thread pool.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param poolSize    the core pool size  * @return the created thread pool  */ ExecutorService newFixedThreadPool(Object source, String name, int poolSize).
true;;3;1;/**  * Creates a new scheduled thread pool.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param poolSize    the core pool size  * @return the created thread pool  */ ;/**  * Creates a new scheduled thread pool.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param poolSize    the core pool size  * @return the created thread pool  */ ScheduledExecutorService newScheduledThreadPool(Object source, String name, int poolSize).
true;;2;1;/**  * Creates a new single-threaded thread pool. This is often used for background threads.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @return the created thread pool  */ ;/**  * Creates a new single-threaded thread pool. This is often used for background threads.  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @return the created thread pool  */ ScheduledExecutorService newSingleThreadScheduledExecutor(Object source, String name).
true;;3;1;/**  * Creates a new scheduled thread pool using a profile  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param profile     the profile with the thread pool settings to use  * @return created thread pool  */ ;/**  * Creates a new scheduled thread pool using a profile  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param profile     the profile with the thread pool settings to use  * @return created thread pool  */ ScheduledExecutorService newScheduledThreadPool(Object source, String name, ThreadPoolProfile profile).
true;;3;1;/**  * Creates a new scheduled thread pool using a profile id  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param profileId   the id of the profile with the thread pool settings to use  * @return created thread pool  */ ;/**  * Creates a new scheduled thread pool using a profile id  *  * @param source      the source object, usually it should be <tt>this</tt> passed in as parameter  * @param name        name which is appended to the thread name  * @param profileId   the id of the profile with the thread pool settings to use  * @return created thread pool  */ ScheduledExecutorService newScheduledThreadPool(Object source, String name, String profileId).
true;;1;1;/**  * Shutdown the given executor service (<b>not</b> graceful).  * <p/>  * This implementation will issues a regular shutdown of the executor service,  * ie calling {@link java.util.concurrent.ExecutorService#shutdown()} and return.  *  * @param executorService the executor service to shutdown  * @see java.util.concurrent.ExecutorService#shutdown()  */ ;/**  * Shutdown the given executor service (<b>not</b> graceful).  * <p/>  * This implementation will issues a regular shutdown of the executor service,  * ie calling {@link java.util.concurrent.ExecutorService#shutdown()} and return.  *  * @param executorService the executor service to shutdown  * @see java.util.concurrent.ExecutorService#shutdown()  */ void shutdown(ExecutorService executorService).
true;;1;1;/**  * Shutdown the given executor service graceful at first, and then aggressively  * if the await termination timeout was hit.  * <p/>  * Will try to perform an orderly shutdown by giving the running threads  * time to complete tasks, before going more aggressively by doing a  * {@link #shutdownNow(java.util.concurrent.ExecutorService)} which  * forces a shutdown. The {@link #getShutdownAwaitTermination()}  * is used as timeout value waiting for orderly shutdown to  * complete normally, before going aggressively.  *  * @param executorService the executor service to shutdown  * @see java.util.concurrent.ExecutorService#shutdown()  * @see #getShutdownAwaitTermination()  */ ;/**  * Shutdown the given executor service graceful at first, and then aggressively  * if the await termination timeout was hit.  * <p/>  * Will try to perform an orderly shutdown by giving the running threads  * time to complete tasks, before going more aggressively by doing a  * {@link #shutdownNow(java.util.concurrent.ExecutorService)} which  * forces a shutdown. The {@link #getShutdownAwaitTermination()}  * is used as timeout value waiting for orderly shutdown to  * complete normally, before going aggressively.  *  * @param executorService the executor service to shutdown  * @see java.util.concurrent.ExecutorService#shutdown()  * @see #getShutdownAwaitTermination()  */ void shutdownGraceful(ExecutorService executorService).
true;;2;1;/**  * Shutdown the given executor service graceful at first, and then aggressively  * if the await termination timeout was hit.  * <p/>  * Will try to perform an orderly shutdown by giving the running threads  * time to complete tasks, before going more aggressively by doing a  * {@link #shutdownNow(java.util.concurrent.ExecutorService)} which  * forces a shutdown. The parameter <tt>shutdownAwaitTermination</tt>  * is used as timeout value waiting for orderly shutdown to  * complete normally, before going aggressively.  *  * @param executorService the executor service to shutdown  * @param shutdownAwaitTermination timeout in millis to wait for orderly shutdown  * @see java.util.concurrent.ExecutorService#shutdown()  */ ;/**  * Shutdown the given executor service graceful at first, and then aggressively  * if the await termination timeout was hit.  * <p/>  * Will try to perform an orderly shutdown by giving the running threads  * time to complete tasks, before going more aggressively by doing a  * {@link #shutdownNow(java.util.concurrent.ExecutorService)} which  * forces a shutdown. The parameter <tt>shutdownAwaitTermination</tt>  * is used as timeout value waiting for orderly shutdown to  * complete normally, before going aggressively.  *  * @param executorService the executor service to shutdown  * @param shutdownAwaitTermination timeout in millis to wait for orderly shutdown  * @see java.util.concurrent.ExecutorService#shutdown()  */ void shutdownGraceful(ExecutorService executorService, long shutdownAwaitTermination).
true;;1;1;/**  * Shutdown now the given executor service aggressively.  * <p/>  * This implementation will issues a regular shutdownNow of the executor service,  * ie calling {@link java.util.concurrent.ExecutorService#shutdownNow()} and return.  *  * @param executorService the executor service to shutdown now  * @return list of tasks that never commenced execution  * @see java.util.concurrent.ExecutorService#shutdownNow()  */ ;/**  * Shutdown now the given executor service aggressively.  * <p/>  * This implementation will issues a regular shutdownNow of the executor service,  * ie calling {@link java.util.concurrent.ExecutorService#shutdownNow()} and return.  *  * @param executorService the executor service to shutdown now  * @return list of tasks that never commenced execution  * @see java.util.concurrent.ExecutorService#shutdownNow()  */ List<Runnable> shutdownNow(ExecutorService executorService).
true;;2;1;/**  * Awaits the termination of the thread pool.  * <p/>  * This implementation will log every 2nd second at INFO level that we are waiting, so the end user  * can see we are not hanging in case it takes longer time to terminate the pool.  *  * @param executorService            the thread pool  * @param shutdownAwaitTermination   time in millis to use as timeout  * @return <tt>true</tt> if the pool is terminated, or <tt>false</tt> if we timed out  * @throws InterruptedException is thrown if we are interrupted during waiting  */ ;/**  * Awaits the termination of the thread pool.  * <p/>  * This implementation will log every 2nd second at INFO level that we are waiting, so the end user  * can see we are not hanging in case it takes longer time to terminate the pool.  *  * @param executorService            the thread pool  * @param shutdownAwaitTermination   time in millis to use as timeout  * @return <tt>true</tt> if the pool is terminated, or <tt>false</tt> if we timed out  * @throws InterruptedException is thrown if we are interrupted during waiting  */ boolean awaitTermination(ExecutorService executorService, long shutdownAwaitTermination) throws InterruptedException.
