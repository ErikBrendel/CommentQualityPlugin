commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void addAllSniHostNames(List<String> sniHostNames) {     for (String sniHostName : sniHostNames) {         this.sniHostNames.add(new SNIHostName(sniHostName)).     } }
false;public;1;3;;public void setSniHostName(String sniHostName) {     this.sniHostNames.add(new SNIHostName(sniHostName)). }
false;protected;0;4;;@Override protected List<SNIServerName> getSNIHostNames() {     return sniHostNames. }
false;protected;0;4;;@Override protected boolean getAllowPassthrough() {     return true. }
false;protected;1;9;;@Override protected void configureSSLContext(SSLContext context) throws GeneralSecurityException {     LOG.trace("Configuring client-side SSLContext parameters on SSLContext [{}]...", context).     if (this.getSessionTimeout() != null) {         LOG.info("Configuring client-side SSLContext session timeout on SSLContext [{}] to [{}].", context, this.getSessionTimeout()).         this.configureSessionContext(context.getClientSessionContext(), this.getSessionTimeout()).     }     LOG.trace("Configured client-side SSLContext parameters on SSLContext [{}].", context). }
true;protected;1;6;/**  * {@inheritDoc}  * <p/>  * This implementation returns the empty list as the enabled cipher suites  * and protocols are not client and server side specific in an  * {@code SSLEngine}. Consequently, overriding them here would be a bit odd  * as the client side specific configuration shouldn't really override a  * shared client/server configuration option.  */ ;/**  * {@inheritDoc}  * <p/>  * This implementation returns the empty list as the enabled cipher suites  * and protocols are not client and server side specific in an  * {@code SSLEngine}. Consequently, overriding them here would be a bit odd  * as the client side specific configuration shouldn't really override a  * shared client/server configuration option.  */ @Override protected List<Configurer<SSLEngine>> getSSLEngineConfigurers(SSLContext context) {     // cipher suites and protocols, this method needs to address that.     return Collections.emptyList(). }
true;protected;1;4;/**  * This class has no bearing on {@code SSLServerSocketFactory} instances and therefore provides no  * configurers for that purpose.  */ ;/**  * This class has no bearing on {@code SSLServerSocketFactory} instances and therefore provides no  * configurers for that purpose.  */ @Override protected List<Configurer<SSLServerSocketFactory>> getSSLServerSocketFactoryConfigurers(SSLContext context) {     return Collections.emptyList(). }
false;public;0;16;;@Override public String toString() {     StringBuilder builder = new StringBuilder().     builder.append("SSLContextClientParameters[getCipherSuites()=").     builder.append(getCipherSuites()).     builder.append(", getCipherSuitesFilter()=").     builder.append(getCipherSuitesFilter()).     builder.append(", getSecureSocketProtocols()=").     builder.append(getSecureSocketProtocols()).     builder.append(", getSecureSocketProtocolsFilter()=").     builder.append(getSecureSocketProtocolsFilter()).     builder.append(", getSessionTimeout()=").     builder.append(getSessionTimeout()).     builder.append("]").     return builder.toString(). }
