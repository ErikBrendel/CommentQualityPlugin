commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns the id of the message  *  * @return the message id  */ ;/**  * Returns the id of the message  *  * @return the message id  */ String getMessageId().
true;;1;1;/**  * Sets the id of the message  *  * @param messageId id of the message  */ ;/**  * Sets the id of the message  *  * @param messageId id of the message  */ void setMessageId(String messageId).
true;;0;1;/**  * Returns the exchange this message is related to  *  * @return the exchange  */ ;/**  * Returns the exchange this message is related to  *  * @return the exchange  */ Exchange getExchange().
true;;0;1;/**  * Returns true if this message represents a fault  *  * @return <tt>true</tt> if this is a fault message, <tt>false</tt> for regular messages.  */ ;/**  * Returns true if this message represents a fault  *  * @return <tt>true</tt> if this is a fault message, <tt>false</tt> for regular messages.  */ boolean isFault().
true;;1;1;/**  * Sets the fault flag on this message  *  * @param fault the fault flag  */ ;/**  * Sets the fault flag on this message  *  * @param fault the fault flag  */ void setFault(boolean fault).
true;;1;1;/**  * Accesses a specific header  *  * @param name  name of header  * @return the value of the given header or <tt>null</tt> if there is no  *         header for the given name  */ ;/**  * Accesses a specific header  *  * @param name  name of header  * @return the value of the given header or <tt>null</tt> if there is no  *         header for the given name  */ Object getHeader(String name).
true;;2;1;/**  * Accesses a specific header  *  * @param name  name of header  * @param defaultValue the default value to return if header was absent  * @return the value of the given header or <tt>defaultValue</tt> if there is no  *         header for the given name  */ ;/**  * Accesses a specific header  *  * @param name  name of header  * @param defaultValue the default value to return if header was absent  * @return the value of the given header or <tt>defaultValue</tt> if there is no  *         header for the given name  */ Object getHeader(String name, Object defaultValue).
true;;2;1;/**  * Accesses a specific header  *  * @param name  name of header  * @param defaultValueSupplier the default value supplier used to generate the value to return if header was absent  * @return the value of the given header or he value generated by the <tt>defaultValueSupplier</tt> if there is no  *         header for the given name  */ ;/**  * Accesses a specific header  *  * @param name  name of header  * @param defaultValueSupplier the default value supplier used to generate the value to return if header was absent  * @return the value of the given header or he value generated by the <tt>defaultValueSupplier</tt> if there is no  *         header for the given name  */ Object getHeader(String name, Supplier<Object> defaultValueSupplier).
true;;2;1;/**  * Returns a header associated with this message by name and specifying the  * type required  *  * @param name the name of the header  * @param type the type of the header  * @return the value of the given header or <tt>null</tt> if there is no header for  *         the given name  * @throws TypeConversionException is thrown if error during type conversion  */ ;/**  * Returns a header associated with this message by name and specifying the  * type required  *  * @param name the name of the header  * @param type the type of the header  * @return the value of the given header or <tt>null</tt> if there is no header for  *         the given name  * @throws TypeConversionException is thrown if error during type conversion  */ <T> T getHeader(String name, Class<T> type).
true;;3;1;/**  * Returns a header associated with this message by name and specifying the  * type required  *  * @param name the name of the header  * @param defaultValue the default value to return if header was absent  * @param type the type of the header  * @return the value of the given header or <tt>defaultValue</tt> if there is no header for  *         the given name or <tt>null</tt> if it cannot be converted to the given type  */ ;/**  * Returns a header associated with this message by name and specifying the  * type required  *  * @param name the name of the header  * @param defaultValue the default value to return if header was absent  * @param type the type of the header  * @return the value of the given header or <tt>defaultValue</tt> if there is no header for  *         the given name or <tt>null</tt> if it cannot be converted to the given type  */ <T> T getHeader(String name, Object defaultValue, Class<T> type).
true;;3;1;/**  * Returns a header associated with this message by name and specifying the  * type required  *  * @param name the name of the header  * @param defaultValueSupplier the default value supplier used to generate the value to return if header was absent  * @param type the type of the header  * @return the value of the given header or he value generated by the <tt>defaultValueSupplier</tt> if there is no  *         header for the given name or <tt>null</tt> if it cannot be converted to the given type  */ ;/**  * Returns a header associated with this message by name and specifying the  * type required  *  * @param name the name of the header  * @param defaultValueSupplier the default value supplier used to generate the value to return if header was absent  * @param type the type of the header  * @return the value of the given header or he value generated by the <tt>defaultValueSupplier</tt> if there is no  *         header for the given name or <tt>null</tt> if it cannot be converted to the given type  */ <T> T getHeader(String name, Supplier<Object> defaultValueSupplier, Class<T> type).
true;;2;1;/**  * Sets a header on the message  *  * @param name of the header  * @param value to associate with the name  */ ;/**  * Sets a header on the message  *  * @param name of the header  * @param value to associate with the name  */ void setHeader(String name, Object value).
true;;1;1;/**  * Removes the named header from this message  *  * @param name name of the header  * @return the old value of the header  */ ;/**  * Removes the named header from this message  *  * @param name name of the header  * @return the old value of the header  */ Object removeHeader(String name).
true;;1;1;/**  * Removes the headers from this message  *  * @param pattern pattern of names  * @return boolean whether any headers matched  */ ;/**  * Removes the headers from this message  *  * @param pattern pattern of names  * @return boolean whether any headers matched  */ boolean removeHeaders(String pattern).
true;;2;1;/**  * Removes the headers from this message that match the given <tt>pattern</tt>,  * except for the ones matching one or more <tt>excludePatterns</tt>  *  * @param pattern pattern of names that should be removed  * @param excludePatterns one or more pattern of header names that should be excluded (= preserved)  * @return boolean whether any headers matched  */ ;/**  * Removes the headers from this message that match the given <tt>pattern</tt>,  * except for the ones matching one or more <tt>excludePatterns</tt>  *  * @param pattern pattern of names that should be removed  * @param excludePatterns one or more pattern of header names that should be excluded (= preserved)  * @return boolean whether any headers matched  */ boolean removeHeaders(String pattern, String... excludePatterns).
true;;0;1;/**  * Returns all of the headers associated with the message.  * <p/>  * See {@link org.apache.camel.support.DefaultMessage DefaultMessage} for how headers  * is represented in Camel using a {@link org.apache.camel.util.CaseInsensitiveMap CaseInsensitiveMap}.  * The implementation of the map can be configured by the {@link HeadersMapFactory} which can be set  * on the {@link CamelContext}. The default implementation uses the {@link org.apache.camel.util.CaseInsensitiveMap CaseInsensitiveMap}.  * <p/>  * <b>Important:</b> If you want to walk the returned {@link Map} and fetch all the keys and values, you should use  * the {@link java.util.Map#entrySet()} method, which ensure you get the keys in the original case.  *  * @return all the headers in a Map  */ ;/**  * Returns all of the headers associated with the message.  * <p/>  * See {@link org.apache.camel.support.DefaultMessage DefaultMessage} for how headers  * is represented in Camel using a {@link org.apache.camel.util.CaseInsensitiveMap CaseInsensitiveMap}.  * The implementation of the map can be configured by the {@link HeadersMapFactory} which can be set  * on the {@link CamelContext}. The default implementation uses the {@link org.apache.camel.util.CaseInsensitiveMap CaseInsensitiveMap}.  * <p/>  * <b>Important:</b> If you want to walk the returned {@link Map} and fetch all the keys and values, you should use  * the {@link java.util.Map#entrySet()} method, which ensure you get the keys in the original case.  *  * @return all the headers in a Map  */ Map<String, Object> getHeaders().
true;;1;1;/**  * Set all the headers associated with this message  * <p/>  * <b>Important:</b> If you want to copy headers from another {@link Message} to this {@link Message}, then  * use <tt>getHeaders().putAll(other)</tt> to copy the headers, where <tt>other</tt> is the other headers.  *  * @param headers headers to set  */ ;/**  * Set all the headers associated with this message  * <p/>  * <b>Important:</b> If you want to copy headers from another {@link Message} to this {@link Message}, then  * use <tt>getHeaders().putAll(other)</tt> to copy the headers, where <tt>other</tt> is the other headers.  *  * @param headers headers to set  */ void setHeaders(Map<String, Object> headers).
true;;0;1;/**  * Returns whether has any headers has been set.  *  * @return <tt>true</tt> if any headers has been set  */ ;/**  * Returns whether has any headers has been set.  *  * @return <tt>true</tt> if any headers has been set  */ boolean hasHeaders().
true;;0;1;/**  * Returns the body of the message as a POJO  * <p/>  * The body can be <tt>null</tt> if no body is set.  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * You can enable stream caching and call the {@link StreamCache#reset()} method to reset the stream to be able to re-read again (if possible).  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @return the body, can be <tt>null</tt>  */ ;/**  * Returns the body of the message as a POJO  * <p/>  * The body can be <tt>null</tt> if no body is set.  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * You can enable stream caching and call the {@link StreamCache#reset()} method to reset the stream to be able to re-read again (if possible).  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @return the body, can be <tt>null</tt>  */ Object getBody().
true;;0;1;/**  * Returns the body of the message as a POJO  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @return the body, is never <tt>null</tt>  * @throws InvalidPayloadException Is thrown if the body being <tt>null</tt> or wrong class type  */ ;/**  * Returns the body of the message as a POJO  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @return the body, is never <tt>null</tt>  * @throws InvalidPayloadException Is thrown if the body being <tt>null</tt> or wrong class type  */ Object getMandatoryBody() throws InvalidPayloadException.
true;;1;1;/**  * Returns the body as the specified type  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * You can enable stream caching and call the {@link StreamCache#reset()} method to reset the stream to be able to re-read again (if possible).  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @param type the type that the body  * @return the body of the message as the specified type, or <tt>null</tt> if no body exists  * @throws TypeConversionException is thrown if error during type conversion  */ ;/**  * Returns the body as the specified type  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * You can enable stream caching and call the {@link StreamCache#reset()} method to reset the stream to be able to re-read again (if possible).  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @param type the type that the body  * @return the body of the message as the specified type, or <tt>null</tt> if no body exists  * @throws TypeConversionException is thrown if error during type conversion  */ <T> T getBody(Class<T> type).
true;;1;1;/**  * Returns the mandatory body as the specified type  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * You can enable stream caching and call the {@link StreamCache#reset()} method to reset the stream to be able to re-read again (if possible).  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @param type the type that the body  * @return the body of the message as the specified type, is never <tt>null</tt>.  * @throws InvalidPayloadException Is thrown if the body being <tt>null</tt> or wrong class type  */ ;/**  * Returns the mandatory body as the specified type  * <p/>  * Notice if the message body is stream based then calling this method multiple times may lead to the stream not being able to be re-read again.  * You can enable stream caching and call the {@link StreamCache#reset()} method to reset the stream to be able to re-read again (if possible).  * See more details about <a href="http://camel.apache.org/stream-caching.html">stream caching</a>.  *  * @param type the type that the body  * @return the body of the message as the specified type, is never <tt>null</tt>.  * @throws InvalidPayloadException Is thrown if the body being <tt>null</tt> or wrong class type  */ <T> T getMandatoryBody(Class<T> type) throws InvalidPayloadException.
true;;1;1;/**  * Sets the body of the message  *  * @param body the body  */ ;/**  * Sets the body of the message  *  * @param body the body  */ void setBody(Object body).
true;;2;1;/**  * Sets the body of the message as a specific type  *  * @param body the body  * @param type the type of the body  */ ;/**  * Sets the body of the message as a specific type  *  * @param body the body  * @param type the type of the body  */ <T> void setBody(Object body, Class<T> type).
true;;0;1;/**  * Creates a copy of this message so that it can be used and possibly  * modified further in another exchange.  * <p/>  * The returned {@link Message} copy will have its {@link Exchange} set  * to the same {@link Exchange} instance as from the source.  *  * @return a new message instance copied from this message  */ ;/**  * Creates a copy of this message so that it can be used and possibly  * modified further in another exchange.  * <p/>  * The returned {@link Message} copy will have its {@link Exchange} set  * to the same {@link Exchange} instance as from the source.  *  * @return a new message instance copied from this message  */ Message copy().
true;;1;1;/**  * Copies the contents of the other message into this message  * <p/>  * If you need to do a copy and then set a new body,  * then use {@link #copyFromWithNewBody(Message, Object)} method instead.  * <p/>  * The returned {@link Message} copy will have its {@link Exchange} set  * to the same {@link Exchange} instance as from the source.  *  * @param message the other message  * @see #copyFromWithNewBody(Message, Object)  */ ;/**  * Copies the contents of the other message into this message  * <p/>  * If you need to do a copy and then set a new body,  * then use {@link #copyFromWithNewBody(Message, Object)} method instead.  * <p/>  * The returned {@link Message} copy will have its {@link Exchange} set  * to the same {@link Exchange} instance as from the source.  *  * @param message the other message  * @see #copyFromWithNewBody(Message, Object)  */ void copyFrom(Message message).
true;;2;1;/**  * Copies the contents (except the body) of the other message into this message and uses the provided new body instead  * <p/>  * The returned {@link Message} copy will have its {@link Exchange} set  * to the same {@link Exchange} instance as from the source.  *  * @param message the other message  * @param newBody the new body to use  */ ;/**  * Copies the contents (except the body) of the other message into this message and uses the provided new body instead  * <p/>  * The returned {@link Message} copy will have its {@link Exchange} set  * to the same {@link Exchange} instance as from the source.  *  * @param message the other message  * @param newBody the new body to use  */ void copyFromWithNewBody(Message message, Object newBody).
true;;1;1;/**  * Copies the attachments of the other message into this message  *  * @param message the other message  */ ;/**  * Copies the attachments of the other message into this message  *  * @param message the other message  */ void copyAttachments(Message message).
true;;1;1;/**  * Returns the attachment specified by the id  *  * @param id the id under which the attachment is stored  * @return the data handler for this attachment or <tt>null</tt>  */ ;/**  * Returns the attachment specified by the id  *  * @param id the id under which the attachment is stored  * @return the data handler for this attachment or <tt>null</tt>  */ DataHandler getAttachment(String id).
true;;1;1;/**  * Returns the attachment specified by the id  *  * @param id the id under which the attachment is stored  * @return the attachment or <tt>null</tt>  */ ;/**  * Returns the attachment specified by the id  *  * @param id the id under which the attachment is stored  * @return the attachment or <tt>null</tt>  */ Attachment getAttachmentObject(String id).
true;;0;1;/**  * Returns a set of attachment names of the message  *  * @return a set of attachment names  */ ;/**  * Returns a set of attachment names of the message  *  * @return a set of attachment names  */ Set<String> getAttachmentNames().
true;;1;1;/**  * Removes the attachment specified by the id  *  * @param id   the id of the attachment to remove  */ ;/**  * Removes the attachment specified by the id  *  * @param id   the id of the attachment to remove  */ void removeAttachment(String id).
true;;2;1;/**  * Adds an attachment to the message using the id  *  * @param id        the id to store the attachment under  * @param content   the data handler for the attachment  */ ;/**  * Adds an attachment to the message using the id  *  * @param id        the id to store the attachment under  * @param content   the data handler for the attachment  */ void addAttachment(String id, DataHandler content).
true;;2;1;/**  * Adds an attachment to the message using the id  *  * @param id        the id to store the attachment under  * @param content   the attachment  */ ;/**  * Adds an attachment to the message using the id  *  * @param id        the id to store the attachment under  * @param content   the attachment  */ void addAttachmentObject(String id, Attachment content).
true;;0;1;/**  * Returns all attachments of the message  *  * @return the attachments in a map or <tt>null</tt>  */ ;/**  * Returns all attachments of the message  *  * @return the attachments in a map or <tt>null</tt>  */ Map<String, DataHandler> getAttachments().
true;;0;1;/**  * Returns all attachments of the message  *  * @return the attachments in a map or <tt>null</tt>  */ ;/**  * Returns all attachments of the message  *  * @return the attachments in a map or <tt>null</tt>  */ Map<String, Attachment> getAttachmentObjects().
true;;1;1;/**  * Set all the attachments associated with this message  *  * @param attachments the attachments  */ ;/**  * Set all the attachments associated with this message  *  * @param attachments the attachments  */ void setAttachments(Map<String, DataHandler> attachments).
true;;1;1;/**  * Set all the attachments associated with this message  *  * @param attachments the attachments  */ ;/**  * Set all the attachments associated with this message  *  * @param attachments the attachments  */ void setAttachmentObjects(Map<String, Attachment> attachments).
true;;0;1;/**  * Returns whether this message has attachments.  *  * @return <tt>true</tt> if this message has any attachments.  */ ;/**  * Returns whether this message has attachments.  *  * @return <tt>true</tt> if this message has any attachments.  */ boolean hasAttachments().
