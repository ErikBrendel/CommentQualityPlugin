commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Lookup a {@link Validator} in the registry which supports the validation for  * the data type represented by the key.  * @param key a key represents the data type  * @return {@link Validator} if matched, otherwise null  */ ;/**  * Lookup a {@link Validator} in the registry which supports the validation for  * the data type represented by the key.  * @param key a key represents the data type  * @return {@link Validator} if matched, otherwise null  */ Validator resolveValidator(K key).
true;;0;1;/**  * Number of validators in the static registry.  */ ;/**  * Number of validators in the static registry.  */ int staticSize().
true;;0;1;/**  * Number of validators in the dynamic registry  */ ;/**  * Number of validators in the dynamic registry  */ int dynamicSize().
true;;0;1;/**  * Maximum number of entries to store in the dynamic registry  */ ;/**  * Maximum number of entries to store in the dynamic registry  */ int getMaximumCacheSize().
true;;0;1;/**  * Purges the cache (removes validators from the dynamic cache)  */ ;/**  * Purges the cache (removes validators from the dynamic cache)  */ void purge().
true;;1;1;/**  * Whether the given {@link Validator} is stored in the static cache  *  * @param type  the data type  * @return <tt>true</tt> if in static cache, <tt>false</tt> if not  */ ;/**  * Whether the given {@link Validator} is stored in the static cache  *  * @param type  the data type  * @return <tt>true</tt> if in static cache, <tt>false</tt> if not  */ boolean isStatic(DataType type).
true;;1;1;/**  * Whether the given {@link Validator} is stored in the dynamic cache  *  * @param type the data type  * @return <tt>true</tt> if in dynamic cache, <tt>false</tt> if not  */ ;/**  * Whether the given {@link Validator} is stored in the dynamic cache  *  * @param type the data type  * @return <tt>true</tt> if in dynamic cache, <tt>false</tt> if not  */ boolean isDynamic(DataType type).
true;;0;1;/**  * Cleanup the cache (purging stale entries)  */ ;/**  * Cleanup the cache (purging stale entries)  */ void cleanUp().
