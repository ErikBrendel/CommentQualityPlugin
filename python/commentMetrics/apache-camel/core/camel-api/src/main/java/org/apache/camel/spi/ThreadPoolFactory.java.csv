commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Creates a new cached thread pool  * <p/>  * The cached thread pool is a term from the JDK from the method {@link java.util.concurrent.Executors#newCachedThreadPool()}.  * Typically it will have no size limit (this is why it is handled separately  *  * @param threadFactory factory for creating threads  * @return the created thread pool  */ ;/**  * Creates a new cached thread pool  * <p/>  * The cached thread pool is a term from the JDK from the method {@link java.util.concurrent.Executors#newCachedThreadPool()}.  * Typically it will have no size limit (this is why it is handled separately  *  * @param threadFactory factory for creating threads  * @return the created thread pool  */ ExecutorService newCachedThreadPool(ThreadFactory threadFactory).
true;;2;1;/**  * Create a thread pool using the given thread pool profile  *  * @param profile parameters of the thread pool  * @param threadFactory factory for creating threads  * @return the created thread pool  */ ;/**  * Create a thread pool using the given thread pool profile  *  * @param profile parameters of the thread pool  * @param threadFactory factory for creating threads  * @return the created thread pool  */ ExecutorService newThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory).
true;;2;1;/**  * Create a scheduled thread pool using the given thread pool profile  * @param profile parameters of the thread pool  * @param threadFactory factory for creating threads  * @return the created thread pool  */ ;/**  * Create a scheduled thread pool using the given thread pool profile  * @param profile parameters of the thread pool  * @param threadFactory factory for creating threads  * @return the created thread pool  */ ScheduledExecutorService newScheduledThreadPool(ThreadPoolProfile profile, ThreadFactory threadFactory).
