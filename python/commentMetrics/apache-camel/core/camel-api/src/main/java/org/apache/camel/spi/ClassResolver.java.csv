commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @return the class if resolved, <tt>null</tt> if not found.  */ ;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @return the class if resolved, <tt>null</tt> if not found.  */ Class<?> resolveClass(String name).
true;;2;1;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @param type the expected type of the class  * @return the class if resolved, <tt>null</tt> if not found.  */ ;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @param type the expected type of the class  * @return the class if resolved, <tt>null</tt> if not found.  */ <T> Class<T> resolveClass(String name, Class<T> type).
true;;2;1;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  */ ;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  */ Class<?> resolveClass(String name, ClassLoader loader).
true;;3;1;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param type   the expected type of the class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  */ ;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param type   the expected type of the class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  */ <T> Class<T> resolveClass(String name, Class<T> type, ClassLoader loader).
true;;1;1;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ ;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ Class<?> resolveMandatoryClass(String name) throws ClassNotFoundException.
true;;2;1;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @param type the expected type of the class  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ ;/**  * Resolves the given class by its name  *  * @param name full qualified name of class  * @param type the expected type of the class  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ <T> Class<T> resolveMandatoryClass(String name, Class<T> type) throws ClassNotFoundException.
true;;2;1;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ ;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ Class<?> resolveMandatoryClass(String name, ClassLoader loader) throws ClassNotFoundException.
true;;3;1;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param type   the expected type of the class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ ;/**  * Resolves the given class by its name  *  * @param name   full qualified name of class  * @param type   the expected type of the class  * @param loader use the provided class loader  * @return the class if resolved, <tt>null</tt> if not found.  * @throws ClassNotFoundException is thrown if class not found  */ <T> Class<T> resolveMandatoryClass(String name, Class<T> type, ClassLoader loader) throws ClassNotFoundException.
true;;1;1;/**  * Loads the given resource as a stream  *  * @param uri the uri of the resource  * @return as a stream  */ ;/**  * Loads the given resource as a stream  *  * @param uri the uri of the resource  * @return as a stream  */ InputStream loadResourceAsStream(String uri).
true;;1;1;/**  * Loads the given resource as a URL  *  * @param uri the uri of the resource  * @return as a URL  */ ;/**  * Loads the given resource as a URL  *  * @param uri the uri of the resource  * @return as a URL  */ URL loadResourceAsURL(String uri).
true;;1;1;/**  * Loads the given resources as a URL from the current bundle/classloader  *  * @param uri the uri of the resource  * @return the URLs found on the classpath  */ ;/**  * Loads the given resources as a URL from the current bundle/classloader  *  * @param uri the uri of the resource  * @return the URLs found on the classpath  */ Enumeration<URL> loadResourcesAsURL(String uri).
true;;1;1;/**  * Loads the given resources as a URL from all bundles/classloaders  *  * @param uri the uri of the resource  * @return the URLs found on the classpath  */ ;/**  * Loads the given resources as a URL from all bundles/classloaders  *  * @param uri the uri of the resource  * @return the URLs found on the classpath  */ Enumeration<URL> loadAllResourcesAsURL(String uri).
