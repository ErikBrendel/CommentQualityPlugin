commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Sets the processor that the channel should route the {@link Exchange} to.  *  * @param next  the next processor  */ ;/**  * Sets the processor that the channel should route the {@link Exchange} to.  *  * @param next  the next processor  */ void setNextProcessor(Processor next).
true;;1;1;/**  * Sets the {@link org.apache.camel.processor.ErrorHandler} this Channel uses.  *  * @param errorHandler the error handler  */ ;/**  * Sets the {@link org.apache.camel.processor.ErrorHandler} this Channel uses.  *  * @param errorHandler the error handler  */ void setErrorHandler(Processor errorHandler).
true;;0;1;/**  * Gets the {@link org.apache.camel.processor.ErrorHandler} this Channel uses.  *  * @return the error handler, or <tt>null</tt> if no error handler is used.  */ ;/**  * Gets the {@link org.apache.camel.processor.ErrorHandler} this Channel uses.  *  * @return the error handler, or <tt>null</tt> if no error handler is used.  */ Processor getErrorHandler().
true;;1;1;/**  * Adds a {@link org.apache.camel.spi.InterceptStrategy} to apply each {@link Exchange} before  * its routed to the next {@link Processor}.  *  * @param strategy  the intercept strategy  */ ;/**  * Adds a {@link org.apache.camel.spi.InterceptStrategy} to apply each {@link Exchange} before  * its routed to the next {@link Processor}.  *  * @param strategy  the intercept strategy  */ void addInterceptStrategy(InterceptStrategy strategy).
true;;1;1;/**  * Adds a list of {@link org.apache.camel.spi.InterceptStrategy} to apply each {@link Exchange} before  * its routed to the next {@link Processor}.  *  * @param strategy  list of strategies  */ ;/**  * Adds a list of {@link org.apache.camel.spi.InterceptStrategy} to apply each {@link Exchange} before  * its routed to the next {@link Processor}.  *  * @param strategy  list of strategies  */ void addInterceptStrategies(List<InterceptStrategy> strategy).
true;;0;1;/**  * Gets the list of {@link org.apache.camel.spi.InterceptStrategy} registered to this Channel.  *  * @return list of strategies, returns an empty list if no strategies is registered.  */ ;/**  * Gets the list of {@link org.apache.camel.spi.InterceptStrategy} registered to this Channel.  *  * @return list of strategies, returns an empty list if no strategies is registered.  */ List<InterceptStrategy> getInterceptStrategies().
true;;0;1;/**  * Gets the wrapped output that at runtime should be delegated to.  *  * @return the output to route the {@link Exchange} to  */ ;/**  * Gets the wrapped output that at runtime should be delegated to.  *  * @return the output to route the {@link Exchange} to  */ Processor getOutput().
true;;1;1;/**  * Sets the wrapped output that at runtime should be delegated to.  *  * @param output the output to route the {@link Exchange} to  */ ;/**  * Sets the wrapped output that at runtime should be delegated to.  *  * @param output the output to route the {@link Exchange} to  */ void setOutput(Processor output).
true;;0;1;/**  * Gets the next {@link Processor} to route to (not wrapped)  *  * @return  the next processor  */ ;/**  * Gets the next {@link Processor} to route to (not wrapped)  *  * @return  the next processor  */ Processor getNextProcessor().
true;;0;1;/**  * Gets the {@link RouteContext}  *  * @return the route context  */ ;/**  * Gets the {@link RouteContext}  *  * @return the route context  */ RouteContext getRouteContext().
