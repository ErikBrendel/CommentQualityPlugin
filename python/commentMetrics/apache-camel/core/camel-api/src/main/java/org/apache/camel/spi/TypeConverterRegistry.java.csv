commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Number of noop attempts (no type conversion was needed)  */ ;/**  * Number of noop attempts (no type conversion was needed)  */ long getNoopCounter().
true;;0;1;/**  * Number of type conversion attempts  */ ;/**  * Number of type conversion attempts  */ long getAttemptCounter().
true;;0;1;/**  * Number of successful conversions  */ ;/**  * Number of successful conversions  */ long getHitCounter().
true;;0;1;/**  * Number of attempts which cannot be converted as no suitable type converter exists  */ ;/**  * Number of attempts which cannot be converted as no suitable type converter exists  */ long getMissCounter().
true;;0;1;/**  * Number of failed attempts during type conversion  */ ;/**  * Number of failed attempts during type conversion  */ long getFailedCounter().
true;;0;1;/**  * Reset the counters  */ ;/**  * Reset the counters  */ void reset().
true;;0;1;/**  * Whether statistics is enabled.  */ ;/**  * Whether statistics is enabled.  */ boolean isStatisticsEnabled().
true;;1;1;/**  * Sets whether statistics is enabled.  *  * @param statisticsEnabled <tt>true</tt> to enable  */ ;/**  * Sets whether statistics is enabled.  *  * @param statisticsEnabled <tt>true</tt> to enable  */ void setStatisticsEnabled(boolean statisticsEnabled).
true;;3;1;/**  * Registers a new type converter.  * <p/>  * This method may throw {@link org.apache.camel.TypeConverterExistsException} if configured to fail if an existing  * type converter already exists  *  * @param toType        the type to convert to  * @param fromType      the type to convert from  * @param typeConverter the type converter to use  */ ;/**  * Registers a new type converter.  * <p/>  * This method may throw {@link org.apache.camel.TypeConverterExistsException} if configured to fail if an existing  * type converter already exists  *  * @param toType        the type to convert to  * @param fromType      the type to convert from  * @param typeConverter the type converter to use  */ void addTypeConverter(Class<?> toType, Class<?> fromType, TypeConverter typeConverter).
true;;2;1;/**  * Removes the type converter  *  * @param toType        the type to convert to  * @param fromType      the type to convert from  * @return <tt>true</tt> if removed, <tt>false</tt> if the type converter didn't exist  */ ;/**  * Removes the type converter  *  * @param toType        the type to convert to  * @param fromType      the type to convert from  * @return <tt>true</tt> if removed, <tt>false</tt> if the type converter didn't exist  */ boolean removeTypeConverter(Class<?> toType, Class<?> fromType).
true;;1;1;/**  * Registers all the type converters from the class, each converter must be implemented as a method and annotated with {@link org.apache.camel.Converter}.  *  * @param typeConverters class which implements the type converters  */ ;/**  * Registers all the type converters from the class, each converter must be implemented as a method and annotated with {@link org.apache.camel.Converter}.  *  * @param typeConverters class which implements the type converters  */ void addTypeConverters(TypeConverters typeConverters).
true;;2;1;/**  * Registers a new fallback type converter  *  * @param typeConverter the type converter to use  * @param canPromote  whether or not the fallback type converter can be promoted to a first class type converter  */ ;/**  * Registers a new fallback type converter  *  * @param typeConverter the type converter to use  * @param canPromote  whether or not the fallback type converter can be promoted to a first class type converter  */ void addFallbackTypeConverter(TypeConverter typeConverter, boolean canPromote).
true;;2;1;/**  * Performs a lookup for a given type converter.  *  * @param toType        the type to convert to  * @param fromType      the type to convert from  * @return the type converter or <tt>null</tt> if not found.  */ ;/**  * Performs a lookup for a given type converter.  *  * @param toType        the type to convert to  * @param fromType      the type to convert from  * @return the type converter or <tt>null</tt> if not found.  */ TypeConverter lookup(Class<?> toType, Class<?> fromType).
true;;0;1;/**  * Gets a read-only list of the type converter from / to classes  *  * @return a list containing fromType/toType class names  */ ;/**  * Gets a read-only list of the type converter from / to classes  *  * @return a list containing fromType/toType class names  */ List<Class<?>[]> listAllTypeConvertersFromTo().
true;;1;1;/**  * Sets the injector to be used for creating new instances during type conversions.  *  * @param injector the injector  */ ;/**  * Sets the injector to be used for creating new instances during type conversions.  *  * @param injector the injector  */ void setInjector(Injector injector).
true;;0;1;/**  * Gets the injector  *  * @return the injector  */ ;/**  * Gets the injector  *  * @return the injector  */ Injector getInjector().
true;;0;1;/**  * Gets the utilization statistics of this type converter registry  *  * @return the utilization statistics  */ ;/**  * Gets the utilization statistics of this type converter registry  *  * @return the utilization statistics  */ Statistics getStatistics().
true;;0;1;/**  * Number of type converters in the registry.  *  * @return number of type converters in the registry.  */ ;/**  * Number of type converters in the registry.  *  * @return number of type converters in the registry.  */ int size().
true;;0;1;/**  * The logging level to use when logging that a type converter already exists when attempting to add a duplicate type converter.  * <p/>  * The default logging level is <tt>WARN</tt>  */ ;/**  * The logging level to use when logging that a type converter already exists when attempting to add a duplicate type converter.  * <p/>  * The default logging level is <tt>WARN</tt>  */ LoggingLevel getTypeConverterExistsLoggingLevel().
true;;1;1;/**  * The logging level to use when logging that a type converter already exists when attempting to add a duplicate type converter.  * <p/>  * The default logging level is <tt>WARN</tt>  */ ;/**  * The logging level to use when logging that a type converter already exists when attempting to add a duplicate type converter.  * <p/>  * The default logging level is <tt>WARN</tt>  */ void setTypeConverterExistsLoggingLevel(LoggingLevel typeConverterExistsLoggingLevel).
true;;0;1;/**  * What should happen when attempting to add a duplicate type converter.  * <p/>  * The default behavior is to override the existing.  */ ;/**  * What should happen when attempting to add a duplicate type converter.  * <p/>  * The default behavior is to override the existing.  */ TypeConverterExists getTypeConverterExists().
true;;1;1;/**  * What should happen when attempting to add a duplicate type converter.  * <p/>  * The default behavior is to override the existing.  */ ;/**  * What should happen when attempting to add a duplicate type converter.  * <p/>  * The default behavior is to override the existing.  */ void setTypeConverterExists(TypeConverterExists typeConverterExists).
