commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * @return the cluster.  */ ;/**  * @return the cluster.  */ CamelClusterService getClusterService().
true;;0;1;/**  * @return the namespace for this view.  */ ;/**  * @return the namespace for this view.  */ String getNamespace().
true;;0;1;/**  * Provides the leader member if elected.  *  * @return the leader member.  */ ;/**  * Provides the leader member if elected.  *  * @return the leader member.  */ Optional<CamelClusterMember> getLeader().
true;;0;1;/**  * Provides the local member.  *  * @return the local member.  */ ;/**  * Provides the local member.  *  * @return the local member.  */ CamelClusterMember getLocalMember().
true;;0;1;/**  * Provides the list of members of the cluster.  *  * @return the list of members.  */ ;/**  * Provides the list of members of the cluster.  *  * @return the list of members.  */ List<CamelClusterMember> getMembers().
true;;1;1;/**  * Add an event listener.  *  * @param listener the event listener.  */ ;/**  * Add an event listener.  *  * @param listener the event listener.  */ void addEventListener(CamelClusterEventListener listener).
true;;1;1;/**  * Remove the event listener.  *  * @param listener the event listener.  */ ;/**  * Remove the event listener.  *  * @param listener the event listener.  */ void removeEventListener(CamelClusterEventListener listener).
true;default;1;9;/**  * Access the underlying concrete CamelClusterView implementation to  * provide access to further features.  *  * @param clazz the proprietary class or interface of the underlying concrete CamelClusterView.  * @return an instance of the underlying concrete CamelClusterView as the required type.  */ ;/**  * Access the underlying concrete CamelClusterView implementation to  * provide access to further features.  *  * @param clazz the proprietary class or interface of the underlying concrete CamelClusterView.  * @return an instance of the underlying concrete CamelClusterView as the required type.  */ default <T extends CamelClusterView> T unwrap(Class<T> clazz) {     if (CamelClusterView.class.isAssignableFrom(clazz)) {         return clazz.cast(this).     }     throw new IllegalArgumentException("Unable to unwrap this CamelClusterView type (" + getClass() + ") to the required type (" + clazz + ")"). }
