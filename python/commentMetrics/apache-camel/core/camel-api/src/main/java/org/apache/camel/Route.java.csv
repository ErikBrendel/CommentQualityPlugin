commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the route id  *  * @return the route id  */ ;/**  * Gets the route id  *  * @return the route id  */ String getId().
true;;0;1;/**  * Gets the route group  *  * @return the route group  */ ;/**  * Gets the route group  *  * @return the route group  */ String getGroup().
true;;0;1;/**  * Gets the uptime in a human readable format  *  * @return the uptime in days/hours/minutes  */ ;/**  * Gets the uptime in a human readable format  *  * @return the uptime in days/hours/minutes  */ String getUptime().
true;;0;1;/**  * Gets the uptime in milli seconds  *  * @return the uptime in millis seconds  */ ;/**  * Gets the uptime in milli seconds  *  * @return the uptime in millis seconds  */ long getUptimeMillis().
true;;0;1;/**  * Gets the inbound {@link Consumer}  *  * @return the inbound consumer  */ ;/**  * Gets the inbound {@link Consumer}  *  * @return the inbound consumer  */ Consumer getConsumer().
true;;0;1;/**  * Gets the {@link Processor}  *  * @return the processor  */ ;/**  * Gets the {@link Processor}  *  * @return the processor  */ Processor getProcessor().
true;;0;1;/**  * Whether or not the route supports suspension (suspend and resume)  *  * @return <tt>true</tt> if this route supports suspension  */ ;/**  * Whether or not the route supports suspension (suspend and resume)  *  * @return <tt>true</tt> if this route supports suspension  */ boolean supportsSuspension().
true;;0;1;/**  * This property map is used to associate information about the route.  *  * @return properties  */ ;/**  * This property map is used to associate information about the route.  *  * @return properties  */ Map<String, Object> getProperties().
true;;0;1;/**  * Gets the route description (if any has been configured).  * <p/>  * The description is configured using the {@link #DESCRIPTION_PROPERTY} as key in the {@link #getProperties()}.  *  * @return the description, or <tt>null</tt> if no description has been configured.  */ ;/**  * Gets the route description (if any has been configured).  * <p/>  * The description is configured using the {@link #DESCRIPTION_PROPERTY} as key in the {@link #getProperties()}.  *  * @return the description, or <tt>null</tt> if no description has been configured.  */ String getDescription().
true;;0;1;/**  * Gets the route context  *  * @return the route context  */ ;/**  * Gets the route context  *  * @return the route context  */ RouteContext getRouteContext().
true;;1;1;/**  * A strategy callback allowing special initialization when services are starting.  *  * @param services the service  * @throws Exception is thrown in case of error  */ ;/**  * A strategy callback allowing special initialization when services are starting.  *  * @param services the service  * @throws Exception is thrown in case of error  */ void onStartingServices(List<Service> services) throws Exception.
true;;0;1;/**  * Returns the services for this particular route  *  * @return the services  */ ;/**  * Returns the services for this particular route  *  * @return the services  */ List<Service> getServices().
true;;1;1;/**  * Adds a service to this route  *  * @param service the service  */ ;/**  * Adds a service to this route  *  * @param service the service  */ void addService(Service service).
true;;0;1;/**  * Returns a navigator to navigate this route by navigating all the {@link Processor}s.  *  * @return a navigator for {@link Processor}.  */ ;/**  * Returns a navigator to navigate this route by navigating all the {@link Processor}s.  *  * @return a navigator for {@link Processor}.  */ Navigate<Processor> navigate().
true;;1;1;/**  * Returns a list of all the {@link Processor}s from this route that has id's matching the pattern  *  * @param pattern the pattern to match by ids  * @return a list of {@link Processor}, is never <tt>null</tt>.  */ ;/**  * Returns a list of all the {@link Processor}s from this route that has id's matching the pattern  *  * @param pattern the pattern to match by ids  * @return a list of {@link Processor}, is never <tt>null</tt>.  */ List<Processor> filter(String pattern).
true;;0;1;/**  * Callback preparing the route to be started, by warming up the route.  */ ;/**  * Callback preparing the route to be started, by warming up the route.  */ void warmUp().
