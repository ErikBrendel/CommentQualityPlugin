commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Adds the exchange to the repository.  *  * @param key the claim check key  * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified key  */ ;/**  * Adds the exchange to the repository.  *  * @param key the claim check key  * @return <tt>true</tt> if this repository did <b>not</b> already contain the specified key  */ boolean add(String key, Exchange exchange).
true;;1;1;/**  * Returns <tt>true</tt> if this repository contains the specified key.  *  * @param key the claim check key  * @return <tt>true</tt> if this repository contains the specified key  */ ;/**  * Returns <tt>true</tt> if this repository contains the specified key.  *  * @param key the claim check key  * @return <tt>true</tt> if this repository contains the specified key  */ boolean contains(String key).
true;;1;1;/**  * Gets the exchange from the repository.  *  * @param key the claim check key  */ ;/**  * Gets the exchange from the repository.  *  * @param key the claim check key  */ Exchange get(String key).
true;;1;1;/**  * Gets and removes the exchange from the repository.  *  * @param key the claim check key  * @return the removed exchange, or <tt>null</tt> if the key did not exists.  */ ;/**  * Gets and removes the exchange from the repository.  *  * @param key the claim check key  * @return the removed exchange, or <tt>null</tt> if the key did not exists.  */ Exchange getAndRemove(String key).
true;;1;1;/**  * Pushes the exchange on top of the repository.  */ ;/**  * Pushes the exchange on top of the repository.  */ void push(Exchange exchange).
true;;0;1;/**  * Pops the repository and returns the latest. Or returns <tt>null</tt> if the stack is empty.  */ ;/**  * Pops the repository and returns the latest. Or returns <tt>null</tt> if the stack is empty.  */ Exchange pop().
true;;0;1;/**  * Clear the repository.  */ ;/**  * Clear the repository.  */ void clear().
