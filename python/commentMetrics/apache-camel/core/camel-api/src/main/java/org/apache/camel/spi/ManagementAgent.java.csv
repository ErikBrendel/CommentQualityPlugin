commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Registers object with management infrastructure with a specific name. Object must be annotated or  * implement standard MBean interface.  *  * @param obj  the object to register  * @param name the name  * @throws JMException is thrown if the registration failed  */ ;/**  * Registers object with management infrastructure with a specific name. Object must be annotated or  * implement standard MBean interface.  *  * @param obj  the object to register  * @param name the name  * @throws JMException is thrown if the registration failed  */ void register(Object obj, ObjectName name) throws JMException.
true;;3;1;/**  * Registers object with management infrastructure with a specific name. Object must be annotated or  * implement standard MBean interface.  *  * @param obj  the object to register  * @param name the name  * @param forceRegistration if set to <tt>true</tt>, then object will be registered despite  * existing object is already registered with the name.  * @throws JMException is thrown if the registration failed  */ ;/**  * Registers object with management infrastructure with a specific name. Object must be annotated or  * implement standard MBean interface.  *  * @param obj  the object to register  * @param name the name  * @param forceRegistration if set to <tt>true</tt>, then object will be registered despite  * existing object is already registered with the name.  * @throws JMException is thrown if the registration failed  */ void register(Object obj, ObjectName name, boolean forceRegistration) throws JMException.
true;;1;1;/**  * Unregisters object based upon registered name  *  * @param name the name  * @throws JMException is thrown if the unregistration failed  */ ;/**  * Unregisters object based upon registered name  *  * @param name the name  * @throws JMException is thrown if the unregistration failed  */ void unregister(ObjectName name) throws JMException.
true;;1;1;/**  * Is the given object registered  *  * @param name the name  * @return <tt>true</tt> if registered  */ ;/**  * Is the given object registered  *  * @param name the name  * @return <tt>true</tt> if registered  */ boolean isRegistered(ObjectName name).
true;;2;1;/**  * Creates a new proxy client  *  * @param name   the mbean name  * @param mbean  the client interface, such as from the {@link org.apache.camel.api.management.mbean} package.  * @return the client or <tt>null</tt> if mbean does not exists  */ ;/**  * Creates a new proxy client  *  * @param name   the mbean name  * @param mbean  the client interface, such as from the {@link org.apache.camel.api.management.mbean} package.  * @return the client or <tt>null</tt> if mbean does not exists  */ <T> T newProxyClient(ObjectName name, Class<T> mbean).
true;;0;1;/**  * Get the MBeanServer which hosts managed objects.  * <p/>  * <b>Notice:</b> If the JMXEnabled configuration is not set to <tt>true</tt>,  * this method will return <tt>null</tt>.  *  * @return the MBeanServer  */ ;/**  * Get the MBeanServer which hosts managed objects.  * <p/>  * <b>Notice:</b> If the JMXEnabled configuration is not set to <tt>true</tt>,  * this method will return <tt>null</tt>.  *  * @return the MBeanServer  */ MBeanServer getMBeanServer().
true;;1;1;/**  * Sets a custom mbean server to use  *  * @param mbeanServer the custom mbean server  */ ;/**  * Sets a custom mbean server to use  *  * @param mbeanServer the custom mbean server  */ void setMBeanServer(MBeanServer mbeanServer).
true;;0;1;/**  * Get domain name for Camel MBeans.  * <p/>  * <b>Notice:</b> That this can be different that the default domain name of the MBean Server.  *  * @return domain name  */ ;/**  * Get domain name for Camel MBeans.  * <p/>  * <b>Notice:</b> That this can be different that the default domain name of the MBean Server.  *  * @return domain name  */ String getMBeanObjectDomainName().
true;;1;1;/**  * Sets the port used by {@link java.rmi.registry.LocateRegistry}.  *  * @param port the port  */ ;/**  * Sets the port used by {@link java.rmi.registry.LocateRegistry}.  *  * @param port the port  */ void setRegistryPort(Integer port).
true;;0;1;/**  * Gets the port used by {@link java.rmi.registry.LocateRegistry}.  *  * @return the port  */ ;/**  * Gets the port used by {@link java.rmi.registry.LocateRegistry}.  *  * @return the port  */ Integer getRegistryPort().
true;;1;1;/**  * Sets the port clients must use to connect  *  * @param port the port  */ ;/**  * Sets the port clients must use to connect  *  * @param port the port  */ void setConnectorPort(Integer port).
true;;0;1;/**  * Gets the port clients must use to connect  *  * @return the port  */ ;/**  * Gets the port clients must use to connect  *  * @return the port  */ Integer getConnectorPort().
true;;1;1;/**  * Sets the default domain on the MBean server  *  * @param domain the domain  */ ;/**  * Sets the default domain on the MBean server  *  * @param domain the domain  */ void setMBeanServerDefaultDomain(String domain).
true;;0;1;/**  * Gets the default domain on the MBean server  *  * @return the domain  */ ;/**  * Gets the default domain on the MBean server  *  * @return the domain  */ String getMBeanServerDefaultDomain().
true;;1;1;/**  * Sets the object domain name  *  * @param domainName the object domain name  */ ;/**  * Sets the object domain name  *  * @param domainName the object domain name  */ void setMBeanObjectDomainName(String domainName).
true;;1;1;/**  * Sets the service url  *  * @param url the service url  */ ;/**  * Sets the service url  *  * @param url the service url  */ void setServiceUrlPath(String url).
true;;0;1;/**  * Gets the service url  *  * @return the url  */ ;/**  * Gets the service url  *  * @return the url  */ String getServiceUrlPath().
true;;1;1;/**  * Whether connector should be created, allowing clients to connect remotely  *  * @param createConnector <tt>true</tt> to create connector  */ ;/**  * Whether connector should be created, allowing clients to connect remotely  *  * @param createConnector <tt>true</tt> to create connector  */ void setCreateConnector(Boolean createConnector).
true;;0;1;/**  * Whether connector is created, allowing clients to connect remotely  *  * @return <tt>true</tt> if connector is created  */ ;/**  * Whether connector is created, allowing clients to connect remotely  *  * @return <tt>true</tt> if connector is created  */ Boolean getCreateConnector().
true;;1;1;/**  * Whether to use the platform MBean Server.  *  * @param usePlatformMBeanServer <tt>true</tt> to use platform MBean server  */ ;/**  * Whether to use the platform MBean Server.  *  * @param usePlatformMBeanServer <tt>true</tt> to use platform MBean server  */ void setUsePlatformMBeanServer(Boolean usePlatformMBeanServer).
true;;0;1;/**  * Whether to use the platform MBean Server.  *  * @return <tt>true</tt> if platform MBean server is to be used  */ ;/**  * Whether to use the platform MBean Server.  *  * @return <tt>true</tt> if platform MBean server is to be used  */ Boolean getUsePlatformMBeanServer().
true;;0;1;/**  * Whether to only register processors which has a custom id assigned.  * <p/>  * This allows you to filter unwanted processors.  *  * @return <tt>true</tt> if only processors with custom id is registered  */ ;/**  * Whether to only register processors which has a custom id assigned.  * <p/>  * This allows you to filter unwanted processors.  *  * @return <tt>true</tt> if only processors with custom id is registered  */ Boolean getOnlyRegisterProcessorWithCustomId().
true;;1;1;/**  * Whether to only register processors which has a custom id assigned.  * <p/>  * This allows you to filter unwanted processors.  *  * @param onlyRegisterProcessorWithCustomId <tt>true</tt> to only register if custom id has been assigned  */ ;/**  * Whether to only register processors which has a custom id assigned.  * <p/>  * This allows you to filter unwanted processors.  *  * @param onlyRegisterProcessorWithCustomId <tt>true</tt> to only register if custom id has been assigned  */ void setOnlyRegisterProcessorWithCustomId(Boolean onlyRegisterProcessorWithCustomId).
true;;0;1;/**  * Whether to always register mbeans.  * <p/>  * This option is default <tt>false</tt>.  * <p/>  * <b>Important:</b> If this option is enabled then any service is registered as mbean. When using  * dynamic EIP patterns using unique endpoint urls, you may create excessive mbeans in the registry.  * This could lead to degraded performance as memory consumption will rise due the rising number  * of mbeans.  *  * @return <tt>true</tt> if always registering  */ ;/**  * Whether to always register mbeans.  * <p/>  * This option is default <tt>false</tt>.  * <p/>  * <b>Important:</b> If this option is enabled then any service is registered as mbean. When using  * dynamic EIP patterns using unique endpoint urls, you may create excessive mbeans in the registry.  * This could lead to degraded performance as memory consumption will rise due the rising number  * of mbeans.  *  * @return <tt>true</tt> if always registering  */ Boolean getRegisterAlways().
true;;1;1;/**  * Whether to always register mbeans.  * <p/>  * This option is default <tt>false</tt>.  * <p/>  * <b>Important:</b> If this option is enabled then any service is registered as mbean. When using  * dynamic EIP patterns using unique endpoint urls, you may create excessive mbeans in the registry.  * This could lead to degraded performance as memory consumption will rise due the rising number  * of mbeans.  *  * @param registerAlways <tt>true</tt> to always register  */ ;/**  * Whether to always register mbeans.  * <p/>  * This option is default <tt>false</tt>.  * <p/>  * <b>Important:</b> If this option is enabled then any service is registered as mbean. When using  * dynamic EIP patterns using unique endpoint urls, you may create excessive mbeans in the registry.  * This could lead to degraded performance as memory consumption will rise due the rising number  * of mbeans.  *  * @param registerAlways <tt>true</tt> to always register  */ void setRegisterAlways(Boolean registerAlways).
true;;0;1;/**  * Whether to register mbeans when starting a new route  * <p/>  * This option is default <tt>true</tt>.  *  * @return <tt>true</tt> to register when starting a new route  */ ;/**  * Whether to register mbeans when starting a new route  * <p/>  * This option is default <tt>true</tt>.  *  * @return <tt>true</tt> to register when starting a new route  */ Boolean getRegisterNewRoutes().
true;;1;1;/**  * Whether to register mbeans when starting a new route  * <p/>  * This option is default <tt>true</tt>.  *  * @param registerNewRoutes <tt>true</tt> to register when starting a new route  */ ;/**  * Whether to register mbeans when starting a new route  * <p/>  * This option is default <tt>true</tt>.  *  * @param registerNewRoutes <tt>true</tt> to register when starting a new route  */ void setRegisterNewRoutes(Boolean registerNewRoutes).
true;;0;1;/**  * Whether to remove detected sensitive information (such as passwords) from MBean names and attributes.  * <p/>  * This option is default <tt>false</tt>.  */ ;/**  * Whether to remove detected sensitive information (such as passwords) from MBean names and attributes.  * <p/>  * This option is default <tt>false</tt>.  */ Boolean getMask().
true;;1;1;/**  * Whether to remove detected sensitive information (such as passwords) from MBean names and attributes.  * <p/>  * This option is default <tt>false</tt>.  */ ;/**  * Whether to remove detected sensitive information (such as passwords) from MBean names and attributes.  * <p/>  * This option is default <tt>false</tt>.  */ void setMask(Boolean sanitize).
true;;0;1;/**  * Gets whether host name is included in MBean names.  *  * @return <tt>true</tt> if included  */ ;/**  * Gets whether host name is included in MBean names.  *  * @return <tt>true</tt> if included  */ Boolean getIncludeHostName().
true;;1;1;/**  * Sets whether to include host name in the {@link ManagementObjectNameStrategy}.  * <p/>  * By default this is turned off from Camel 2.13 onwards, but this option  * can be set to <tt>true</tt> to include the hostname as Camel 2.12 or  * older releases does.  *  * @param includeHostName <tt>true</tt> to include host name in the MBean names.  */ ;/**  * Sets whether to include host name in the {@link ManagementObjectNameStrategy}.  * <p/>  * By default this is turned off from Camel 2.13 onwards, but this option  * can be set to <tt>true</tt> to include the hostname as Camel 2.12 or  * older releases does.  *  * @param includeHostName <tt>true</tt> to include host name in the MBean names.  */ void setIncludeHostName(Boolean includeHostName).
true;;0;1;/**  * The naming pattern for creating the CamelContext management name.  * <p/>  * The default pattern is <tt>#name#</tt>  */ ;/**  * The naming pattern for creating the CamelContext management name.  * <p/>  * The default pattern is <tt>#name#</tt>  */ String getManagementNamePattern().
true;;1;1;/**  * The naming pattern for creating the CamelContext management name.  * <p/>  * The default pattern is <tt>#name#</tt>  */ ;/**  * The naming pattern for creating the CamelContext management name.  * <p/>  * The default pattern is <tt>#name#</tt>  */ void setManagementNamePattern(String managementNamePattern).
true;;1;1;/**  * Sets whether load statistics is enabled (gathers load statistics using a background thread per CamelContext).  * <p/>  * The default value is <tt>false</tt>  *  * @param flag <tt>true</tt> to enable load statistics  */ ;/**  * Sets whether load statistics is enabled (gathers load statistics using a background thread per CamelContext).  * <p/>  * The default value is <tt>false</tt>  *  * @param flag <tt>true</tt> to enable load statistics  */ void setLoadStatisticsEnabled(Boolean flag).
true;;0;1;/**  * Gets whether load statistics is enabled  *  * @return <tt>true</tt> if enabled  */ ;/**  * Gets whether load statistics is enabled  *  * @return <tt>true</tt> if enabled  */ Boolean getLoadStatisticsEnabled().
true;;1;1;/**  * Sets whether endpoint runtime statistics is enabled (gathers runtime usage of each incoming and outgoing endpoints).  * <p/>  * The default value is <tt>false</tt>  *  * @param flag <tt>true</tt> to enable endpoint runtime statistics  */ ;/**  * Sets whether endpoint runtime statistics is enabled (gathers runtime usage of each incoming and outgoing endpoints).  * <p/>  * The default value is <tt>false</tt>  *  * @param flag <tt>true</tt> to enable endpoint runtime statistics  */ void setEndpointRuntimeStatisticsEnabled(Boolean flag).
true;;0;1;/**  * Gets whether endpoint runtime statistics is enabled  *  * @return <tt>true</tt> if enabled  */ ;/**  * Gets whether endpoint runtime statistics is enabled  *  * @return <tt>true</tt> if enabled  */ Boolean getEndpointRuntimeStatisticsEnabled().
true;;1;1;/**  * Sets the statistics level  * <p/>  * Default is {@link org.apache.camel.ManagementStatisticsLevel#Default}  * <p/>  * The level can be set to <tt>Extended</tt> to gather additional information  *  * @param level the new level  */ ;/**  * Sets the statistics level  * <p/>  * Default is {@link org.apache.camel.ManagementStatisticsLevel#Default}  * <p/>  * The level can be set to <tt>Extended</tt> to gather additional information  *  * @param level the new level  */ void setStatisticsLevel(ManagementStatisticsLevel level).
true;;0;1;/**  *                   §  * Gets the statistics level  *  * @return the level  */ ;/**  *                   §  * Gets the statistics level  *  * @return the level  */ ManagementStatisticsLevel getStatisticsLevel().
true;;0;1;/**  * Gets whether host IP Address to be used instead of host name.  *  * @return <tt>true</tt> if included  */ ;/**  * Gets whether host IP Address to be used instead of host name.  *  * @return <tt>true</tt> if included  */ Boolean getUseHostIPAddress().
true;;1;1;/**  * Sets whether to use host IP Address  * @param useHostIPAddress <tt>true</tt> to use IP Address.  */ ;/**  * Sets whether to use host IP Address  * @param useHostIPAddress <tt>true</tt> to use IP Address.  */ void setUseHostIPAddress(Boolean useHostIPAddress).
