commented;modifiers;parameterAmount;loc;comment;code
false;default;0;4;;@Override default int getOrder() {     return Ordered.LOWEST. }
true;default;0;3;/**  * Return meta data associated with this {@link HealthCheck}.  */ ;/**  * Return meta data associated with this {@link HealthCheck}.  */ default Map<String, Object> getMetaData() {     return Collections.emptyMap(). }
true;;0;1;/**  * Return the configuration associated with this {@link HealthCheck}.  */ ;/**  * Return the configuration associated with this {@link HealthCheck}.  */ HealthCheckConfiguration getConfiguration().
true;default;0;3;/**  * Invoke the check.  *  * @see {@link #call(Map)}  */ ;/**  * Invoke the check.  *  * @see {@link #call(Map)}  */ default Result call() {     return call(Collections.emptyMap()). }
true;;1;1;/**  * Invoke the check. The implementation is responsible to eventually perform  * the check according to the limitation of the third party system i.e.  * it should not be performed too often to avoid rate limiting. The options  * argument can be used to pass information specific to the check like  * forcing the check to be performed against the policies. The implementation  * is responsible to catch an handle any exception thrown by the underlying  * technology, including unchecked ones.  */ ;/**  * Invoke the check. The implementation is responsible to eventually perform  * the check according to the limitation of the third party system i.e.  * it should not be performed too often to avoid rate limiting. The options  * argument can be used to pass information specific to the check like  * forcing the check to be performed against the policies. The implementation  * is responsible to catch an handle any exception thrown by the underlying  * technology, including unchecked ones.  */ Result call(Map<String, Object> options).
true;;0;1;/**  * The {@link HealthCheck} associated to this response.  */ ;/**  * The {@link HealthCheck} associated to this response.  */ HealthCheck getCheck().
true;;0;1;/**  * The state of the service.  */ ;/**  * The state of the service.  */ State getState().
true;;0;1;/**  * A message associated to the result, used to provide more information  * for unhealthy services.  */ ;/**  * A message associated to the result, used to provide more information  * for unhealthy services.  */ Optional<String> getMessage().
true;;0;1;/**  * An error associated to the result, used to provide the error associated  * to unhealthy services.  */ ;/**  * An error associated to the result, used to provide the error associated  * to unhealthy services.  */ Optional<Throwable> getError().
true;;0;1;/**  * An key/value combination of details.  *  * @return a non null details map  */ ;/**  * An key/value combination of details.  *  * @return a non null details map  */ Map<String, Object> getDetails().
