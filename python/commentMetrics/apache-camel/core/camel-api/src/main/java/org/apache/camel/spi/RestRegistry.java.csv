commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Gets the consumer of the REST service  */ ;/**  * Gets the consumer of the REST service  */ Consumer getConsumer().
true;;0;1;/**  * Gets the state of the REST service (started, stopped, etc)  */ ;/**  * Gets the state of the REST service (started, stopped, etc)  */ String getState().
true;;0;1;/**  * Gets the absolute url to the REST service (baseUrl + uriTemplate)  */ ;/**  * Gets the absolute url to the REST service (baseUrl + uriTemplate)  */ String getUrl().
true;;0;1;/**  * Gets the base url to the REST service  */ ;/**  * Gets the base url to the REST service  */ String getBaseUrl().
true;;0;1;/**  * Gets the base path to the REST service  */ ;/**  * Gets the base path to the REST service  */ String getBasePath().
true;;0;1;/**  * Gets the uri template  */ ;/**  * Gets the uri template  */ String getUriTemplate().
true;;0;1;/**  * Gets the HTTP method (GET, POST, PUT etc)  */ ;/**  * Gets the HTTP method (GET, POST, PUT etc)  */ String getMethod().
true;;0;1;/**  * Optional details about what media-types the REST service accepts  */ ;/**  * Optional details about what media-types the REST service accepts  */ String getConsumes().
true;;0;1;/**  * Optional details about what media-types the REST service returns  */ ;/**  * Optional details about what media-types the REST service returns  */ String getProduces().
true;;0;1;/**  * Optional detail about input binding to a FQN class name.  * <p/>  * If the input accepts a list, then <tt>List&lt.class name&gt.</tt> is enclosed the name.  */ ;/**  * Optional detail about input binding to a FQN class name.  * <p/>  * If the input accepts a list, then <tt>List&lt.class name&gt.</tt> is enclosed the name.  */ String getInType().
true;;0;1;/**  * Optional detail about output binding to a FQN class name.  * <p/>  * If the output accepts a list, then <tt>List&lt.class name&gt.</tt> is enclosed the name.  */ ;/**  * Optional detail about output binding to a FQN class name.  * <p/>  * If the output accepts a list, then <tt>List&lt.class name&gt.</tt> is enclosed the name.  */ String getOutType().
true;;0;1;/**  * Gets the id of the route this rest service will be using.  */ ;/**  * Gets the id of the route this rest service will be using.  */ String getRouteId().
true;;0;1;/**  * Optional description about this rest service.  */ ;/**  * Optional description about this rest service.  */ String getDescription().
true;;12;2;/**  * Adds a new REST service to the registry.  *  * @param consumer    the consumer  * @param url         the absolute url of the REST service  * @param baseUrl     the base url of the REST service  * @param basePath    the base path  * @param uriTemplate the uri template  * @param method      the HTTP method  * @param consumes    optional details about what media-types the REST service accepts  * @param produces    optional details about what media-types the REST service returns  * @param inType      optional detail input binding to a FQN class name  * @param outType     optional detail output binding to a FQN class name  * @param routeId     the id of the route this rest service will be using  * @param description optional description about the service  */ ;/**  * Adds a new REST service to the registry.  *  * @param consumer    the consumer  * @param url         the absolute url of the REST service  * @param baseUrl     the base url of the REST service  * @param basePath    the base path  * @param uriTemplate the uri template  * @param method      the HTTP method  * @param consumes    optional details about what media-types the REST service accepts  * @param produces    optional details about what media-types the REST service returns  * @param inType      optional detail input binding to a FQN class name  * @param outType     optional detail output binding to a FQN class name  * @param routeId     the id of the route this rest service will be using  * @param description optional description about the service  */ void addRestService(Consumer consumer, String url, String baseUrl, String basePath, String uriTemplate, String method, String consumes, String produces, String inType, String outType, String routeId, String description).
true;;1;1;/**  * Removes the REST service from the registry  *  * @param consumer  the consumer  */ ;/**  * Removes the REST service from the registry  *  * @param consumer  the consumer  */ void removeRestService(Consumer consumer).
true;;0;1;/**  * List all REST services from this registry.  *  * @return all the REST services  */ ;/**  * List all REST services from this registry.  *  * @return all the REST services  */ List<RestService> listAllRestServices().
true;;0;1;/**  * Number of rest services in the registry.  *  * @return number of rest services in the registry.  */ ;/**  * Number of rest services in the registry.  *  * @return number of rest services in the registry.  */ int size().
true;;0;1;/**  * Outputs the Rest services API documentation in JSon (requires camel-swagger-java on classpath)  *  * @return  the API docs in JSon, or <tt>null</tt> if camel-swagger-java is not on classpath  */ ;/**  * Outputs the Rest services API documentation in JSon (requires camel-swagger-java on classpath)  *  * @return  the API docs in JSon, or <tt>null</tt> if camel-swagger-java is not on classpath  */ String apiDocAsJson().
