commented;modifiers;parameterAmount;loc;comment;code
true;;3;1;/**  * Creates the child processor.  * <p/>  * The child processor is an output from the given definition, for example the sub route in a splitter EIP.  *  * @param routeContext  the route context  * @param definition    the definition which represents the processor  * @param mandatory     whether or not the child is mandatory  * @return the created processor, or <tt>null</tt> to let the default implementation in Camel create the processor.  * @throws Exception can be thrown if error creating the processor  */ ;/**  * Creates the child processor.  * <p/>  * The child processor is an output from the given definition, for example the sub route in a splitter EIP.  *  * @param routeContext  the route context  * @param definition    the definition which represents the processor  * @param mandatory     whether or not the child is mandatory  * @return the created processor, or <tt>null</tt> to let the default implementation in Camel create the processor.  * @throws Exception can be thrown if error creating the processor  */ Processor createChildProcessor(RouteContext routeContext, NamedNode definition, boolean mandatory) throws Exception.
true;;2;1;/**  * Creates the processor.  *  * @param routeContext  the route context  * @param definition    the definition which represents the processor  * @return the created processor, or <tt>null</tt> to let the default implementation in Camel create the processor.  * @throws Exception can be thrown if error creating the processor  */ ;/**  * Creates the processor.  *  * @param routeContext  the route context  * @param definition    the definition which represents the processor  * @return the created processor, or <tt>null</tt> to let the default implementation in Camel create the processor.  * @throws Exception can be thrown if error creating the processor  */ Processor createProcessor(RouteContext routeContext, NamedNode definition) throws Exception.
