commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Add the given breakpoint  *  * @param breakpoint the breakpoint  */ ;/**  * Add the given breakpoint  *  * @param breakpoint the breakpoint  */ void addBreakpoint(Breakpoint breakpoint).
true;;2;1;/**  * Add the given breakpoint  *  * @param breakpoint the breakpoint  * @param conditions a number of {@link org.apache.camel.spi.Condition}s  */ ;/**  * Add the given breakpoint  *  * @param breakpoint the breakpoint  * @param conditions a number of {@link org.apache.camel.spi.Condition}s  */ void addBreakpoint(Breakpoint breakpoint, Condition... conditions).
true;;1;1;/**  * Add the given breakpoint which will be used in single step mode  * <p/>  * The debugger will single step the first message arriving.  *  * @param breakpoint the breakpoint  */ ;/**  * Add the given breakpoint which will be used in single step mode  * <p/>  * The debugger will single step the first message arriving.  *  * @param breakpoint the breakpoint  */ void addSingleStepBreakpoint(Breakpoint breakpoint).
true;;2;1;/**  * Add the given breakpoint which will be used in single step mode  * <p/>  * The debugger will single step the first message arriving.  *  * @param breakpoint the breakpoint  * @param conditions a number of {@link org.apache.camel.spi.Condition}s  */ ;/**  * Add the given breakpoint which will be used in single step mode  * <p/>  * The debugger will single step the first message arriving.  *  * @param breakpoint the breakpoint  * @param conditions a number of {@link org.apache.camel.spi.Condition}s  */ void addSingleStepBreakpoint(Breakpoint breakpoint, Condition... conditions).
true;;1;1;/**  * Removes the given breakpoint  *  * @param breakpoint the breakpoint  */ ;/**  * Removes the given breakpoint  *  * @param breakpoint the breakpoint  */ void removeBreakpoint(Breakpoint breakpoint).
true;;0;1;/**  * Suspends all breakpoints.  */ ;/**  * Suspends all breakpoints.  */ void suspendAllBreakpoints().
true;;0;1;/**  * Activate all breakpoints.  */ ;/**  * Activate all breakpoints.  */ void activateAllBreakpoints().
true;;0;1;/**  * Gets a list of all the breakpoints  *  * @return the breakpoints wrapped in an unmodifiable list, is never <tt>null</tt>.  */ ;/**  * Gets a list of all the breakpoints  *  * @return the breakpoints wrapped in an unmodifiable list, is never <tt>null</tt>.  */ List<Breakpoint> getBreakpoints().
true;;2;1;/**  * Starts the single step debug mode for the given exchange  *  * @param exchangeId the exchange id  * @param breakpoint the breakpoint  * @return <tt>true</tt> if the debugger will single step the given exchange, <tt>false</tt> if the debugger is already  * single stepping another, and thus cannot simultaneously single step another exchange  */ ;/**  * Starts the single step debug mode for the given exchange  *  * @param exchangeId the exchange id  * @param breakpoint the breakpoint  * @return <tt>true</tt> if the debugger will single step the given exchange, <tt>false</tt> if the debugger is already  * single stepping another, and thus cannot simultaneously single step another exchange  */ boolean startSingleStepExchange(String exchangeId, Breakpoint breakpoint).
true;;1;1;/**  * Stops the single step debug mode for the given exchange.  * <p/>  * <b>Notice:</b> The default implementation of the debugger is capable of auto stopping when the exchange is complete.  *  * @param exchangeId the exchange id  */ ;/**  * Stops the single step debug mode for the given exchange.  * <p/>  * <b>Notice:</b> The default implementation of the debugger is capable of auto stopping when the exchange is complete.  *  * @param exchangeId the exchange id  */ void stopSingleStepExchange(String exchangeId).
true;;3;1;/**  * Callback invoked when an {@link Exchange} is about to be processed which allows implementators  * to notify breakpoints.  *  * @param exchange   the exchange  * @param processor  the {@link Processor} about to be processed  * @param definition the definition of the processor  * @return <tt>true</tt> if any breakpoint was hit, <tt>false</tt> if not breakpoint was hit  */ ;/**  * Callback invoked when an {@link Exchange} is about to be processed which allows implementators  * to notify breakpoints.  *  * @param exchange   the exchange  * @param processor  the {@link Processor} about to be processed  * @param definition the definition of the processor  * @return <tt>true</tt> if any breakpoint was hit, <tt>false</tt> if not breakpoint was hit  */ boolean beforeProcess(Exchange exchange, Processor processor, NamedNode definition).
true;;4;1;/**  * Callback invoked when an {@link Exchange} has been processed which allows implementators  * to notify breakpoints.  *  * @param exchange   the exchange  * @param processor  the {@link Processor} which was processed  * @param definition the definition of the processor  * @param timeTaken  time in millis it took to process the {@link Exchange} - time spend in breakpoint callbacks may affect this time  * @return <tt>true</tt> if any breakpoint was hit, <tt>false</tt> if not breakpoint was hit  */ ;/**  * Callback invoked when an {@link Exchange} has been processed which allows implementators  * to notify breakpoints.  *  * @param exchange   the exchange  * @param processor  the {@link Processor} which was processed  * @param definition the definition of the processor  * @param timeTaken  time in millis it took to process the {@link Exchange} - time spend in breakpoint callbacks may affect this time  * @return <tt>true</tt> if any breakpoint was hit, <tt>false</tt> if not breakpoint was hit  */ boolean afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken).
true;;2;1;/**  * Callback invoked when an {@link Exchange} is being processed which allows implementators  * to notify breakpoints.  *  * @param exchange the exchange  * @param event    the event (instance of {@link ExchangeEvent}  * @return <tt>true</tt> if any breakpoint was hit, <tt>false</tt> if not breakpoint was hit  */ ;/**  * Callback invoked when an {@link Exchange} is being processed which allows implementators  * to notify breakpoints.  *  * @param exchange the exchange  * @param event    the event (instance of {@link ExchangeEvent}  * @return <tt>true</tt> if any breakpoint was hit, <tt>false</tt> if not breakpoint was hit  */ boolean onEvent(Exchange exchange, ExchangeEvent event).
