commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Scope of the verification. This is the scope given to the call to {@link ManagedComponentMBean#verify(String, Map)}  and  * can be used for correlation.  *  * @return the scope against which the parameters have been validated.  */ ;/**  * Scope of the verification. This is the scope given to the call to {@link ManagedComponentMBean#verify(String, Map)}  and  * can be used for correlation.  *  * @return the scope against which the parameters have been validated.  */ Scope getScope().
true;;0;1;/**  * Result of the validation as status. This should be the first datum to check after a verification  * happened.  *  * @return the status  */ ;/**  * Result of the validation as status. This should be the first datum to check after a verification  * happened.  *  * @return the status  */ Status getStatus().
true;;0;1;/**  * Collection of errors happened for the verification. This list is empty (but non null) if the verification  * succeeded.  *  * @return a list of errors. Can be empty when verification was successful  */ ;/**  * Collection of errors happened for the verification. This list is empty (but non null) if the verification  * succeeded.  *  * @return a list of errors. Can be empty when verification was successful  */ List<VerificationError> getErrors().
true;public,static;1;3;/**  * Get an instance of this scope from a string representation  *  * @param scope the scope as string, which can be in any case  * @return the scope enum represented by this string  */ ;/**  * Get an instance of this scope from a string representation  *  * @param scope the scope as string, which can be in any case  * @return the scope enum represented by this string  */ public static Scope fromString(String scope) {     return Scope.valueOf(scope != null ? scope.toUpperCase() : null). }
true;;0;1;/**  * The overall error code, which can be either a {@link StandardCode} or a custom code. It is  * recommended to stick to the predefined standard codes  *  * @return the general error code.  */ ;/**  * The overall error code, which can be either a {@link StandardCode} or a custom code. It is  * recommended to stick to the predefined standard codes  *  * @return the general error code.  */ Code getCode().
true;;0;1;/**  * A human readable description of the error in plain english  *  * @return the error description (if available)  */ ;/**  * A human readable description of the error in plain english  *  * @return the error description (if available)  */ String getDescription().
true;;0;1;/**  * A set of input parameter names which fails the verification. These are keys to the parameter provided  * to {@link ManagedComponentMBean#verify(String, Map)}.  *  * @return the parameter names which are malformed and caused the failure of the validation  */ ;/**  * A set of input parameter names which fails the verification. These are keys to the parameter provided  * to {@link ManagedComponentMBean#verify(String, Map)}.  *  * @return the parameter names which are malformed and caused the failure of the validation  */ Set<String> getParameterKeys().
true;;0;1;/**  * Details about the failed verification. The keys can be either predefined values  * ({@link ExceptionAttribute}, {@link HttpAttribute}, {@link GroupAttribute}) or it can be free-form  * custom keys specific to a component. The standard attributes are defined as enums in all uppercase (with  * underscore as separator), custom attributes are supposed to be in all lower case (also with underscores  * as separators)  *  * @return a number of key/value pair with additional information related to the verification.  */ ;/**  * Details about the failed verification. The keys can be either predefined values  * ({@link ExceptionAttribute}, {@link HttpAttribute}, {@link GroupAttribute}) or it can be free-form  * custom keys specific to a component. The standard attributes are defined as enums in all uppercase (with  * underscore as separator), custom attributes are supposed to be in all lower case (also with underscores  * as separators)  *  * @return a number of key/value pair with additional information related to the verification.  */ Map<Attribute, Object> getDetails().
true;default;1;7;/**  * Get a single detail for a given attribute  *  * @param attribute the attribute to lookup  * @return the detail value or null if no such attribute exists  */ ;/**  * Get a single detail for a given attribute  *  * @param attribute the attribute to lookup  * @return the detail value or null if no such attribute exists  */ default Object getDetail(Attribute attribute) {     Map<Attribute, Object> details = getDetails().     if (details != null) {         return details.get(attribute).     }     return null. }
true;default;1;3;/**  * Get a single detail for a given attribute  *  * @param attribute the attribute to lookup  * @return the detail value or null if no such attribute exists  */ ;/**  * Get a single detail for a given attribute  *  * @param attribute the attribute to lookup  * @return the detail value or null if no such attribute exists  */ default Object getDetail(String attribute) {     return getDetail(asAttribute(attribute)). }
true;static;1;3;/**  * Convert a string to an {@link Code}  *  * @param code the code to convert. It should be in all lower case (with  *             underscore as a separator) to avoid overlap with {@link StandardCode}  * @return error code  */ ;/**  * Convert a string to an {@link Code}  *  * @param code the code to convert. It should be in all lower case (with  *             underscore as a separator) to avoid overlap with {@link StandardCode}  * @return error code  */ static Code asCode(String code) {     return new ErrorCode(code). }
true;static;1;3;/**  * Convert a string to an {@link Attribute}  *  * @param attribute the string representation of an attribute to convert. It should be in all lower case (with  *                  underscore as a separator) to avoid overlap with standard attributes like {@link ExceptionAttribute},  *                  {@link HttpAttribute} or {@link GroupAttribute}  * @return generated attribute  */ ;/**  * Convert a string to an {@link Attribute}  *  * @param attribute the string representation of an attribute to convert. It should be in all lower case (with  *                  underscore as a separator) to avoid overlap with standard attributes like {@link ExceptionAttribute},  *                  {@link HttpAttribute} or {@link GroupAttribute}  * @return generated attribute  */ static Attribute asAttribute(String attribute) {     return new ErrorAttribute(attribute). }
true;;0;1;/**  * Name of the code. All uppercase for standard codes, all lower case for custom codes.  * Separator between two words is an underscore.  *  * @return code name  */ ;/**  * Name of the code. All uppercase for standard codes, all lower case for custom codes.  * Separator between two words is an underscore.  *  * @return code name  */ String name().
true;default;0;3;/**  * Bean style accessor to name.  * This is required for framework like Jackson using bean convention for object serialization.  *  * @return code name  */ ;/**  * Bean style accessor to name.  * This is required for framework like Jackson using bean convention for object serialization.  *  * @return code name  */ default String getName() {     return name(). }
true;;0;1;/**  * Name of the attribute. All uppercase for standard attributes and all lower case for custom attributes.  * Separator between words is an underscore.  *  * @return attribute name  */ ;/**  * Name of the attribute. All uppercase for standard attributes and all lower case for custom attributes.  * Separator between words is an underscore.  *  * @return attribute name  */ String name().
true;default;0;3;/**  * Bean style accessor to name.  * This is required for framework like Jackson using bean convention for object serialization.  *  * @return attribute name  */ ;/**  * Bean style accessor to name.  * This is required for framework like Jackson using bean convention for object serialization.  *  * @return attribute name  */ default String getName() {     return name(). }
false;public;0;4;;@Override public String name() {     return name. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof Code)) {         return false.     }     Code errorCode = (Code) o.     return name.equals(errorCode.name()). }
false;public;0;4;;@Override public int hashCode() {     return name.hashCode(). }
false;public;0;4;;@Override public String toString() {     return name(). }
false;public;0;4;;@Override public String name() {     return name. }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (!(o instanceof Attribute)) {         return false.     }     Attribute that = (Attribute) o.     return name.equals(that.name()). }
false;public;0;4;;@Override public int hashCode() {     return name.hashCode(). }
false;public;0;4;;@Override public String toString() {     return name(). }
