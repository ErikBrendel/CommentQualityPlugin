commented;modifiers;parameterAmount;loc;comment;code
false;;0;2;;@ManagedAttribute(description = "Camel ID") String getCamelId().
false;;0;2;;@ManagedAttribute(description = "Camel ManagementName") String getCamelManagementName().
false;;0;2;;@ManagedAttribute(description = "Does the error handler support redelivery") boolean isSupportRedelivery().
false;;0;2;;@ManagedAttribute(description = "Is this error handler a dead letter channel") boolean isDeadLetterChannel().
false;;0;2;;@ManagedAttribute(description = "When a message is moved to dead letter channel is it the original message or recent message") boolean isDeadLetterUseOriginalMessage().
false;;0;2;;@ManagedAttribute(description = "Does this error handler handle new exceptions which may occur during error handling") boolean isDeadLetterHandleNewException().
false;;0;2;;@ManagedAttribute(description = "Does this error handler support transactions") boolean isSupportTransactions().
false;;0;2;;@ManagedAttribute(description = "Endpoint Uri for the dead letter channel where dead message is move to", mask = true) String getDeadLetterChannelEndpointUri().
false;;0;2;;@ManagedAttribute(description = "Number of Exchanges scheduled for redelivery (waiting to be redelivered in the future)") Integer getPendingRedeliveryCount().
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for maximum redeliveries") Integer getMaximumRedeliveries().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for maximum redeliveries") void setMaximumRedeliveries(Integer maximum).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for maximum redelivery delay") Long getMaximumRedeliveryDelay().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for maximum redelivery delay") void setMaximumRedeliveryDelay(Long delay).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for redelivery delay") Long getRedeliveryDelay().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for redelivery delay") void setRedeliveryDelay(Long delay).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for backoff multiplier") Double getBackOffMultiplier().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for backoff multiplier") void setBackOffMultiplier(Double multiplier).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for collision avoidance factor") Double getCollisionAvoidanceFactor().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for collision avoidance factor") void setCollisionAvoidanceFactor(Double factor).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for collision avoidance percent") Double getCollisionAvoidancePercent().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for collision avoidance percent") void setCollisionAvoidancePercent(Double percent).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for delay pattern") String getDelayPattern().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for delay pattern") void setDelayPattern(String pattern).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging level when retries exhausted") String getRetriesExhaustedLogLevel().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging level when retries exhausted") void setRetriesExhaustedLogLevel(String level).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging level when attempting retry") String getRetryAttemptedLogLevel().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging level when attempting retry") void setRetryAttemptedLogLevel(String level).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging stack traces") Boolean getLogStackTrace().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging stack traces") void setLogStackTrace(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging redelivery stack traces") Boolean getLogRetryStackTrace().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging redelivery stack traces") void setLogRetryStackTrace(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging handled exceptions") Boolean getLogHandled().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging handled exceptions") void setLogHandled(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging new exceptions") Boolean getLogNewException().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging new exceptions") void setLogNewException(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging exhausted with message history") Boolean getLogExhaustedMessageHistory().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging exhausted with message history") void setLogExhaustedMessageHistory(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging exhausted with message history") Boolean getLogExhaustedMessageBody().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging exhausted with message body") void setLogExhaustedMessageBody(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging handled and continued exceptions") Boolean getLogContinued().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging handled and continued exceptions") void setLogContinued(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging exhausted exceptions") Boolean getLogExhausted().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for logging exhausted exceptions") void setLogExhausted(Boolean log).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for using collision avoidance") Boolean getUseCollisionAvoidance().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for using collision avoidance") void setUseCollisionAvoidance(Boolean avoidance).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for using exponential backoff") Boolean getUseExponentialBackOff().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for using exponential backoff") void setUseExponentialBackOff(Boolean backoff).
false;;0;2;;@ManagedAttribute(description = "RedeliveryPolicy for allow redelivery while stopping") Boolean getAllowRedeliveryWhileStopping().
false;;1;2;;@ManagedAttribute(description = "RedeliveryPolicy for allow redelivery while stopping") void setAllowRedeliveryWhileStopping(Boolean allow).
