commented;modifiers;parameterAmount;loc;comment;code
false;;0;2;;@ManagedAttribute(description = "Camel ID") String getCamelId().
false;;0;2;;@ManagedAttribute(description = "Camel ManagementName") String getManagementName().
false;;0;2;;@ManagedAttribute(description = "Camel Version") String getCamelVersion().
false;;0;2;;@ManagedAttribute(description = "Camel State") String getState().
false;;0;2;;@ManagedAttribute(description = "Uptime [human readable text]") String getUptime().
false;;0;2;;@ManagedAttribute(description = "Uptime [milliseconds]") long getUptimeMillis().
false;;0;2;;@ManagedAttribute(description = "Camel Management StatisticsLevel") String getManagementStatisticsLevel().
false;;0;2;;@ManagedAttribute(description = "Camel Global Options") Map<String, String> getGlobalOptions().
false;;0;2;;@ManagedAttribute(description = "ClassResolver class name") String getClassResolver().
false;;0;2;;@ManagedAttribute(description = "PackageScanClassResolver class name") String getPackageScanClassResolver().
false;;0;2;;@ManagedAttribute(description = "ApplicationContext class name") String getApplicationContextClassName().
false;;0;2;;@ManagedAttribute(description = "HeadersMapFactory class name") String getHeadersMapFactoryClassName().
true;;1;2;/**  * Gets the value of a CamelContext global option  *  * @param key the global option key  * @return the global option value  * @throws Exception when an error occurred  */ ;/**  * Gets the value of a CamelContext global option  *  * @param key the global option key  * @return the global option value  * @throws Exception when an error occurred  */ @ManagedOperation(description = "Gets the value of a Camel global option") String getGlobalOption(String key) throws Exception.
true;;2;2;/**  * Sets the value of a CamelContext property name  *  * @param key the global option key  * @param value the global option value  * @throws Exception when an error occurred  */ ;/**  * Sets the value of a CamelContext property name  *  * @param key the global option key  * @param value the global option value  * @throws Exception when an error occurred  */ @ManagedOperation(description = "Sets the value of a Camel global option") void setGlobalOption(String key, String value) throws Exception.
false;;0;2;;@ManagedAttribute(description = "Tracing") Boolean getTracing().
false;;1;2;;@ManagedAttribute(description = "Tracing") void setTracing(Boolean tracing).
false;;0;2;;@ManagedAttribute(description = "Total number of routes") Integer getTotalRoutes().
false;;0;2;;@ManagedAttribute(description = "Current number of started routes") Integer getStartedRoutes().
false;;1;2;;@ManagedAttribute(description = "Shutdown timeout") void setTimeout(long timeout).
false;;0;2;;@ManagedAttribute(description = "Shutdown timeout") long getTimeout().
false;;1;2;;@ManagedAttribute(description = "Shutdown timeout time unit") void setTimeUnit(TimeUnit timeUnit).
false;;0;2;;@ManagedAttribute(description = "Shutdown timeout time unit") TimeUnit getTimeUnit().
false;;1;2;;@ManagedAttribute(description = "Whether to force shutdown now when a timeout occurred") void setShutdownNowOnTimeout(boolean shutdownNowOnTimeout).
false;;0;2;;@ManagedAttribute(description = "Whether to force shutdown now when a timeout occurred") boolean isShutdownNowOnTimeout().
false;;0;2;;@ManagedAttribute(description = "Average load over the last minute") String getLoad01().
false;;0;2;;@ManagedAttribute(description = "Average load over the last five minutes") String getLoad05().
false;;0;2;;@ManagedAttribute(description = "Average load over the last fifteen minutes") String getLoad15().
false;;0;2;;@ManagedAttribute(description = "Whether breadcrumbs is in use") boolean isUseBreadcrumb().
false;;0;2;;@ManagedAttribute(description = "Whether allowing access to the original message during routing") boolean isAllowUseOriginalMessage().
false;;0;2;;@ManagedAttribute(description = "Whether message history is enabled") boolean isMessageHistory().
false;;0;2;;@ManagedAttribute(description = "Whether security mask for Logging is enabled") boolean isLogMask().
false;;0;2;;@ManagedAttribute(description = "Whether MDC logging is supported") boolean isUseMDCLogging().
false;;0;2;;@ManagedAttribute(description = "Whether Message DataType is enabled") boolean isUseDataType().
false;;0;2;;@ManagedOperation(description = "Start Camel") void start() throws Exception.
false;;0;2;;@ManagedOperation(description = "Stop Camel (shutdown)") void stop() throws Exception.
false;;0;2;;@ManagedOperation(description = "Restart Camel (stop and then start)") void restart() throws Exception.
false;;0;2;;@ManagedOperation(description = "Suspend Camel") void suspend() throws Exception.
false;;0;2;;@ManagedOperation(description = "Resume Camel") void resume() throws Exception.
false;;0;2;;@ManagedOperation(description = "Starts all the routes which currently is not started") void startAllRoutes() throws Exception.
false;;1;2;;@ManagedOperation(description = "Whether its possible to send to the endpoint (eg the endpoint has a producer)") boolean canSendToEndpoint(String endpointUri).
false;;2;2;;@ManagedOperation(description = "Send body (in only)") void sendBody(String endpointUri, Object body) throws Exception.
false;;2;2;;@ManagedOperation(description = "Send body (String type) (in only)") void sendStringBody(String endpointUri, String body) throws Exception.
false;;3;2;;@ManagedOperation(description = "Send body and headers (in only)") void sendBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws Exception.
false;;2;2;;@ManagedOperation(description = "Request body (in out)") Object requestBody(String endpointUri, Object body) throws Exception.
false;;2;2;;@ManagedOperation(description = "Request body (String type) (in out)") Object requestStringBody(String endpointUri, String body) throws Exception.
false;;3;2;;@ManagedOperation(description = "Request body and headers (in out)") Object requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) throws Exception.
false;;0;2;;@ManagedOperation(description = "Dumps the rests as XML") String dumpRestsAsXml() throws Exception.
false;;1;2;;@ManagedOperation(description = "Dumps the rests as XML") String dumpRestsAsXml(boolean resolvePlaceholders) throws Exception.
false;;0;2;;@ManagedOperation(description = "Dumps the routes as XML") String dumpRoutesAsXml() throws Exception.
false;;1;2;;@ManagedOperation(description = "Dumps the routes as XML") String dumpRoutesAsXml(boolean resolvePlaceholders) throws Exception.
false;;1;2;;@ManagedOperation(description = "Adds or updates existing routes from XML") void addOrUpdateRoutesFromXml(String xml) throws Exception.
false;;2;2;;@ManagedOperation(description = "Adds or updates existing routes from XML") void addOrUpdateRoutesFromXml(String xml, boolean urlDecode) throws Exception.
false;;2;2;;@ManagedOperation(description = "Dumps the CamelContext and routes stats as XML") String dumpRoutesStatsAsXml(boolean fullStats, boolean includeProcessors) throws Exception.
false;;0;2;;@ManagedOperation(description = "Dumps the routes coverage as XML") String dumpRoutesCoverageAsXml() throws Exception.
true;;1;2;/**  * Creates the endpoint by the given uri  *  * @param uri uri of endpoint to create  * @return <tt>true</tt> if a new endpoint was created, <tt>false</tt> if the endpoint already existed  * @throws Exception is thrown if error occurred  */ ;/**  * Creates the endpoint by the given uri  *  * @param uri uri of endpoint to create  * @return <tt>true</tt> if a new endpoint was created, <tt>false</tt> if the endpoint already existed  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Creates the endpoint by the given URI") boolean createEndpoint(String uri) throws Exception.
true;;1;2;/**  * Removes the endpoint by the given pattern  *  * @param pattern the pattern  * @return number of endpoints removed  * @throws Exception is thrown if error occurred  * @see org.apache.camel.CamelContext#removeEndpoints(String)  */ ;/**  * Removes the endpoint by the given pattern  *  * @param pattern the pattern  * @return number of endpoints removed  * @throws Exception is thrown if error occurred  * @see org.apache.camel.CamelContext#removeEndpoints(String)  */ @ManagedOperation(description = "Removes endpoints by the given pattern") int removeEndpoints(String pattern) throws Exception.
true;;0;2;/**  * Find information about all the Camel components available in the classpath and {@link org.apache.camel.spi.Registry}.  *  * @return a map with the component name, and value with component details.  * @throws Exception is thrown if error occurred  */ ;/**  * Find information about all the Camel components available in the classpath and {@link org.apache.camel.spi.Registry}.  *  * @return a map with the component name, and value with component details.  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Find all Camel components available in the classpath") Map<String, Properties> findComponents() throws Exception.
true;;0;2;/**  * Find information about all the EIPs from camel-core.  *  * @return a map with node id, and value with EIP details.  * @throws Exception is thrown if error occurred  */ ;/**  * Find information about all the EIPs from camel-core.  *  * @return a map with node id, and value with EIP details.  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Find all Camel EIPs from camel-core") Map<String, Properties> findEips() throws Exception.
true;;0;2;/**  * Find the names of all the EIPs from camel-core.  *  * @return a list with the names of the camel EIPs  * @throws Exception is thrown if error occurred  */ ;/**  * Find the names of all the EIPs from camel-core.  *  * @return a list with the names of the camel EIPs  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Find all Camel EIP names from camel-core") List<String> findEipNames() throws Exception.
true;;0;2;/**  * Find the names of all the Camel components available in the classpath and {@link org.apache.camel.spi.Registry}.  *  * @return a list with the names of the camel components  * @throws Exception is thrown if error occurred  */ ;/**  * Find the names of all the Camel components available in the classpath and {@link org.apache.camel.spi.Registry}.  *  * @return a list with the names of the camel components  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Find all Camel components names available in the classpath") List<String> findComponentNames() throws Exception.
true;;0;2;/**  * Find information about all the Camel components available in the classpath and {@link org.apache.camel.spi.Registry}.  *  * @return a list with the data  * @throws Exception is thrown if error occurred  */ ;/**  * Find information about all the Camel components available in the classpath and {@link org.apache.camel.spi.Registry}.  *  * @return a list with the data  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "List all Camel components available in the classpath") TabularData listComponents() throws Exception.
true;;0;2;/**  * Find information about all the EIPs from camel-core.  *  * @return a list with the data  * @throws Exception is thrown if error occurred  */ ;/**  * Find information about all the EIPs from camel-core.  *  * @return a list with the data  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "List all Camel EIPs from camel-core") TabularData listEips() throws Exception.
true;;1;3;/**  * Returns the JSON schema representation with information about the component and the endpoint parameters it supports  *  * @param componentName the name of the component to lookup  * @throws Exception is thrown if error occurred  */ ;/**  * Returns the JSON schema representation with information about the component and the endpoint parameters it supports  *  * @param componentName the name of the component to lookup  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Returns the JSON schema representation of the endpoint parameters for the given component name") @Deprecated String componentParameterJsonSchema(String componentName) throws Exception.
true;;1;2;/**  * Returns the JSON schema representation with information about the data format and the parameters it supports  *  * @param dataFormatName the name of the data format to lookup  * @throws Exception is thrown if error occurred  */ ;/**  * Returns the JSON schema representation with information about the data format and the parameters it supports  *  * @param dataFormatName the name of the data format to lookup  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Returns the JSON schema representation of the data format parameters for the given data format name") String dataFormatParameterJsonSchema(String dataFormatName) throws Exception.
true;;1;2;/**  * Returns the JSON schema representation with information about the language and the parameters it supports  *  * @param languageName the name of the language to lookup  * @throws Exception is thrown if error occurred  */ ;/**  * Returns the JSON schema representation with information about the language and the parameters it supports  *  * @param languageName the name of the language to lookup  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Returns the JSON schema representation of the language parameters for the given language name") String languageParameterJsonSchema(String languageName) throws Exception.
true;;1;2;/**  * Returns the JSON schema representation with information about the EIP and the parameters it supports  *  * @param eipName the name of the EIP to lookup  * @throws Exception is thrown if error occurred  */ ;/**  * Returns the JSON schema representation with information about the EIP and the parameters it supports  *  * @param eipName the name of the EIP to lookup  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Returns the JSON schema representation of the EIP parameters for the given EIP name") String eipParameterJsonSchema(String eipName) throws Exception.
true;;2;2;/**  * Returns a JSON schema representation of the EIP parameters for the given EIP by its id.  *  * @param nameOrId the name of the EIP ({@link org.apache.camel.NamedNode#getShortName()} or a node id to refer to a specific node from the routes.  * @param includeAllOptions whether to include non configured options also (eg default options)  * @return the json or <tt>null</tt> if the eipName or the id was not found  */ ;/**  * Returns a JSON schema representation of the EIP parameters for the given EIP by its id.  *  * @param nameOrId the name of the EIP ({@link org.apache.camel.NamedNode#getShortName()} or a node id to refer to a specific node from the routes.  * @param includeAllOptions whether to include non configured options also (eg default options)  * @return the json or <tt>null</tt> if the eipName or the id was not found  */ @ManagedOperation(description = "Returns a JSON schema representation of the EIP parameters for the given EIP by its id") String explainEipJson(String nameOrId, boolean includeAllOptions).
true;;2;2;/**  * Returns a JSON schema representation of the component parameters (not endpoint parameters) for the given component by its id.  *  * @param componentName the id of the component  * @param includeAllOptions whether to include non configured options also (eg default options)  */ ;/**  * Returns a JSON schema representation of the component parameters (not endpoint parameters) for the given component by its id.  *  * @param componentName the id of the component  * @param includeAllOptions whether to include non configured options also (eg default options)  */ @ManagedOperation(description = " Returns a JSON schema representation of the component parameters for the given component by its id") String explainComponentJson(String componentName, boolean includeAllOptions) throws Exception.
true;;2;2;/**  * Returns a JSON schema representation of the endpoint parameters for the given endpoint uri  *  * @param uri the endpoint uri  * @param includeAllOptions whether to include non configured options also (eg default options)  */ ;/**  * Returns a JSON schema representation of the endpoint parameters for the given endpoint uri  *  * @param uri the endpoint uri  * @param includeAllOptions whether to include non configured options also (eg default options)  */ @ManagedOperation(description = " Returns a JSON schema representation of the endpoint parameters for the given endpoint uri") String explainEndpointJson(String uri, boolean includeAllOptions) throws Exception.
true;;1;2;/**  * Resets all the performance counters.  *  * @param includeRoutes  whether to reset all routes as well.  * @throws Exception is thrown if error occurred  */ ;/**  * Resets all the performance counters.  *  * @param includeRoutes  whether to reset all routes as well.  * @throws Exception is thrown if error occurred  */ @ManagedOperation(description = "Reset counters") void reset(boolean includeRoutes) throws Exception.
false;;0;2;;@ManagedOperation(description = "Returns the JSON representation of all the static and dynamic endpoints defined in all the routes") String createRouteStaticEndpointJson().
false;;1;2;;@ManagedOperation(description = "Returns the JSON representation of all the static endpoints (and possible dynamic) defined in all the routes") String createRouteStaticEndpointJson(boolean includeDynamic).
