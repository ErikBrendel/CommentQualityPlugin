commented;modifiers;parameterAmount;loc;comment;code
false;;0;2;;@ManagedAttribute(description = "The language for the expression") String getCorrelationExpressionLanguage().
false;;0;2;;@ManagedAttribute(description = "Correlation Expression") String getCorrelationExpression().
false;;0;2;;@ManagedAttribute(description = "Completion timeout in millis") long getCompletionTimeout().
false;;0;2;;@ManagedAttribute(description = "The language for the expression") String getCompletionTimeoutLanguage().
false;;0;2;;@ManagedAttribute(description = "Completion timeout expression") String getCompletionTimeoutExpression().
false;;0;2;;@ManagedAttribute(description = "Completion interval in millis") long getCompletionInterval().
false;;0;2;;@ManagedAttribute(description = "Completion timeout checker interval in millis") long getCompletionTimeoutCheckerInterval().
false;;0;2;;@ManagedAttribute(description = "Completion size") int getCompletionSize().
false;;0;2;;@ManagedAttribute(description = "The language for the expression") String getCompletionSizeExpressionLanguage().
false;;0;2;;@ManagedAttribute(description = "Completion size expression") String getCompletionSizeExpression().
false;;0;2;;@ManagedAttribute(description = "Complete from batch consumers") boolean isCompletionFromBatchConsumer().
false;;0;2;;@ManagedAttribute(description = "Complete all previous groups on new incoming correlation group") boolean isCompletionOnNewCorrelationGroup().
false;;0;2;;@ManagedAttribute(description = "Ignore invalid correlation keys") boolean isIgnoreInvalidCorrelationKeys().
false;;0;2;;@ManagedAttribute(description = "Whether to close the correlation group on completion if this value is > 0.") Integer getCloseCorrelationKeyOnCompletion().
false;;0;2;;@ManagedAttribute(description = "Parallel mode") boolean isParallelProcessing().
false;;0;2;;@ManagedAttribute(description = "Optimistic locking") boolean isOptimisticLocking().
false;;0;2;;@ManagedAttribute(description = "Whether or not to eager check for completion when a new incoming Exchange has been received") boolean isEagerCheckCompletion().
false;;0;2;;@ManagedAttribute(description = "The language for the predicate") String getCompletionPredicateLanguage().
false;;0;2;;@ManagedAttribute(description = "A Predicate to indicate when an aggregated exchange is complete") String getCompletionPredicate().
false;;0;2;;@ManagedAttribute(description = "Whether or not exchanges which complete due to a timeout should be discarded") boolean isDiscardOnCompletionTimeout().
false;;0;2;;@ManagedAttribute(description = "Indicates to complete all current aggregated exchanges when the context is stopped") boolean isForceCompletionOnStop().
false;;0;2;;@ManagedAttribute(description = "Indicates to wait to complete all current and partial (pending) aggregated exchanges when the context is stopped") boolean isCompleteAllOnStop().
false;;0;2;;@ManagedAttribute(description = "Number of completed exchanges which are currently in-flight") int getInProgressCompleteExchanges().
false;;0;2;;@ManagedOperation(description = "Number of groups currently in the aggregation repository") int aggregationRepositoryGroups().
false;;1;2;;@ManagedOperation(description = "To force completing a specific group by its key") int forceCompletionOfGroup(String key).
false;;0;2;;@ManagedOperation(description = "To force complete of all groups") int forceCompletionOfAllGroups().
false;;0;2;;@ManagedAttribute(description = "Current number of closed correlation keys in the memory cache") int getClosedCorrelationKeysCacheSize().
false;;0;2;;@ManagedOperation(description = "Clear all the closed correlation keys stored in the cache") void clearClosedCorrelationKeysCache().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanges arrived into the aggregator") long getTotalIn().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanges completed and outgoing from the aggregator") long getTotalCompleted().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion size trigger") long getCompletedBySize().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion aggregation strategy trigger") long getCompletedByStrategy().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion interval (timeout) trigger") long getCompletedByInterval().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion timeout trigger") long getCompletedByTimeout().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion predicate trigger") long getCompletedByPredicate().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion batch consumer trigger") long getCompletedByBatchConsumer().
false;;0;2;;@ManagedAttribute(description = "Total number of exchanged completed by completion force trigger") long getCompletedByForce().
false;;0;2;;@ManagedOperation(description = " Reset the statistics counters") void resetStatistics().
false;;0;2;;@ManagedAttribute(description = "Sets whether statistics is enabled") boolean isStatisticsEnabled().
false;;1;2;;@ManagedAttribute(description = "Sets whether statistics is enabled") void setStatisticsEnabled(boolean statisticsEnabled).
