commented;modifiers;parameterAmount;loc;comment;code
false;;0;2;;@ManagedAttribute(description = "Camel ID") String getCamelId().
false;;0;2;;@ManagedAttribute(description = "Camel ManagementName") String getCamelManagementName().
false;;0;2;;@ManagedAttribute(description = "Logging Level") String getLoggingLevel().
false;;1;2;;@ManagedAttribute(description = "Logging Level") void setLoggingLevel(String level).
false;;0;2;;@ManagedAttribute(description = "Is debugger enabled") boolean isEnabled().
false;;0;2;;@ManagedOperation(description = "Enable the debugger") void enableDebugger().
false;;0;2;;@ManagedOperation(description = "Disable the debugger") void disableDebugger().
false;;1;2;;@ManagedOperation(description = "Add a breakpoint at the given node id") void addBreakpoint(String nodeId).
false;;3;2;;@ManagedOperation(description = "Add a conditional breakpoint at the given node id") void addConditionalBreakpoint(String nodeId, String language, String predicate).
false;;1;2;;@ManagedOperation(description = "Remote the breakpoint from the given node id (will resume suspend breakpoint first)") void removeBreakpoint(String nodeId).
false;;0;2;;@ManagedOperation(description = "Remote all breakpoints (will resume all suspend breakpoints first and exists single step mode)") void removeAllBreakpoints().
false;;1;2;;@ManagedOperation(description = "Resume running from the suspended breakpoint at the given node id") void resumeBreakpoint(String nodeId).
false;;2;2;;@ManagedOperation(description = "Updates the message body (uses same type as old body) on the suspended breakpoint at the given node id") void setMessageBodyOnBreakpoint(String nodeId, Object body).
false;;3;2;;@ManagedOperation(description = "Updates the message body (with a new type) on the suspended breakpoint at the given node id") void setMessageBodyOnBreakpoint(String nodeId, Object body, String type).
false;;1;2;;@ManagedOperation(description = "Removes the message body on the suspended breakpoint at the given node id") void removeMessageBodyOnBreakpoint(String nodeId).
false;;3;2;;@ManagedOperation(description = "Updates/adds the message header (uses same type as old header value) on the suspended breakpoint at the given node id") void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value).
false;;2;2;;@ManagedOperation(description = "Removes the message header on the suspended breakpoint at the given node id") void removeMessageHeaderOnBreakpoint(String nodeId, String headerName).
false;;4;2;;@ManagedOperation(description = "Updates/adds the message header (with a new type) on the suspended breakpoint at the given node id") void setMessageHeaderOnBreakpoint(String nodeId, String headerName, Object value, String type).
false;;0;2;;@ManagedOperation(description = "Resume running any suspended breakpoints, and exits step mode") void resumeAll().
false;;1;2;;@ManagedOperation(description = "Starts single step debugging from the suspended breakpoint at the given node id") void stepBreakpoint(String nodeId).
false;;0;2;;@ManagedAttribute(description = "Whether currently in step mode") boolean isSingleStepMode().
false;;0;2;;@ManagedOperation(description = "Steps to next node in step mode") void step().
false;;0;2;;@ManagedOperation(description = "Return the node ids which has breakpoints") Set<String> getBreakpoints().
false;;0;2;;@ManagedOperation(description = "Return the node ids which is currently suspended") Set<String> getSuspendedBreakpointNodeIds().
false;;1;2;;@ManagedOperation(description = "Disables a breakpoint") void disableBreakpoint(String nodeId).
false;;1;2;;@ManagedOperation(description = "Enables a breakpoint which has been disabled") void enableBreakpoint(String nodeId).
false;;0;2;;@ManagedAttribute(description = "Number of maximum chars in the message body in the trace message. Use zero or negative value to have unlimited size.") int getBodyMaxChars().
false;;1;2;;@ManagedAttribute(description = "Number of maximum chars in the message body in the trace message. Use zero or negative value to have unlimited size.") void setBodyMaxChars(int bodyMaxChars).
false;;0;2;;@ManagedAttribute(description = "Fallback Timeout in seconds when block the message processing in Camel.") long getFallbackTimeout().
false;;1;2;;@ManagedAttribute(description = "Fallback Timeout in seconds when block the message processing in Camel.") void setFallbackTimeout(long fallbackTimeout).
false;;0;2;;@ManagedAttribute(description = "Whether to include stream based message body in the trace message.") boolean isBodyIncludeStreams().
false;;1;2;;@ManagedAttribute(description = "Whether to include stream based message body in the trace message.") void setBodyIncludeStreams(boolean bodyIncludeStreams).
false;;0;2;;@ManagedAttribute(description = "Whether to include file based message body in the trace message.") boolean isBodyIncludeFiles().
false;;1;2;;@ManagedAttribute(description = "Whether to include file based message body in the trace message.") void setBodyIncludeFiles(boolean bodyIncludeFiles).
false;;1;2;;@ManagedOperation(description = "Dumps the messages in xml format from the suspended breakpoint at the given node") String dumpTracedMessagesAsXml(String nodeId).
false;;0;2;;@ManagedAttribute(description = "Number of total debugged messages") long getDebugCounter().
false;;0;2;;@ManagedOperation(description = "Resets the debug counter") void resetDebugCounter().
false;;2;2;;@ManagedOperation(description = "Used for validating if a given predicate is valid or not") String validateConditionalBreakpoint(String language, String predicate).
