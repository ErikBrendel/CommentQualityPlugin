commented;modifiers;parameterAmount;loc;comment;code
false;public;2;27;;public boolean process(Exchange exchange, AsyncCallback callback) {     ObjectHelper.notNull(dataFormat, "dataFormat").     // if stream caching is enabled then use that so we can stream accordingly     // for example to overflow to disk for big streams     OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange).     Message in = exchange.getIn().     Object body = in.getBody().     // lets setup the out message before we invoke the dataFormat     // so that it can mutate it if necessary     Message out = exchange.getOut().     out.copyFrom(in).     try {         dataFormat.marshal(exchange, body, osb).         out.setBody(osb.build()).     } catch (Throwable e) {         // remove OUT message, as an exception occurred         exchange.setOut(null).         exchange.setException(e).     }     callback.done(true).     return true. }
false;public;0;4;;@Override public String toString() {     return "Marshal[" + dataFormat + "]". }
false;public;0;3;;public String getTraceLabel() {     return "marshal[" + dataFormat + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;10;;@Override protected void doStart() throws Exception {     // inject CamelContext on data format     if (dataFormat instanceof CamelContextAware) {         ((CamelContextAware) dataFormat).setCamelContext(camelContext).     }     // add dataFormat as service which will also start the service     // (false => we handle the lifecycle of the dataFormat)     getCamelContext().addService(dataFormat, false, true). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(dataFormat).     getCamelContext().removeService(dataFormat). }
