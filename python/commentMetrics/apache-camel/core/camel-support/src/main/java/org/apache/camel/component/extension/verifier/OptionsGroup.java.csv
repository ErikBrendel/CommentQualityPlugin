commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Adds a option definition to this group. The option syntax can be  * {@code "propertyName"} to denote required property and  * {@code "!propertyName"} to denote required absence of a property.  *  * @param option definition.  */ ;/**  * Adds a option definition to this group. The option syntax can be  * {@code "propertyName"} to denote required property and  * {@code "!propertyName"} to denote required absence of a property.  *  * @param option definition.  */ public void addOption(String option) {     this.options.add(option). }
true;public;0;3;/**  * The name of the group.  */ ;/**  * The name of the group.  */ public String getName() {     return name. }
true;public;0;3;/**  * The option definitions in this group.  */ ;/**  * The option definitions in this group.  */ public Set<String> getOptions() {     return this.options. }
true;public;1;4;/**  * Adds a option definition to this group. The option syntax can be  * {@code "propertyName"} to denote required property and  * {@code "!propertyName"} to denote required absence of a property.  *  * @param option definition.  */ ;/**  * Adds a option definition to this group. The option syntax can be  * {@code "propertyName"} to denote required property and  * {@code "!propertyName"} to denote required absence of a property.  *  * @param option definition.  */ public OptionsGroup option(String option) {     this.options.add(option).     return this. }
true;public;1;7;/**  * Adds a number of option definitions to this group. The option  * syntax can be {@code "propertyName"} to denote required  * property and {@code "!propertyName"} to denote required absence  * of a property.  *  * @param options options definition  */ ;/**  * Adds a number of option definitions to this group. The option  * syntax can be {@code "propertyName"} to denote required  * property and {@code "!propertyName"} to denote required absence  * of a property.  *  * @param options options definition  */ public OptionsGroup options(String... options) {     for (String option : options) {         addOption(option).     }     return this. }
true;public,static;1;3;/**  * Creates new group with the specified name.  *  * @param name the name of the group  */ ;/**  * Creates new group with the specified name.  *  * @param name the name of the group  */ public static OptionsGroup withName(String name) {     return new OptionsGroup(name). }
true;public,static;1;3;/**  * Creates new group with the specified name of the given  * {@link Enum} name.  *  * @param enumItem the name of the group  * @see Enum#name()  */ ;/**  * Creates new group with the specified name of the given  * {@link Enum} name.  *  * @param enumItem the name of the group  * @see Enum#name()  */ public static OptionsGroup withName(Enum<?> enumItem) {     return new OptionsGroup(enumItem.name()). }
true;public,static;2;3;/**  * Creates new group with the specified name and option definitions.  *  * @param name the name of the group  * @param options options definition  */ ;/**  * Creates new group with the specified name and option definitions.  *  * @param name the name of the group  * @param options options definition  */ public static OptionsGroup withNameAndOptions(String name, String... options) {     return new OptionsGroup(name, Arrays.asList(options)). }
