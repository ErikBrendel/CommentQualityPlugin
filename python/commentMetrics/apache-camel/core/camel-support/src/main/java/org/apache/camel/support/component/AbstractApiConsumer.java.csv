commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public boolean isGreedy() {     // make this consumer not greedy to avoid making too many calls     return false. }
false;protected;0;19;;@Override protected int poll() throws Exception {     // invoke the consumer method     final Map<String, Object> args = new HashMap<>().     args.putAll(endpoint.getEndpointProperties()).     // let the endpoint and the Consumer intercept properties     endpoint.interceptProperties(args).     interceptProperties(args).     try {         Object result = doInvokeMethod(args).         return ApiConsumerHelper.getResultsProcessed(this, result, isSplitResult()).     } catch (Throwable t) {         throw RuntimeCamelException.wrapRuntimeCamelException(t).     } }
false;public;1;4;;@Override public void interceptPropertyNames(Set<String> propertyNames) { // do nothing by default }
false;public;1;4;;@Override public void interceptProperties(Map<String, Object> properties) { // do nothing by default }
true;protected;1;3;/**  * Invoke the API method.  * This method can be overridden, for example to synchronize API calls for thread-unsafe proxies.  * Derived class MUST call super.doInvokeMethod() to invoke the API method.  * @param args method arguments from endpoint parameters.  * @return method invocation result.  */ ;/**  * Invoke the API method.  * This method can be overridden, for example to synchronize API calls for thread-unsafe proxies.  * Derived class MUST call super.doInvokeMethod() to invoke the API method.  * @param args method arguments from endpoint parameters.  * @return method invocation result.  */ protected Object doInvokeMethod(Map<String, Object> args) {     return ApiMethodHelper.invokeMethod(endpoint.getApiProxy(method, args), method, args). }
false;public;1;4;;@Override public Object splitResult(Object result) {     return result. }
false;public;2;4;;@Override public void interceptResult(Object result, Exchange resultExchange) { // do nothing by default }
false;public,final;0;3;;public final boolean isSplitResult() {     return splitResult. }
false;public,final;1;3;;public final void setSplitResult(boolean splitResult) {     this.splitResult = splitResult. }
