commented;modifiers;parameterAmount;loc;comment;code
false;public;3;3;;public boolean applyFilterToCamelHeaders(String headerName, Object headerValue, Exchange exchange) {     return doFiltering(Direction.OUT, headerName, headerValue, exchange). }
false;public;3;3;;public boolean applyFilterToExternalHeaders(String headerName, Object headerValue, Exchange exchange) {     return doFiltering(Direction.IN, headerName, headerValue, exchange). }
true;public;0;7;/**  * Gets the "out" direction filter set. The "out" direction is referred to  * copying headers from a Camel message to an external message.  *  * @return a set that contains header names that should be excluded.  */ ;/**  * Gets the "out" direction filter set. The "out" direction is referred to  * copying headers from a Camel message to an external message.  *  * @return a set that contains header names that should be excluded.  */ public Set<String> getOutFilter() {     if (outFilter == null) {         outFilter = new HashSet<>().     }     return outFilter. }
true;public;1;3;/**  * Sets the "out" direction filter set. The "out" direction is referred to  * copying headers from a Camel message to an external message.  *  * @param value  the filter  */ ;/**  * Sets the "out" direction filter set. The "out" direction is referred to  * copying headers from a Camel message to an external message.  *  * @param value  the filter  */ public void setOutFilter(Set<String> value) {     outFilter = value. }
true;public;0;3;/**  * Gets the "out" direction filter regular expression {@link Pattern}. The  * "out" direction is referred to copying headers from Camel message to  * an external message. If the pattern matches a header, the header will  * be filtered out.  *  * @return regular expression filter pattern  */ ;/**  * Gets the "out" direction filter regular expression {@link Pattern}. The  * "out" direction is referred to copying headers from Camel message to  * an external message. If the pattern matches a header, the header will  * be filtered out.  *  * @return regular expression filter pattern  */ public String getOutFilterPattern() {     return outFilterPattern == null ? null : outFilterPattern.pattern(). }
true;public;1;7;/**  * Sets the "out" direction filter regular expression {@link Pattern}. The  * "out" direction is referred to copying headers from Camel message to  * an external message. If the pattern matches a header, the header will  * be filtered out.  *  * @param value regular expression filter pattern  */ ;/**  * Sets the "out" direction filter regular expression {@link Pattern}. The  * "out" direction is referred to copying headers from Camel message to  * an external message. If the pattern matches a header, the header will  * be filtered out.  *  * @param value regular expression filter pattern  */ public void setOutFilterPattern(String value) {     if (value == null) {         outFilterPattern = null.     } else {         outFilterPattern = Pattern.compile(value).     } }
true;public;0;6;/**  * Gets the "in" direction filter set. The "in" direction is referred to  * copying headers from an external message to a Camel message.  *  * @return a set that contains header names that should be excluded.  */ ;/**  * Gets the "in" direction filter set. The "in" direction is referred to  * copying headers from an external message to a Camel message.  *  * @return a set that contains header names that should be excluded.  */ public Set<String> getInFilter() {     if (inFilter == null) {         inFilter = new HashSet<>().     }     return inFilter. }
true;public;1;3;/**  * Sets the "in" direction filter set. The "in" direction is referred to  * copying headers from an external message to a Camel message.  *  * @param value the filter  */ ;/**  * Sets the "in" direction filter set. The "in" direction is referred to  * copying headers from an external message to a Camel message.  *  * @param value the filter  */ public void setInFilter(Set<String> value) {     inFilter = value. }
true;public;0;3;/**  * Gets the "in" direction filter regular expression {@link Pattern}. The  * "in" direction is referred to copying headers from an external message  * to a Camel message. If the pattern matches a header, the header will  * be filtered out.  *  * @return regular expression filter pattern  */ ;/**  * Gets the "in" direction filter regular expression {@link Pattern}. The  * "in" direction is referred to copying headers from an external message  * to a Camel message. If the pattern matches a header, the header will  * be filtered out.  *  * @return regular expression filter pattern  */ public String getInFilterPattern() {     return inFilterPattern == null ? null : inFilterPattern.pattern(). }
true;public;1;7;/**  * Sets the "in" direction filter regular expression {@link Pattern}. The  * "in" direction is referred to copying headers from an external message  * to a Camel message. If the pattern matches a header, the header will  * be filtered out.  *  * @param value regular expression filter pattern  */ ;/**  * Sets the "in" direction filter regular expression {@link Pattern}. The  * "in" direction is referred to copying headers from an external message  * to a Camel message. If the pattern matches a header, the header will  * be filtered out.  *  * @param value regular expression filter pattern  */ public void setInFilterPattern(String value) {     if (value == null) {         inFilterPattern = null.     } else {         inFilterPattern = Pattern.compile(value).     } }
true;public;0;3;/**  * Gets the isLowercase property which is a boolean to determine  * whether header names should be converted to lower case before  * checking it with the filter Set. It does not affect filtering using  * regular expression pattern.  */ ;/**  * Gets the isLowercase property which is a boolean to determine  * whether header names should be converted to lower case before  * checking it with the filter Set. It does not affect filtering using  * regular expression pattern.  */ public boolean isLowerCase() {     return lowerCase. }
true;public;1;3;/**  * Sets the isLowercase property which is a boolean to determine  * whether header names should be converted to lower case before  * checking it with the filter Set. It does not affect filtering using  * regular expression pattern.  */ ;/**  * Sets the isLowercase property which is a boolean to determine  * whether header names should be converted to lower case before  * checking it with the filter Set. It does not affect filtering using  * regular expression pattern.  */ public void setLowerCase(boolean value) {     lowerCase = value. }
true;public;0;3;/**  * Gets the caseInsensitive property which is a boolean to determine  * whether header names should be case insensitive when checking it  * with the filter set.  * It does not affect filtering using regular expression pattern.  *  * @return <tt>true</tt> if header names is case insensitive.  */ ;/**  * Gets the caseInsensitive property which is a boolean to determine  * whether header names should be case insensitive when checking it  * with the filter set.  * It does not affect filtering using regular expression pattern.  *  * @return <tt>true</tt> if header names is case insensitive.  */ public boolean isCaseInsensitive() {     return caseInsensitive. }
true;public;1;3;/**  * Sets the caseInsensitive property which is a boolean to determine  * whether header names should be case insensitive when checking it  * with the filter set.  * It does not affect filtering using regular expression pattern,  *  * @param caseInsensitive <tt>true</tt> if header names is case insensitive.  */ ;/**  * Sets the caseInsensitive property which is a boolean to determine  * whether header names should be case insensitive when checking it  * with the filter set.  * It does not affect filtering using regular expression pattern,  *  * @param caseInsensitive <tt>true</tt> if header names is case insensitive.  */ public void setCaseInsensitive(boolean caseInsensitive) {     this.caseInsensitive = caseInsensitive. }
false;public;0;3;;public boolean isAllowNullValues() {     return allowNullValues. }
false;public;1;3;;public void setAllowNullValues(boolean value) {     allowNullValues = value. }
false;public;0;3;;public boolean isFilterOnMatch() {     return filterOnMatch. }
true;public;1;3;/**  * Sets the filterOnMatch property which is a boolean to determine  * what to do when a pattern or filter set is matched.  *  * When set to true, a match will filter out the header. This is the default value for backwards compatibility.  *  * When set to false, the pattern or filter will indicate that the header must be kept. anything not matched will be filtered out.  *  * @param filterOnMatch <tt>true</tt> if a match filters out the header.  */ ;/**  * Sets the filterOnMatch property which is a boolean to determine  * what to do when a pattern or filter set is matched.  *  * When set to true, a match will filter out the header. This is the default value for backwards compatibility.  *  * When set to false, the pattern or filter will indicate that the header must be kept. anything not matched will be filtered out.  *  * @param filterOnMatch <tt>true</tt> if a match filters out the header.  */ public void setFilterOnMatch(boolean filterOnMatch) {     this.filterOnMatch = filterOnMatch. }
false;protected;4;3;;protected boolean extendedFilter(Direction direction, String key, Object value, Exchange exchange) {     return !filterOnMatch. }
false;private;4;44;;private boolean doFiltering(Direction direction, String headerName, Object headerValue, Exchange exchange) {     if (headerName == null) {         return true.     }     if (headerValue == null && !allowNullValues) {         return true.     }     Pattern pattern = null.     Set<String> filter = null.     if (Direction.OUT == direction) {         pattern = outFilterPattern.         filter = outFilter.     } else if (Direction.IN == direction) {         pattern = inFilterPattern.         filter = inFilter.     }     if (pattern != null && pattern.matcher(headerName).matches()) {         return filterOnMatch.     }     if (filter != null) {         if (isCaseInsensitive()) {             for (String filterString : filter) {                 if (filterString.equalsIgnoreCase(headerName)) {                     return filterOnMatch.                 }             }         } else if (isLowerCase()) {             if (filter.contains(headerName.toLowerCase(Locale.ENGLISH))) {                 return filterOnMatch.             }         } else {             if (filter.contains(headerName)) {                 return filterOnMatch.             }         }     }     return extendedFilter(direction, headerName, headerValue, exchange). }
