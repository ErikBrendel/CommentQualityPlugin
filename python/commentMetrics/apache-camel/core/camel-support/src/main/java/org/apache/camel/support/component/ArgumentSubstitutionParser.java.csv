commented;modifiers;parameterAmount;loc;comment;code
false;public;1;64;;@Override public List<ApiMethodModel> processResults(List<ApiMethodModel> parseResult) {     final List<ApiMethodModel> result = new ArrayList<>().     for (ApiMethodModel model : parseResult) {         // look for method name matches         for (Map.Entry<Pattern, Map<Pattern, List<NameReplacement>>> methodEntry : methodMap.entrySet()) {             // match the whole method name             if (methodEntry.getKey().matcher(model.getName()).matches()) {                 // look for arg name matches                 final List<ApiMethodArg> updatedArguments = new ArrayList<>().                 final Map<Pattern, List<NameReplacement>> argMap = methodEntry.getValue().                 for (ApiMethodArg argument : model.getArguments()) {                     final Class<?> argType = argument.getType().                     final String typeArgs = argument.getTypeArgs().                     final String argTypeName = argType.getCanonicalName().                     for (Map.Entry<Pattern, List<NameReplacement>> argEntry : argMap.entrySet()) {                         final Matcher matcher = argEntry.getKey().matcher(argument.getName()).                         // match argument name substring                         if (matcher.find()) {                             final List<NameReplacement> adapters = argEntry.getValue().                             for (NameReplacement adapter : adapters) {                                 if (adapter.typePattern == null) {                                     // no type pattern                                     final String newName = getJavaArgName(matcher.replaceAll(adapter.replacement)).                                     argument = new ApiMethodArg(newName, argType, typeArgs).                                 } else {                                     final Matcher typeMatcher = adapter.typePattern.matcher(argTypeName).                                     if (typeMatcher.find()) {                                         if (!adapter.replaceWithType) {                                             // replace argument name                                             final String newName = getJavaArgName(matcher.replaceAll(adapter.replacement)).                                             argument = new ApiMethodArg(newName, argType, typeArgs).                                         } else {                                             // replace name with argument type name                                             final String newName = getJavaArgName(typeMatcher.replaceAll(adapter.replacement)).                                             argument = new ApiMethodArg(newName, argType, typeArgs).                                         }                                     }                                 }                             }                         }                     }                     updatedArguments.add(argument).                 }                 model = new ApiMethodModel(model.getUniqueName(), model.getName(), model.getResultType(), updatedArguments, model.getMethod()).             }         }         result.add(model).     }     return result. }
false;private;1;10;;private String getJavaArgName(String name) {     // make sure the first character is lowercase     // useful for replacement using type names     char firstChar = name.charAt(0).     if (Character.isLowerCase(firstChar)) {         return name.     } else {         return Character.toLowerCase(firstChar) + name.substring(1).     } }
false;public;0;5;;public void validate() {     if (method == null || argName == null || replacement == null) {         throw new IllegalArgumentException("Properties method, argName and replacement MUST be provided").     } }
