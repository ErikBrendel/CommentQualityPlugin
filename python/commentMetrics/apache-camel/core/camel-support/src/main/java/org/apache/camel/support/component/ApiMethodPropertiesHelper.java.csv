commented;modifiers;parameterAmount;loc;comment;code
true;public;2;20;/**  * Gets exchange header properties that start with propertyPrefix.  *  * @param exchange Camel exchange  * @param properties map to collect properties with required prefix  */ ;/**  * Gets exchange header properties that start with propertyPrefix.  *  * @param exchange Camel exchange  * @param properties map to collect properties with required prefix  */ public Map<String, Object> getExchangeProperties(Exchange exchange, Map<String, Object> properties) {     int nProperties = 0.     for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {         final String key = entry.getKey().         if (key.startsWith(propertyPrefix)) {             properties.put(key.substring(prefixLength), entry.getValue()).             nProperties++.         } else if (camelCasePrefix != null && key.startsWith(camelCasePrefix)) {             // assuming all property names start with a lowercase character             final String propertyName = String.valueOf(Character.toLowerCase(key.charAt(prefixLength - 1))) + key.substring(prefixLength).             properties.put(propertyName, entry.getValue()).             nProperties++.         }     }     LOG.debug("Found {} properties in exchange", nProperties).     return properties. }
false;public;2;10;;public void getEndpointProperties(Object endpointConfiguration, Map<String, Object> properties) {     Set<String> names = null.     if (IntrospectionSupport.getProperties(endpointConfiguration, properties, null, false)) {         names = properties.keySet().         // remove component config properties so we only have endpoint properties         names.removeAll(componentConfigFields).     }     LOG.debug("Found endpoint properties {}", names). }
false;public;1;5;;public Set<String> getEndpointPropertyNames(Object endpointConfiguration) {     Map<String, Object> properties = new HashMap<>().     getEndpointProperties(endpointConfiguration, properties).     return Collections.unmodifiableSet(properties.keySet()). }
false;public;1;7;;public Set<String> getValidEndpointProperties(Object endpointConfiguration) {     Set<String> fields = new HashSet<>().     for (Field field : endpointConfiguration.getClass().getDeclaredFields()) {         fields.add(field.getName()).     }     return Collections.unmodifiableSet(fields). }
