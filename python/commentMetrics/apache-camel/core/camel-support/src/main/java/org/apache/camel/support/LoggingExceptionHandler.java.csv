commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void handleException(Throwable exception) {     handleException(null, null, exception). }
false;public;2;3;;public void handleException(String message, Throwable exception) {     handleException(message, null, exception). }
false;public;3;19;;public void handleException(String message, Exchange exchange, Throwable exception) {     try {         if (!isSuppressLogging()) {             String msg = CamelExchangeException.createExceptionMessage(message, exchange, exception).             if (isCausedByRollbackExchangeException(exception)) {                 // do not log stack trace for intended rollbacks                 logger.log(msg).             } else {                 if (exception != null) {                     logger.log(msg, exception).                 } else {                     logger.log(msg).                 }             }         }     } catch (Throwable e) {     // the logging exception handler must not cause new exceptions to occur     } }
false;protected;1;13;;protected boolean isCausedByRollbackExchangeException(Throwable exception) {     if (exception == null) {         return false.     }     if (exception instanceof RollbackExchangeException) {         return true.     } else if (exception.getCause() != null) {         // recursive children         return isCausedByRollbackExchangeException(exception.getCause()).     }     return false. }
false;protected;0;8;;protected boolean isSuppressLogging() {     if (camelContext != null) {         return (camelContext.getStatus().isStopping() || camelContext.getStatus().isStopped()) && camelContext.getShutdownStrategy().hasTimeoutOccurred() && camelContext.getShutdownStrategy().isSuppressLoggingOnTimeout().     } else {         return false.     } }
