commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "DelegateAsync[" + processor + "]". }
false;public;0;3;;public AsyncProcessor getProcessor() {     return processor. }
false;public;1;3;;public void setProcessor(AsyncProcessor processor) {     this.processor = processor. }
false;public;1;3;;public void setProcessor(Processor processor) {     this.processor = AsyncProcessorConverterHelper.convert(processor). }
false;protected;0;3;;protected void doStart() throws Exception {     ServiceHelper.startService(processor). }
false;protected;0;3;;protected void doStop() throws Exception {     ServiceHelper.stopService(processor). }
false;protected;0;3;;protected void doShutdown() throws Exception {     ServiceHelper.stopAndShutdownServices(processor). }
false;public;2;3;;public boolean process(final Exchange exchange, final AsyncCallback callback) {     return processor.process(exchange, callback). }
false;public;0;3;;public boolean hasNext() {     return processor != null. }
false;public;0;8;;public List<Processor> next() {     if (!hasNext()) {         return null.     }     List<Processor> answer = new ArrayList<>(1).     answer.add(processor).     return answer. }
