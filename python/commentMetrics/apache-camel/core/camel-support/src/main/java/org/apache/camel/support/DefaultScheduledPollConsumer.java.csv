commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;33;;protected int poll() throws Exception {     int messagesPolled = 0.     while (isPollAllowed()) {         Exchange exchange.         if (timeout == 0) {             exchange = pollingConsumer.receiveNoWait().         } else if (timeout < 0) {             exchange = pollingConsumer.receive().         } else {             exchange = pollingConsumer.receive(timeout).         }         if (exchange == null) {             break.         }         messagesPolled++.         log.trace("Polled {} {}", messagesPolled, exchange).         // use the output as input to the next processor         if (exchange.hasOut()) {             // lets create a new exchange             Exchange newExchange = getEndpoint().createExchange().             newExchange.getIn().copyFrom(exchange.getOut()).             exchange = newExchange.         }         getProcessor().process(exchange).     }     return messagesPolled. }
false;public;0;3;;public int getTimeout() {     return timeout. }
true;public;1;3;/**  * Sets a timeout to use with {@link PollingConsumer}.  * <br/>  * <br/>Use <tt>timeout < 0</tt> for {@link PollingConsumer#receive()}.  * <br/>Use <tt>timeout == 0</tt> for {@link PollingConsumer#receiveNoWait()}.  * <br/>Use <tt>timeout > 0</tt> for {@link PollingConsumer#receive(long)}}.  * <br/> The default timeout value is <tt>0</tt>  *  * @param timeout the timeout value  */ ;/**  * Sets a timeout to use with {@link PollingConsumer}.  * <br/>  * <br/>Use <tt>timeout < 0</tt> for {@link PollingConsumer#receive()}.  * <br/>Use <tt>timeout == 0</tt> for {@link PollingConsumer#receiveNoWait()}.  * <br/>Use <tt>timeout > 0</tt> for {@link PollingConsumer#receive(long)}}.  * <br/> The default timeout value is <tt>0</tt>  *  * @param timeout the timeout value  */ public void setTimeout(int timeout) {     this.timeout = timeout. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     pollingConsumer = getEndpoint().createPollingConsumer().     ServiceHelper.startService(pollingConsumer).     super.doStart(). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(pollingConsumer).     super.doStop(). }
