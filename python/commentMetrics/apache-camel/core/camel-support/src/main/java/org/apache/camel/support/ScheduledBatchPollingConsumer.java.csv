commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public boolean deferShutdown(ShutdownRunningTask shutdownRunningTask) {     // store a reference what to do in case when shutting down and we have pending messages     this.shutdownRunningTask = shutdownRunningTask.     // do not defer shutdown     return false. }
false;public;0;21;;@Override public int getPendingExchangesSize() {     int answer.     // only return the real pending size in case we are configured to complete all tasks     if (ShutdownRunningTask.CompleteAllTasks == shutdownRunningTask) {         answer = pendingExchanges.     } else {         answer = 0.     }     if (answer == 0 && isPolling()) {         // force at least one pending exchange if we are polling as there is a little gap         // in the processBatch method and until an exchange gets enlisted as in-flight         // which happens later, so we need to signal back to the shutdown strategy that         // there is a pending exchange. When we are no longer polling, then we will return 0         log.trace("Currently polling so returning 1 as pending exchanges").         answer = 1.     }     return answer. }
false;public;2;6;;@Override public void prepareShutdown(boolean suspendOnly, boolean forced) {     // reset task as the state of the task is not to be preserved     // which otherwise may cause isBatchAllowed() to return a wrong answer     this.shutdownRunningTask = null. }
false;public;1;4;;@Override public void setMaxMessagesPerPoll(int maxMessagesPerPoll) {     this.maxMessagesPerPoll = maxMessagesPerPoll. }
true;public;0;3;/**  * Gets the maximum number of messages as a limit to poll at each polling.  * <p/>  * Is default unlimited, but use 0 or negative number to disable it as unlimited.  *  * @return max messages to poll  */ ;/**  * Gets the maximum number of messages as a limit to poll at each polling.  * <p/>  * Is default unlimited, but use 0 or negative number to disable it as unlimited.  *  * @return max messages to poll  */ public int getMaxMessagesPerPoll() {     return maxMessagesPerPoll. }
false;public;0;16;;@Override public boolean isBatchAllowed() {     // stop if we are not running     boolean answer = isRunAllowed().     if (!answer) {         return false.     }     if (shutdownRunningTask == null) {         // we are not shutting down so continue to run         return true.     }     // we are shutting down so only continue if we are configured to complete all tasks     return ShutdownRunningTask.CompleteAllTasks == shutdownRunningTask. }
false;protected;0;10;;@Override protected void processEmptyMessage() throws Exception {     Exchange exchange = getEndpoint().createExchange().     // enrich exchange, so we send an empty message with the batch details     exchange.setProperty(Exchange.BATCH_INDEX, 0).     exchange.setProperty(Exchange.BATCH_SIZE, 1).     exchange.setProperty(Exchange.BATCH_COMPLETE, true).     log.debug("Sending empty message as there were no messages from polling: {}", this.getEndpoint()).     getProcessor().process(exchange). }
