commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;public void start() throws Exception {     synchronized (lock) {         if (status == STARTED) {             log.trace("Service: {} already started", this).             return.         }         if (status == STARTING) {             log.trace("Service: {} already starting", this).             return.         }         status = STARTING.         log.trace("Starting service: {}", this).         try {             ServiceHelper.startService(childServices).             doStart().             status = STARTED.             log.trace("Service: {} started", this).         } catch (Exception e) {             status = FAILED.             log.trace("Error while starting service: " + this, e).             ServiceHelper.stopService(childServices).             throw e.         }     } }
false;public;0;24;;public void stop() throws Exception {     synchronized (lock) {         if (status == STOPPED || status == SHUTTINGDOWN || status == SHUTDOWN) {             log.trace("Service: {} already stopped", this).             return.         }         if (status == STOPPING) {             log.trace("Service: {} already stopping", this).             return.         }         status = STOPPING.         log.trace("Stopping service: {}", this).         try {             doStop().             ServiceHelper.stopService(childServices).             status = STOPPED.             log.trace("Service: {} stopped service", this).         } catch (Exception e) {             status = FAILED.             log.trace("Error while stopping service: " + this, e).             throw e.         }     } }
false;public;0;26;;@Override public void shutdown() throws Exception {     synchronized (lock) {         if (status == SHUTDOWN) {             log.trace("Service: {} already shut down", this).             return.         }         if (status == SHUTTINGDOWN) {             log.trace("Service: {} already shutting down", this).             return.         }         stop().         status = SHUTDOWN.         log.trace("Shutting down service: {}", this).         try {             doShutdown().             ServiceHelper.stopAndShutdownServices(childServices).             log.trace("Service: {} shut down", this).             status = SHUTDOWN.         } catch (Exception e) {             status = FAILED.             log.trace("Error shutting down service: " + this, e).             throw e.         }     } }
false;protected;1;12;;protected void addChildService(Object childService) {     if (childService instanceof Service) {         if (childServices == null) {             synchronized (lock) {                 if (childServices == null) {                     childServices = new CopyOnWriteArrayList<>().                 }             }         }         childServices.add((Service) childService).     } }
false;protected;1;3;;protected boolean removeChildService(Object childService) {     return childServices != null && childServices.remove(childService). }
