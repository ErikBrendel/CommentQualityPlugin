commented;modifiers;parameterAmount;loc;comment;code
false;public;1;17;;public String format(String source) {     if (keywords == null || keywords.isEmpty()) {         return source.     }     String answer = source.     if (maskKeyValue) {         answer = keyValueMaskPattern.matcher(answer).replaceAll("$1\"" + maskString + "\"").     }     if (maskXmlElement) {         answer = xmlElementMaskPattern.matcher(answer).replaceAll("$1" + maskString + "$3").     }     if (maskJson) {         answer = jsonMaskPattern.matcher(answer).replaceAll("$1\"" + maskString + "\"").     }     return answer. }
false;public;0;3;;public boolean isMaskKeyValue() {     return maskKeyValue. }
false;public;1;8;;public void setMaskKeyValue(boolean maskKeyValue) {     this.maskKeyValue = maskKeyValue.     if (maskKeyValue) {         keyValueMaskPattern = createKeyValueMaskPattern(keywords).     } else {         keyValueMaskPattern = null.     } }
false;public;0;3;;public boolean isMaskXmlElement() {     return maskXmlElement. }
false;public;1;8;;public void setMaskXmlElement(boolean maskXml) {     this.maskXmlElement = maskXml.     if (maskXml) {         xmlElementMaskPattern = createXmlElementMaskPattern(keywords).     } else {         xmlElementMaskPattern = null.     } }
false;public;0;3;;public boolean isMaskJson() {     return maskJson. }
false;public;1;8;;public void setMaskJson(boolean maskJson) {     this.maskJson = maskJson.     if (maskJson) {         jsonMaskPattern = createJsonMaskPattern(keywords).     } else {         jsonMaskPattern = null.     } }
false;public;0;3;;public String getMaskString() {     return maskString. }
false;public;1;3;;public void setMaskString(String maskString) {     this.maskString = maskString. }
false;protected;1;9;;protected Pattern createKeyValueMaskPattern(Set<String> keywords) {     StringBuilder regex = createOneOfThemRegex(keywords).     if (regex == null) {         return null.     }     regex.insert(0, "([\\w]*(?:").     regex.append(")[\\w]*[\\s]*?=[\\s]*?)([\\S&&[^'\",\\}\\]\\)]]+[\\S&&[^,\\}\\]\\)>]]*?|\"[^\"]*?\"|'[^']*?')").     return Pattern.compile(regex.toString(), Pattern.CASE_INSENSITIVE). }
false;protected;1;9;;protected Pattern createXmlElementMaskPattern(Set<String> keywords) {     StringBuilder regex = createOneOfThemRegex(keywords).     if (regex == null) {         return null.     }     regex.insert(0, "(<([\\w]*(?:").     regex.append(")[\\w]*)(?:[\\s]+.+)*?>[\\s]*?)(?:[\\S&&[^<]]+(?:\\s+[\\S&&[^<]]+)*?)([\\s]*?</\\2>)").     return Pattern.compile(regex.toString(), Pattern.CASE_INSENSITIVE). }
false;protected;1;9;;protected Pattern createJsonMaskPattern(Set<String> keywords) {     StringBuilder regex = createOneOfThemRegex(keywords).     if (regex == null) {         return null.     }     regex.insert(0, "(\"(?:[^\"]|(?:\\\"))*?(?:").     regex.append(")(?:[^\"]|(?:\\\"))*?\"\\s*?\\:\\s*?)(?:\"(?:[^\"]|(?:\\\"))*?\")").     return Pattern.compile(regex.toString(), Pattern.CASE_INSENSITIVE). }
false;protected;1;15;;protected StringBuilder createOneOfThemRegex(Set<String> keywords) {     StringBuilder regex = new StringBuilder().     if (keywords == null || keywords.isEmpty()) {         return null.     }     String[] strKeywords = keywords.toArray(new String[0]).     regex.append(Pattern.quote(strKeywords[0])).     if (strKeywords.length > 1) {         for (int i = 1. i < strKeywords.length. i++) {             regex.append('|').             regex.append(Pattern.quote(strKeywords[i])).         }     }     return regex. }
