commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;5;;public static boolean notifyCamelContextStarting(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextStartingEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextStarted(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextStartedEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;2;5;;public static boolean notifyCamelContextStartupFailed(CamelContext context, Throwable cause) {     return doNotify(context, factory -> factory.createCamelContextStartupFailureEvent(context, cause), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextStopping(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextStoppingEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextStopped(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextStoppedEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;2;5;;public static boolean notifyCamelContextStopFailure(CamelContext context, Throwable cause) {     return doNotify(context, factory -> factory.createCamelContextStopFailureEvent(context, cause), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;3;5;;public static boolean notifyServiceStopFailure(CamelContext context, Object service, Throwable cause) {     return doNotify(context, factory -> factory.createServiceStopFailureEvent(context, service, cause), EventNotifier::isIgnoreServiceEvents). }
false;public,static;3;5;;public static boolean notifyServiceStartupFailure(CamelContext context, Object service, Throwable cause) {     return doNotify(context, factory -> factory.createServiceStartupFailureEvent(context, service, cause), EventNotifier::isIgnoreServiceEvents). }
false;public,static;2;5;;public static boolean notifyRouteStarted(CamelContext context, Route route) {     return doNotify(context, factory -> factory.createRouteStartedEvent(route), EventNotifier::isIgnoreRouteEvents). }
false;public,static;2;5;;public static boolean notifyRouteStopped(CamelContext context, Route route) {     return doNotify(context, factory -> factory.createRouteStoppedEvent(route), EventNotifier::isIgnoreRouteEvents). }
false;public,static;2;5;;public static boolean notifyRouteAdded(CamelContext context, Route route) {     return doNotify(context, factory -> factory.createRouteAddedEvent(route), EventNotifier::isIgnoreRouteEvents). }
false;public,static;2;5;;public static boolean notifyRouteRemoved(CamelContext context, Route route) {     return doNotify(context, factory -> factory.createRouteRemovedEvent(route), EventNotifier::isIgnoreRouteEvents). }
false;public,static;2;5;;public static boolean notifyExchangeCreated(CamelContext context, Exchange exchange) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeCreatedEvent(exchange), EventNotifier::isIgnoreExchangeCreatedEvent). }
false;public,static;2;5;;public static boolean notifyExchangeDone(CamelContext context, Exchange exchange) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeCompletedEvent(exchange), EventNotifier::isIgnoreExchangeCompletedEvent). }
false;public,static;2;5;;public static boolean notifyExchangeFailed(CamelContext context, Exchange exchange) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeFailedEvent(exchange), EventNotifier::isIgnoreExchangeFailedEvents). }
false;public,static;5;6;;public static boolean notifyExchangeFailureHandling(CamelContext context, Exchange exchange, Processor failureHandler, boolean deadLetterChannel, String deadLetterUri) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeFailureHandlingEvent(exchange, failureHandler, deadLetterChannel, deadLetterUri), EventNotifier::isIgnoreExchangeFailedEvents). }
false;public,static;5;6;;public static boolean notifyExchangeFailureHandled(CamelContext context, Exchange exchange, Processor failureHandler, boolean deadLetterChannel, String deadLetterUri) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeFailureHandledEvent(exchange, failureHandler, deadLetterChannel, deadLetterUri), EventNotifier::isIgnoreExchangeFailedEvents). }
false;public,static;3;5;;public static boolean notifyExchangeRedelivery(CamelContext context, Exchange exchange, int attempt) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeRedeliveryEvent(exchange, attempt), EventNotifier::isIgnoreExchangeRedeliveryEvents). }
false;public,static;3;5;;public static boolean notifyExchangeSending(CamelContext context, Exchange exchange, Endpoint endpoint) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeSendingEvent(exchange, endpoint), EventNotifier::isIgnoreExchangeSendingEvents). }
false;public,static;4;5;;public static boolean notifyExchangeSent(CamelContext context, Exchange exchange, Endpoint endpoint, long timeTaken) {     return doNotifyExchange(context, exchange, factory -> factory.createExchangeSentEvent(exchange, endpoint, timeTaken), EventNotifier::isIgnoreExchangeSentEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextSuspending(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextSuspendingEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextSuspended(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextSuspendedEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextResuming(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextResumingEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;1;5;;public static boolean notifyCamelContextResumed(CamelContext context) {     return doNotify(context, factory -> factory.createCamelContextResumedEvent(context), EventNotifier::isIgnoreCamelContextEvents). }
false;public,static;2;5;;public static boolean notifyCamelContextResumeFailed(CamelContext context, Throwable cause) {     return doNotify(context, factory -> factory.createCamelContextResumeFailureEvent(context, cause), EventNotifier::isIgnoreCamelContextEvents). }
false;private,static;4;9;;private static boolean doNotifyExchange(CamelContext context, Exchange exchange, Function<EventFactory, CamelEvent> eventSupplier, Predicate<EventNotifier> notifierFilter) {     if (exchange.getProperty(Exchange.NOTIFY_EVENT, false, Boolean.class)) {         // do not generate events for an notify event         return false.     }     return doNotify(context, eventSupplier, notifierFilter.or(EventNotifier::isIgnoreExchangeEvents)). }
false;private,static;3;38;;private static boolean doNotify(CamelContext context, Function<EventFactory, CamelEvent> eventSupplier, Predicate<EventNotifier> notifierFilter) {     ManagementStrategy management = context.getManagementStrategy().     if (management == null) {         return false.     }     EventFactory factory = management.getEventFactory().     if (factory == null) {         return false.     }     List<EventNotifier> notifiers = management.getEventNotifiers().     if (notifiers == null || notifiers.isEmpty()) {         return false.     }     boolean answer = false.     CamelEvent event = null.     for (EventNotifier notifier : notifiers) {         if (notifier.isDisabled()) {             continue.         }         if (notifierFilter.test(notifier)) {             continue.         }         if (event == null) {             // only create event once             event = eventSupplier.apply(factory).             if (event == null) {                 // factory could not create event so exit                 return false.             }         }         answer |= doNotifyEvent(notifier, event).     }     return answer. }
false;private,static;2;20;;private static boolean doNotifyEvent(EventNotifier notifier, CamelEvent event) {     // only notify if notifier is started     if (!ServiceHelper.isStarted(notifier)) {         LOG.debug("Ignoring notifying event {}. The EventNotifier has not been started yet: {}", event, notifier).         return false.     }     if (!notifier.isEnabled(event)) {         LOG.trace("Notifier: {} is not enabled for the event: {}", notifier, event).         return false.     }     try {         notifier.notify(event).     } catch (Throwable e) {         LOG.warn("Error notifying event " + event + ". This exception will be ignored. ", e).     }     return true. }
