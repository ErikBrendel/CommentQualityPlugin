commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// ********************************** // Accessors // ********************************** public ResultErrorBuilder code(VerificationError.Code code) {     this.code = code.     return this. }
false;public;1;4;;public ResultErrorBuilder code(String code) {     code(VerificationError.asCode(code)).     return this. }
false;public;1;4;;public ResultErrorBuilder description(String description) {     this.description = description.     return this. }
false;public;1;10;;public ResultErrorBuilder parameterKey(String parameter) {     if (parameter != null) {         if (this.parameters == null) {             this.parameters = new HashSet<>().         }         this.parameters.add(parameter).     }     return this. }
false;public;1;7;;public ResultErrorBuilder parameterKeys(Collection<String> parameterList) {     if (parameterList != null) {         parameterList.forEach(this::parameterKey).     }     return this. }
false;public;2;4;;public ResultErrorBuilder detail(String key, Object value) {     detail(VerificationError.asAttribute(key), value).     return this. }
false;public;2;10;;public ResultErrorBuilder detail(VerificationError.Attribute key, Object value) {     if (value != null) {         if (this.attributes == null) {             this.attributes = new HashMap<>().         }         this.attributes.put(key, value).     }     return this. }
false;public;2;4;;public <T> ResultErrorBuilder detail(String key, Supplier<Optional<T>> supplier) {     detail(VerificationError.asAttribute(key), supplier).     return this. }
false;public;2;4;;public <T> ResultErrorBuilder detail(VerificationError.Attribute key, Supplier<Optional<T>> supplier) {     supplier.get().ifPresent(value -> detail(key, value)).     return this. }
false;public;1;7;;public ResultErrorBuilder details(Map<VerificationError.Attribute, Object> details) {     for (Map.Entry<VerificationError.Attribute, Object> entry : details.entrySet()) {         detail(entry.getKey(), entry.getValue()).     }     return this. }
false;public;0;8;;// ********************************** // Build // ********************************** public VerificationError build() {     return new DefaultResultVerificationError(code, description, parameters != null ? Collections.unmodifiableSet(parameters) : Collections.emptySet(), attributes != null ? Collections.unmodifiableMap(attributes) : Collections.emptyMap()). }
false;public,static;1;7;;// ********************************** // Helpers // ********************************** public static ResultErrorBuilder fromError(VerificationError error) {     return new ResultErrorBuilder().code(error.getCode()).description(error.getDescription()).parameterKeys(error.getParameterKeys()).details(error.getDetails()). }
false;public,static;1;3;;public static ResultErrorBuilder withCode(VerificationError.Code code) {     return new ResultErrorBuilder().code(code). }
false;public,static;1;3;;public static ResultErrorBuilder withCode(String code) {     return new ResultErrorBuilder().code(code). }
false;public,static;1;4;;public static ResultErrorBuilder withHttpCode(int code) {     return withCode(convertHttpCodeToErrorCode(code)).detail(VerificationError.HttpAttribute.HTTP_CODE, code). }
false;public,static;2;5;;public static ResultErrorBuilder withHttpCodeAndText(int code, String text) {     return withCodeAndDescription(convertHttpCodeToErrorCode(code), text).detail(VerificationError.HttpAttribute.HTTP_CODE, code).detail(VerificationError.HttpAttribute.HTTP_TEXT, text). }
false;private,static;1;3;;private static VerificationError.StandardCode convertHttpCodeToErrorCode(int code) {     return code >= 400 && code < 500 ? VerificationError.StandardCode.AUTHENTICATION : VerificationError.StandardCode.GENERIC. }
false;public,static;2;3;;public static ResultErrorBuilder withCodeAndDescription(VerificationError.Code code, String description) {     return new ResultErrorBuilder().code(code).description(description). }
false;public,static;1;5;;public static ResultErrorBuilder withUnsupportedScope(String scope) {     return new ResultErrorBuilder().code(VerificationError.StandardCode.UNSUPPORTED_SCOPE).description("Unsupported scope: " + scope). }
false;public,static;1;5;;public static ResultErrorBuilder withUnsupportedComponent(String component) {     return new ResultErrorBuilder().code(VerificationError.StandardCode.UNSUPPORTED_COMPONENT).description("Unsupported component: " + component). }
false;public,static;1;7;;public static ResultErrorBuilder withException(Exception exception) {     return new ResultErrorBuilder().code(VerificationError.StandardCode.EXCEPTION).description(exception.getMessage()).detail(VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE, exception).detail(VerificationError.ExceptionAttribute.EXCEPTION_CLASS, exception.getClass().getName()). }
false;public,static;1;6;;public static ResultErrorBuilder withMissingOption(String optionName) {     return new ResultErrorBuilder().code(VerificationError.StandardCode.MISSING_PARAMETER).description(optionName + " should be set").parameterKey(optionName). }
false;public,static;1;6;;public static ResultErrorBuilder withUnknownOption(String optionName) {     return new ResultErrorBuilder().code(VerificationError.StandardCode.UNKNOWN_PARAMETER).description("Unknown option " + optionName).parameterKey(optionName). }
false;public,static;1;6;;public static ResultErrorBuilder withIllegalOption(String optionName) {     return new ResultErrorBuilder().code(VerificationError.StandardCode.ILLEGAL_PARAMETER).description("Illegal option " + optionName).parameterKey(optionName). }
false;public,static;2;8;;public static ResultErrorBuilder withIllegalOption(String optionName, String optionValue) {     return ObjectHelper.isNotEmpty(optionValue) ? new ResultErrorBuilder().code(VerificationError.StandardCode.ILLEGAL_PARAMETER_VALUE).description(optionName + " has wrong value (" + optionValue + ")").parameterKey(optionName) : withIllegalOption(optionName). }
