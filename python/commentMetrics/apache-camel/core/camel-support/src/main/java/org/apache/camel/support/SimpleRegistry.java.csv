commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public Object lookupByName(String name) {     return get(name). }
false;public;2;17;;@Override public <T> T lookupByNameAndType(String name, Class<T> type) {     Object answer = lookupByName(name).     // just to be safe     if (answer == null) {         return null.     }     try {         return type.cast(answer).     } catch (Throwable e) {         String msg = "Found bean: " + name + " in SimpleRegistry: " + this + " of type: " + answer.getClass().getName() + " expected type was: " + type.         throw new NoSuchBeanException(name, msg, e).     } }
false;public;1;10;;@Override public <T> Map<String, T> findByTypeWithName(Class<T> type) {     Map<String, T> result = new HashMap<>().     for (Map.Entry<String, Object> entry : entrySet()) {         if (type.isInstance(entry.getValue())) {             result.put(entry.getKey(), type.cast(entry.getValue())).         }     }     return result. }
false;public;1;10;;@Override public <T> Set<T> findByType(Class<T> type) {     Set<T> result = new HashSet<>().     for (Map.Entry<String, Object> entry : entrySet()) {         if (type.isInstance(entry.getValue())) {             result.add(type.cast(entry.getValue())).         }     }     return result. }
false;public;2;4;;@Override public void bind(String id, Object bean) {     put(id, bean). }
