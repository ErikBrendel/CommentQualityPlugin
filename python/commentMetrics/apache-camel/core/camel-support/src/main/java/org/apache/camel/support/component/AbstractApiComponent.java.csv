commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;41;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     // split remaining path to get API name and method     final String[] pathElements = remaining.split("/").     String apiNameStr.     String methodName.     switch(pathElements.length) {         case 1:             apiNameStr = "".             methodName = pathElements[0].             break.         case 2:             apiNameStr = pathElements[0].             methodName = pathElements[1].             break.         default:             throw new CamelException("Invalid URI path [" + remaining + "], must be of the format " + collection.getApiNames() + "/<operation-name>").     }     try {         // get API enum from apiName string         final E apiName = getApiName(apiNameStr).         final T endpointConfiguration = createEndpointConfiguration(apiName).         final Endpoint endpoint = createEndpoint(uri, methodName, apiName, endpointConfiguration).         // set endpoint property inBody         setProperties(endpoint, parameters).         // configure endpoint properties and initialize state         endpoint.configureProperties(parameters).         return endpoint.     } catch (InvocationTargetException e) {         if (e.getCause() instanceof IllegalArgumentException) {             throw new CamelException("Invalid URI path prefix [" + remaining + "], must be one of " + collection.getApiNames()).         }         throw e.     } }
false;protected,abstract;1;1;;protected abstract E getApiName(String apiNameStr) throws IllegalArgumentException.
false;protected,abstract;4;1;;protected abstract Endpoint createEndpoint(String uri, String methodName, E apiName, T endpointConfiguration).
false;protected;1;12;;protected T createEndpointConfiguration(E name) throws Exception {     final Map<String, Object> componentProperties = new HashMap<>().     // copy component configuration, if set     if (configuration != null) {         IntrospectionSupport.getProperties(configuration, componentProperties, null, false).     }     // create endpoint configuration with component properties     final T endpointConfiguration = collection.getEndpointConfiguration(name).     IntrospectionSupport.setProperties(endpointConfiguration, componentProperties).     return endpointConfiguration. }
false;public;0;3;;public T getConfiguration() {     return configuration. }
false;public;1;3;;public void setConfiguration(T configuration) {     this.configuration = configuration. }
