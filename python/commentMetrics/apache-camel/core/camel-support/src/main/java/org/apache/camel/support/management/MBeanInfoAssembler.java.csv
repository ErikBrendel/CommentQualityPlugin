commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override @SuppressWarnings("unchecked") public void start() throws Exception {     cache = LRUCacheFactory.newLRUWeakCache(1000). }
false;public;0;10;;@Override public void stop() throws Exception {     if (cache != null) {         if (LOG.isDebugEnabled() && cache instanceof LRUCache) {             LRUCache cache = (LRUCache) this.cache.             LOG.debug("Clearing cache[size={}, hits={}, misses={}, evicted={}]", cache.size(), cache.getHits(), cache.getMisses(), cache.getEvicted()).         }         cache.clear().     } }
true;public;3;41;/**  * Gets the {@link ModelMBeanInfo} for the given managed bean  *  * @param defaultManagedBean  the default managed bean  * @param customManagedBean   an optional custom managed bean  * @param objectName   the object name  * @return the model info, or <tt>null</tt> if not possible to create, for example due the managed bean is a proxy class  * @throws JMException is thrown if error creating the model info  */ ;/**  * Gets the {@link ModelMBeanInfo} for the given managed bean  *  * @param defaultManagedBean  the default managed bean  * @param customManagedBean   an optional custom managed bean  * @param objectName   the object name  * @return the model info, or <tt>null</tt> if not possible to create, for example due the managed bean is a proxy class  * @throws JMException is thrown if error creating the model info  */ public ModelMBeanInfo getMBeanInfo(Object defaultManagedBean, Object customManagedBean, String objectName) throws JMException {     // skip proxy classes     if (defaultManagedBean != null && Proxy.isProxyClass(defaultManagedBean.getClass())) {         LOG.trace("Skip creating ModelMBeanInfo due proxy class {}", defaultManagedBean.getClass()).         return null.     }     // maps and lists to contain information about attributes and operations     Map<String, ManagedAttributeInfo> attributes = new LinkedHashMap<>().     Set<ManagedOperationInfo> operations = new LinkedHashSet<>().     Set<ModelMBeanAttributeInfo> mBeanAttributes = new LinkedHashSet<>().     Set<ModelMBeanOperationInfo> mBeanOperations = new LinkedHashSet<>().     Set<ModelMBeanNotificationInfo> mBeanNotifications = new LinkedHashSet<>().     // extract details from default managed bean     if (defaultManagedBean != null) {         extractAttributesAndOperations(defaultManagedBean.getClass(), attributes, operations).         extractMbeanAttributes(defaultManagedBean, attributes, mBeanAttributes, mBeanOperations).         extractMbeanOperations(defaultManagedBean, operations, mBeanOperations).         extractMbeanNotifications(defaultManagedBean, mBeanNotifications).     }     // extract details from custom managed bean     if (customManagedBean != null) {         extractAttributesAndOperations(customManagedBean.getClass(), attributes, operations).         extractMbeanAttributes(customManagedBean, attributes, mBeanAttributes, mBeanOperations).         extractMbeanOperations(customManagedBean, operations, mBeanOperations).         extractMbeanNotifications(customManagedBean, mBeanNotifications).     }     // create the ModelMBeanInfo     String name = getName(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName).     String description = getDescription(customManagedBean != null ? customManagedBean : defaultManagedBean, objectName).     ModelMBeanAttributeInfo[] arrayAttributes = mBeanAttributes.toArray(new ModelMBeanAttributeInfo[mBeanAttributes.size()]).     ModelMBeanOperationInfo[] arrayOperations = mBeanOperations.toArray(new ModelMBeanOperationInfo[mBeanOperations.size()]).     ModelMBeanNotificationInfo[] arrayNotifications = mBeanNotifications.toArray(new ModelMBeanNotificationInfo[mBeanNotifications.size()]).     ModelMBeanInfo info = new ModelMBeanInfoSupport(name, description, arrayAttributes, null, arrayOperations, arrayNotifications).     LOG.trace("Created ModelMBeanInfo {}", info).     return info. }
false;private;3;19;;private void extractAttributesAndOperations(Class<?> managedClass, Map<String, ManagedAttributeInfo> attributes, Set<ManagedOperationInfo> operations) {     MBeanAttributesAndOperations cached = cache.get(managedClass).     if (cached == null) {         doExtractAttributesAndOperations(managedClass, attributes, operations).         cached = new MBeanAttributesAndOperations().         cached.attributes = new LinkedHashMap<>(attributes).         cached.operations = new LinkedHashSet<>(operations).         // clear before we re-add them         attributes.clear().         operations.clear().         // add to cache         cache.put(managedClass, cached).     }     attributes.putAll(cached.attributes).     operations.addAll(cached.operations). }
false;private;3;27;;private void doExtractAttributesAndOperations(Class<?> managedClass, Map<String, ManagedAttributeInfo> attributes, Set<ManagedOperationInfo> operations) {     // extract the class     doDoExtractAttributesAndOperations(managedClass, attributes, operations).     // and then any sub classes     if (managedClass.getSuperclass() != null) {         Class<?> clazz = managedClass.getSuperclass().         // skip any JDK classes         if (!clazz.getName().startsWith("java")) {             LOG.trace("Extracting attributes and operations from sub class: {}", clazz).             doExtractAttributesAndOperations(clazz, attributes, operations).         }     }     // and then any additional interfaces (as interfaces can be annotated as well)     if (managedClass.getInterfaces() != null) {         for (Class<?> clazz : managedClass.getInterfaces()) {             // recursive as there may be multiple interfaces             if (clazz.getName().startsWith("java")) {                 // skip any JDK classes                 continue.             }             LOG.trace("Extracting attributes and operations from implemented interface: {}", clazz).             doExtractAttributesAndOperations(clazz, attributes, operations).         }     } }
false;private;3;60;;private void doDoExtractAttributesAndOperations(Class<?> managedClass, Map<String, ManagedAttributeInfo> attributes, Set<ManagedOperationInfo> operations) {     LOG.trace("Extracting attributes and operations from class: {}", managedClass).     // introspect the class, and leverage the cache to have better performance     IntrospectionSupport.ClassInfo cache = IntrospectionSupport.cacheClass(managedClass).     for (IntrospectionSupport.MethodInfo cacheInfo : cache.methods) {         // must be from declaring class         if (cacheInfo.method.getDeclaringClass() != managedClass) {             continue.         }         LOG.trace("Extracting attributes and operations from method: {}", cacheInfo.method).         ManagedAttribute ma = cacheInfo.method.getAnnotation(ManagedAttribute.class).         if (ma != null) {             String key.             String desc = ma.description().             Method getter = null.             Method setter = null.             boolean mask = ma.mask().             if (cacheInfo.isGetter) {                 key = cacheInfo.getterOrSetterShorthandName.                 getter = cacheInfo.method.             } else if (cacheInfo.isSetter) {                 key = cacheInfo.getterOrSetterShorthandName.                 setter = cacheInfo.method.             } else {                 throw new IllegalArgumentException("@ManagedAttribute can only be used on Java bean methods, was: " + cacheInfo.method + " on bean: " + managedClass).             }             // they key must be capitalized             key = StringHelper.capitalize(key).             // lookup first             ManagedAttributeInfo info = attributes.get(key).             if (info == null) {                 info = new ManagedAttributeInfo(key, desc).             }             if (getter != null) {                 info.setGetter(getter).             }             if (setter != null) {                 info.setSetter(setter).             }             info.setMask(mask).             attributes.put(key, info).         }         // operations         ManagedOperation mo = cacheInfo.method.getAnnotation(ManagedOperation.class).         if (mo != null) {             String desc = mo.description().             Method operation = cacheInfo.method.             boolean mask = mo.mask().             operations.add(new ManagedOperationInfo(desc, operation, mask)).         }     } }
false;private;4;31;;private void extractMbeanAttributes(Object managedBean, Map<String, ManagedAttributeInfo> attributes, Set<ModelMBeanAttributeInfo> mBeanAttributes, Set<ModelMBeanOperationInfo> mBeanOperations) throws IntrospectionException {     for (ManagedAttributeInfo info : attributes.values()) {         ModelMBeanAttributeInfo mbeanAttribute = new ModelMBeanAttributeInfo(info.getKey(), info.getDescription(), info.getGetter(), info.getSetter()).         // add missing attribute descriptors, this is needed to have attributes accessible         Descriptor desc = mbeanAttribute.getDescriptor().         desc.setField("mask", info.isMask() ? "true" : "false").         if (info.getGetter() != null) {             desc.setField("getMethod", info.getGetter().getName()).             // attribute must also be added as mbean operation             ModelMBeanOperationInfo mbeanOperation = new ModelMBeanOperationInfo(info.getKey(), info.getGetter()).             Descriptor opDesc = mbeanOperation.getDescriptor().             opDesc.setField("mask", info.isMask() ? "true" : "false").             mbeanOperation.setDescriptor(opDesc).             mBeanOperations.add(mbeanOperation).         }         if (info.getSetter() != null) {             desc.setField("setMethod", info.getSetter().getName()).             // attribute must also be added as mbean operation             ModelMBeanOperationInfo mbeanOperation = new ModelMBeanOperationInfo(info.getKey(), info.getSetter()).             mBeanOperations.add(mbeanOperation).         }         mbeanAttribute.setDescriptor(desc).         mBeanAttributes.add(mbeanAttribute).         LOG.trace("Assembled attribute: {}", mbeanAttribute).     } }
false;private;3;10;;private void extractMbeanOperations(Object managedBean, Set<ManagedOperationInfo> operations, Set<ModelMBeanOperationInfo> mBeanOperations) {     for (ManagedOperationInfo info : operations) {         ModelMBeanOperationInfo mbean = new ModelMBeanOperationInfo(info.getDescription(), info.getOperation()).         Descriptor opDesc = mbean.getDescriptor().         opDesc.setField("mask", info.isMask() ? "true" : "false").         mbean.setDescriptor(opDesc).         mBeanOperations.add(mbean).         LOG.trace("Assembled operation: {}", mbean).     } }
false;private;2;10;;private void extractMbeanNotifications(Object managedBean, Set<ModelMBeanNotificationInfo> mBeanNotifications) {     ManagedNotifications notifications = managedBean.getClass().getAnnotation(ManagedNotifications.class).     if (notifications != null) {         for (ManagedNotification notification : notifications.value()) {             ModelMBeanNotificationInfo info = new ModelMBeanNotificationInfo(notification.notificationTypes(), notification.name(), notification.description()).             mBeanNotifications.add(info).             LOG.trace("Assembled notification: {}", info).         }     } }
false;private;2;4;;private String getDescription(Object managedBean, String objectName) {     ManagedResource mr = ObjectHelper.getAnnotation(managedBean, ManagedResource.class).     return mr != null ? mr.description() : "". }
false;private;2;3;;private String getName(Object managedBean, String objectName) {     return managedBean.getClass().getName(). }
false;public;0;3;;public String getKey() {     return key. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public Method getGetter() {     return getter. }
false;public;1;3;;public void setGetter(Method getter) {     this.getter = getter. }
false;public;0;3;;public Method getSetter() {     return setter. }
false;public;1;3;;public void setSetter(Method setter) {     this.setter = setter. }
false;public;0;3;;public boolean isMask() {     return mask. }
false;public;1;3;;public void setMask(boolean mask) {     this.mask = mask. }
false;public;0;4;;@Override public String toString() {     return "ManagedAttributeInfo: [" + key + " + getter: " + getter + ", setter: " + setter + "]". }
false;public;0;3;;public String getDescription() {     return description. }
false;public;0;3;;public Method getOperation() {     return operation. }
false;public;0;3;;public boolean isMask() {     return mask. }
false;public;0;4;;@Override public String toString() {     return "ManagedOperationInfo: [" + operation + "]". }
