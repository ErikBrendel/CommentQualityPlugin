commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
true;protected;1;15;/**  * Loads the resource if the given expression is referring to an external resource by using  * the syntax <tt>resource:scheme:uri<tt>.  * If the expression is not referring to a resource, then its returned as is.  * <p/>  * For example <tt>resource:classpath:mygroovy.groovy</tt> to refer to a groovy script on the classpath.  *  * @param expression the expression  * @return the expression  * @throws ExpressionIllegalSyntaxException is thrown if error loading the resource  */ ;/**  * Loads the resource if the given expression is referring to an external resource by using  * the syntax <tt>resource:scheme:uri<tt>.  * If the expression is not referring to a resource, then its returned as is.  * <p/>  * For example <tt>resource:classpath:mygroovy.groovy</tt> to refer to a groovy script on the classpath.  *  * @param expression the expression  * @return the expression  * @throws ExpressionIllegalSyntaxException is thrown if error loading the resource  */ protected String loadResource(String expression) throws ExpressionIllegalSyntaxException {     if (camelContext != null && expression.startsWith(RESOURCE)) {         String uri = expression.substring(RESOURCE.length()).         InputStream is = null.         try {             is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, uri).             expression = camelContext.getTypeConverter().mandatoryConvertTo(String.class, is).         } catch (Exception e) {             throw new ExpressionIllegalSyntaxException(expression, e).         } finally {             IOHelper.close(is).         }     }     return expression. }
