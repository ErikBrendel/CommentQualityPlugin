commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static Optional<CamelClusterService> lookupService(CamelContext context) {     return lookupService(context, ClusterServiceSelectors.DEFAULT_SELECTOR). }
false;public,static;2;12;;public static Optional<CamelClusterService> lookupService(CamelContext context, CamelClusterService.Selector selector) {     ObjectHelper.notNull(context, "Camel Context").     ObjectHelper.notNull(selector, "ClusterService selector").     Set<CamelClusterService> services = context.hasServices(CamelClusterService.class).     if (ObjectHelper.isNotEmpty(services)) {         return selector.select(services).     }     return Optional.empty(). }
false;public,static;1;3;;public static CamelClusterService mandatoryLookupService(CamelContext context) {     return lookupService(context).orElseThrow(() -> new IllegalStateException("CamelCluster service not found")). }
false;public,static;2;3;;public static CamelClusterService mandatoryLookupService(CamelContext context, CamelClusterService.Selector selector) {     return lookupService(context, selector).orElseThrow(() -> new IllegalStateException("CamelCluster service not found")). }
