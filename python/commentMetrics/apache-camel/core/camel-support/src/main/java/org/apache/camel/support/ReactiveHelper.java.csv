commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static void scheduleMain(Runnable runnable) {     WORKERS.get().schedule(runnable, true, true, false). }
false;public,static;1;3;;public static void scheduleSync(Runnable runnable) {     WORKERS.get().schedule(runnable, true, true, true). }
false;public,static;2;3;;public static void scheduleMain(Runnable runnable, String description) {     WORKERS.get().schedule(describe(runnable, description), true, true, false). }
false;public,static;1;3;;public static void schedule(Runnable runnable) {     WORKERS.get().schedule(runnable, true, false, false). }
false;public,static;2;3;;public static void schedule(Runnable runnable, String description) {     WORKERS.get().schedule(describe(runnable, description), true, false, false). }
false;public,static;2;3;;public static void scheduleLast(Runnable runnable, String description) {     WORKERS.get().schedule(describe(runnable, description), false, false, false). }
false;public,static;2;3;;public static void scheduleSync(Runnable runnable, String description) {     WORKERS.get().schedule(describe(runnable, description), false, true, true). }
false;public,static;0;3;;public static boolean executeFromQueue() {     return WORKERS.get().executeFromQueue(). }
false;public;0;4;;@Override public void run() {     callback.done(false). }
false;public;0;4;;@Override public String toString() {     return "Callback[" + callback + "]". }
false;public,static;1;12;;public static void callback(AsyncCallback callback) {     schedule(new Runnable() {          @Override         public void run() {             callback.done(false).         }          @Override         public String toString() {             return "Callback[" + callback + "]".         }     }). }
false;public;0;4;;@Override public void run() {     runnable.run(). }
false;public;0;4;;@Override public String toString() {     return description. }
false;private,static;2;12;;private static Runnable describe(Runnable runnable, String description) {     return new Runnable() {          @Override         public void run() {             runnable.run().         }          @Override         public String toString() {             return description.         }     }. }
false;public;4;45;;public void schedule(Runnable runnable, boolean first, boolean main, boolean sync) {     if (main) {         if (!queue.isEmpty()) {             if (back == null) {                 back = new LinkedList<>().             }             back.push(queue).             queue = new LinkedList<>().         }     }     if (first) {         queue.addFirst(runnable).     } else {         queue.addLast(runnable).     }     if (!running || sync) {         running = true.         // String name = thread.getName().         try {             for (. . ) {                 final Runnable polled = queue.poll().                 if (polled == null) {                     if (back != null && !back.isEmpty()) {                         queue = back.poll().                         continue.                     } else {                         break.                     }                 }                 try {                     // thread.setName(name + " - " + polled.toString()).                     polled.run().                 } catch (Throwable t) {                     t.printStackTrace().                 }             }         } finally {             // thread.setName(name).             running = false.         }     } else {         LOG.debug("Queuing reactive work: {}", runnable).     } }
false;public;0;17;;public boolean executeFromQueue() {     final Runnable polled = queue != null ? queue.poll() : null.     if (polled == null) {         return false.     }     Thread thread = Thread.currentThread().     String name = thread.getName().     try {         thread.setName(name + " - " + polled.toString()).         polled.run().     } catch (Throwable t) {         t.printStackTrace().     } finally {         thread.setName(name).     }     return true. }
