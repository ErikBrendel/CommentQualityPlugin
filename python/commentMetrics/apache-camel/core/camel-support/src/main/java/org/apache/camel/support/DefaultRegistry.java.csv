commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
true;public;0;7;/**  * Gets the bean repositories.  *  * @return the bean repositories, or <tt>null</tt> if none are in use.  */ ;/**  * Gets the bean repositories.  *  * @return the bean repositories, or <tt>null</tt> if none are in use.  */ public List<BeanRepository> getRepositories() {     if (repositories == null) {         return null.     } else {         return Collections.unmodifiableList(repositories).     } }
false;public;2;4;;@Override public void bind(String id, Object bean) {     simple.bind(id, bean). }
false;public;1;22;;@Override public Object lookupByName(String name) {     try {         // the properties component or else we end up in an infinite loop.         if (camelContext != null && !name.equals("properties")) {             name = camelContext.resolvePropertyPlaceholders(name).         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     if (repositories != null) {         for (BeanRepository r : repositories) {             Object answer = r.lookupByName(name).             if (answer != null) {                 return answer.             }         }     }     return simple.lookupByName(name). }
false;public;2;22;;@Override public <T> T lookupByNameAndType(String name, Class<T> type) {     try {         // the properties component or else we end up in an infinite loop.         if (camelContext != null && !name.equals("properties")) {             name = camelContext.resolvePropertyPlaceholders(name).         }     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     if (repositories != null) {         for (BeanRepository r : repositories) {             T answer = r.lookupByNameAndType(name, type).             if (answer != null) {                 return answer.             }         }     }     return simple.lookupByNameAndType(name, type). }
false;public;1;12;;@Override public <T> Map<String, T> findByTypeWithName(Class<T> type) {     if (repositories != null) {         for (BeanRepository r : repositories) {             Map<String, T> answer = r.findByTypeWithName(type).             if (answer != null) {                 return answer.             }         }     }     return simple.findByTypeWithName(type). }
false;public;1;12;;@Override public <T> Set<T> findByType(Class<T> type) {     if (repositories != null) {         for (BeanRepository r : repositories) {             Set<T> answer = r.findByType(type).             if (answer != null) {                 return answer.             }         }     }     return simple.findByType(type). }
