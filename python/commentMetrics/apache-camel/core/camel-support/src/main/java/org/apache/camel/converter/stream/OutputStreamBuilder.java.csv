commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a new OutputStreamBuilder with the current exchange  * <p/>  * Use the {@link #build()} when writing to the stream is finished,  * and you need the result of this operation.  *  * @param exchange the current Exchange  * @return the builder  */ ;/**  * Creates a new OutputStreamBuilder with the current exchange  * <p/>  * Use the {@link #build()} when writing to the stream is finished,  * and you need the result of this operation.  *  * @param exchange the current Exchange  * @return the builder  */ public static OutputStreamBuilder withExchange(final Exchange exchange) {     return new OutputStreamBuilder(exchange). }
false;public;3;4;;@Override public void write(final byte[] b, final int off, final int len) throws IOException {     outputStream.write(b, off, len). }
false;public;1;4;;@Override public void write(final byte[] b) throws IOException {     outputStream.write(b). }
false;public;1;4;;@Override public void write(final int b) throws IOException {     outputStream.write(b). }
false;public;0;4;;@Override public void flush() throws IOException {     outputStream.flush(). }
false;public;0;4;;@Override public void close() throws IOException {     outputStream.close(). }
true;public;0;6;/**  * Builds the result of using this builder as either a  * {@link org.apache.camel.converter.stream.CachedOutputStream} if stream caching is enabled,  * otherwise byte[].  */ ;/**  * Builds the result of using this builder as either a  * {@link org.apache.camel.converter.stream.CachedOutputStream} if stream caching is enabled,  * otherwise byte[].  */ public Object build() throws IOException {     if (outputStream instanceof CachedOutputStream) {         return ((CachedOutputStream) outputStream).newStreamCache().     }     return ((ByteArrayOutputStream) outputStream).toByteArray(). }
