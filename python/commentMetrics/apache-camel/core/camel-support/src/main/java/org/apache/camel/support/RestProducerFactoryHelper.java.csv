commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;6;;public static void setupComponentFor(final String url, final CamelContext camelContext, final Map<String, Object> componentProperties) throws Exception {     final String scheme = StringHelper.before(url, ":").     setupComponent(scheme, camelContext, componentProperties). }
false;public,static;3;31;;public static Component setupComponent(final String componentName, final CamelContext camelContext, final Map<String, Object> componentProperties) throws Exception {     if (componentProperties == null || componentProperties.isEmpty()) {         return camelContext.getComponent(componentName).     }     final Component existing = camelContext.getComponent(componentName, false, false).     if (existing != null) {         if (!componentProperties.isEmpty()) {             LOG.warn("Found existing `{}` component already present in the Camel context. Not setting component" + " properties on the existing component. You can either prevent the component creation or" + " set the given properties on the component. Component properties given: {}", componentName, componentProperties).         }         return existing.     }     // component was not added to the context we can configure it     final Component newlyCreated = camelContext.getComponent(componentName, true, false).     // need to make a copy of the component properties as     // IntrospectionSupport::setProperties will remove any that are set and     // we might be called multiple times     final Map<String, Object> copyOfComponentProperties = new HashMap<>(componentProperties).     IntrospectionSupport.setProperties(camelContext, camelContext.getTypeConverter(), newlyCreated, copyOfComponentProperties).     ServiceHelper.startService(newlyCreated).     return newlyCreated. }
