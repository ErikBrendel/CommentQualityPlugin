commented;modifiers;parameterAmount;loc;comment;code
false;public,final;0;3;;public final Map<E, ApiMethodHelper<? extends ApiMethod>> getApiHelpers() {     return apiHelpers. }
false;public,final;0;3;;public final Map<Class<? extends ApiMethod>, E> getApiMethods() {     return apiMethods. }
true;public,final;1;3;/**  * Returns a {@link ApiMethodHelper} for a particular API.  * @param apiName name of the API  * @return helper class to work with {@link ApiMethod}  */ ;/**  * Returns a {@link ApiMethodHelper} for a particular API.  * @param apiName name of the API  * @return helper class to work with {@link ApiMethod}  */ public final ApiMethodHelper<? extends ApiMethod> getHelper(E apiName) {     return apiHelpers.get(apiName). }
true;public,final;0;3;/**  * Returns a list of API name strings.  * @return list of API names.  */ ;/**  * Returns a list of API name strings.  * @return list of API names.  */ public final Set<String> getApiNames() {     return apiNames. }
false;public,final;1;3;;public final E getApiName(Class<? extends ApiMethod> apiMethod) {     return apiMethods.get(apiMethod). }
true;public,abstract;1;1;/**  * Creates an endpoint configuration for a particular API  * @param apiName name of the API.  * @return Endpoint configuration object for the API.  */ ;/**  * Creates an endpoint configuration for a particular API  * @param apiName name of the API.  * @return Endpoint configuration object for the API.  */ public abstract T getEndpointConfiguration(E apiName).
false;protected,final;1;10;;protected final void setApiHelpers(Map<E, ApiMethodHelper<? extends ApiMethod>> apiHelpers) {     this.apiHelpers = Collections.unmodifiableMap(apiHelpers).     this.apiNames = Collections.unmodifiableSet(apiHelpers.keySet().stream().map(api -> api.getName()).collect(Collectors.toSet())). }
false;protected,final;1;3;;protected final void setApiMethods(Map<Class<? extends ApiMethod>, E> apiMethods) {     this.apiMethods = Collections.unmodifiableMap(apiMethods). }
