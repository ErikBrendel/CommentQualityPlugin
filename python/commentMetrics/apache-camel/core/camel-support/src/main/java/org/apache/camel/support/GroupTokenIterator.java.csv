commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void close() throws IOException {     try {         IOHelper.closeIterator(it).     } finally {         // close the buffer as well         bos.close().         // we are now closed         closed = true.     } }
false;public;0;17;;@Override public boolean hasNext() {     if (closed) {         return false.     }     boolean answer = it.hasNext().     if (!answer) {         // auto close         try {             close().         } catch (IOException e) {         // ignore         }     }     return answer. }
false;public;0;8;;@Override public Object next() {     try {         return doNext().     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;private;0;39;;private Object doNext() throws IOException, NoTypeConversionAvailableException {     int count = 0.     Object data = "".     while (count < group && it.hasNext()) {         data = it.next().         if (skipFirst && hasSkipFirst.compareAndSet(false, true)) {             if (it.hasNext()) {                 data = it.next().             } else {                 // Content with header only which is marked to skip                 data = "".             }         }         // include token in between         if (data != null && count > 0 && token != null) {             bos.write(token.getBytes()).         }         if (data instanceof InputStream) {             InputStream is = (InputStream) data.             IOHelper.copy(is, bos).         } else if (data instanceof byte[]) {             byte[] bytes = (byte[]) data.             bos.write(bytes).         } else if (data != null) {             // convert to input stream             InputStream is = camelContext.getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, data).             IOHelper.copy(is, bos).         }         count++.     }     // prepare and return answer as String using exchange's charset     String answer = bos.toString(ExchangeHelper.getCharsetName(exchange)).     bos.reset().     return answer. }
false;public;0;4;;@Override public void remove() {     it.remove(). }
