commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isMask() {     return mask. }
false;public;3;14;;@Override public Object invoke(String opName, Object[] opArgs, String[] sig) throws MBeanException, ReflectionException {     Object answer.     if (defaultMbi != null && defaultObject != null && isDefaultOperation(opName)) {         answer = defaultObject.invoke(opName, opArgs, sig).     } else {         answer = super.invoke(opName, opArgs, sig).     }     // mask the answer if enabled and it was a String type (we cannot mask other types)     if (mask && answer instanceof String && ObjectHelper.isNotEmpty(answer) && isMaskOperation(opName)) {         answer = mask(opName, (String) answer).     }     return answer. }
false;protected;1;8;;protected boolean isDefaultOperation(String opName) {     for (MBeanOperationInfo info : defaultMbi.getOperations()) {         if (info.getName().equals(opName)) {             return true.         }     }     return false. }
false;protected;1;12;;protected boolean isMaskOperation(String opName) {     for (MBeanOperationInfo info : getMBeanInfo().getOperations()) {         if (info.getName().equals(opName)) {             Descriptor desc = info.getDescriptor().             if (desc != null) {                 Object val = desc.getFieldValue("mask").                 return val != null && "true".equals(val).             }         }     }     return false. }
true;protected;2;9;/**  * Masks the returned value from invoking the operation  *  * @param opName  the operation name invoked  * @param value   the current value  * @return the masked value  */ ;/**  * Masks the returned value from invoking the operation  *  * @param opName  the operation name invoked  * @param value   the current value  * @return the masked value  */ protected String mask(String opName, String value) {     // use sanitize uri which will mask sensitive information     String answer = URISupport.sanitizeUri(value).     if (LOG.isTraceEnabled()) {         LOG.trace("Masking JMX operation: {}.{} value: {} -> {}", new Object[] { getMBeanInfo().getClassName(), opName, value, answer }).     }     return answer. }
