commented;modifiers;parameterAmount;loc;comment;code
false;public;2;17;;public boolean process(Exchange exchange, AsyncCallback callback) {     if (processor == null) {         // no processor then we are done         callback.done(true).         return true.     }     try {         processor.process(exchange).     } catch (Throwable e) {         // must catch throwable so we catch all         exchange.setException(e).     } finally {         // we are bridging a sync processor as async so callback with true         callback.done(true).     }     return true. }
false;public;1;6;;@Override public CompletableFuture<Exchange> processAsync(Exchange exchange) {     AsyncCallbackToCompletableFutureAdapter<Exchange> callback = new AsyncCallbackToCompletableFutureAdapter<>(exchange).     process(exchange, callback).     return callback.getFuture(). }
false;public;0;8;;@Override public String toString() {     if (processor != null) {         return processor.toString().     } else {         return "Processor is null".     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     processNext(exchange). }
false;protected;1;5;;protected void processNext(Exchange exchange) throws Exception {     if (processor != null) {         processor.process(exchange).     } }
false;public;0;3;;public void start() throws Exception {     ServiceHelper.startService(processor). }
false;public;0;3;;public void stop() throws Exception {     ServiceHelper.stopService(processor). }
false;public;0;3;;public boolean hasNext() {     return processor != null. }
false;public;0;8;;public List<Processor> next() {     if (!hasNext()) {         return null.     }     List<Processor> answer = new ArrayList<>(1).     answer.add(processor).     return answer. }
false;public;0;4;;@Override public Processor getProcessor() {     return processor. }
false;public;1;16;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     if (processor == null) {         return false.     }     ProcessorToAsyncProcessorBridge that = (ProcessorToAsyncProcessorBridge) o.     return processor.equals(that.processor). }
false;public;0;8;;@Override public int hashCode() {     if (processor != null) {         return processor.hashCode().     } else {         return 0.     } }
false;protected;0;3;;protected Producer producer() {     return (Producer) processor. }
false;public;0;4;;@Override public Endpoint getEndpoint() {     return producer().getEndpoint(). }
false;public;0;4;;@Override public boolean isSingleton() {     return producer().isSingleton(). }
false;public,static;1;6;;public static AsyncProducer convert(Producer value) {     if (value instanceof AsyncProducer) {         return (AsyncProducer) value.     }     return new ProducerToAsyncProducerBridge(value). }
false;public,static;1;6;;public static AsyncProcessor convert(Processor value) {     if (value instanceof AsyncProcessor) {         return (AsyncProcessor) value.     }     return new ProcessorToAsyncProcessorBridge(value). }
