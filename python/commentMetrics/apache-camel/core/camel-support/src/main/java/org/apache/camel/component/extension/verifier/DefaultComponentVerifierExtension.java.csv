commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// ************************************* //  // ************************************* @Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;0;4;;@Override public Component getComponent() {     return component. }
false;public;1;4;;@Override public void setComponent(Component component) {     this.component = component. }
false;public;2;18;;@Override public Result verify(Scope scope, Map<String, Object> parameters) {     // Camel context is mandatory     if (this.camelContext == null) {         return ResultBuilder.withStatusAndScope(Result.Status.ERROR, scope).error(ResultErrorBuilder.withCodeAndDescription(VerificationError.StandardCode.INTERNAL, "Missing camel-context").build()).build().     }     if (scope == Scope.PARAMETERS) {         return verifyParameters(parameters).     }     if (scope == Scope.CONNECTIVITY) {         return verifyConnectivity(parameters).     }     return ResultBuilder.unsupportedScope(scope).build(). }
false;protected;1;3;;protected Result verifyConnectivity(Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(Result.Status.UNSUPPORTED, Scope.CONNECTIVITY).build(). }
false;protected;1;8;;protected Result verifyParameters(Map<String, Object> parameters) {     ResultBuilder builder = ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).     // Validate against catalog     verifyParametersAgainstCatalog(builder, parameters).     return builder.build(). }
false;protected;2;3;;// ************************************* // Helpers :: Parameters validation // ************************************* protected void verifyParametersAgainstCatalog(ResultBuilder builder, Map<String, Object> parameters) {     verifyParametersAgainstCatalog(builder, parameters, new CatalogVerifierCustomizer()). }
false;protected;3;58;;protected void verifyParametersAgainstCatalog(ResultBuilder builder, Map<String, Object> parameters, CatalogVerifierCustomizer customizer) {     String scheme = defaultScheme.     if (parameters.containsKey("scheme")) {         scheme = parameters.get("scheme").toString().     }     // Grab the runtime catalog to check parameters     RuntimeCamelCatalog catalog = camelContext.getExtension(RuntimeCamelCatalog.class).     // Convert from Map<String, Object> to  Map<String, String> as required     // by the Camel Catalog     EndpointValidationResult result = catalog.validateProperties(scheme, parameters.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey, e -> camelContext.getTypeConverter().convertTo(String.class, e.getValue())))).     if (!result.isSuccess()) {         if (customizer.isIncludeUnknown()) {             stream(result.getUnknown()).map(option -> ResultErrorBuilder.withUnknownOption(option).build()).forEach(builder::error).         }         if (customizer.isIncludeRequired()) {             stream(result.getRequired()).map(option -> ResultErrorBuilder.withMissingOption(option).build()).forEach(builder::error).         }         if (customizer.isIncludeInvalidBoolean()) {             stream(result.getInvalidBoolean()).map(entry -> ResultErrorBuilder.withIllegalOption(entry.getKey(), entry.getValue()).build()).forEach(builder::error).         }         if (customizer.isIncludeInvalidInteger()) {             stream(result.getInvalidInteger()).map(entry -> ResultErrorBuilder.withIllegalOption(entry.getKey(), entry.getValue()).build()).forEach(builder::error).         }         if (customizer.isIncludeInvalidNumber()) {             stream(result.getInvalidNumber()).map(entry -> ResultErrorBuilder.withIllegalOption(entry.getKey(), entry.getValue()).build()).forEach(builder::error).         }         if (customizer.isIncludeInvalidEnum()) {             stream(result.getInvalidEnum()).map(entry -> ResultErrorBuilder.withIllegalOption(entry.getKey(), entry.getValue()).detail("enum.values", result.getEnumChoices(entry.getKey())).build()).forEach(builder::error).         }     } }
false;protected;2;22;;// ************************************* // Helpers // ************************************* protected <T> T setProperties(T instance, Map<String, Object> properties) throws Exception {     if (camelContext == null) {         throw new IllegalStateException("Camel context is null").     }     if (!properties.isEmpty()) {         final TypeConverter converter = camelContext.getTypeConverter().         IntrospectionSupport.setProperties(converter, instance, properties).         for (Map.Entry<String, Object> entry : properties.entrySet()) {             if (entry.getValue() instanceof String) {                 String value = (String) entry.getValue().                 if (EndpointHelper.isReferenceParameter(value)) {                     IntrospectionSupport.setProperty(camelContext, converter, instance, entry.getKey(), null, value, true).                 }             }         }     }     return instance. }
false;protected;3;6;;protected <T> T setProperties(T instance, String prefix, Map<String, Object> properties) throws Exception {     return setProperties(instance, IntrospectionSupport.extractProperties(properties, prefix, false)). }
false;protected;3;8;;protected <T> Optional<T> getOption(Map<String, Object> parameters, String key, Class<T> type) {     Object value = parameters.get(key).     if (value != null) {         return Optional.ofNullable(CamelContextHelper.convertTo(camelContext, type, value)).     }     return Optional.empty(). }
false;protected;4;3;;protected <T> T getOption(Map<String, Object> parameters, String key, Class<T> type, Supplier<T> defaultSupplier) {     return getOption(parameters, key, type).orElseGet(defaultSupplier). }
false;protected;3;3;;protected <T> T getMandatoryOption(Map<String, Object> parameters, String key, Class<T> type) throws NoSuchOptionException {     return getOption(parameters, key, type).orElseThrow(() -> new NoSuchOptionException(key)). }
