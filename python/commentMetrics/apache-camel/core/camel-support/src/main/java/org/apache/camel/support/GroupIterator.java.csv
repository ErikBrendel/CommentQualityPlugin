commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override public void close() throws IOException {     try {         IOHelper.closeIterator(it).     } finally {         // we are now closed         closed = true.     } }
false;public;0;17;;@Override public boolean hasNext() {     if (closed) {         return false.     }     boolean answer = it.hasNext().     if (!answer) {         // auto close         try {             close().         } catch (IOException e) {         // ignore         }     }     return answer. }
false;public;0;8;;@Override public Object next() {     try {         return doNext().     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;private;0;11;;private Object doNext() throws IOException {     List<Object> list = new ArrayList<>().     int count = 0.     while (count < group && it.hasNext()) {         Object data = it.next().         list.add(data).         count++.     }     return list. }
false;public;0;4;;@Override public void remove() {     it.remove(). }
