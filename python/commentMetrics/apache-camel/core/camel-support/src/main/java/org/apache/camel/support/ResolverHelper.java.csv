commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;3;;public static Component lookupComponentInRegistryWithFallback(CamelContext context, String name) {     return lookupComponentInRegistryWithFallback(context, name, EXCEPTION_HANDLER). }
false;public,static;3;20;;public static Component lookupComponentInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {     Object bean = lookupInRegistry(context, Component.class, false, exceptionHandler, name, name + COMPONENT_FALLBACK_SUFFIX).     if (bean != null) {         if (bean instanceof Component) {             return (Component) bean.         } else {             // let's use Camel's type conversion mechanism to convert things like CamelContext             // and other types into a valid Component             Component component = CamelContextHelper.convertTo(context, Component.class, bean).             if (component != null) {                 return component.             }         }     }     if (bean != null) {         LOG.debug("Found Component with incompatible class: {}", bean.getClass().getName()).     }     return null. }
false;public,static;2;3;;public static DataFormat lookupDataFormatInRegistryWithFallback(CamelContext context, String name) {     return lookupDataFormatInRegistryWithFallback(context, name, EXCEPTION_HANDLER). }
false;public,static;3;11;;public static DataFormat lookupDataFormatInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {     Object bean = lookupInRegistry(context, DataFormat.class, false, exceptionHandler, name, name + DATA_FORMAT_FALLBACK_SUFFIX).     if (bean instanceof DataFormat) {         return (DataFormat) bean.     }     if (bean != null) {         LOG.debug("Found DataFormat with incompatible class: {}", bean.getClass().getName()).     }     return null. }
false;public,static;2;3;;public static DataFormatFactory lookupDataFormatFactoryInRegistryWithFallback(CamelContext context, String name) {     return lookupDataFormatFactoryInRegistryWithFallback(context, name, EXCEPTION_HANDLER). }
false;public,static;3;11;;public static DataFormatFactory lookupDataFormatFactoryInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {     Object bean = lookupInRegistry(context, DataFormatFactory.class, false, exceptionHandler, name, name + DATA_FORMAT_FACTORY_FALLBACK_SUFFIX).     if (bean instanceof DataFormatFactory) {         return (DataFormatFactory) bean.     }     if (bean != null) {         LOG.debug("Found DataFormatFactory with incompatible class: {}", bean.getClass().getName()).     }     return null. }
false;public,static;2;3;;public static Language lookupLanguageInRegistryWithFallback(CamelContext context, String name) {     return lookupLanguageInRegistryWithFallback(context, name, EXCEPTION_HANDLER). }
false;public,static;3;11;;public static Language lookupLanguageInRegistryWithFallback(CamelContext context, String name, LookupExceptionHandler exceptionHandler) {     Object bean = lookupInRegistry(context, Language.class, false, exceptionHandler, name, name + LANGUAGE_FALLBACK_SUFFIX).     if (bean instanceof Language) {         return (Language) bean.     }     if (bean != null) {         LOG.debug("Found Language with incompatible class: {}", bean.getClass().getName()).     }     return null. }
false;public;3;3;;public void handleException(Exception e, Logger log, String name) {     log.debug("Ignored error looking up bean: {}", name, e). }
false;private,static;5;20;;private static Object lookupInRegistry(CamelContext context, Class<?> type, boolean lookupByNameAndType, LookupExceptionHandler exceptionHandler, String... names) {     for (String name : names) {         try {             Object bean.             if (lookupByNameAndType) {                 bean = context.getRegistry().lookupByNameAndType(name, type).             } else {                 bean = context.getRegistry().lookupByName(name).             }             LOG.debug("Lookup {} with name {} in registry. Found: {}", type.getSimpleName(), name, bean).             if (bean != null) {                 return bean.             }         } catch (Exception e) {             exceptionHandler.handleException(e, LOG, name).         }     }     return null. }
