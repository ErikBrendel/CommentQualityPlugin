commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void loadSchema() throws Exception {     // force loading of schema     schema = createSchema(). }
false;public;0;10;;// Properties // ----------------------------------------------------------------------- public Schema getSchema() throws IOException, SAXException {     if (schema == null) {         synchronized (this) {             if (schema == null) {                 schema = createSchema().             }         }     }     return schema. }
false;public;1;3;;public void setSchema(Schema schema) {     this.schema = schema. }
false;public;0;3;;public String getSchemaLanguage() {     return schemaLanguage. }
false;public;1;3;;public void setSchemaLanguage(String schemaLanguage) {     this.schemaLanguage = schemaLanguage. }
false;public;0;6;;public Source getSchemaSource() throws IOException {     if (schemaSource == null) {         schemaSource = createSchemaSource().     }     return schemaSource. }
false;public;1;3;;public void setSchemaSource(Source schemaSource) {     this.schemaSource = schemaSource. }
false;public;0;3;;public URL getSchemaUrl() {     return schemaUrl. }
false;public;1;3;;public void setSchemaUrl(URL schemaUrl) {     this.schemaUrl = schemaUrl. }
false;public;0;3;;public File getSchemaFile() {     return schemaFile. }
false;public;1;3;;public void setSchemaFile(File schemaFile) {     this.schemaFile = schemaFile. }
false;public;0;3;;public byte[] getSchemaAsByteArray() {     return schemaAsByteArray. }
false;public;1;3;;public void setSchemaAsByteArray(byte[] schemaAsByteArray) {     this.schemaAsByteArray = schemaAsByteArray. }
false;public;0;10;;public SchemaFactory getSchemaFactory() {     if (schemaFactory == null) {         synchronized (this) {             if (schemaFactory == null) {                 schemaFactory = createSchemaFactory().             }         }     }     return schemaFactory. }
false;public;1;3;;public void setSchemaFactory(SchemaFactory schemaFactory) {     this.schemaFactory = schemaFactory. }
false;public;0;3;;public LSResourceResolver getResourceResolver() {     return resourceResolver. }
false;public;1;3;;public void setResourceResolver(LSResourceResolver resourceResolver) {     this.resourceResolver = resourceResolver. }
false;protected;0;15;;protected SchemaFactory createSchemaFactory() {     SchemaFactory factory = SchemaFactory.newInstance(schemaLanguage).     if (getResourceResolver() != null) {         factory.setResourceResolver(getResourceResolver()).     }     if (camelContext == null || !Boolean.parseBoolean(camelContext.getGlobalOptions().get(ACCESS_EXTERNAL_DTD))) {         try {             LOG.debug("Configuring SchemaFactory to not allow access to external DTD/Schema").             factory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, "").         } catch (SAXException e) {             LOG.warn(e.getMessage(), e).         }     }     return factory. }
false;protected;0;3;;protected Source createSchemaSource() throws IOException {     throw new IllegalArgumentException("You must specify either a schema, schemaFile, schemaSource, schemaUrl, or schemaUri property"). }
false;protected;0;37;;protected Schema createSchema() throws SAXException, IOException {     SchemaFactory factory = getSchemaFactory().     URL url = getSchemaUrl().     if (url != null) {         synchronized (this) {             return factory.newSchema(url).         }     }     File file = getSchemaFile().     if (file != null) {         synchronized (this) {             return factory.newSchema(file).         }     }     byte[] bytes = getSchemaAsByteArray().     if (bytes != null) {         synchronized (this) {             return factory.newSchema(new StreamSource(new ByteArrayInputStream(schemaAsByteArray))).         }     }     if (schemaResourceUri != null) {         synchronized (this) {             bytes = readSchemaResource().             return factory.newSchema(new StreamSource(new ByteArrayInputStream(bytes))).         }     }     Source source = getSchemaSource().     synchronized (this) {         return factory.newSchema(source).     } }
false;protected;0;13;;protected byte[] readSchemaResource() throws IOException {     LOG.debug("reading schema resource: {}", schemaResourceUri).     InputStream is = ResourceHelper.resolveMandatoryResourceAsInputStream(camelContext, schemaResourceUri).     byte[] bytes = null.     try {         bytes = getBytes(is).     } finally {         // and make sure to close the input stream after the schema has been         // loaded         IOHelper.close(is).     }     return bytes. }
false;private,static;1;5;;private static byte[] getBytes(InputStream stream) throws IOException {     ByteArrayOutputStream bos = new ByteArrayOutputStream().     IOHelper.copy(IOHelper.buffered(stream), bos).     return bos.toByteArray(). }
