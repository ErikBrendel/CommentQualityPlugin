commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// ********************************** // Accessors // ********************************** public ResultBuilder scope(ComponentVerifierExtension.Scope scope) {     this.scope = Optional.of(scope).     return this. }
false;public;1;4;;public ResultBuilder status(ComponentVerifierExtension.Result.Status status) {     this.status = Optional.of(status).     return this. }
false;public;1;10;;public ResultBuilder error(ComponentVerifierExtension.VerificationError verificationError) {     if (this.verificationErrors == null) {         this.verificationErrors = new ArrayList<>().     }     this.verificationErrors.add(verificationError).     this.status = Optional.of(ComponentVerifierExtension.Result.Status.ERROR).     return this. }
false;public;1;4;;public ResultBuilder error(Optional<ComponentVerifierExtension.VerificationError> error) {     error.ifPresent(e -> error(e)).     return this. }
false;public;1;3;;public ResultBuilder error(Supplier<Optional<ComponentVerifierExtension.VerificationError>> supplier) {     return error(supplier.get()). }
false;public;1;13;;public ResultBuilder error(ThrowingConsumer<ResultBuilder, Exception> consumer) {     try {         consumer.accept(this).     } catch (NoSuchOptionException e) {         error(ResultErrorBuilder.withMissingOption(e.getOptionName()).build()).     } catch (IllegalOptionException e) {         error(ResultErrorBuilder.withIllegalOption(e.getOptionName(), e.getOptionValue()).build()).     } catch (Exception e) {         error(ResultErrorBuilder.withException(e).build()).     }     return this. }
false;public;2;13;;public <T> ResultBuilder error(T data, ThrowingBiConsumer<ResultBuilder, T, Exception> consumer) {     try {         consumer.accept(this, data).     } catch (NoSuchOptionException e) {         error(ResultErrorBuilder.withMissingOption(e.getOptionName()).build()).     } catch (IllegalOptionException e) {         error(ResultErrorBuilder.withIllegalOption(e.getOptionName(), e.getOptionValue()).build()).     } catch (Exception e) {         error(ResultErrorBuilder.withException(e).build()).     }     return this. }
false;public;1;4;;public ResultBuilder errors(List<ComponentVerifierExtension.VerificationError> verificationErrors) {     verificationErrors.forEach(this::error).     return this. }
false;public;0;7;;// ********************************** // Build // ********************************** public ComponentVerifierExtension.Result build() {     return new DefaultResult(scope.orElse(ComponentVerifierExtension.Scope.PARAMETERS), status.orElse(ComponentVerifierExtension.Result.Status.UNSUPPORTED), verificationErrors != null ? Collections.unmodifiableList(verificationErrors) : Collections.emptyList()). }
false;public,static;1;3;;// ********************************** // Helpers // ********************************** public static ResultBuilder withStatus(ComponentVerifierExtension.Result.Status status) {     return new ResultBuilder().status(status). }
false;public,static;2;3;;public static ResultBuilder withStatusAndScope(ComponentVerifierExtension.Result.Status status, ComponentVerifierExtension.Scope scope) {     return new ResultBuilder().status(status).scope(scope). }
false;public,static;1;3;;public static ResultBuilder withScope(ComponentVerifierExtension.Scope scope) {     return new ResultBuilder().scope(scope). }
false;public,static;0;3;;public static ResultBuilder unsupported() {     return withStatusAndScope(ComponentVerifierExtension.Result.Status.UNSUPPORTED, ComponentVerifierExtension.Scope.PARAMETERS). }
false;public,static;1;3;;public static ResultBuilder unsupportedScope(ComponentVerifierExtension.Scope scope) {     return withStatusAndScope(ComponentVerifierExtension.Result.Status.UNSUPPORTED, scope). }
