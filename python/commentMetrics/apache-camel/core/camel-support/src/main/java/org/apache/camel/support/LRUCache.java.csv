commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public V get(Object o) {     V answer = map.get(o).     if (answer != null) {         hits.increment().     } else {         misses.increment().     }     return answer. }
false;public;0;4;;@Override public int size() {     return map.size(). }
false;public;0;4;;@Override public boolean isEmpty() {     return map.isEmpty(). }
false;public;1;4;;@Override public boolean containsKey(Object o) {     return map.containsKey(o). }
false;public;1;4;;@Override public boolean containsValue(Object o) {     return map.containsValue(0). }
false;public;2;4;;@Override public V put(K k, V v) {     return map.put(k, v). }
false;public;1;4;;@Override public V remove(Object o) {     return map.remove(o). }
false;public;1;3;;public void putAll(Map<? extends K, ? extends V> map) {     this.cache.putAll(map). }
false;public;0;5;;@Override public void clear() {     map.clear().     resetStatistics(). }
false;public;0;4;;@Override public Set<K> keySet() {     return map.keySet(). }
false;public;0;4;;@Override public Collection<V> values() {     return map.values(). }
false;public;0;4;;@Override public Set<Entry<K, V>> entrySet() {     return map.entrySet(). }
false;public;3;8;;@Override public void onRemoval(K key, V value, RemovalCause cause) {     if (cause.wasEvicted()) {         evicted.increment().         LOG.trace("onRemoval {} -> {}", key, value).         evict.accept(value).     } }
true;public;0;3;/**  * Gets the number of cache hits  */ ;/**  * Gets the number of cache hits  */ public long getHits() {     return hits.longValue(). }
true;public;0;3;/**  * Gets the number of cache misses.  */ ;/**  * Gets the number of cache misses.  */ public long getMisses() {     return misses.longValue(). }
true;public;0;3;/**  * Gets the number of evicted entries.  */ ;/**  * Gets the number of evicted entries.  */ public long getEvicted() {     return evicted.longValue(). }
true;public;0;3;/**  * Returns the maxCacheSize.  */ ;/**  * Returns the maxCacheSize.  */ public int getMaxCacheSize() {     return maxCacheSize. }
true;public;0;5;/**  * Rest the cache statistics such as hits and misses.  */ ;/**  * Rest the cache statistics such as hits and misses.  */ public void resetStatistics() {     hits.reset().     misses.reset().     evicted.reset(). }
false;public;0;3;;public void cleanUp() {     cache.cleanUp(). }
false;public;0;4;;@Override public String toString() {     return "LRUCache@" + ObjectHelper.getIdentityHashCode(this). }
false;static;1;2;;static <V> void doNothing(V value) { }
false;static;1;8;;static <V> void doStop(V value) {     try {         // stop service as its evicted from cache         ServiceHelper.stopService(value).     } catch (Exception e) {         LOG.warn("Error stopping service: " + value + ". This exception will be ignored.", e).     } }
