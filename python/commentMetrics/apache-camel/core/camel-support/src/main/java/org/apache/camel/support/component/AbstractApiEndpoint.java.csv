commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return true. }
true;protected,abstract;0;1;/**  * Returns generated helper that extends {@link ApiMethodPropertiesHelper} to work with API properties.  * @return properties helper.  */ ;/**  * Returns generated helper that extends {@link ApiMethodPropertiesHelper} to work with API properties.  * @return properties helper.  */ protected abstract ApiMethodPropertiesHelper<T> getPropertiesHelper().
false;public;1;18;;@Override public void configureProperties(Map<String, Object> options) {     super.configureProperties(options).     // set configuration properties first     try {         T configuration = getConfiguration().         EndpointHelper.setReferenceProperties(getCamelContext(), configuration, options).         EndpointHelper.setProperties(getCamelContext(), configuration, options).     } catch (Exception e) {         throw new IllegalArgumentException(e).     }     // validate and initialize state     initState().     afterConfigureProperties(). }
true;protected,abstract;0;1;/**  * Initialize proxies, create server connections, etc. after endpoint properties have been configured.  */ ;/**  * Initialize proxies, create server connections, etc. after endpoint properties have been configured.  */ protected abstract void afterConfigureProperties().
true;private;0;38;/**  * Initialize endpoint state, including endpoint arguments, find candidate methods, etc.  */ ;/**  * Initialize endpoint state, including endpoint arguments, find candidate methods, etc.  */ private void initState() {     // compute endpoint property names and values     this.endpointPropertyNames = Collections.unmodifiableSet(getPropertiesHelper().getEndpointPropertyNames(configuration)).     final HashMap<String, Object> properties = new HashMap<>().     getPropertiesHelper().getEndpointProperties(configuration, properties).     this.endpointProperties = Collections.unmodifiableMap(properties).     // get endpoint property names     final Set<String> arguments = new HashSet<>(endpointPropertyNames).     // add inBody argument for producers     if (inBody != null) {         arguments.add(inBody).     }     interceptPropertyNames(arguments).     // create a list of candidate methods     candidates = new ArrayList<>().     candidates.addAll(methodHelper.getCandidateMethods(methodName, arguments)).     candidates = Collections.unmodifiableList(candidates).     // error if there are no candidates     if (candidates.isEmpty()) {         throw new IllegalArgumentException(String.format("No matching method for %s/%s, with arguments %s", apiName.getName(), methodName, arguments)).     }     // log missing/extra properties for debugging     if (log.isDebugEnabled()) {         final Set<String> missing = methodHelper.getMissingProperties(methodName, arguments).         if (!missing.isEmpty()) {             log.debug("Method {} could use one or more properties from {}", methodName, missing).         }     } }
false;public;1;4;;@Override public void interceptPropertyNames(Set<String> propertyNames) { // do nothing by default }
false;public;1;4;;@Override public void interceptProperties(Map<String, Object> properties) { // do nothing by default }
true;public,final;0;3;/**  * Returns endpoint configuration object.  * One of the generated EndpointConfiguration classes that extends component configuration class.  *  * @return endpoint configuration object  */ ;/**  * Returns endpoint configuration object.  * One of the generated EndpointConfiguration classes that extends component configuration class.  *  * @return endpoint configuration object  */ public final T getConfiguration() {     return configuration. }
true;public,final;0;3;/**  * Returns API name.  * @return apiName property.  */ ;/**  * Returns API name.  * @return apiName property.  */ public final E getApiName() {     return apiName. }
true;public,final;0;3;/**  * Returns method name.  * @return methodName property.  */ ;/**  * Returns method name.  * @return methodName property.  */ public final String getMethodName() {     return methodName. }
true;public,final;0;3;/**  * Returns method helper.  * @return methodHelper property.  */ ;/**  * Returns method helper.  * @return methodHelper property.  */ public final ApiMethodHelper<? extends ApiMethod> getMethodHelper() {     return methodHelper. }
true;public,final;0;3;/**  * Returns candidate methods for this endpoint.  * @return list of candidate methods.  */ ;/**  * Returns candidate methods for this endpoint.  * @return list of candidate methods.  */ public final List<ApiMethod> getCandidates() {     return candidates. }
true;public,final;0;3;/**  * Returns name of parameter passed in the exchange In Body.  * @return inBody property.  */ ;/**  * Returns name of parameter passed in the exchange In Body.  * @return inBody property.  */ public final String getInBody() {     return inBody. }
true;public,final;1;8;/**  * Sets the name of a parameter to be passed in the exchange In Body.  * @param inBody parameter name  * @throws IllegalArgumentException for invalid parameter name.  */ ;/**  * Sets the name of a parameter to be passed in the exchange In Body.  * @param inBody parameter name  * @throws IllegalArgumentException for invalid parameter name.  */ public final void setInBody(String inBody) throws IllegalArgumentException {     // validate property name     ObjectHelper.notNull(inBody, "inBody").     if (!getPropertiesHelper().getValidEndpointProperties(getConfiguration()).contains(inBody)) {         throw new IllegalArgumentException("Unknown property " + inBody).     }     this.inBody = inBody. }
false;public,final;0;3;;public final Set<String> getEndpointPropertyNames() {     return endpointPropertyNames. }
false;public,final;0;3;;public final Map<String, Object> getEndpointProperties() {     return endpointProperties. }
true;public,abstract;2;1;/**  * Returns an instance of an API Proxy based on apiName, method and args.  * Called by {@link AbstractApiConsumer} or {@link AbstractApiProducer}.  *  * @param method method about to be invoked  * @param args method arguments  * @return a Java object that implements the method to be invoked.  * @see AbstractApiProducer  * @see AbstractApiConsumer  */ ;/**  * Returns an instance of an API Proxy based on apiName, method and args.  * Called by {@link AbstractApiConsumer} or {@link AbstractApiProducer}.  *  * @param method method about to be invoked  * @param args method arguments  * @return a Java object that implements the method to be invoked.  * @see AbstractApiProducer  * @see AbstractApiConsumer  */ public abstract Object getApiProxy(ApiMethod method, Map<String, Object> args).
false;private,static;3;29;;private static ExecutorService getExecutorService(Class<? extends AbstractApiEndpoint> endpointClass, CamelContext context, String threadProfileName) {     // lookup executorService for extending class name     final String endpointClassName = endpointClass.getName().     ExecutorService executorService = executorServiceMap.get(endpointClassName).     // re-create it (its a shared static instance)     if (executorService == null || executorService.isTerminated() || executorService.isShutdown()) {         final ExecutorServiceManager manager = context.getExecutorServiceManager().         // try to lookup a pool first based on profile         ThreadPoolProfile poolProfile = manager.getThreadPoolProfile(threadProfileName).         if (poolProfile == null) {             poolProfile = manager.getDefaultThreadPoolProfile().         }         // create a new pool using the custom or default profile         executorService = manager.newScheduledThreadPool(endpointClass, threadProfileName, poolProfile).         executorServiceMap.put(endpointClassName, executorService).     }     return executorService. }
false;public,final;0;9;;public final ExecutorService getExecutorService() {     if (this.executorService == null) {         // synchronize on class to avoid creating duplicate class level executors         synchronized (getClass()) {             this.executorService = getExecutorService(getClass(), getCamelContext(), getThreadProfileName()).         }     }     return this.executorService. }
true;protected,abstract;0;1;/**  * Returns Thread profile name. Generated as a constant THREAD_PROFILE_NAME in *Constants.  * @return thread profile name to use.  */ ;/**  * Returns Thread profile name. Generated as a constant THREAD_PROFILE_NAME in *Constants.  * @return thread profile name to use.  */ protected abstract String getThreadProfileName().
