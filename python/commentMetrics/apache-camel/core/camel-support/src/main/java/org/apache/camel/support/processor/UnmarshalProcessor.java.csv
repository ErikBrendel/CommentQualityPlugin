commented;modifiers;parameterAmount;loc;comment;code
false;public;2;37;;public boolean process(Exchange exchange, AsyncCallback callback) {     ObjectHelper.notNull(dataFormat, "dataFormat").     InputStream stream = null.     Object result = null.     try {         stream = exchange.getIn().getMandatoryBody(InputStream.class).         // lets setup the out message before we invoke the dataFormat so that it can mutate it if necessary         Message out = exchange.getOut().         out.copyFrom(exchange.getIn()).         result = dataFormat.unmarshal(exchange, stream).         if (result instanceof Exchange) {             if (result != exchange) {                 // it's not allowed to return another exchange other than the one provided to dataFormat                 throw new RuntimeCamelException("The returned exchange " + result + " is not the same as " + exchange + " provided to the DataFormat").             }         } else if (result instanceof Message) {             // the dataformat has probably set headers, attachments, etc. so let's use it as the outbound payload             exchange.setOut((Message) result).         } else {             out.setBody(result).         }     } catch (Throwable e) {         // remove OUT message, as an exception occurred         exchange.setOut(null).         exchange.setException(e).     } finally {         // The Iterator will close the stream itself         if (!(result instanceof Iterator)) {             IOHelper.close(stream, "input stream").         }     }     callback.done(true).     return true. }
false;public;0;3;;public String toString() {     return "Unmarshal[" + dataFormat + "]". }
false;public;0;3;;public String getTraceLabel() {     return "unmarshal[" + dataFormat + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;10;;@Override protected void doStart() throws Exception {     // inject CamelContext on data format     if (dataFormat instanceof CamelContextAware) {         ((CamelContextAware) dataFormat).setCamelContext(camelContext).     }     // add dataFormat as service which will also start the service     // (false => we handle the lifecycle of the dataFormat)     getCamelContext().addService(dataFormat, false, true). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(dataFormat).     getCamelContext().removeService(dataFormat). }
