commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void onInit(Route route) {     if (exceptionHandler == null) {         exceptionHandler = new LoggingExceptionHandler(route.getRouteContext().getCamelContext(), getClass()).     } }
false;public;1;3;;public void onRemove(Route route) { // noop }
false;public;1;4;;@Override public void onStart(Route route) { // noop }
false;public;1;4;;@Override public void onStop(Route route) { // noop }
false;public;1;4;;@Override public void onSuspend(Route route) { // noop }
false;public;1;4;;@Override public void onResume(Route route) { // noop }
false;public;2;3;;public void onExchangeBegin(Route route, Exchange exchange) { // noop }
false;public;2;3;;public void onExchangeDone(Route route, Exchange exchange) { // noop }
true;public;1;6;/**  * Starts the consumer.  *  * @return the returned value is always <tt>true</tt> and should not be used.  * @see #resumeOrStartConsumer(Consumer)  */ ;/**  * Starts the consumer.  *  * @return the returned value is always <tt>true</tt> and should not be used.  * @see #resumeOrStartConsumer(Consumer)  */ public boolean startConsumer(Consumer consumer) throws Exception {     // TODO: change to void in Camel 3.0     ServiceHelper.startService(consumer).     log.debug("Started consumer {}", consumer).     return true. }
true;public;1;7;/**  * Stops the consumer.  *  * @return the returned value is always <tt>true</tt> and should not be used.  * @see #suspendOrStopConsumer(Consumer)  */ ;/**  * Stops the consumer.  *  * @return the returned value is always <tt>true</tt> and should not be used.  * @see #suspendOrStopConsumer(Consumer)  */ public boolean stopConsumer(Consumer consumer) throws Exception {     // TODO: change to void in Camel 3.0     // stop and shutdown     ServiceHelper.stopAndShutdownServices(consumer).     log.debug("Stopped consumer {}", consumer).     return true. }
true;public;1;9;/**  * Suspends or stops the consumer.  *  * If the consumer is {@link org.apache.camel.Suspendable} then the consumer is suspended,  * otherwise the consumer is stopped.  *  * @see #stopConsumer(Consumer)  * @return <tt>true</tt> if the consumer was suspended or stopped, <tt>false</tt> if the consumer was already suspend or stopped  */ ;/**  * Suspends or stops the consumer.  *  * If the consumer is {@link org.apache.camel.Suspendable} then the consumer is suspended,  * otherwise the consumer is stopped.  *  * @see #stopConsumer(Consumer)  * @return <tt>true</tt> if the consumer was suspended or stopped, <tt>false</tt> if the consumer was already suspend or stopped  */ public boolean suspendOrStopConsumer(Consumer consumer) throws Exception {     boolean suspended = ServiceHelper.suspendService(consumer).     if (suspended) {         log.debug("Suspended consumer {}", consumer).     } else {         log.trace("Consumer already suspended {}", consumer).     }     return suspended. }
true;public;1;9;/**  * Resumes or starts the consumer.  *  * If the consumer is {@link org.apache.camel.Suspendable} then the consumer is resumed,  * otherwise the consumer is started.  *  * @see #startConsumer(Consumer)  * @return <tt>true</tt> if the consumer was resumed or started, <tt>false</tt> if the consumer was already resumed or started  */ ;/**  * Resumes or starts the consumer.  *  * If the consumer is {@link org.apache.camel.Suspendable} then the consumer is resumed,  * otherwise the consumer is started.  *  * @see #startConsumer(Consumer)  * @return <tt>true</tt> if the consumer was resumed or started, <tt>false</tt> if the consumer was already resumed or started  */ public boolean resumeOrStartConsumer(Consumer consumer) throws Exception {     boolean resumed = ServiceHelper.resumeService(consumer).     if (resumed) {         log.debug("Resumed consumer {}", consumer).     } else {         log.trace("Consumer already resumed {}", consumer).     }     return resumed. }
false;public;1;3;;public void startRoute(Route route) throws Exception {     route.getRouteContext().getCamelContext().getRouteController().startRoute(route.getId()). }
false;public;1;3;;public void resumeRoute(Route route) throws Exception {     route.getRouteContext().getCamelContext().getRouteController().resumeRoute(route.getId()). }
false;public;1;3;;public void suspendRoute(Route route) throws Exception {     route.getRouteContext().getCamelContext().getRouteController().suspendRoute(route.getId()). }
false;public;3;3;;public void suspendRoute(Route route, long timeout, TimeUnit timeUnit) throws Exception {     route.getRouteContext().getCamelContext().getRouteController().suspendRoute(route.getId(), timeout, timeUnit). }
true;public;1;3;/**  * @see #stopRouteAsync(Route)  */ ;/**  * @see #stopRouteAsync(Route)  */ public void stopRoute(Route route) throws Exception {     route.getRouteContext().getCamelContext().getRouteController().stopRoute(route.getId()). }
true;public;3;3;/**  * @see #stopRouteAsync(Route)  */ ;/**  * @see #stopRouteAsync(Route)  */ public void stopRoute(Route route, long timeout, TimeUnit timeUnit) throws Exception {     route.getRouteContext().getCamelContext().getRouteController().stopRoute(route.getId(), timeout, timeUnit). }
true;public;1;11;/**  * Allows to stop a route asynchronously using a separate background thread which can allow any current in-flight exchange  * to complete while the route is being shutdown.  * You may attempt to stop a route from processing an exchange which would be in-flight and therefore attempting to stop  * the route will defer due there is an inflight exchange in-progress. By stopping the route independently using a separate  * thread ensures the exchange can continue process and complete and the route can be stopped.  */ ;/**  * Allows to stop a route asynchronously using a separate background thread which can allow any current in-flight exchange  * to complete while the route is being shutdown.  * You may attempt to stop a route from processing an exchange which would be in-flight and therefore attempting to stop  * the route will defer due there is an inflight exchange in-progress. By stopping the route independently using a separate  * thread ensures the exchange can continue process and complete and the route can be stopped.  */ public void stopRouteAsync(final Route route) {     String threadId = route.getRouteContext().getCamelContext().getExecutorServiceManager().resolveThreadName("StopRouteAsync").     Runnable task = () -> {         try {             route.getRouteContext().getCamelContext().getRouteController().stopRoute(route.getId()).         } catch (Exception e) {             handleException(e).         }     }.     new Thread(task, threadId).start(). }
true;protected;1;5;/**  * Handles the given exception using the {@link #getExceptionHandler()}  *  * @param t the exception to handle  */ ;/**  * Handles the given exception using the {@link #getExceptionHandler()}  *  * @param t the exception to handle  */ protected void handleException(Throwable t) {     if (exceptionHandler != null) {         exceptionHandler.handleException(t).     } }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;0;3;;public ExceptionHandler getExceptionHandler() {     return exceptionHandler. }
false;public;1;3;;public void setExceptionHandler(ExceptionHandler exceptionHandler) {     this.exceptionHandler = exceptionHandler. }
