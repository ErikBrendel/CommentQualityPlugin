commented;modifiers;parameterAmount;loc;comment;code
false;public;2;9;;@Override public DataHandler put(String key, DataHandler value) {     Attachment old = map.put(key, new DefaultAttachment(value)).     if (old == null) {         return null.     } else {         return old.getDataHandler().     } }
false;public;0;4;;@Override public Set<Map.Entry<String, DataHandler>> entrySet() {     return new AttachmentEntrySet(map.entrySet()). }
false;public;0;3;;public Map<String, Attachment> getOriginalMap() {     return map. }
false;public;0;4;;@Override public int size() {     return set.size(). }
false;public;0;4;;@Override public Iterator<Map.Entry<String, DataHandler>> iterator() {     return new AttachmentEntrySetIterator(set.iterator()). }
false;public;0;4;;@Override public boolean hasNext() {     return iter.hasNext(). }
false;public;0;4;;@Override public Map.Entry<String, DataHandler> next() {     return new AttachmentEntry(iter.next()). }
false;public;0;3;;public void remove() {     iter.remove(). }
false;public;0;4;;@Override public String getKey() {     return entry.getKey(). }
false;public;0;8;;@Override public DataHandler getValue() {     Attachment value = entry.getValue().     if (value != null) {         return value.getDataHandler().     }     return null. }
false;public;1;8;;@Override public DataHandler setValue(DataHandler value) {     Attachment oldValue = entry.setValue(new DefaultAttachment(value)).     if (oldValue != null) {         return oldValue.getDataHandler().     }     return null. }
true;public;1;6;// two AttachmentEntry objects are equal if the backing entries are equal ;// two AttachmentEntry objects are equal if the backing entries are equal public boolean equals(Object o) {     if (o instanceof AttachmentEntry && entry.equals(((AttachmentEntry) o).entry)) {         return true.     }     return false. }
false;public;0;3;;public int hashCode() {     return entry.hashCode(). }
