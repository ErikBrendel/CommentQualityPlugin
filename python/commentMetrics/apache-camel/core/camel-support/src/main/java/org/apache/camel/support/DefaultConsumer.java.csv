commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public String toString() {     if (consumerToString == null) {         consumerToString = "Consumer[" + URISupport.sanitizeUri(endpoint.getEndpointUri()) + "]".     }     return consumerToString. }
false;public;0;3;;public Route getRoute() {     return route. }
false;public;1;3;;public void setRoute(Route route) {     this.route = route. }
true;public;1;12;/**  * If the consumer needs to defer done the {@link org.apache.camel.spi.UnitOfWork} on  * the processed {@link Exchange} then this method should be use to create and start  * the {@link UnitOfWork} on the exchange.  *  * @param exchange the exchange  * @return the created and started unit of work  * @throws Exception is thrown if error starting the unit of work  *  * @see #doneUoW(org.apache.camel.Exchange)  */ ;/**  * If the consumer needs to defer done the {@link org.apache.camel.spi.UnitOfWork} on  * the processed {@link Exchange} then this method should be use to create and start  * the {@link UnitOfWork} on the exchange.  *  * @param exchange the exchange  * @return the created and started unit of work  * @throws Exception is thrown if error starting the unit of work  *  * @see #doneUoW(org.apache.camel.Exchange)  */ public UnitOfWork createUoW(Exchange exchange) throws Exception {     // from this unit of work     if (route != null && exchange.getFromRouteId() == null) {         exchange.setFromRouteId(route.getId()).     }     UnitOfWork uow = endpoint.getCamelContext().getUnitOfWorkFactory().createUnitOfWork(exchange).     exchange.setUnitOfWork(uow).     uow.start().     return uow. }
true;public;1;3;/**  * If the consumer needs to defer done the {@link org.apache.camel.spi.UnitOfWork} on  * the processed {@link Exchange} then this method should be executed when the consumer  * is finished processing the message.  *  * @param exchange the exchange  *  * @see #createUoW(org.apache.camel.Exchange)  */ ;/**  * If the consumer needs to defer done the {@link org.apache.camel.spi.UnitOfWork} on  * the processed {@link Exchange} then this method should be executed when the consumer  * is finished processing the message.  *  * @param exchange the exchange  *  * @see #createUoW(org.apache.camel.Exchange)  */ public void doneUoW(Exchange exchange) {     UnitOfWorkHelper.doneUow(exchange.getUnitOfWork(), exchange). }
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;public;0;3;;public Processor getProcessor() {     return processor. }
true;public;0;10;/**  * Provides an {@link org.apache.camel.AsyncProcessor} interface to the configured  * processor on the consumer. If the processor does not implement the interface,  * it will be adapted so that it does.  */ ;/**  * Provides an {@link org.apache.camel.AsyncProcessor} interface to the configured  * processor on the consumer. If the processor does not implement the interface,  * it will be adapted so that it does.  */ public AsyncProcessor getAsyncProcessor() {     if (asyncProcessor == null) {         synchronized (this) {             if (asyncProcessor == null) {                 asyncProcessor = AsyncProcessorConverterHelper.convert(processor).             }         }     }     return asyncProcessor. }
false;public;0;3;;public ExceptionHandler getExceptionHandler() {     return exceptionHandler. }
false;public;1;3;;public void setExceptionHandler(ExceptionHandler exceptionHandler) {     this.exceptionHandler = exceptionHandler. }
false;protected;0;4;;protected void doStop() throws Exception {     log.debug("Stopping consumer: {}", this).     ServiceHelper.stopService(processor). }
false;protected;0;4;;protected void doStart() throws Exception {     log.debug("Starting consumer: {}", this).     ServiceHelper.startService(processor). }
true;protected;1;4;/**  * Handles the given exception using the {@link #getExceptionHandler()}  *  * @param t the exception to handle  */ ;/**  * Handles the given exception using the {@link #getExceptionHandler()}  *  * @param t the exception to handle  */ protected void handleException(Throwable t) {     Throwable newt = (t == null) ? new IllegalArgumentException("Handling [null] exception") : t.     getExceptionHandler().handleException(newt). }
true;protected;2;4;/**  * Handles the given exception using the {@link #getExceptionHandler()}  *  * @param message additional message about the exception  * @param t the exception to handle  */ ;/**  * Handles the given exception using the {@link #getExceptionHandler()}  *  * @param message additional message about the exception  * @param t the exception to handle  */ protected void handleException(String message, Throwable t) {     Throwable newt = (t == null) ? new IllegalArgumentException("Handling [null] exception") : t.     getExceptionHandler().handleException(message, newt). }
