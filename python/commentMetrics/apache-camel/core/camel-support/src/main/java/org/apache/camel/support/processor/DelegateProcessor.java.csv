commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     processNext(exchange). }
false;protected;1;5;;protected void processNext(Exchange exchange) throws Exception {     if (processor != null) {         processor.process(exchange).     } }
false;public;0;4;;@Override public String toString() {     return "Delegate[" + processor + "]". }
false;public;0;3;;public Processor getProcessor() {     return processor. }
false;public;1;3;;public void setProcessor(Processor processor) {     this.processor = processor. }
false;protected;0;3;;protected void doStart() throws Exception {     ServiceHelper.startService(processor). }
false;protected;0;3;;protected void doStop() throws Exception {     ServiceHelper.stopService(processor). }
false;public;0;3;;public boolean hasNext() {     return processor != null. }
false;public;0;8;;public List<Processor> next() {     if (!hasNext()) {         return null.     }     List<Processor> answer = new ArrayList<>(1).     answer.add(processor).     return answer. }
