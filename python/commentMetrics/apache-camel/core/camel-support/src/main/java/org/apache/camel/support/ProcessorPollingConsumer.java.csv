commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Processor getProcessor() {     return processor. }
false;protected;0;3;;protected void doStart() throws Exception {     ServiceHelper.startService(processor). }
false;protected;0;3;;protected void doStop() throws Exception {     ServiceHelper.stopService(processor). }
false;public;0;14;;public Exchange receive() {     // must be started     if (!isRunAllowed() || !isStarted()) {         throw new RejectedExecutionException(this + " is not started, but in state: " + getStatus().name()).     }     Exchange exchange = getEndpoint().createExchange().     try {         processor.process(exchange).     } catch (Exception e) {         throw new RuntimeExchangeException("Error while processing exchange", exchange, e).     }     return exchange. }
false;public;0;3;;public Exchange receiveNoWait() {     return receive(). }
false;public;1;3;;public Exchange receive(long timeout) {     return receive(). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
