commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;7;;public static InputStream uncompressGzip(String contentEncoding, InputStream in) throws IOException {     if (isGzip(contentEncoding)) {         return new GZIPInputStream(in).     } else {         return in.     } }
false;public,static;2;16;;public static InputStream compressGzip(String contentEncoding, InputStream in) throws IOException {     if (isGzip(contentEncoding)) {         ByteArrayOutputStream os = new ByteArrayOutputStream().         GZIPOutputStream gzip = new GZIPOutputStream(os).         try {             IOHelper.copy(in, gzip).             gzip.finish().             return new ByteArrayInputStream(os.toByteArray()).         } finally {             IOHelper.close(gzip, "gzip").             IOHelper.close(os, "byte array output stream").         }     } else {         return in.     } }
false;public,static;2;18;;public static InputStream compressGzip(String contentEncoding, byte[] data) throws IOException {     if (isGzip(contentEncoding)) {         ByteArrayOutputStream os = null.         GZIPOutputStream gzip = null.         try {             os = new ByteArrayOutputStream().             gzip = new GZIPOutputStream(os).             gzip.write(data).             gzip.finish().             return new ByteArrayInputStream(os.toByteArray()).         } finally {             IOHelper.close(gzip, "gzip").             IOHelper.close(os, "byte array output stream").         }     } else {         return new ByteArrayInputStream(data).     } }
false;public,static;1;12;;public static byte[] compressGZIP(byte[] data) throws IOException {     ByteArrayOutputStream os = new ByteArrayOutputStream().     GZIPOutputStream gzip = new GZIPOutputStream(os).     try {         gzip.write(data).         gzip.finish().         return os.toByteArray().     } finally {         IOHelper.close(gzip, "gzip").         IOHelper.close(os, "byte array output stream").     } }
false;public,static;1;3;;public static boolean isGzip(Message message) {     return isGzip(message.getHeader(Exchange.CONTENT_ENCODING, String.class), message.getExchange()). }
false;public,static;2;7;;public static boolean isGzip(String header, Exchange exchange) {     if (exchange == null || !exchange.getProperty(Exchange.SKIP_GZIP_ENCODING, Boolean.FALSE, Boolean.class)) {         return isGzip(header).     } else {         return false.     } }
false;public,static;1;3;;public static boolean isGzip(String header) {     return header != null && header.toLowerCase(Locale.ENGLISH).contains("gzip"). }
