commented;modifiers;parameterAmount;loc;comment;code
false;public;2;16;;public <T> T lookupByNameAndType(String name, Class<T> type) {     Object answer = lookupByName(name).     // just to be safe     if (answer == null) {         return null.     }     try {         return type.cast(answer).     } catch (Throwable e) {         String msg = "Found bean: " + name + " in JNDI Context: " + context + " of type: " + answer.getClass().getName() + " expected type was: " + type.         throw new NoSuchBeanException(name, msg, e).     } }
false;public;1;9;;public Object lookupByName(String name) {     try {         return getContext().lookup(name).     } catch (NameNotFoundException e) {         return null.     } catch (NamingException e) {         return null.     } }
false;public;1;17;;public <T> Map<String, T> findByTypeWithName(Class<T> type) {     Map<String, T> answer = new LinkedHashMap<>().     try {         NamingEnumeration<NameClassPair> list = getContext().list("").         while (list.hasMore()) {             NameClassPair pair = list.next().             Object instance = context.lookup(pair.getName()).             if (type.isInstance(instance)) {                 answer.put(pair.getName(), type.cast(instance)).             }         }     } catch (NamingException e) {     // ignore     }     return answer. }
false;public;1;16;;public <T> Set<T> findByType(Class<T> type) {     Set<T> answer = new LinkedHashSet<>().     try {         NamingEnumeration<NameClassPair> list = getContext().list("").         while (list.hasMore()) {             NameClassPair pair = list.next().             Object instance = context.lookup(pair.getName()).             if (type.isInstance(instance)) {                 answer.add(type.cast(instance)).             }         }     } catch (NamingException e) {     // ignore     }     return answer. }
false;public;0;5;;public void close() throws NamingException {     if (context != null) {         context.close().     } }
false;public;0;6;;public Context getContext() throws NamingException {     if (context == null) {         context = createContext().     }     return context. }
false;public;1;3;;public void setContext(Context context) {     this.context = context. }
false;protected;0;11;;protected Context createContext() throws NamingException {     Hashtable<Object, Object> properties = new Hashtable<>(System.getProperties()).     if (environment != null) {         properties.putAll(environment).     }     // must include a factory if none provided in standalone mode     if (standalone && !properties.containsKey("java.naming.factory.initial")) {         properties.put("java.naming.factory.initial", "org.apache.camel.support.jndi.CamelInitialContextFactory").     }     return new InitialContext(properties). }
