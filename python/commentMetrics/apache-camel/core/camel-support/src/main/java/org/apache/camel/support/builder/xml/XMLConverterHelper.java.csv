commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setDocumentBuilderFactory(DocumentBuilderFactory documentBuilderFactory) {     this.documentBuilderFactory = documentBuilderFactory. }
false;public;0;6;;public TransformerFactory getTransformerFactory() {     if (transformerFactory == null) {         transformerFactory = createTransformerFactory().     }     return transformerFactory. }
false;public;1;3;;public void setTransformerFactory(TransformerFactory transformerFactory) {     this.transformerFactory = transformerFactory. }
false;public;1;28;;public Document toDOMDocument(final Node node) throws ParserConfigurationException, TransformerException {     ObjectHelper.notNull(node, "node").     // If the node is the document, just cast it     if (node instanceof Document) {         return (Document) node.     // If the node is an element     } else if (node instanceof Element) {         Element elem = (Element) node.         // If this is the root element, return its owner document         if (elem.getOwnerDocument().getDocumentElement() == elem) {             return elem.getOwnerDocument().         // else, create a new doc and copy the element inside it         } else {             Document doc = createDocument().             // so we need to synchronize on it             synchronized (node.getOwnerDocument()) {                 doc.appendChild(doc.importNode(node, true)).             }             return doc.         }     // other element types are not handled     } else {         throw new TransformerException("Unable to convert DOM node to a Document: " + node).     } }
false;public;1;4;;public DOMSource toDOMSource(Node node) throws ParserConfigurationException, TransformerException {     Document document = toDOMDocument(node).     return new DOMSource(document). }
false;public;0;33;;public DocumentBuilderFactory createDocumentBuilderFactory() {     DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance().     factory.setNamespaceAware(true).     factory.setIgnoringElementContentWhitespace(true).     factory.setIgnoringComments(true).     try {         // Set secure processing         factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     } catch (ParserConfigurationException e) {         LOG.warn("DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}.", new Object[] { XMLConstants.FEATURE_SECURE_PROCESSING, true, e }).     }     try {         // Disable the external-general-entities by default         factory.setFeature("http://xml.org/sax/features/external-general-entities", false).     } catch (ParserConfigurationException e) {         LOG.warn("DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}.", new Object[] { "http://xml.org/sax/features/external-general-entities", false, e }).     }     // setup the SecurityManager by default if it's apache xerces     try {         Class<?> smClass = ObjectHelper.loadClass("org.apache.xerces.util.SecurityManager").         if (smClass != null) {             Object sm = smClass.newInstance().             // Here we just use the default setting of the SeurityManager             factory.setAttribute("http://apache.org/xml/properties/security-manager", sm).         }     } catch (Exception e) {         LOG.warn("DocumentBuilderFactory doesn't support the attribute {}, due to {}.", new Object[] { "http://apache.org/xml/properties/security-manager", e }).     }     // setup the feature from the system property     setupFeatures(factory).     return factory. }
false;public;0;28;;public TransformerFactory createTransformerFactory() {     TransformerFactory factory.     TransformerFactoryConfigurationError cause.     try {         factory = TransformerFactory.newInstance().     } catch (TransformerFactoryConfigurationError e) {         cause = e.         // try fallback from the JDK         try {             LOG.debug("Cannot create/load TransformerFactory due: {}. Will attempt to use JDK fallback TransformerFactory: {}", e.getMessage(), JDK_FALLBACK_TRANSFORMER_FACTORY).             factory = TransformerFactory.newInstance(JDK_FALLBACK_TRANSFORMER_FACTORY, null).         } catch (Throwable t) {             // okay we cannot load fallback then throw original exception             throw cause.         }     }     LOG.debug("Created TransformerFactory: {}", factory).     // Enable the Security feature by default     try {         factory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true).     } catch (TransformerConfigurationException e) {         LOG.warn("TransformerFactory doesn't support the feature {} with value {}, due to {}.", javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, "true", e).     }     factory.setErrorListener(new XmlErrorListener()).     configureSaxonTransformerFactory(factory).     return factory. }
true;private;1;32;/**  * Make a Saxon TransformerFactory more JAXP compliant by configuring it to  * send &lt.xsl:message&gt. output to the ErrorListener.  */ ;/**  * Make a Saxon TransformerFactory more JAXP compliant by configuring it to  * send &lt.xsl:message&gt. output to the ErrorListener.  */ private void configureSaxonTransformerFactory(TransformerFactory factory) {     // check whether we have a Saxon TransformerFactory ("net.sf.saxon" for open source editions (HE / B)     // and "com.saxonica" for commercial editions (PE / EE / SA))     Class<?> factoryClass = factory.getClass().     if (factoryClass.getName().startsWith("net.sf.saxon") || factoryClass.getName().startsWith("com.saxonica")) {         // just in case there are multiple class loaders with different Saxon versions, use the         // TransformerFactory's class loader to find Saxon support classes         ClassLoader loader = factoryClass.getClassLoader().         // try to find Saxon's MessageWarner class that redirects <xsl:message> to the ErrorListener         Class<?> messageWarner = null.         try {             // Saxon >= 9.3             messageWarner = loader.loadClass("net.sf.saxon.serialize.MessageWarner").         } catch (ClassNotFoundException cnfe) {             try {                 // Saxon < 9.3 (including Saxon-B / -SA)                 messageWarner = loader.loadClass("net.sf.saxon.event.MessageWarner").             } catch (ClassNotFoundException cnfe2) {                 LOG.warn("Error loading Saxon's net.sf.saxon.serialize.MessageWarner class from the classpath!" + " <xsl:message> output will not be redirected to the ErrorListener!").             }         }         if (messageWarner != null) {             // set net.sf.saxon.FeatureKeys.MESSAGE_EMITTER_CLASS             factory.setAttribute("http://saxon.sf.net/feature/messageEmitterClass", messageWarner.getName()).         }     } }
false;public;0;4;;public Document createDocument() throws ParserConfigurationException {     DocumentBuilder builder = createDocumentBuilder().     return builder.newDocument(). }
false;public;0;3;;public DocumentBuilder createDocumentBuilder() throws ParserConfigurationException {     return createDocumentBuilder(getDocumentBuilderFactory()). }
false;public;0;6;;public DocumentBuilderFactory getDocumentBuilderFactory() {     if (documentBuilderFactory == null) {         documentBuilderFactory = createDocumentBuilderFactory().     }     return documentBuilderFactory. }
false;public;1;5;;public DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory) throws ParserConfigurationException {     DocumentBuilder builder = factory.newDocumentBuilder().     builder.setErrorHandler(DOCUMENT_BUILDER_LOGGING_ERROR_HANDLER).     return builder. }
false;protected;1;29;;protected void setupFeatures(DocumentBuilderFactory factory) {     Properties properties = System.getProperties().     List<String> features = new ArrayList<>().     for (Map.Entry<Object, Object> prop : properties.entrySet()) {         String key = (String) prop.getKey().         if (key.startsWith(DOCUMENT_BUILDER_FACTORY_FEATURE)) {             String uri = StringHelper.after(key, ":").             Boolean value = Boolean.valueOf((String) prop.getValue()).             try {                 factory.setFeature(uri, value).                 features.add("feature " + uri + " value " + value).             } catch (ParserConfigurationException e) {                 LOG.warn("DocumentBuilderFactory doesn't support the feature {} with value {}, due to {}.", uri, value, e).             }         }     }     if (features.size() > 0) {         StringBuilder featureString = new StringBuilder().         // just log the configured feature         for (String feature : features) {             if (featureString.length() != 0) {                 featureString.append(", ").             }             featureString.append(feature).         }         LOG.info("DocumentBuilderFactory has been set with features {{}}.", featureString).     } }
false;public;1;4;;@Override public void warning(SAXParseException exception) throws SAXException {     LOG.warn(exception.getMessage(), exception). }
false;public;1;4;;@Override public void error(SAXParseException exception) throws SAXException {     LOG.error(exception.getMessage(), exception). }
false;public;1;4;;@Override public void fatalError(SAXParseException exception) throws SAXException {     LOG.error(exception.getMessage(), exception). }
false;public;1;4;;@Override public void warning(TransformerException e) throws TransformerException {     LOG.warn(e.getMessage(), e). }
false;public;1;4;;@Override public void error(TransformerException e) throws TransformerException {     LOG.error(e.getMessage(), e). }
false;public;1;4;;@Override public void fatalError(TransformerException e) throws TransformerException {     LOG.error(e.getMessage(), e). }
