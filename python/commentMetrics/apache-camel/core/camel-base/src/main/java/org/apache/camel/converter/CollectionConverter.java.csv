commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;4;/**  * Converts a collection to an array  */ ;/**  * Converts a collection to an array  */ @Converter public static Object[] toArray(Collection<?> value) {     return value.toArray(). }
true;public,static;1;4;/**  * Converts an array to a collection  */ ;/**  * Converts an array to a collection  */ @Converter public static List<Object> toList(Object[] array) {     return Arrays.asList(array). }
true;public,static;1;4;/**  * Converts a collection to a List if it is not already  */ ;/**  * Converts a collection to a List if it is not already  */ @Converter public static <T> List<T> toList(Collection<T> collection) {     return new ArrayList<>(collection). }
true;public,static;1;8;/**  * Converts an {@link Iterator} to a {@link ArrayList}  */ ;/**  * Converts an {@link Iterator} to a {@link ArrayList}  */ @Converter public static <T> ArrayList<T> toArrayList(Iterator<T> it) {     ArrayList<T> list = new ArrayList<>().     while (it.hasNext()) {         list.add(it.next()).     }     return list. }
false;public,static;1;6;;@Converter public static Set<Object> toSet(Object[] array) {     Set<Object> answer = new HashSet<>().     answer.addAll(Arrays.asList(array)).     return answer. }
false;public,static;1;4;;@Converter public static <T> Set<T> toSet(Collection<T> collection) {     return new HashSet<>(collection). }
false;public,static;1;4;;@Converter public static <K, V> Set<Map.Entry<K, V>> toSet(Map<K, V> map) {     return map.entrySet(). }
false;public,static;1;6;;@Converter public static Properties toProperties(Map<Object, Object> map) {     Properties answer = new Properties().     answer.putAll(map).     return answer. }
false;public,static;1;4;;@Converter public static <K, V> Hashtable<K, V> toHashtable(Map<? extends K, ? extends V> map) {     return new Hashtable<>(map). }
false;public,static;1;4;;@Converter public static <K, V> HashMap<K, V> toHashMap(Map<? extends K, ? extends V> map) {     return new HashMap<>(map). }
true;public,static;1;11;/**  * Converts an {@link Iterable} into a {@link List}  */ ;/**  * Converts an {@link Iterable} into a {@link List}  */ @Converter public static <T> List<T> toList(Iterable<T> iterable) {     if (iterable instanceof List) {         return (List<T>) iterable.     }     List<T> result = new LinkedList<>().     for (T value : iterable) {         result.add(value).     }     return result. }
