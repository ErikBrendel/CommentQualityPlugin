commented;modifiers;parameterAmount;loc;comment;code
false;public;2;38;;@Converter public String toString(NodeList nodeList, Exchange exchange) throws TransformerException {     // converting NodeList to String is more tricky     // sometimes the NodeList is a Node which we can then leverage     // the XML converter to turn into XML incl. tags     StringBuilder buffer = new StringBuilder().     // use XML converter at first since it preserves tag names     boolean found = false.     if (nodeList instanceof Node) {         Node node = (Node) nodeList.         String s = toString(node, exchange).         if (org.apache.camel.util.ObjectHelper.isNotEmpty(s)) {             found = true.             buffer.append(s).         }     } else {         // use XML converter at first since it preserves tag names         int size = nodeList.getLength().         for (int i = 0. i < size. i++) {             Node node = nodeList.item(i).             String s = toString(node, exchange).             if (org.apache.camel.util.ObjectHelper.isNotEmpty(s)) {                 found = true.                 buffer.append(s).             }         }     }     // used an xpath to select an attribute or text() or something     if (!found) {         append(buffer, nodeList).     }     return buffer.toString(). }
false;private;2;19;;private String toString(Node node, Exchange exchange) throws TransformerException {     String s.     if (node instanceof Text) {         Text textnode = (Text) node.         StringBuilder b = new StringBuilder().         b.append(textnode.getNodeValue()).         textnode = (Text) textnode.getNextSibling().         while (textnode != null) {             b.append(textnode.getNodeValue()).             textnode = (Text) textnode.getNextSibling().         }         s = b.toString().     } else {         s = xml.toString(node, exchange).     }     return s. }
false;public,static;1;7;;@Converter public static Integer toInteger(NodeList nodeList) {     StringBuilder buffer = new StringBuilder().     append(buffer, nodeList).     String s = buffer.toString().     return Integer.valueOf(s). }
false;public,static;1;7;;@Converter public static Long toLong(NodeList nodeList) {     StringBuilder buffer = new StringBuilder().     append(buffer, nodeList).     String s = buffer.toString().     return Long.valueOf(s). }
false;public,static;1;9;;@Converter public static List<?> toList(NodeList nodeList) {     List<Object> answer = new ArrayList<>().     Iterator<?> it = ObjectHelper.createIterator(nodeList).     while (it.hasNext()) {         answer.add(it.next()).     }     return answer. }
false;public;2;4;;@Converter public InputStream toInputStream(NodeList nodeList, Exchange exchange) throws TransformerException, UnsupportedEncodingException {     return new ByteArrayInputStream(toByteArray(nodeList, exchange)). }
false;public;2;5;;@Converter public byte[] toByteArray(NodeList nodeList, Exchange exchange) throws TransformerException, UnsupportedEncodingException {     String data = toString(nodeList, exchange).     return data.getBytes(ExchangeHelper.getCharsetName(exchange)). }
false;private,static;2;6;;private static void append(StringBuilder buffer, NodeList nodeList) {     int size = nodeList.getLength().     for (int i = 0. i < size. i++) {         append(buffer, nodeList.item(i)).     } }
false;private,static;2;12;;private static void append(StringBuilder buffer, Node node) {     if (node instanceof Text) {         Text text = (Text) node.         buffer.append(text.getTextContent()).     } else if (node instanceof Attr) {         Attr attribute = (Attr) node.         buffer.append(attribute.getTextContent()).     } else if (node instanceof Element) {         Element element = (Element) node.         append(buffer, element.getChildNodes()).     } }
