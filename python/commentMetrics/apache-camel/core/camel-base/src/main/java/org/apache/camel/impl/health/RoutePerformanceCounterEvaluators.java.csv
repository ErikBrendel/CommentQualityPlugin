commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;// ******************************** // Helpers // ******************************** public static PerformanceCounterEvaluator<ManagedRouteMBean> exchangesFailed(long threshold) {     return new ExchangesFailed(threshold). }
false;public,static;1;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> exchangesInflight(long threshold) {     return new ExchangesInflight(threshold). }
false;public,static;1;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> redeliveries(long threshold) {     return new Redeliveries(threshold). }
false;public,static;1;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> externalRedeliveries(long threshold) {     return new ExternalRedeliveries(threshold). }
false;public,static;2;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> lastProcessingTime(long timeThreshold, int failuresThreshold) {     return new LastProcessingTime(timeThreshold, failuresThreshold). }
false;public,static;2;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> minProcessingTime(long timeThreshold, int failuresThreshold) {     return new MinProcessingTime(timeThreshold, failuresThreshold). }
false;public,static;2;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> meanProcessingTime(long timeThreshold, int failuresThreshold) {     return new MeanProcessingTime(timeThreshold, failuresThreshold). }
false;public,static;2;3;;public static PerformanceCounterEvaluator<ManagedRouteMBean> maxProcessingTime(long timeThreshold, int failuresThreshold) {     return new MaxProcessingTime(timeThreshold, failuresThreshold). }
false;public;3;13;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getExchangesFailed().         if (value > threshold) {             builder.down().         }         builder.detail("exchanges.failed", value).         builder.detail("exchanges.failed.threshold", threshold).     } catch (Exception e) {     } }
false;public;3;13;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getExchangesInflight().         if (value > threshold) {             builder.down().         }         builder.detail("exchanges.inflight", value).         builder.detail("exchanges.inflight.threshold", threshold).     } catch (Exception e) {     } }
false;public;3;13;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getRedeliveries().         if (value > threshold) {             builder.down().         }         builder.detail("exchanges.redeliveries", value).         builder.detail("exchanges.redeliveries.threshold", threshold).     } catch (Exception e) {     } }
false;public;3;13;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getExternalRedeliveries().         if (value > threshold) {             builder.down().         }         builder.detail("exchanges.external-redeliveries", value).         builder.detail("exchanges.external-redeliveries.threshold", threshold).     } catch (Exception e) {     } }
false;public;3;20;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getLastProcessingTime().         if (value > timeThreshold) {             failureCount++.             if (failureCount > failuresThreshold) {                 builder.down().             }         } else {             failureCount = 0.         }         builder.detail("exchanges.last-processing-time", value).         builder.detail("exchanges.last-processing-time.threshold.time", timeThreshold).         builder.detail("exchanges.last-processing-time.threshold.failures", failuresThreshold).     } catch (Exception e) {     } }
false;public;3;20;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getMinProcessingTime().         if (value > timeThreshold) {             failureCount++.             if (failureCount > failuresThreshold) {                 builder.down().             }         } else {             failureCount = 0.         }         builder.detail("exchanges.min-processing-time", value).         builder.detail("exchanges.min-processing-time.threshold.time", timeThreshold).         builder.detail("exchanges.min-processing-time.threshold.failures", failuresThreshold).     } catch (Exception e) {     } }
false;public;3;20;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getMeanProcessingTime().         if (value > timeThreshold) {             failureCount++.             if (failureCount > failuresThreshold) {                 builder.down().             }         } else {             failureCount = 0.         }         builder.detail("exchanges.mean-processing-time", value).         builder.detail("exchanges.mean-processing-time.threshold.time", timeThreshold).         builder.detail("exchanges.mean-processing-time.threshold.failures", failuresThreshold).     } catch (Exception e) {     } }
false;public;3;20;;@Override public void test(ManagedRouteMBean counter, HealthCheckResultBuilder builder, Map<String, Object> options) {     try {         long value = counter.getMaxProcessingTime().         if (value > timeThreshold) {             failureCount++.             if (failureCount > failuresThreshold) {                 builder.down().             }         } else {             failureCount = 0.         }         builder.detail("exchanges.max-processing-time", value).         builder.detail("exchanges.max-processing-time.threshold.time", timeThreshold).         builder.detail("exchanges.max-processing-time.threshold.failures", failuresThreshold).     } catch (Exception e) {     } }
