commented;modifiers;parameterAmount;loc;comment;code
false;public,final;1;16;;// ************************************ // Properties // ************************************ @Override public final void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext.     for (HealthCheck check : checks) {         if (check instanceof CamelContextAware) {             ((CamelContextAware) check).setCamelContext(camelContext).         }     }     for (HealthCheckRepository repository : repositories) {         if (repository instanceof CamelContextAware) {             ((CamelContextAware) repository).setCamelContext(camelContext).         }     } }
false;public,final;0;4;;@Override public final CamelContext getCamelContext() {     return camelContext. }
false;public;1;13;;@Override public boolean register(HealthCheck check) {     boolean result = checks.add(check).     if (result) {         if (check instanceof CamelContextAware) {             ((CamelContextAware) check).setCamelContext(camelContext).         }         LOGGER.debug("HealthCheck with id {} successfully registered", check.getId()).     }     return result. }
false;public;1;9;;@Override public boolean unregister(HealthCheck check) {     boolean result = checks.remove(check).     if (result) {         LOGGER.debug("HealthCheck with id {} successfully un-registered", check.getId()).     }     return result. }
false;public;1;5;;@Override public void setRepositories(Collection<HealthCheckRepository> repositories) {     repositories.clear().     repositories.addAll(repositories). }
false;public;0;4;;@Override public Collection<HealthCheckRepository> getRepositories() {     return Collections.unmodifiableCollection(repositories). }
false;public;1;13;;@Override public boolean addRepository(HealthCheckRepository repository) {     boolean result = repositories.add(repository).     if (result) {         if (repository instanceof CamelContextAware) {             ((CamelContextAware) repository).setCamelContext(getCamelContext()).             LOGGER.debug("HealthCheckRepository {} successfully registered", repository).         }     }     return result. }
false;public;1;9;;@Override public boolean removeRepository(HealthCheckRepository repository) {     boolean result = repositories.remove(repository).     if (result) {         LOGGER.debug("HealthCheckRepository with {} successfully un-registered", repository).     }     return result. }
false;public;0;7;;// ************************************ //  // ************************************ @Override public Stream<HealthCheck> stream() {     return Stream.concat(checks.stream(), repositories.stream().flatMap(HealthCheckRepository::stream)).distinct(). }
