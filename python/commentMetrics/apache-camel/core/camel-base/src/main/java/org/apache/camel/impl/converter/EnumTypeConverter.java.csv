commented;modifiers;parameterAmount;loc;comment;code
false;public;3;3;;public <T> T convertTo(Class<T> type, Exchange exchange, Object value) {     return EnumTypeConverter.doConvertTo(type, exchange, value). }
false;public,static;3;24;;@SuppressWarnings("unchecked") public static <T> T doConvertTo(Class<T> type, Exchange exchange, Object value) {     if (type.isEnum()) {         String text = value.toString().         Class<Enum> enumClass = (Class<Enum>) type.         // we want to match case insensitive for enums         for (Enum enumValue : enumClass.getEnumConstants()) {             if (enumValue.name().equalsIgnoreCase(text)) {                 return type.cast(enumValue).             }         }         // fallback to the JDK valueOf which is case-sensitive and throws exception if not found         Method method.         try {             method = type.getMethod("valueOf", String.class).         } catch (NoSuchMethodException e) {             throw new RuntimeCamelException("Could not find valueOf method on enum type: " + type.getName()).         }         return (T) ObjectHelper.invokeMethod(method, null, text).     }     return null. }
