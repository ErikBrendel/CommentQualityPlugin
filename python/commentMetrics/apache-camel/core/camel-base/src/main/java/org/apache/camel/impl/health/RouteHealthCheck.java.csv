commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;47;;@Override protected void doCall(HealthCheckResultBuilder builder, Map<String, Object> options) {     if (route.getId() != null) {         final CamelContext context = route.getRouteContext().getCamelContext().         final ServiceStatus status = context.getRouteController().getRouteStatus(route.getId()).         builder.detail("route.id", route.getId()).         builder.detail("route.status", status.name()).         builder.detail("route.context.name", context.getName()).         if (route.getRouteContext().getRouteController() != null || route.getRouteContext().isAutoStartup()) {             if (status.isStarted()) {                 builder.up().             } else if (status.isStopped()) {                 builder.down().                 builder.message(String.format("Route %s has status %s", route.getId(), status.name())).             }         } else {             LOGGER.debug("Route {} marked as UP (controlled={}, auto-startup={})", route.getId(), route.getRouteContext().getRouteController() != null, route.getRouteContext().isAutoStartup()).             // Assuming that if no route controller is configured or if a             // route is configured to not to automatically start, then the             // route is always up as it is externally managed.             builder.up().         }         if (builder.state() != State.DOWN) {             // If JMX is enabled, use the Managed MBeans to determine route             // health based on performance counters.             ManagedRouteMBean managedRoute = context.getExtension(ManagedCamelContext.class).getManagedRoute(route.getId()).             if (managedRoute != null && !evaluators.isEmpty()) {                 for (PerformanceCounterEvaluator<ManagedRouteMBean> evaluator : evaluators) {                     evaluator.test(managedRoute, builder, options).                     if (builder.state() == State.DOWN) {                         break.                     }                 }             }         }     } }
