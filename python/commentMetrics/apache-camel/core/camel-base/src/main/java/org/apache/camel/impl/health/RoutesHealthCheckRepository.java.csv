commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.context = camelContext. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return context. }
false;public;1;3;;public void setBlacklistedRoutes(Collection<String> blacklistedRoutes) {     blacklistedRoutes.forEach(this::addBlacklistedRoute). }
false;public;1;7;;public void addBlacklistedRoute(String routeId) {     if (this.blacklist == null) {         this.blacklist = new HashSet<>().     }     this.blacklist.add(routeId). }
false;public;1;3;;public void setEvaluators(Collection<PerformanceCounterEvaluator<ManagedRouteMBean>> evaluators) {     evaluators.forEach(this::addEvaluator). }
false;public;1;7;;public void addEvaluator(PerformanceCounterEvaluator<ManagedRouteMBean> evaluator) {     if (this.evaluators == null) {         this.evaluators = new CopyOnWriteArrayList<>().     }     this.evaluators.add(evaluator). }
false;public;1;3;;public void setRoutesEvaluators(Map<String, Collection<PerformanceCounterEvaluator<ManagedRouteMBean>>> evaluators) {     evaluators.forEach(this::setRouteEvaluators). }
false;public;2;3;;public void setRouteEvaluators(String routeId, Collection<PerformanceCounterEvaluator<ManagedRouteMBean>> evaluators) {     evaluators.forEach(evaluator -> addRouteEvaluator(routeId, evaluator)). }
false;public;2;7;;public void addRouteEvaluator(String routeId, PerformanceCounterEvaluator<ManagedRouteMBean> evaluator) {     if (this.evaluatorMap == null) {         this.evaluatorMap = new ConcurrentHashMap<>().     }     this.evaluatorMap.computeIfAbsent(routeId, id -> new CopyOnWriteArrayList<>()).add(evaluator). }
false;public;0;5;;public Stream<PerformanceCounterEvaluator<ManagedRouteMBean>> evaluators() {     return this.evaluators != null ? this.evaluators.stream() : Stream.empty(). }
false;public;1;5;;public Stream<PerformanceCounterEvaluator<ManagedRouteMBean>> evaluators(String routeId) {     return this.evaluatorMap != null ? evaluatorMap.getOrDefault(routeId, Collections.emptyList()).stream() : Stream.empty(). }
false;public;0;21;;@Override public Stream<HealthCheck> stream() {     //      return this.context != null ? this.context.getRoutes().stream().filter(route -> route.getId() != null).filter(route -> isNotBlacklisted(route)).map(this::toRouteHealthCheck) : Stream.empty(). }
false;private;1;5;;// ***************************** // Helpers // ***************************** private boolean isNotBlacklisted(Route route) {     return this.blacklist != null ? !this.blacklist.contains(route.getId()) : true. }
false;private;1;17;;private HealthCheck toRouteHealthCheck(Route route) {     return checks.computeIfAbsent(route, r -> {         HealthCheck check = new RouteHealthCheck(route, evaluatorMap != null ? evaluatorMap.getOrDefault(r.getId(), evaluators) : evaluators).         check.getConfiguration().setEnabled(true).         return check.     }). }
