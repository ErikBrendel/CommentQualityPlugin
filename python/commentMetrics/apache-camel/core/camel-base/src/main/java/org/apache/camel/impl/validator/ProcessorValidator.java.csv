commented;modifiers;parameterAmount;loc;comment;code
true;public;2;25;/**  * Perform content validation with specified type using Processor.  *  * @param message message to apply validation  * @param type 'from' data type  */ ;/**  * Perform content validation with specified type using Processor.  *  * @param message message to apply validation  * @param type 'from' data type  */ @Override public void validate(Message message, DataType type) throws ValidationException {     Exchange exchange = message.getExchange().     LOG.debug("Sending to validate processor '{}'", processor).     // create a new exchange to use during validation to avoid side-effects on original exchange     DefaultExchange validateExchange = new DefaultExchange(exchange).     validateExchange.setIn(message).     validateExchange.setProperties(exchange.getProperties()).     try {         processor.process(validateExchange).         // if the validation failed then propagate the exception         if (validateExchange.getException() != null) {             exchange.setException(validateExchange.getException()).         }     } catch (Exception e) {         if (e instanceof ValidationException) {             throw (ValidationException) e.         } else {             throw new ValidationException(String.format("Validation failed for '%s'", type), exchange, e).         }     } }
true;public;1;5;/**  * Set processor to use  *  * @param processor Processor  * @return this ProcessorTransformer instance  */ ;/**  * Set processor to use  *  * @param processor Processor  * @return this ProcessorTransformer instance  */ public ProcessorValidator setProcessor(Processor processor) {     this.processor = processor.     this.validatorString = null.     return this. }
false;public;0;8;;@Override public String toString() {     if (validatorString == null) {         validatorString = String.format("ProcessorValidator[type='%s', processor='%s']", getType(), processor).     }     return validatorString. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(processor, "processor", this).     ServiceHelper.startService(this.processor). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(this.processor). }
