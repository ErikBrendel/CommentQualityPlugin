commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String run() {     return System.getProperty("org.apache.cxf.staxutils.pool-size", "-1"). }
false;public;2;9;;@Converter public XMLEventWriter createXMLEventWriter(OutputStream out, Exchange exchange) throws XMLStreamException {     XMLOutputFactory factory = getOutputFactory().     try {         return factory.createXMLEventWriter(IOHelper.buffered(out), ExchangeHelper.getCharsetName(exchange)).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;1;9;;@Converter public XMLEventWriter createXMLEventWriter(Writer writer) throws XMLStreamException {     XMLOutputFactory factory = getOutputFactory().     try {         return factory.createXMLEventWriter(IOHelper.buffered(writer)).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;1;9;;@Converter public XMLEventWriter createXMLEventWriter(Result result) throws XMLStreamException {     XMLOutputFactory factory = getOutputFactory().     try {         return factory.createXMLEventWriter(result).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;2;9;;@Converter public XMLStreamWriter createXMLStreamWriter(OutputStream outputStream, Exchange exchange) throws XMLStreamException {     XMLOutputFactory factory = getOutputFactory().     try {         return factory.createXMLStreamWriter(IOHelper.buffered(outputStream), ExchangeHelper.getCharsetName(exchange)).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;1;9;;@Converter public XMLStreamWriter createXMLStreamWriter(Writer writer) throws XMLStreamException {     XMLOutputFactory factory = getOutputFactory().     try {         return factory.createXMLStreamWriter(IOHelper.buffered(writer)).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;1;9;;@Converter public XMLStreamWriter createXMLStreamWriter(Result result) throws XMLStreamException {     XMLOutputFactory factory = getOutputFactory().     try {         return factory.createXMLStreamWriter(result).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;2;14;;@Converter public XMLStreamReader createXMLStreamReader(InputStream in, Exchange exchange) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         String charsetName = ExchangeHelper.getCharsetName(exchange, false).         if (charsetName == null) {             return factory.createXMLStreamReader(IOHelper.buffered(in)).         } else {             return factory.createXMLStreamReader(IOHelper.buffered(in), charsetName).         }     } finally {         returnXMLInputFactory(factory).     } }
false;public;2;9;;@Converter public XMLStreamReader createXMLStreamReader(File file, Exchange exchange) throws XMLStreamException, FileNotFoundException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLStreamReader(IOHelper.buffered(new FileInputStream(file)), ExchangeHelper.getCharsetName(exchange)).     } finally {         returnXMLInputFactory(factory).     } }
false;public;1;9;;@Converter public XMLStreamReader createXMLStreamReader(Reader reader) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLStreamReader(IOHelper.buffered(reader)).     } finally {         returnXMLInputFactory(factory).     } }
false;public;1;9;;@Converter public XMLStreamReader createXMLStreamReader(Source in) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLStreamReader(in).     } finally {         returnXMLInputFactory(factory).     } }
false;public;1;9;;@Converter public XMLStreamReader createXMLStreamReader(String string) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLStreamReader(new StringReader(string)).     } finally {         returnXMLInputFactory(factory).     } }
false;public;2;14;;@Converter public XMLEventReader createXMLEventReader(InputStream in, Exchange exchange) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         String charsetName = ExchangeHelper.getCharsetName(exchange, false).         if (charsetName == null) {             return factory.createXMLEventReader(IOHelper.buffered(in)).         } else {             return factory.createXMLEventReader(IOHelper.buffered(in), charsetName).         }     } finally {         returnXMLInputFactory(factory).     } }
false;public;2;9;;@Converter public XMLEventReader createXMLEventReader(File file, Exchange exchange) throws XMLStreamException, FileNotFoundException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLEventReader(IOHelper.buffered(new FileInputStream(file)), ExchangeHelper.getCharsetName(exchange)).     } finally {         returnXMLInputFactory(factory).     } }
false;public;1;9;;@Converter public XMLEventReader createXMLEventReader(Reader reader) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLEventReader(IOHelper.buffered(reader)).     } finally {         returnXMLInputFactory(factory).     } }
false;public;1;9;;@Converter public XMLEventReader createXMLEventReader(XMLStreamReader reader) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLEventReader(reader).     } finally {         returnXMLInputFactory(factory).     } }
false;public;1;9;;@Converter public XMLEventReader createXMLEventReader(Source in) throws XMLStreamException {     XMLInputFactory factory = getInputFactory().     try {         return factory.createXMLEventReader(in).     } finally {         returnXMLInputFactory(factory).     } }
false;public;2;10;;@Converter public InputStream createInputStream(XMLStreamReader reader, Exchange exchange) {     XMLOutputFactory factory = getOutputFactory().     try {         String charsetName = ExchangeHelper.getCharsetName(exchange, false).         return new XMLStreamReaderInputStream(reader, charsetName, factory).     } finally {         returnXMLOutputFactory(factory).     } }
false;public;2;9;;@Converter public Reader createReader(XMLStreamReader reader, Exchange exchange) {     XMLOutputFactory factory = getOutputFactory().     try {         return new XMLStreamReaderReader(reader, factory).     } finally {         returnXMLOutputFactory(factory).     } }
false;private,static;1;3;;private static boolean isWoodstox(Object factory) {     return factory.getClass().getPackage().getName().startsWith("com.ctc.wstx"). }
false;private;0;7;;private XMLInputFactory getXMLInputFactory() {     XMLInputFactory f = INPUT_FACTORY_POOL.poll().     if (f == null) {         f = createXMLInputFactory(true).     }     return f. }
false;private;1;5;;private void returnXMLInputFactory(XMLInputFactory factory) {     if (factory != inputFactory) {         INPUT_FACTORY_POOL.offer(factory).     } }
false;private;0;7;;private XMLOutputFactory getXMLOutputFactory() {     XMLOutputFactory f = OUTPUT_FACTORY_POOL.poll().     if (f == null) {         f = XMLOutputFactory.newInstance().     }     return f. }
false;private;1;5;;private void returnXMLOutputFactory(XMLOutputFactory factory) {     if (factory != outputFactory) {         OUTPUT_FACTORY_POOL.offer(factory).     } }
false;public;4;5;;public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace) throws XMLStreamException {     throw new XMLStreamException("Reading external entities is disabled"). }
false;public,static;1;23;;public static XMLInputFactory createXMLInputFactory(boolean nsAware) {     XMLInputFactory factory = XMLInputFactory.newInstance().     setProperty(factory, XMLInputFactory.IS_NAMESPACE_AWARE, nsAware).     setProperty(factory, XMLInputFactory.SUPPORT_DTD, Boolean.FALSE).     setProperty(factory, XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, Boolean.FALSE).     setProperty(factory, XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE).     factory.setXMLResolver(new XMLResolver() {          public Object resolveEntity(String publicID, String systemID, String baseURI, String namespace) throws XMLStreamException {             throw new XMLStreamException("Reading external entities is disabled").         }     }).     if (isWoodstox(factory)) {         // just log a debug as we are good then         LOG.debug("Created Woodstox XMLInputFactory: {}", factory).     } else {         // log a hint that woodstock may be a better factory to use         LOG.info("Created XMLInputFactory: {}. DOMSource/DOMResult may have issues with {}. We suggest using Woodstox.", factory, factory).     }     return factory. }
false;private,static;3;7;;private static void setProperty(XMLInputFactory f, String p, Object o) {     try {         f.setProperty(p, o).     } catch (Throwable t) {     // ignore     } }
false;public;0;6;;// Properties // ------------------------------------------------------------------------- public XMLInputFactory getInputFactory() {     if (inputFactory == null) {         return getXMLInputFactory().     }     return inputFactory. }
false;public;0;6;;public XMLOutputFactory getOutputFactory() {     if (outputFactory == null) {         return getXMLOutputFactory().     }     return outputFactory. }
false;public;1;3;;public void setInputFactory(XMLInputFactory inputFactory) {     this.inputFactory = inputFactory. }
false;public;1;3;;public void setOutputFactory(XMLOutputFactory outputFactory) {     this.outputFactory = outputFactory. }
