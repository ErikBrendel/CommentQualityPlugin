commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getId() {     return id. }
false;public;0;4;;@Override public String getGroup() {     return group. }
false;public;0;4;;@Override public Map<String, Object> getMetaData() {     return Collections.unmodifiableMap(this.meta). }
false;public;0;4;;@Override public HealthCheckConfiguration getConfiguration() {     return this.configuration. }
false;public;1;3;;public void setConfiguration(HealthCheckConfiguration configuration) {     this.configuration = configuration. }
false;public;0;4;;@Override public Result call() {     return call(Collections.emptyMap()). }
false;public;1;97;;@Override public Result call(Map<String, Object> options) {     synchronized (lock) {         final HealthCheckConfiguration conf = getConfiguration().         final HealthCheckResultBuilder builder = HealthCheckResultBuilder.on(this).         final ZonedDateTime now = ZonedDateTime.now().         final boolean enabled = ObjectHelper.supplyIfEmpty(conf.isEnabled(), HealthCheckConfiguration::defaultValueEnabled).         final Duration interval = ObjectHelper.supplyIfEmpty(conf.getInterval(), HealthCheckConfiguration::defaultValueInterval).         final Integer threshold = ObjectHelper.supplyIfEmpty(conf.getFailureThreshold(), HealthCheckConfiguration::defaultValueFailureThreshold).         // Extract relevant information from meta data.         int invocationCount = (Integer) meta.getOrDefault(INVOCATION_COUNT, 0).         int failureCount = (Integer) meta.getOrDefault(FAILURE_COUNT, 0).         String invocationTime = now.format(DateTimeFormatter.ISO_ZONED_DATE_TIME).         boolean call = true.         // Set common meta-data         meta.put(INVOCATION_ATTEMPT_TIME, invocationTime).         if (!enabled) {             LOGGER.debug("health-check {}/{} won't be invoked as not enabled", getGroup(), getId()).             builder.message("Disabled").             builder.detail(CHECK_ENABLED, false).             return builder.unknown().build().         }         // again without violating the interval configuration.         if (lastResult != null && lastInvocation != null && !interval.isZero()) {             Duration elapsed = Duration.between(lastInvocation, now).             if (elapsed.compareTo(interval) < 0) {                 LOGGER.debug("health-check {}/{} won't be invoked as interval ({}) is not yet expired (last-invocation={})", getGroup(), getId(), elapsed, lastInvocation).                 call = false.             }         }         // Invoke the check.         if (call) {             LOGGER.debug("Invoke health-check {}/{}", getGroup(), getId()).             doCall(builder, options).             // State should be set here             ObjectHelper.notNull(builder.state(), "Response State").             if (builder.state() == State.DOWN) {                 // used to avoid false positive in case of glitches.                 if (failureCount++ < threshold) {                     LOGGER.debug("Health-check {}/{} has status DOWN but failure count ({}) is less than configured threshold ({})", getGroup(), getId(), failureCount, threshold).                     builder.up().                 }             } else {                 failureCount = 0.             }             meta.put(INVOCATION_TIME, invocationTime).             meta.put(FAILURE_COUNT, failureCount).             meta.put(INVOCATION_COUNT, ++invocationCount).             // Copy some of the meta-data bits to the response attributes so the             // response caches the health-check state at the time of the invocation.             builder.detail(INVOCATION_TIME, meta.get(INVOCATION_TIME)).             builder.detail(INVOCATION_COUNT, meta.get(INVOCATION_COUNT)).             builder.detail(FAILURE_COUNT, meta.get(FAILURE_COUNT)).             // update last invocation time.             lastInvocation = now.         } else if (lastResult != null) {             lastResult.getMessage().ifPresent(builder::message).             lastResult.getError().ifPresent(builder::error).             builder.state(lastResult.getState()).             builder.details(lastResult.getDetails()).         }         lastResult = builder.build().         return lastResult.     } }
false;public;1;13;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     AbstractHealthCheck check = (AbstractHealthCheck) o.     return id != null ? id.equals(check.id) : check.id == null. }
false;public;0;4;;@Override public int hashCode() {     return id != null ? id.hashCode() : 0. }
false;protected,final;2;3;;protected final void addMetaData(String key, Object value) {     meta.put(key, value). }
true;protected,abstract;2;1;/**  * Invoke the health check.  *  * @see {@link HealthCheck#call(Map)}  */ ;/**  * Invoke the health check.  *  * @see {@link HealthCheck#call(Map)}  */ protected abstract void doCall(HealthCheckResultBuilder builder, Map<String, Object> options).
