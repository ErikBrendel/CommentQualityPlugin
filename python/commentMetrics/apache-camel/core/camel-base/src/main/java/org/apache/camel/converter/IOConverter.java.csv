commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;@Converter public static InputStream toInputStream(URL url) throws IOException {     return IOHelper.buffered(url.openStream()). }
false;public,static;1;4;;@Converter public static InputStream toInputStream(File file) throws IOException {     return IOHelper.buffered(new FileInputStream(file)). }
true;public,static;2;7;/**  * Converts the given {@link File} with the given charset to {@link InputStream} with the JVM default charset  *  * @param file the file to be converted  * @param charset the charset the file is read with  * @return the input stream with the JVM default charset  */ ;/**  * Converts the given {@link File} with the given charset to {@link InputStream} with the JVM default charset  *  * @param file the file to be converted  * @param charset the charset the file is read with  * @return the input stream with the JVM default charset  */ public static InputStream toInputStream(File file, String charset) throws IOException {     if (charset != null) {         return new IOHelper.EncodingInputStream(file, charset).     } else {         return toInputStream(file).     } }
false;public,static;2;4;;@Converter public static BufferedReader toReader(File file, Exchange exchange) throws IOException {     return IOHelper.toReader(file, ExchangeHelper.getCharsetName(exchange)). }
false;public,static;1;4;;@Converter public static File toFile(String name) {     return new File(name). }
false;public,static;1;4;;@Converter public static OutputStream toOutputStream(File file) throws FileNotFoundException {     return IOHelper.buffered(new FileOutputStream(file)). }
false;public,static;2;5;;@Converter public static BufferedWriter toWriter(File file, Exchange exchange) throws IOException {     FileOutputStream os = new FileOutputStream(file, false).     return toWriter(os, ExchangeHelper.getCharsetName(exchange)). }
false;public,static;3;3;;public static BufferedWriter toWriter(File file, boolean append, String charset) throws IOException {     return toWriter(new FileOutputStream(file, append), charset). }
false;public,static;2;3;;public static BufferedWriter toWriter(FileOutputStream os, String charset) throws IOException {     return IOHelper.buffered(new IOHelper.EncodingFileWriter(os, charset)). }
false;public,static;2;4;;@Converter public static Reader toReader(InputStream in, Exchange exchange) throws IOException {     return IOHelper.buffered(new InputStreamReader(in, ExchangeHelper.getCharsetName(exchange))). }
false;public,static;2;4;;@Converter public static Reader toReader(byte[] data, Exchange exchange) throws IOException {     return toReader(new ByteArrayInputStream(data), exchange). }
false;public,static;2;4;;@Converter public static Writer toWriter(OutputStream out, Exchange exchange) throws IOException {     return IOHelper.buffered(new OutputStreamWriter(out, ExchangeHelper.getCharsetName(exchange))). }
false;public,static;1;6;;@Converter public static StringReader toReader(String text) {     // over as a whole     return new StringReader(text). }
false;public,static;2;4;;@Converter public static InputStream toInputStream(String text, Exchange exchange) throws IOException {     return toInputStream(text.getBytes(ExchangeHelper.getCharsetName(exchange))). }
false;public,static;2;4;;@Converter public static InputStream toInputStream(StringBuffer buffer, Exchange exchange) throws IOException {     return toInputStream(buffer.toString(), exchange). }
false;public,static;2;4;;@Converter public static InputStream toInputStream(StringBuilder builder, Exchange exchange) throws IOException {     return toInputStream(builder.toString(), exchange). }
false;public,static;2;4;;@Converter public static InputStream toInputStream(BufferedReader buffer, Exchange exchange) throws IOException {     return toInputStream(toString(buffer), exchange). }
false;public,static;2;4;;@Converter public static String toString(byte[] data, Exchange exchange) throws IOException {     return new String(data, ExchangeHelper.getCharsetName(exchange)). }
false;public,static;2;4;;@Converter public static String toString(File file, Exchange exchange) throws IOException {     return toString(toReader(file, exchange)). }
false;public,static;1;9;;@Converter public static byte[] toByteArray(File file) throws IOException {     InputStream is = toInputStream(file).     try {         return toBytes(is).     } finally {         IOHelper.close(is, "file", LOG).     } }
false;public,static;2;4;;@Converter public static byte[] toByteArray(Reader reader, Exchange exchange) throws IOException {     return toByteArray(IOHelper.buffered(reader), exchange). }
false;public,static;2;9;;@Converter public static String toString(URL url, Exchange exchange) throws IOException {     InputStream is = toInputStream(url).     try {         return toString(is, exchange).     } finally {         IOHelper.close(is, "url", LOG).     } }
false;public,static;1;4;;@Converter public static String toString(Reader reader) throws IOException {     return IOHelper.toString(reader). }
false;public,static;1;4;;@Converter public static String toString(BufferedReader reader) throws IOException {     return IOHelper.toString(reader). }
false;public,static;2;5;;@Converter public static byte[] toByteArray(BufferedReader reader, Exchange exchange) throws IOException {     String s = toString(reader).     return toByteArray(s, exchange). }
false;public,static;2;4;;@Converter public static byte[] toByteArray(String value, Exchange exchange) throws IOException {     return value.getBytes(ExchangeHelper.getCharsetName(exchange)). }
false;public,static;2;4;;@Converter public static String toString(InputStream in, Exchange exchange) throws IOException {     return toString(toReader(in, exchange)). }
false;public,static;1;6;;@Converter public static InputStream toInputStream(byte[] data) {     // over as a whole     return new ByteArrayInputStream(data). }
false;public,static;1;8;;@Converter public static ObjectOutput toObjectOutput(OutputStream stream) throws IOException {     if (stream instanceof ObjectOutput) {         return (ObjectOutput) stream.     } else {         return new ObjectOutputStream(IOHelper.buffered(stream)).     } }
false;protected;1;16;;@Override protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {     // need to let Camel be able to resolve class using ClassResolver SPI, to let class loading     // work in OSGi and other containers     Class<?> answer = null.     String name = objectStreamClass.getName().     if (exchange != null) {         LOG.trace("Loading class {} using Camel ClassResolver", name).         answer = exchange.getContext().getClassResolver().resolveClass(name).     }     if (answer == null) {         LOG.trace("Loading class {} using JDK default implementation", name).         answer = super.resolveClass(objectStreamClass).     }     return answer. }
false;public,static;2;25;;@Converter public static ObjectInput toObjectInput(final InputStream stream, final Exchange exchange) throws IOException {     if (stream instanceof ObjectInput) {         return (ObjectInput) stream.     } else {         return new ObjectInputStream(IOHelper.buffered(stream)) {              @Override             protected Class<?> resolveClass(ObjectStreamClass objectStreamClass) throws IOException, ClassNotFoundException {                 // need to let Camel be able to resolve class using ClassResolver SPI, to let class loading                 // work in OSGi and other containers                 Class<?> answer = null.                 String name = objectStreamClass.getName().                 if (exchange != null) {                     LOG.trace("Loading class {} using Camel ClassResolver", name).                     answer = exchange.getContext().getClassResolver().resolveClass(name).                 }                 if (answer == null) {                     LOG.trace("Loading class {} using JDK default implementation", name).                     answer = super.resolveClass(objectStreamClass).                 }                 return answer.             }         }.     } }
false;public,static;1;9;;@Converter public static byte[] toBytes(InputStream stream) throws IOException {     ByteArrayOutputStream bos = new ByteArrayOutputStream().     IOHelper.copy(IOHelper.buffered(stream), bos).     // implementation is noop     return bos.toByteArray(). }
false;public,static;1;4;;@Converter public static byte[] toByteArray(ByteArrayOutputStream os) {     return os.toByteArray(). }
false;public,static;1;6;;@Converter public static ByteBuffer covertToByteBuffer(InputStream is) throws IOException {     ByteArrayOutputStream os = new ByteArrayOutputStream().     IOHelper.copyAndCloseInput(is, os).     return ByteBuffer.wrap(os.toByteArray()). }
false;public,static;2;4;;@Converter public static String toString(ByteArrayOutputStream os, Exchange exchange) throws IOException {     return os.toString(ExchangeHelper.getCharsetName(exchange)). }
false;public,static;1;6;;@Converter public static InputStream toInputStream(ByteArrayOutputStream os) {     // passed over as a whole     return new ByteArrayInputStream(os.toByteArray()). }
false;public,static;1;4;;@Converter public static Properties toProperties(File file) throws IOException {     return toProperties(new FileInputStream(file)). }
false;public,static;1;10;;@Converter public static Properties toProperties(InputStream is) throws IOException {     Properties prop = new Properties().     try {         prop.load(is).     } finally {         IOHelper.close(is).     }     return prop. }
false;public,static;1;10;;@Converter public static Properties toProperties(Reader reader) throws IOException {     Properties prop = new Properties().     try {         prop.load(reader).     } finally {         IOHelper.close(reader).     }     return prop. }
