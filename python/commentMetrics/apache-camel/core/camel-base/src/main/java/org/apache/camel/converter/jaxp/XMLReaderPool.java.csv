commented;modifiers;parameterAmount;loc;comment;code
true;public;0;15;/**  * Returns an XMLReader that can be used exactly once. Calling one of the  * {@code parse} methods returns the reader to the pool. This is useful  * for e.g. SAXSource which bundles an XMLReader with an InputSource that  * can also be consumed just once.  *  * @return the XMLReader  * @throws SAXException  *             see {@link SAXParserFactory#newSAXParser()}  * @throws ParserConfigurationException  *             see {@link SAXParserFactory#newSAXParser()}  */ ;/**  * Returns an XMLReader that can be used exactly once. Calling one of the  * {@code parse} methods returns the reader to the pool. This is useful  * for e.g. SAXSource which bundles an XMLReader with an InputSource that  * can also be consumed just once.  *  * @return the XMLReader  * @throws SAXException  *             see {@link SAXParserFactory#newSAXParser()}  * @throws ParserConfigurationException  *             see {@link SAXParserFactory#newSAXParser()}  */ public XMLReader createXMLReader() throws SAXException, ParserConfigurationException {     XMLReader xmlReader = null.     WeakReference<XMLReader> ref.     while ((ref = pool.poll()) != null) {         if ((xmlReader = ref.get()) != null) {             break.         }     }     if (xmlReader == null) {         xmlReader = saxParserFactory.newSAXParser().getXMLReader().     }     return new OneTimeXMLReader(xmlReader). }
false;private;0;28;;private void release() {     try {         // reset XMLReader to its initial state         for (Map.Entry<String, Boolean> feature : initFeatures.entrySet()) {             try {                 xmlReader.setFeature(feature.getKey(), feature.getValue().booleanValue()).             } catch (Exception e) {             // ignore             }         }         for (Map.Entry<String, Object> property : initProperties.entrySet()) {             try {                 xmlReader.setProperty(property.getKey(), property.getValue()).             } catch (Exception e) {             // ignore             }         }         xmlReader.setContentHandler(initContentHandler).         xmlReader.setDTDHandler(initDtdHandler).         xmlReader.setEntityResolver(initEntityResolver).         xmlReader.setErrorHandler(initErrorHandler).         // return the wrapped instance to the pool         pool.offer(new WeakReference<>(xmlReader)).     } finally {         readerInvalid = true.     } }
false;public;1;4;;@Override public boolean getFeature(String name) throws SAXNotRecognizedException, SAXNotSupportedException {     return xmlReader.getFeature(name). }
false;public;2;9;;@Override public void setFeature(String name, boolean value) throws SAXNotRecognizedException, SAXNotSupportedException {     if (!readerInvalid) {         if (!initFeatures.containsKey(name)) {             initFeatures.put(name, Boolean.valueOf(xmlReader.getFeature(name))).         }         xmlReader.setFeature(name, value).     } }
false;public;1;4;;@Override public Object getProperty(String name) throws SAXNotRecognizedException, SAXNotSupportedException {     return xmlReader.getProperty(name). }
false;public;2;9;;@Override public void setProperty(String name, Object value) throws SAXNotRecognizedException, SAXNotSupportedException {     if (!readerInvalid) {         if (!initProperties.containsKey(name)) {             initProperties.put(name, xmlReader.getProperty(name)).         }         xmlReader.setProperty(name, value).     } }
false;public;0;4;;@Override public ContentHandler getContentHandler() {     return xmlReader.getContentHandler(). }
false;public;1;6;;@Override public void setContentHandler(ContentHandler handler) {     if (!readerInvalid) {         xmlReader.setContentHandler(handler).     } }
false;public;0;4;;@Override public DTDHandler getDTDHandler() {     return xmlReader.getDTDHandler(). }
false;public;1;6;;@Override public void setDTDHandler(DTDHandler handler) {     if (!readerInvalid) {         xmlReader.setDTDHandler(handler).     } }
false;public;0;4;;@Override public EntityResolver getEntityResolver() {     return xmlReader.getEntityResolver(). }
false;public;1;6;;@Override public void setEntityResolver(EntityResolver resolver) {     if (!readerInvalid) {         xmlReader.setEntityResolver(resolver).     } }
false;public;0;4;;@Override public ErrorHandler getErrorHandler() {     return xmlReader.getErrorHandler(). }
false;public;1;6;;@Override public void setErrorHandler(ErrorHandler handler) {     if (!readerInvalid) {         xmlReader.setErrorHandler(handler).     } }
false;public,synchronized;1;9;;@Override public synchronized void parse(InputSource input) throws IOException, SAXException {     checkValid().     try {         xmlReader.parse(input).     } finally {         release().     } }
false;public,synchronized;1;9;;@Override public synchronized void parse(String systemId) throws IOException, SAXException {     checkValid().     try {         xmlReader.parse(systemId).     } finally {         release().     } }
false;private;0;5;;private void checkValid() {     if (readerInvalid) {         throw new IllegalStateException("OneTimeXMLReader can only be used once!").     } }
