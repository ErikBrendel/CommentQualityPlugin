commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;5;/**  * Converts the given value to a boolean, handling strings or Boolean  * objects. otherwise returning false if the value could not be converted to  * a boolean  */ ;/**  * Converts the given value to a boolean, handling strings or Boolean  * objects. otherwise returning false if the value could not be converted to  * a boolean  */ @Converter public static boolean toBool(Object value) {     Boolean answer = toBoolean(value).     return answer != null && answer. }
true;public,static;1;4;/**  * Converts the given value to a Boolean, handling strings or Boolean  * objects. otherwise returning null if the value cannot be converted to a  * boolean  */ ;/**  * Converts the given value to a Boolean, handling strings or Boolean  * objects. otherwise returning null if the value cannot be converted to a  * boolean  */ @Converter public static Boolean toBoolean(Object value) {     return org.apache.camel.util.ObjectHelper.toBoolean(value). }
true;public,static;1;4;/**  * Creates an iterator over the value  */ ;/**  * Creates an iterator over the value  */ @Converter public static Iterator<?> iterator(Object value) {     return ObjectHelper.createIterator(value). }
true;public,static;1;4;/**  * Creates an iterable over the value  */ ;/**  * Creates an iterable over the value  */ @Converter public static Iterable<?> iterable(Object value) {     return ObjectHelper.createIterable(value). }
true;public,static;1;7;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter(allowNull = true) public static Byte toByte(Number value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return null.     }     return value.byteValue(). }
false;public,static;1;4;;@Converter public static Byte toByte(String value) {     return Byte.valueOf(value). }
false;public,static;1;4;;@Converter public static char[] toCharArray(String value) {     return value.toCharArray(). }
false;public,static;1;4;;@Converter public static Character toCharacter(String value) {     return toChar(value). }
false;public,static;1;8;;@Converter public static char toChar(String value) {     // must be string with the length of 1     if (value.length() != 1) {         throw new IllegalArgumentException("String must have exactly a length of 1: " + value).     }     return value.charAt(0). }
false;public,static;1;4;;@Converter public static String fromCharArray(char[] value) {     return new String(value). }
true;public,static;2;9;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter public static Class<?> toClass(String value, Exchange exchange) {     // prefer to use class resolver API     if (exchange != null) {         return exchange.getContext().getClassResolver().resolveClass((String) value).     } else {         return org.apache.camel.util.ObjectHelper.loadClass((String) value).     } }
true;public,static;1;7;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter(allowNull = true) public static Short toShort(Number value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return null.     }     return value.shortValue(). }
false;public,static;1;4;;@Converter public static Short toShort(String value) {     return Short.valueOf(value). }
true;public,static;1;7;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter(allowNull = true) public static Integer toInteger(Number value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return null.     }     return value.intValue(). }
false;public,static;1;4;;@Converter public static Integer toInteger(String value) {     return Integer.valueOf(value). }
true;public,static;1;7;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter(allowNull = true) public static Long toLong(Number value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return null.     }     return value.longValue(). }
false;public,static;1;4;;@Converter public static Long toLong(String value) {     return Long.valueOf(value). }
true;public,static;1;20;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter(allowNull = true) public static BigInteger toBigInteger(Object value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return null.     }     if (value instanceof String) {         return new BigInteger((String) value).     }     Long num = null.     if (value instanceof Number) {         Number number = (Number) value.         num = number.longValue().     }     if (num != null) {         return BigInteger.valueOf(num).     } else {         return null.     } }
true;public,static;1;7;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter public static Float toFloat(Number value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return Float.NaN.     }     return value.floatValue(). }
false;public,static;1;4;;@Converter public static Float toFloat(String value) {     return Float.valueOf(value). }
true;public,static;1;7;/**  * Returns the converted value, or null if the value is null  */ ;/**  * Returns the converted value, or null if the value is null  */ @Converter public static Double toDouble(Number value) {     if (org.apache.camel.util.ObjectHelper.isNaN(value)) {         return Double.NaN.     }     return value.doubleValue(). }
false;public,static;1;4;;@Converter public static Double toDouble(String value) {     return Double.valueOf(value). }
false;public,static;1;4;;// add fast type converters from most common used @Converter public static String toString(Integer value) {     return value.toString(). }
false;public,static;1;4;;@Converter public static String toString(Long value) {     return value.toString(). }
false;public,static;1;4;;@Converter public static String toString(Boolean value) {     return value.toString(). }
false;public,static;1;4;;@Converter public static String toString(StringBuffer value) {     return value.toString(). }
false;public,static;1;4;;@Converter public static String toString(StringBuilder value) {     return value.toString(). }
false;public,static;1;4;;@Converter public static Boolean toBoolean(String value) {     return Boolean.parseBoolean(value). }
