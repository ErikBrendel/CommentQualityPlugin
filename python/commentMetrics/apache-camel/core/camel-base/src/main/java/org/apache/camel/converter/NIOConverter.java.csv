commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;6;;@Converter public static byte[] toByteArray(ByteBuffer buffer) {     byte[] bArray = new byte[buffer.limit()].     buffer.get(bArray).     return bArray. }
false;public,static;2;4;;@Converter public static String toString(ByteBuffer buffer, Exchange exchange) throws IOException {     return IOConverter.toString(toByteArray(buffer), exchange). }
false;public,static;1;4;;@Converter public static ByteBuffer toByteBuffer(byte[] data) {     return ByteBuffer.wrap(data). }
false;public,static;1;18;;@Converter public static ByteBuffer toByteBuffer(File file) throws IOException {     InputStream in = null.     try {         byte[] buf = new byte[(int) file.length()].         in = IOHelper.buffered(new FileInputStream(file)).         int sizeLeft = (int) file.length().         int offset = 0.         while (sizeLeft > 0) {             int readSize = in.read(buf, offset, sizeLeft).             sizeLeft -= readSize.             offset += readSize.         }         return ByteBuffer.wrap(buf).     } finally {         IOHelper.close(in, "Failed to close file stream: " + file.getPath(), LOG).     } }
false;public,static;2;18;;@Converter public static ByteBuffer toByteBuffer(String value, Exchange exchange) {     byte[] bytes = null.     if (exchange != null) {         String charsetName = exchange.getProperty(Exchange.CHARSET_NAME, String.class).         if (charsetName != null) {             try {                 bytes = value.getBytes(charsetName).             } catch (UnsupportedEncodingException e) {                 LOG.warn("Cannot convert the byte to String with the charset {}", charsetName, e).             }         }     }     if (bytes == null) {         bytes = value.getBytes().     }     return ByteBuffer.wrap(bytes). }
false;public,static;1;7;;@Converter public static ByteBuffer toByteBuffer(Short value) {     ByteBuffer buf = ByteBuffer.allocate(2).     buf.putShort(value).     buf.flip().     return buf. }
false;public,static;1;7;;@Converter public static ByteBuffer toByteBuffer(Integer value) {     ByteBuffer buf = ByteBuffer.allocate(4).     buf.putInt(value).     buf.flip().     return buf. }
false;public,static;1;7;;@Converter public static ByteBuffer toByteBuffer(Long value) {     ByteBuffer buf = ByteBuffer.allocate(8).     buf.putLong(value).     buf.flip().     return buf. }
false;public,static;1;7;;@Converter public static ByteBuffer toByteBuffer(Float value) {     ByteBuffer buf = ByteBuffer.allocate(4).     buf.putFloat(value).     buf.flip().     return buf. }
false;public,static;1;7;;@Converter public static ByteBuffer toByteBuffer(Double value) {     ByteBuffer buf = ByteBuffer.allocate(8).     buf.putDouble(value).     buf.flip().     return buf. }
false;public,static;1;4;;@Converter public static InputStream toInputStream(ByteBuffer bufferbuffer) {     return IOConverter.toInputStream(toByteArray(bufferbuffer)). }
