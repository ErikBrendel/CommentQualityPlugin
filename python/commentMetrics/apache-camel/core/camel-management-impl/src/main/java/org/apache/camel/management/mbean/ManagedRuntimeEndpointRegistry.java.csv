commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void init(ManagementStrategy strategy) {     super.init(strategy).     sanitize = strategy.getManagementAgent().getMask() != null ? strategy.getManagementAgent().getMask() : false. }
false;public;0;4;;@Override public void clear() {     registry.clear(). }
false;public;0;4;;@Override public void reset() {     registry.reset(). }
false;public;0;4;;@Override public boolean isEnabled() {     return registry.isEnabled(). }
false;public;1;4;;@Override public void setEnabled(boolean enabled) {     registry.setEnabled(enabled). }
false;public;0;4;;@Override public int getLimit() {     return registry.getLimit(). }
false;public;0;4;;@Override public int getSize() {     return registry.size(). }
false;public;1;4;;@Override public List<String> getAllEndpoints(boolean includeInputs) {     return registry.getAllEndpoints(includeInputs). }
false;public;2;4;;@Override public List<String> getEndpointsPerRoute(String routeId, boolean includeInputs) {     return registry.getEndpointsPerRoute(routeId, includeInputs). }
false;public;0;33;;@Override public TabularData endpointStatistics() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listRuntimeEndpointsTabularType()).         EndpointRegistry staticRegistry = getContext().getEndpointRegistry().         int index = 0.         for (RuntimeEndpointRegistry.Statistic stat : registry.getEndpointStatistics()) {             CompositeType ct = CamelOpenMBeanTypes.listRuntimeEndpointsCompositeType().             String url = stat.getUri().             Boolean isStatic = staticRegistry.isStatic(url).             Boolean isDynamic = staticRegistry.isDynamic(url).             if (sanitize) {                 url = URISupport.sanitizeUri(url).             }             String routeId = stat.getRouteId().             String direction = stat.getDirection().             long hits = stat.getHits().             CompositeData data = new CompositeDataSupport(ct, new String[] { "index", "url", "routeId", "direction", "static", "dynamic", "hits" }, new Object[] { index, url, routeId, direction, isStatic, isDynamic, hits }).             answer.put(data).             // use a counter as the single index in the TabularData as we do not want a multi-value index             index++.         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
