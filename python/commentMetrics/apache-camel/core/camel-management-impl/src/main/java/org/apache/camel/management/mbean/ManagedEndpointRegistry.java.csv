commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void init(ManagementStrategy strategy) {     super.init(strategy).     sanitize = strategy.getManagementAgent().getMask() != null ? strategy.getManagementAgent().getMask() : false. }
false;public;0;3;;public EndpointRegistry getEndpointRegistry() {     return endpointRegistry. }
false;public;0;3;;public String getSource() {     return endpointRegistry.toString(). }
false;public;0;3;;public Integer getDynamicSize() {     return endpointRegistry.dynamicSize(). }
false;public;0;3;;public Integer getStaticSize() {     return endpointRegistry.staticSize(). }
false;public;0;3;;public Integer getSize() {     return endpointRegistry.size(). }
false;public;0;3;;public Integer getMaximumCacheSize() {     return endpointRegistry.getMaximumCacheSize(). }
false;public;0;3;;public void purge() {     endpointRegistry.purge(). }
false;public;0;23;;@SuppressWarnings("unchecked") public TabularData listEndpoints() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listEndpointsTabularType()).         Collection<Endpoint> endpoints = endpointRegistry.values().         for (Endpoint endpoint : endpoints) {             CompositeType ct = CamelOpenMBeanTypes.listEndpointsCompositeType().             String url = endpoint.getEndpointUri().             if (sanitize) {                 url = URISupport.sanitizeUri(url).             }             boolean fromStatic = endpointRegistry.isStatic(url).             boolean fromDynamic = endpointRegistry.isDynamic(url).             CompositeData data = new CompositeDataSupport(ct, new String[] { "url", "static", "dynamic" }, new Object[] { url, fromStatic, fromDynamic }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
