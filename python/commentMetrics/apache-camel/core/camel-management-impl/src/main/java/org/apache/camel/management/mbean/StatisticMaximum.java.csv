commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public void updateValue(long newValue) {     // its okay its not 100% thread safe (these jmx counters are not guaranteed to be accurate for min/max values)     // if we use the atomic operation updateAndGet then the JVM creates a new lambda per call which creates a new object     // in the JVM and causes higher memory footprint     long current = value.get().     if (current == -1 || current < newValue) {         value.set(newValue).     } }
false;public;0;4;;public long getValue() {     long num = value.get().     return num == -1 ? 0 : num. }
false;public;0;4;;@Override public boolean isUpdated() {     return value.get() != -1. }
false;public;0;4;;@Override public String toString() {     return "" + value.get(). }
false;public;0;3;;public void reset() {     value.set(-1). }
