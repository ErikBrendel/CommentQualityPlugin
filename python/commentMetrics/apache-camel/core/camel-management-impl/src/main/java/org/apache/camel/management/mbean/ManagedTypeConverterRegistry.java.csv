commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public TypeConverterRegistry getRegistry() {     return registry. }
false;public;0;3;;public long getNoopCounter() {     return registry.getStatistics().getNoopCounter(). }
false;public;0;3;;public long getAttemptCounter() {     return registry.getStatistics().getAttemptCounter(). }
false;public;0;3;;public long getHitCounter() {     return registry.getStatistics().getHitCounter(). }
false;public;0;3;;public long getMissCounter() {     return registry.getStatistics().getMissCounter(). }
false;public;0;3;;public long getFailedCounter() {     return registry.getStatistics().getFailedCounter(). }
false;public;0;3;;public void resetTypeConversionCounters() {     registry.getStatistics().reset(). }
false;public;0;3;;public boolean isStatisticsEnabled() {     return registry.getStatistics().isStatisticsEnabled(). }
false;public;1;3;;public void setStatisticsEnabled(boolean statisticsEnabled) {     registry.getStatistics().setStatisticsEnabled(statisticsEnabled). }
false;public;0;3;;public int getNumberOfTypeConverters() {     return registry.size(). }
false;public;0;3;;public String getTypeConverterExistsLoggingLevel() {     return registry.getTypeConverterExistsLoggingLevel().name(). }
false;public;0;3;;public String getTypeConverterExists() {     return registry.getTypeConverterExists().name(). }
false;public;2;9;;public boolean hasTypeConverter(String fromType, String toType) {     try {         Class<?> from = getContext().getClassResolver().resolveMandatoryClass(fromType).         Class<?> to = getContext().getClassResolver().resolveMandatoryClass(toType).         return registry.lookup(to, from) != null.     } catch (ClassNotFoundException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;18;;public TabularData listTypeConverters() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listTypeConvertersTabularType()).         List<Class<?>[]> converters = registry.listAllTypeConvertersFromTo().         for (Class<?>[] entry : converters) {             CompositeType ct = CamelOpenMBeanTypes.listTypeConvertersCompositeType().             String from = entry[0].getCanonicalName().             String to = entry[1].getCanonicalName().             CompositeData data = new CompositeDataSupport(ct, new String[] { "from", "to" }, new Object[] { from, to }).             if (!answer.containsValue(data)) {                 answer.put(data).             }         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
