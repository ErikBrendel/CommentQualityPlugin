commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public RestRegistry getRegistry() {     return registry. }
false;public;0;4;;@Override public int getNumberOfRestServices() {     return registry.size(). }
false;public;0;30;;@Override public TabularData listRestServices() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listRestServicesTabularType()).         List<RestRegistry.RestService> services = registry.listAllRestServices().         for (RestRegistry.RestService entry : services) {             CompositeType ct = CamelOpenMBeanTypes.listRestServicesCompositeType().             String url = entry.getUrl().             String baseUrl = entry.getBaseUrl().             String basePath = entry.getBasePath().             String uriTemplate = entry.getUriTemplate().             String method = entry.getMethod().             String consumes = entry.getConsumes().             String produces = entry.getProduces().             String state = entry.getState().             String inType = entry.getInType().             String outType = entry.getOutType().             String routeId = entry.getRouteId().             String description = entry.getDescription().             CompositeData data = new CompositeDataSupport(ct, new String[] { "url", "baseUrl", "basePath", "uriTemplate", "method", "consumes", "produces", "inType", "outType", "state", "routeId", "description" }, new Object[] { url, baseUrl, basePath, uriTemplate, method, consumes, produces, inType, outType, state, routeId, description }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;4;;@Override public String apiDocAsJson() {     return registry.apiDocAsJson(). }
