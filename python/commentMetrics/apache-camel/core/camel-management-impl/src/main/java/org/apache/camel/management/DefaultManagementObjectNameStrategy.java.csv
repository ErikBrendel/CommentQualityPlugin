commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;67;;public ObjectName getObjectName(Object managedObject) throws MalformedObjectNameException {     if (managedObject == null) {         return null.     }     ObjectName objectName = null.     if (managedObject instanceof ManagedCamelContext) {         ManagedCamelContext mcc = (ManagedCamelContext) managedObject.         objectName = getObjectNameForCamelContext(mcc.getContext()).     } else if (managedObject instanceof ManagedCamelHealth) {         ManagedCamelHealth mch = (ManagedCamelHealth) managedObject.         objectName = getObjectNameForCamelHealth(mch.getContext()).     } else if (managedObject instanceof ManagedRouteController) {         ManagedRouteController mrc = (ManagedRouteController) managedObject.         objectName = getObjectNameForRouteController(mrc.getContext()).     } else if (managedObject instanceof ManagedComponent) {         ManagedComponent mc = (ManagedComponent) managedObject.         objectName = getObjectNameForComponent(mc.getComponent(), mc.getComponentName()).     } else if (managedObject instanceof ManagedDataFormat) {         ManagedDataFormat md = (ManagedDataFormat) managedObject.         objectName = getObjectNameForDataFormat(md.getContext(), md.getDataFormat()).     } else if (managedObject instanceof ManagedEndpoint) {         ManagedEndpoint me = (ManagedEndpoint) managedObject.         objectName = getObjectNameForEndpoint(me.getEndpoint()).     } else if (managedObject instanceof Endpoint) {         objectName = getObjectNameForEndpoint((Endpoint) managedObject).     } else if (managedObject instanceof ManagedRoute) {         ManagedRoute mr = (ManagedRoute) managedObject.         objectName = getObjectNameForRoute(mr.getRoute()).     } else if (managedObject instanceof ManagedErrorHandler) {         ManagedErrorHandler meh = (ManagedErrorHandler) managedObject.         objectName = getObjectNameForErrorHandler(meh.getRouteContext(), meh.getErrorHandler(), meh.getErrorHandlerBuilder()).     } else if (managedObject instanceof ManagedProcessor) {         ManagedProcessor mp = (ManagedProcessor) managedObject.         objectName = getObjectNameForProcessor(mp.getContext(), mp.getProcessor(), mp.getDefinition()).     } else if (managedObject instanceof ManagedConsumer) {         ManagedConsumer ms = (ManagedConsumer) managedObject.         objectName = getObjectNameForConsumer(ms.getContext(), ms.getConsumer()).     } else if (managedObject instanceof ManagedProducer) {         ManagedProducer ms = (ManagedProducer) managedObject.         objectName = getObjectNameForProducer(ms.getContext(), ms.getProducer()).     } else if (managedObject instanceof ManagedBacklogTracer) {         ManagedBacklogTracer mt = (ManagedBacklogTracer) managedObject.         objectName = getObjectNameForTracer(mt.getContext(), mt.getBacklogTracer()).     } else if (managedObject instanceof ManagedBacklogDebugger) {         ManagedBacklogDebugger md = (ManagedBacklogDebugger) managedObject.         objectName = getObjectNameForTracer(md.getContext(), md.getBacklogDebugger()).     } else if (managedObject instanceof ManagedEventNotifier) {         ManagedEventNotifier men = (ManagedEventNotifier) managedObject.         objectName = getObjectNameForEventNotifier(men.getContext(), men.getEventNotifier()).     } else if (managedObject instanceof ManagedThreadPool) {         ManagedThreadPool mes = (ManagedThreadPool) managedObject.         objectName = getObjectNameForThreadPool(mes.getContext(), mes.getThreadPool(), mes.getId(), mes.getSourceId()).     } else if (managedObject instanceof ManagedClusterService) {         ManagedClusterService mcs = (ManagedClusterService) managedObject.         objectName = getObjectNameForClusterService(mcs.getContext(), mcs.getService()).     } else if (managedObject instanceof ManagedService) {         // check for managed service should be last         ManagedService ms = (ManagedService) managedObject.         // skip endpoints as they are already managed         if (ms.getService() instanceof Endpoint) {             return null.         }         objectName = getObjectNameForService(ms.getContext(), ms.getService()).     }     return objectName. }
false;public;2;8;;public ObjectName getObjectNameForCamelContext(String managementName, String name) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(managementName)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_CONTEXT + ",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(name)).     return createObjectName(buffer). }
false;public;1;9;;public ObjectName getObjectNameForCamelContext(CamelContext context) throws MalformedObjectNameException {     // prefer to use the given management name if previously assigned     String managementName = context.getManagementName().     if (managementName == null) {         managementName = context.getManagementNameStrategy().getName().     }     String name = context.getName().     return getObjectNameForCamelContext(managementName, name). }
false;public;1;16;;@Override public ObjectName getObjectNameForCamelHealth(CamelContext context) throws MalformedObjectNameException {     // prefer to use the given management name if previously assigned     String managementName = context.getManagementName().     if (managementName == null) {         managementName = context.getManagementNameStrategy().getName().     }     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(managementName)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_HEALTH + ",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(context.getName())).     return createObjectName(buffer). }
false;public;1;16;;@Override public ObjectName getObjectNameForRouteController(CamelContext context) throws MalformedObjectNameException {     // prefer to use the given management name if previously assigned     String managementName = context.getManagementName().     if (managementName == null) {         managementName = context.getManagementNameStrategy().getName().     }     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(managementName)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_ROUTE_CONTROLLER + ",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(context.getName())).     return createObjectName(buffer). }
false;public;1;8;;public ObjectName getObjectNameForEndpoint(Endpoint endpoint) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(endpoint.getCamelContext())).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_ENDPOINT + ",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(getEndpointId(endpoint))).     return createObjectName(buffer). }
false;public;2;11;;public ObjectName getObjectNameForDataFormat(CamelContext context, DataFormat dataFormat) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_DATAFORMAT + ",").     buffer.append(KEY_NAME + "=").append(dataFormat.getClass().getSimpleName()).     if (!(dataFormat instanceof StaticService)) {         buffer.append("(").append(ObjectHelper.getIdentityHashCode(dataFormat)).append(")").     }     return createObjectName(buffer). }
false;public;2;8;;public ObjectName getObjectNameForComponent(Component component, String name) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(component.getCamelContext())).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_COMPONENT + ",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(name)).     return createObjectName(buffer). }
false;public;3;8;;public ObjectName getObjectNameForProcessor(CamelContext context, Processor processor, NamedNode definition) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=").append(TYPE_PROCESSOR).append(",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(definition.getId())).     return createObjectName(buffer). }
false;public;3;47;;public ObjectName getObjectNameForErrorHandler(RouteContext routeContext, Processor errorHandler, ErrorHandlerFactory builder) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(routeContext.getCamelContext())).append(",").     buffer.append(KEY_TYPE + "=").append(TYPE_ERRORHANDLER + ",").     // we want to only register one instance of the various error handler types and thus do some lookup     // if its a ErrorHandlerBuildRef. We need a bit of work to do that as there are potential indirection.     String ref = null.     if (builder instanceof ErrorHandlerBuilderRef) {         ErrorHandlerBuilderRef builderRef = (ErrorHandlerBuilderRef) builder.         // it has not then its an indirection and we should do some work to lookup the real builder         ref = builderRef.getRef().         ErrorHandlerFactory refBuilder = ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, builderRef.getRef(), false).         if (refBuilder != null) {             builder = refBuilder.         }         // complex with indirections for error handler references         if (builder instanceof ErrorHandlerBuilderRef) {             builderRef = (ErrorHandlerBuilderRef) builder.             // does it refer to a non default error handler then do a 2nd lookup             if (!builderRef.getRef().equals(ErrorHandlerBuilderRef.DEFAULT_ERROR_HANDLER_BUILDER)) {                 refBuilder = ErrorHandlerBuilderRef.lookupErrorHandlerBuilder(routeContext, builderRef.getRef(), false).                 if (refBuilder != null) {                     ref = builderRef.getRef().                     builder = refBuilder.                 }             }         }     }     if (ref != null) {         String name = builder.getClass().getSimpleName() + "(ref:" + ref + ")".         buffer.append(KEY_NAME + "=").append(ObjectName.quote(name)).     } else {         // create a name based on its instance         buffer.append(KEY_NAME + "=").append(builder.getClass().getSimpleName()).append("(").append(ObjectHelper.getIdentityHashCode(builder)).append(")").     }     return createObjectName(buffer). }
false;public;2;15;;public ObjectName getObjectNameForConsumer(CamelContext context, Consumer consumer) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=").append(TYPE_CONSUMER).append(",").     String name = consumer.getClass().getSimpleName().     if (ObjectHelper.isEmpty(name)) {         name = "Consumer".     }     buffer.append(KEY_NAME + "=").append(name).append("(").append(ObjectHelper.getIdentityHashCode(consumer)).append(")").     return createObjectName(buffer). }
false;public;2;15;;public ObjectName getObjectNameForProducer(CamelContext context, Producer producer) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=").append(TYPE_PRODUCER).append(",").     String name = producer.getClass().getSimpleName().     if (ObjectHelper.isEmpty(name)) {         name = "Producer".     }     buffer.append(KEY_NAME + "=").append(name).append("(").append(ObjectHelper.getIdentityHashCode(producer)).append(")").     return createObjectName(buffer). }
false;public;2;11;;public ObjectName getObjectNameForTracer(CamelContext context, Service tracer) throws MalformedObjectNameException {     // use the simple name of the class as the mbean name (eg Tracer, BacklogTracer, BacklogDebugger)     String name = tracer.getClass().getSimpleName().     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_TRACER + ",").     buffer.append(KEY_NAME + "=").append(name).     return createObjectName(buffer). }
false;public;2;17;;public ObjectName getObjectNameForEventNotifier(CamelContext context, EventNotifier eventNotifier) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_EVENT_NOTIFIER + ",").     if (eventNotifier instanceof JmxNotificationEventNotifier) {         // JMX notifier shall have an easy to use name         buffer.append(KEY_NAME + "=").append("JmxEventNotifier").     } else {         // others can be per instance         buffer.append(KEY_NAME + "=").append("EventNotifier").append("(").append(ObjectHelper.getIdentityHashCode(eventNotifier)).append(")").     }     return createObjectName(buffer). }
false;public;1;11;;public ObjectName getObjectNameForRoute(Route route) throws MalformedObjectNameException {     Endpoint ep = route.getEndpoint().     String id = route.getId().     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(ep.getCamelContext())).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_ROUTE + ",").     buffer.append(KEY_NAME + "=").append(ObjectName.quote(id)).     return createObjectName(buffer). }
false;public;2;11;;public ObjectName getObjectNameForService(CamelContext context, Service service) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_SERVICE + ",").     buffer.append(KEY_NAME + "=").append(service.getClass().getSimpleName()).     if (!(service instanceof StaticService)) {         buffer.append("(").append(ObjectHelper.getIdentityHashCode(service)).append(")").     }     return createObjectName(buffer). }
false;public;2;11;;public ObjectName getObjectNameForClusterService(CamelContext context, CamelClusterService service) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_HA + ",").     buffer.append(KEY_NAME + "=").append(service.getClass().getSimpleName()).     if (!(service instanceof StaticService)) {         buffer.append("(").append(ObjectHelper.getIdentityHashCode(service)).append(")").     }     return createObjectName(buffer). }
false;public;4;14;;public ObjectName getObjectNameForThreadPool(CamelContext context, ThreadPoolExecutor threadPool, String id, String sourceId) throws MalformedObjectNameException {     StringBuilder buffer = new StringBuilder().     buffer.append(domainName).append(":").     buffer.append(KEY_CONTEXT + "=").append(getContextId(context)).append(",").     buffer.append(KEY_TYPE + "=" + TYPE_THREAD_POOL + ",").     String name = id.     if (sourceId != null) {         // provide source id if we know it, this helps end user to know where the pool is used         name = name + "(" + sourceId + ")".     }     buffer.append(KEY_NAME + "=").append(ObjectName.quote(name)).     return createObjectName(buffer). }
false;public;0;3;;public String getDomainName() {     return domainName. }
false;public;1;3;;public void setDomainName(String domainName) {     this.domainName = domainName. }
false;public;0;3;;public String getHostName() {     return hostName. }
false;public;1;3;;public void setHostName(String hostName) {     this.hostName = hostName. }
false;protected;1;8;;protected String getContextId(CamelContext context) {     if (context == null) {         return getContextId(VALUE_UNKNOWN).     } else {         String name = context.getManagementName() != null ? context.getManagementName() : context.getName().         return getContextId(name).     } }
false;protected;1;8;;protected String getContextId(String name) {     Boolean includeHostName = camelContext != null && camelContext.getManagementStrategy().getManagementAgent().getIncludeHostName().     if (includeHostName != null && includeHostName) {         return hostName + "/" + (name != null ? name : VALUE_UNKNOWN).     } else {         return name != null ? name : VALUE_UNKNOWN.     } }
false;protected;1;9;;protected String getEndpointId(Endpoint ep) {     String answer = doGetEndpointId(ep).     Boolean sanitize = camelContext != null && camelContext.getManagementStrategy().getManagementAgent().getMask().     if (sanitize != null && sanitize) {         // use xxxxxx as replacements as * has to be quoted for MBean names         answer = URISupport.sanitizeUri(answer).     }     return answer. }
false;private;1;12;;private String doGetEndpointId(Endpoint ep) {     if (ep.isSingleton()) {         return ep.getEndpointKey().     } else {         // non singleton then add hashcoded id         String uri = ep.getEndpointKey().         int pos = uri.indexOf('?').         String id = (pos == -1) ? uri : uri.substring(0, pos).         id += "?id=" + ObjectHelper.getIdentityHashCode(ep).         return id.     } }
true;protected;1;8;/**  * Factory method to create an ObjectName escaping any required characters  */ ;/**  * Factory method to create an ObjectName escaping any required characters  */ protected ObjectName createObjectName(StringBuilder buffer) throws MalformedObjectNameException {     String text = buffer.toString().     try {         return new ObjectName(text).     } catch (MalformedObjectNameException e) {         throw new MalformedObjectNameException("Could not create ObjectName from: " + text + ". Reason: " + e).     } }
