commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setNotificationBroadcaster(NotificationBroadcasterSupport broadcaster) {     notificationBroadcaster = broadcaster. }
false;public;1;13;;public void notify(CamelEvent event) throws Exception {     if (notificationBroadcaster != null) {         // its recommended to send light weight events and we don't want to have the entire Exchange/CamelContext etc         // serialized as these are the typical source of the EventObject. So we use our own source which is just         // a human readable name, which can be configured.         String type = event.getClass().getSimpleName().         String message = event.toString().         Notification notification = new Notification(type, source, counter.getAndIncrement(), message).         LOG.trace("Broadcasting JMX notification: {}", notification).         notificationBroadcaster.sendNotification(notification).     } }
false;public;1;3;;public boolean isEnabled(CamelEvent event) {     return true. }
false;protected;0;3;;protected void doStart() throws Exception {     counter.set(0). }
false;public;0;3;;public String getSource() {     return source. }
true;public;1;3;/**  * Sets the source to be used when broadcasting events.  * The source is just a readable identifier which helps the receiver see where the event is coming from.  * You can assign a value such a server or application name etc.  * <p/>  * By default <tt>Camel</tt> will be used as source.  *  * @param source  the source  */ ;/**  * Sets the source to be used when broadcasting events.  * The source is just a readable identifier which helps the receiver see where the event is coming from.  * You can assign a value such a server or application name etc.  * <p/>  * By default <tt>Camel</tt> will be used as source.  *  * @param source  the source  */ public void setSource(String source) {     this.source = source. }
