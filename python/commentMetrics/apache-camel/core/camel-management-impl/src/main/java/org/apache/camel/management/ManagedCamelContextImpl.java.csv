commented;modifiers;parameterAmount;loc;comment;code
false;private;0;3;;private ManagementStrategy getManagementStrategy() {     return camelContext.getManagementStrategy(). }
false;public;2;22;;public <T extends ManagedProcessorMBean> T getManagedProcessor(String id, Class<T> type) {     // jmx must be enabled     if (getManagementStrategy().getManagementAgent() == null) {         return null.     }     Processor processor = camelContext.getProcessor(id).     ProcessorDefinition def = camelContext.adapt(ModelCamelContext.class).getProcessorDefinition(id).     // processor may be null if its anonymous inner class or as lambda     if (def != null) {         try {             ObjectName on = getManagementStrategy().getManagementObjectNameStrategy().getObjectNameForProcessor(camelContext, processor, def).             return getManagementStrategy().getManagementAgent().newProxyClient(on, type).         } catch (MalformedObjectNameException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return null. }
false;public;2;19;;public <T extends ManagedRouteMBean> T getManagedRoute(String routeId, Class<T> type) {     // jmx must be enabled     if (getManagementStrategy().getManagementAgent() == null) {         return null.     }     Route route = camelContext.getRoute(routeId).     if (route != null) {         try {             ObjectName on = getManagementStrategy().getManagementObjectNameStrategy().getObjectNameForRoute(route).             return getManagementStrategy().getManagementAgent().newProxyClient(on, type).         } catch (MalformedObjectNameException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return null. }
false;public;0;14;;public ManagedCamelContextMBean getManagedCamelContext() {     // jmx must be enabled     if (getManagementStrategy().getManagementAgent() == null) {         return null.     }     try {         ObjectName on = getManagementStrategy().getManagementObjectNameStrategy().getObjectNameForCamelContext(camelContext).         return getManagementStrategy().getManagementAgent().newProxyClient(on, ManagedCamelContextMBean.class).     } catch (MalformedObjectNameException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
