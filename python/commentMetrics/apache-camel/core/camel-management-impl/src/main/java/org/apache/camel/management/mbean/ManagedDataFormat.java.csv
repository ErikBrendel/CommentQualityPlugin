commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) { // noop }
false;public;0;3;;public DataFormat getDataFormat() {     return dataFormat. }
false;public;0;3;;public CamelContext getContext() {     return camelContext. }
false;public;0;7;;@Override public String getName() {     if (dataFormat instanceof DataFormatName) {         return ((DataFormatName) dataFormat).getDataFormatName().     }     return null. }
false;public;0;4;;@Override public String getCamelId() {     return camelContext.getName(). }
false;public;0;4;;@Override public String getCamelManagementName() {     return camelContext.getManagementName(). }
false;public;0;11;;@Override public String getState() {     // must use String type to be sure remote JMX can read the attribute without requiring Camel classes.     if (dataFormat instanceof StatefulService) {         ServiceStatus status = ((StatefulService) dataFormat).getStatus().         return status.name().     }     // assume started if not a ServiceSupport instance     return ServiceStatus.Started.name(). }
false;public;0;9;;@Override public String informationJson() {     String dataFormatName = getName().     if (dataFormatName != null) {         return camelContext.explainDataFormatJson(dataFormatName, dataFormat, true).     } else {         return null.     } }
false;public;1;37;;@Override public TabularData explain(boolean allOptions) {     String dataFormatName = getName().     if (dataFormatName != null) {         try {             TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.explainDataFormatTabularType()).             String json = camelContext.explainDataFormatJson(dataFormatName, dataFormat, allOptions).             List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("properties", json, true).             for (Map<String, String> row : rows) {                 String name = row.get("name").                 String kind = row.get("kind").                 String label = row.get("label") != null ? row.get("label") : "".                 String type = row.get("type").                 String javaType = row.get("javaType").                 String deprecated = row.get("deprecated") != null ? row.get("deprecated") : "".                 String secret = row.get("secret") != null ? row.get("secret") : "".                 String value = row.get("value") != null ? row.get("value") : "".                 String defaultValue = row.get("defaultValue") != null ? row.get("defaultValue") : "".                 String description = row.get("description") != null ? row.get("description") : "".                 CompositeType ct = CamelOpenMBeanTypes.explainDataFormatsCompositeType().                 CompositeData data = new CompositeDataSupport(ct, new String[] { "option", "kind", "label", "type", "java type", "deprecated", "secret", "value", "default value", "description" }, new Object[] { name, kind, label, type, javaType, deprecated, secret, value, defaultValue, description }).                 answer.put(data).             }             return answer.         } catch (Exception e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     } else {         return null.     } }
false;public;0;4;;@Override public DataFormat getInstance() {     return dataFormat. }
