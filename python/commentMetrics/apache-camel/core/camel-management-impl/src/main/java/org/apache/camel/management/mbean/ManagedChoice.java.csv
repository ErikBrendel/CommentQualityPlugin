commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public ChoiceDefinition getDefinition() {     return (ChoiceDefinition) super.getDefinition(). }
false;public;0;5;;@Override public void reset() {     processor.reset().     super.reset(). }
false;public;0;4;;@Override public Boolean getSupportExtendedInformation() {     return true. }
false;public;0;39;;@Override public TabularData choiceStatistics() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.choiceTabularType()).         List<WhenDefinition> whens = getDefinition().getWhenClauses().         List<FilterProcessor> filters = processor.getFilters().         for (int i = 0. i < filters.size(). i++) {             WhenDefinition when = whens.get(i).             FilterProcessor filter = filters.get(i).             CompositeType ct = CamelOpenMBeanTypes.choiceCompositeType().             String predicate = when.getExpression().getExpression().             String language = when.getExpression().getLanguage().             Long matches = filter.getFilteredCount().             CompositeData data = new CompositeDataSupport(ct, new String[] { "predicate", "language", "matches" }, new Object[] { predicate, language, matches }).             answer.put(data).         }         if (getDefinition().getOtherwise() != null) {             CompositeType ct = CamelOpenMBeanTypes.choiceCompositeType().             String predicate = "otherwise".             String language = "".             Long matches = processor.getNotFilteredCount().             CompositeData data = new CompositeDataSupport(ct, new String[] { "predicate", "language", "matches" }, new Object[] { predicate, language, matches }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
