commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) {     super.init(strategy). }
false;public;0;3;;public ValidatorRegistry getValidatorRegistry() {     return validatorRegistry. }
false;public;0;3;;public String getSource() {     return validatorRegistry.toString(). }
false;public;0;3;;public Integer getDynamicSize() {     return validatorRegistry.dynamicSize(). }
false;public;0;3;;public Integer getStaticSize() {     return validatorRegistry.staticSize(). }
false;public;0;3;;public Integer getSize() {     return validatorRegistry.size(). }
false;public;0;3;;public Integer getMaximumCacheSize() {     return validatorRegistry.getMaximumCacheSize(). }
false;public;0;3;;public void purge() {     validatorRegistry.purge(). }
false;public;0;21;;@SuppressWarnings("unchecked") public TabularData listValidators() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listValidatorsTabularType()).         Collection<Validator> validators = validatorRegistry.values().         for (Validator validator : validators) {             CompositeType ct = CamelOpenMBeanTypes.listValidatorsCompositeType().             DataType type = validator.getType().             String desc = validator.toString().             boolean isStatic = validatorRegistry.isStatic(type).             boolean isDynamic = validatorRegistry.isDynamic(type).             CompositeData data = new CompositeDataSupport(ct, new String[] { "type", "static", "dynamic", "description" }, new Object[] { type.toString(), isStatic, isDynamic, desc }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
