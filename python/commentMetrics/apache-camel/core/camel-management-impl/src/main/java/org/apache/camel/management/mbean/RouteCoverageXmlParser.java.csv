commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setDocumentLocator(final Locator locator) { // noop }
false;public;4;59;;@Override public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {     addTextIfNeeded().     final Element el = doc.createElement(qName).     // add other elements     for (int i = 0. i < attributes.getLength(). i++) {         el.setAttribute(attributes.getQName(i), attributes.getValue(i)).     }     String id = el.getAttribute("id").     if (id != null) {         try {             if ("route".equals(qName)) {                 ManagedRouteMBean route = camelContext.getExtension(ManagedCamelContext.class).getManagedRoute(id).                 if (route != null) {                     long total = route.getExchangesTotal().                     el.setAttribute("exchangesTotal", "" + total).                     long totalTime = route.getTotalProcessingTime().                     el.setAttribute("totalProcessingTime", "" + totalTime).                 }             } else if ("from".equals(qName)) {                 // grab statistics from the parent route as from would be the same                 Element parent = elementStack.peek().                 if (parent != null) {                     String routeId = parent.getAttribute("id").                     ManagedRouteMBean route = camelContext.getExtension(ManagedCamelContext.class).getManagedRoute(routeId).                     if (route != null) {                         long total = route.getExchangesTotal().                         el.setAttribute("exchangesTotal", "" + total).                         long totalTime = route.getTotalProcessingTime().                         el.setAttribute("totalProcessingTime", "" + totalTime).                         // from is index-0                         el.setAttribute("index", "0").                     }                 }             } else {                 ManagedProcessorMBean processor = camelContext.getExtension(ManagedCamelContext.class).getManagedProcessor(id).                 if (processor != null) {                     long total = processor.getExchangesTotal().                     el.setAttribute("exchangesTotal", "" + total).                     long totalTime = processor.getTotalProcessingTime().                     el.setAttribute("totalProcessingTime", "" + totalTime).                     int index = processor.getIndex().                     el.setAttribute("index", "" + index).                 }             }         } catch (Exception e) {         // ignore         }     }     // we do not want customId in output of the EIPs     if (!"route".equals(qName)) {         el.removeAttribute("customId").     }     elementStack.push(el). }
false;public;3;12;;@Override public void endElement(final String uri, final String localName, final String qName) {     addTextIfNeeded().     final Element closedEl = elementStack.pop().     if (elementStack.isEmpty()) {         // is this the root element?         doc.appendChild(closedEl).     } else {         final Element parentEl = elementStack.peek().         parentEl.appendChild(closedEl).     } }
false;public;3;4;;@Override public void characters(final char[] ch, final int start, final int length) throws SAXException {     textBuffer.append(ch, start, length). }
true;private;0;8;/**  * outputs text accumulated under the current node  */ ;/**  * outputs text accumulated under the current node  */ private void addTextIfNeeded() {     if (textBuffer.length() > 0) {         final Element el = elementStack.peek().         final Node textNode = doc.createTextNode(textBuffer.toString()).         el.appendChild(textNode).         textBuffer.delete(0, textBuffer.length()).     } }
true;public,static;2;112;/**  * Parses the XML.  *  * @param camelContext the CamelContext  * @param is           the XML content as an input stream  * @return the DOM model of the routes with coverage information stored as attributes  * @throws Exception is thrown if error parsing  */ ;/**  * Parses the XML.  *  * @param camelContext the CamelContext  * @param is           the XML content as an input stream  * @return the DOM model of the routes with coverage information stored as attributes  * @throws Exception is thrown if error parsing  */ public static Document parseXml(final CamelContext camelContext, final InputStream is) throws Exception {     final SAXParserFactory factory = SAXParserFactory.newInstance().     factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     final SAXParser parser = factory.newSAXParser().     final DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance().     docBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE).     final DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder().     final Document doc = docBuilder.newDocument().     final Stack<Element> elementStack = new Stack<>().     final StringBuilder textBuffer = new StringBuilder().     final DefaultHandler handler = new DefaultHandler() {          @Override         public void setDocumentLocator(final Locator locator) {         // noop         }          @Override         public void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException {             addTextIfNeeded().             final Element el = doc.createElement(qName).             // add other elements             for (int i = 0. i < attributes.getLength(). i++) {                 el.setAttribute(attributes.getQName(i), attributes.getValue(i)).             }             String id = el.getAttribute("id").             if (id != null) {                 try {                     if ("route".equals(qName)) {                         ManagedRouteMBean route = camelContext.getExtension(ManagedCamelContext.class).getManagedRoute(id).                         if (route != null) {                             long total = route.getExchangesTotal().                             el.setAttribute("exchangesTotal", "" + total).                             long totalTime = route.getTotalProcessingTime().                             el.setAttribute("totalProcessingTime", "" + totalTime).                         }                     } else if ("from".equals(qName)) {                         // grab statistics from the parent route as from would be the same                         Element parent = elementStack.peek().                         if (parent != null) {                             String routeId = parent.getAttribute("id").                             ManagedRouteMBean route = camelContext.getExtension(ManagedCamelContext.class).getManagedRoute(routeId).                             if (route != null) {                                 long total = route.getExchangesTotal().                                 el.setAttribute("exchangesTotal", "" + total).                                 long totalTime = route.getTotalProcessingTime().                                 el.setAttribute("totalProcessingTime", "" + totalTime).                                 // from is index-0                                 el.setAttribute("index", "0").                             }                         }                     } else {                         ManagedProcessorMBean processor = camelContext.getExtension(ManagedCamelContext.class).getManagedProcessor(id).                         if (processor != null) {                             long total = processor.getExchangesTotal().                             el.setAttribute("exchangesTotal", "" + total).                             long totalTime = processor.getTotalProcessingTime().                             el.setAttribute("totalProcessingTime", "" + totalTime).                             int index = processor.getIndex().                             el.setAttribute("index", "" + index).                         }                     }                 } catch (Exception e) {                 // ignore                 }             }             // we do not want customId in output of the EIPs             if (!"route".equals(qName)) {                 el.removeAttribute("customId").             }             elementStack.push(el).         }          @Override         public void endElement(final String uri, final String localName, final String qName) {             addTextIfNeeded().             final Element closedEl = elementStack.pop().             if (elementStack.isEmpty()) {                 // is this the root element?                 doc.appendChild(closedEl).             } else {                 final Element parentEl = elementStack.peek().                 parentEl.appendChild(closedEl).             }         }          @Override         public void characters(final char[] ch, final int start, final int length) throws SAXException {             textBuffer.append(ch, start, length).         }          /**          * outputs text accumulated under the current node          */         private void addTextIfNeeded() {             if (textBuffer.length() > 0) {                 final Element el = elementStack.peek().                 final Node textNode = doc.createTextNode(textBuffer.toString()).                 el.appendChild(textNode).                 textBuffer.delete(0, textBuffer.length()).             }         }     }.     parser.parse(is, handler).     return doc. }
