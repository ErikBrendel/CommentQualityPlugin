commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public LoadBalanceDefinition getDefinition() {     return (LoadBalanceDefinition) super.getDefinition(). }
false;public;0;5;;@Override public void reset() {     super.reset().     processor.reset(). }
false;public;0;4;;@Override public Boolean getSupportExtendedInformation() {     return true. }
false;public;0;4;;@Override public Integer getSize() {     return processor.getProcessors().size(). }
false;public;0;4;;@Override public Boolean isRoundRobin() {     return processor.isRoundRobin(). }
false;public;0;4;;@Override public Boolean isSticky() {     return processor.isSticky(). }
false;public;0;4;;@Override public Integer getMaximumFailoverAttempts() {     return processor.getMaximumFailoverAttempts(). }
false;public;0;18;;@Override public String getExceptions() {     if (exceptions != null) {         return exceptions.     }     List<Class<?>> classes = processor.getExceptions().     if (classes == null || classes.isEmpty()) {         exceptions = "".     } else {         CollectionStringBuffer csb = new CollectionStringBuffer(",").         for (Class<?> clazz : classes) {             csb.append(clazz.getCanonicalName()).         }         exceptions = csb.toString().     }     return exceptions. }
false;public;0;12;;@Override public String getLastGoodProcessorId() {     int idx = processor.getLastGoodIndex().     if (idx != -1) {         LoadBalanceDefinition def = getDefinition().         ProcessorDefinition<?> output = def.getOutputs().get(idx).         if (output != null) {             return output.getId().         }     }     return null. }
false;public;0;38;;@Override public TabularData exceptionStatistics() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.loadbalancerExceptionsTabularType()).         ExceptionFailureStatistics statistics = processor.getExceptionFailureStatistics().         Iterator<Class<?>> it = statistics.getExceptions().         boolean empty = true.         while (it.hasNext()) {             empty = false.             Class<?> exception = it.next().             String name = ObjectHelper.name(exception).             long counter = statistics.getFailureCounter(exception).             CompositeType ct = CamelOpenMBeanTypes.loadbalancerExceptionsCompositeType().             CompositeData data = new CompositeDataSupport(ct, new String[] { "exception", "failures" }, new Object[] { name, counter }).             answer.put(data).         }         if (empty) {             // use Exception as a single general             String name = ObjectHelper.name(Exception.class).             long counter = statistics.getFailureCounter(Exception.class).             CompositeType ct = CamelOpenMBeanTypes.loadbalancerExceptionsCompositeType().             CompositeData data = new CompositeDataSupport(ct, new String[] { "exception", "failures" }, new Object[] { name, counter }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
