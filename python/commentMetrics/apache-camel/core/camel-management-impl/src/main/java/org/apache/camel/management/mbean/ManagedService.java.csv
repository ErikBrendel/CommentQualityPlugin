commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) { // do nothing }
false;public;0;3;;public boolean isStaticService() {     return service instanceof StaticService. }
false;public;0;3;;public Service getService() {     return service. }
false;public;0;3;;public CamelContext getContext() {     return context. }
false;public;0;3;;public Route getRoute() {     return route. }
false;public;1;3;;public void setRoute(Route route) {     this.route = route. }
false;public;0;10;;public String getState() {     // must use String type to be sure remote JMX can read the attribute without requiring Camel classes.     if (service instanceof StatefulService) {         ServiceStatus status = ((StatefulService) service).getStatus().         return status.name().     }     // assume started if not a ServiceSupport instance     return ServiceStatus.Started.name(). }
false;public;0;3;;public String getCamelId() {     return context.getName(). }
false;public;0;3;;public String getCamelManagementName() {     return context.getManagementName(). }
false;public;0;6;;public String getRouteId() {     if (route != null) {         return route.getId().     }     return null. }
false;public;0;6;;public String getServiceType() {     if (service != null) {         return service.getClass().getSimpleName().     }     return null. }
false;public;0;6;;public void start() throws Exception {     if (!context.getStatus().isStarted()) {         throw new IllegalArgumentException("CamelContext is not started").     }     service.start(). }
false;public;0;6;;public void stop() throws Exception {     if (!context.getStatus().isStarted()) {         throw new IllegalArgumentException("CamelContext is not started").     }     service.stop(). }
false;public;0;3;;public boolean isSupportSuspension() {     return service instanceof Suspendable && service instanceof SuspendableService. }
false;public;0;8;;public boolean isSuspended() {     if (service instanceof SuspendableService) {         SuspendableService ss = (SuspendableService) service.         return ss.isSuspended().     } else {         return false.     } }
false;public;0;11;;public void suspend() throws Exception {     if (!context.getStatus().isStarted()) {         throw new IllegalArgumentException("CamelContext is not started").     }     if (service instanceof Suspendable && service instanceof SuspendableService) {         SuspendableService ss = (SuspendableService) service.         ss.suspend().     } else {         throw new UnsupportedOperationException("suspend() is not a supported operation").     } }
false;public;0;11;;public void resume() throws Exception {     if (!context.getStatus().isStarted()) {         throw new IllegalArgumentException("CamelContext is not started").     }     if (service instanceof SuspendableService) {         SuspendableService ss = (SuspendableService) service.         ss.resume().     } else {         throw new UnsupportedOperationException("resume() is not a supported operation").     } }
false;public;0;3;;public Object getInstance() {     return service. }
