commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) { // do nothing }
false;public;0;3;;public Component getComponent() {     return component. }
false;public;0;3;;public String getComponentName() {     return name. }
false;public;0;10;;public String getState() {     // must use String type to be sure remote JMX can read the attribute without requiring Camel classes.     if (component instanceof StatefulService) {         ServiceStatus status = ((StatefulService) component).getStatus().         return status.name().     }     // assume started if not a ServiceSupport instance     return ServiceStatus.Started.name(). }
false;public;0;3;;public String getCamelId() {     return component.getCamelContext().getName(). }
false;public;0;3;;public String getCamelManagementName() {     return component.getCamelContext().getManagementName(). }
false;public;0;3;;public Object getInstance() {     return component. }
false;public;0;11;;public String informationJson() {     try {         // a component may have been given a different name, so resolve its default name by its java type         // as we can find the component json information from the default component name         String defaultName = component.getCamelContext().resolveComponentDefaultName(component.getClass().getName()).         String target = defaultName != null ? defaultName : name.         return component.getCamelContext().getComponentParameterJsonSchema(target).     } catch (IOException e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;1;37;;public TabularData explain(boolean allOptions) {     try {         // a component may have been given a different name, so resolve its default name by its java type         // as we can find the component json information from the default component name         String defaultName = component.getCamelContext().resolveComponentDefaultName(component.getClass().getName()).         String target = defaultName != null ? defaultName : name.         String json = component.getCamelContext().explainComponentJson(target, allOptions).         List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("componentProperties", json, true).         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.explainComponentTabularType()).         for (Map<String, String> row : rows) {             String name = row.get("name").             String kind = row.get("kind").             String group = row.get("group") != null ? row.get("group") : "".             String label = row.get("label") != null ? row.get("label") : "".             String type = row.get("type").             String javaType = row.get("javaType").             String deprecated = row.get("deprecated") != null ? row.get("deprecated") : "".             String secret = row.get("secret") != null ? row.get("secret") : "".             String value = row.get("value") != null ? row.get("value") : "".             String defaultValue = row.get("defaultValue") != null ? row.get("defaultValue") : "".             String description = row.get("description") != null ? row.get("description") : "".             CompositeType ct = CamelOpenMBeanTypes.explainComponentCompositeType().             CompositeData data = new CompositeDataSupport(ct, new String[] { "option", "kind", "group", "label", "type", "java type", "deprecated", "secret", "value", "default value", "description" }, new Object[] { name, kind, group, label, type, javaType, deprecated, secret, value, defaultValue, description }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;4;;@Override public boolean isVerifySupported() {     return component.getExtension(org.apache.camel.component.extension.ComponentVerifierExtension.class).isPresent(). }
false;public;2;20;;@Override public ComponentVerifierExtension.Result verify(String scope, Map<String, String> options) {     try {         org.apache.camel.component.extension.ComponentVerifierExtension.Scope scopeEnum = org.apache.camel.component.extension.ComponentVerifierExtension.Scope.fromString(scope).         Optional<org.apache.camel.component.extension.ComponentVerifierExtension> verifier = component.getExtension(org.apache.camel.component.extension.ComponentVerifierExtension.class).         if (verifier.isPresent()) {             org.apache.camel.component.extension.ComponentVerifierExtension.Result result = verifier.get().verify(scopeEnum, CastUtils.cast(options)).             String rstatus = result.getStatus().toString().             String rscope = result.getScope().toString().             return new ResultImpl(Scope.valueOf(rscope), Status.valueOf(rstatus), result.getErrors().stream().map(this::translate).collect(Collectors.toList())).         } else {             return new ResultImpl(Scope.PARAMETERS, Status.UNSUPPORTED, Collections.emptyList()).         }     } catch (IllegalArgumentException e) {         return new ResultImpl(Scope.PARAMETERS, Status.UNSUPPORTED, Collections.singletonList(new VerificationErrorImpl(StandardCode.UNSUPPORTED_SCOPE, "Unsupported scope: " + scope))).     } }
false;private;1;4;;private VerificationError translate(org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError error) {     return new VerificationErrorImpl(translate(error.getCode()), error.getDescription(), error.getParameterKeys(), translate(error.getDetails())). }
false;private;1;3;;private Map<VerificationError.Attribute, Object> translate(Map<org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.Attribute, Object> details) {     return details.entrySet().stream().collect(Collectors.toMap(e -> translate(e.getKey()), Entry::getValue)). }
false;private;1;21;;private VerificationError.Attribute translate(org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.Attribute attribute) {     if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.GroupAttribute.GROUP_NAME) {         return GroupAttribute.GROUP_NAME.     } else if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.GroupAttribute.GROUP_OPTIONS) {         return GroupAttribute.GROUP_OPTIONS.     } else if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_CODE) {         return HttpAttribute.HTTP_CODE.     } else if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_REDIRECT) {         return HttpAttribute.HTTP_REDIRECT.     } else if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.HttpAttribute.HTTP_TEXT) {         return HttpAttribute.HTTP_TEXT.     } else if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_CLASS) {         return ExceptionAttribute.EXCEPTION_CLASS.     } else if (attribute == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.ExceptionAttribute.EXCEPTION_INSTANCE) {         return ExceptionAttribute.EXCEPTION_INSTANCE.     } else if (attribute != null) {         return VerificationError.asAttribute(attribute.getName()).     } else {         return null.     } }
false;private;1;33;;private VerificationError.Code translate(org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.Code code) {     if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.AUTHENTICATION) {         return StandardCode.AUTHENTICATION.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.EXCEPTION) {         return StandardCode.EXCEPTION.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.INTERNAL) {         return StandardCode.INTERNAL.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER) {         return StandardCode.MISSING_PARAMETER.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.UNKNOWN_PARAMETER) {         return StandardCode.UNKNOWN_PARAMETER.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.ILLEGAL_PARAMETER) {         return StandardCode.ILLEGAL_PARAMETER.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION) {         return StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.ILLEGAL_PARAMETER_VALUE) {         return StandardCode.ILLEGAL_PARAMETER_VALUE.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.INCOMPLETE_PARAMETER_GROUP) {         return StandardCode.ILLEGAL_PARAMETER_GROUP_COMBINATION.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.UNSUPPORTED) {         return StandardCode.UNSUPPORTED.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.UNSUPPORTED_SCOPE) {         return StandardCode.UNSUPPORTED_SCOPE.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.UNSUPPORTED_COMPONENT) {         return StandardCode.UNSUPPORTED_COMPONENT.     } else if (code == org.apache.camel.component.extension.ComponentVerifierExtension.VerificationError.StandardCode.GENERIC) {         return StandardCode.GENERIC.     } else if (code != null) {         return VerificationError.asCode(code.getName()).     } else {         return null.     } }
false;public;0;4;;@Override public Code getCode() {     return code. }
false;public;0;4;;@Override public String getDescription() {     return description. }
false;public;0;4;;@Override public Set<String> getParameterKeys() {     return parameterKeys. }
false;public;0;4;;@Override public Map<Attribute, Object> getDetails() {     return details. }
false;public;0;4;;@Override public Scope getScope() {     return scope. }
false;public;0;4;;@Override public Status getStatus() {     return status. }
false;public;0;4;;@Override public List<VerificationError> getErrors() {     return errors. }
