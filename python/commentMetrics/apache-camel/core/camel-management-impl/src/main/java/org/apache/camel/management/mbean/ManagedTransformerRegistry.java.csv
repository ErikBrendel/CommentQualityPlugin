commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) {     super.init(strategy). }
false;public;0;3;;public TransformerRegistry getTransformerRegistry() {     return transformerRegistry. }
false;public;0;3;;public String getSource() {     return transformerRegistry.toString(). }
false;public;0;3;;public Integer getDynamicSize() {     return transformerRegistry.dynamicSize(). }
false;public;0;3;;public Integer getStaticSize() {     return transformerRegistry.staticSize(). }
false;public;0;3;;public Integer getSize() {     return transformerRegistry.size(). }
false;public;0;3;;public Integer getMaximumCacheSize() {     return transformerRegistry.getMaximumCacheSize(). }
false;public;0;3;;public void purge() {     transformerRegistry.purge(). }
false;public;0;23;;@SuppressWarnings("unchecked") public TabularData listTransformers() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listTransformersTabularType()).         Collection<Transformer> transformers = transformerRegistry.values().         for (Transformer transformer : transformers) {             CompositeType ct = CamelOpenMBeanTypes.listTransformersCompositeType().             String scheme = transformer.getModel().             DataType from = transformer.getFrom().             DataType to = transformer.getTo().             String desc = transformer.toString().             boolean fromStatic = scheme != null ? transformerRegistry.isStatic(scheme) : transformerRegistry.isStatic(from, to).             boolean fromDynamic = scheme != null ? transformerRegistry.isDynamic(scheme) : transformerRegistry.isDynamic(from, to).             CompositeData data = new CompositeDataSupport(ct, new String[] { "scheme", "from", "to", "static", "dynamic", "description" }, new Object[] { scheme, from.toString(), to.toString(), fromStatic, fromDynamic, desc }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
