commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public AsyncProcessorAwaitManager getAsyncProcessorAwaitManager() {     return manager. }
false;public;0;4;;@Override public boolean isInterruptThreadsWhileStopping() {     return manager.isInterruptThreadsWhileStopping(). }
false;public;1;4;;@Override public void setInterruptThreadsWhileStopping(boolean interruptThreadsWhileStopping) {     manager.setInterruptThreadsWhileStopping(interruptThreadsWhileStopping). }
false;public;0;4;;@Override public int getSize() {     return manager.size(). }
false;public;0;24;;@Override public TabularData browse() {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listAwaitThreadsTabularType()).         Collection<AsyncProcessorAwaitManager.AwaitThread> threads = manager.browse().         for (AsyncProcessorAwaitManager.AwaitThread entry : threads) {             CompositeType ct = CamelOpenMBeanTypes.listAwaitThreadsCompositeType().             String id = "" + entry.getBlockedThread().getId().             String name = entry.getBlockedThread().getName().             String exchangeId = entry.getExchange().getExchangeId().             String routeId = entry.getRouteId().             String nodeId = entry.getNodeId().             String duration = "" + entry.getWaitDuration().             CompositeData data = new CompositeDataSupport(ct, new String[] { "id", "name", "exchangeId", "routeId", "nodeId", "duration" }, new Object[] { id, name, exchangeId, routeId, nodeId, duration }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;1;4;;@Override public void interrupt(String exchangeId) {     manager.interrupt(exchangeId). }
false;public;0;4;;@Override public long getThreadsBlocked() {     return manager.getStatistics().getThreadsBlocked(). }
false;public;0;4;;@Override public long getThreadsInterrupted() {     return manager.getStatistics().getThreadsInterrupted(). }
false;public;0;4;;@Override public long getTotalDuration() {     return manager.getStatistics().getTotalDuration(). }
false;public;0;4;;@Override public long getMinDuration() {     return manager.getStatistics().getMinDuration(). }
false;public;0;4;;@Override public long getMaxDuration() {     return manager.getStatistics().getMaxDuration(). }
false;public;0;4;;@Override public long getMeanDuration() {     return manager.getStatistics().getMeanDuration(). }
false;public;0;4;;@Override public void resetStatistics() {     manager.getStatistics().reset(). }
false;public;0;4;;@Override public boolean isStatisticsEnabled() {     return manager.getStatistics().isStatisticsEnabled(). }
false;public;1;4;;@Override public void setStatisticsEnabled(boolean statisticsEnabled) {     manager.getStatistics().setStatisticsEnabled(statisticsEnabled). }
