commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public InflightRepository getInflightRepository() {     return inflightRepository. }
false;public;0;4;;@Override public int getSize() {     return inflightRepository.size(). }
false;public;1;4;;@Override public int size(String routeId) {     return inflightRepository.size(routeId). }
false;public;0;4;;@Override public TabularData browse() {     return browse(null, -1, false). }
false;public;2;4;;@Override public TabularData browse(int limit, boolean sortByLongestDuration) {     return browse(null, limit, sortByLongestDuration). }
false;public;3;25;;@Override public TabularData browse(String routeId, int limit, boolean sortByLongestDuration) {     try {         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.listInflightExchangesTabularType()).         Collection<InflightRepository.InflightExchange> exchanges = inflightRepository.browse(routeId, limit, sortByLongestDuration).         for (InflightRepository.InflightExchange entry : exchanges) {             CompositeType ct = CamelOpenMBeanTypes.listInflightExchangesCompositeType().             String exchangeId = entry.getExchange().getExchangeId().             String fromRouteId = entry.getFromRouteId().             String atRouteId = entry.getAtRouteId().             String nodeId = entry.getNodeId().             String elapsed = "" + entry.getElapsed().             String duration = "" + entry.getDuration().             CompositeData data = new CompositeDataSupport(ct, new String[] { "exchangeId", "fromRouteId", "routeId", "nodeId", "elapsed", "duration" }, new Object[] { exchangeId, fromRouteId, atRouteId, nodeId, elapsed, duration }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
