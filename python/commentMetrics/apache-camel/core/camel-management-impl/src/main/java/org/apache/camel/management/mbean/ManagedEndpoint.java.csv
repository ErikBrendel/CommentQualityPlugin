commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) { // noop }
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;public;0;4;;@Override public String getCamelId() {     return endpoint.getCamelContext().getName(). }
false;public;0;4;;@Override public String getCamelManagementName() {     return endpoint.getCamelContext().getManagementName(). }
false;public;0;4;;@Override public String getEndpointUri() {     return endpoint.getEndpointUri(). }
false;public;0;4;;@Override public boolean isSingleton() {     return endpoint.isSingleton(). }
false;public;0;11;;@Override public String getState() {     // must use String type to be sure remote JMX can read the attribute without requiring Camel classes.     if (endpoint instanceof StatefulService) {         ServiceStatus status = ((StatefulService) endpoint).getStatus().         return status.name().     }     // assume started if not a ServiceSupport instance     return ServiceStatus.Started.name(). }
false;public;0;4;;@Override public String informationJson() {     return endpoint.getCamelContext().explainEndpointJson(getEndpointUri(), true). }
false;public;1;33;;@Override public TabularData explain(boolean allOptions) {     try {         String json = endpoint.getCamelContext().explainEndpointJson(getEndpointUri(), allOptions).         List<Map<String, String>> rows = JSonSchemaHelper.parseJsonSchema("properties", json, true).         TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.explainEndpointTabularType()).         for (Map<String, String> row : rows) {             String name = row.get("name").             String kind = row.get("kind").             String group = row.get("group") != null ? row.get("group") : "".             String label = row.get("label") != null ? row.get("label") : "".             String type = row.get("type").             String javaType = row.get("javaType").             String deprecated = row.get("deprecated") != null ? row.get("deprecated") : "".             String secret = row.get("secret") != null ? row.get("secret") : "".             String value = row.get("value") != null ? row.get("value") : "".             String defaultValue = row.get("defaultValue") != null ? row.get("defaultValue") : "".             String description = row.get("description") != null ? row.get("description") : "".             CompositeType ct = CamelOpenMBeanTypes.explainEndpointsCompositeType().             CompositeData data = new CompositeDataSupport(ct, new String[] { "option", "kind", "group", "label", "type", "java type", "deprecated", "secret", "value", "default value", "description" }, new Object[] { name, kind, group, label, type, javaType, deprecated, secret, value, defaultValue, description }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;0;4;;@Override public Endpoint getInstance() {     return endpoint. }
