commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;81;;protected void finalizeSettings() throws Exception {     // JVM system properties take precedence over any configuration     Map<String, Object> values = new LinkedHashMap<>().     if (System.getProperty(JmxSystemPropertyKeys.REGISTRY_PORT) != null) {         registryPort = Integer.getInteger(JmxSystemPropertyKeys.REGISTRY_PORT).         values.put(JmxSystemPropertyKeys.REGISTRY_PORT, registryPort).     }     if (System.getProperty(JmxSystemPropertyKeys.CONNECTOR_PORT) != null) {         connectorPort = Integer.getInteger(JmxSystemPropertyKeys.CONNECTOR_PORT).         values.put(JmxSystemPropertyKeys.CONNECTOR_PORT, connectorPort).     }     if (System.getProperty(JmxSystemPropertyKeys.DOMAIN) != null) {         mBeanServerDefaultDomain = System.getProperty(JmxSystemPropertyKeys.DOMAIN).         values.put(JmxSystemPropertyKeys.DOMAIN, mBeanServerDefaultDomain).     }     if (System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN) != null) {         mBeanObjectDomainName = System.getProperty(JmxSystemPropertyKeys.MBEAN_DOMAIN).         values.put(JmxSystemPropertyKeys.MBEAN_DOMAIN, mBeanObjectDomainName).     }     if (System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH) != null) {         serviceUrlPath = System.getProperty(JmxSystemPropertyKeys.SERVICE_URL_PATH).         values.put(JmxSystemPropertyKeys.SERVICE_URL_PATH, serviceUrlPath).     }     if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {         createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR).         values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector).     }     if (System.getProperty(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID) != null) {         onlyRegisterProcessorWithCustomId = Boolean.getBoolean(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID).         values.put(JmxSystemPropertyKeys.ONLY_REGISTER_PROCESSOR_WITH_CUSTOM_ID, onlyRegisterProcessorWithCustomId).     }     if (System.getProperty(JmxSystemPropertyKeys.USE_PLATFORM_MBS) != null) {         usePlatformMBeanServer = Boolean.getBoolean(JmxSystemPropertyKeys.USE_PLATFORM_MBS).         values.put(JmxSystemPropertyKeys.USE_PLATFORM_MBS, usePlatformMBeanServer).     }     if (System.getProperty(JmxSystemPropertyKeys.REGISTER_ALWAYS) != null) {         registerAlways = Boolean.getBoolean(JmxSystemPropertyKeys.REGISTER_ALWAYS).         values.put(JmxSystemPropertyKeys.REGISTER_ALWAYS, registerAlways).     }     if (System.getProperty(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES) != null) {         registerNewRoutes = Boolean.getBoolean(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES).         values.put(JmxSystemPropertyKeys.REGISTER_NEW_ROUTES, registerNewRoutes).     }     if (System.getProperty(JmxSystemPropertyKeys.MASK) != null) {         mask = Boolean.getBoolean(JmxSystemPropertyKeys.MASK).         values.put(JmxSystemPropertyKeys.MASK, mask).     }     if (System.getProperty(JmxSystemPropertyKeys.INCLUDE_HOST_NAME) != null) {         includeHostName = Boolean.getBoolean(JmxSystemPropertyKeys.INCLUDE_HOST_NAME).         values.put(JmxSystemPropertyKeys.INCLUDE_HOST_NAME, includeHostName).     }     if (System.getProperty(JmxSystemPropertyKeys.CREATE_CONNECTOR) != null) {         createConnector = Boolean.getBoolean(JmxSystemPropertyKeys.CREATE_CONNECTOR).         values.put(JmxSystemPropertyKeys.CREATE_CONNECTOR, createConnector).     }     if (System.getProperty(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED) != null) {         loadStatisticsEnabled = Boolean.getBoolean(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED).         values.put(JmxSystemPropertyKeys.LOAD_STATISTICS_ENABLED, loadStatisticsEnabled).     }     if (System.getProperty(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED) != null) {         endpointRuntimeStatisticsEnabled = Boolean.getBoolean(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED).         values.put(JmxSystemPropertyKeys.ENDPOINT_RUNTIME_STATISTICS_ENABLED, endpointRuntimeStatisticsEnabled).     }     if (System.getProperty(JmxSystemPropertyKeys.STATISTICS_LEVEL) != null) {         statisticsLevel = camelContext.getTypeConverter().mandatoryConvertTo(ManagementStatisticsLevel.class, System.getProperty(JmxSystemPropertyKeys.STATISTICS_LEVEL)).         values.put(JmxSystemPropertyKeys.STATISTICS_LEVEL, statisticsLevel).     }     if (System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN) != null) {         managementNamePattern = System.getProperty(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN).         values.put(JmxSystemPropertyKeys.MANAGEMENT_NAME_PATTERN, managementNamePattern).     }     if (System.getProperty(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS) != null) {         useHostIPAddress = Boolean.getBoolean(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS).         values.put(JmxSystemPropertyKeys.USE_HOST_IP_ADDRESS, useHostIPAddress).     }     if (!values.isEmpty()) {         LOG.info("ManagementAgent detected JVM system properties: {}", values).     } }
false;public;1;3;;public void setRegistryPort(Integer port) {     registryPort = port. }
false;public;0;3;;public Integer getRegistryPort() {     return registryPort. }
false;public;1;3;;public void setConnectorPort(Integer port) {     connectorPort = port. }
false;public;0;3;;public Integer getConnectorPort() {     return connectorPort. }
false;public;1;3;;public void setMBeanServerDefaultDomain(String domain) {     mBeanServerDefaultDomain = domain. }
false;public;0;3;;public String getMBeanServerDefaultDomain() {     return mBeanServerDefaultDomain. }
false;public;1;3;;public void setMBeanObjectDomainName(String domainName) {     mBeanObjectDomainName = domainName. }
false;public;0;3;;public String getMBeanObjectDomainName() {     return mBeanObjectDomainName. }
false;public;1;3;;public void setServiceUrlPath(String url) {     serviceUrlPath = url. }
false;public;0;3;;public String getServiceUrlPath() {     return serviceUrlPath. }
false;public;1;3;;public void setCreateConnector(Boolean flag) {     createConnector = flag. }
false;public;0;3;;public Boolean getCreateConnector() {     return createConnector. }
false;public;1;3;;public void setUsePlatformMBeanServer(Boolean flag) {     usePlatformMBeanServer = flag. }
false;public;0;3;;public Boolean getUsePlatformMBeanServer() {     return usePlatformMBeanServer. }
false;public;0;3;;public Boolean getOnlyRegisterProcessorWithCustomId() {     return onlyRegisterProcessorWithCustomId. }
false;public;1;3;;public void setOnlyRegisterProcessorWithCustomId(Boolean onlyRegisterProcessorWithCustomId) {     this.onlyRegisterProcessorWithCustomId = onlyRegisterProcessorWithCustomId. }
false;public;1;3;;public void setMBeanServer(MBeanServer mbeanServer) {     server = mbeanServer. }
false;public;0;3;;public MBeanServer getMBeanServer() {     return server. }
false;public;0;3;;public Boolean getRegisterAlways() {     return registerAlways != null && registerAlways. }
false;public;1;3;;public void setRegisterAlways(Boolean registerAlways) {     this.registerAlways = registerAlways. }
false;public;0;3;;public Boolean getRegisterNewRoutes() {     return registerNewRoutes != null && registerNewRoutes. }
false;public;1;3;;public void setRegisterNewRoutes(Boolean registerNewRoutes) {     this.registerNewRoutes = registerNewRoutes. }
false;public;0;3;;public Boolean getMask() {     return mask != null && mask. }
false;public;1;3;;public void setMask(Boolean mask) {     this.mask = mask. }
false;public;0;3;;public Boolean getIncludeHostName() {     return includeHostName != null && includeHostName. }
false;public;1;3;;public void setIncludeHostName(Boolean includeHostName) {     this.includeHostName = includeHostName. }
false;public;0;3;;public Boolean getUseHostIPAddress() {     return useHostIPAddress != null && useHostIPAddress. }
false;public;1;3;;public void setUseHostIPAddress(Boolean useHostIPAddress) {     this.useHostIPAddress = useHostIPAddress. }
false;public;0;3;;public String getManagementNamePattern() {     return managementNamePattern. }
false;public;1;3;;public void setManagementNamePattern(String managementNamePattern) {     this.managementNamePattern = managementNamePattern. }
false;public;0;3;;public Boolean getLoadStatisticsEnabled() {     return loadStatisticsEnabled. }
false;public;1;3;;public void setLoadStatisticsEnabled(Boolean loadStatisticsEnabled) {     this.loadStatisticsEnabled = loadStatisticsEnabled. }
false;public;0;3;;public Boolean getEndpointRuntimeStatisticsEnabled() {     return endpointRuntimeStatisticsEnabled. }
false;public;1;3;;public void setEndpointRuntimeStatisticsEnabled(Boolean endpointRuntimeStatisticsEnabled) {     this.endpointRuntimeStatisticsEnabled = endpointRuntimeStatisticsEnabled. }
false;public;0;3;;public ManagementStatisticsLevel getStatisticsLevel() {     return statisticsLevel. }
false;public;1;3;;public void setStatisticsLevel(ManagementStatisticsLevel statisticsLevel) {     this.statisticsLevel = statisticsLevel. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;2;3;;public void register(Object obj, ObjectName name) throws JMException {     register(obj, name, false). }
false;public;3;13;;public void register(Object obj, ObjectName name, boolean forceRegistration) throws JMException {     try {         registerMBeanWithServer(obj, name, forceRegistration).     } catch (NotCompliantMBeanException e) {         // If this is not a "normal" MBean, then try to deploy it using JMX annotations         ObjectHelper.notNull(assembler, "ManagementMBeanAssembler", camelContext).         Object mbean = assembler.assemble(server, obj, name).         if (mbean != null) {             // and register the mbean             registerMBeanWithServer(mbean, name, forceRegistration).         }     } }
false;public;1;9;;public void unregister(ObjectName name) throws JMException {     if (isRegistered(name)) {         ObjectName on = mbeansRegistered.remove(name).         server.unregisterMBean(on).         LOG.debug("Unregistered MBean with ObjectName: {}", name).     } else {         mbeansRegistered.remove(name).     } }
false;public;1;8;;public boolean isRegistered(ObjectName name) {     if (server == null) {         return false.     }     ObjectName on = mbeansRegistered.get(name).     return (on != null && server.isRegistered(on)) || server.isRegistered(name). }
false;public;2;8;;public <T> T newProxyClient(ObjectName name, Class<T> mbean) {     if (isRegistered(name)) {         ObjectName on = mbeansRegistered.get(name).         return MBeanServerInvocationHandler.newProxyInstance(server, on != null ? on : name, mbean, false).     } else {         return null.     } }
false;protected;0;18;;protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext").     // create mbean server if is has not be injected.     if (server == null) {         finalizeSettings().         createMBeanServer().     }     // ensure assembler is started     assembler = camelContext.getManagementMBeanAssembler().     if (assembler == null) {         assembler = new DefaultManagementMBeanAssembler(camelContext).     }     ServiceHelper.startService(assembler).     LOG.debug("Starting JMX agent on server: {}", getMBeanServer()). }
false;protected;0;46;;protected void doStop() throws Exception {     // close JMX Connector, if it was created     if (cs != null) {         try {             cs.stop().             LOG.debug("Stopped JMX Connector").         } catch (IOException e) {             LOG.debug("Error occurred during stopping JMXConnectorService: " + cs + ". This exception will be ignored.").         }         cs = null.     }     // Unexport JMX RMI registry, if it was created     if (registry != null) {         try {             UnicastRemoteObject.unexportObject(registry, true).             LOG.debug("Unexported JMX RMI Registry").         } catch (NoSuchObjectException e) {             LOG.debug("Error occurred while unexporting JMX RMI registry. This exception will be ignored.").         }     }     if (mbeansRegistered.isEmpty()) {         return.     }     // Using the array to hold the busMBeans to avoid the CurrentModificationException     ObjectName[] mBeans = mbeansRegistered.keySet().toArray(new ObjectName[mbeansRegistered.size()]).     int caught = 0.     for (ObjectName name : mBeans) {         try {             unregister(name).         } catch (Exception e) {             LOG.info("Exception unregistering MBean with name {}", name, e).             caught++.         }     }     if (caught > 0) {         LOG.warn("A number of " + caught + " exceptions caught while unregistering MBeans during stop operation." + " See INFO log for details.").     }     ServiceHelper.stopService(assembler). }
false;private;3;29;;private void registerMBeanWithServer(Object obj, ObjectName name, boolean forceRegistration) throws JMException {     // have we already registered the bean, there can be shared instances in the camel routes     boolean exists = isRegistered(name).     if (exists) {         if (forceRegistration) {             LOG.info("ForceRegistration enabled, unregistering existing MBean with ObjectName: {}", name).             server.unregisterMBean(name).         } else {             // okay ignore we do not want to force it and it could be a shared instance             LOG.debug("MBean already registered with ObjectName: {}", name).         }     }     // register bean if by force or not exists     ObjectInstance instance = null.     if (forceRegistration || !exists) {         LOG.trace("Registering MBean with ObjectName: {}", name).         instance = server.registerMBean(obj, name).     }     // need to use the name returned from the server as some JEE servers may modify the name     if (instance != null) {         ObjectName registeredName = instance.getObjectName().         LOG.debug("Registered MBean with ObjectName: {}", registeredName).         mbeansRegistered.put(name, registeredName).     } }
false;protected;0;39;;protected void createMBeanServer() {     String hostName.     boolean canAccessSystemProps = true.     try {         // we'll do it this way mostly to determine if we should lookup the hostName         SecurityManager sm = System.getSecurityManager().         if (sm != null) {             sm.checkPropertiesAccess().         }     } catch (SecurityException se) {         canAccessSystemProps = false.     }     if (canAccessSystemProps) {         try {             if (useHostIPAddress) {                 hostName = InetAddress.getLocalHost().getHostAddress().             } else {                 hostName = InetAddressUtil.getLocalHostName().             }         } catch (UnknownHostException uhe) {             LOG.info("Cannot determine localhost name or address. Using default: {}", DEFAULT_REGISTRY_PORT, uhe).             hostName = DEFAULT_HOST.         }     } else {         hostName = DEFAULT_HOST.     }     server = findOrCreateMBeanServer().     try {         // Create the connector if we need         if (createConnector) {             createJmxConnector(hostName).         }     } catch (IOException ioe) {         LOG.warn("Could not create and start JMX connector.", ioe).     } }
false;protected;0;21;;protected MBeanServer findOrCreateMBeanServer() {     // return platform mbean server if the option is specified.     if (usePlatformMBeanServer) {         return ManagementFactory.getPlatformMBeanServer().     }     // look for the first mbean server that has match default domain name     List<MBeanServer> servers = MBeanServerFactory.findMBeanServer(null).     for (MBeanServer server : servers) {         LOG.debug("Found MBeanServer with default domain {}", server.getDefaultDomain()).         if (mBeanServerDefaultDomain.equals(server.getDefaultDomain())) {             return server.         }     }     // create a mbean server with the given default domain name     return MBeanServerFactory.createMBeanServer(mBeanServerDefaultDomain). }
false;public;0;9;;public void run() {     try {         LOG.debug("Staring JMX Connector thread to listen at: {}", url).         cs.start().         LOG.info("JMX Connector thread started and listening at: {}", url).     } catch (IOException ioe) {         LOG.warn("Could not start JMXConnector thread at: " + url + ". JMX Connector not in use.", ioe).     } }
false;protected;1;40;;protected void createJmxConnector(String host) throws IOException {     StringHelper.notEmpty(serviceUrlPath, "serviceUrlPath").     ObjectHelper.notNull(registryPort, "registryPort").     try {         registry = LocateRegistry.createRegistry(registryPort).         LOG.debug("Created JMXConnector RMI registry on port {}", registryPort).     } catch (RemoteException ex) {     // The registry may had been created, we could get the registry instead     }     // must start with leading slash     String path = serviceUrlPath.startsWith("/") ? serviceUrlPath : "/" + serviceUrlPath.     // Create an RMI connector and start it     final JMXServiceURL url.     if (connectorPort > 0) {         url = new JMXServiceURL("service:jmx:rmi://" + host + ":" + connectorPort + "/jndi/rmi://" + host + ":" + registryPort + path).     } else {         url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://" + host + ":" + registryPort + path).     }     cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server).     // use async thread for starting the JMX Connector     // (no need to use a thread pool or enlist in JMX as this thread is terminated when the JMX connector has been started)     String threadName = camelContext.getExecutorServiceManager().resolveThreadName("JMXConnector: " + url).     Thread thread = getCamelContext().getExecutorServiceManager().newThread(threadName, new Runnable() {          public void run() {             try {                 LOG.debug("Staring JMX Connector thread to listen at: {}", url).                 cs.start().                 LOG.info("JMX Connector thread started and listening at: {}", url).             } catch (IOException ioe) {                 LOG.warn("Could not start JMXConnector thread at: " + url + ". JMX Connector not in use.", ioe).             }         }     }).     thread.start(). }
