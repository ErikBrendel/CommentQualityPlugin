commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void init(ManagementStrategy strategy) { // do nothing }
false;public;0;3;;public CamelContext getContext() {     return context. }
false;public;0;10;;@Override public boolean getIsHealthy() {     for (HealthCheck.Result result : HealthCheckHelper.invoke(context)) {         if (result.getState() == HealthCheck.State.DOWN) {             return false.         }     }     return true. }
false;public;0;9;;@Override public Collection<String> getHealthChecksIDs() {     HealthCheckRegistry registry = HealthCheckRegistry.get(context).     if (registry != null) {         return registry.getCheckIDs().     }     return Collections.emptyList(). }
false;public;0;37;;@Override public TabularData details() {     try {         final TabularData answer = new TabularDataSupport(CamelOpenMBeanTypes.camelHealthDetailsTabularType()).         final CompositeType type = CamelOpenMBeanTypes.camelHealthDetailsCompositeType().         for (HealthCheck.Result result : HealthCheckHelper.invoke(context)) {             CompositeData data = new CompositeDataSupport(type, new String[] { "id", "group", "state", "enabled", "interval", "failureThreshold" }, new Object[] { result.getCheck().getId(), result.getCheck().getGroup(), result.getState().name(), result.getCheck().getConfiguration().isEnabled(), result.getCheck().getConfiguration().getInterval() != null ? result.getCheck().getConfiguration().getInterval().toMillis() : null, result.getCheck().getConfiguration().getFailureThreshold() }).             answer.put(data).         }         return answer.     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;1;6;;@Override public String invoke(String id) {     Optional<HealthCheck.Result> result = HealthCheckHelper.invoke(context, id, Collections.emptyMap()).     return result.map(r -> r.getState().name()).orElse(HealthCheck.State.UNKNOWN.name()). }
