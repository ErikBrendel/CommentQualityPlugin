commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/suspended").     super.setUp(). }
false;public;0;59;;@Test public void testConsumeSuspendAndResumeFile() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null).     assertEquals(1, set.size()).     ObjectName on = set.iterator().next().     boolean registered = mbeanServer.isRegistered(on).     assertEquals("Should be registered", true, registered).     Boolean ss = (Boolean) mbeanServer.getAttribute(on, "SupportSuspension").     assertEquals(true, ss.booleanValue()).     Boolean suspended = (Boolean) mbeanServer.getAttribute(on, "Suspended").     assertEquals(false, suspended.booleanValue()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/suspended", "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader("file://target/data/suspended", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     await().atMost(2, TimeUnit.SECONDS).untilAsserted(() -> {         // now its suspended by the policy         Boolean bool = (Boolean) mbeanServer.getAttribute(on, "Suspended").         assertEquals(true, bool.booleanValue()).     }).     // the route is suspended by the policy so we should only receive one     String[] files = new File("target/data/suspended/").list().     assertNotNull(files).     assertEquals("The file should exists", 1, files.length).     // reset mock     mock.reset().     mock.expectedMessageCount(1).     // now resume it     mbeanServer.invoke(on, "resume", null, null).     assertMockEndpointsSatisfied().     suspended = (Boolean) mbeanServer.getAttribute(on, "Suspended").     assertEquals(false, suspended.booleanValue()).     await().atMost(2, TimeUnit.SECONDS).untilAsserted(() -> {         // and the file is now deleted         String[] names = new File("target/data/suspended/").list().         assertNotNull(names).         assertEquals("The file should exists", 0, names.length).     }). }
false;public;0;8;;@Override public void configure() throws Exception {     MyPolicy myPolicy = new MyPolicy().     from("file://target/data/suspended?initialDelay=0&delay=10&maxMessagesPerPoll=1&delete=true").routePolicy(myPolicy).id("myRoute").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             MyPolicy myPolicy = new MyPolicy().             from("file://target/data/suspended?initialDelay=0&delay=10&maxMessagesPerPoll=1&delete=true").routePolicy(myPolicy).id("myRoute").to("mock:result").         }     }. }
false;public;2;10;;public void onExchangeDone(Route route, Exchange exchange) {     // only stop it at first run     if (counter++ == 0) {         try {             super.suspendOrStopConsumer(route.getConsumer()).         } catch (Exception e) {             handleException(e).         }     } }
