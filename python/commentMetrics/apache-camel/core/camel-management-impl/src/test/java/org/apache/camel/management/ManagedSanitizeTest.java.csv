commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().getManagementAgent().setMask(true).     return context. }
false;public;0;9;;@Test public void testSanitize() throws Exception {     MBeanServer mbeanServer = getMBeanServer().     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"stub://foo\\?password=xxxxxx&username=foo\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)).     String uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("stub://foo?password=xxxxxx&username=foo", uri). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").to("stub:foo?username=foo&password=secret").to("mock:result").     from("stub:foo?username=foo&password=secret").routeId("stub").to("mock:stub"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").to("stub:foo?username=foo&password=secret").to("mock:result").             from("stub:foo?username=foo&password=secret").routeId("stub").to("mock:stub").         }     }. }
