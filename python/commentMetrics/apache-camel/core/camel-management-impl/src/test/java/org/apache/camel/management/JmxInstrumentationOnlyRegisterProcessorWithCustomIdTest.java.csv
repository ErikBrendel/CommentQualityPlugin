commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;30;;@Test public void testCustomId() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     Set<ObjectName> s = server.queryNames(new ObjectName(domainName + ":type=endpoints,*"), null).     assertEquals("Could not find 2 endpoints: " + s, 6, s.size()).     s = server.queryNames(new ObjectName(domainName + ":type=context,*"), null).     assertEquals("Could not find 1 context: " + s, 1, s.size()).     s = server.queryNames(new ObjectName(domainName + ":type=processors,*"), null).     assertEquals("Could not find 1 processor: " + s, 1, s.size()).     // should be mock foo     ObjectName on = s.iterator().next().     String id = (String) server.getAttribute(on, "ProcessorId").     assertEquals("myfoo", id).     s = server.queryNames(new ObjectName(domainName + ":type=routes,*"), null).     assertEquals("Could not find 2 route: " + s, 2, s.size()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().getManagementAgent().setOnlyRegisterProcessorWithCustomId(true).     return context. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     server = ManagementFactory.getPlatformMBeanServer(). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").id("myfoo").delay(10).to("mock:result").     from("direct:other").to("mock:bar").delay(10).to("mock:other"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").id("myfoo").delay(10).to("mock:result").             from("direct:other").to("mock:bar").delay(10).to("mock:other").         }     }. }
