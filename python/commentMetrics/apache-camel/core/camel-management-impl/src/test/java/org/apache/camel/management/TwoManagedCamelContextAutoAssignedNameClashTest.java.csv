commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext().     return context. }
false;public;0;26;;@Test public void testTwoManagedCamelContextClash() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     camel1 = createCamelContext().     camel1.start().     assertTrue("Should be started", camel1.getStatus().isStarted()).     MBeanServer mbeanServer = camel1.getManagementStrategy().getManagementAgent().getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=" + camel1.getManagementName() + ",type=context,name=\"camel-1\"").     assertTrue("Should be registered", mbeanServer.isRegistered(on)).     // now cheat and reset the counter so we can test for a clash     DefaultCamelContextNameStrategy.setCounter(0).     camel2 = createCamelContext().     camel2.start().     ObjectName on2 = ObjectName.getInstance("org.apache.camel:context=" + camel2.getManagementName() + ",type=context,name=\"camel-1\"").     assertTrue("Should be registered", mbeanServer.isRegistered(on2)).     assertTrue("Should still be registered after name clash", mbeanServer.isRegistered(on)).     assertTrue("Should still be registered after name clash", mbeanServer.isRegistered(on2)). }
false;public;0;11;;@Override @After public void tearDown() throws Exception {     if (camel1 != null) {         camel1.stop().     }     if (camel2 != null) {         camel2.stop().     }     super.tearDown(). }
