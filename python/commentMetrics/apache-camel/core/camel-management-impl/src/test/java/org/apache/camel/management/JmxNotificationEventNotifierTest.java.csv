commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;16;;@Override protected CamelContext createCamelContext() throws Exception {     // START SNIPPET: e1     // Set up the JmxNotificationEventNotifier     notifier = new JmxNotificationEventNotifier().     notifier.setSource("MyCamel").     notifier.setIgnoreCamelContextEvents(true).     notifier.setIgnoreRouteEvents(true).     notifier.setIgnoreServiceEvents(true).     CamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(notifier).     // END SNIPPET: e1     return context. }
false;public;1;3;;public boolean isNotificationEnabled(Notification notification) {     return notification.getSource().equals("MyCamel"). }
false;public;0;27;;@Test public void testExchangeDone() throws Exception {     // START SNIPPET: e2     // register the NotificationListener     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=eventnotifiers,name=JmxEventNotifier").     MyNotificationListener listener = new MyNotificationListener().     context.getManagementStrategy().getManagementAgent().getMBeanServer().addNotificationListener(on, listener, new NotificationFilter() {          private static final long serialVersionUID = 1L.          public boolean isNotificationEnabled(Notification notification) {             return notification.getSource().equals("MyCamel").         }     }, null).     // END SNIPPET: e2     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Get a wrong number of events", 8, listener.getEventCounter()).     context.stop(). }
false;public;1;3;;public boolean isNotificationEnabled(Notification notification) {     return true. }
false;public;0;26;;@Test public void testExchangeFailed() throws Exception {     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=eventnotifiers,name=JmxEventNotifier").     MyNotificationListener listener = new MyNotificationListener().     context.getManagementStrategy().getManagementAgent().getMBeanServer().addNotificationListener(on, listener, new NotificationFilter() {          private static final long serialVersionUID = 1L.          public boolean isNotificationEnabled(Notification notification) {             return true.         }     }, null).     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown an exception").     } catch (Exception e) {         // expected         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).     }     assertEquals("Get a wrong number of events", 4, listener.getEventCounter()).     context.stop(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result").     from("direct:fail").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").             from("direct:fail").throwException(new IllegalArgumentException("Damn")).         }     }. }
false;public;2;4;;public void handleNotification(Notification notification, Object handback) {     log.debug("Get the notification : " + notification).     eventCounter++. }
false;public;0;3;;public int getEventCounter() {     return eventCounter. }
