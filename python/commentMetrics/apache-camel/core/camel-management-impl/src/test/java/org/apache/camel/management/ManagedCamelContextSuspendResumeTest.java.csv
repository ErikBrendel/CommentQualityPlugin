commented;modifiers;parameterAmount;loc;comment;code
false;public;0;46;;@Test public void testManagedCamelContext() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"").     assertTrue("Should be registered", mbeanServer.isRegistered(on)).     String name = (String) mbeanServer.getAttribute(on, "CamelId").     assertEquals("camel-1", name).     String uptime = (String) mbeanServer.getAttribute(on, "Uptime").     assertNotNull(uptime).     long uptimeMillis = (Long) mbeanServer.getAttribute(on, "UptimeMillis").     assertTrue(uptimeMillis > 0).     String status = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Started", status).     // invoke operations     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     Object reply = mbeanServer.invoke(on, "requestBody", new Object[] { "direct:foo", "Hello World" }, new String[] { "java.lang.String", "java.lang.Object" }).     assertEquals("Bye World", reply).     // suspend Camel     mbeanServer.invoke(on, "suspend", null, null).     status = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Suspended", status).     // resume Camel     mbeanServer.invoke(on, "resume", null, null).     status = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Started", status).     reply = mbeanServer.invoke(on, "requestBody", new Object[] { "direct:foo", "Hello Camel" }, new String[] { "java.lang.String", "java.lang.Object" }).     assertEquals("Bye World", reply). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").delay(10).transform(constant("Bye World")). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").delay(10).transform(constant("Bye World")).         }     }. }
