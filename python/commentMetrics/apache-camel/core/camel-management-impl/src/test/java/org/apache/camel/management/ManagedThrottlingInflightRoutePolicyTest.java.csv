commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;@Test public void testRoutes() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=routes,*"), null).     assertEquals(1, set.size()).     ObjectName on = set.iterator().next().     boolean registered = mbeanServer.isRegistered(on).     assertEquals("Should be registered", true, registered).     String uri = (String) mbeanServer.getAttribute(on, "EndpointUri").     // the route has this starting endpoint uri     assertEquals("direct://start", uri).     Long val = (Long) mbeanServer.getAttribute(on, "ExchangesInflight").     // the route has no inflight exchanges     assertEquals(0L, val.longValue()).     // should be started     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Should be started", ServiceStatus.Started.name(), state).     // should have route policy     String policy = (String) mbeanServer.getAttribute(on, "RoutePolicyList").     assertNotNull(policy).     assertTrue("Should be a throttling, was: " + policy, policy.startsWith("ThrottlingInflightRoutePolicy")). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").routePolicy(new ThrottlingInflightRoutePolicy()).to("log:foo").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routePolicy(new ThrottlingInflightRoutePolicy()).to("log:foo").to("mock:result").         }     }. }
