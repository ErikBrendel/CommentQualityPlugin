commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     counter = 0.     super.setUp(). }
false;protected;0;4;;@Override protected boolean useJmx() {     return jmx. }
false;public;0;4;;@Test public void testNoErrorHandler() throws Exception {     doTest(). }
false;public;0;4;;@Test public void testNoErrorHandlerJMXDisabled() throws Exception {     doTest(). }
false;private;0;20;;private void doTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Goodday World").     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (Exception e) {     // expected     }     try {         template.sendBody("direct:start", "Bye World").         fail("Should have thrown an exception").     } catch (Exception e) {     // expected     }     template.sendBody("direct:start", "Goodday World").     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     if (++counter < 3) {         throw new IllegalArgumentException("Forced by unit test").     } }
false;public;0;12;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             if (++counter < 3) {                 throw new IllegalArgumentException("Forced by unit test").             }         }     }).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     if (++counter < 3) {                         throw new IllegalArgumentException("Forced by unit test").                     }                 }             }).to("mock:result").         }     }. }
