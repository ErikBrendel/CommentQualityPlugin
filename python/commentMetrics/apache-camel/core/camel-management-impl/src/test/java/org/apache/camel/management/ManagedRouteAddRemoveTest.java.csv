commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").to("mock:result").         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:bar").routeId("bar").to("mock:bar"). }
false;public;0;63;;@Test public void testRouteAddRemoteRouteWithTo() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     Assume.assumeFalse(isPlatform("aix")).     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     // number of SERVICES     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // number of producers     ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*").     Set<ObjectName> namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:bar").routeId("bar").to("mock:bar").         }     }).     // and send a message to it     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(1).     template.sendBody("direct:bar", "Hello World").     bar.assertIsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // but we should have one more producer     namesP = mbeanServer.queryNames(onP, null).     assertEquals(2, namesP.size()).     log.info("Removing 2nd route").     // now remove the 2nd route     context.getRouteController().stopRoute("bar").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // and the 2nd producer should be removed     namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Shutting down..."). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:bar").routeId("bar").recipientList(header("bar")). }
false;public;0;60;;@Test public void testRouteAddRemoteRouteWithRecipientList() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of SERVICES     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // number of producers     ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*").     Set<ObjectName> namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:bar").routeId("bar").recipientList(header("bar")).         }     }).     // and send a message to it     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(1).     template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "mock:bar").     bar.assertIsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // but as its recipient list which is dynamic-to we do not add a new producer     namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Removing 2nd route").     // now remove the 2nd route     context.getRouteController().stopRoute("bar").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // and we still have the original producer     namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Shutting down..."). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:bar").routeId("bar").routingSlip(header("bar")). }
false;public;0;60;;@Test public void testRouteAddRemoteRouteWithRoutingSlip() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of SERVICES     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // number of producers     ObjectName onP = ObjectName.getInstance("org.apache.camel:context=camel-1,type=producers,*").     Set<ObjectName> namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:bar").routeId("bar").routingSlip(header("bar")).         }     }).     // and send a message to it     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(1).     template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "mock:bar").     bar.assertIsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // but as its recipient list which is dynamic-to we do not add a new producer     namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Removing 2nd route").     // now remove the 2nd route     context.getRouteController().stopRoute("bar").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // and we still have the original producer     namesP = mbeanServer.queryNames(onP, null).     assertEquals(1, namesP.size()).     log.info("Shutting down..."). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:bar").routeId("bar").onException(Exception.class).handled(true).recipientList(header("error")).end().end().recipientList(header("bar")).throwException(new IllegalArgumentException("Forced")). }
false;public;0;58;;@Test public void testRouteAddRemoteRouteWithRecipientListAndRouteScopedOnException() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of SERVICES     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:bar").routeId("bar").onException(Exception.class).handled(true).recipientList(header("error")).end().end().recipientList(header("bar")).throwException(new IllegalArgumentException("Forced")).         }     }).     // and send a message to it     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("error", "mock:error").     headers.put("bar", "mock:bar").     template.sendBodyAndHeaders("direct:bar", "Hello World", headers).     assertMockEndpointsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // now stop and remove the 2nd route     log.info("Stopping 2nd route").     context.getRouteController().stopRoute("bar").     log.info("Removing 2nd route").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Shutting down..."). }
false;public;0;10;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).recipientList(header("error")).end().     from("direct:bar").routeId("bar").recipientList(header("bar")).throwException(new IllegalArgumentException("Forced")). }
false;public;0;59;;@Test public void testRouteAddRemoteRouteWithRecipientListAndContextScopedOnException() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of SERVICES     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).recipientList(header("error")).end().             from("direct:bar").routeId("bar").recipientList(header("bar")).throwException(new IllegalArgumentException("Forced")).         }     }).     // and send a message to it     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("error", "mock:error").     headers.put("bar", "mock:bar").     template.sendBodyAndHeaders("direct:bar", "Hello World", headers).     assertMockEndpointsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // now stop and remove the 2nd route     log.info("Stopping 2nd route").     context.getRouteController().stopRoute("bar").     log.info("Removing 2nd route").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Shutting down..."). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:bar").routeId("bar").onCompletion().recipientList(header("done")).end().end().recipientList(header("bar")). }
false;public;0;57;;@Test public void testRouteAddRemoteRouteWithRecipientListAndRouteScopedOnCompletion() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of SERVICES     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:bar").routeId("bar").onCompletion().recipientList(header("done")).end().end().recipientList(header("bar")).         }     }).     // and send a message to it     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:done").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("done", "mock:done").     headers.put("bar", "mock:bar").     template.sendBodyAndHeaders("direct:bar", "Hello World", headers).     assertMockEndpointsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // now stop and remove the 2nd route     log.info("Stopping 2nd route").     context.getRouteController().stopRoute("bar").     log.info("Removing 2nd route").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Shutting down..."). }
false;public;0;9;;@Override public void configure() throws Exception {     onCompletion().recipientList(header("done")).end().     from("direct:bar").routeId("bar").recipientList(header("bar")). }
false;public;0;58;;@Test public void testRouteAddRemoteRouteWithRecipientListAndContextScopedOnCompletion() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     result.assertIsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of SERVICES     Set<ObjectName> names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Adding 2nd route").     // add a 2nd route     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().recipientList(header("done")).end().             from("direct:bar").routeId("bar").recipientList(header("bar")).         }     }).     // and send a message to it     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:done").expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("done", "mock:done").     headers.put("bar", "mock:bar").     template.sendBodyAndHeaders("direct:bar", "Hello World", headers).     assertMockEndpointsSatisfied().     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     // now stop and remove the 2nd route     log.info("Stopping 2nd route").     context.getRouteController().stopRoute("bar").     log.info("Removing 2nd route").     boolean removed = context.removeRoute("bar").     assertTrue(removed).     // there should still be the same number of SERVICES     names = mbeanServer.queryNames(on, null).     assertEquals(SERVICES, names.size()).     log.info("Shutting down..."). }
