commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getRegistry().bind("foo", new MockEndpoint("mock://foo", new MockComponent(context))).     return context. }
false;public;0;41;;@Test public void testProducer() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     // fire a message to get it running     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("foo").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=producers,*"), null).     assertEquals(2, set.size()).     for (ObjectName on : set) {         boolean registered = mbeanServer.isRegistered(on).         assertEquals("Should be registered", true, registered).         String uri = (String) mbeanServer.getAttribute(on, "EndpointUri").         assertTrue(uri, uri.equals("mock://foo") || uri.equals("mock://result")).         // should be started         String state = (String) mbeanServer.getAttribute(on, "State").         assertEquals("Should be started", ServiceStatus.Started.name(), state).     }     set = mbeanServer.queryNames(new ObjectName("*:type=endpoints,*"), null).     assertEquals(4, set.size()).     for (ObjectName on : set) {         boolean registered = mbeanServer.isRegistered(on).         assertEquals("Should be registered", true, registered).         String uri = (String) mbeanServer.getAttribute(on, "EndpointUri").         assertTrue(uri, uri.equals("direct://start") || uri.equals("ref://foo") || uri.equals("mock://foo") || uri.equals("mock://result")).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").to("ref:foo").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").to("ref:foo").to("mock:result").         }     }. }
