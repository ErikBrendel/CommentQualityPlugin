commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("hello"). }
false;public;0;18;;@Test public void testExceptionHandler() throws Exception {     MockEndpoint error = this.resolveMandatoryEndpoint("mock:error", MockEndpoint.class).     error.expectedMessageCount(1).     MockEndpoint out = this.resolveMandatoryEndpoint("mock:out", MockEndpoint.class).     out.expectedMessageCount(0).     template.send("direct:start", ExchangePattern.InOnly, new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("hello").         }     }).     error.assertIsSatisfied().     out.assertIsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("intentional error"). }
false;public;0;11;;public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     onException(IllegalArgumentException.class).redeliveryDelay(0).maximumRedeliveries(1).to("mock:error").     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("intentional error").         }     }).to("mock:out"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             onException(IllegalArgumentException.class).redeliveryDelay(0).maximumRedeliveries(1).to("mock:error").             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("intentional error").                 }             }).to("mock:out").         }     }. }
