commented;modifiers;parameterAmount;loc;comment;code
false;public;0;47;;@Test public void testSetAndRemove() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     // fire a message to get it running     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null).     assertEquals(8, set.size()).     boolean found = false.     boolean found2 = false.     boolean found3 = false.     boolean found4 = false.     boolean found5 = false.     boolean found6 = false.     for (ObjectName on : set) {         boolean registered = mbeanServer.isRegistered(on).         assertEquals("Should be registered", true, registered).         // should be one with name setFoo         String id = (String) mbeanServer.getAttribute(on, "ProcessorId").         log.info("id = {}", id).         found |= "setFoo".equals(id).         found2 |= "setBeer".equals(id).         found3 |= "unsetFoo".equals(id).         found4 |= "unsetFoos".equals(id).         found5 |= "unsetBeer".equals(id).         found6 |= "unsetBeers".equals(id).     }     assertTrue("Should find setHeader mbean", found).     assertTrue("Should find setProperty mbean", found2).     assertTrue("Should find removeHeader mbean", found3).     assertTrue("Should find removeHeaders mbean", found4).     assertTrue("Should find removeProperty mbean", found5).     assertTrue("Should find removeProperty mbean", found6). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").setHeader("foo", constant("bar")).id("setFoo").setProperty("beer", constant("yes")).id("setBeer").removeHeader("foo").id("unsetFoo").removeHeaders("foo").id("unsetFoos").removeProperty("beer").id("unsetBeer").removeProperties("beer").id("unsetBeers").to("log:foo").id("logFoo").to("mock:result").id("mockResult"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").setHeader("foo", constant("bar")).id("setFoo").setProperty("beer", constant("yes")).id("setBeer").removeHeader("foo").id("unsetFoo").removeHeaders("foo").id("unsetFoos").removeProperty("beer").id("unsetBeer").removeProperties("beer").id("unsetBeers").to("log:foo").id("logFoo").to("mock:result").id("mockResult").         }     }. }
