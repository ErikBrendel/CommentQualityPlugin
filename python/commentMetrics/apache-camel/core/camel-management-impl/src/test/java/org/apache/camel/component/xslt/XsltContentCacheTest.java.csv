commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     super.setUp().     // create file with original XSL transformation     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override", ORIGINAL_XSL, Exchange.FILE_NAME, "hello.xsl").     // start the context AFTER we've created the hello.xsl file, otherwise the xslt routes will fail     super.startCamelContext(). }
false;public;0;4;;@Override public boolean useJmx() {     return true. }
false;protected;0;4;;@Override protected void startCamelContext() throws Exception { // Override so we can start the context ourself in the setUp }
false;public;0;18;;@Test public void testNotCached() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:a", "<hello>world!</hello>").     mock.assertIsSatisfied().     // now replace the file with a new XSL transformation     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override", NEW_XSL, Exchange.FILE_NAME, "hello.xsl").     mock.reset().     // we expect the new output as the cache is not enabled, so it's "goodnight" and not "goodbye"     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodnight>world!</goodnight>").     template.sendBody("direct:a", "<hello>world!</hello>").     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testCached() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:b", "<hello>world!</hello>").     mock.assertIsSatisfied().     // now replace the file with a new XSL transformation     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override", NEW_XSL, Exchange.FILE_NAME, "hello.xsl").     mock.reset().     // we expect the original output as the cache is enabled, so it's "goodbye" and not "goodnight"     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:b", "<hello>world!</hello>").     mock.assertIsSatisfied(). }
false;public;0;18;;@Test public void testCachedIsDefault() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:c", "<hello>world!</hello>").     mock.assertIsSatisfied().     // now replace the file with a new XSL transformation     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override", NEW_XSL, Exchange.FILE_NAME, "hello.xsl").     mock.reset().     // we expect the original output as the cache is enabled, so it's "goodbye" and not "goodnight"     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:c", "<hello>world!</hello>").     mock.assertIsSatisfied(). }
false;public;0;34;;@Test public void testClearCachedStylesheetViaJmx() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:b", "<hello>world!</hello>").     mock.assertIsSatisfied().     // now replace the file with a new XSL transformation     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override", NEW_XSL, Exchange.FILE_NAME, "hello.xsl").     mock.reset().     // we expect the original output as the cache is enabled, so it's "goodbye" and not "goodnight"     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBody("direct:b", "<hello>world!</hello>").     mock.assertIsSatisfied().     // clear the cache via the mbean server     MBeanServer mbeanServer = context.getManagementStrategy().getManagementAgent().getMBeanServer().     Set<ObjectName> objNameSet = mbeanServer.queryNames(new ObjectName("org.apache.camel:type=endpoints,name=\"xslt:*contentCache=true*\",*"), null).     ObjectName managedObjName = new ArrayList<>(objNameSet).get(0).     mbeanServer.invoke(managedObjName, "clearCachedStylesheet", null, null).     // now replace the file with a new XSL transformation     template.sendBodyAndHeader("file://target/test-classes/org/apache/camel/component/xslt?fileExist=Override", NEW_XSL, Exchange.FILE_NAME, "hello.xsl").     mock.reset().     // we've cleared the cache so we expect "goodnight" and not "goodbye"     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodnight>world!</goodnight>").     template.sendBody("direct:b", "<hello>world!</hello>").     mock.assertIsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     from("direct:a").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string&contentCache=false").to("mock:result").     from("direct:b").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string&contentCache=true").to("mock:result").     from("direct:c").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string").to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:a").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string&contentCache=false").to("mock:result").             from("direct:b").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string&contentCache=true").to("mock:result").             from("direct:c").to("xslt://org/apache/camel/component/xslt/hello.xsl?output=string").to("mock:result").         }     }. }
