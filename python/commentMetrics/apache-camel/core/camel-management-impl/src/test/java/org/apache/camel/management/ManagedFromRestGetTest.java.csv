commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getRegistry().bind("dummy-test", new DummyRestConsumerFactory()).     return context. }
false;public;0;46;;@Test public void testFromRestModel() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"").     String xml = (String) mbeanServer.invoke(on, "dumpRestsAsXml", null, null).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<rests")).     assertTrue(xml.contains("<rest path=\"/say/hello\">")).     assertTrue(xml.contains("<rest path=\"/say/bye\">")).     assertTrue(xml.contains("</rest>")).     assertTrue(xml.contains("<get")).     assertTrue(xml.contains("application/json")).     assertTrue(xml.contains("<post")).     assertTrue(xml.contains("application/json")).     assertTrue(xml.contains("</rests>")).     assertTrue(xml.contains("<param collectionFormat=\"multi\" dataType=\"string\" defaultValue=\"b\" " + "description=\"header param description2\" name=\"header_letter\" required=\"false\" type=\"query\">")).     assertTrue(xml.contains("<param dataType=\"integer\" defaultValue=\"1\" " + "description=\"header param description1\" name=\"header_count\" required=\"true\" type=\"header\">")).     assertTrue(xml.contains("<value>1</value>")).     assertTrue(xml.contains("<value>a</value>")).     assertTrue(xml.contains("<responseMessage code=\"300\" message=\"test msg\" responseModel=\"java.lang.Integer\"/>")).     String xml2 = (String) mbeanServer.invoke(on, "dumpRoutesAsXml", null, null).     log.info(xml2).     // and we should have rest in the routes that indicate its from a rest dsl     assertTrue(xml2.contains("rest=\"true\"")).     assertTrue(xml2.contains(" <to id=\"to1\" uri=\"direct:hello\"/>")).     assertTrue(xml2.contains("<to id=\"to2\" uri=\"direct:bye\"/>")).     assertTrue(xml2.contains("<to id=\"to3\" uri=\"mock:update\"/>")).     // there should be 3 + 2 routes     assertEquals(3 + 2, context.getRouteDefinitions().size()). }
false;public;0;24;;@Override public void configure() throws Exception {     restConfiguration().host("localhost").     rest("/say/hello").get().to("direct:hello").     rest("/say/bye").get().consumes("application/json").param().type(RestParamType.header).description("header param description1").dataType("integer").allowableValues(Arrays.asList("1", "2", "3", "4")).defaultValue("1").name("header_count").required(true).endParam().param().type(RestParamType.query).description("header param description2").dataType("string").allowableValues(Arrays.asList("a", "b", "c", "d")).defaultValue("b").collectionFormat(CollectionFormat.multi).name("header_letter").required(false).endParam().responseMessage().code(300).message("test msg").responseModel(Integer.class).endResponseMessage().to("direct:bye").post().to("mock:update").     from("direct:hello").transform().constant("Hello World").     from("direct:bye").transform().constant("Bye World"). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().host("localhost").             rest("/say/hello").get().to("direct:hello").             rest("/say/bye").get().consumes("application/json").param().type(RestParamType.header).description("header param description1").dataType("integer").allowableValues(Arrays.asList("1", "2", "3", "4")).defaultValue("1").name("header_count").required(true).endParam().param().type(RestParamType.query).description("header param description2").dataType("string").allowableValues(Arrays.asList("a", "b", "c", "d")).defaultValue("b").collectionFormat(CollectionFormat.multi).name("header_letter").required(false).endParam().responseMessage().code(300).message("test msg").responseModel(Integer.class).endResponseMessage().to("direct:bye").post().to("mock:update").             from("direct:hello").transform().constant("Hello World").             from("direct:bye").transform().constant("Bye World").         }     }. }
