commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;9;;@Test public void testReduceStacksNeeded() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     // context.setTracing(true).     MyEndpoint my = new MyEndpoint("myendpoint:foo", getContext()).     from("seda:start").to("log:foo").to("log:bar").to("log:baz").to(my).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // context.setTracing(true).             MyEndpoint my = new MyEndpoint("myendpoint:foo", getContext()).             from("seda:start").to("log:foo").to("log:bar").to("log:baz").to(my).to("mock:result").         }     }. }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new MyProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;2;12;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         throw new IllegalArgumentException("Forced to dump stacktrace").     } catch (Exception e) {         e.fillInStackTrace().         log.info("There are " + e.getStackTrace().length + " lines in the stacktrace").         log.error("Dump stacktrace to log", e).     }     callback.done(true).     return true. }
