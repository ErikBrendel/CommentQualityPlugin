commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     // to force a different management name than the camel id     context.getManagementNameStrategy().setNamePattern("19-#name#").     return context. }
false;public;0;32;;@Test public void testGetSetProperties() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=19-camel-1,type=context,name=\"camel-1\"").     assertTrue("Should be registered", mbeanServer.isRegistered(on)).     String name = (String) mbeanServer.getAttribute(on, "CamelId").     assertEquals("camel-1", name).     // invoke operations     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     mbeanServer.invoke(on, "setGlobalOption", new String[] { Exchange.LOG_DEBUG_BODY_MAX_CHARS, "-1" }, new String[] { "java.lang.String", "java.lang.String" }).     mbeanServer.invoke(on, "setGlobalOption", new String[] { Exchange.LOG_DEBUG_BODY_STREAMS, "true" }, new String[] { "java.lang.String", "java.lang.String" }).     Object invoke = mbeanServer.invoke(on, "getGlobalOption", new String[] { Exchange.LOG_DEBUG_BODY_MAX_CHARS }, new String[] { "java.lang.String" }).     assertEquals("-1", invoke).     invoke = mbeanServer.invoke(on, "getGlobalOption", new String[] { Exchange.LOG_DEBUG_BODY_STREAMS }, new String[] { "java.lang.String" }).     assertEquals("true", invoke). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }. }
