commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().getManagementAgent().setCreateConnector(true).     context.addComponent("my-verifiable-component", new MyVerifiableComponent()).     context.addComponent("direct", new DirectComponent()).     return context. }
false;public;0;19;;@Test public void testVerifySupported() throws Exception {     // JMX tests don't work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on.     on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"my-verifiable-component\"").     assertTrue(mbeanServer.isRegistered(on)).     assertTrue(invoke(mbeanServer, on, "isVerifySupported")).     on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"direct\"").     assertTrue(mbeanServer.isRegistered(on)).     assertFalse(invoke(mbeanServer, on, "isVerifySupported")). }
false;public;0;31;;@Test public void testVerify() throws Exception {     // JMX tests don't work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     JMXConnector connector = JMXConnectorFactory.connect(new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:1099/jmxrmi/camel")).     MBeanServerConnection mbeanServer = connector.getMBeanServerConnection().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"my-verifiable-component\"").     assertTrue(mbeanServer.isRegistered(on)).     assertTrue(invoke(mbeanServer, on, "isVerifySupported")).     ComponentVerifierExtension.Result res.     // check lowercase     res = invoke(mbeanServer, on, "verify", new Object[] { "connectivity", Collections.emptyMap() }, VERIFY_SIGNATURE).     assertEquals(Result.Status.OK, res.getStatus()).     assertEquals(Scope.CONNECTIVITY, res.getScope()).     // check mixed case     res = invoke(mbeanServer, on, "verify", new Object[] { "ConnEctivIty", Collections.emptyMap() }, VERIFY_SIGNATURE).     assertEquals(Result.Status.OK, res.getStatus()).     assertEquals(Scope.CONNECTIVITY, res.getScope()).     // check uppercase     res = invoke(mbeanServer, on, "verify", new Object[] { "PARAMETERS", Collections.emptyMap() }, VERIFY_SIGNATURE).     assertEquals(Result.Status.OK, res.getStatus()).     assertEquals(Scope.PARAMETERS, res.getScope()). }
false;protected;1;4;;@Override protected Result verifyConnectivity(Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.CONNECTIVITY).build(). }
false;protected;1;4;;@Override protected Result verifyParameters(Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(Result.Status.OK, Scope.PARAMETERS).build(). }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     throw new UnsupportedOperationException(). }
