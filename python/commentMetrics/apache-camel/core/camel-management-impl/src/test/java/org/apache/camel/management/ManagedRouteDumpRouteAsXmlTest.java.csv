commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testDumpAsXml() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be started     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("myRoute", routeId).     String xml = (String) mbeanServer.invoke(on, "dumpRouteAsXml", null, null).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("route")).     assertTrue(xml.contains("myRoute")).     assertTrue(xml.contains("mock:result")). }
false;public;0;17;;@Test public void testCreateRouteStaticEndpointJson() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     // get the json     String json = (String) mbeanServer.invoke(on, "createRouteStaticEndpointJson", null, null).     assertNotNull(json).     assertTrue(json.contains("\"myRoute\"")).     assertTrue(json.contains("{ \"uri\": \"direct://start\" }")).     assertTrue(json.contains("{ \"uri\": \"mock://result\" }")). }
false;static;1;6;;static ObjectName getRouteObjectName(MBeanServer mbeanServer) throws Exception {     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=routes,*"), null).     assertEquals(1, set.size()).     return set.iterator().next(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").log("Got ${body}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").log("Got ${body}").to("mock:result").         }     }. }
