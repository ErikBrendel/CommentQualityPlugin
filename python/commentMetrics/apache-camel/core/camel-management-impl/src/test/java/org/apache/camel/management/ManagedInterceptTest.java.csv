commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Test public void testIntercept() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:intercept").expectedBodiesReceived("Hello World", "Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://result\"").     Long queueSize = (Long) mbeanServer.invoke(name, "queueSize", null, null).     assertEquals(1, queueSize.intValue()).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://intercept\"").     queueSize = (Long) mbeanServer.invoke(name, "queueSize", null, null).     assertEquals(2, queueSize.intValue()).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"log-foo\"").     mbeanServer.isRegistered(name).     Long total = (Long) mbeanServer.getAttribute(name, "ExchangesTotal").     assertEquals(1, total.intValue()). }
false;public;0;7;;@Override public void configure() throws Exception {     intercept().to("mock:intercept").     from("direct:start").routeId("foo").to("log:foo").id("log-foo").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             intercept().to("mock:intercept").             from("direct:start").routeId("foo").to("log:foo").id("log-foo").to("mock:result").         }     }. }
