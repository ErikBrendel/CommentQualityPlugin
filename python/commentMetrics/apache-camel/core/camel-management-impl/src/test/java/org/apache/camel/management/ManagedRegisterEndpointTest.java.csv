commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Test public void testLookupEndpointsByName() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://start\"").     String uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("direct://start", uri).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"log://foo\"").     uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("log://foo", uri).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://result\"").     uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("mock://result", uri).     String id = (String) mbeanServer.getAttribute(name, "CamelId").     assertEquals("camel-1", id).     String state = (String) mbeanServer.getAttribute(name, "State").     assertEquals("Started", state).     Boolean singleton = (Boolean) mbeanServer.getAttribute(name, "Singleton").     assertEquals(Boolean.TRUE, singleton). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").         }     }. }
