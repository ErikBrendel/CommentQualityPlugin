commented;modifiers;parameterAmount;loc;comment;code
false;public;0;43;;@Test public void testTimer() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"timer://foo\\?delay=5000&period=8000\"").     assertEquals("Should be registered", true, mbeanServer.isRegistered(name)).     Long period = (Long) mbeanServer.getAttribute(name, "Period").     assertEquals(8000, period.longValue()).     String camelId = (String) mbeanServer.getAttribute(name, "CamelId").     assertEquals("camel-1", camelId).     // change period and delay     mbeanServer.setAttribute(name, new Attribute("Period", 500)).     mbeanServer.setAttribute(name, new Attribute("Delay", 250)).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.reset().     // restart consumer     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null).     assertEquals(1, set.size()).     ObjectName on = set.iterator().next().     mbeanServer.invoke(on, "stop", null, null).     mbeanServer.invoke(on, "start", null, null).     // Take the time to check the service is started to help avoid     // sporadic failure on slower machines.     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Should be started", org.apache.camel.ServiceStatus.Started.name(), state).     // start and we should be done in at most 3 second     mock.expectedMinimumMessageCount(3).     mock.setResultWaitTime(3900).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("timer://foo?delay=5000&period=8000").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer://foo?delay=5000&period=8000").to("mock:result").         }     }. }
