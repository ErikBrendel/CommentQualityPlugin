commented;modifiers;parameterAmount;loc;comment;code
false;public;0;50;;@Test public void testManageUnmarshal() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "123").     assertMockEndpointsSatisfied().     // get the stats for the route     MBeanServer mbeanServer = getMBeanServer().     // get the object name for the delayer     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"").     // should be on route1     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("route1", routeId).     String camelId = (String) mbeanServer.getAttribute(on, "CamelId").     assertEquals("camel-1", camelId).     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals(ServiceStatus.Started.name(), state).     String name = (String) mbeanServer.getAttribute(on, "DataFormatName").     assertEquals("string", name).     String xml = (String) mbeanServer.invoke(on, "dumpProcessorAsXml", null, null).     assertTrue(xml.contains("<unmarshal")).     assertTrue(xml.contains("</unmarshal>")).     assertTrue(xml.contains("<string charset=\"iso-8859-1\"/>")).     TabularData data = (TabularData) mbeanServer.invoke(on, "explain", new Object[] { false }, new String[] { "boolean" }).     assertNotNull(data).     assertEquals(2, data.size()).     data = (TabularData) mbeanServer.invoke(on, "explain", new Object[] { true }, new String[] { "boolean" }).     assertNotNull(data).     assertEquals(3, data.size()).     String json = (String) mbeanServer.invoke(on, "informationJson", null, null).     assertNotNull(json).     assertTrue(json.contains("\"description\": \"Converts the message data received from the wire into a format that Apache Camel processors can consume")). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").unmarshal().string("iso-8859-1").id("mysend").to("mock:foo"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").unmarshal().string("iso-8859-1").id("mysend").to("mock:foo").         }     }. }
