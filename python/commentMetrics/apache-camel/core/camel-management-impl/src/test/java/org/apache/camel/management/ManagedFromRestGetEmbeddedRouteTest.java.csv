commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getRegistry().bind("dummy-test", new DummyRestConsumerFactory()).     return context. }
false;public;0;34;;@Test public void testFromRestModel() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=context,name=\"camel-1\"").     String xml = (String) mbeanServer.invoke(on, "dumpRestsAsXml", null, null).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<rests")).     assertTrue(xml.contains("<rest path=\"/say/hello\">")).     assertTrue(xml.contains("<rest path=\"/say/bye\">")).     assertTrue(xml.contains("</rest>")).     assertTrue(xml.contains("<get")).     assertTrue(xml.contains("<route")).     assertTrue(xml.contains("<transform")).     assertTrue(xml.contains("<post")).     assertTrue(xml.contains("application/json")).     assertTrue(xml.contains("</rests>")).     String xml2 = (String) mbeanServer.invoke(on, "dumpRoutesAsXml", null, null).     log.info(xml2).     // and we should have rest in the routes that indicate its from a rest dsl     assertTrue(xml2.contains("rest=\"true\"")).     // there should be 2 + 1 routes     assertEquals(2 + 1, context.getRouteDefinitions().size()). }
false;public;0;18;;@Override public void configure() throws Exception {     restConfiguration().host("localhost").     rest("/say/hello").get().route().to("mock:hello").transform(constant("Hello World")).     rest("/say/bye").get().consumes("application/json").route().to("mock:bye").transform(constant("Bye World")).endRest().post().to("mock:update"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().host("localhost").             rest("/say/hello").get().route().to("mock:hello").transform(constant("Hello World")).             rest("/say/bye").get().consumes("application/json").route().to("mock:bye").transform(constant("Bye World")).endRest().post().to("mock:update").         }     }. }
