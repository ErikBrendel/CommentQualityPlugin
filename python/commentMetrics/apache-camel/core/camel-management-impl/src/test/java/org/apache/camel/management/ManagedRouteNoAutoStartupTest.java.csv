commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").noAutoStartup().to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").noAutoStartup().to("mock:result").         }     }. }
false;static;1;6;;static ObjectName getRouteObjectName(MBeanServer mbeanServer) throws Exception {     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=routes,*"), null).     assertEquals(1, set.size()).     return set.iterator().next(). }
false;public;0;51;;@Test public void testRouteNoAutoStartup() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     // should be stopped     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Should be stopped", ServiceStatus.Stopped.name(), state).     // start     mbeanServer.invoke(on, "start", null, null).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // need a bit time to let JMX update     await().atMost(1, TimeUnit.SECONDS).untilAsserted(() -> {         // should have 1 completed exchange         Long completed = (Long) mbeanServer.getAttribute(on, "ExchangesCompleted").         assertEquals(1, completed.longValue()).     }).     // should be 1 consumer and 1 processor     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null).     assertEquals("Should be 1 consumer", 1, set.size()).     set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null).     assertEquals("Should be 1 processor", 1, set.size()).     // stop     mbeanServer.invoke(on, "stop", null, null).     state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Should be stopped", ServiceStatus.Stopped.name(), state).     // should be 0 consumer and 0 processor     set = mbeanServer.queryNames(new ObjectName("*:type=consumers,*"), null).     assertEquals("Should be 0 consumer", 0, set.size()).     set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null).     assertEquals("Should be 0 processor", 0, set.size()). }
