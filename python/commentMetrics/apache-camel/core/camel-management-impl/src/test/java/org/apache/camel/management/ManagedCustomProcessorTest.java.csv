commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testManageCustomProcessor() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"custom\"").     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("foo", "hey").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     String foo = (String) mbeanServer.getAttribute(on, "Foo").     assertEquals("hey", foo).     // change foo     mbeanServer.setAttribute(on, new Attribute("Foo", "changed")).     resetMocks().     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("foo", "changed").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied().     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Started", state). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").process(new MyCustomProcessor()).id("custom").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").process(new MyCustomProcessor()).id("custom").to("mock:result").         }     }. }
false;public;0;4;;@ManagedAttribute public String getFoo() {     return foo. }
false;public;1;4;;@ManagedAttribute public void setFoo(String foo) {     this.foo = foo. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader("foo", getFoo()). }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
