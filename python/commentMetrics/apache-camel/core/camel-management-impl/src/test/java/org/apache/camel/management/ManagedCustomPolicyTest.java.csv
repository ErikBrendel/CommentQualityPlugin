commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testPolicy() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(1, counter.get()).     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=processors,*"), null).     assertEquals(3, set.size()).     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"foo\"").     assertTrue("Should be registered: foo", mbeanServer.isRegistered(on)).     on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"result\"").     assertTrue("Should be registered: result", mbeanServer.isRegistered(on)).     on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"bar\"").     assertTrue("Should be registered: bar", mbeanServer.isRegistered(on)). }
false;public;0;11;;@Override public void configure() throws Exception {     // custom policy but processors should be registered     from("direct:start").policy(new MyPolicy()).to("log:foo").id("foo").to("mock:result").id("result").     // no policy but processors should be registered     from("direct:bar").to("log:bar").id("bar"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // custom policy but processors should be registered             from("direct:start").policy(new MyPolicy()).to("log:foo").id("foo").to("mock:result").id("result").             // no policy but processors should be registered             from("direct:bar").to("log:bar").id("bar").         }     }. }
false;public;2;4;;@Override public void beforeWrap(RouteContext routeContext, NamedNode definition) { // noop }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     counter.incrementAndGet().     processor.process(exchange). }
false;public;2;10;;@Override public Processor wrap(RouteContext routeContext, final Processor processor) {     return new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             counter.incrementAndGet().             processor.process(exchange).         }     }. }
