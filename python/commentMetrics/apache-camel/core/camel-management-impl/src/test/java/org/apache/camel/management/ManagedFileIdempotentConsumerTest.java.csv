commented;modifiers;parameterAmount;loc;comment;code
false;public;0;66;;@Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     // services     Set<ObjectName> names = mbeanServer.queryNames(new ObjectName("org.apache.camel" + ":type=services,*"), null).     ObjectName on = null.     for (ObjectName name : names) {         if (name.toString().contains("FileIdempotentRepository")) {             on = name.             break.         }     }     assertTrue("Should be registered", mbeanServer.isRegistered(on)).     String path = (String) mbeanServer.getAttribute(on, "FilePath").     assertEquals(FileUtil.normalizePath("target/data/idempotentfilestore.dat"), FileUtil.normalizePath(path)).     Integer size = (Integer) mbeanServer.getAttribute(on, "CacheSize").     assertEquals(1, size.intValue()).     assertFalse(repo.contains("1")).     assertFalse(repo.contains("2")).     assertFalse(repo.contains("3")).     assertTrue(repo.contains("4")).     resultEndpoint.expectedBodiesReceived("one", "two", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("4", "four").     sendMessage("1", "one").     sendMessage("3", "three").     resultEndpoint.assertIsSatisfied().     assertTrue(repo.contains("1")).     assertTrue(repo.contains("2")).     assertTrue(repo.contains("3")).     assertTrue(repo.contains("4")).     size = (Integer) mbeanServer.getAttribute(on, "CacheSize").     assertEquals(4, size.intValue()).     // remove one from repo     mbeanServer.invoke(on, "remove", new Object[] { "1" }, new String[] { "java.lang.String" }).     // reset     mbeanServer.invoke(on, "reset", null, null).     // there should be 3 now     size = (Integer) mbeanServer.getAttribute(on, "CacheSize").     assertEquals(3, size.intValue()).     assertFalse(repo.contains("1")).     assertTrue(repo.contains("2")).     assertTrue(repo.contains("3")).     assertTrue(repo.contains("4")). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;public;0;17;;@Override @Before public void setUp() throws Exception {     // delete file store before testing     if (store.exists()) {         store.delete().     }     repo = FileIdempotentRepository.fileIdempotentRepository(store).     // let's add 4 to start with     repo.add("4").     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;5;;public void configure() {     from("direct:start").idempotentConsumer(header("messageId"), repo).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").idempotentConsumer(header("messageId"), repo).to("mock:result").         }     }. }
