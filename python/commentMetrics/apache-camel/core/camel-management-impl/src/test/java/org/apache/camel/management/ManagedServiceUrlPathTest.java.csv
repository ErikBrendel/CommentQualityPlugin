commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     // START SNIPPET: e1     context.getManagementStrategy().getManagementAgent().setServiceUrlPath("/foo/bar").     context.getManagementStrategy().getManagementAgent().setRegistryPort(2113).     context.getManagementStrategy().getManagementAgent().setCreateConnector(true).     return context. }
false;protected;0;5;;@Override protected boolean canRunOnThisPlatform() {     // does not work well when maven surefire plugin is set to forkmode=once     return false. }
false;public;0;12;;@Override @After public void tearDown() throws Exception {     super.tearDown().     try {         if (clientConnector != null) {             clientConnector.close().         }     } catch (Throwable e) {     // ignore     } }
false;public;0;28;;@Test public void testConnectToJmx() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     clientConnector = JMXConnectorFactory.connect(new JMXServiceURL(JMXSERVICEURL), null).     MBeanServerConnection mbeanServer = clientConnector.getMBeanServerConnection().     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://start\"").     String uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("direct://start", uri).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"log://foo\"").     uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("log://foo", uri).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://result\"").     uri = (String) mbeanServer.getAttribute(name, "EndpointUri").     assertEquals("mock://result", uri).     String id = (String) mbeanServer.getAttribute(name, "CamelId").     assertEquals("camel-1", id).     Boolean singleton = (Boolean) mbeanServer.getAttribute(name, "Singleton").     assertEquals(Boolean.TRUE, singleton). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").         }     }. }
