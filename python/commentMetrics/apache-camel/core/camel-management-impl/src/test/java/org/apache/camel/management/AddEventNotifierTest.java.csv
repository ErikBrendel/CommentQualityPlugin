commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     events.clear().     super.setUp(). }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;public;0;35;;@Test public void testAddAndRemove() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(0, events.size()).     // we should be able to add after CamelContext has been started     notifier = new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }     }.     // must add notifier as a service so its started     context.addService(notifier).     context.getManagementStrategy().addEventNotifier(notifier).     resetMocks().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied().     assertEquals(8, events.size()).     // remove and we should not get new events     context.getManagementStrategy().removeEventNotifier(notifier).     resetMocks().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hi World").     assertMockEndpointsSatisfied().     assertEquals(8, events.size()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").         }     }. }
