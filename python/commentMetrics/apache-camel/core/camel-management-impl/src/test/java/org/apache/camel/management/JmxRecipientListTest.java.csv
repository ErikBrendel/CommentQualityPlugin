commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testJmxEndpointsAddedDynamicallyDefaultRegister() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived("answer").     y.expectedBodiesReceived("answer").     z.expectedBodiesReceived("answer").     sendBody().     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     // this endpoint is part of the route and should be registered     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://a\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)).     // endpoints added after routes has been started is by default not registered     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://x\"").     assertFalse("Should not be registered", mbeanServer.isRegistered(name)).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://y\"").     assertFalse("Should not be registered", mbeanServer.isRegistered(name)).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://z\"").     assertFalse("Should not be registered", mbeanServer.isRegistered(name)).     // however components is always registered     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"mock\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)). }
false;public;0;42;;@Test public void testJmxEndpointsAddedDynamicallyAlwaysRegister() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     // enable always register     context.getManagementStrategy().getManagementAgent().setRegisterAlways(true).     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived("answer").     y.expectedBodiesReceived("answer").     z.expectedBodiesReceived("answer").     sendBody().     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     // this endpoint is part of the route and should be registered     ObjectName name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"direct://a\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)).     // endpoints added after routes has been started is now also registered     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://x\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://y\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)).     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"mock://z\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)).     // however components is always registered     name = ObjectName.getInstance("org.apache.camel:context=camel-1,type=components,name=\"mock\"").     assertTrue("Should be registered", mbeanServer.isRegistered(name)). }
false;protected;0;4;;protected void sendBody() {     template.sendBodyAndHeader("direct:a", "answer", "recipientListHeader", "mock:x,mock:y,mock:z"). }
false;public;0;4;;public void configure() {     from("direct:a").recipientList(header("recipientListHeader").tokenize(",")). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:a").recipientList(header("recipientListHeader").tokenize(",")).         }     }. }
