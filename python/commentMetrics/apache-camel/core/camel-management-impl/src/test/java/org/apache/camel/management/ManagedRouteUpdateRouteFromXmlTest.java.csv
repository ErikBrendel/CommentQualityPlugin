commented;modifiers;parameterAmount;loc;comment;code
false;public;0;38;;@Test public void testUpdateRouteFromXml() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be started     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("myRoute", routeId).     String xml = "<route id=\"myRoute\" xmlns=\"http://camel.apache.org/schema/spring\">" + "  <from uri=\"direct:start\"/>" + "  <log message=\"This is a changed route saying ${body}\"/>" + "  <to uri=\"mock:changed\"/>" + "</route>".     mbeanServer.invoke(on, "updateRouteFromXml", new Object[] { xml }, new String[] { "java.lang.String" }).     assertEquals(1, context.getRoutes().size()).     getMockEndpoint("mock:changed").expectedMessageCount(1).     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;38;;@Test public void testUpdateRouteFromXmlWithoutRouteId() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be started     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("myRoute", routeId).     String xml = "<route xmlns=\"http://camel.apache.org/schema/spring\">" + "  <from uri=\"direct:start\"/>" + "  <log message=\"This is a changed route saying ${body}\"/>" + "  <to uri=\"mock:changed\"/>" + "</route>".     mbeanServer.invoke(on, "updateRouteFromXml", new Object[] { xml }, new String[] { "java.lang.String" }).     assertEquals(1, context.getRoutes().size()).     getMockEndpoint("mock:changed").expectedMessageCount(1).     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;36;;@Test public void testUpdateRouteFromXmlMismatchRouteId() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be started     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("myRoute", routeId).     String xml = "<route id=\"foo\" xmlns=\"http://camel.apache.org/schema/spring\">" + "  <from uri=\"direct:start\"/>" + "  <log message=\"This is a changed route saying ${body}\"/>" + "  <to uri=\"mock:changed\"/>" + "</route>".     try {         mbeanServer.invoke(on, "updateRouteFromXml", new Object[] { xml }, new String[] { "java.lang.String" }).         fail("Should have thrown exception").     } catch (Exception e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Cannot update route from XML as routeIds does not match. routeId: myRoute, routeId from XML: foo", e.getCause().getMessage()).     } }
false;static;1;6;;static ObjectName getRouteObjectName(MBeanServer mbeanServer) throws Exception {     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=routes,*"), null).     assertEquals(1, set.size()).     return set.iterator().next(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").log("Got ${body}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").log("Got ${body}").to("mock:result").         }     }. }
