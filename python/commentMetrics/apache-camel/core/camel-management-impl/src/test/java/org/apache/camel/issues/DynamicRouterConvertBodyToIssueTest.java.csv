commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testIssue() throws Exception {     template.sendBody("seda:foo", "Hello World").     Thread.sleep(60000). }
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;10;;@Override public void configure() throws Exception {     from("seda:foo").dynamicRouter().method(DynamicRouterConvertBodyToIssueTest.class, "slip").to("mock:result").     from("direct:while_body").process(new DynamicRouterConvertBodyToIssueTest()).convertBodyTo(String.class). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").dynamicRouter().method(DynamicRouterConvertBodyToIssueTest.class, "slip").to("mock:result").             from("direct:while_body").process(new DynamicRouterConvertBodyToIssueTest()).convertBodyTo(String.class).         }     }. }
false;public;1;17;;@Override public void process(Exchange exchange) throws Exception {     log.info("Some: " + counter).     exchange.setProperty("EXIT", "NO").     StringBuffer sb = new StringBuffer().     for (int i = 0. i < 10000. i++) {         sb.append(UUID.randomUUID().toString()).     }     exchange.getIn().setBody(sb).     Thread.sleep(100).     if (counter++ > MAX_ITERATIONS) {         exchange.setProperty("EXIT", "PLEASE").     } }
false;public;2;9;;public String slip(String body, @ExchangeProperties Map<String, Object> properties) {     log.info("slip " + properties.get("EXIT")).     if (properties.get("EXIT") != null && properties.get("EXIT").equals("PLEASE")) {         log.info("Exiting after " + MAX_ITERATIONS + " iterations").         return null.     } else {         return "direct:while_body".     } }
