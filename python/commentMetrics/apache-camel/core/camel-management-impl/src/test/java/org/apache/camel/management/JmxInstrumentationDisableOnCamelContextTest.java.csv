commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return false. }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camel = super.createCamelContext().     camel.disableJMX().     return camel. }
false;public;0;22;;@Override @Test public void testMBeansRegistered() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     resolveMandatoryEndpoint("mock:end", MockEndpoint.class).     Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"), null).     assertEquals("Could not find 0 endpoints: " + s, 0, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=contexts,*"), null).     assertEquals("Could not find 0 context: " + s, 0, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=processors,*"), null).     assertEquals("Could not find 0 processor: " + s, 0, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=routes,*"), null).     assertEquals("Could not find 0 route: " + s, 0, s.size()). }
false;protected;2;5;;@Override protected void verifyCounter(MBeanServerConnection beanServer, ObjectName name) throws Exception {     Set<ObjectName> s = beanServer.queryNames(name, null).     assertEquals("Found mbeans: " + s, 0, s.size()). }
