commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;7;;protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("custom", new CustomComponent()).     return context. }
false;public;0;25;;@Test public void testCustomEndpoint() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     assertDefaultDomain().     resolveMandatoryEndpoint("custom://end", CustomEndpoint.class).     Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"), null).     assertEquals("Could not find 2 endpoints: " + s, 2, s.size()).     // get custom     Iterator<ObjectName> it = s.iterator().     ObjectName on1 = it.next().     ObjectName on2 = it.next().     if (on1.getCanonicalName().contains("custom")) {         assertEquals("bar", mbsc.getAttribute(on1, "Foo")).     } else {         assertEquals("bar", mbsc.getAttribute(on2, "Foo")).     } }
false;public;0;15;;@Test public void testManagedEndpoint() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     assertDefaultDomain().     resolveMandatoryEndpoint("direct:start", DirectEndpoint.class).     ObjectName objName = new ObjectName(domainName + ":type=endpoints,*").     Set<ObjectName> s = mbsc.queryNames(objName, null).     assertEquals(2, s.size()). }
false;public;0;15;;@Test public void testCounters() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     CustomEndpoint resultEndpoint = resolveMandatoryEndpoint("custom:end", CustomEndpoint.class).     resultEndpoint.expectedBodiesReceived("<hello>world!</hello>").     sendBody("direct:start", "<hello>world!</hello>").     resultEndpoint.assertIsSatisfied().     verifyCounter(mbsc, new ObjectName(domainName + ":type=routes,*")). }
false;public;0;21;;@Test public void testMBeansRegistered() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     assertDefaultDomain().     Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"), null).     assertEquals("Could not find 2 endpoints: " + s, 2, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=context,*"), null).     assertEquals("Could not find 1 context: " + s, 1, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=processors,*"), null).     assertEquals("Could not find 1 processors: " + s, 2, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=routes,*"), null).     assertEquals("Could not find 1 route: " + s, 1, s.size()). }
false;public;0;5;;public void configure() {     // need a little delay for fast computers being able to process     // the exchange in 0 millis and we need to simulate a little computation time     from("direct:start").delay(10).to("custom:end"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // need a little delay for fast computers being able to process             // the exchange in 0 millis and we need to simulate a little computation time             from("direct:start").delay(10).to("custom:end").         }     }. }
false;protected;3;3;;protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {     return new CustomEndpoint(uri, this). }
