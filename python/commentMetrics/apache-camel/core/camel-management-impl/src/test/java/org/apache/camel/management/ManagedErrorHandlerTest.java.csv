commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testManagedErrorHandler() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=errorhandlers,*"), null).     // there should only be 2 error handler types as route 1 and route 3 uses the same default error handler     assertEquals(2, set.size()).     Iterator<ObjectName> it = set.iterator().     ObjectName on1 = it.next().     ObjectName on2 = it.next().     String name1 = on1.getCanonicalName().     String name2 = on2.getCanonicalName().     assertTrue("Should be a default error handler", name1.contains("CamelDefaultErrorHandlerBuilder") || name2.contains("CamelDefaultErrorHandlerBuilder")).     assertTrue("Should be a dead letter error handler", name1.contains("DeadLetterChannelBuilder") || name2.contains("DeadLetterChannelBuilder")). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:foo").     from("direct:bar").errorHandler(deadLetterChannel("mock:dead")).to("mock:bar").     from("direct:baz").to("mock:baz"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:foo").             from("direct:bar").errorHandler(deadLetterChannel("mock:dead")).to("mock:bar").             from("direct:baz").to("mock:baz").         }     }. }
