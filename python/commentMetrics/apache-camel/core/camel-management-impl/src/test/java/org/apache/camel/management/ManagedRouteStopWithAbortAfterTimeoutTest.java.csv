commented;modifiers;parameterAmount;loc;comment;code
false;public;0;41;;@Test public void testStopRouteWithAbortAfterTimeoutTrue() throws Exception {     // JMX tests dont work well on AIX or windows CI servers (hangs them)     if (isPlatform("aix") || isPlatform("windows")) {         return.     }     MockEndpoint mockEP = getMockEndpoint("mock:result").     mockEP.setExpectedMessageCount(10).     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     // confirm that route has started     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("route should be started", ServiceStatus.Started.name(), state).     // send some message through the route     for (int i = 0. i < 5. i++) {         template.sendBody("seda:start", "message-" + i).     }     // stop route with a 1s timeout and abortAfterTimeout=true (should abort after 1s)     Long timeout = new Long(1).     Boolean abortAfterTimeout = Boolean.TRUE.     Object[] params = { timeout, abortAfterTimeout }.     String[] sig = { "java.lang.Long", "java.lang.Boolean" }.     Boolean stopRouteResponse = (Boolean) mbeanServer.invoke(on, "stop", params, sig).     // confirm that route is still running     state = (String) mbeanServer.getAttribute(on, "State").     assertFalse("stopRoute response should be False", stopRouteResponse).     assertEquals("route should still be started", ServiceStatus.Started.name(), state).     // send some more messages through the route     for (int i = 5. i < 10. i++) {         template.sendBody("seda:start", "message-" + i).     }     mockEP.assertIsSatisfied(). }
false;public;0;42;;@Test public void testStopRouteWithAbortAfterTimeoutFalse() throws Exception {     // JMX tests dont work well on AIX or windows CI servers (hangs them)     if (isPlatform("aix") || isPlatform("windows")) {         return.     }     MockEndpoint mockEP = getMockEndpoint("mock:result").     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = getRouteObjectName(mbeanServer).     // confirm that route has started     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("route should be started", ServiceStatus.Started.name(), state).     // send some message through the route     for (int i = 0. i < 5. i++) {         template.sendBody("seda:start", "message-" + i).     }     // stop route with a 1s timeout and abortAfterTimeout=false (normal timeout behavior)     Long timeout = new Long(1).     Boolean abortAfterTimeout = Boolean.FALSE.     Object[] params = { timeout, abortAfterTimeout }.     String[] sig = { "java.lang.Long", "java.lang.Boolean" }.     Boolean stopRouteResponse = (Boolean) mbeanServer.invoke(on, "stop", params, sig).     // confirm that route is stopped     state = (String) mbeanServer.getAttribute(on, "State").     assertTrue("stopRoute response should be True", stopRouteResponse).     assertEquals("route should be stopped", ServiceStatus.Stopped.name(), state).     // send some more messages through the route     for (int i = 5. i < 10. i++) {         template.sendBody("seda:start", "message-" + i).     }     Thread.sleep(1000).     assertTrue("Should not have received more than 5 messages", mockEP.getExchanges().size() <= 5). }
false;static;1;5;;static ObjectName getRouteObjectName(MBeanServer mbeanServer) throws Exception {     Set<ObjectName> set = mbeanServer.queryNames(new ObjectName("*:type=routes,*"), null).     assertEquals(1, set.size()).     return set.iterator().next(). }
false;public;0;7;;@Override public void configure() throws Exception {     // shutdown this test faster     context.getShutdownStrategy().setTimeout(3).     from("seda:start").delay(100).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // shutdown this test faster             context.getShutdownStrategy().setTimeout(3).             from("seda:start").delay(100).to("mock:result").         }     }. }
