commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;3;;protected MBeanServer getMBeanServer() {     return context.getManagementStrategy().getManagementAgent().getMBeanServer(). }
false;public;0;25;;@Test public void testXsltOutput() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     mock.message(0).body().isInstanceOf(byte[].class).     template.sendBody("direct:start", "<hello>world!</hello>").     assertMockEndpointsSatisfied().     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"xslt://org/apache/camel/component/xslt/example.xsl\\?output=bytes\"").     String uri = (String) mbeanServer.getAttribute(on, "EndpointUri").     assertEquals("xslt://org/apache/camel/component/xslt/example.xsl?output=bytes", uri).     Boolean saxon = (Boolean) mbeanServer.getAttribute(on, "Saxon").     assertEquals(false, saxon.booleanValue()).     XsltOutput output = (XsltOutput) mbeanServer.getAttribute(on, "Output").     assertEquals(XsltOutput.bytes, output).     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals("Started", state). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("xslt:org/apache/camel/component/xslt/example.xsl?output=bytes").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xslt:org/apache/camel/component/xslt/example.xsl?output=bytes").to("mock:result").         }     }. }
