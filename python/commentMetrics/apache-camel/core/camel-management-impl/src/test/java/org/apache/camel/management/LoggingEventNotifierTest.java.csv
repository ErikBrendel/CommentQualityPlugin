commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;protected;0;13;;@Override protected CamelContext createCamelContext() throws Exception {     LoggingEventNotifier notifier = new LoggingEventNotifier().     notifier.setLogName("org.apache.camel.EventLog").     notifier.setIgnoreCamelContextEvents(true).     notifier.setIgnoreRouteEvents(true).     notifier.setIgnoreServiceEvents(true).     CamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(notifier).     return context. }
false;public;0;10;;@Test public void testExchangeDone() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     context.stop(). }
false;public;0;12;;@Test public void testExchangeFailed() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown an exception").     } catch (Exception e) {         // expected         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).     }     context.stop(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result").     from("direct:fail").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").             from("direct:fail").throwException(new IllegalArgumentException("Damn")).         }     }. }
