commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getRegistry().bind("dummy-test", new DummyRestConsumerFactory()).     return context. }
false;public;0;42;;@Test public void testRestRegistry() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=services,*").     // number of services     Set<ObjectName> names = mbeanServer.queryNames(on, null).     ObjectName name = null.     for (ObjectName service : names) {         if (service.toString().contains("DefaultRestRegistry")) {             name = service.             break.         }     }     assertNotNull("Cannot find DefaultRestRegistry", name).     assertTrue(mbeanServer.isRegistered(name)).     assertEquals(3, mbeanServer.getAttribute(name, "NumberOfRestServices")).     TabularData data = (TabularData) mbeanServer.invoke(name, "listRestServices", null, null).     assertEquals(3, data.size()).     // should not be enabled as api-doc is not enabled or camel-swagger-java is not on classpath     String json = (String) mbeanServer.invoke(name, "apiDocAsJson", null, null).     assertNull(json).     // remove all routes     for (Route route : context.getRoutes()) {         context.getRouteController().stopRoute(route.getId()).         context.removeRoute(route.getId()).     }     assertEquals(0, mbeanServer.getAttribute(name, "NumberOfRestServices")).     data = (TabularData) mbeanServer.invoke(name, "listRestServices", null, null).     assertEquals(0, data.size()). }
false;public;0;15;;@Override public void configure() throws Exception {     restConfiguration().host("localhost").     rest("/say/hello/{name}").get().to("direct:hello").description("Calling direct route").     rest("/say/bye").description("the bye rest service").get().consumes("application/json").description("I am saying bye world").route().routeId("myRestRoute").transform().constant("Bye World").endRest().post().to("mock:update").     from("direct:hello").description("The hello route").transform().simple("Hello ${header.name}"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().host("localhost").             rest("/say/hello/{name}").get().to("direct:hello").description("Calling direct route").             rest("/say/bye").description("the bye rest service").get().consumes("application/json").description("I am saying bye world").route().routeId("myRestRoute").transform().constant("Bye World").endRest().post().to("mock:update").             from("direct:hello").description("The hello route").transform().simple("Hello ${header.name}").         }     }. }
