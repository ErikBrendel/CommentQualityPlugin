commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().getManagementAgent().setStatisticsLevel(ManagementStatisticsLevel.Extended).     return context. }
false;public;0;55;;@Test public void testManageRoutingSlip() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedMessageCount(2).     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "whereTo", "direct:foo,direct:foo,direct:bar").     assertMockEndpointsSatisfied().     // get the stats for the route     MBeanServer mbeanServer = getMBeanServer().     // get the object name for the delayer     ObjectName on = ObjectName.getInstance("org.apache.camel:context=camel-1,type=processors,name=\"mysend\"").     // should be on route1     String routeId = (String) mbeanServer.getAttribute(on, "RouteId").     assertEquals("route1", routeId).     String camelId = (String) mbeanServer.getAttribute(on, "CamelId").     assertEquals("camel-1", camelId).     String state = (String) mbeanServer.getAttribute(on, "State").     assertEquals(ServiceStatus.Started.name(), state).     String lan = (String) mbeanServer.getAttribute(on, "ExpressionLanguage").     assertEquals("header", lan).     String uri = (String) mbeanServer.getAttribute(on, "Expression").     assertEquals("whereTo", uri).     TabularData data = (TabularData) mbeanServer.invoke(on, "extendedInformation", null, null).     assertNotNull(data).     assertEquals(2, data.size()).     data = (TabularData) mbeanServer.invoke(on, "explain", new Object[] { false }, new String[] { "boolean" }).     assertNotNull(data).     assertEquals(3, data.size()).     data = (TabularData) mbeanServer.invoke(on, "explain", new Object[] { true }, new String[] { "boolean" }).     assertNotNull(data).     assertEquals(6, data.size()).     String json = (String) mbeanServer.invoke(on, "informationJson", null, null).     assertNotNull(json).     assertTrue(json.contains("\"description\": \"Routes a message through a series of steps that are pre-determined (the slip)")). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").routingSlip(header("whereTo")).id("mysend").     from("direct:foo").to("mock:foo").     from("direct:bar").to("mock:bar"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routingSlip(header("whereTo")).id("mysend").             from("direct:foo").to("mock:foo").             from("direct:bar").to("mock:bar").         }     }. }
