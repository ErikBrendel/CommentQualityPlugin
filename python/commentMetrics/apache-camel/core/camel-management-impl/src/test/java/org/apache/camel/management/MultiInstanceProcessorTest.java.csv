commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // simulate a little processing time     Thread.sleep(10). }
false;public;0;8;;public void configure() {     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // simulate a little processing time             Thread.sleep(10).         }     }).to("mock:end").to("mock:end"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // simulate a little processing time                     Thread.sleep(10).                 }             }).to("mock:end").to("mock:end").         }     }. }
true;public;0;24;/**  * It retrieves a mbean for each "to" processor instance in the query ":type=processor"  */ ;/**  * It retrieves a mbean for each "to" processor instance in the query ":type=processor"  */ @Override @Test public void testMBeansRegistered() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     assertDefaultDomain().     resolveMandatoryEndpoint("mock:end", MockEndpoint.class).     Set<ObjectName> s = mbsc.queryNames(new ObjectName(domainName + ":type=endpoints,*"), null).     assertEquals("Could not find 2 endpoints: " + s, 2, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=context,*"), null).     assertEquals("Could not find 1 context: " + s, 1, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=processors,*"), null).     assertEquals("Could not find 3 processor: " + s, 3, s.size()).     s = mbsc.queryNames(new ObjectName(domainName + ":type=routes,*"), null).     assertEquals("Could not find 1 route: " + s, 1, s.size()). }
false;public;0;16;;@Override @Test public void testCounters() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:end", MockEndpoint.class).     resultEndpoint.expectedBodiesReceived("<hello>world!</hello>", "<hello>world!</hello>").     sendBody("direct:start", "<hello>world!</hello>").     resultEndpoint.assertIsSatisfied().     verifyCounter(mbsc, new ObjectName(domainName + ":type=routes,*")). }
