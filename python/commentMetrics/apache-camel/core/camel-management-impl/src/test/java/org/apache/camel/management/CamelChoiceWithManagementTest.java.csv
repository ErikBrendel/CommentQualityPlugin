commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;9;;@Before public void setUp() throws Exception {     super.setUp().     a = getMockEndpoint("mock:a").     b = getMockEndpoint("mock:b").     c = getMockEndpoint("mock:c").     d = getMockEndpoint("mock:d").     e = getMockEndpoint("mock:e"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(body).     exchange.getIn().setHeader("CBR1", "Yes"). }
false;public;0;19;;@Test public void testFirstChoiceRoute() throws Exception {     final String body = "<one/>".     a.expectedBodiesReceived(body).     a.expectedHeaderReceived("CBR1", "Yes").     c.expectedBodiesReceived(body).     c.expectedHeaderReceived("CBR1", "Yes").     c.expectedHeaderReceived("Validation", "Yes").     expectsMessageCount(0, b, d, e).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(body).             exchange.getIn().setHeader("CBR1", "Yes").         }     }).     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(body). }
false;public;0;15;;@Test public void testOtherwise() throws Exception {     final String body = "<None/>".     e.expectedBodiesReceived(body).     expectsMessageCount(0, a, b, c, d).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(body).         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;8;;public void configure() {     from("direct:start").choice().when(header("CBR1").isEqualTo("Yes")).to("mock:a").setHeader("Validation", constant("Yes")).when(header("CBR1").isEqualTo("No")).to("mock:b").end().choice().when(header("Validation").isEqualTo("Yes")).to("mock:c").when(header("Validation").isEqualTo("No")).to("mock:d").otherwise().to("mock:e").end(). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("direct:start").choice().when(header("CBR1").isEqualTo("Yes")).to("mock:a").setHeader("Validation", constant("Yes")).when(header("CBR1").isEqualTo("No")).to("mock:b").end().choice().when(header("Validation").isEqualTo("Yes")).to("mock:c").when(header("Validation").isEqualTo("No")).to("mock:d").otherwise().to("mock:e").end().         }     }. }
