commented;modifiers;parameterAmount;loc;comment;code
false;public;0;60;;@SuppressWarnings("unchecked") @Test public void testBacklogTracerPattern() throws Exception {     // JMX tests dont work well on AIX CI servers (hangs them)     if (isPlatform("aix")) {         return.     }     MBeanServer mbeanServer = getMBeanServer().     ObjectName on = new ObjectName("org.apache.camel:context=camel-1,type=tracer,name=BacklogTracer").     assertNotNull(on).     mbeanServer.isRegistered(on).     Boolean enabled = (Boolean) mbeanServer.getAttribute(on, "Enabled").     assertEquals("Should not be enabled", Boolean.FALSE, enabled).     Integer size = (Integer) mbeanServer.getAttribute(on, "BacklogSize").     assertEquals("Should be 1000", 1000, size.intValue()).     // set the pattern to match only foo*     mbeanServer.setAttribute(on, new Attribute("TracePattern", "foo*")).     // enable it     mbeanServer.setAttribute(on, new Attribute("Enabled", Boolean.TRUE)).     getMockEndpoint("mock:foo").expectedMessageCount(2).     getMockEndpoint("mock:bar").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied().     List<Exchange> exchanges = getMockEndpoint("mock:foo").getReceivedExchanges().     List<BacklogTracerEventMessage> events = (List<BacklogTracerEventMessage>) mbeanServer.invoke(on, "dumpTracedMessages", new Object[] { "foo" }, new String[] { "java.lang.String" }).     assertNotNull(events).     assertEquals(2, events.size()).     BacklogTracerEventMessage event1 = events.get(0).     assertEquals("foo", event1.getToNode()).     assertEquals("    <message exchangeId=\"" + exchanges.get(0).getExchangeId() + "\">\n" + "      <body type=\"java.lang.String\">Hello World</body>\n" + "    </message>", event1.getMessageAsXml()).     BacklogTracerEventMessage event2 = events.get(1).     assertEquals("foo", event2.getToNode()).     assertEquals("    <message exchangeId=\"" + exchanges.get(1).getExchangeId() + "\">\n" + "      <body type=\"java.lang.String\">Bye World</body>\n" + "    </message>", event2.getMessageAsXml()).     // there should be no messages on bar     events = (List<BacklogTracerEventMessage>) mbeanServer.invoke(on, "dumpTracedMessages", new Object[] { "bar" }, new String[] { "java.lang.String" }).     assertNotNull(events).     assertEquals(0, events.size()). }
false;public;0;9;;@Override public void configure() throws Exception {     context.setUseBreadcrumb(false).     from("direct:start").to("mock:foo").id("foo").to("mock:bar").id("bar"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setUseBreadcrumb(false).             from("direct:start").to("mock:foo").id("foo").to("mock:bar").id("bar").         }     }. }
