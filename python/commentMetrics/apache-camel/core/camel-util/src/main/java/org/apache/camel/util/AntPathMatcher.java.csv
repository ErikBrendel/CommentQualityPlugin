commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Set the path separator to use for pattern parsing. Default is "/", as in  * Ant.  */ ;/**  * Set the path separator to use for pattern parsing. Default is "/", as in  * Ant.  */ public void setPathSeparator(String pathSeparator) {     this.pathSeparator = pathSeparator != null ? pathSeparator : DEFAULT_PATH_SEPARATOR. }
false;public;1;3;;public boolean isPattern(String path) {     return path.indexOf('*') != -1 || path.indexOf('?') != -1. }
false;public;2;3;;public boolean match(String pattern, String path) {     return match(pattern, path, true). }
false;public;2;3;;public boolean matchStart(String pattern, String path) {     return matchStart(pattern, path, true). }
false;public;3;3;;public boolean match(String pattern, String path, boolean isCaseSensitive) {     return doMatch(pattern, path, true, isCaseSensitive). }
false;public;3;3;;public boolean matchStart(String pattern, String path, boolean isCaseSensitive) {     return doMatch(pattern, path, false, isCaseSensitive). }
true;protected;4;123;/**  * Actually match the given <code>path</code> against the given  * <code>pattern</code>.  *  * @param pattern the pattern to match against  * @param path the path String to test  * @param fullMatch whether a full pattern match is required (else a pattern  *            match as far as the given base path goes is sufficient)  * @param isCaseSensitive Whether or not matching should be performed  *                        case sensitively.  * @return <code>true</code> if the supplied <code>path</code> matched,  *         <code>false</code> if it didn't  */ ;/**  * Actually match the given <code>path</code> against the given  * <code>pattern</code>.  *  * @param pattern the pattern to match against  * @param path the path String to test  * @param fullMatch whether a full pattern match is required (else a pattern  *            match as far as the given base path goes is sufficient)  * @param isCaseSensitive Whether or not matching should be performed  *                        case sensitively.  * @return <code>true</code> if the supplied <code>path</code> matched,  *         <code>false</code> if it didn't  */ protected boolean doMatch(String pattern, String path, boolean fullMatch, boolean isCaseSensitive) {     if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {         return false.     }     String[] pattDirs = tokenizeToStringArray(pattern, this.pathSeparator).     String[] pathDirs = tokenizeToStringArray(path, this.pathSeparator).     int pattIdxStart = 0.     int pattIdxEnd = pattDirs.length - 1.     int pathIdxStart = 0.     int pathIdxEnd = pathDirs.length - 1.     // Match all elements up to the first **     while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {         String patDir = pattDirs[pattIdxStart].         if ("**".equals(patDir)) {             break.         }         if (!matchStrings(patDir, pathDirs[pathIdxStart], isCaseSensitive)) {             return false.         }         pattIdxStart++.         pathIdxStart++.     }     if (pathIdxStart > pathIdxEnd) {         // Path is exhausted, only match if rest of pattern is * or **'s         if (pattIdxStart > pattIdxEnd) {             return pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator).         }         if (!fullMatch) {             return true.         }         if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {             return true.         }         for (int i = pattIdxStart. i <= pattIdxEnd. i++) {             if (!pattDirs[i].equals("**")) {                 return false.             }         }         return true.     } else if (pattIdxStart > pattIdxEnd) {         // String not exhausted, but pattern is. Failure.         return false.     } else if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {         // Path start definitely matches due to "**" part in pattern.         return true.     }     // up to last '**'     while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {         String patDir = pattDirs[pattIdxEnd].         if (patDir.equals("**")) {             break.         }         if (!matchStrings(patDir, pathDirs[pathIdxEnd], isCaseSensitive)) {             return false.         }         pattIdxEnd--.         pathIdxEnd--.     }     if (pathIdxStart > pathIdxEnd) {         // String is exhausted         for (int i = pattIdxStart. i <= pattIdxEnd. i++) {             if (!pattDirs[i].equals("**")) {                 return false.             }         }         return true.     }     while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {         int patIdxTmp = -1.         for (int i = pattIdxStart + 1. i <= pattIdxEnd. i++) {             if (pattDirs[i].equals("**")) {                 patIdxTmp = i.                 break.             }         }         if (patIdxTmp == pattIdxStart + 1) {             // '**/**' situation, so skip one             pattIdxStart++.             continue.         }         // Find the pattern between padIdxStart & padIdxTmp in str between         // strIdxStart & strIdxEnd         int patLength = patIdxTmp - pattIdxStart - 1.         int strLength = pathIdxEnd - pathIdxStart + 1.         int foundIdx = -1.         strLoop: for (int i = 0. i <= strLength - patLength. i++) {             for (int j = 0. j < patLength. j++) {                 String subPat = pattDirs[pattIdxStart + j + 1].                 String subStr = pathDirs[pathIdxStart + i + j].                 if (!matchStrings(subPat, subStr, isCaseSensitive)) {                     continue strLoop.                 }             }             foundIdx = pathIdxStart + i.             break.         }         if (foundIdx == -1) {             return false.         }         pattIdxStart = patIdxTmp.         pathIdxStart = foundIdx + patLength.     }     for (int i = pattIdxStart. i <= pattIdxEnd. i++) {         if (!pattDirs[i].equals("**")) {             return false.         }     }     return true. }
true;private;3;135;/**  * Tests whether or not a string matches against a pattern. The pattern may  * contain two special characters:<br>  * '*' means zero or more characters<br>  * '?' means one and only one character  *  * @param pattern pattern to match against. Must not be <code>null</code>.  * @param str string which must be matched against the pattern. Must not be  *            <code>null</code>.  * @param caseSensitive Whether or not matching should be performed  *                      case sensitively.  * @return <code>true</code> if the string matches against the pattern, or  *         <code>false</code> otherwise.  */ ;/**  * Tests whether or not a string matches against a pattern. The pattern may  * contain two special characters:<br>  * '*' means zero or more characters<br>  * '?' means one and only one character  *  * @param pattern pattern to match against. Must not be <code>null</code>.  * @param str string which must be matched against the pattern. Must not be  *            <code>null</code>.  * @param caseSensitive Whether or not matching should be performed  *                      case sensitively.  * @return <code>true</code> if the string matches against the pattern, or  *         <code>false</code> otherwise.  */ private boolean matchStrings(String pattern, String str, boolean caseSensitive) {     char[] patArr = pattern.toCharArray().     char[] strArr = str.toCharArray().     int patIdxStart = 0.     int patIdxEnd = patArr.length - 1.     int strIdxStart = 0.     int strIdxEnd = strArr.length - 1.     char ch.     boolean containsStar = false.     for (char c : patArr) {         if (c == '*') {             containsStar = true.             break.         }     }     if (!containsStar) {         // No '*'s, so we make a shortcut         if (patIdxEnd != strIdxEnd) {             // Pattern and string do not have the same size             return false.         }         for (int i = 0. i <= patIdxEnd. i++) {             ch = patArr[i].             if (ch != '?') {                 if (different(caseSensitive, ch, strArr[i])) {                     return false.                 // Character mismatch                 }             }         }         // String matches against pattern         return true.     }     if (patIdxEnd == 0) {         // Pattern contains only '*', which matches anything         return true.     }     // Process characters before first star     while ((ch = patArr[patIdxStart]) != '*' && strIdxStart <= strIdxEnd) {         if (ch != '?') {             if (different(caseSensitive, ch, strArr[strIdxStart])) {                 return false.             // Character mismatch             }         }         patIdxStart++.         strIdxStart++.     }     if (strIdxStart > strIdxEnd) {         // left in the pattern. If so, we succeeded. Otherwise failure.         for (int i = patIdxStart. i <= patIdxEnd. i++) {             if (patArr[i] != '*') {                 return false.             }         }         return true.     }     // Process characters after last star     while ((ch = patArr[patIdxEnd]) != '*' && strIdxStart <= strIdxEnd) {         if (ch != '?') {             if (different(caseSensitive, ch, strArr[strIdxEnd])) {                 return false.             // Character mismatch             }         }         patIdxEnd--.         strIdxEnd--.     }     if (strIdxStart > strIdxEnd) {         // left in the pattern. If so, we succeeded. Otherwise failure.         for (int i = patIdxStart. i <= patIdxEnd. i++) {             if (patArr[i] != '*') {                 return false.             }         }         return true.     }     // always to a '*'.     while (patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd) {         int patIdxTmp = -1.         for (int i = patIdxStart + 1. i <= patIdxEnd. i++) {             if (patArr[i] == '*') {                 patIdxTmp = i.                 break.             }         }         if (patIdxTmp == patIdxStart + 1) {             // Two stars next to each other, skip the first one.             patIdxStart++.             continue.         }         // Find the pattern between padIdxStart & padIdxTmp in str between         // strIdxStart & strIdxEnd         int patLength = patIdxTmp - patIdxStart - 1.         int strLength = strIdxEnd - strIdxStart + 1.         int foundIdx = -1.         strLoop: for (int i = 0. i <= strLength - patLength. i++) {             for (int j = 0. j < patLength. j++) {                 ch = patArr[patIdxStart + j + 1].                 if (ch != '?') {                     if (different(caseSensitive, ch, strArr[strIdxStart + i + j])) {                         continue strLoop.                     }                 }             }             foundIdx = strIdxStart + i.             break.         }         if (foundIdx == -1) {             return false.         }         patIdxStart = patIdxTmp.         strIdxStart = foundIdx + patLength.     }     // in the pattern. If so, we succeeded. Otherwise failure.     for (int i = patIdxStart. i <= patIdxEnd. i++) {         if (patArr[i] != '*') {             return false.         }     }     return true. }
true;public;2;29;/**  * Given a pattern and a full path, determine the pattern-mapped part.  * <p>  * For example:  * <ul>  * <li>'<code>/docs/cvs/commit.html</code>' and '  * <code>/docs/cvs/commit.html</code> -> ''</li>  * <li>'<code>/docs/*</code>' and '<code>/docs/cvs/commit</code> -> '  * <code>cvs/commit</code>'</li>  * <li>'<code>/docs/cvs/*.html</code>' and '  * <code>/docs/cvs/commit.html</code> -> '<code>commit.html</code>'</li>  * <li>'<code>/docs/**</code>' and '<code>/docs/cvs/commit</code> -> '  * <code>cvs/commit</code>'</li>  * <li>'<code>/docs/**\/*.html</code>' and '  * <code>/docs/cvs/commit.html</code> -> '<code>cvs/commit.html</code>'</li>  * <li>'<code>/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '  * <code>docs/cvs/commit.html</code>'</li>  * <li>'<code>*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '  * <code>/docs/cvs/commit.html</code>'</li>  * <li>'<code>*</code>' and '<code>/docs/cvs/commit.html</code> -> '  * <code>/docs/cvs/commit.html</code>'</li>  * </ul>  * <p>  * Assumes that {@link #match} returns <code>true</code> for '  * <code>pattern</code>' and '<code>path</code>', but does  * <strong>not</strong> enforce this.  */ ;/**  * Given a pattern and a full path, determine the pattern-mapped part.  * <p>  * For example:  * <ul>  * <li>'<code>/docs/cvs/commit.html</code>' and '  * <code>/docs/cvs/commit.html</code> -> ''</li>  * <li>'<code>/docs/*</code>' and '<code>/docs/cvs/commit</code> -> '  * <code>cvs/commit</code>'</li>  * <li>'<code>/docs/cvs/*.html</code>' and '  * <code>/docs/cvs/commit.html</code> -> '<code>commit.html</code>'</li>  * <li>'<code>/docs/**</code>' and '<code>/docs/cvs/commit</code> -> '  * <code>cvs/commit</code>'</li>  * <li>'<code>/docs/**\/*.html</code>' and '  * <code>/docs/cvs/commit.html</code> -> '<code>cvs/commit.html</code>'</li>  * <li>'<code>/*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '  * <code>docs/cvs/commit.html</code>'</li>  * <li>'<code>*.html</code>' and '<code>/docs/cvs/commit.html</code> -> '  * <code>/docs/cvs/commit.html</code>'</li>  * <li>'<code>*</code>' and '<code>/docs/cvs/commit.html</code> -> '  * <code>/docs/cvs/commit.html</code>'</li>  * </ul>  * <p>  * Assumes that {@link #match} returns <code>true</code> for '  * <code>pattern</code>' and '<code>path</code>', but does  * <strong>not</strong> enforce this.  */ public String extractPathWithinPattern(String pattern, String path) {     String[] patternParts = tokenizeToStringArray(pattern, this.pathSeparator).     String[] pathParts = tokenizeToStringArray(path, this.pathSeparator).     StringBuilder buffer = new StringBuilder().     // Add any path parts that have a wildcarded pattern part.     int puts = 0.     for (int i = 0. i < patternParts.length. i++) {         String patternPart = patternParts[i].         if ((patternPart.indexOf('*') > -1 || patternPart.indexOf('?') > -1) && pathParts.length >= i + 1) {             if (puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator))) {                 buffer.append(this.pathSeparator).             }             buffer.append(pathParts[i]).             puts++.         }     }     // Append any trailing path parts.     for (int i = patternParts.length. i < pathParts.length. i++) {         if (puts > 0 || i > 0) {             buffer.append(this.pathSeparator).         }         buffer.append(pathParts[i]).     }     return buffer.toString(). }
true;public,static;2;15;/**  * Tokenize the given String into a String array via a StringTokenizer.  * Trims tokens and omits empty tokens.  * <p>  * The given delimiters string is supposed to consist of any number of  * delimiter characters. Each of those characters can be used to separate  * tokens. A delimiter is always a single character. for multi-character  * delimiters, consider using <code>delimitedListToStringArray</code>  *  * @param str the String to tokenize  * @param delimiters the delimiter characters, assembled as String (each of  *            those characters is individually considered as delimiter).  * @return an array of the tokens  * @see java.util.StringTokenizer  * @see java.lang.String#trim()  */ ;/**  * Tokenize the given String into a String array via a StringTokenizer.  * Trims tokens and omits empty tokens.  * <p>  * The given delimiters string is supposed to consist of any number of  * delimiter characters. Each of those characters can be used to separate  * tokens. A delimiter is always a single character. for multi-character  * delimiters, consider using <code>delimitedListToStringArray</code>  *  * @param str the String to tokenize  * @param delimiters the delimiter characters, assembled as String (each of  *            those characters is individually considered as delimiter).  * @return an array of the tokens  * @see java.util.StringTokenizer  * @see java.lang.String#trim()  */ public static String[] tokenizeToStringArray(String str, String delimiters) {     if (str == null) {         return null.     }     StringTokenizer st = new StringTokenizer(str, delimiters).     List<String> tokens = new ArrayList<>().     while (st.hasMoreTokens()) {         String token = st.nextToken().         token = token.trim().         if (token.length() > 0) {             tokens.add(token).         }     }     return tokens.toArray(new String[tokens.size()]). }
false;private,static;3;3;;private static boolean different(boolean caseSensitive, char ch, char other) {     return caseSensitive ? ch != other : Character.toUpperCase(ch) != Character.toUpperCase(other). }
