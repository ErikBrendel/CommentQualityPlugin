commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;36;/**  * Returns true if the version number of the given package name can be found and is greater than or equal to the minimum version.  *  * For package names which include multiple dots, dots after the leftmost are removed. So for example a spring version of 2.5.1  * is converted to 2.51 so you can assert that it's >= 2.51 (so above 2.50 and less than 2.52 etc).  *  * @param packageName the Java package name to compare  * @param minimumVersion the minimum version number  * @return true if the package name can be determined and if it's greater than or equal to the minimum value  */ ;/**  * Returns true if the version number of the given package name can be found and is greater than or equal to the minimum version.  *  * For package names which include multiple dots, dots after the leftmost are removed. So for example a spring version of 2.5.1  * is converted to 2.51 so you can assert that it's >= 2.51 (so above 2.50 and less than 2.52 etc).  *  * @param packageName the Java package name to compare  * @param minimumVersion the minimum version number  * @return true if the package name can be determined and if it's greater than or equal to the minimum value  */ public static boolean isValidVersion(String packageName, double minimumVersion) {     try {         Package spring = Package.getPackage(packageName).         if (spring != null) {             String value = spring.getImplementationVersion().             if (value != null) {                 // lets remove any extra dots in the string...                 int idx = value.indexOf('.').                 if (idx >= 0) {                     StringBuilder buffer = new StringBuilder(value.substring(0, ++idx)).                     int i = idx.                     for (int size = value.length(). i < size. i++) {                         char ch = value.charAt(i).                         if (Character.isDigit(ch)) {                             buffer.append(ch).                         }                     }                     value = buffer.toString().                 }                 if (ObjectHelper.isNotEmpty(value)) {                     double number = Double.parseDouble(value).                     return number >= minimumVersion.                 } else {                     LOG.debug("Could not determine version of package: {}", packageName).                 }             }         }     } catch (Exception e) {         if (LOG.isDebugEnabled()) {             LOG.debug("Could not determine version of package: {}", packageName, e).         }     }     return true. }
