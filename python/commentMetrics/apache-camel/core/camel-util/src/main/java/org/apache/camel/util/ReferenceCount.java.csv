commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the reference count.  */ ;/**  * Returns the reference count.  */ public long get() {     return count.get(). }
true;public;0;16;/**  * Increases the reference count invoke onFirst on the first increment.  */ ;/**  * Increases the reference count invoke onFirst on the first increment.  */ public void retain() throws IllegalStateException {     while (true) {         long v = count.get().         if (v < 0) {             throw new IllegalStateException("Released").         }         if (count.compareAndSet(v, v + 1)) {             if (v == 0) {                 this.onFirst.run().             }             break.         }     } }
true;public;0;16;/**  * Decreases the reference count and invoke onRelease if the reference count reaches {@code 0}.  */ ;/**  * Decreases the reference count and invoke onRelease if the reference count reaches {@code 0}.  */ public void release() throws IllegalStateException {     while (true) {         long v = count.get().         if (v <= 0) {             throw new IllegalStateException("ReferenceCount already released").         }         if (count.compareAndSet(v, v - 1)) {             if (v == 1) {                 onRelease.run().             }             break.         }     } }
false;public,static;2;3;;// ******************************* // Helpers // ******************************* public static ReferenceCount on(Runnable onFirst, Runnable onRelease) {     return new ReferenceCount(onFirst, onRelease). }
false;public,static;1;3;;public static ReferenceCount onRelease(Runnable onRelease) {     return new ReferenceCount(() -> {     }, onRelease). }
