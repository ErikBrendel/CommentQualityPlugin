commented;modifiers;parameterAmount;loc;comment;code
false;public;2;6;;@Override public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {     if (r instanceof Rejectable) {         ((Rejectable) r).reject().     } }
false;public;0;4;;@Override public String toString() {     return "Discard". }
false;public;2;10;;@Override public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {     if (!executor.isShutdown()) {         Runnable rejected = executor.getQueue().poll().         if (rejected instanceof Rejectable) {             ((Rejectable) rejected).reject().         }         executor.execute(r).     } }
false;public;0;4;;@Override public String toString() {     return "DiscardOldest". }
false;public;0;4;;@Override public String toString() {     return "CallerRuns". }
false;public;2;8;;@Override public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {     if (r instanceof Rejectable) {         ((Rejectable) r).reject().     } else {         throw new RejectedExecutionException("Task " + r.toString() + " rejected from " + executor.toString()).     } }
false;public;0;4;;@Override public String toString() {     return "Abort". }
false;public;0;59;;public RejectedExecutionHandler asRejectedExecutionHandler() {     if (this == Abort) {         return new RejectedExecutionHandler() {              @Override             public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {                 if (r instanceof Rejectable) {                     ((Rejectable) r).reject().                 } else {                     throw new RejectedExecutionException("Task " + r.toString() + " rejected from " + executor.toString()).                 }             }              @Override             public String toString() {                 return "Abort".             }         }.     } else if (this == CallerRuns) {         return new ThreadPoolExecutor.CallerRunsPolicy() {              @Override             public String toString() {                 return "CallerRuns".             }         }.     } else if (this == DiscardOldest) {         return new RejectedExecutionHandler() {              @Override             public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {                 if (!executor.isShutdown()) {                     Runnable rejected = executor.getQueue().poll().                     if (rejected instanceof Rejectable) {                         ((Rejectable) rejected).reject().                     }                     executor.execute(r).                 }             }              @Override             public String toString() {                 return "DiscardOldest".             }         }.     } else if (this == Discard) {         return new RejectedExecutionHandler() {              @Override             public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {                 if (r instanceof Rejectable) {                     ((Rejectable) r).reject().                 }             }              @Override             public String toString() {                 return "Discard".             }         }.     }     throw new IllegalArgumentException("Unknown ThreadPoolRejectedPolicy: " + this). }
