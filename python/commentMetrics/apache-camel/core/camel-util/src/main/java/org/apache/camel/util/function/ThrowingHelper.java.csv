commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static <V, T extends Throwable> Supplier<V> wrapAsSupplier(ThrowingSupplier<V, T> supplier) {     return () -> {         try {             return supplier.get().         } catch (Throwable t) {             throw new RuntimeException(t).         }     }. }
false;public,static;1;9;;public static <I, T extends Throwable> Consumer<I> wrapAsConsumer(ThrowingConsumer<I, T> consumer) {     return in -> {         try {             consumer.accept(in).         } catch (Throwable t) {             throw new RuntimeException(t).         }     }. }
false;public,static;1;9;;public static <I1, I2, T extends Throwable> BiConsumer<I1, I2> wrapAsBiConsumer(ThrowingBiConsumer<I1, I2, T> consumer) {     return (i1, i2) -> {         try {             consumer.accept(i1, i2).         } catch (Throwable t) {             throw new RuntimeException(t).         }     }. }
false;public,static;1;10;;public static <I, R, T extends Throwable> Function<I, R> wrapAsFunction(ThrowingFunction<I, R, T> function) {     return in -> {         try {             return function.apply(in).         } catch (Throwable t) {             throw new RuntimeException(t).         }     }. }
true;public,static;2;7;/**  * Tests whether the value is <b>not</b> <tt>null</tt>, an empty string, an empty collection or a map  and transform it using the given function.  *  * @param value  the value, if its a String it will be tested for text length as well  * @param function  the function to be executed against value if not empty  */ ;/**  * Tests whether the value is <b>not</b> <tt>null</tt>, an empty string, an empty collection or a map  and transform it using the given function.  *  * @param value  the value, if its a String it will be tested for text length as well  * @param function  the function to be executed against value if not empty  */ public static <I, R, T extends Throwable> Optional<R> applyIfNotEmpty(I value, ThrowingFunction<I, R, T> function) throws T {     if (ObjectHelper.isNotEmpty(value)) {         return Optional.ofNullable(function.apply(value)).     }     return Optional.empty(). }
true;public,static;3;7;/**  * Tests whether the value is <b>not</b> <tt>null</tt>, an empty string, an empty collection or a map and transform it using the given function.  *  * @param value  the value, if its a String it will be tested for text length as well  * @param consumer  the function to be executed against value if not empty  * @param orElse  the supplier to use to retrieve a result if the given value is empty  */ ;/**  * Tests whether the value is <b>not</b> <tt>null</tt>, an empty string, an empty collection or a map and transform it using the given function.  *  * @param value  the value, if its a String it will be tested for text length as well  * @param consumer  the function to be executed against value if not empty  * @param orElse  the supplier to use to retrieve a result if the given value is empty  */ public static <I, R, T extends Throwable> R applyIfNotEmpty(I value, ThrowingFunction<I, R, T> consumer, Supplier<R> orElse) throws T {     if (ObjectHelper.isNotEmpty(value)) {         return consumer.apply(value).     }     return orElse.get(). }
