commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected boolean removeEldestEntry(Entry<String, Pattern> eldest) {     return size() >= 7. }
false;private,static;1;8;;private static CharsetDecoder toDecoder(String charsetName) {     try {         Charset cs = charsetName != null ? Charset.forName(charsetName) : Charset.defaultCharset().         return cs.newDecoder().     } catch (IllegalCharsetNameException | UnsupportedCharsetException e) {         throw new IllegalArgumentException(e).     } }
false;public;0;14;;public boolean hasNext() {     checkClosed().     saveState().     while (!inputExhausted) {         if (hasTokenInBuffer()) {             revertState().             return true.         }         readMore().     }     boolean result = hasTokenInBuffer().     revertState().     return result. }
false;public;0;15;;public String next() {     checkClosed().     while (true) {         String token = getCompleteTokenInBuffer().         if (token != null) {             skipped = false.             return token.         }         if (needInput) {             readMore().         } else {             throwFor().         }     } }
false;private;0;3;;private void saveState() {     savedPosition = position. }
false;private;0;5;;private void revertState() {     position = savedPosition.     savedPosition = -1.     skipped = false. }
false;private;0;23;;private void readMore() {     if (buf.limit() == buf.capacity()) {         expandBuffer().     }     int p = buf.position().     buf.position(buf.limit()).     buf.limit(buf.capacity()).     int n.     try {         n = source.read(buf).     } catch (IOException ioe) {         lastIOException = ioe.         n = -1.     }     if (n == -1) {         inputExhausted = true.         needInput = false.     } else if (n > 0) {         needInput = false.     }     buf.limit(buf.position()).     buf.position(p). }
false;private;0;19;;private void expandBuffer() {     int offset = savedPosition == -1 ? position : savedPosition.     buf.position(offset).     if (offset > 0) {         buf.compact().         translateSavedIndexes(offset).         position -= offset.         buf.flip().     } else {         int newSize = buf.capacity() * 2.         CharBuffer newBuf = CharBuffer.allocate(newSize).         newBuf.put(buf).         newBuf.flip().         translateSavedIndexes(offset).         position -= offset.         buf = newBuf.         matcher.reset(buf).     } }
false;private;1;5;;private void translateSavedIndexes(int offset) {     if (savedPosition != -1) {         savedPosition -= offset.     } }
false;private;0;8;;private void throwFor() {     skipped = false.     if (inputExhausted && position == buf.limit()) {         throw new NoSuchElementException().     } else {         throw new InputMismatchException().     } }
false;private;0;8;;private boolean hasTokenInBuffer() {     matcher.usePattern(delimPattern).     matcher.region(position, buf.limit()).     if (matcher.lookingAt()) {         position = matcher.end().     }     return position != buf.limit(). }
false;private;0;54;;private String getCompleteTokenInBuffer() {     matcher.usePattern(delimPattern).     if (!skipped) {         matcher.region(position, buf.limit()).         if (matcher.lookingAt()) {             if (matcher.hitEnd() && !inputExhausted) {                 needInput = true.                 return null.             }             skipped = true.             position = matcher.end().         }     }     if (position == buf.limit()) {         if (inputExhausted) {             return null.         }         needInput = true.         return null.     }     matcher.region(position, buf.limit()).     boolean foundNextDelim = matcher.find().     if (foundNextDelim && (matcher.end() == position)) {         foundNextDelim = matcher.find().     }     if (foundNextDelim) {         if (matcher.requireEnd() && !inputExhausted) {             needInput = true.             return null.         }         int tokenEnd = matcher.start().         matcher.usePattern(cachePattern(FIND_ANY_PATTERN)).         matcher.region(position, tokenEnd).         if (matcher.matches()) {             String s = matcher.group().             position = matcher.end().             return s.         } else {             return null.         }     }     if (inputExhausted) {         matcher.usePattern(cachePattern(FIND_ANY_PATTERN)).         matcher.region(position, buf.limit()).         if (matcher.matches()) {             String s = matcher.group().             position = matcher.end().             return s.         }         return null.     }     needInput = true.     return null. }
false;private;0;5;;private void checkClosed() {     if (closed) {         throw new IllegalStateException().     } }
false;public;0;15;;public void close() throws IOException {     if (!closed) {         closed = true.         if (source instanceof Closeable) {             try {                 ((Closeable) source).close().             } catch (IOException e) {                 lastIOException = e.             }         }     }     if (lastIOException != null) {         throw lastIOException.     } }
false;private,static;1;6;;private static Pattern cachePattern(String pattern) {     if (pattern == null) {         return null.     }     return CACHE.computeIfAbsent(pattern, Pattern::compile). }
