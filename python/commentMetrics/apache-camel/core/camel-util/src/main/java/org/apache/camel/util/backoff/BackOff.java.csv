commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * @return the delay to wait before retry the operation.  */ ;// ************************************* // Properties // ************************************* /**  * @return the delay to wait before retry the operation.  */ public Duration getDelay() {     return delay. }
true;public;1;3;/**  * The delay to wait before retry the operation.  */ ;/**  * The delay to wait before retry the operation.  */ public void setDelay(Duration delay) {     this.delay = delay. }
false;public;0;3;;public Duration getMaxDelay() {     return maxDelay. }
true;public;1;3;/**  * The maximum back-off time after which the delay is not more increased.  */ ;/**  * The maximum back-off time after which the delay is not more increased.  */ public void setMaxDelay(Duration maxDelay) {     this.maxDelay = maxDelay. }
false;public;0;3;;public Duration getMaxElapsedTime() {     return maxElapsedTime. }
true;public;1;3;/**  * The maximum elapsed time after which the back-off should be considered  * exhausted and no more attempts should be made.  */ ;/**  * The maximum elapsed time after which the back-off should be considered  * exhausted and no more attempts should be made.  */ public void setMaxElapsedTime(Duration maxElapsedTime) {     this.maxElapsedTime = maxElapsedTime. }
false;public;0;3;;public Long getMaxAttempts() {     return maxAttempts. }
true;public;1;3;/**  * The maximum number of attempts after which the back-off should be considered  * exhausted and no more attempts should be made.  *  * @param maxAttempts  */ ;/**  * The maximum number of attempts after which the back-off should be considered  * exhausted and no more attempts should be made.  *  * @param maxAttempts  */ public void setMaxAttempts(Long maxAttempts) {     this.maxAttempts = maxAttempts. }
false;public;0;3;;public Double getMultiplier() {     return multiplier. }
true;public;1;3;/**  * The value to multiply the current interval by for each retry attempt.  */ ;/**  * The value to multiply the current interval by for each retry attempt.  */ public void setMultiplier(Double multiplier) {     this.multiplier = multiplier. }
false;public;0;10;;@Override public String toString() {     return "BackOff{" + "delay=" + delay + ", maxDelay=" + maxDelay + ", maxElapsedTime=" + maxElapsedTime + ", maxAttempts=" + maxAttempts + ", multiplier=" + multiplier + '}'. }
false;public,static;0;3;;// ***************************************** // Builder // ***************************************** public static Builder builder() {     return new Builder(). }
false;public,static;1;3;;public static Builder builder(BackOff template) {     return new Builder().read(template). }
true;public;1;9;/**  * Read values from the given {@link BackOff}  */ ;/**  * Read values from the given {@link BackOff}  */ public Builder read(BackOff template) {     delay = template.delay.     maxDelay = template.maxDelay.     maxElapsedTime = template.maxElapsedTime.     maxAttempts = template.maxAttempts.     multiplier = template.multiplier.     return this. }
false;public;1;4;;public Builder delay(Duration delay) {     this.delay = delay.     return this. }
false;public;2;3;;public Builder delay(long delay, TimeUnit unit) {     return delay(Duration.ofMillis(unit.toMillis(delay))). }
false;public;1;3;;public Builder delay(long delay) {     return delay(Duration.ofMillis(delay)). }
false;public;1;4;;public Builder maxDelay(Duration maxDelay) {     this.maxDelay = maxDelay.     return this. }
false;public;2;3;;public Builder maxDelay(long maxDelay, TimeUnit unit) {     return maxDelay(Duration.ofMillis(unit.toMillis(maxDelay))). }
false;public;1;3;;public Builder maxDelay(long maxDelay) {     return maxDelay(Duration.ofMillis(maxDelay)). }
false;public;1;4;;public Builder maxElapsedTime(Duration maxElapsedTime) {     this.maxElapsedTime = maxElapsedTime.     return this. }
false;public;2;3;;public Builder maxElapsedTime(long maxElapsedTime, TimeUnit unit) {     return maxElapsedTime(Duration.ofMillis(unit.toMillis(maxElapsedTime))). }
false;public;1;3;;public Builder maxElapsedTime(long maxElapsedTime) {     return maxElapsedTime(Duration.ofMillis(maxElapsedTime)). }
false;public;1;4;;public Builder maxAttempts(Long attempts) {     this.maxAttempts = attempts.     return this. }
false;public;1;4;;public Builder multiplier(Double multiplier) {     this.multiplier = multiplier.     return this. }
true;public;0;3;/**  * Build a new instance of {@link BackOff}  */ ;/**  * Build a new instance of {@link BackOff}  */ public BackOff build() {     return new BackOff(delay, maxDelay, maxElapsedTime, maxAttempts, multiplier). }
