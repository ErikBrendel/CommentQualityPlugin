commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;31;/**  * Resolves the path.  * <p/>  * The pattern is:  * <ul>  *   <li><tt>${env.key}</tt> for environment variables.</li>  *   <li><tt>${key}</tt> for JVM system properties.</li>  * </ul>  * For example: <tt>${env.KARAF_HOME}/data/logs</tt>  *  * @param path  the path  * @return the resolved path  * @throws IllegalArgumentException is thrown if system property / environment not found  */ ;/**  * Resolves the path.  * <p/>  * The pattern is:  * <ul>  *   <li><tt>${env.key}</tt> for environment variables.</li>  *   <li><tt>${key}</tt> for JVM system properties.</li>  * </ul>  * For example: <tt>${env.KARAF_HOME}/data/logs</tt>  *  * @param path  the path  * @return the resolved path  * @throws IllegalArgumentException is thrown if system property / environment not found  */ public static String resolvePath(String path) throws IllegalArgumentException {     Matcher matcher = ENV_PATTERN.matcher(path).     while (matcher.find()) {         String key = matcher.group(1).         String value = System.getenv(key).         if (ObjectHelper.isEmpty(value)) {             throw new IllegalArgumentException("Cannot find system environment with key: " + key).         }         // must quote the replacement to have it work as literal replacement         value = Matcher.quoteReplacement(value).         path = matcher.replaceFirst(value).         // must match again as location is changed         matcher = ENV_PATTERN.matcher(path).     }     matcher = SYS_PATTERN.matcher(path).     while (matcher.find()) {         String key = matcher.group(1).         String value = System.getProperty(key).         if (ObjectHelper.isEmpty(value)) {             throw new IllegalArgumentException("Cannot find JVM system property with key: " + key).         }         // must quote the replacement to have it work as literal replacement         value = Matcher.quoteReplacement(value).         path = matcher.replaceFirst(value).         // must match again as location is changed         matcher = SYS_PATTERN.matcher(path).     }     return path. }
