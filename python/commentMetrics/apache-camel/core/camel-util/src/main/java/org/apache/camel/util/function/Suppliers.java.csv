commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;16;;public static <T> Supplier<T> memorize(Supplier<T> supplier) {     final AtomicReference<T> valueHolder = new AtomicReference<>().     return () -> {         T supplied = valueHolder.get().         if (supplied == null) {             synchronized (valueHolder) {                 supplied = valueHolder.get().                 if (supplied == null) {                     supplied = Objects.requireNonNull(supplier.get(), "Supplier should not return null").                     valueHolder.lazySet(supplied).                 }             }         }         return supplied.     }. }
false;public,static;2;20;;public static <T> Supplier<T> memorize(ThrowingSupplier<T, ? extends Exception> supplier, Consumer<Exception> consumer) {     final AtomicReference<T> valueHolder = new AtomicReference<>().     return () -> {         T supplied = valueHolder.get().         if (supplied == null) {             synchronized (valueHolder) {                 supplied = valueHolder.get().                 if (supplied == null) {                     try {                         supplied = Objects.requireNonNull(supplier.get(), "Supplier should not return null").                         valueHolder.lazySet(supplied).                     } catch (Exception e) {                         consumer.accept(e).                     }                 }             }         }         return supplied.     }. }
false;public,static;1;12;;public static <T> Optional<T> firstNotNull(ThrowingSupplier<T, Exception>... suppliers) throws Exception {     T answer = null.     for (ThrowingSupplier<T, Exception> supplier : suppliers) {         answer = supplier.get().         if (answer != null) {             break.         }     }     return Optional.ofNullable(answer). }
false;public,static;2;12;;public static <T> Optional<T> firstMatching(Predicate<T> predicate, ThrowingSupplier<T, Exception>... suppliers) throws Exception {     T answer = null.     for (ThrowingSupplier<T, Exception> supplier : suppliers) {         answer = supplier.get().         if (predicate.test(answer)) {             break.         }     }     return Optional.ofNullable(answer). }
