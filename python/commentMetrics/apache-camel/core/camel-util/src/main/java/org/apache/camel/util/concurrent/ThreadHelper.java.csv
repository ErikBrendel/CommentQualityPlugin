commented;modifiers;parameterAmount;loc;comment;code
false;private,static;0;3;;private static long nextThreadCounter() {     return threadCounter.getAndIncrement(). }
true;public,static;2;24;/**  * Creates a new thread name with the given pattern  * <p/>  * See {@link org.apache.camel.spi.ExecutorServiceManager#setThreadNamePattern(String)} for supported patterns.  *  * @param pattern the pattern  * @param name    the name  * @return the thread name, which is unique  */ ;/**  * Creates a new thread name with the given pattern  * <p/>  * See {@link org.apache.camel.spi.ExecutorServiceManager#setThreadNamePattern(String)} for supported patterns.  *  * @param pattern the pattern  * @param name    the name  * @return the thread name, which is unique  */ public static String resolveThreadName(String pattern, String name) {     if (pattern == null) {         pattern = DEFAULT_PATTERN.     }     // we support #longName# and #name# as name placeholders     String longName = name.     String shortName = name.contains("?") ? StringHelper.before(name, "?") : name.     // must quote the names to have it work as literal replacement     shortName = Matcher.quoteReplacement(shortName).     longName = Matcher.quoteReplacement(longName).     // replace tokens     String answer = pattern.replaceFirst("#counter#", "" + nextThreadCounter()).     answer = answer.replaceFirst("#longName#", longName).     answer = answer.replaceFirst("#name#", shortName).     // are there any #word# combos left, if so they should be considered invalid tokens     if (INVALID_PATTERN.matcher(answer).matches()) {         throw new IllegalArgumentException("Pattern is invalid: " + pattern).     }     return answer. }
