commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     executor = Executors.newFixedThreadPool(5).     service = new AsyncCompletionService<>(executor, true). }
false;public;0;4;;@After public void tearDown() throws Exception {     executor.shutdownNow(). }
false;public;0;12;;@Test public void testSubmitOrdered() throws Exception {     service.submit(result("A")).     service.submit(result("B")).     Object a = service.take().     Object b = service.take().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;14;;@Test public void testSubmitOrderedFirstTaskIsSlow() throws Exception {     service.submit(result("A", 200)).     service.submit(result("B")).     Thread.sleep(300).     Object a = service.take().     Object b = service.take().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;12;;@Test public void testSubmitOrderedFirstTaskIsSlowUsingPollTimeout() throws Exception {     service.submit(result("A", 200)).     service.submit(result("B")).     Object a = service.poll(5, TimeUnit.SECONDS).     Object b = service.poll(5, TimeUnit.SECONDS).     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;26;;@Test public void testSubmitOrderedFirstTaskIsSlowUsingPoll() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     service.submit(result("A", latch, 5, TimeUnit.SECONDS)).     service.submit(result("B")).     // poll should not get it the first time     Object a = service.poll().     assertNull(a).     // and neither the 2nd time     a = service.poll().     assertNull(a).     // okay complete task     latch.countDown().     // okay take them     a = service.take().     Object b = service.take().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;12;;@Test public void testSubmitOrderedSecondTaskIsSlow() throws Exception {     service.submit(result("A")).     service.submit(result("B", 100)).     Object a = service.take().     Object b = service.take().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;12;;@Test public void testSubmitOrderedSecondTaskIsSlowUsingPollTimeout() throws Exception {     service.submit(result("A")).     service.submit(result("B", 100)).     Object a = service.poll(5, TimeUnit.SECONDS).     Object b = service.poll(5, TimeUnit.SECONDS).     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;29;;@Test public void testSubmitOrderedLastTaskIsSlowUsingPoll() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     service.submit(result("A")).     service.submit(result("B", latch, 5, TimeUnit.SECONDS)).     // take a     Object a = service.take().     assertNotNull(a).     // poll should not get it the first time     Object b = service.poll().     assertNull(b).     // and neither the 2nd time     b = service.poll().     assertNull(b).     // okay complete task     latch.countDown().     // okay take it     b = service.take().     assertEquals("A", a).     assertEquals("B", b). }
false;;1;3;;Consumer<Consumer<Object>> result(Object r) {     return result -> result.accept(r). }
false;;2;10;;Consumer<Consumer<Object>> result(Object r, int delay) {     return result -> {         try {             Thread.sleep(delay).         } catch (InterruptedException e) {             e.printStackTrace().         }         result.accept(r).     }. }
false;;4;10;;Consumer<Consumer<Object>> result(Object r, CountDownLatch latch, int timeout, TimeUnit unit) {     return result -> {         try {             latch.await(timeout, unit).         } catch (InterruptedException e) {             e.printStackTrace().         }         result.accept(r).     }. }
