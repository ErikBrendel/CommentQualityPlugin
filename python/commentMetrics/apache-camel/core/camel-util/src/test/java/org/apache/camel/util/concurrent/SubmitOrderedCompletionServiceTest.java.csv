commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     executor = Executors.newFixedThreadPool(5).     service = new SubmitOrderedCompletionService<>(executor). }
false;public;0;4;;@After public void tearDown() throws Exception {     executor.shutdownNow(). }
false;public;0;3;;public Object call() throws Exception {     return "A". }
false;public;0;3;;public Object call() throws Exception {     return "B". }
false;public;0;21;;@Test public void testSubmitOrdered() throws Exception {     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "B".         }     }).     Object a = service.take().get().     Object b = service.take().get().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;5;;public Object call() throws Exception {     // this task should be slower than B but we should still get it first     Thread.sleep(200).     return "A". }
false;public;0;3;;public Object call() throws Exception {     return "B". }
false;public;0;23;;@Test public void testSubmitOrderedFirstTaskIsSlow() throws Exception {     service.submit(new Callable<Object>() {          public Object call() throws Exception {             // this task should be slower than B but we should still get it first             Thread.sleep(200).             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "B".         }     }).     Object a = service.take().get().     Object b = service.take().get().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;5;;public Object call() throws Exception {     // this task should be slower than B but we should still get it first     Thread.sleep(200).     return "A". }
false;public;0;3;;public Object call() throws Exception {     return "B". }
false;public;0;23;;@Test public void testSubmitOrderedFirstTaskIsSlowUsingPollTimeout() throws Exception {     service.submit(new Callable<Object>() {          public Object call() throws Exception {             // this task should be slower than B but we should still get it first             Thread.sleep(200).             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "B".         }     }).     Object a = service.poll(5, TimeUnit.SECONDS).get().     Object b = service.poll(5, TimeUnit.SECONDS).get().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;5;;public Object call() throws Exception {     // this task should be slower than B but we should still get it first     latch.await(5, TimeUnit.SECONDS).     return "A". }
false;public;0;3;;public Object call() throws Exception {     return "B". }
false;public;0;37;;@Test public void testSubmitOrderedFirstTaskIsSlowUsingPoll() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             // this task should be slower than B but we should still get it first             latch.await(5, TimeUnit.SECONDS).             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "B".         }     }).     // poll should not get it the first time     Object a = service.poll().     assertNull(a).     // and neither the 2nd time     a = service.poll().     assertNull(a).     // okay complete task     latch.countDown().     // okay take them     a = service.take().get().     Object b = service.take().get().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;3;;public Object call() throws Exception {     return "A". }
false;public;0;4;;public Object call() throws Exception {     Thread.sleep(100).     return "B". }
false;public;0;22;;@Test public void testSubmitOrderedSecondTaskIsSlow() throws Exception {     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             Thread.sleep(100).             return "B".         }     }).     Object a = service.take().get().     Object b = service.take().get().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;3;;public Object call() throws Exception {     return "A". }
false;public;0;4;;public Object call() throws Exception {     Thread.sleep(100).     return "B". }
false;public;0;22;;@Test public void testSubmitOrderedSecondTaskIsSlowUsingPollTimeout() throws Exception {     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             Thread.sleep(100).             return "B".         }     }).     Object a = service.poll(5, TimeUnit.SECONDS).get().     Object b = service.poll(5, TimeUnit.SECONDS).get().     assertEquals("A", a).     assertEquals("B", b). }
false;public;0;3;;public Object call() throws Exception {     return "A". }
false;public;0;4;;public Object call() throws Exception {     latch.await(5, TimeUnit.SECONDS).     return "B". }
false;public;0;39;;@Test public void testSubmitOrderedLastTaskIsSlowUsingPoll() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             return "A".         }     }).     service.submit(new Callable<Object>() {          public Object call() throws Exception {             latch.await(5, TimeUnit.SECONDS).             return "B".         }     }).     // take a     Object a = service.take().get(5, TimeUnit.SECONDS).     assertNotNull(a).     // poll should not get it the first time     Object b = service.poll().     assertNull(b).     // and neither the 2nd time     b = service.poll().     assertNull(b).     // okay complete task     latch.countDown().     // okay take it     b = service.take().get(5, TimeUnit.SECONDS).     assertEquals("A", a).     assertEquals("B", b). }
