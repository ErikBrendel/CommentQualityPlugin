commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void setExpression(Expression expression) {     this.expression = expression. }
false;public;2;6;;@Override public boolean predecessor(Exchange o1, Exchange o2) {     long n1 = getSequenceNumber(o1).     long n2 = getSequenceNumber(o2).     return n1 == (n2 - 1L). }
false;public;2;6;;@Override public boolean successor(Exchange o1, Exchange o2) {     long n1 = getSequenceNumber(o1).     long n2 = getSequenceNumber(o2).     return n2 == (n1 - 1L). }
false;public;2;6;;@Override public int compare(Exchange o1, Exchange o2) {     Long n1 = getSequenceNumber(o1).     Long n2 = getSequenceNumber(o2).     return n1.compareTo(n2). }
false;private;1;3;;private Long getSequenceNumber(Exchange exchange) {     return expression.evaluate(exchange, Long.class). }
false;public;1;10;;@Override public boolean isValid(Exchange exchange) {     Long num = null.     try {         num = expression.evaluate(exchange, Long.class).     } catch (Exception e) {     // ignore     }     return num != null. }
false;public;0;4;;@Override public String toString() {     return "Comparator[" + expression + "]". }
