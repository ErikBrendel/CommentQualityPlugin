commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getLastChosenProcessorIndex() {     return lastIndex. }
false;protected;0;8;;@Override protected void doStart() throws Exception {     super.doStart().     if (getProcessors().size() != ratios.size()) {         throw new IllegalArgumentException("Loadbalacing with " + getProcessors().size() + " should match number of distributions " + ratios.size()).     } }
false;protected;0;6;;protected void decrementSum() {     if (--runtimeRatioSum == 0) {         // every processor is exhausted, reload for a new distribution round         reset().     } }
false;protected;0;6;;protected void reset() {     for (DistributionRatio ratio : ratios) {         ratio.reset().     }     runtimeRatioSum = distributionRatioSum. }
false;public;0;3;;public List<DistributionRatio> getRatios() {     return ratios. }
