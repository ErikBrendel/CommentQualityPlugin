commented;modifiers;parameterAmount;loc;comment;code
false;public;4;15;;public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, Processor target, Processor nextTarget) throws Exception {     // store the target we are intercepting     this.interceptedTarget = target.     // remember the target that was intercepted     InterceptReifier.this.definition.getIntercepted().add(interceptedTarget).     if (interceptedTarget != null) {         // wrap in a pipeline so we continue routing to the next         return Pipeline.newInstance(context, output, interceptedTarget).     } else {         return output.     } }
false;public;0;4;;@Override public String toString() {     return "intercept[" + (interceptedTarget != null ? interceptedTarget : output) + "]". }
false;public;1;36;;@Override public Processor createProcessor(final RouteContext routeContext) throws Exception {     // create the output processor     Processor output = this.createChildProcessor(routeContext, true).     // add the output as a intercept strategy to the route context so its invoked on each processing step     routeContext.getInterceptStrategies().add(new InterceptStrategy() {          private Processor interceptedTarget.          public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, Processor target, Processor nextTarget) throws Exception {             // store the target we are intercepting             this.interceptedTarget = target.             // remember the target that was intercepted             InterceptReifier.this.definition.getIntercepted().add(interceptedTarget).             if (interceptedTarget != null) {                 // wrap in a pipeline so we continue routing to the next                 return Pipeline.newInstance(context, output, interceptedTarget).             } else {                 return output.             }         }          @Override         public String toString() {             return "intercept[" + (interceptedTarget != null ? interceptedTarget : output) + "]".         }     }).     // remove me from the route so I am not invoked in a regular route path     ((RouteDefinition) routeContext.getRoute()).getOutputs().remove(this).     // and return no processor to invoke next from me     return null. }
