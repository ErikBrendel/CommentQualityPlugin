commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void add(Exchange exchange) {     inflight.put(exchange.getExchangeId(), exchange). }
false;public;1;3;;public void remove(Exchange exchange) {     inflight.remove(exchange.getExchangeId()). }
false;public;2;6;;public void add(Exchange exchange, String routeId) {     AtomicInteger existing = routeCount.get(routeId).     if (existing != null) {         existing.incrementAndGet().     } }
false;public;2;6;;public void remove(Exchange exchange, String routeId) {     AtomicInteger existing = routeCount.get(routeId).     if (existing != null) {         existing.decrementAndGet().     } }
false;public;0;3;;public int size() {     return inflight.size(). }
false;public;1;4;;@Override public void addRoute(String routeId) {     routeCount.putIfAbsent(routeId, new AtomicInteger(0)). }
false;public;1;4;;@Override public void removeRoute(String routeId) {     routeCount.remove(routeId). }
false;public;1;5;;@Override public int size(String routeId) {     AtomicInteger existing = routeCount.get(routeId).     return existing != null ? existing.get() : 0. }
false;public;0;4;;@Override public Collection<InflightExchange> browse() {     return browse(null, -1, false). }
false;public;1;4;;@Override public Collection<InflightExchange> browse(String fromRouteId) {     return browse(fromRouteId, -1, false). }
false;public;2;4;;@Override public Collection<InflightExchange> browse(int limit, boolean sortByLongestDuration) {     return browse(null, limit, sortByLongestDuration). }
false;public;3;32;;@Override public Collection<InflightExchange> browse(String fromRouteId, int limit, boolean sortByLongestDuration) {     Stream<Exchange> values.     if (fromRouteId == null) {         // all values         values = inflight.values().stream().     } else {         // only if route match         values = inflight.values().stream().filter(e -> fromRouteId.equals(e.getFromRouteId())).     }     if (sortByLongestDuration) {         // sort by duration and grab the first         values = values.sorted((e1, e2) -> {             long d1 = getExchangeDuration(e1).             long d2 = getExchangeDuration(e2).             // need the biggest number first             return -1 * Long.compare(d1, d2).         }).     } else {         // else sort by exchange id         values = values.sorted(Comparator.comparing(Exchange::getExchangeId)).     }     if (limit > 0) {         values = values.limit(limit).     }     List<InflightExchange> answer = values.map(InflightExchangeEntry::new).collect(Collectors.toList()).     return Collections.unmodifiableCollection(answer). }
false;public;1;27;;@Override public InflightExchange oldest(String fromRouteId) {     Stream<Exchange> values.     if (fromRouteId == null) {         // all values         values = inflight.values().stream().     } else {         // only if route match         values = inflight.values().stream().filter(e -> fromRouteId.equals(e.getFromRouteId())).     }     // sort by duration and grab the first     Exchange first = values.sorted((e1, e2) -> {         long d1 = getExchangeDuration(e1).         long d2 = getExchangeDuration(e2).         // need the biggest number first         return -1 * Long.compare(d1, d2).     }).findFirst().orElse(null).     if (first != null) {         return new InflightExchangeEntry(first).     } else {         return null.     } }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;10;;@Override protected void doStop() throws Exception {     int count = size().     if (count > 0) {         log.warn("Shutting down while there are still {} inflight exchanges.", count).     } else {         log.debug("Shutting down with no inflight exchanges.").     }     routeCount.clear(). }
false;private,static;1;8;;private static long getExchangeDuration(Exchange exchange) {     long duration = 0.     Date created = exchange.getCreated().     if (created != null) {         duration = System.currentTimeMillis() - created.getTime().     }     return duration. }
false;public;0;4;;@Override public Exchange getExchange() {     return exchange. }
false;public;0;4;;@Override public long getDuration() {     return DefaultInflightRepository.getExchangeDuration(exchange). }
false;public;0;16;;@Override @SuppressWarnings("unchecked") public long getElapsed() {     LinkedList<MessageHistory> list = exchange.getProperty(Exchange.MESSAGE_HISTORY, LinkedList.class).     if (list == null || list.isEmpty()) {         return 0.     }     // get latest entry     MessageHistory history = list.getLast().     if (history != null) {         return history.getElapsed().     } else {         return 0.     } }
false;public;0;16;;@Override @SuppressWarnings("unchecked") public String getNodeId() {     LinkedList<MessageHistory> list = exchange.getProperty(Exchange.MESSAGE_HISTORY, LinkedList.class).     if (list == null || list.isEmpty()) {         return null.     }     // get latest entry     MessageHistory history = list.getLast().     if (history != null) {         return history.getNode().getId().     } else {         return null.     } }
false;public;0;4;;@Override public String getFromRouteId() {     return exchange.getFromRouteId(). }
false;public;0;16;;@Override @SuppressWarnings("unchecked") public String getAtRouteId() {     LinkedList<MessageHistory> list = exchange.getProperty(Exchange.MESSAGE_HISTORY, LinkedList.class).     if (list == null || list.isEmpty()) {         return null.     }     // get latest entry     MessageHistory history = list.getLast().     if (history != null) {         return history.getRouteId().     } else {         return null.     } }
false;public;0;4;;@Override public String toString() {     return "InflightExchangeEntry[exchangeId=" + exchange.getExchangeId() + "]". }
