commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return left + " " + getOperationText() + " " + right. }
false;public;1;3;;public boolean matches(Exchange exchange) {     return matchesReturningFailureMessage(exchange) == null. }
false;public;1;15;;public String matchesReturningFailureMessage(Exchange exchange) {     // we must not store any state, so we can be thread safe     // and thus we offer this method which returns a failure message if     // we did not match     String answer = null.     // must be thread safe and store result in local objects     Object leftValue = left.evaluate(exchange, Object.class).     Object rightValue = right.evaluate(exchange, Object.class).     if (!matches(exchange, leftValue, rightValue)) {         answer = leftValue + " " + getOperator() + " " + rightValue.     }     return answer. }
false;protected,abstract;3;1;;protected abstract boolean matches(Exchange exchange, Object leftValue, Object rightValue).
false;protected,abstract;0;1;;protected abstract String getOperationText().
false;public;0;3;;public Expression getLeft() {     return left. }
false;public;0;3;;public Expression getRight() {     return right. }
false;public;0;3;;public String getOperator() {     return getOperationText(). }
