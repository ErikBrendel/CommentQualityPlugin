commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Returns a value builder for the given header  */ ;// Builder methods // ------------------------------------------------------------------------- /**  * Returns a value builder for the given header  */ public ValueBuilder header(String name) {     Expression exp = new HeaderExpression(name).     return new ValueBuilder(exp). }
true;public;1;4;/**  * Returns a value builder for the given exchange property  */ ;/**  * Returns a value builder for the given exchange property  */ public ValueBuilder exchangeProperty(String name) {     Expression exp = new ExchangePropertyExpression(name).     return new ValueBuilder(exp). }
true;public;0;3;/**  * Returns a predicate and value builder for the inbound body on an exchange  */ ;/**  * Returns a predicate and value builder for the inbound body on an exchange  */ public ValueBuilder body() {     return Builder.body(). }
true;public;1;3;/**  * Returns a predicate and value builder for the inbound message body as a  * specific type  */ ;/**  * Returns a predicate and value builder for the inbound message body as a  * specific type  */ public <T> ValueBuilder bodyAs(Class<T> type) {     return Builder.bodyAs(type). }
true;public;1;3;/**  * Returns a value builder for the given system property  */ ;/**  * Returns a value builder for the given system property  */ public ValueBuilder systemProperty(String name) {     return Builder.systemProperty(name). }
true;public;2;3;/**  * Returns a value builder for the given system property  */ ;/**  * Returns a value builder for the given system property  */ public ValueBuilder systemProperty(String name, String defaultValue) {     return Builder.systemProperty(name, defaultValue). }
true;public;1;3;/**  * Returns a constant expression value builder  */ ;/**  * Returns a constant expression value builder  */ public ValueBuilder constant(Object value) {     return Builder.constant(value). }
true;public;1;4;/**  * Returns a JSonPath expression value builder  */ ;/**  * Returns a JSonPath expression value builder  */ public ValueBuilder jsonpath(String value) {     JsonPathExpression exp = new JsonPathExpression(value).     return new ValueBuilder(exp). }
true;public;2;5;/**  * Returns a JSonPath expression value builder  *  * @param value      The JSonPath expression  * @param resultType The result type that the JSonPath expression will return.  */ ;/**  * Returns a JSonPath expression value builder  *  * @param value      The JSonPath expression  * @param resultType The result type that the JSonPath expression will return.  */ public ValueBuilder jsonpath(String value, Class<?> resultType) {     JsonPathExpression exp = new JsonPathExpression(value).     exp.setResultType(resultType).     return new ValueBuilder(exp). }
true;public;2;3;/**  * Returns a language expression value builder  */ ;/**  * Returns a language expression value builder  */ public ValueBuilder language(String language, String expression) {     return Builder.language(language, expression). }
true;public;1;3;/**  * Returns a simple expression value builder  */ ;/**  * Returns a simple expression value builder  */ public SimpleBuilder simple(String value) {     return SimpleBuilder.simple(value). }
true;public;2;3;/**  * Returns a simple expression value builder  */ ;/**  * Returns a simple expression value builder  */ public SimpleBuilder simple(String value, Class<?> resultType) {     return SimpleBuilder.simple(value, resultType). }
true;public;2;3;/**  * Returns a simple expression value builder, using String.format style  */ ;/**  * Returns a simple expression value builder, using String.format style  */ public SimpleBuilder simpleF(String format, Object... values) {     return SimpleBuilder.simpleF(format, values). }
true;public;3;3;/**  * Returns a simple expression value builder, using String.format style  */ ;/**  * Returns a simple expression value builder, using String.format style  */ public SimpleBuilder simpleF(String format, Class<?> resultType, Object... values) {     return SimpleBuilder.simpleF(format, resultType, values). }
true;public;1;3;/**  * Returns a xpath expression value builder  *  * @param value the XPath expression  * @return the builder  */ ;/**  * Returns a xpath expression value builder  *  * @param value the XPath expression  * @return the builder  */ public XPathBuilder xpath(String value) {     return xpath(value, null). }
true;public;2;9;/**  * Returns a xpath expression value builder  *  * @param value      the XPath expression  * @param resultType the result type that the XPath expression will return.  * @return the builder  */ ;/**  * Returns a xpath expression value builder  *  * @param value      the XPath expression  * @param resultType the result type that the XPath expression will return.  * @return the builder  */ public XPathBuilder xpath(String value, Class<?> resultType) {     // the value may contain property placeholders as it may be used directly from Java DSL     try {         value = getContext().resolvePropertyPlaceholders(value).     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     }     return XPathBuilder.xpath(value, resultType). }
true;public;1;3;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @return the builder  */ public ValueBuilder method(Object beanOrBeanRef) {     return method(beanOrBeanRef, null). }
true;public;2;3;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @param method   name of method to invoke  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @param method   name of method to invoke  * @return the builder  */ public ValueBuilder method(Object beanOrBeanRef, String method) {     return Builder.bean(beanOrBeanRef, method). }
true;public;1;3;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  *  * @param beanType the Class of the bean which we want to invoke  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  *  * @param beanType the Class of the bean which we want to invoke  * @return the builder  */ public ValueBuilder method(Class<?> beanType) {     return Builder.bean(beanType). }
true;public;2;3;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  *  * @param beanType the Class of the bean which we want to invoke  * @param method   name of method to invoke  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">method call expression</a>  * value builder  *  * @param beanType the Class of the bean which we want to invoke  * @param method   name of method to invoke  * @return the builder  */ public ValueBuilder method(Class<?> beanType, String method) {     return Builder.bean(beanType, method). }
true;public;3;3;/**  * Returns an expression value builder that replaces all occurrences of the  * regular expression with the given replacement  */ ;/**  * Returns an expression value builder that replaces all occurrences of the  * regular expression with the given replacement  */ public ValueBuilder regexReplaceAll(Expression content, String regex, String replacement) {     return Builder.regexReplaceAll(content, regex, replacement). }
true;public;3;3;/**  * Returns an expression value builder that replaces all occurrences of the  * regular expression with the given replacement  */ ;/**  * Returns an expression value builder that replaces all occurrences of the  * regular expression with the given replacement  */ public ValueBuilder regexReplaceAll(Expression content, String regex, Expression replacement) {     return Builder.regexReplaceAll(content, regex, replacement). }
true;public;0;3;/**  * Returns a exception expression value builder  */ ;/**  * Returns a exception expression value builder  */ public ValueBuilder exceptionMessage() {     return Builder.exceptionMessage(). }
true;public;1;8;/**  * Resolves the given URI to an endpoint  *  * @param uri  the uri to resolve  * @throws NoSuchEndpointException if the endpoint URI could not be resolved  * @return the endpoint  */ ;/**  * Resolves the given URI to an endpoint  *  * @param uri  the uri to resolve  * @throws NoSuchEndpointException if the endpoint URI could not be resolved  * @return the endpoint  */ public Endpoint endpoint(String uri) throws NoSuchEndpointException {     ObjectHelper.notNull(uri, "uri").     Endpoint endpoint = getContext().getEndpoint(uri).     if (endpoint == null) {         throw new NoSuchEndpointException(uri).     }     return endpoint. }
true;public;2;8;/**  * Resolves the given URI to an endpoint of the specified type  *  * @param uri  the uri to resolve  * @param type the excepted type of the endpoint  * @throws NoSuchEndpointException if the endpoint URI could not be resolved  * @return the endpoint  */ ;/**  * Resolves the given URI to an endpoint of the specified type  *  * @param uri  the uri to resolve  * @param type the excepted type of the endpoint  * @throws NoSuchEndpointException if the endpoint URI could not be resolved  * @return the endpoint  */ public <T extends Endpoint> T endpoint(String uri, Class<T> type) throws NoSuchEndpointException {     ObjectHelper.notNull(uri, "uri").     T endpoint = getContext().getEndpoint(uri, type).     if (endpoint == null) {         throw new NoSuchEndpointException(uri).     }     return endpoint. }
true;public;1;7;/**  * Resolves the list of URIs into a list of {@link Endpoint} instances  *  * @param uris  list of endpoints to resolve  * @throws NoSuchEndpointException if an endpoint URI could not be resolved  * @return list of endpoints  */ ;/**  * Resolves the list of URIs into a list of {@link Endpoint} instances  *  * @param uris  list of endpoints to resolve  * @throws NoSuchEndpointException if an endpoint URI could not be resolved  * @return list of endpoints  */ public List<Endpoint> endpoints(String... uris) throws NoSuchEndpointException {     List<Endpoint> endpoints = new ArrayList<>().     for (String uri : uris) {         endpoints.add(endpoint(uri)).     }     return endpoints. }
true;public;1;5;/**  * Helper method to create a list of {@link Endpoint} instances  *  * @param endpoints  endpoints  * @return list of the given endpoints  */ ;/**  * Helper method to create a list of {@link Endpoint} instances  *  * @param endpoints  endpoints  * @return list of the given endpoints  */ public List<Endpoint> endpoints(Endpoint... endpoints) {     List<Endpoint> answer = new ArrayList<>().     answer.addAll(Arrays.asList(endpoints)).     return answer. }
true;public;0;3;/**  * Creates a default <a href="http://camel.apache.org/error-handler.html">error handler</a>.  *  * @return the builder  */ ;/**  * Creates a default <a href="http://camel.apache.org/error-handler.html">error handler</a>.  *  * @return the builder  */ public DefaultErrorHandlerBuilder defaultErrorHandler() {     return new DefaultErrorHandlerBuilder(). }
true;public;0;3;/**  * Creates a disabled <a href="http://camel.apache.org/error-handler.html">error handler</a>  * for removing the default error handler  *  * @return the builder  */ ;/**  * Creates a disabled <a href="http://camel.apache.org/error-handler.html">error handler</a>  * for removing the default error handler  *  * @return the builder  */ public NoErrorHandlerBuilder noErrorHandler() {     return new NoErrorHandlerBuilder(). }
true;public;1;3;/**  * <a href="http://camel.apache.org/dead-letter-channel.html">Dead Letter Channel EIP:</a>  * is a error handler for handling messages that could not be delivered to it's intended destination.  *  * @param deadLetterUri  uri to the dead letter endpoint storing dead messages  * @return the builder  */ ;/**  * <a href="http://camel.apache.org/dead-letter-channel.html">Dead Letter Channel EIP:</a>  * is a error handler for handling messages that could not be delivered to it's intended destination.  *  * @param deadLetterUri  uri to the dead letter endpoint storing dead messages  * @return the builder  */ public DeadLetterChannelBuilder deadLetterChannel(String deadLetterUri) {     return deadLetterChannel(endpoint(deadLetterUri)). }
true;public;1;3;/**  * <a href="http://camel.apache.org/dead-letter-channel.html">Dead Letter Channel EIP:</a>  * is a error handler for handling messages that could not be delivered to it's intended destination.  *  * @param deadLetterEndpoint  dead letter endpoint storing dead messages  * @return the builder  */ ;/**  * <a href="http://camel.apache.org/dead-letter-channel.html">Dead Letter Channel EIP:</a>  * is a error handler for handling messages that could not be delivered to it's intended destination.  *  * @param deadLetterEndpoint  dead letter endpoint storing dead messages  * @return the builder  */ public DeadLetterChannelBuilder deadLetterChannel(Endpoint deadLetterEndpoint) {     return new DeadLetterChannelBuilder(deadLetterEndpoint). }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public ModelCamelContext getContext() {     return context. }
false;public;1;4;;public void setContext(CamelContext context) {     ObjectHelper.notNull(context, "CamelContext", this).     this.context = context.adapt(ModelCamelContext.class). }
false;public;1;4;;public void setContext(ModelCamelContext context) {     ObjectHelper.notNull(context, "CamelContext", this).     this.context = context. }
false;public;0;6;;public ErrorHandlerBuilder getErrorHandlerBuilder() {     if (errorHandlerBuilder == null) {         errorHandlerBuilder = createErrorHandlerBuilder().     }     return errorHandlerBuilder. }
false;protected;0;3;;protected ErrorHandlerBuilder createErrorHandlerBuilder() {     return new DefaultErrorHandlerBuilder(). }
true;public;1;3;/**  * Sets the error handler to use with processors created by this builder  */ ;/**  * Sets the error handler to use with processors created by this builder  */ public void setErrorHandlerBuilder(ErrorHandlerBuilder errorHandlerBuilder) {     this.errorHandlerBuilder = errorHandlerBuilder. }
