commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static Expression tokenize(String path) {     return tokenize(path, 'i'). }
false;public,static;2;6;;public static Expression tokenize(String path, char mode) {     XMLTokenizeLanguage language = new XMLTokenizeLanguage().     language.setPath(path).     language.setMode(mode).     return language.createExpression(null). }
false;public,static;2;3;;public static Expression tokenize(String headerName, String path) {     return tokenize(headerName, path, 'i'). }
false;public,static;3;7;;public static Expression tokenize(String headerName, String path, char mode) {     XMLTokenizeLanguage language = new XMLTokenizeLanguage().     language.setHeaderName(headerName).     language.setPath(path).     language.setMode(mode).     return language.createExpression(null). }
false;public;1;3;;public Predicate createPredicate(String expression) {     return ExpressionToPredicateAdapter.toPredicate(createExpression(expression)). }
true;public;0;6;/**  * Creates a tokenize expression.  */ ;/**  * Creates a tokenize expression.  */ public Expression createExpression() {     ObjectHelper.notNull(path, "path").     Expression answer = ExpressionBuilder.tokenizeXMLAwareExpression(path, mode).     return answer. }
false;public;1;6;;public Expression createExpression(String expression) {     if (ObjectHelper.isNotEmpty(expression)) {         this.path = expression.     }     return createExpression(). }
false;public;0;3;;public String getPath() {     return path. }
false;public;1;3;;public void setPath(String path) {     this.path = path. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
false;public;1;3;;public void setHeaderName(String headerName) {     this.headerName = headerName. }
false;public;0;3;;public char getMode() {     return mode. }
false;public;1;3;;public void setMode(char mode) {     this.mode = mode. }
false;public;0;3;;public int getGroup() {     return group. }
false;public;1;3;;public void setGroup(int group) {     this.group = group. }
false;public;0;3;;public boolean isSingleton() {     return false. }
