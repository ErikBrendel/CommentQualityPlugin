commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;14;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (getLineLength() != null) {         setProperty(camelContext, dataFormat, "lineLength", getLineLength()).     }     if (getUrlSafe() != null) {         setProperty(camelContext, dataFormat, "urlSafe", getUrlSafe()).     }     if (getLineSeparator() != null) {         // line separator must be a byte[]         byte[] bytes = getLineSeparator().getBytes().         setProperty(camelContext, dataFormat, "lineSeparator", bytes).     } }
false;public;0;3;;public Integer getLineLength() {     return lineLength. }
true;public;1;3;/**  * To specific a maximum line length for the encoded data.  * <p/>  * By default 76 is used.  */ ;/**  * To specific a maximum line length for the encoded data.  * <p/>  * By default 76 is used.  */ public void setLineLength(Integer lineLength) {     this.lineLength = lineLength. }
false;public;0;3;;public String getLineSeparator() {     return lineSeparator. }
true;public;1;3;/**  * The line separators to use.  * <p/>  * Uses new line characters (CRLF) by default.  */ ;/**  * The line separators to use.  * <p/>  * Uses new line characters (CRLF) by default.  */ public void setLineSeparator(String lineSeparator) {     this.lineSeparator = lineSeparator. }
false;public;0;3;;public Boolean getUrlSafe() {     return urlSafe. }
true;public;1;3;/**  * Instead of emitting '+' and '/' we emit '-' and '_' respectively.  * urlSafe is only applied to encode operations. Decoding seamlessly handles both modes.  * Is by default false.  */ ;/**  * Instead of emitting '+' and '/' we emit '-' and '_' respectively.  * urlSafe is only applied to encode operations. Decoding seamlessly handles both modes.  * Is by default false.  */ public void setUrlSafe(Boolean urlSafe) {     this.urlSafe = urlSafe. }
