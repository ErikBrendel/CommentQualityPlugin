commented;modifiers;parameterAmount;loc;comment;code
false;public;1;47;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     Optional<Endpoint> compensationEndpoint = Optional.ofNullable(definition.getCompensation()).map(SagaActionUriDefinition::getUri).map(routeContext::resolveEndpoint).     Optional<Endpoint> completionEndpoint = Optional.ofNullable(definition.getCompletion()).map(SagaActionUriDefinition::getUri).map(routeContext::resolveEndpoint).     Map<String, Expression> optionsMap = new TreeMap<>().     if (definition.getOptions() != null) {         for (SagaOptionDefinition optionDef : definition.getOptions()) {             String optionName = optionDef.getOptionName().             Expression expr = optionDef.getExpression().             optionsMap.put(optionName, expr).         }     }     CamelSagaStep step = new CamelSagaStep(compensationEndpoint, completionEndpoint, optionsMap, Optional.ofNullable(definition.getTimeoutInMilliseconds())).     SagaPropagation propagation = definition.getPropagation().     if (propagation == null) {         // default propagation mode         propagation = SagaPropagation.REQUIRED.     }     SagaCompletionMode completionMode = definition.getCompletionMode().     if (completionMode == null) {         // default completion mode         completionMode = SagaCompletionMode.defaultCompletionMode().     }     Processor childProcessor = this.createChildProcessor(routeContext, true).     CamelSagaService camelSagaService = findSagaService(routeContext.getCamelContext()).     camelSagaService.registerStep(step).     return new SagaProcessorBuilder().camelContext(routeContext.getCamelContext()).childProcessor(childProcessor).sagaService(camelSagaService).step(step).propagation(propagation).completionMode(completionMode).build(). }
false;protected;1;18;;protected CamelSagaService findSagaService(CamelContext context) {     CamelSagaService sagaService = definition.getSagaService().     if (sagaService != null) {         return sagaService.     }     sagaService = context.hasService(CamelSagaService.class).     if (sagaService != null) {         return sagaService.     }     sagaService = CamelContextHelper.findByType(context, CamelSagaService.class).     if (sagaService != null) {         return sagaService.     }     throw new RuntimeCamelException("Cannot find a CamelSagaService"). }
