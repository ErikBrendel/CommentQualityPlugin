commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "DynamicRouter[" + getExpression() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "dynamicRouter". }
false;public;0;4;;@Override public String getLabel() {     return "dynamicRouter[" + getExpression() + "]". }
false;public;0;4;;@Override public List<ProcessorDefinition<?>> getOutputs() {     return Collections.emptyList(). }
true;public;1;5;/**  * Expression to call that returns the endpoint(s) to route to in the dynamic routing.  * <p/>  * <b>Important:</b> The expression will be called in a while loop fashion, until the expression returns <tt>null</tt>  * which means the dynamic router is finished.  */ ;/**  * Expression to call that returns the endpoint(s) to route to in the dynamic routing.  * <p/>  * <b>Important:</b> The expression will be called in a while loop fashion, until the expression returns <tt>null</tt>  * which means the dynamic router is finished.  */ @Override public void setExpression(ExpressionDefinition expression) {     // override to include javadoc what the expression is used for     super.setExpression(expression). }
false;public;1;3;;public void setUriDelimiter(String uriDelimiter) {     this.uriDelimiter = uriDelimiter. }
false;public;0;3;;public String getUriDelimiter() {     return uriDelimiter. }
false;public;1;3;;public void setIgnoreInvalidEndpoints(Boolean ignoreInvalidEndpoints) {     this.ignoreInvalidEndpoints = ignoreInvalidEndpoints. }
false;public;0;3;;public Boolean getIgnoreInvalidEndpoints() {     return ignoreInvalidEndpoints. }
false;public;0;3;;// Fluent API // ------------------------------------------------------------------------- public Integer getCacheSize() {     return cacheSize. }
false;public;1;3;;public void setCacheSize(Integer cacheSize) {     this.cacheSize = cacheSize. }
false;public;0;6;;@Override @SuppressWarnings("unchecked") public Type end() {     // allow end() to return to previous type so you can continue in the DSL     return (Type) super.end(). }
true;public;0;4;/**  * Ignore the invalidate endpoint exception when try to create a producer with that endpoint  *  * @return the builder  */ ;/**  * Ignore the invalidate endpoint exception when try to create a producer with that endpoint  *  * @return the builder  */ public DynamicRouterDefinition<Type> ignoreInvalidEndpoints() {     setIgnoreInvalidEndpoints(true).     return this. }
true;public;1;4;/**  * Sets the uri delimiter to use  *  * @param uriDelimiter the delimiter  * @return the builder  */ ;/**  * Sets the uri delimiter to use  *  * @param uriDelimiter the delimiter  * @return the builder  */ public DynamicRouterDefinition<Type> uriDelimiter(String uriDelimiter) {     setUriDelimiter(uriDelimiter).     return this. }
true;public;1;4;/**  * Sets the maximum size used by the {@link org.apache.camel.spi.ProducerCache} which is used  * to cache and reuse producers when using this dynamic router, when uris are reused.  *  * @param cacheSize  the cache size, use <tt>0</tt> for default cache size, or <tt>-1</tt> to turn cache off.  * @return the builder  */ ;/**  * Sets the maximum size used by the {@link org.apache.camel.spi.ProducerCache} which is used  * to cache and reuse producers when using this dynamic router, when uris are reused.  *  * @param cacheSize  the cache size, use <tt>0</tt> for default cache size, or <tt>-1</tt> to turn cache off.  * @return the builder  */ public DynamicRouterDefinition<Type> cacheSize(int cacheSize) {     setCacheSize(cacheSize).     return this. }
