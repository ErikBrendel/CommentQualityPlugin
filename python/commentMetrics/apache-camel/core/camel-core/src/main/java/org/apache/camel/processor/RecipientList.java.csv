commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "RecipientList[" + (expression != null ? expression : "") + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;2;14;;public boolean process(Exchange exchange, AsyncCallback callback) {     if (!isStarted()) {         throw new IllegalStateException("RecipientList has not been started: " + this).     }     // use the evaluate expression result if exists     Object recipientList = exchange.removeProperty(Exchange.EVALUATE_EXPRESSION_RESULT).     if (recipientList == null && expression != null) {         // fallback and evaluate the expression         recipientList = expression.evaluate(exchange, Object.class).     }     return sendToRecipientList(exchange, recipientList, callback). }
false;protected,synchronized;1;8;;@Override protected synchronized ExecutorService createAggregateExecutorService(String name) {     // use a shared executor service to avoid creating new thread pools     if (aggregateExecutorService == null) {         aggregateExecutorService = super.createAggregateExecutorService("RecipientList-AggregateTask").     }     return aggregateExecutorService. }
true;public;3;36;/**  * Sends the given exchange to the recipient list  */ ;/**  * Sends the given exchange to the recipient list  */ public boolean sendToRecipientList(Exchange exchange, Object recipientList, AsyncCallback callback) {     Iterator<?> iter.     if (delimiter != null && delimiter.equalsIgnoreCase(IGNORE_DELIMITER_MARKER)) {         iter = ObjectHelper.createIterator(recipientList, null).     } else {         iter = ObjectHelper.createIterator(recipientList, delimiter).     }     RecipientListProcessor rlp = new RecipientListProcessor(exchange.getContext(), producerCache, iter, getAggregationStrategy(), isParallelProcessing(), getExecutorService(), isShutdownExecutorService(), isStreaming(), isStopOnException(), getTimeout(), getOnPrepare(), isShareUnitOfWork(), isParallelAggregate(), isStopOnAggregateException()) {          @Override         protected synchronized ExecutorService createAggregateExecutorService(String name) {             // use a shared executor service to avoid creating new thread pools             if (aggregateExecutorService == null) {                 aggregateExecutorService = super.createAggregateExecutorService("RecipientList-AggregateTask").             }             return aggregateExecutorService.         }     }.     rlp.setIgnoreInvalidEndpoints(isIgnoreInvalidEndpoints()).     // start the service     try {         ServiceHelper.startService(rlp).     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     }     // now let the multicast process the exchange     return rlp.process(exchange, callback). }
false;protected;2;7;;protected Endpoint resolveEndpoint(Exchange exchange, Object recipient) {     // trim strings as end users might have added spaces between separators     if (recipient instanceof String) {         recipient = ((String) recipient).trim().     }     return ExchangeHelper.resolveEndpoint(exchange, recipient). }
false;public;0;3;;public EndpointUtilizationStatistics getEndpointUtilizationStatistics() {     return producerCache.getEndpointUtilizationStatistics(). }
false;protected;0;7;;protected void doStart() throws Exception {     if (producerCache == null) {         producerCache = new DefaultProducerCache(this, camelContext, cacheSize).         log.debug("RecipientList {} using ProducerCache with cacheSize={}", this, producerCache.getCapacity()).     }     ServiceHelper.startService(aggregationStrategy, producerCache). }
false;protected;0;3;;protected void doStop() throws Exception {     ServiceHelper.stopService(producerCache, aggregationStrategy). }
false;protected;0;7;;protected void doShutdown() throws Exception {     ServiceHelper.stopAndShutdownServices(producerCache, aggregationStrategy).     if (shutdownExecutorService && executorService != null) {         camelContext.getExecutorServiceManager().shutdownNow(executorService).     } }
false;public;0;3;;public Expression getExpression() {     return expression. }
false;public;0;3;;public String getDelimiter() {     return delimiter. }
false;public;0;3;;public boolean isStreaming() {     return streaming. }
false;public;1;3;;public void setStreaming(boolean streaming) {     this.streaming = streaming. }
false;public;0;3;;public boolean isIgnoreInvalidEndpoints() {     return ignoreInvalidEndpoints. }
false;public;1;3;;public void setIgnoreInvalidEndpoints(boolean ignoreInvalidEndpoints) {     this.ignoreInvalidEndpoints = ignoreInvalidEndpoints. }
false;public;0;3;;public boolean isParallelProcessing() {     return parallelProcessing. }
false;public;1;3;;public void setParallelProcessing(boolean parallelProcessing) {     this.parallelProcessing = parallelProcessing. }
false;public;0;3;;public boolean isParallelAggregate() {     return parallelAggregate. }
false;public;1;3;;public void setParallelAggregate(boolean parallelAggregate) {     this.parallelAggregate = parallelAggregate. }
false;public;0;3;;public boolean isStopOnAggregateException() {     return stopOnAggregateException. }
false;public;1;3;;public void setStopOnAggregateException(boolean stopOnAggregateException) {     this.stopOnAggregateException = stopOnAggregateException. }
false;public;0;3;;public boolean isStopOnException() {     return stopOnException. }
false;public;1;3;;public void setStopOnException(boolean stopOnException) {     this.stopOnException = stopOnException. }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executorService = executorService. }
false;public;0;3;;public boolean isShutdownExecutorService() {     return shutdownExecutorService. }
false;public;1;3;;public void setShutdownExecutorService(boolean shutdownExecutorService) {     this.shutdownExecutorService = shutdownExecutorService. }
false;public;0;3;;public AggregationStrategy getAggregationStrategy() {     return aggregationStrategy. }
false;public;1;3;;public void setAggregationStrategy(AggregationStrategy aggregationStrategy) {     this.aggregationStrategy = aggregationStrategy. }
false;public;0;3;;public long getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(long timeout) {     this.timeout = timeout. }
false;public;0;3;;public Processor getOnPrepare() {     return onPrepare. }
false;public;1;3;;public void setOnPrepare(Processor onPrepare) {     this.onPrepare = onPrepare. }
false;public;0;3;;public boolean isShareUnitOfWork() {     return shareUnitOfWork. }
false;public;1;3;;public void setShareUnitOfWork(boolean shareUnitOfWork) {     this.shareUnitOfWork = shareUnitOfWork. }
false;public;0;3;;public int getCacheSize() {     return cacheSize. }
false;public;1;3;;public void setCacheSize(int cacheSize) {     this.cacheSize = cacheSize. }
