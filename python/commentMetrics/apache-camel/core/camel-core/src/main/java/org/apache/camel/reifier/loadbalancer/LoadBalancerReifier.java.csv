commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static LoadBalancerReifier<? extends LoadBalancerDefinition> reifier(LoadBalancerDefinition definition) {     Function<LoadBalancerDefinition, LoadBalancerReifier<? extends LoadBalancerDefinition>> reifier = LOAD_BALANCERS.get(definition.getClass()).     if (reifier != null) {         return reifier.apply(definition).     }     throw new IllegalStateException("Unsupported definition: " + definition). }
true;public;1;16;/**  * Factory method to create the load balancer from the loadBalancerTypeName  */ ;/**  * Factory method to create the load balancer from the loadBalancerTypeName  */ public LoadBalancer createLoadBalancer(RouteContext routeContext) {     String loadBalancerTypeName = definition.getLoadBalancerTypeName().     StringHelper.notEmpty(loadBalancerTypeName, "loadBalancerTypeName", this).     LoadBalancer answer = null.     if (loadBalancerTypeName != null) {         Class<?> type = routeContext.getCamelContext().getClassResolver().resolveClass(loadBalancerTypeName, LoadBalancer.class).         if (type == null) {             throw new IllegalArgumentException("Cannot find class: " + loadBalancerTypeName + " in the classpath").         }         answer = (LoadBalancer) routeContext.getCamelContext().getInjector().newInstance(type).         definition.configureLoadBalancer(answer).     }     return answer. }
