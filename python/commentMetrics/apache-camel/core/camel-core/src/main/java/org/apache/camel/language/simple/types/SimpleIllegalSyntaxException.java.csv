commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Index where the parsing error occurred  *  * @return index of the parsing error in the input, returns <tt>-1</tt> if the cause of the problem  * is not applicable to specific index in the input  */ ;/**  * Index where the parsing error occurred  *  * @return index of the parsing error in the input, returns <tt>-1</tt> if the cause of the problem  * is not applicable to specific index in the input  */ public int getIndex() {     return index. }
true;public;0;6;/**  * Gets a short error message.  */ ;/**  * Gets a short error message.  */ public String getShortMessage() {     if (message == null) {         return "[null]".     }     return message. }
false;public;0;18;;@Override public String getMessage() {     if (message == null) {         return "[null]".     }     StringBuilder sb = new StringBuilder(message).     if (index > -1) {         sb.append(" at location ").append(index).         // create a nice looking message with indicator where the problem is         sb.append("\n").append(getExpression()).append("\n").         for (int i = 0. i < index. i++) {             sb.append(" ").         }         sb.append("*\n").     }     return sb.toString(). }
