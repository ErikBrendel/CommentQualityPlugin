commented;modifiers;parameterAmount;loc;comment;code
false;public;2;8;;@Override public void addErrorHandlers(RouteContext routeContext, OnExceptionDefinition exception) {     ErrorHandlerBuilder handler = handlers.get(routeContext).     if (handler != null) {         handler.addErrorHandlers(routeContext, exception).     }     super.addErrorHandlers(routeContext, exception). }
false;public;1;10;;@Override public boolean removeOnExceptionList(String id) {     for (RouteContext routeContext : handlers.keySet()) {         if (getRouteId(routeContext).equals(id)) {             handlers.remove(routeContext).             break.         }     }     return super.removeOnExceptionList(id). }
false;public;2;8;;public Processor createErrorHandler(RouteContext routeContext, Processor processor) throws Exception {     ErrorHandlerBuilder handler = handlers.get(routeContext).     if (handler == null) {         handler = createErrorHandler(routeContext).         handlers.put(routeContext, handler).     }     return handler.createErrorHandler(routeContext, processor). }
false;public;0;3;;public boolean supportTransacted() {     return supportTransacted. }
false;public;0;6;;@Override public ErrorHandlerBuilder cloneBuilder() {     ErrorHandlerBuilderRef answer = new ErrorHandlerBuilderRef(ref).     cloneBuilder(answer).     return answer. }
false;protected;1;7;;protected void cloneBuilder(ErrorHandlerBuilderRef other) {     super.cloneBuilder(other).     // no need to copy the handlers     other.supportTransacted = supportTransacted. }
true;public,static;2;3;/**  * Lookup the error handler by the given ref  *  * @param routeContext the route context  * @param ref          reference id for the error handler  * @return the error handler  */ ;/**  * Lookup the error handler by the given ref  *  * @param routeContext the route context  * @param ref          reference id for the error handler  * @return the error handler  */ public static ErrorHandlerFactory lookupErrorHandlerBuilder(RouteContext routeContext, String ref) {     return lookupErrorHandlerBuilder(routeContext, ref, true). }
true;public,static;3;46;/**  * Lookup the error handler by the given ref  *  * @param routeContext the route context  * @param ref          reference id for the error handler  * @param mandatory    whether the error handler must exists, if not a {@link org.apache.camel.NoSuchBeanException} is thrown  * @return the error handler  */ ;/**  * Lookup the error handler by the given ref  *  * @param routeContext the route context  * @param ref          reference id for the error handler  * @param mandatory    whether the error handler must exists, if not a {@link org.apache.camel.NoSuchBeanException} is thrown  * @return the error handler  */ public static ErrorHandlerFactory lookupErrorHandlerBuilder(RouteContext routeContext, String ref, boolean mandatory) {     ErrorHandlerFactory answer.     // the transacted error handler could have been configured on the route so we should use that one     if (!isErrorHandlerBuilderConfigured(ref)) {         // see if there has been configured a route builder on the route         RouteDefinition route = (RouteDefinition) routeContext.getRoute().         answer = route.getErrorHandlerBuilder().         if (answer == null && route.getErrorHandlerRef() != null) {             answer = routeContext.lookup(route.getErrorHandlerRef(), ErrorHandlerBuilder.class).         }         if (answer == null) {             // fallback to the default error handler if none configured on the route             answer = new DefaultErrorHandlerBuilder().         }         // check if its also a ref with no error handler configuration like me         if (answer instanceof ErrorHandlerBuilderRef) {             ErrorHandlerBuilderRef other = (ErrorHandlerBuilderRef) answer.             String otherRef = other.getRef().             if (!isErrorHandlerBuilderConfigured(otherRef)) {                 // the other has also no explicit error handler configured then fallback to the handler                 // configured on the parent camel context                 answer = lookupErrorHandlerBuilder((ModelCamelContext) routeContext.getCamelContext()).             }             if (answer == null) {                 // the other has also no explicit error handler configured then fallback to the default error handler                 // otherwise we could recursive loop forever (triggered by createErrorHandler method)                 answer = new DefaultErrorHandlerBuilder().             }             // inherit the error handlers from the other as they are to be shared             // this is needed by camel-spring when none error handler has been explicit configured             ((ErrorHandlerBuilder) answer).setErrorHandlers(routeContext, other.getErrorHandlers(routeContext)).         }     } else {         // use specific configured error handler         if (mandatory) {             answer = routeContext.mandatoryLookup(ref, ErrorHandlerBuilder.class).         } else {             answer = routeContext.lookup(ref, ErrorHandlerBuilder.class).         }     }     return answer. }
false;protected,static;1;15;;protected static ErrorHandlerFactory lookupErrorHandlerBuilder(ModelCamelContext camelContext) {     ErrorHandlerFactory answer = camelContext.getErrorHandlerFactory().     if (answer instanceof ErrorHandlerBuilderRef) {         ErrorHandlerBuilderRef other = (ErrorHandlerBuilderRef) answer.         String otherRef = other.getRef().         if (isErrorHandlerBuilderConfigured(otherRef)) {             answer = camelContext.getRegistry().lookupByNameAndType(otherRef, ErrorHandlerBuilder.class).             if (answer == null) {                 throw new IllegalArgumentException("ErrorHandlerBuilder with id " + otherRef + " not found in registry.").             }         }     }     return answer. }
true;public,static;1;3;/**  * Returns whether a specific error handler builder has been configured or not.  * <p/>  * Can be used to test if none has been configured and then install a custom error handler builder  * replacing the default error handler (that would have been used as fallback otherwise).  * <br/>  * This is for instance used by the transacted policy to setup a TransactedErrorHandlerBuilder  * in camel-spring.  */ ;/**  * Returns whether a specific error handler builder has been configured or not.  * <p/>  * Can be used to test if none has been configured and then install a custom error handler builder  * replacing the default error handler (that would have been used as fallback otherwise).  * <br/>  * This is for instance used by the transacted policy to setup a TransactedErrorHandlerBuilder  * in camel-spring.  */ public static boolean isErrorHandlerBuilderConfigured(String ref) {     return !DEFAULT_ERROR_HANDLER_BUILDER.equals(ref). }
false;public;0;3;;public String getRef() {     return ref. }
false;private;1;15;;private ErrorHandlerBuilder createErrorHandler(RouteContext routeContext) {     ErrorHandlerBuilder handler = (ErrorHandlerBuilder) lookupErrorHandlerBuilder(routeContext, getRef()).     ObjectHelper.notNull(handler, "error handler '" + ref + "'").     // configure if the handler support transacted     supportTransacted = handler.supportTransacted().     List<OnExceptionDefinition> list = getErrorHandlers(routeContext).     if (list != null) {         for (OnExceptionDefinition exceptionType : list) {             handler.addErrorHandlers(routeContext, exceptionType).         }     }     return handler. }
false;public;0;4;;@Override public String toString() {     return "ErrorHandlerBuilderRef[" + ref + "]". }
