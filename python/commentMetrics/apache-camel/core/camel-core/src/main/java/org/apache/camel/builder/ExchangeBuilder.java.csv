commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Create the exchange by setting the camel context  *  * @param context the camel context  * @return exchange builder  */ ;/**  * Create the exchange by setting the camel context  *  * @param context the camel context  * @return exchange builder  */ public static ExchangeBuilder anExchange(CamelContext context) {     return new ExchangeBuilder(context). }
true;public;1;4;/**  * Set the in message body on the exchange  *  * @param body the body  * @return exchange builder  */ ;/**  * Set the in message body on the exchange  *  * @param body the body  * @return exchange builder  */ public ExchangeBuilder withBody(Object body) {     this.body = body.     return this. }
true;public;2;4;/**  * Set the message header of the in message on the exchange  *  * @param key the key of the header  * @param value the value of the header  * @return exchange builder  */ ;/**  * Set the message header of the in message on the exchange  *  * @param key the key of the header  * @param value the value of the header  * @return exchange builder  */ public ExchangeBuilder withHeader(String key, Object value) {     headers.put(key, value).     return this. }
true;public;1;4;/**  * Set the message exchange pattern on the exchange  *  * @param pattern exchange pattern  * @return exchange builder  */ ;/**  * Set the message exchange pattern on the exchange  *  * @param pattern exchange pattern  * @return exchange builder  */ public ExchangeBuilder withPattern(ExchangePattern pattern) {     this.pattern = pattern.     return this. }
true;public;2;4;/**  * Set the exchange property  *  * @param key the key of the exchange property  * @param value the value of the exchange property  * @return exchange builder  */ ;/**  * Set the exchange property  *  * @param key the key of the exchange property  * @param value the value of the exchange property  * @return exchange builder  */ public ExchangeBuilder withProperty(String key, Object value) {     properties.put(key, value).     return this. }
true;public;0;17;/**  * Build up the exchange from the exchange builder  *  * @return exchange  */ ;/**  * Build up the exchange from the exchange builder  *  * @return exchange  */ public Exchange build() {     Exchange exchange = new DefaultExchange(context).     Message message = exchange.getIn().     message.setBody(body).     if (headers.size() > 0) {         message.setHeaders(headers).     }     // setup the properties on the exchange     for (Map.Entry<String, Object> entry : properties.entrySet()) {         exchange.setProperty(entry.getKey(), entry.getValue()).     }     if (pattern != null) {         exchange.setPattern(pattern).     }     return exchange. }
