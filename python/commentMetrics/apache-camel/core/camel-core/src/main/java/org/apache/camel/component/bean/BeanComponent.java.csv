commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;11;// ----------------------------------------------------------------------- ;// Implementation methods // ----------------------------------------------------------------------- protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     BeanEndpoint endpoint = new BeanEndpoint(uri, this).     endpoint.setBeanName(remaining).     endpoint.setCache(cache).     setProperties(endpoint, parameters).     // the bean.xxx options is for the bean     Map<String, Object> options = IntrospectionSupport.extractProperties(parameters, "bean.").     endpoint.setParameters(options).     return endpoint. }
false;;1;3;;BeanInfo getBeanInfoFromCache(BeanInfoCacheKey key) {     return beanInfoCache.get(key). }
false;;2;3;;void addBeanInfoToCache(BeanInfoCacheKey key, BeanInfo beanInfo) {     beanInfoCache.put(key, beanInfo). }
false;protected;0;8;;@Override protected void doShutdown() throws Exception {     if (log.isDebugEnabled() && beanInfoCache instanceof LRUCache) {         LRUCache cache = (LRUCache) this.beanInfoCache.         log.debug("Clearing BeanInfo cache[size={}, hits={}, misses={}, evicted={}]", cache.size(), cache.getHits(), cache.getMisses(), cache.getEvicted()).     }     beanInfoCache.clear(). }
false;public;0;3;;public Boolean getCache() {     return cache. }
true;public;1;3;/**  * If enabled, Camel will cache the result of the first Registry look-up.  * Cache can be enabled if the bean in the Registry is defined as a singleton scope.  */ ;/**  * If enabled, Camel will cache the result of the first Registry look-up.  * Cache can be enabled if the bean in the Registry is defined as a singleton scope.  */ public void setCache(Boolean cache) {     this.cache = cache. }
