commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public String getId() {     return id. }
false;public;1;4;;@Override public void setId(String id) {     this.id = id. }
false;public;0;3;;public String getOperation() {     return operation. }
false;public;1;3;;public void setOperation(String operation) {     this.operation = operation. }
false;public;0;3;;public AggregationStrategy getAggregationStrategy() {     return aggregationStrategy. }
false;public;1;3;;public void setAggregationStrategy(AggregationStrategy aggregationStrategy) {     this.aggregationStrategy = aggregationStrategy. }
false;public;0;3;;public String getKey() {     return key. }
false;public;1;3;;public void setKey(String key) {     this.key = key. }
false;public;0;3;;public String getFilter() {     return filter. }
false;public;1;3;;public void setFilter(String filter) {     this.filter = filter. }
false;public;2;63;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     // the repository is scoped per exchange     ClaimCheckRepository repo = exchange.getProperty(Exchange.CLAIM_CHECK_REPOSITORY, ClaimCheckRepository.class).     if (repo == null) {         repo = new DefaultClaimCheckRepository().         exchange.setProperty(Exchange.CLAIM_CHECK_REPOSITORY, repo).     }     try {         if ("Set".equals(operation)) {             // copy exchange, and do not share the unit of work             Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, false).             boolean addedNew = repo.add(key, copy).             if (addedNew) {                 log.debug("Add: {} -> {}", key, copy).             } else {                 log.debug("Override: {} -> {}", key, copy).             }         } else if ("Get".equals(operation)) {             Exchange copy = repo.get(key).             log.debug("Get: {} -> {}", key, exchange).             if (copy != null) {                 Exchange result = aggregationStrategy.aggregate(exchange, copy).                 if (result != null) {                     ExchangeHelper.copyResultsPreservePattern(exchange, result).                 }             }         } else if ("GetAndRemove".equals(operation)) {             Exchange copy = repo.getAndRemove(key).             log.debug("GetAndRemove: {} -> {}", key, exchange).             if (copy != null) {                 // prepare the exchanges for aggregation                 ExchangeHelper.prepareAggregation(exchange, copy).                 Exchange result = aggregationStrategy.aggregate(exchange, copy).                 if (result != null) {                     ExchangeHelper.copyResultsPreservePattern(exchange, result).                 }             }         } else if ("Push".equals(operation)) {             // copy exchange, and do not share the unit of work             Exchange copy = ExchangeHelper.createCorrelatedCopy(exchange, false).             log.debug("Push: {} -> {}", key, copy).             repo.push(copy).         } else if ("Pop".equals(operation)) {             Exchange copy = repo.pop().             log.debug("Pop: {} -> {}", key, exchange).             if (copy != null) {                 // prepare the exchanges for aggregation                 ExchangeHelper.prepareAggregation(exchange, copy).                 Exchange result = aggregationStrategy.aggregate(exchange, copy).                 if (result != null) {                     ExchangeHelper.copyResultsPreservePattern(exchange, result).                 }             }         }     } catch (Throwable e) {         exchange.setException(e).     }     callback.done(true).     return true. }
false;protected;0;13;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(operation, "operation", this).     if (aggregationStrategy == null) {         aggregationStrategy = createAggregationStrategy().     }     if (aggregationStrategy instanceof CamelContextAware) {         ((CamelContextAware) aggregationStrategy).setCamelContext(camelContext).     }     ServiceHelper.startService(aggregationStrategy). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(aggregationStrategy). }
false;public;0;4;;@Override public String toString() {     return "ClaimCheck[" + operation + "]". }
false;protected;0;5;;protected AggregationStrategy createAggregationStrategy() {     ClaimCheckAggregationStrategy answer = new ClaimCheckAggregationStrategy().     answer.setFilter(filter).     return answer. }
