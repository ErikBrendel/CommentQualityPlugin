commented;modifiers;parameterAmount;loc;comment;code
true;public;1;5;/**  * Process invoked by the interceptor  * @param exchange the message exchange  * @throws Exception  */ ;/**  * Process invoked by the interceptor  * @param exchange the message exchange  * @throws Exception  */ public void process(Exchange exchange) throws Exception {     // invoke when interceptor wants to invoke     boolean done = interceptor.process(exchange, callback.get()).     interceptorDone.set(done). }
false;public;2;19;;public boolean process(Exchange exchange, AsyncCallback callback) {     // remember the callback to be used by the interceptor     this.callback.set(callback).     try {         // invoke the target         boolean done = target.process(exchange, callback).         if (interceptorDone.get() != null) {             // return the result from the interceptor if it was invoked             return interceptorDone.get().         } else {             // otherwise from the target             return done.         }     } finally {         // cleanup         this.callback.remove().         this.interceptorDone.remove().     } }
false;public;1;6;;@Override public CompletableFuture<Exchange> processAsync(Exchange exchange) {     AsyncCallbackToCompletableFutureAdapter<Exchange> callback = new AsyncCallbackToCompletableFutureAdapter<>(exchange).     process(exchange, callback).     return callback.getFuture(). }
false;public;1;3;;public void setTarget(Processor target) {     this.target = AsyncProcessorConverterHelper.convert(target). }
false;public;0;4;;@Override public String toString() {     return "AsyncBridge[" + interceptor.toString() + "]". }
false;protected;0;4;;@Override protected void doStart() throws Exception {     ServiceHelper.startService(target, interceptor). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     callback.remove().     interceptorDone.remove().     ServiceHelper.stopService(interceptor, target). }
