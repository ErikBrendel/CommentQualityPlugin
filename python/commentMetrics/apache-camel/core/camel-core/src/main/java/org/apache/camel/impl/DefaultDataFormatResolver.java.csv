commented;modifiers;parameterAmount;loc;comment;code
false;public;2;13;;@Override public DataFormat resolveDataFormat(String name, CamelContext context) {     // lookup in registry first     DataFormat dataFormat = ResolverHelper.lookupDataFormatInRegistryWithFallback(context, name).     if (dataFormat == null) {         // If not found in the registry, try to create a new instance using         // a DataFormatFactory or from resources         dataFormat = createDataFormat(name, context).     }     return dataFormat. }
false;public;2;16;;@Override public DataFormat createDataFormat(String name, CamelContext context) {     DataFormat dataFormat = null.     // lookup in registry first     DataFormatFactory dataFormatFactory = ResolverHelper.lookupDataFormatFactoryInRegistryWithFallback(context, name).     if (dataFormatFactory != null) {         dataFormat = dataFormatFactory.newInstance().     }     if (dataFormat == null) {         dataFormat = createDataFormatFromResource(name, context).     }     return dataFormat. }
false;private;2;29;;private DataFormat createDataFormatFromResource(String name, CamelContext context) {     DataFormat dataFormat = null.     Class<?> type = null.     try {         if (dataformatFactory == null) {             dataformatFactory = context.getFactoryFinder(DATAFORMAT_RESOURCE_PATH).         }         type = dataformatFactory.findClass(name).     } catch (NoFactoryAvailableException e) {     // ignore     } catch (Exception e) {         throw new IllegalArgumentException("Invalid URI, no DataFormat registered for scheme: " + name, e).     }     if (type == null) {         type = context.getClassResolver().resolveClass(name).     }     if (type != null) {         if (DataFormat.class.isAssignableFrom(type)) {             dataFormat = (DataFormat) context.getInjector().newInstance(type).         } else {             throw new IllegalArgumentException("Resolving dataformat: " + name + " detected type conflict: Not a DataFormat implementation. Found: " + type.getName()).         }     }     return dataFormat. }
