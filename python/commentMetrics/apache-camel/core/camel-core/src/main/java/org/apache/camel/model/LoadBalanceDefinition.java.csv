commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public List<ProcessorDefinition<?>> getOutputs() {     return outputs. }
false;public;1;8;;public void setOutputs(List<ProcessorDefinition<?>> outputs) {     this.outputs = outputs.     if (outputs != null) {         for (ProcessorDefinition<?> output : outputs) {             configureChild(output).         }     } }
false;public;0;3;;public boolean isOutputSupported() {     return true. }
false;public;0;3;;public LoadBalancerDefinition getLoadBalancerType() {     return loadBalancerType. }
true;public;1;6;/**  * The load balancer to be used  */ ;/**  * The load balancer to be used  */ public void setLoadBalancerType(LoadBalancerDefinition loadbalancer) {     if (loadBalancerType != null) {         throw new IllegalArgumentException("Loadbalancer already configured to: " + loadBalancerType + ". Cannot set it to: " + loadbalancer).     }     loadBalancerType = loadbalancer. }
true;public;1;6;/**  * Uses a custom load balancer  *  * @param loadBalancer  the load balancer  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Uses a custom load balancer  *  * @param loadBalancer  the load balancer  * @return the builder  */ public LoadBalanceDefinition loadBalance(LoadBalancer loadBalancer) {     CustomLoadBalancerDefinition def = new CustomLoadBalancerDefinition().     def.setCustomLoadBalancer(loadBalancer).     setLoadBalancerType(def).     return this. }
true;public;0;3;/**  * Uses fail over load balancer  * <p/>  * Will not round robin and inherit the error handler.  *  * @return the builder  */ ;/**  * Uses fail over load balancer  * <p/>  * Will not round robin and inherit the error handler.  *  * @return the builder  */ public LoadBalanceDefinition failover() {     return failover(-1, true, false). }
true;public;1;3;/**  * Uses fail over load balancer  * <p/>  * Will not round robin and inherit the error handler.  *  * @param exceptions exception classes which we want to failover if one of them was thrown  * @return the builder  */ ;/**  * Uses fail over load balancer  * <p/>  * Will not round robin and inherit the error handler.  *  * @param exceptions exception classes which we want to failover if one of them was thrown  * @return the builder  */ public LoadBalanceDefinition failover(Class<?>... exceptions) {     return failover(-1, true, false, exceptions). }
true;public;4;3;/**  * Uses fail over load balancer  *  * @param maximumFailoverAttempts  maximum number of failover attempts before exhausting.  *                                 Use -1 to newer exhaust when round robin is also enabled.  *                                 If round robin is disabled then it will exhaust when there are no more endpoints to failover  * @param inheritErrorHandler      whether or not to inherit error handler.  *                                 If <tt>false</tt> then it will failover immediately in case of an exception  * @param roundRobin               whether or not to use round robin (which keeps state)  * @param exceptions               exception classes which we want to failover if one of them was thrown  * @return the builder  */ ;/**  * Uses fail over load balancer  *  * @param maximumFailoverAttempts  maximum number of failover attempts before exhausting.  *                                 Use -1 to newer exhaust when round robin is also enabled.  *                                 If round robin is disabled then it will exhaust when there are no more endpoints to failover  * @param inheritErrorHandler      whether or not to inherit error handler.  *                                 If <tt>false</tt> then it will failover immediately in case of an exception  * @param roundRobin               whether or not to use round robin (which keeps state)  * @param exceptions               exception classes which we want to failover if one of them was thrown  * @return the builder  */ public LoadBalanceDefinition failover(int maximumFailoverAttempts, boolean inheritErrorHandler, boolean roundRobin, Class<?>... exceptions) {     return failover(maximumFailoverAttempts, inheritErrorHandler, roundRobin, false, exceptions). }
true;public;5;10;/**  * Uses fail over load balancer  *  * @param maximumFailoverAttempts  maximum number of failover attempts before exhausting.  *                                 Use -1 to newer exhaust when round robin is also enabled.  *                                 If round robin is disabled then it will exhaust when there are no more endpoints to failover  * @param inheritErrorHandler      whether or not to inherit error handler.  *                                 If <tt>false</tt> then it will failover immediately in case of an exception  * @param roundRobin               whether or not to use round robin (which keeps state)  * @param sticky                   whether or not to use sticky (which keeps state)  * @param exceptions               exception classes which we want to failover if one of them was thrown  * @return the builder  */ ;/**  * Uses fail over load balancer  *  * @param maximumFailoverAttempts  maximum number of failover attempts before exhausting.  *                                 Use -1 to newer exhaust when round robin is also enabled.  *                                 If round robin is disabled then it will exhaust when there are no more endpoints to failover  * @param inheritErrorHandler      whether or not to inherit error handler.  *                                 If <tt>false</tt> then it will failover immediately in case of an exception  * @param roundRobin               whether or not to use round robin (which keeps state)  * @param sticky                   whether or not to use sticky (which keeps state)  * @param exceptions               exception classes which we want to failover if one of them was thrown  * @return the builder  */ public LoadBalanceDefinition failover(int maximumFailoverAttempts, boolean inheritErrorHandler, boolean roundRobin, boolean sticky, Class<?>... exceptions) {     FailoverLoadBalancerDefinition def = new FailoverLoadBalancerDefinition().     def.setExceptionTypes(Arrays.asList(exceptions)).     def.setMaximumFailoverAttempts(maximumFailoverAttempts).     def.setRoundRobin(roundRobin).     def.setSticky(sticky).     setLoadBalancerType(def).     this.setInheritErrorHandler(inheritErrorHandler).     return this. }
true;public;2;3;/**  * Uses weighted load balancer  *  * @param roundRobin                   used to set the processor selection algorithm.  * @param distributionRatio            String of weighted ratios for distribution of messages.  * @return the builder  */ ;/**  * Uses weighted load balancer  *  * @param roundRobin                   used to set the processor selection algorithm.  * @param distributionRatio            String of weighted ratios for distribution of messages.  * @return the builder  */ public LoadBalanceDefinition weighted(boolean roundRobin, String distributionRatio) {     return weighted(roundRobin, distributionRatio, ","). }
true;public;3;8;/**  * Uses weighted load balancer  *  * @param roundRobin                   used to set the processor selection algorithm.  * @param distributionRatio            String of weighted ratios for distribution of messages.  * @param distributionRatioDelimiter   String containing delimiter to be used for ratios  * @return the builder  */ ;/**  * Uses weighted load balancer  *  * @param roundRobin                   used to set the processor selection algorithm.  * @param distributionRatio            String of weighted ratios for distribution of messages.  * @param distributionRatioDelimiter   String containing delimiter to be used for ratios  * @return the builder  */ public LoadBalanceDefinition weighted(boolean roundRobin, String distributionRatio, String distributionRatioDelimiter) {     WeightedLoadBalancerDefinition def = new WeightedLoadBalancerDefinition().     def.setRoundRobin(roundRobin).     def.setDistributionRatio(distributionRatio).     def.setDistributionRatioDelimiter(distributionRatioDelimiter).     setLoadBalancerType(def).     return this. }
true;public;0;4;/**  * Uses round robin load balancer  *  * @return the builder  */ ;/**  * Uses round robin load balancer  *  * @return the builder  */ public LoadBalanceDefinition roundRobin() {     setLoadBalancerType(new RoundRobinLoadBalancerDefinition()).     return this. }
true;public;0;4;/**  * Uses random load balancer  *  * @return the builder  */ ;/**  * Uses random load balancer  *  * @return the builder  */ public LoadBalanceDefinition random() {     setLoadBalancerType(new RandomLoadBalancerDefinition()).     return this. }
true;public;1;6;/**  * Uses the custom load balancer  *  * @param ref reference to lookup a custom load balancer from the {@link org.apache.camel.spi.Registry} to be used.  * @return the builder  */ ;/**  * Uses the custom load balancer  *  * @param ref reference to lookup a custom load balancer from the {@link org.apache.camel.spi.Registry} to be used.  * @return the builder  */ public LoadBalanceDefinition custom(String ref) {     CustomLoadBalancerDefinition balancer = new CustomLoadBalancerDefinition().     balancer.setRef(ref).     setLoadBalancerType(balancer).     return this. }
true;public;1;6;/**  * Uses sticky load balancer  *  * @param correlationExpression  the expression for correlation  * @return  the builder  */ ;/**  * Uses sticky load balancer  *  * @param correlationExpression  the expression for correlation  * @return  the builder  */ public LoadBalanceDefinition sticky(Expression correlationExpression) {     StickyLoadBalancerDefinition def = new StickyLoadBalancerDefinition().     def.setCorrelationExpression(correlationExpression).     setLoadBalancerType(def).     return this. }
true;public;0;4;/**  * Uses topic load balancer  *  * @return the builder  */ ;/**  * Uses topic load balancer  *  * @return the builder  */ public LoadBalanceDefinition topic() {     setLoadBalancerType(new TopicLoadBalancerDefinition()).     return this. }
false;public;0;4;;@Override public String getShortName() {     return "loadBalance". }
false;public;0;10;;@Override public String getLabel() {     CollectionStringBuffer buffer = new CollectionStringBuffer("loadBalance[").     List<ProcessorDefinition<?>> list = getOutputs().     for (ProcessorDefinition<?> processorType : list) {         buffer.append(processorType.getLabel()).     }     buffer.append("]").     return buffer.toString(). }
false;public;0;4;;@Override public String toString() {     return "LoadBalanceType[" + loadBalancerType + ", " + getOutputs() + "]". }
