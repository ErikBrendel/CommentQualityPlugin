commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public UnitOfWork newInstance(Exchange exchange) {     return new MDCUnitOfWork(exchange). }
false;public;0;6;;@Override public void stop() throws Exception {     super.stop().     // and remove when stopping     clear(). }
false;public;1;5;;@Override public void pushRouteContext(RouteContext routeContext) {     super.pushRouteContext(routeContext).     MDC.put(MDC_ROUTE_ID, routeContext.getRoute().getId()). }
false;public;0;16;;@Override public RouteContext popRouteContext() {     RouteContext answer = super.popRouteContext().     // restore old route id back again after we have popped     RouteContext previous = getRouteContext().     if (previous != null) {         // restore old route id back again         MDC.put(MDC_ROUTE_ID, previous.getRoute().getId()).     } else {         // not running in route, so clear (should ideally not happen)         MDC.remove(MDC_ROUTE_ID).     }     return answer. }
false;public;1;5;;@Override public void beginTransactedBy(Object key) {     MDC.put(MDC_TRANSACTION_KEY, key.toString()).     super.beginTransactedBy(key). }
false;public;1;5;;@Override public void endTransactedBy(Object key) {     MDC.remove(MDC_TRANSACTION_KEY).     super.endTransactedBy(key). }
false;public;3;4;;@Override public AsyncCallback beforeProcess(Processor processor, Exchange exchange, AsyncCallback callback) {     return new MDCCallback(callback). }
false;public;4;11;;@Override public void afterProcess(Processor processor, Exchange exchange, AsyncCallback callback, boolean doneSync) { /*         if (!doneSync) {             // must clear MDC on current thread as the exchange is being processed asynchronously             // by another thread             clear().         }         super.afterProcess(processor, exchange, callback, doneSync).         */ }
true;public;0;37;/**  * Clears information put on the MDC by this {@link MDCUnitOfWork}  */ ;/**  * Clears information put on the MDC by this {@link MDCUnitOfWork}  */ public void clear() {     if (this.originalBreadcrumbId != null) {         MDC.put(MDC_BREADCRUMB_ID, originalBreadcrumbId).     } else {         MDC.remove(MDC_BREADCRUMB_ID).     }     if (this.originalExchangeId != null) {         MDC.put(MDC_EXCHANGE_ID, originalExchangeId).     } else {         MDC.remove(MDC_EXCHANGE_ID).     }     if (this.originalMessageId != null) {         MDC.put(MDC_MESSAGE_ID, originalMessageId).     } else {         MDC.remove(MDC_MESSAGE_ID).     }     if (this.originalCorrelationId != null) {         MDC.put(MDC_CORRELATION_ID, originalCorrelationId).     } else {         MDC.remove(MDC_CORRELATION_ID).     }     if (this.originalRouteId != null) {         MDC.put(MDC_ROUTE_ID, originalRouteId).     } else {         MDC.remove(MDC_ROUTE_ID).     }     if (this.originalCamelContextId != null) {         MDC.put(MDC_CAMEL_CONTEXT_ID, originalCamelContextId).     } else {         MDC.remove(MDC_CAMEL_CONTEXT_ID).     }     if (this.originalTransactionKey != null) {         MDC.put(MDC_TRANSACTION_KEY, originalTransactionKey).     } else {         MDC.remove(MDC_TRANSACTION_KEY).     } }
false;public;0;4;;@Override public String toString() {     return "MDCUnitOfWork". }
false;public;1;30;;public void done(boolean doneSync) {     try {         if (!doneSync) {             // when done asynchronously then restore information from previous thread             if (breadcrumbId != null) {                 MDC.put(MDC_BREADCRUMB_ID, breadcrumbId).             }             if (exchangeId != null) {                 MDC.put(MDC_EXCHANGE_ID, exchangeId).             }             if (messageId != null) {                 MDC.put(MDC_MESSAGE_ID, messageId).             }             if (correlationId != null) {                 MDC.put(MDC_CORRELATION_ID, correlationId).             }             if (camelContextId != null) {                 MDC.put(MDC_CAMEL_CONTEXT_ID, camelContextId).             }         }         // need to setup the routeId finally         if (routeId != null) {             MDC.put(MDC_ROUTE_ID, routeId).         }     } finally {         // muse ensure delegate is invoked         delegate.done(doneSync).     } }
false;public;0;4;;@Override public String toString() {     return delegate.toString(). }
