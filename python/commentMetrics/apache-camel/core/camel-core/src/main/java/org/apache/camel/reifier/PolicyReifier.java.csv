commented;modifiers;parameterAmount;loc;comment;code
false;public;1;20;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     Policy policy = resolvePolicy(routeContext).     ObjectHelper.notNull(policy, "policy", definition).     // before wrap     policy.beforeWrap(routeContext, definition).     // create processor after the before wrap     Processor childProcessor = this.createChildProcessor(routeContext, true).     // wrap     Processor target = policy.wrap(routeContext, childProcessor).     if (!(target instanceof Service)) {         // wrap the target so it becomes a service and we can manage its lifecycle         target = new WrapProcessor(target, childProcessor).     }     return target. }
false;protected;1;7;;protected Policy resolvePolicy(RouteContext routeContext) {     if (definition.getPolicy() != null) {         return definition.getPolicy().     }     // reuse code on transacted definition to do the resolution     return TransactedReifier.resolvePolicy(routeContext, definition.getRef(), definition.getType()). }
