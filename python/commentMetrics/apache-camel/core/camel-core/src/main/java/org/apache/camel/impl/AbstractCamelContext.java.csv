# id;timestamp;commentText;codeText;commentWords;codeWords
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1549264559;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1549444743;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1549967332;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1550128562;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1551167777;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1551167777;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1551167777;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception;1551167777;Starts the given route service;protected synchronized void startRouteService(RouteService routeService, boolean addingRoutes) throws Exception {_        _        boolean alreadyStartingRoutes = isStartingRoutes()__        if (!alreadyStartingRoutes) {_            isStartingRoutes.set(true)__        }__        try {_            _            if (routeService.getStatus().isSuspended()) {_                resumeRouteService(routeService)__            } else {_                _                routeServices.put(routeService.getId(), routeService)__                if (shouldStartRoutes()) {_                    _                    safelyStartRouteServices(true, true, true, false, addingRoutes, routeService)__                    _                    boolean autoStartup = routeService.getRouteDefinition().isAutoStartup(this) && this.isAutoStartup()__                    if (!addingRoutes || autoStartup) {_                        _                        routeService.start()__                    }_                }_            }_        } finally {_            if (!alreadyStartingRoutes) {_                isStartingRoutes.remove()__            }_        }_    };starts,the,given,route,service;protected,synchronized,void,start,route,service,route,service,route,service,boolean,adding,routes,throws,exception,boolean,already,starting,routes,is,starting,routes,if,already,starting,routes,is,starting,routes,set,true,try,if,route,service,get,status,is,suspended,resume,route,service,route,service,else,route,services,put,route,service,get,id,route,service,if,should,start,routes,safely,start,route,services,true,true,true,false,adding,routes,route,service,boolean,auto,startup,route,service,get,route,definition,is,auto,startup,this,this,is,auto,startup,if,adding,routes,auto,startup,route,service,start,finally,if,already,starting,routes,is,starting,routes,remove
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1549264559;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1549444743;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1549967332;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1550128562;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1551167777;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1551167777;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1551167777;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected Endpoint createEndpoint(String uri);1551167777;A pluggable strategy to allow an endpoint to be created without requiring_a component to be its factory, such as for looking up the URI inside some_{@link Registry}__@param uri the uri for the endpoint to be created_@return the newly created endpoint or null if it could not be resolved;protected Endpoint createEndpoint(String uri) {_        Object value = getRegistry().lookupByName(uri)__        if (value instanceof Endpoint) {_            return (Endpoint) value__        } else if (value instanceof Processor) {_            return new ProcessorEndpoint(uri, this, (Processor) value)__        } else if (value != null) {_            return convertBeanToEndpoint(uri, value)__        }_        return null__    };a,pluggable,strategy,to,allow,an,endpoint,to,be,created,without,requiring,a,component,to,be,its,factory,such,as,for,looking,up,the,uri,inside,some,link,registry,param,uri,the,uri,for,the,endpoint,to,be,created,return,the,newly,created,endpoint,or,null,if,it,could,not,be,resolved;protected,endpoint,create,endpoint,string,uri,object,value,get,registry,lookup,by,name,uri,if,value,instanceof,endpoint,return,endpoint,value,else,if,value,instanceof,processor,return,new,processor,endpoint,uri,this,processor,value,else,if,value,null,return,convert,bean,to,endpoint,uri,value,return,null
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1549264559;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1549444743;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1549967332;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1550128562;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri, Endpoint endpoint);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri      the endpoint uri_@param endpoint the endpoint_@return the key;protected EndpointKey getEndpointKey(String uri, Endpoint endpoint) {_        if (endpoint != null && !endpoint.isSingleton()) {_            int counter = endpointKeyCounter.incrementAndGet()__            return new EndpointKey(uri + ":" + counter)__        } else {_            return new EndpointKey(uri)__        }_    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,param,endpoint,the,endpoint,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,endpoint,endpoint,if,endpoint,null,endpoint,is,singleton,int,counter,endpoint,key,counter,increment,and,get,return,new,endpoint,key,uri,counter,else,return,new,endpoint,key,uri
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1549264559;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1549444743;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1549967332;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1550128562;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1551167777;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1551167777;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1551167777;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> public PropertiesComponent getPropertiesComponent();1551167777;Gets the properties component in use, eventually creating it.;public PropertiesComponent getPropertiesComponent() {_        return getPropertiesComponent(true)__    };gets,the,properties,component,in,use,eventually,creating,it;public,properties,component,get,properties,component,return,get,properties,component,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1549264559;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1549444743;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1549967332;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1550128562;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected EndpointKey getEndpointKeyPreNormalized(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri which is pre normalized_@return the key;protected EndpointKey getEndpointKeyPreNormalized(String uri) {_        return new EndpointKey(uri, true)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,which,is,pre,normalized,return,the,key;protected,endpoint,key,get,endpoint,key,pre,normalized,string,uri,return,new,endpoint,key,uri,true
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1549264559;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1549444743;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1549967332;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1550128562;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1551167777;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1551167777;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1551167777;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,                                                          boolean addingRoutes, Collection<RouteService> routeServices) throws Exception;1551167777;Starts the routes services in a proper manner which ensures the routes will be started in correct order,_check for clash and that the routes will also be shutdown in correct order as well._<p/>_This method <b>must</b> be used to start routes in a safe manner.__@param checkClash     whether to check for startup order clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@param routeServices  the routes_@throws Exception is thrown if error starting the routes;protected synchronized void safelyStartRouteServices(boolean checkClash, boolean startConsumer, boolean resumeConsumer,_                                                         boolean addingRoutes, Collection<RouteService> routeServices) throws Exception {_        _        _        Map<Integer, DefaultRouteStartupOrder> inputs = new TreeMap<>()___        _        for (RouteService routeService : routeServices) {_            DefaultRouteStartupOrder order = doPrepareRouteToBeStarted(routeService)__            _            if (checkClash) {_                doCheckStartupOrderClash(order, inputs)__            }_            inputs.put(order.getStartupOrder(), order)__        }__        _        doWarmUpRoutes(inputs, startConsumer)___        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        _        List<StartupListener> backup = new ArrayList<>(startupListeners)__        startupListeners.clear()___        _        if (startConsumer) {_            if (resumeConsumer) {_                _                doResumeRouteConsumers(inputs, addingRoutes)__            } else {_                _                _                doStartRouteConsumers(inputs, addingRoutes)__            }_        }__        _        startupListeners.sort(OrderedComparator.get())__        _        _        for (StartupListener startup : startupListeners) {_            startup.onCamelContextStarted(this, isStarted())__        }_        _        startupListeners.addAll(0, backup)___        _        inputs.clear()__    };starts,the,routes,services,in,a,proper,manner,which,ensures,the,routes,will,be,started,in,correct,order,check,for,clash,and,that,the,routes,will,also,be,shutdown,in,correct,order,as,well,p,this,method,b,must,b,be,used,to,start,routes,in,a,safe,manner,param,check,clash,whether,to,check,for,startup,order,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,param,route,services,the,routes,throws,exception,is,thrown,if,error,starting,the,routes;protected,synchronized,void,safely,start,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,collection,route,service,route,services,throws,exception,map,integer,default,route,startup,order,inputs,new,tree,map,for,route,service,route,service,route,services,default,route,startup,order,order,do,prepare,route,to,be,started,route,service,if,check,clash,do,check,startup,order,clash,order,inputs,inputs,put,order,get,startup,order,order,do,warm,up,routes,inputs,start,consumer,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,list,startup,listener,backup,new,array,list,startup,listeners,startup,listeners,clear,if,start,consumer,if,resume,consumer,do,resume,route,consumers,inputs,adding,routes,else,do,start,route,consumers,inputs,adding,routes,startup,listeners,sort,ordered,comparator,get,for,startup,listener,startup,startup,listeners,startup,on,camel,context,started,this,is,started,startup,listeners,add,all,0,backup,inputs,clear
AbstractCamelContext -> public AbstractCamelContext();1549264559;Creates the {@link CamelContext} using {@link JndiRegistry} as registry,_but will silently fallback and use {@link SimpleRegistry} if JNDI cannot be used._<p/>_Use one of the other constructors to force use an explicit registry / JNDI.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,jndi,registry,as,registry,but,will,silently,fallback,and,use,link,simple,registry,if,jndi,cannot,be,used,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry,jndi;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1549444743;Creates the {@link CamelContext} using {@link JndiRegistry} as registry,_but will silently fallback and use {@link SimpleRegistry} if JNDI cannot be used._<p/>_Use one of the other constructors to force use an explicit registry / JNDI.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,jndi,registry,as,registry,but,will,silently,fallback,and,use,link,simple,registry,if,jndi,cannot,be,used,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry,jndi;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1549967332;Creates the {@link CamelContext} using {@link JndiRegistry} as registry,_but will silently fallback and use {@link SimpleRegistry} if JNDI cannot be used._<p/>_Use one of the other constructors to force use an explicit registry / JNDI.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,jndi,registry,as,registry,but,will,silently,fallback,and,use,link,simple,registry,if,jndi,cannot,be,used,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry,jndi;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1550128562;Creates the {@link CamelContext} using {@link JndiRegistry} as registry,_but will silently fallback and use {@link SimpleRegistry} if JNDI cannot be used._<p/>_Use one of the other constructors to force use an explicit registry / JNDI.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,jndi,registry,as,registry,but,will,silently,fallback,and,use,link,simple,registry,if,jndi,cannot,be,used,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry,jndi;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1551167777;Creates the {@link CamelContext} using {@link JndiRegistry} as registry,_but will silently fallback and use {@link SimpleRegistry} if JNDI cannot be used._<p/>_Use one of the other constructors to force use an explicit registry / JNDI.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,jndi,registry,as,registry,but,will,silently,fallback,and,use,link,simple,registry,if,jndi,cannot,be,used,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry,jndi;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1551167777;Creates the {@link CamelContext} using {@link org.apache.camel.support.DefaultRegistry} as registry._<p/>_Use one of the other constructors to force use an explicit registry.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,org,apache,camel,support,default,registry,as,registry,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1551167777;Creates the {@link CamelContext} using {@link org.apache.camel.support.DefaultRegistry} as registry._<p/>_Use one of the other constructors to force use an explicit registry.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,org,apache,camel,support,default,registry,as,registry,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry;public,abstract,camel,context,this,true
AbstractCamelContext -> public AbstractCamelContext();1551167777;Creates the {@link CamelContext} using {@link org.apache.camel.support.DefaultRegistry} as registry._<p/>_Use one of the other constructors to force use an explicit registry.;public AbstractCamelContext() {_        this(true)__    };creates,the,link,camel,context,using,link,org,apache,camel,support,default,registry,as,registry,p,use,one,of,the,other,constructors,to,force,use,an,explicit,registry;public,abstract,camel,context,this,true
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1549264559;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1549444743;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1549967332;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1550128562;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1551167777;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1551167777;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1551167777;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> protected Endpoint convertBeanToEndpoint(String uri, Object bean);1551167777;Strategy method for attempting to convert the bean from a {@link Registry} to an endpoint using_some kind of transformation or wrapper__@param uri  the uri for the endpoint (and name in the registry)_@param bean the bean to be converted to an endpoint, which will be not null_@return a new endpoint;protected Endpoint convertBeanToEndpoint(String uri, Object bean) {_        throw new IllegalArgumentException("uri: " + uri + " bean: " + bean_                + " could not be converted to an Endpoint")__    };strategy,method,for,attempting,to,convert,the,bean,from,a,link,registry,to,an,endpoint,using,some,kind,of,transformation,or,wrapper,param,uri,the,uri,for,the,endpoint,and,name,in,the,registry,param,bean,the,bean,to,be,converted,to,an,endpoint,which,will,be,not,null,return,a,new,endpoint;protected,endpoint,convert,bean,to,endpoint,string,uri,object,bean,throw,new,illegal,argument,exception,uri,uri,bean,bean,could,not,be,converted,to,an,endpoint
AbstractCamelContext -> public static void setContextCounter(int value);1549264559;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1549444743;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1549967332;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1550128562;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1551167777;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1551167777;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1551167777;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> public static void setContextCounter(int value);1551167777;Reset context counter to a preset value. Mostly used for tests to ensure a predictable getName()__@param value new value for the context counter;public static void setContextCounter(int value) {_        DefaultCamelContextNameStrategy.setCounter(value)__        DefaultManagementNameStrategy.setCounter(value)__    };reset,context,counter,to,a,preset,value,mostly,used,for,tests,to,ensure,a,predictable,get,name,param,value,new,value,for,the,context,counter;public,static,void,set,context,counter,int,value,default,camel,context,name,strategy,set,counter,value,default,management,name,strategy,set,counter,value
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1549264559;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1549444743;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1549967332;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1550128562;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1551167777;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1551167777;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1551167777;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint);1551167777;Strategy to add the given endpoint to the internal endpoint registry__@param uri      uri of the endpoint_@param endpoint the endpoint to add_@return the added endpoint;protected Endpoint addEndpointToRegistry(String uri, Endpoint endpoint) {_        StringHelper.notEmpty(uri, "uri")__        ObjectHelper.notNull(endpoint, "endpoint")___        _        _        for (EndpointStrategy strategy : endpointStrategies) {_            endpoint = strategy.registerEndpoint(uri, endpoint)__        }_        endpoints.put(getEndpointKey(uri, endpoint), endpoint)__        return endpoint__    };strategy,to,add,the,given,endpoint,to,the,internal,endpoint,registry,param,uri,uri,of,the,endpoint,param,endpoint,the,endpoint,to,add,return,the,added,endpoint;protected,endpoint,add,endpoint,to,registry,string,uri,endpoint,endpoint,string,helper,not,empty,uri,uri,object,helper,not,null,endpoint,endpoint,for,endpoint,strategy,strategy,endpoint,strategies,endpoint,strategy,register,endpoint,uri,endpoint,endpoints,put,get,endpoint,key,uri,endpoint,endpoint,return,endpoint
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1549264559;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1549444743;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1549967332;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1550128562;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1551167777;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1551167777;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1551167777;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,                                                          boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception;1551167777;@see #safelyStartRouteServices(boolean,boolean,boolean,boolean,Collection);protected synchronized void safelyStartRouteServices(boolean forceAutoStart, boolean checkClash, boolean startConsumer,_                                                         boolean resumeConsumer, boolean addingRoutes, RouteService... routeServices) throws Exception {_        safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, Arrays.asList(routeServices))__    };see,safely,start,route,services,boolean,boolean,boolean,boolean,collection;protected,synchronized,void,safely,start,route,services,boolean,force,auto,start,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,route,service,route,services,throws,exception,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,arrays,as,list,route,services
AbstractCamelContext -> protected void forceStopLazyInitialization();1549264559;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1549444743;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1549967332;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1550128562;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1551167777;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1551167777;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1551167777;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> protected void forceStopLazyInitialization();1551167777;Force clear lazy initialization so they can be re-created on restart;protected void forceStopLazyInitialization() {_        injector = null__        languageResolver = null__        typeConverterRegistry = null__        typeConverter = null__    };force,clear,lazy,initialization,so,they,can,be,re,created,on,restart;protected,void,force,stop,lazy,initialization,injector,null,language,resolver,null,type,converter,registry,null,type,converter,null
AbstractCamelContext -> public void setJndiContext(Context jndiContext);1549264559;Sets the registry to the given JNDI context__@param jndiContext is the JNDI context to use as the registry_@see #setRegistry(Registry);public void setJndiContext(Context jndiContext) {_        setRegistry(new JndiRegistry(jndiContext))__    };sets,the,registry,to,the,given,jndi,context,param,jndi,context,is,the,jndi,context,to,use,as,the,registry,see,set,registry,registry;public,void,set,jndi,context,context,jndi,context,set,registry,new,jndi,registry,jndi,context
AbstractCamelContext -> public void setJndiContext(Context jndiContext);1549444743;Sets the registry to the given JNDI context__@param jndiContext is the JNDI context to use as the registry_@see #setRegistry(Registry);public void setJndiContext(Context jndiContext) {_        setRegistry(new JndiRegistry(jndiContext))__    };sets,the,registry,to,the,given,jndi,context,param,jndi,context,is,the,jndi,context,to,use,as,the,registry,see,set,registry,registry;public,void,set,jndi,context,context,jndi,context,set,registry,new,jndi,registry,jndi,context
AbstractCamelContext -> public void setJndiContext(Context jndiContext);1549967332;Sets the registry to the given JNDI context__@param jndiContext is the JNDI context to use as the registry_@see #setRegistry(Registry);public void setJndiContext(Context jndiContext) {_        setRegistry(new JndiRegistry(jndiContext))__    };sets,the,registry,to,the,given,jndi,context,param,jndi,context,is,the,jndi,context,to,use,as,the,registry,see,set,registry,registry;public,void,set,jndi,context,context,jndi,context,set,registry,new,jndi,registry,jndi,context
AbstractCamelContext -> public void setJndiContext(Context jndiContext);1550128562;Sets the registry to the given JNDI context__@param jndiContext is the JNDI context to use as the registry_@see #setRegistry(Registry);public void setJndiContext(Context jndiContext) {_        setRegistry(new JndiRegistry(jndiContext))__    };sets,the,registry,to,the,given,jndi,context,param,jndi,context,is,the,jndi,context,to,use,as,the,registry,see,set,registry,registry;public,void,set,jndi,context,context,jndi,context,set,registry,new,jndi,registry,jndi,context
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1549264559;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1549444743;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1549967332;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1550128562;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1551167777;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1551167777;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1551167777;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected synchronized void resumeRouteService(RouteService routeService) throws Exception;1551167777;Resumes the given route service;protected synchronized void resumeRouteService(RouteService routeService) throws Exception {_        _        if (!routeService.getStatus().isSuspended()) {_            startRouteService(routeService, false)__        } else {_            _            if (shouldStartRoutes()) {_                _                safelyStartRouteServices(true, false, true, true, false, routeService)__                _                routeService.resume()__            }_        }_    };resumes,the,given,route,service;protected,synchronized,void,resume,route,service,route,service,route,service,throws,exception,if,route,service,get,status,is,suspended,start,route,service,route,service,false,else,if,should,start,routes,safely,start,route,services,true,false,true,true,false,route,service,route,service,resume
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1549264559;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1549444743;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1549967332;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1550128562;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected EndpointKey getEndpointKey(String uri);1551167777;Gets the endpoint key to use for lookup or whe adding endpoints to the {@link DefaultEndpointRegistry}__@param uri the endpoint uri_@return the key;protected EndpointKey getEndpointKey(String uri) {_        return new EndpointKey(uri)__    };gets,the,endpoint,key,to,use,for,lookup,or,whe,adding,endpoints,to,the,link,default,endpoint,registry,param,uri,the,endpoint,uri,return,the,key;protected,endpoint,key,get,endpoint,key,string,uri,return,new,endpoint,key,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1549264559;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1549444743;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1549967332;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1550128562;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1551167777;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1551167777;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1551167777;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected static String normalizeEndpointUri(String uri);1551167777;Normalize uri so we can do endpoint hits with minor mistakes and parameters is not in the same order.__@param uri the uri_@return normalized uri_@throws ResolveEndpointFailedException if uri cannot be normalized;protected static String normalizeEndpointUri(String uri) {_        try {_            uri = URISupport.normalizeUri(uri)__        } catch (Exception e) {_            throw new ResolveEndpointFailedException(uri, e)__        }_        return uri__    };normalize,uri,so,we,can,do,endpoint,hits,with,minor,mistakes,and,parameters,is,not,in,the,same,order,param,uri,the,uri,return,normalized,uri,throws,resolve,endpoint,failed,exception,if,uri,cannot,be,normalized;protected,static,string,normalize,endpoint,uri,string,uri,try,uri,urisupport,normalize,uri,uri,catch,exception,e,throw,new,resolve,endpoint,failed,exception,uri,e,return,uri
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1549264559;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1549444743;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1549967332;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1550128562;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1551167777;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1551167777;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1551167777;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,                                          boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception;1551167777;Starts or resumes the routes__@param routeServices  the routes to start (will only start a route if its not already started)_@param checkClash     whether to check for startup ordering clash_@param startConsumer  whether the route consumer should be started. Can be used to warmup the route without starting the consumer._@param resumeConsumer whether the route consumer should be resumed._@param addingRoutes   whether we are adding new routes_@throws Exception is thrown if error starting routes;protected void doStartOrResumeRoutes(Map<String, RouteService> routeServices, boolean checkClash,_                                         boolean startConsumer, boolean resumeConsumer, boolean addingRoutes) throws Exception {_        isStartingRoutes.set(true)__        try {_            _            Map<String, RouteService> filtered = new LinkedHashMap<>()__            for (Map.Entry<String, RouteService> entry : routeServices.entrySet()) {_                boolean startable = false___                Consumer consumer = entry.getValue().getRoutes().iterator().next().getConsumer()__                if (consumer instanceof SuspendableService) {_                    _                    startable = ((SuspendableService) consumer).isSuspended()__                }__                if (!startable && consumer instanceof StatefulService) {_                    _                    startable = ((StatefulService) consumer).getStatus().isStartable()__                } else if (!startable) {_                    _                    startable = entry.getValue().getStatus().isStartable()__                }__                if (startable) {_                    filtered.put(entry.getKey(), entry.getValue())__                }_            }__            _            safelyStartRouteServices(checkClash, startConsumer, resumeConsumer, addingRoutes, filtered.values())___        } finally {_            isStartingRoutes.remove()__        }_    };starts,or,resumes,the,routes,param,route,services,the,routes,to,start,will,only,start,a,route,if,its,not,already,started,param,check,clash,whether,to,check,for,startup,ordering,clash,param,start,consumer,whether,the,route,consumer,should,be,started,can,be,used,to,warmup,the,route,without,starting,the,consumer,param,resume,consumer,whether,the,route,consumer,should,be,resumed,param,adding,routes,whether,we,are,adding,new,routes,throws,exception,is,thrown,if,error,starting,routes;protected,void,do,start,or,resume,routes,map,string,route,service,route,services,boolean,check,clash,boolean,start,consumer,boolean,resume,consumer,boolean,adding,routes,throws,exception,is,starting,routes,set,true,try,map,string,route,service,filtered,new,linked,hash,map,for,map,entry,string,route,service,entry,route,services,entry,set,boolean,startable,false,consumer,consumer,entry,get,value,get,routes,iterator,next,get,consumer,if,consumer,instanceof,suspendable,service,startable,suspendable,service,consumer,is,suspended,if,startable,consumer,instanceof,stateful,service,startable,stateful,service,consumer,get,status,is,startable,else,if,startable,startable,entry,get,value,get,status,is,startable,if,startable,filtered,put,entry,get,key,entry,get,value,safely,start,route,services,check,clash,start,consumer,resume,consumer,adding,routes,filtered,values,finally,is,starting,routes,remove
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1549264559;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1549444743;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1549967332;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1550128562;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1551167777;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1551167777;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1551167777;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> private Component initComponent(String name, boolean autoCreateComponents);1551167777;Function to initialize a component and auto start. Returns null if the autoCreateComponents is disabled;private Component initComponent(String name, boolean autoCreateComponents) {_        Component component = null__        if (autoCreateComponents) {_            try {_                if (log.isDebugEnabled()) {_                    log.debug("Using ComponentResolver: {} to resolve component with name: {}", getComponentResolver(), name)__                }componentsInCreation.get().add(name)___                component = getComponentResolver().resolveComponent(name, this)__                if (component != null) {_                    component.setCamelContext(this)__                    postInitComponent(name, component)__                }_            } catch (Exception e) {_                throw new RuntimeCamelException("Cannot auto create component: " + name, e)__            }_        }_        return component__    };function,to,initialize,a,component,and,auto,start,returns,null,if,the,auto,create,components,is,disabled;private,component,init,component,string,name,boolean,auto,create,components,component,component,null,if,auto,create,components,try,if,log,is,debug,enabled,log,debug,using,component,resolver,to,resolve,component,with,name,get,component,resolver,name,components,in,creation,get,add,name,component,get,component,resolver,resolve,component,name,this,if,component,null,component,set,camel,context,this,post,init,component,name,component,catch,exception,e,throw,new,runtime,camel,exception,cannot,auto,create,component,name,e,return,component
AbstractCamelContext -> public void setName(String name);1549264559;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1549444743;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1549967332;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1550128562;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1551167777;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1551167777;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1551167777;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public void setName(String name);1551167777;Sets the name of the this context.__@param name the name;public void setName(String name) {_        _        setNameStrategy(new ExplicitCamelContextNameStrategy(name))__    };sets,the,name,of,the,this,context,param,name,the,name;public,void,set,name,string,name,set,name,strategy,new,explicit,camel,context,name,strategy,name
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1549264559;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1549444743;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1549967332;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1550128562;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1551167777;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1551167777;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1551167777;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> public AbstractCamelContext(Registry registry);1551167777;Creates the {@link CamelContext} using the given registry__@param registry the registry;public AbstractCamelContext(Registry registry) {_        this()__        setRegistry(registry)__    };creates,the,link,camel,context,using,the,given,registry,param,registry,the,registry;public,abstract,camel,context,registry,registry,this,set,registry,registry
AbstractCamelContext -> protected boolean shouldStartRoutes();1549264559;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1549444743;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1549967332;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1550128562;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1551167777;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1551167777;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1551167777;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> protected boolean shouldStartRoutes();1551167777;Should we start newly added routes?;protected boolean shouldStartRoutes() {_        return isStarted() && !isStarting()__    };should,we,start,newly,added,routes;protected,boolean,should,start,routes,return,is,started,is,starting
AbstractCamelContext -> public AbstractCamelContext(Context jndiContext);1549264559;Creates the {@link CamelContext} using the given JNDI context as the registry__@param jndiContext the JNDI context;public AbstractCamelContext(Context jndiContext) {_        this()__        setJndiContext(jndiContext)__    };creates,the,link,camel,context,using,the,given,jndi,context,as,the,registry,param,jndi,context,the,jndi,context;public,abstract,camel,context,context,jndi,context,this,set,jndi,context,jndi,context
AbstractCamelContext -> public AbstractCamelContext(Context jndiContext);1549444743;Creates the {@link CamelContext} using the given JNDI context as the registry__@param jndiContext the JNDI context;public AbstractCamelContext(Context jndiContext) {_        this()__        setJndiContext(jndiContext)__    };creates,the,link,camel,context,using,the,given,jndi,context,as,the,registry,param,jndi,context,the,jndi,context;public,abstract,camel,context,context,jndi,context,this,set,jndi,context,jndi,context
AbstractCamelContext -> public AbstractCamelContext(Context jndiContext);1549967332;Creates the {@link CamelContext} using the given JNDI context as the registry__@param jndiContext the JNDI context;public AbstractCamelContext(Context jndiContext) {_        this()__        setJndiContext(jndiContext)__    };creates,the,link,camel,context,using,the,given,jndi,context,as,the,registry,param,jndi,context,the,jndi,context;public,abstract,camel,context,context,jndi,context,this,set,jndi,context,jndi,context
AbstractCamelContext -> public AbstractCamelContext(Context jndiContext);1550128562;Creates the {@link CamelContext} using the given JNDI context as the registry__@param jndiContext the JNDI context;public AbstractCamelContext(Context jndiContext) {_        this()__        setJndiContext(jndiContext)__    };creates,the,link,camel,context,using,the,given,jndi,context,as,the,registry,param,jndi,context,the,jndi,context;public,abstract,camel,context,context,jndi,context,this,set,jndi,context,jndi,context
AbstractCamelContext -> protected void forceLazyInitialization();1549264559;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1549444743;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1549967332;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1550128562;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1551167777;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1551167777;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1551167777;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected void forceLazyInitialization();1551167777;Force some lazy initialization to occur upfront before we start any_components and create routes;protected void forceLazyInitialization() {_        if (initialization != Initialization.Lazy) {_            getTypeConverter()__            getTypeConverterRegistry()__            getInjector()__            getRegistry()__            getLanguageResolver()__            getExecutorServiceManager()__            getInflightRepository()__            getAsyncProcessorAwaitManager()__            getShutdownStrategy()__            getPackageScanClassResolver()__            getProducerServicePool()__            getPollingConsumerServicePool()__            getRestRegistry()___            if (isTypeConverterStatisticsEnabled() != null) {_                getTypeConverterRegistry().getStatistics().setStatisticsEnabled(isTypeConverterStatisticsEnabled())__            }__            _            resolveLanguage("simple")___            _            getExtension(RuntimeCamelCatalog.class)___            if (initialization == Initialization.Eager) {_                getExtension(HealthCheckRegistry.class)__                getComponentResolver()__                getDataFormatResolver()__                getManagementStrategy()__                getHeadersMapFactory()__                getClassResolver()__                getNodeIdFactory()__                getProcessorFactory()__                getMessageHistoryFactory()__                getFactoryFinderResolver()__                getDefaultFactoryFinder()__                getStreamCachingStrategy()__                getModelJAXBContextFactory()__                getUuidGenerator()__                getUnitOfWorkFactory()__                getRouteController()__            }_        }_    };force,some,lazy,initialization,to,occur,upfront,before,we,start,any,components,and,create,routes;protected,void,force,lazy,initialization,if,initialization,initialization,lazy,get,type,converter,get,type,converter,registry,get,injector,get,registry,get,language,resolver,get,executor,service,manager,get,inflight,repository,get,async,processor,await,manager,get,shutdown,strategy,get,package,scan,class,resolver,get,producer,service,pool,get,polling,consumer,service,pool,get,rest,registry,if,is,type,converter,statistics,enabled,null,get,type,converter,registry,get,statistics,set,statistics,enabled,is,type,converter,statistics,enabled,resolve,language,simple,get,extension,runtime,camel,catalog,class,if,initialization,initialization,eager,get,extension,health,check,registry,class,get,component,resolver,get,data,format,resolver,get,management,strategy,get,headers,map,factory,get,class,resolver,get,node,id,factory,get,processor,factory,get,message,history,factory,get,factory,finder,resolver,get,default,factory,finder,get,stream,caching,strategy,get,model,jaxbcontext,factory,get,uuid,generator,get,unit,of,work,factory,get,route,controller
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1549264559;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1549444743;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1549967332;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1550128562;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1551167777;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1551167777;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1551167777;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
AbstractCamelContext -> protected boolean removeRouteDefinition(String key);1551167777;Removes the route definition with the given key.__@return true if one or more routes was removed;protected boolean removeRouteDefinition(String key) {_        boolean answer = false__        Iterator<RouteDefinition> iter = routeDefinitions.iterator()__        while (iter.hasNext()) {_            RouteDefinition route = iter.next()__            if (route.idOrCreate(getNodeIdFactory()).equals(key)) {_                iter.remove()__                answer = true__            }_        }_        return answer__    };removes,the,route,definition,with,the,given,key,return,true,if,one,or,more,routes,was,removed;protected,boolean,remove,route,definition,string,key,boolean,answer,false,iterator,route,definition,iter,route,definitions,iterator,while,iter,has,next,route,definition,route,iter,next,if,route,id,or,create,get,node,id,factory,equals,key,iter,remove,answer,true,return,answer
