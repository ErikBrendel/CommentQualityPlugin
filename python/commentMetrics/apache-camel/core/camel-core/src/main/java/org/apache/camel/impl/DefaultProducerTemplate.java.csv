commented;modifiers;parameterAmount;loc;comment;code
false;public,static;2;4;;public static DefaultProducerTemplate newInstance(CamelContext camelContext, String defaultEndpointUri) {     Endpoint endpoint = CamelContextHelper.getMandatoryEndpoint(camelContext, defaultEndpointUri).     return new DefaultProducerTemplate(camelContext, endpoint). }
false;public;0;3;;public int getMaximumCacheSize() {     return maximumCacheSize. }
false;public;1;3;;public void setMaximumCacheSize(int maximumCacheSize) {     this.maximumCacheSize = maximumCacheSize. }
false;public;0;4;;@Override public boolean isThreadedAsyncMode() {     return threadedAsyncMode. }
false;public;1;4;;@Override public void setThreadedAsyncMode(boolean useExecutor) {     this.threadedAsyncMode = useExecutor. }
false;public;0;6;;public int getCurrentCacheSize() {     if (producerCache == null) {         return 0.     }     return producerCache.size(). }
false;public;0;3;;public boolean isEventNotifierEnabled() {     return eventNotifierEnabled. }
false;public;0;5;;public void cleanUp() {     if (producerCache != null) {         producerCache.cleanUp().     } }
false;public;1;7;;public void setEventNotifierEnabled(boolean eventNotifierEnabled) {     this.eventNotifierEnabled = eventNotifierEnabled.     // if we already created the cache then adjust its setting as well     if (producerCache != null) {         producerCache.setEventNotifierEnabled(eventNotifierEnabled).     } }
false;public;2;4;;public Exchange send(String endpointUri, Exchange exchange) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     return send(endpoint, exchange). }
false;public;2;4;;public Exchange send(String endpointUri, Processor processor) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     return send(endpoint, null, processor, null). }
false;public;3;4;;public Exchange send(String endpointUri, ExchangePattern pattern, Processor processor) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     return send(endpoint, pattern, processor, null). }
false;public;2;3;;public Exchange send(Endpoint endpoint, Exchange exchange) {     return send(endpoint, exchange, null). }
false;public;2;3;;public Exchange send(Endpoint endpoint, Processor processor) {     return send(endpoint, null, processor, null). }
false;public;3;3;;public Exchange send(Endpoint endpoint, ExchangePattern pattern, Processor processor) {     return send(endpoint, pattern, processor, null). }
false;public;4;12;;public Exchange send(Endpoint endpoint, ExchangePattern pattern, Processor processor, Processor resultProcessor) {     Exchange exchange = pattern != null ? endpoint.createExchange(pattern) : endpoint.createExchange().     if (processor != null) {         try {             processor.process(exchange).         } catch (Exception e) {             exchange.setException(e).             return exchange.         }     }     return send(endpoint, exchange, resultProcessor). }
false;public;3;3;;public Exchange send(Endpoint endpoint, Exchange exchange, Processor resultProcessor) {     return getProducerCache().send(endpoint, exchange, resultProcessor). }
false;public;3;4;;public Object sendBody(Endpoint endpoint, ExchangePattern pattern, Object body) {     Exchange result = send(endpoint, pattern, createSetBodyProcessor(body)).     return extractResultBody(result, pattern). }
false;public;2;5;;public void sendBody(Endpoint endpoint, Object body) throws CamelExecutionException {     Exchange result = send(endpoint, createSetBodyProcessor(body)).     // must invoke extract result body in case of exception to be rethrown     extractResultBody(result). }
false;public;2;4;;public void sendBody(String endpointUri, Object body) throws CamelExecutionException {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     sendBody(endpoint, body). }
false;public;3;10;;public Object sendBody(String endpointUri, ExchangePattern pattern, Object body) throws CamelExecutionException {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     Object result = sendBody(endpoint, pattern, body).     if (pattern.isOutCapable()) {         return result.     } else {         // return null if not OUT capable         return null.     } }
false;public;4;3;;public void sendBodyAndHeader(String endpointUri, final Object body, final String header, final Object headerValue) throws CamelExecutionException {     sendBodyAndHeader(resolveMandatoryEndpoint(endpointUri), body, header, headerValue). }
false;public;4;5;;public void sendBodyAndHeader(Endpoint endpoint, final Object body, final String header, final Object headerValue) throws CamelExecutionException {     Exchange result = send(endpoint, createBodyAndHeaderProcessor(body, header, headerValue)).     // must invoke extract result body in case of exception to be rethrown     extractResultBody(result). }
false;public;5;11;;public Object sendBodyAndHeader(Endpoint endpoint, ExchangePattern pattern, final Object body, final String header, final Object headerValue) throws CamelExecutionException {     Exchange exchange = send(endpoint, pattern, createBodyAndHeaderProcessor(body, header, headerValue)).     Object result = extractResultBody(exchange, pattern).     if (pattern.isOutCapable()) {         return result.     } else {         // return null if not OUT capable         return null.     } }
false;public;5;11;;public Object sendBodyAndHeader(String endpoint, ExchangePattern pattern, final Object body, final String header, final Object headerValue) throws CamelExecutionException {     Exchange exchange = send(endpoint, pattern, createBodyAndHeaderProcessor(body, header, headerValue)).     Object result = extractResultBody(exchange, pattern).     if (pattern.isOutCapable()) {         return result.     } else {         // return null if not OUT capable         return null.     } }
false;public;4;4;;public void sendBodyAndProperty(String endpointUri, final Object body, final String property, final Object propertyValue) throws CamelExecutionException {     sendBodyAndProperty(resolveMandatoryEndpoint(endpointUri), body, property, propertyValue). }
false;public;4;6;;public void sendBodyAndProperty(Endpoint endpoint, final Object body, final String property, final Object propertyValue) throws CamelExecutionException {     Exchange result = send(endpoint, createBodyAndPropertyProcessor(body, property, propertyValue)).     // must invoke extract result body in case of exception to be rethrown     extractResultBody(result). }
false;public;5;11;;public Object sendBodyAndProperty(Endpoint endpoint, ExchangePattern pattern, final Object body, final String property, final Object propertyValue) throws CamelExecutionException {     Exchange exchange = send(endpoint, pattern, createBodyAndPropertyProcessor(body, property, propertyValue)).     Object result = extractResultBody(exchange, pattern).     if (pattern.isOutCapable()) {         return result.     } else {         // return null if not OUT capable         return null.     } }
false;public;5;11;;public Object sendBodyAndProperty(String endpoint, ExchangePattern pattern, final Object body, final String property, final Object propertyValue) throws CamelExecutionException {     Exchange exchange = send(endpoint, pattern, createBodyAndPropertyProcessor(body, property, propertyValue)).     Object result = extractResultBody(exchange, pattern).     if (pattern.isOutCapable()) {         return result.     } else {         // return null if not OUT capable         return null.     } }
false;public;3;3;;public void sendBodyAndHeaders(String endpointUri, final Object body, final Map<String, Object> headers) throws CamelExecutionException {     sendBodyAndHeaders(resolveMandatoryEndpoint(endpointUri), body, headers). }
false;public;3;5;;public void sendBodyAndHeaders(Endpoint endpoint, final Object body, final Map<String, Object> headers) throws CamelExecutionException {     Exchange result = send(endpoint, createBodyAndHeaders(body, headers)).     // must invoke extract result body in case of exception to be rethrown     extractResultBody(result). }
false;public;4;3;;public Object sendBodyAndHeaders(String endpointUri, ExchangePattern pattern, Object body, Map<String, Object> headers) throws CamelExecutionException {     return sendBodyAndHeaders(resolveMandatoryEndpoint(endpointUri), pattern, body, headers). }
false;public;4;10;;public Object sendBodyAndHeaders(Endpoint endpoint, ExchangePattern pattern, final Object body, final Map<String, Object> headers) throws CamelExecutionException {     Exchange exchange = send(endpoint, pattern, createBodyAndHeaders(body, headers)).     Object result = extractResultBody(exchange, pattern).     if (pattern.isOutCapable()) {         return result.     } else {         // return null if not OUT capable         return null.     } }
false;public;2;3;;// Methods using an InOut ExchangePattern // ----------------------------------------------------------------------- public Exchange request(Endpoint endpoint, Processor processor) {     return send(endpoint, ExchangePattern.InOut, processor). }
false;public;1;3;;public Object requestBody(Object body) throws CamelExecutionException {     return sendBody(getMandatoryDefaultEndpoint(), ExchangePattern.InOut, body). }
false;public;2;3;;public Object requestBody(Endpoint endpoint, Object body) throws CamelExecutionException {     return sendBody(endpoint, ExchangePattern.InOut, body). }
false;public;3;3;;public Object requestBodyAndHeader(Object body, String header, Object headerValue) throws CamelExecutionException {     return sendBodyAndHeader(getMandatoryDefaultEndpoint(), ExchangePattern.InOut, body, header, headerValue). }
false;public;4;3;;public Object requestBodyAndHeader(Endpoint endpoint, Object body, String header, Object headerValue) throws CamelExecutionException {     return sendBodyAndHeader(endpoint, ExchangePattern.InOut, body, header, headerValue). }
false;public;2;3;;public Exchange request(String endpointUri, Processor processor) throws CamelExecutionException {     return send(resolveMandatoryEndpoint(endpointUri), ExchangePattern.InOut, processor, null). }
false;public;2;3;;public Object requestBody(String endpointUri, Object body) throws CamelExecutionException {     return sendBody(resolveMandatoryEndpoint(endpointUri), ExchangePattern.InOut, body). }
false;public;4;3;;public Object requestBodyAndHeader(String endpointUri, Object body, String header, Object headerValue) throws CamelExecutionException {     return sendBodyAndHeader(resolveMandatoryEndpoint(endpointUri), ExchangePattern.InOut, body, header, headerValue). }
false;public;3;3;;public Object requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers) {     return sendBodyAndHeaders(resolveMandatoryEndpoint(endpointUri), ExchangePattern.InOut, body, headers). }
false;public;3;3;;public Object requestBodyAndHeaders(Endpoint endpoint, final Object body, final Map<String, Object> headers) {     return sendBodyAndHeaders(endpoint, ExchangePattern.InOut, body, headers). }
false;public;2;3;;public Object requestBodyAndHeaders(final Object body, final Map<String, Object> headers) {     return sendBodyAndHeaders(getMandatoryDefaultEndpoint(), ExchangePattern.InOut, body, headers). }
false;public;2;3;;public <T> T requestBody(Object body, Class<T> type) {     return requestBody(getMandatoryDefaultEndpoint(), body, type). }
false;public;3;5;;public <T> T requestBody(Endpoint endpoint, Object body, Class<T> type) {     Exchange exchange = send(endpoint, ExchangePattern.InOut, createSetBodyProcessor(body), createConvertBodyProcessor(type)).     Object answer = extractResultBody(exchange).     return camelContext.getTypeConverter().convertTo(type, answer). }
false;public;3;6;;public <T> T requestBody(String endpointUri, Object body, Class<T> type) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     Exchange exchange = send(endpoint, ExchangePattern.InOut, createSetBodyProcessor(body), createConvertBodyProcessor(type)).     Object answer = extractResultBody(exchange).     return camelContext.getTypeConverter().convertTo(type, answer). }
false;public;5;5;;public <T> T requestBodyAndHeader(Endpoint endpoint, Object body, String header, Object headerValue, Class<T> type) {     Exchange exchange = send(endpoint, ExchangePattern.InOut, createBodyAndHeaderProcessor(body, header, headerValue), createConvertBodyProcessor(type)).     Object answer = extractResultBody(exchange).     return camelContext.getTypeConverter().convertTo(type, answer). }
false;public;5;6;;public <T> T requestBodyAndHeader(String endpointUri, Object body, String header, Object headerValue, Class<T> type) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     Exchange exchange = send(endpoint, ExchangePattern.InOut, createBodyAndHeaderProcessor(body, header, headerValue), createConvertBodyProcessor(type)).     Object answer = extractResultBody(exchange).     return camelContext.getTypeConverter().convertTo(type, answer). }
false;public;4;6;;public <T> T requestBodyAndHeaders(String endpointUri, Object body, Map<String, Object> headers, Class<T> type) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     Exchange exchange = send(endpoint, ExchangePattern.InOut, createBodyAndHeaders(body, headers), createConvertBodyProcessor(type)).     Object answer = extractResultBody(exchange).     return camelContext.getTypeConverter().convertTo(type, answer). }
false;public;4;5;;public <T> T requestBodyAndHeaders(Endpoint endpoint, Object body, Map<String, Object> headers, Class<T> type) {     Exchange exchange = send(endpoint, ExchangePattern.InOut, createBodyAndHeaders(body, headers), createConvertBodyProcessor(type)).     Object answer = extractResultBody(exchange).     return camelContext.getTypeConverter().convertTo(type, answer). }
false;public;1;3;;// Methods using the default endpoint // ----------------------------------------------------------------------- public void sendBody(Object body) {     sendBody(getMandatoryDefaultEndpoint(), body). }
false;public;1;3;;public Exchange send(Exchange exchange) {     return send(getMandatoryDefaultEndpoint(), exchange). }
false;public;1;3;;public Exchange send(Processor processor) {     return send(getMandatoryDefaultEndpoint(), processor). }
false;public;3;3;;public void sendBodyAndHeader(Object body, String header, Object headerValue) {     sendBodyAndHeader(getMandatoryDefaultEndpoint(), body, header, headerValue). }
false;public;3;3;;public void sendBodyAndProperty(Object body, String property, Object propertyValue) {     sendBodyAndProperty(getMandatoryDefaultEndpoint(), body, property, propertyValue). }
false;public;2;3;;public void sendBodyAndHeaders(Object body, Map<String, Object> headers) {     sendBodyAndHeaders(getMandatoryDefaultEndpoint(), body, headers). }
false;public;0;3;;// Properties // ----------------------------------------------------------------------- public CamelContext getCamelContext() {     return camelContext. }
false;public;0;3;;public Endpoint getDefaultEndpoint() {     return defaultEndpoint. }
false;public;1;3;;public void setDefaultEndpoint(Endpoint defaultEndpoint) {     this.defaultEndpoint = defaultEndpoint. }
true;public;1;3;/**  * Sets the default endpoint to use if none is specified  */ ;/**  * Sets the default endpoint to use if none is specified  */ public void setDefaultEndpointUri(String endpointUri) {     setDefaultEndpoint(getCamelContext().getEndpoint(endpointUri)). }
false;public;1;5;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setHeader(header, headerValue).     in.setBody(body). }
false;protected;3;9;;// Implementation methods // ----------------------------------------------------------------------- protected Processor createBodyAndHeaderProcessor(final Object body, final String header, final Object headerValue) {     return new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setHeader(header, headerValue).             in.setBody(body).         }     }. }
false;public;1;9;;public void process(Exchange exchange) {     Message in = exchange.getIn().     if (headers != null) {         for (Map.Entry<String, Object> header : headers.entrySet()) {             in.setHeader(header.getKey(), header.getValue()).         }     }     in.setBody(body). }
false;protected;2;13;;protected Processor createBodyAndHeaders(final Object body, final Map<String, Object> headers) {     return new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             if (headers != null) {                 for (Map.Entry<String, Object> header : headers.entrySet()) {                     in.setHeader(header.getKey(), header.getValue()).                 }             }             in.setBody(body).         }     }. }
false;public;1;5;;public void process(Exchange exchange) {     exchange.setProperty(property, propertyValue).     Message in = exchange.getIn().     in.setBody(body). }
false;protected;3;9;;protected Processor createBodyAndPropertyProcessor(final Object body, final String property, final Object propertyValue) {     return new Processor() {          public void process(Exchange exchange) {             exchange.setProperty(property, propertyValue).             Message in = exchange.getIn().             in.setBody(body).         }     }. }
false;public;1;4;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setBody(body). }
false;protected;1;8;;protected Processor createSetBodyProcessor(final Object body) {     return new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setBody(body).         }     }. }
false;protected;1;3;;protected Processor createConvertBodyProcessor(final Class<?> type) {     return new ConvertBodyProcessor(type). }
false;protected;1;14;;protected Function<Exchange, Exchange> createCompletionFunction(Synchronization onCompletion) {     return (answer) -> {         // to the unit of work that is injected in routes         if (answer.isFailed()) {             onCompletion.onFailure(answer).         } else {             onCompletion.onComplete(answer).         }         return answer.     }. }
false;protected;1;7;;protected Endpoint resolveMandatoryEndpoint(String endpointUri) {     Endpoint endpoint = camelContext.getEndpoint(endpointUri).     if (endpoint == null) {         throw new NoSuchEndpointException(endpointUri).     }     return endpoint. }
false;protected;0;5;;protected Endpoint getMandatoryDefaultEndpoint() {     Endpoint answer = getDefaultEndpoint().     ObjectHelper.notNull(answer, "defaultEndpoint").     return answer. }
false;protected;1;3;;protected Object extractResultBody(Exchange result) {     return extractResultBody(result, null). }
false;protected;2;3;;protected Object extractResultBody(Exchange result, ExchangePattern pattern) {     return ExchangeHelper.extractResultBody(result, pattern). }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executor = executorService. }
false;public;2;3;;public CompletableFuture<Exchange> asyncSend(final String uri, final Exchange exchange) {     return asyncSend(resolveMandatoryEndpoint(uri), exchange). }
false;public;2;3;;public CompletableFuture<Exchange> asyncSend(final String uri, final Processor processor) {     return asyncSend(resolveMandatoryEndpoint(uri), processor). }
false;public;2;3;;public CompletableFuture<Object> asyncSendBody(final String uri, final Object body) {     return asyncSendBody(resolveMandatoryEndpoint(uri), body). }
false;public;2;3;;public CompletableFuture<Object> asyncRequestBody(final String uri, final Object body) {     return asyncRequestBody(resolveMandatoryEndpoint(uri), body). }
false;public;3;3;;public <T> CompletableFuture<T> asyncRequestBody(final String uri, final Object body, final Class<T> type) {     return asyncRequestBody(resolveMandatoryEndpoint(uri), createSetBodyProcessor(body), type). }
false;public;4;3;;public CompletableFuture<Object> asyncRequestBodyAndHeader(final String endpointUri, final Object body, final String header, final Object headerValue) {     return asyncRequestBodyAndHeader(resolveMandatoryEndpoint(endpointUri), body, header, headerValue). }
false;public;5;3;;public <T> CompletableFuture<T> asyncRequestBodyAndHeader(final String endpointUri, final Object body, final String header, final Object headerValue, final Class<T> type) {     return asyncRequestBodyAndHeader(resolveMandatoryEndpoint(endpointUri), body, header, headerValue, type). }
false;public;3;3;;public CompletableFuture<Object> asyncRequestBodyAndHeaders(final String endpointUri, final Object body, final Map<String, Object> headers) {     return asyncRequestBodyAndHeaders(resolveMandatoryEndpoint(endpointUri), body, headers). }
false;public;4;3;;public <T> CompletableFuture<T> asyncRequestBodyAndHeaders(final String endpointUri, final Object body, final Map<String, Object> headers, final Class<T> type) {     return asyncRequestBodyAndHeaders(resolveMandatoryEndpoint(endpointUri), body, headers, type). }
false;public;2;3;;public <T> T extractFutureBody(Future<?> future, Class<T> type) {     return ExchangeHelper.extractFutureBody(camelContext, future, type). }
false;public;4;3;;public <T> T extractFutureBody(Future<?> future, long timeout, TimeUnit unit, Class<T> type) throws TimeoutException {     return ExchangeHelper.extractFutureBody(camelContext, future, timeout, unit, type). }
false;public;3;3;;public CompletableFuture<Object> asyncCallbackSendBody(String uri, Object body, Synchronization onCompletion) {     return asyncCallbackSendBody(resolveMandatoryEndpoint(uri), body, onCompletion). }
false;public;3;3;;public CompletableFuture<Object> asyncCallbackSendBody(Endpoint endpoint, Object body, Synchronization onCompletion) {     return asyncCallback(endpoint, ExchangePattern.InOnly, body, onCompletion). }
false;public;3;3;;public CompletableFuture<Object> asyncCallbackRequestBody(String uri, Object body, Synchronization onCompletion) {     return asyncCallbackRequestBody(resolveMandatoryEndpoint(uri), body, onCompletion). }
false;public;3;3;;public CompletableFuture<Object> asyncCallbackRequestBody(Endpoint endpoint, Object body, Synchronization onCompletion) {     return asyncCallback(endpoint, ExchangePattern.InOut, body, onCompletion). }
false;public;3;3;;public CompletableFuture<Exchange> asyncCallback(String uri, Exchange exchange, Synchronization onCompletion) {     return asyncCallback(resolveMandatoryEndpoint(uri), exchange, onCompletion). }
false;public;3;3;;public CompletableFuture<Exchange> asyncCallback(String uri, Processor processor, Synchronization onCompletion) {     return asyncCallback(resolveMandatoryEndpoint(uri), processor, onCompletion). }
false;public;2;3;;public CompletableFuture<Object> asyncRequestBody(final Endpoint endpoint, final Object body) {     return asyncRequestBody(endpoint, createSetBodyProcessor(body)). }
false;public;3;3;;public <T> CompletableFuture<T> asyncRequestBody(Endpoint endpoint, Object body, Class<T> type) {     return asyncRequestBody(endpoint, createSetBodyProcessor(body), type). }
false;public;4;4;;public CompletableFuture<Object> asyncRequestBodyAndHeader(final Endpoint endpoint, final Object body, final String header, final Object headerValue) {     return asyncRequestBody(endpoint, createBodyAndHeaderProcessor(body, header, headerValue)). }
false;protected;3;4;;protected <T> CompletableFuture<T> asyncRequestBody(final Endpoint endpoint, Processor processor, final Class<T> type) {     return asyncRequestBody(endpoint, processor, createConvertBodyProcessor(type)).thenApply(answer -> camelContext.getTypeConverter().convertTo(type, answer)). }
false;public;5;4;;public <T> CompletableFuture<T> asyncRequestBodyAndHeader(final Endpoint endpoint, final Object body, final String header, final Object headerValue, final Class<T> type) {     return asyncRequestBody(endpoint, createBodyAndHeaderProcessor(body, header, headerValue), type). }
false;public;3;4;;public CompletableFuture<Object> asyncRequestBodyAndHeaders(final Endpoint endpoint, final Object body, final Map<String, Object> headers) {     return asyncRequestBody(endpoint, createBodyAndHeaders(body, headers)). }
false;public;4;4;;public <T> CompletableFuture<T> asyncRequestBodyAndHeaders(final Endpoint endpoint, final Object body, final Map<String, Object> headers, final Class<T> type) {     return asyncRequestBody(endpoint, createBodyAndHeaders(body, headers), type). }
false;public;2;3;;public CompletableFuture<Exchange> asyncSend(final Endpoint endpoint, final Exchange exchange) {     return asyncSendExchange(endpoint, null, null, null, exchange). }
false;public;2;3;;public CompletableFuture<Exchange> asyncSend(final Endpoint endpoint, final Processor processor) {     return asyncSend(endpoint, null, processor, null). }
false;public;2;4;;public CompletableFuture<Object> asyncSendBody(final Endpoint endpoint, final Object body) {     return asyncSend(endpoint, createSetBodyProcessor(body)).thenApply(this::extractResultBody). }
false;public;3;3;;public CompletableFuture<Exchange> asyncCallback(final Endpoint endpoint, final Exchange exchange, final Synchronization onCompletion) {     return asyncSend(endpoint, exchange).thenApply(createCompletionFunction(onCompletion)). }
false;public;3;3;;public CompletableFuture<Exchange> asyncCallback(final Endpoint endpoint, final Processor processor, final Synchronization onCompletion) {     return asyncSend(endpoint, processor).thenApply(createCompletionFunction(onCompletion)). }
false;protected;2;3;;protected CompletableFuture<Object> asyncRequestBody(final Endpoint endpoint, Processor processor) {     return asyncRequestBody(endpoint, processor, (Processor) null). }
false;protected;3;4;;protected CompletableFuture<Object> asyncRequestBody(final Endpoint endpoint, Processor processor, Processor resultProcessor) {     return asyncRequest(endpoint, processor, resultProcessor).thenApply(e -> extractResultBody(e, ExchangePattern.InOut)). }
false;protected;3;4;;protected CompletableFuture<Exchange> asyncRequest(Endpoint endpoint, Processor processor, Processor resultProcessor) {     return asyncSend(endpoint, ExchangePattern.InOut, processor, resultProcessor). }
false;protected;4;4;;protected CompletableFuture<Exchange> asyncSend(Endpoint endpoint, ExchangePattern pattern, Processor processor, Processor resultProcessor) {     return asyncSendExchange(endpoint, pattern, processor, resultProcessor, null). }
false;protected;5;8;;protected CompletableFuture<Exchange> asyncSendExchange(Endpoint endpoint, ExchangePattern pattern, Processor processor, Processor resultProcessor, Exchange inExchange) {     CompletableFuture<Exchange> exchangeFuture = new CompletableFuture<>().     getExecutorService().submit(() -> getProducerCache().asyncSendExchange(endpoint, pattern, processor, resultProcessor, inExchange, exchangeFuture)).     return exchangeFuture. }
false;protected;4;14;;protected CompletableFuture<Object> asyncCallback(final Endpoint endpoint, final ExchangePattern pattern, final Object body, final Synchronization onCompletion) {     return asyncSend(endpoint, pattern, createSetBodyProcessor(body), null).thenApply(createCompletionFunction(onCompletion)).thenApply(answer -> {         Object result = extractResultBody(answer, pattern).         if (pattern.isOutCapable()) {             return result.         } else {             // return null if not OUT capable             return null.         }     }). }
false;private;0;6;;private org.apache.camel.spi.ProducerCache getProducerCache() {     if (!isStarted()) {         throw new IllegalStateException("ProducerTemplate has not been started").     }     return producerCache. }
false;private;0;24;;private ExecutorService getExecutorService() {     if (!isStarted()) {         throw new IllegalStateException("ProducerTemplate has not been started").     }     if (executor != null) {         return executor.     }     // create a default executor which must be synchronized     synchronized (this) {         if (executor != null) {             return executor.         }         if (!threadedAsyncMode) {             executor = new SynchronousExecutorService().         } else {             executor = camelContext.getExecutorServiceManager().newDefaultThreadPool(this, "ProducerTemplate").         }     }     ObjectHelper.notNull(executor, "ExecutorService").     return executor. }
false;protected;0;13;;protected void doStart() throws Exception {     if (producerCache == null) {         producerCache = new DefaultProducerCache(this, camelContext, maximumCacheSize).         producerCache.setEventNotifierEnabled(isEventNotifierEnabled()).     }     // need to lookup default endpoint as it may have been intercepted     if (defaultEndpoint != null) {         defaultEndpoint = camelContext.getEndpoint(defaultEndpoint.getEndpointUri()).     }     ServiceHelper.startService(producerCache). }
false;protected;0;9;;protected void doStop() throws Exception {     ServiceHelper.stopService(producerCache).     producerCache = null.     if (executor != null) {         camelContext.getExecutorServiceManager().shutdownNow(executor).         executor = null.     } }
