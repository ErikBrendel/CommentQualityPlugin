commented;modifiers;parameterAmount;loc;comment;code
false;public;1;28;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     Processor childProcessor = this.createChildProcessor(routeContext, true).     definition.setAggregationStrategy(createAggregationStrategy(routeContext)).     boolean isParallelProcessing = definition.getParallelProcessing() != null && definition.getParallelProcessing().     boolean isStreaming = definition.getStreaming() != null && definition.getStreaming().     boolean isShareUnitOfWork = definition.getShareUnitOfWork() != null && definition.getShareUnitOfWork().     boolean isParallelAggregate = definition.getParallelAggregate() != null && definition.getParallelAggregate().     boolean isStopOnAggregateException = definition.getStopOnAggregateException() != null && definition.getStopOnAggregateException().     boolean shutdownThreadPool = ProcessorDefinitionHelper.willCreateNewThreadPool(routeContext, definition, isParallelProcessing).     ExecutorService threadPool = ProcessorDefinitionHelper.getConfiguredExecutorService(routeContext, "Split", definition, isParallelProcessing).     long timeout = definition.getTimeout() != null ? definition.getTimeout() : 0.     if (timeout > 0 && !isParallelProcessing) {         throw new IllegalArgumentException("Timeout is used but ParallelProcessing has not been enabled.").     }     if (definition.getOnPrepareRef() != null) {         definition.setOnPrepare(CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), definition.getOnPrepareRef(), Processor.class)).     }     Expression exp = definition.getExpression().createExpression(routeContext).     Splitter answer = new Splitter(routeContext.getCamelContext(), exp, childProcessor, definition.getAggregationStrategy(), isParallelProcessing, threadPool, shutdownThreadPool, isStreaming, definition.isStopOnException(), timeout, definition.getOnPrepare(), isShareUnitOfWork, isParallelAggregate, isStopOnAggregateException).     return answer. }
false;private;1;29;;private AggregationStrategy createAggregationStrategy(RouteContext routeContext) {     AggregationStrategy strategy = definition.getAggregationStrategy().     if (strategy == null && definition.getStrategyRef() != null) {         Object aggStrategy = routeContext.lookup(definition.getStrategyRef(), Object.class).         if (aggStrategy instanceof AggregationStrategy) {             strategy = (AggregationStrategy) aggStrategy.         } else if (aggStrategy != null) {             AggregationStrategyBeanAdapter adapter = new AggregationStrategyBeanAdapter(aggStrategy, definition.getStrategyMethodName()).             if (definition.getStrategyMethodAllowNull() != null) {                 adapter.setAllowNullNewExchange(definition.getStrategyMethodAllowNull()).                 adapter.setAllowNullOldExchange(definition.getStrategyMethodAllowNull()).             }             strategy = adapter.         } else {             throw new IllegalArgumentException("Cannot find AggregationStrategy in Registry with name: " + definition.getStrategyRef()).         }     }     if (strategy instanceof CamelContextAware) {         ((CamelContextAware) strategy).setCamelContext(routeContext.getCamelContext()).     }     if (strategy != null && definition.getShareUnitOfWork() != null && definition.getShareUnitOfWork()) {         // wrap strategy in share unit of work         strategy = new ShareUnitOfWorkAggregationStrategy(strategy).     }     return strategy. }
