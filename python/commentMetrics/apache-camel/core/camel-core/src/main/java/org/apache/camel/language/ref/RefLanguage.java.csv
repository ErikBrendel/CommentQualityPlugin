commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;public static Expression ref(Object value) {     String ref = value.toString().     return ExpressionBuilder.refExpression(ref). }
false;public;1;3;;public Predicate createPredicate(String expression) {     return ExpressionToPredicateAdapter.toPredicate(createExpression(expression)). }
false;public;1;18;;public Object evaluate(Exchange exchange) {     Expression target = null.     Object lookup = exp.evaluate(exchange, Object.class).     // must favor expression over predicate     if (lookup instanceof Expression) {         target = (Expression) lookup.     } else if (lookup instanceof Predicate) {         target = PredicateToExpressionAdapter.toExpression((Predicate) lookup).     }     if (target != null) {         return target.evaluate(exchange, Object.class).     } else {         throw new IllegalArgumentException("Cannot find expression or predicate in registry with ref: " + expression).     } }
false;public;0;3;;public String toString() {     return exp.toString(). }
false;public;1;27;;public Expression createExpression(final String expression) {     final Expression exp = RefLanguage.ref(expression).     return new ExpressionAdapter() {          public Object evaluate(Exchange exchange) {             Expression target = null.             Object lookup = exp.evaluate(exchange, Object.class).             // must favor expression over predicate             if (lookup instanceof Expression) {                 target = (Expression) lookup.             } else if (lookup instanceof Predicate) {                 target = PredicateToExpressionAdapter.toExpression((Predicate) lookup).             }             if (target != null) {                 return target.evaluate(exchange, Object.class).             } else {                 throw new IllegalArgumentException("Cannot find expression or predicate in registry with ref: " + expression).             }         }          public String toString() {             return exp.toString().         }     }. }
false;public;0;3;;public boolean isSingleton() {     return true. }
