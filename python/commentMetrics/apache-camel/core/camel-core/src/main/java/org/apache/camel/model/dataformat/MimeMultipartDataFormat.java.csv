commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;18;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (getMultipartSubType() != null) {         setProperty(camelContext, dataFormat, "multipartSubType", getMultipartSubType()).     }     if (getMultipartWithoutAttachment() != null) {         setProperty(camelContext, dataFormat, "multipartWithoutAttachment", getMultipartWithoutAttachment()).     }     if (getHeadersInline() != null) {         setProperty(camelContext, dataFormat, "headersInline", getHeadersInline()).     }     if (getIncludeHeaders() != null) {         setProperty(camelContext, dataFormat, "includeHeaders", getIncludeHeaders()).     }     if (getBinaryContent() != null) {         setProperty(camelContext, dataFormat, "binaryContent", getBinaryContent()).     } }
false;public;0;3;;public String getMultipartSubType() {     return multipartSubType. }
true;public;1;3;/**  * Specify the subtype of the MIME Multipart.  * <p>  * Default is "mixed".  */ ;/**  * Specify the subtype of the MIME Multipart.  * <p>  * Default is "mixed".  */ public void setMultipartSubType(String multipartSubType) {     this.multipartSubType = multipartSubType. }
false;public;0;3;;public Boolean getMultipartWithoutAttachment() {     return multipartWithoutAttachment. }
true;public;1;3;/**  * Defines whether a message without attachment is also marshaled into a  * MIME Multipart (with only one body part).  * <p>  * Default is "false".  */ ;/**  * Defines whether a message without attachment is also marshaled into a  * MIME Multipart (with only one body part).  * <p>  * Default is "false".  */ public void setMultipartWithoutAttachment(Boolean multipartWithoutAttachment) {     this.multipartWithoutAttachment = multipartWithoutAttachment. }
false;public;0;3;;public Boolean getHeadersInline() {     return headersInline. }
true;public;1;3;/**  * Defines whether the MIME-Multipart headers are part of the message body  * (true) or are set as Camel headers (false).  * <p>  * Default is "false".  */ ;/**  * Defines whether the MIME-Multipart headers are part of the message body  * (true) or are set as Camel headers (false).  * <p>  * Default is "false".  */ public void setHeadersInline(Boolean headersInline) {     this.headersInline = headersInline. }
false;public;0;3;;public Boolean getBinaryContent() {     return binaryContent. }
true;public;1;3;/**  * A regex that defines which Camel headers are also included as MIME headers  * into the MIME multipart. This will only work if headersInline is set to true.  * <p>  * Default is to include no headers  */ ;/**  * A regex that defines which Camel headers are also included as MIME headers  * into the MIME multipart. This will only work if headersInline is set to true.  * <p>  * Default is to include no headers  */ public void setIncludeHeaders(String includeHeaders) {     this.includeHeaders = includeHeaders. }
false;public;0;3;;public String getIncludeHeaders() {     return includeHeaders. }
true;public;1;3;/**  * Defines whether the content of binary parts in the MIME multipart is  * binary (true) or Base-64 encoded (false)  * <p>  * Default is "false".  */ ;/**  * Defines whether the content of binary parts in the MIME multipart is  * binary (true) or Base-64 encoded (false)  * <p>  * Default is "false".  */ public void setBinaryContent(Boolean binaryContent) {     this.binaryContent = binaryContent. }
