commented;modifiers;parameterAmount;loc;comment;code
true;public,static;0;3;/**  * As we have to find the hostname as a side-affect of generating a unique  * stub, we allow it's easy retrieval here  *  * @return the local host name  */ ;/**  * As we have to find the hostname as a side-affect of generating a unique  * stub, we allow it's easy retrieval here  *  * @return the local host name  */ public static String getHostName() {     return hostName. }
false;public,static;1;21;;public static String sanitizeHostName(String hostName) {     boolean changed = false.     StringBuilder sb = new StringBuilder().     for (char ch : hostName.toCharArray()) {         // only include ASCII chars         if (ch < 127) {             sb.append(ch).         } else {             changed = true.         }     }     if (changed) {         String newHost = sb.toString().         LOG.info("Sanitized hostname from: {} to: {}", hostName, newHost).         return newHost.     } else {         return hostName.     } }
false;public;0;6;;public String generateUuid() {     StringBuilder sb = new StringBuilder(length).     sb.append(seed).     sb.append(sequence.getAndIncrement()).     return sb.toString(). }
true;public;0;3;/**  * Generate a unique ID - that is friendly for a URL or file system  *  * @return a unique id  */ ;/**  * Generate a unique ID - that is friendly for a URL or file system  *  * @return a unique id  */ public String generateSanitizedId() {     return generateSanitizedId(generateUuid()). }
true;public,static;1;7;/**  * Ensures that the id is friendly for a URL or file system  *  * @param id the unique id  * @return the id as file friendly id  */ ;/**  * Ensures that the id is friendly for a URL or file system  *  * @param id the unique id  * @return the id as file friendly id  */ public static String generateSanitizedId(String id) {     id = id.replace(':', '-').     id = id.replace('_', '-').     id = id.replace('.', '-').     id = id.replace('/', '-').     return id. }
