commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getDefinition() {     return definition. }
true;public;1;3;/**  * The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap.  */ ;/**  * The flatpack pzmap configuration file. Can be omitted in simpler situations, but its preferred to use the pzmap.  */ public void setDefinition(String definition) {     this.definition = definition. }
false;public;0;3;;public Boolean getFixed() {     return fixed. }
true;public;1;3;/**  * Delimited or fixed.  * Is by default false = delimited  */ ;/**  * Delimited or fixed.  * Is by default false = delimited  */ public void setFixed(Boolean fixed) {     this.fixed = fixed. }
false;public;0;3;;public Boolean getIgnoreFirstRecord() {     return ignoreFirstRecord. }
true;public;1;3;/**  * Whether the first line is ignored for delimited files (for the column headers).  * <p/>  * Is by default true.  */ ;/**  * Whether the first line is ignored for delimited files (for the column headers).  * <p/>  * Is by default true.  */ public void setIgnoreFirstRecord(Boolean ignoreFirstRecord) {     this.ignoreFirstRecord = ignoreFirstRecord. }
false;public;0;3;;public String getTextQualifier() {     return textQualifier. }
true;public;1;3;/**  * If the text is qualified with a character.  * <p/>  * Uses quote character by default.  */ ;/**  * If the text is qualified with a character.  * <p/>  * Uses quote character by default.  */ public void setTextQualifier(String textQualifier) {     this.textQualifier = textQualifier. }
false;public;0;3;;public String getDelimiter() {     return delimiter. }
true;public;1;3;/**  * The delimiter char (could be . , or similar)  */ ;/**  * The delimiter char (could be . , or similar)  */ public void setDelimiter(String delimiter) {     this.delimiter = delimiter. }
false;public;0;3;;public Boolean getAllowShortLines() {     return allowShortLines. }
true;public;1;3;/**  * Allows for lines to be shorter than expected and ignores the extra characters  */ ;/**  * Allows for lines to be shorter than expected and ignores the extra characters  */ public void setAllowShortLines(Boolean allowShortLines) {     this.allowShortLines = allowShortLines. }
false;public;0;3;;public Boolean getIgnoreExtraColumns() {     return ignoreExtraColumns. }
true;public;1;3;/**  * Allows for lines to be longer than expected and ignores the extra characters.  */ ;/**  * Allows for lines to be longer than expected and ignores the extra characters.  */ public void setIgnoreExtraColumns(Boolean ignoreExtraColumns) {     this.ignoreExtraColumns = ignoreExtraColumns. }
false;public;0;3;;public String getParserFactoryRef() {     return parserFactoryRef. }
true;public;1;3;/**  * References to a custom parser factory to lookup in the registry  */ ;/**  * References to a custom parser factory to lookup in the registry  */ public void setParserFactoryRef(String parserFactoryRef) {     this.parserFactoryRef = parserFactoryRef. }
false;protected;1;11;;@Override protected DataFormat createDataFormat(RouteContext routeContext) {     DataFormat flatpack = super.createDataFormat(routeContext).     if (ObjectHelper.isNotEmpty(parserFactoryRef)) {         Object parserFactory = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), parserFactoryRef).         setProperty(routeContext.getCamelContext(), flatpack, "parserFactory", parserFactory).     }     return flatpack. }
false;protected;2;30;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (ObjectHelper.isNotEmpty(definition)) {         setProperty(camelContext, dataFormat, "definition", definition).     }     if (fixed != null) {         setProperty(camelContext, dataFormat, "fixed", fixed).     }     if (ignoreFirstRecord != null) {         setProperty(camelContext, dataFormat, "ignoreFirstRecord", ignoreFirstRecord).     }     if (ObjectHelper.isNotEmpty(textQualifier)) {         if (textQualifier.length() > 1) {             throw new IllegalArgumentException("Text qualifier must be one character long!").         }         setProperty(camelContext, dataFormat, "textQualifier", textQualifier.charAt(0)).     }     if (ObjectHelper.isNotEmpty(delimiter)) {         if (delimiter.length() > 1) {             throw new IllegalArgumentException("Delimiter must be one character long!").         }         setProperty(camelContext, dataFormat, "delimiter", delimiter.charAt(0)).     }     if (allowShortLines != null) {         setProperty(camelContext, dataFormat, "allowShortLines", allowShortLines).     }     if (ignoreExtraColumns != null) {         setProperty(camelContext, dataFormat, "ignoreExtraColumns", ignoreExtraColumns).     } }
