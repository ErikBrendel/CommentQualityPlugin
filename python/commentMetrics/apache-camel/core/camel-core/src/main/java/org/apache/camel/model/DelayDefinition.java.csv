commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getShortName() {     return "delay". }
false;public;0;4;;@Override public String getLabel() {     return "delay[" + getExpression() + "]". }
false;public;0;4;;@Override public String toString() {     return "Delay[" + getExpression() + " -> " + getOutputs() + "]". }
true;public;1;4;/**  * Sets the delay time in millis to delay  *  * @param delay delay time in millis  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Sets the delay time in millis to delay  *  * @param delay delay time in millis  * @return the builder  */ public DelayDefinition delayTime(Long delay) {     setExpression(ExpressionNodeHelper.toExpressionDefinition(ExpressionBuilder.constantExpression(delay))).     return this. }
true;public;1;4;/**  * Whether or not the caller should run the task when it was rejected by the thread pool.  * <p/>  * Is by default <tt>true</tt>  *  * @param callerRunsWhenRejected whether or not the caller should run  * @return the builder  */ ;/**  * Whether or not the caller should run the task when it was rejected by the thread pool.  * <p/>  * Is by default <tt>true</tt>  *  * @param callerRunsWhenRejected whether or not the caller should run  * @return the builder  */ public DelayDefinition callerRunsWhenRejected(boolean callerRunsWhenRejected) {     setCallerRunsWhenRejected(callerRunsWhenRejected).     return this. }
true;public;0;4;/**  * Enables asynchronous delay which means the thread will <b>not</b> block while delaying.  */ ;/**  * Enables asynchronous delay which means the thread will <b>not</b> block while delaying.  */ public DelayDefinition asyncDelayed() {     setAsyncDelayed(true).     return this. }
true;public;0;4;/**  * Enables asynchronous delay which means the thread will <b>not</b> block while delaying.  */ ;/**  * Enables asynchronous delay which means the thread will <b>not</b> block while delaying.  */ public DelayDefinition syncDelayed() {     setAsyncDelayed(false).     return this. }
true;public;1;4;/**  * To use a custom Thread Pool if asyncDelay has been enabled.  */ ;/**  * To use a custom Thread Pool if asyncDelay has been enabled.  */ public DelayDefinition executorService(ExecutorService executorService) {     setExecutorService(executorService).     return this. }
true;public;1;4;/**  * Refers to a custom Thread Pool if asyncDelay has been enabled.  */ ;/**  * Refers to a custom Thread Pool if asyncDelay has been enabled.  */ public DelayDefinition executorServiceRef(String executorServiceRef) {     setExecutorServiceRef(executorServiceRef).     return this. }
true;public;1;5;/**  * Expression to define how long time to wait (in millis)  */ ;// Properties // ------------------------------------------------------------------------- /**  * Expression to define how long time to wait (in millis)  */ @Override public void setExpression(ExpressionDefinition expression) {     // override to include javadoc what the expression is used for     super.setExpression(expression). }
false;public;0;3;;public Boolean getAsyncDelayed() {     return asyncDelayed. }
false;public;1;3;;public void setAsyncDelayed(Boolean asyncDelayed) {     this.asyncDelayed = asyncDelayed. }
false;public;0;3;;public Boolean getCallerRunsWhenRejected() {     return callerRunsWhenRejected. }
false;public;1;3;;public void setCallerRunsWhenRejected(Boolean callerRunsWhenRejected) {     this.callerRunsWhenRejected = callerRunsWhenRejected. }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executorService = executorService. }
false;public;0;3;;public String getExecutorServiceRef() {     return executorServiceRef. }
false;public;1;3;;public void setExecutorServiceRef(String executorServiceRef) {     this.executorServiceRef = executorServiceRef. }
