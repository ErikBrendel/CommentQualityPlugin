commented;modifiers;parameterAmount;loc;comment;code
false;public;2;32;;public Component resolveComponent(String name, CamelContext context) {     // lookup in registry first     Component componentReg = ResolverHelper.lookupComponentInRegistryWithFallback(context, name).     if (componentReg != null) {         return componentReg.     }     // not in registry then use component factory     Class<?> type.     try {         type = findComponent(name, context).         if (type == null) {             // not found             return null.         }     } catch (NoFactoryAvailableException e) {         return null.     } catch (Exception e) {         throw new IllegalArgumentException("Invalid URI, no Component registered for scheme: " + name, e).     }     if (getLog().isDebugEnabled()) {         getLog().debug("Found component: {} via type: {} via: {}{}", name, type.getName(), factoryFinder.getResourcePath(), name).     }     // create the component     if (Component.class.isAssignableFrom(type)) {         return (Component) context.getInjector().newInstance(type).     } else {         throw new IllegalArgumentException("Type is not a Component implementation. Found: " + type.getName()).     } }
false;private;2;6;;private Class<?> findComponent(String name, CamelContext context) throws ClassNotFoundException, IOException {     if (factoryFinder == null) {         factoryFinder = context.getFactoryFinder(RESOURCE_PATH).     }     return factoryFinder.findClass(name). }
false;protected;0;3;;protected Logger getLog() {     return LOG. }
