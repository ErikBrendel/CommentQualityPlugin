commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">bean expression</a>  * value builder.  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">bean expression</a>  * value builder.  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @return the builder  */ public static ValueBuilder bean(final Object beanOrBeanRef) {     return bean(beanOrBeanRef, null). }
true;public,static;2;9;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">bean expression</a>  * value builder.  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @param method the method name  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">bean expression</a>  * value builder.  * <p/>  * This method accepts dual parameters. Either an bean instance or a reference to a bean (String).  *  * @param beanOrBeanRef  either an instanceof a bean or a reference to bean to lookup in the Registry  * @param method the method name  * @return the builder  */ public static ValueBuilder bean(Object beanOrBeanRef, String method) {     Expression exp.     if (beanOrBeanRef instanceof String) {         exp = new MethodCallExpression((String) beanOrBeanRef, method).     } else {         exp = new MethodCallExpression(beanOrBeanRef, method).     }     return new ValueBuilder(exp). }
true;public,static;2;4;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">bean expression</a>  * value builder  *  * @param beanType the bean class which will be invoked  * @param method   name of method to invoke  * @return the builder  */ ;/**  * Returns a <a href="http://camel.apache.org/bean-language.html">bean expression</a>  * value builder  *  * @param beanType the bean class which will be invoked  * @param method   name of method to invoke  * @return the builder  */ public static ValueBuilder bean(Class<?> beanType, String method) {     Expression exp = new MethodCallExpression(beanType, method).     return new ValueBuilder(exp). }
true;public,static;1;9;/**  * Returns a constant expression  */ ;/**  * Returns a constant expression  */ public static ValueBuilder constant(Object value) {     Expression exp.     if (value instanceof String) {         exp = new ConstantExpression((String) value).     } else {         exp = ExpressionBuilder.constantExpression(value).     }     return new ValueBuilder(exp). }
true;public,static;2;4;/**  * Returns a constant expression  */ ;/**  * Returns a constant expression  */ public static ValueBuilder language(String language, String expression) {     Expression exp = new LanguageExpression(language, expression).     return new ValueBuilder(exp). }
true;public,static;1;4;/**  * Returns a simple expression  */ ;/**  * Returns a simple expression  */ public static ValueBuilder simple(String value) {     Expression exp = new SimpleExpression(value).     return new ValueBuilder(exp). }
true;public,static;2;5;/**  * Returns a simple expression  */ ;/**  * Returns a simple expression  */ public static ValueBuilder simple(String value, Class<?> resultType) {     SimpleExpression exp = new SimpleExpression(value).     exp.setResultType(resultType).     return new ValueBuilder(exp). }
true;public,static;1;4;/**  * Returns a predicate and value builder for headers on an exchange  */ ;/**  * Returns a predicate and value builder for headers on an exchange  */ public static ValueBuilder header(String name) {     Expression exp = new HeaderExpression(name).     return new ValueBuilder(exp). }
true;public,static;1;4;/**  * Returns a predicate and value builder for properties on an exchange  */ ;/**  * Returns a predicate and value builder for properties on an exchange  */ public static ValueBuilder exchangeProperty(String name) {     Expression exp = new ExchangePropertyExpression(name).     return new ValueBuilder(exp). }
true;public,static;0;4;/**  * Returns a predicate and value builder for the inbound body on an exchange  */ ;/**  * Returns a predicate and value builder for the inbound body on an exchange  */ public static ValueBuilder body() {     Expression exp = new SimpleExpression("${body}").     return new ValueBuilder(exp). }
true;public,static;1;5;/**  * Returns a predicate and value builder for the inbound message body as a  * specific type  */ ;/**  * Returns a predicate and value builder for the inbound message body as a  * specific type  */ public static <T> ValueBuilder bodyAs(Class<T> type) {     ObjectHelper.notNull(type, "type").     Expression exp = new SimpleExpression(String.format("${bodyAs(%s)}", type.getCanonicalName())).     return new ValueBuilder(exp). }
true;public,static;1;4;/**  * Returns an expression for the given system property  */ ;/**  * Returns an expression for the given system property  */ public static ValueBuilder systemProperty(final String name) {     Expression exp = new SimpleExpression(String.format("${sys.%s}", name)).     return new ValueBuilder(exp). }
true;public,static;2;3;/**  * Returns an expression for the given system property  */ ;/**  * Returns an expression for the given system property  */ public static ValueBuilder systemProperty(final String name, final String defaultValue) {     return new ValueBuilder(ExpressionBuilder.systemPropertyExpression(name, defaultValue)). }
true;public,static;0;4;/**  * Returns a predicate and value builder for the exception message on an exchange  */ ;/**  * Returns a predicate and value builder for the exception message on an exchange  */ public static ValueBuilder exceptionMessage() {     Expression exp = new SimpleExpression("${exception.message}").     return new ValueBuilder(exp). }
true;public,static;0;4;/**  * Returns a predicate and value builder for the exception stacktrace on an exchange  */ ;/**  * Returns a predicate and value builder for the exception stacktrace on an exchange  */ public static ValueBuilder exceptionStackTrace() {     Expression exp = new SimpleExpression("${exception.stacktrace}").     return new ValueBuilder(exp). }
true;public,static;3;4;/**  * Returns an expression that replaces all occurrences of the regular  * expression with the given replacement  */ ;/**  * Returns an expression that replaces all occurrences of the regular  * expression with the given replacement  */ public static ValueBuilder regexReplaceAll(Expression content, String regex, String replacement) {     Expression newExp = ExpressionBuilder.regexReplaceAll(content, regex, replacement).     return new ValueBuilder(newExp). }
true;public,static;3;4;/**  * Returns an expression that replaces all occurrences of the regular  * expression with the given replacement  */ ;/**  * Returns an expression that replaces all occurrences of the regular  * expression with the given replacement  */ public static ValueBuilder regexReplaceAll(Expression content, String regex, Expression replacement) {     Expression newExp = ExpressionBuilder.regexReplaceAll(content, regex, replacement).     return new ValueBuilder(newExp). }
