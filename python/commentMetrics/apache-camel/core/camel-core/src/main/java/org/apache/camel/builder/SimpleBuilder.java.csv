commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static SimpleBuilder simple(String text) {     return new SimpleBuilder(text). }
false;public,static;2;5;;public static SimpleBuilder simple(String text, Class<?> resultType) {     SimpleBuilder answer = simple(text).     answer.setResultType(resultType).     return answer. }
false;public,static;2;3;;public static SimpleBuilder simpleF(String formatText, Object... values) {     return simple(String.format(formatText, values)). }
false;public,static;3;3;;public static SimpleBuilder simpleF(String formatText, Class<?> resultType, Object... values) {     return simple(String.format(formatText, values), resultType). }
false;public;0;3;;public String getText() {     return text. }
false;public;0;3;;public Class<?> getResultType() {     return resultType. }
false;public;1;3;;public void setResultType(Class<?> resultType) {     this.resultType = resultType. }
false;public;1;4;;public SimpleBuilder resultType(Class<?> resultType) {     setResultType(resultType).     return this. }
false;public;1;6;;public boolean matches(Exchange exchange) {     if (predicate == null) {         predicate = createPredicate(exchange).     }     return predicate.matches(exchange). }
false;public;2;6;;public <T> T evaluate(Exchange exchange, Class<T> type) {     if (expression == null) {         expression = createExpression(exchange).     }     return expression.evaluate(exchange, type). }
false;private;1;12;;private Predicate createPredicate(Exchange exchange) {     SimpleLanguage simple = (SimpleLanguage) exchange.getContext().resolveLanguage("simple").     try {         // resolve property placeholders         String resolve = exchange.getContext().resolvePropertyPlaceholders(text).         // and optional it be refer to an external script on the file/classpath         resolve = ScriptHelper.resolveOptionalExternalScript(exchange.getContext(), exchange, resolve).         return simple.createPredicate(resolve).     } catch (Exception e) {         throw CamelExecutionException.wrapCamelExecutionException(exchange, e).     } }
false;private;1;12;;private Expression createExpression(Exchange exchange) {     SimpleLanguage simple = (SimpleLanguage) exchange.getContext().resolveLanguage("simple").     try {         // resolve property placeholders         String resolve = exchange.getContext().resolvePropertyPlaceholders(text).         // and optional it be refer to an external script on the file/classpath         resolve = ScriptHelper.resolveOptionalExternalScript(exchange.getContext(), exchange, resolve).         return simple.createExpression(resolve, resultType).     } catch (Exception e) {         throw CamelExecutionException.wrapCamelExecutionException(exchange, e).     } }
false;public;0;3;;public String toString() {     return "Simple: " + text. }
