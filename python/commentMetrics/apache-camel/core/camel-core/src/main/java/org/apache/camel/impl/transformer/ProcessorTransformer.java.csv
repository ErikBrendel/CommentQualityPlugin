commented;modifiers;parameterAmount;loc;comment;code
true;public;3;33;/**  * Perform data transformation with specified from/to type using Processor.  * @param message message to apply transformation  * @param from 'from' data type  * @param to 'to' data type  */ ;/**  * Perform data transformation with specified from/to type using Processor.  * @param message message to apply transformation  * @param from 'from' data type  * @param to 'to' data type  */ @Override public void transform(Message message, DataType from, DataType to) throws Exception {     Exchange exchange = message.getExchange().     CamelContext context = exchange.getContext().     if (from.isJavaType()) {         Object input = message.getBody().         Class<?> fromClass = context.getClassResolver().resolveClass(from.getName()).         if (!fromClass.isAssignableFrom(input.getClass())) {             LOG.debug("Converting to '{}'", fromClass.getName()).             input = context.getTypeConverter().mandatoryConvertTo(fromClass, input).             message.setBody(input).         }     }     LOG.debug("Sending to transform processor '{}'", processor).     DefaultExchange transformExchange = new DefaultExchange(exchange).     transformExchange.setIn(message).     transformExchange.setProperties(exchange.getProperties()).     processor.process(transformExchange).     Message answer = transformExchange.hasOut() ? transformExchange.getOut() : transformExchange.getIn().     if (to.isJavaType()) {         Object answerBody = answer.getBody().         Class<?> toClass = context.getClassResolver().resolveClass(to.getName()).         if (!toClass.isAssignableFrom(answerBody.getClass())) {             LOG.debug("Converting to '{}'", toClass.getName()).             answerBody = context.getTypeConverter().mandatoryConvertTo(toClass, answerBody).             answer.setBody(answerBody).         }     }     message.copyFrom(answer). }
true;public;1;5;/**  * Set processor to use  *  * @param processor Processor  * @return this ProcessorTransformer instance  */ ;/**  * Set processor to use  *  * @param processor Processor  * @return this ProcessorTransformer instance  */ public ProcessorTransformer setProcessor(Processor processor) {     this.processor = processor.     this.transformerString = null.     return this. }
false;public;0;9;;@Override public String toString() {     if (transformerString == null) {         transformerString = String.format("ProcessorTransformer[scheme='%s', from='%s', to='%s', processor='%s']", getModel(), getFrom(), getTo(), processor).     }     return transformerString. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(processor, "processor", this).     ServiceHelper.startService(this.processor). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(this.processor). }
