commented;modifiers;parameterAmount;loc;comment;code
false;public;2;24;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         Object newHeader = expression.evaluate(exchange, Object.class).         if (exchange.getException() != null) {             // the expression threw an exception so we should break-out             callback.done(true).             return true.         }         boolean out = exchange.hasOut().         Message old = out ? exchange.getOut() : exchange.getIn().         String key = headerName.evaluate(exchange, String.class).         old.setHeader(key, newHeader).     } catch (Throwable e) {         exchange.setException(e).     }     callback.done(true).     return true. }
false;public;0;4;;@Override public String toString() {     return "SetHeader(" + headerName + ", " + expression + ")". }
false;public;0;3;;public String getTraceLabel() {     return "setHeader[" + headerName + ", " + expression + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public String getHeaderName() {     return headerName.toString(). }
false;public;0;3;;public Expression getExpression() {     return expression. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
