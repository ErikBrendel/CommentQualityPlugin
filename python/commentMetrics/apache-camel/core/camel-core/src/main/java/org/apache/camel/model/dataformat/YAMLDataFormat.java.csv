commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public YAMLLibrary getLibrary() {     return library. }
true;public;1;4;/**  * Which yaml library to use.  * <p/>  * By default it is SnakeYAML  */ ;/**  * Which yaml library to use.  * <p/>  * By default it is SnakeYAML  */ public void setLibrary(YAMLLibrary library) {     this.library = library.     setDataFormatName("yaml-" + library.name().toLowerCase()). }
false;public;0;3;;public Class<?> getUnmarshalType() {     return unmarshalType. }
true;public;1;3;/**  * Class of the object to be created  */ ;/**  * Class of the object to be created  */ public void setUnmarshalType(Class<?> type) {     this.unmarshalType = type. }
false;public;0;3;;public String getUnmarshalTypeName() {     return unmarshalTypeName. }
true;public;1;3;/**  * Class name of the java type to use when unarmshalling  */ ;/**  * Class name of the java type to use when unarmshalling  */ public void setUnmarshalTypeName(String unmarshalTypeName) {     this.unmarshalTypeName = unmarshalTypeName. }
false;public;0;3;;public ClassLoader getClassLoader() {     return classLoader. }
true;public;1;3;/**  * Set a custom classloader  */ ;/**  * Set a custom classloader  */ public void setClassLoader(ClassLoader classLoader) {     this.classLoader = classLoader. }
false;public;0;3;;public String getConstructor() {     return constructor. }
true;public;1;3;/**  * BaseConstructor to construct incoming documents.  */ ;/**  * BaseConstructor to construct incoming documents.  */ public void setConstructor(String constructor) {     this.constructor = constructor. }
false;public;0;3;;public String getRepresenter() {     return representer. }
true;public;1;3;/**  * Representer to emit outgoing objects.  */ ;/**  * Representer to emit outgoing objects.  */ public void setRepresenter(String representer) {     this.representer = representer. }
false;public;0;3;;public String getDumperOptions() {     return dumperOptions. }
true;public;1;3;/**  * DumperOptions to configure outgoing objects.  */ ;/**  * DumperOptions to configure outgoing objects.  */ public void setDumperOptions(String dumperOptions) {     this.dumperOptions = dumperOptions. }
false;public;0;3;;public String getResolver() {     return resolver. }
true;public;1;3;/**  * Resolver to detect implicit type  */ ;/**  * Resolver to detect implicit type  */ public void setResolver(String resolver) {     this.resolver = resolver. }
false;public;0;3;;public boolean isUseApplicationContextClassLoader() {     return useApplicationContextClassLoader. }
true;public;1;3;/**  * Use ApplicationContextClassLoader as custom ClassLoader  */ ;/**  * Use ApplicationContextClassLoader as custom ClassLoader  */ public void setUseApplicationContextClassLoader(boolean useApplicationContextClassLoader) {     this.useApplicationContextClassLoader = useApplicationContextClassLoader. }
false;public;0;3;;public boolean isPrettyFlow() {     return prettyFlow. }
true;public;1;3;/**  * Force the emitter to produce a pretty YAML document when using the flow  * style.  */ ;/**  * Force the emitter to produce a pretty YAML document when using the flow  * style.  */ public void setPrettyFlow(boolean prettyFlow) {     this.prettyFlow = prettyFlow. }
false;public;0;3;;public boolean isAllowAnyType() {     return allowAnyType. }
true;public;1;3;/**  * Allow any class to be un-marshaled  */ ;/**  * Allow any class to be un-marshaled  */ public void setAllowAnyType(boolean allowAnyType) {     this.allowAnyType = allowAnyType. }
false;public;0;3;;public List<YAMLTypeFilterDefinition> getTypeFilters() {     return typeFilters. }
true;public;1;3;/**  * Set the types SnakeYAML is allowed to un-marshall  */ ;/**  * Set the types SnakeYAML is allowed to un-marshall  */ public void setTypeFilters(List<YAMLTypeFilterDefinition> typeFilters) {     this.typeFilters = typeFilters. }
false;protected;1;8;;@Override protected DataFormat createDataFormat(RouteContext routeContext) {     if (library == YAMLLibrary.SnakeYAML) {         setProperty(routeContext.getCamelContext(), this, "dataFormatName", "yaml-snakeyaml").     }     return super.createDataFormat(routeContext). }
false;protected;2;6;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (library == YAMLLibrary.SnakeYAML) {         configureSnakeDataFormat(dataFormat, camelContext).     } }
false;protected;2;41;;protected void configureSnakeDataFormat(DataFormat dataFormat, CamelContext camelContext) {     Class<?> yamlUnmarshalType = unmarshalType.     if (yamlUnmarshalType == null && unmarshalTypeName != null) {         try {             yamlUnmarshalType = camelContext.getClassResolver().resolveMandatoryClass(unmarshalTypeName).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     setProperty(dataFormat, camelContext, "unmarshalType", yamlUnmarshalType).     setProperty(dataFormat, camelContext, "classLoader", classLoader).     setProperty(dataFormat, camelContext, "useApplicationContextClassLoader", useApplicationContextClassLoader).     setProperty(dataFormat, camelContext, "prettyFlow", prettyFlow).     setProperty(dataFormat, camelContext, "allowAnyType", allowAnyType).     if (typeFilters != null && !typeFilters.isEmpty()) {         List<String> typeFilterDefinitions = new ArrayList<>(typeFilters.size()).         for (YAMLTypeFilterDefinition definition : typeFilters) {             String value = definition.getValue().             if (!value.startsWith("type") && !value.startsWith("regexp")) {                 YAMLTypeFilterType type = definition.getType().                 if (type == null) {                     type = YAMLTypeFilterType.type.                 }                 value = type.name() + ":" + value.             }             typeFilterDefinitions.add(value).         }         setProperty(dataFormat, camelContext, "typeFilterDefinitions", typeFilterDefinitions).     }     setPropertyRef(dataFormat, camelContext, "constructor", constructor).     setPropertyRef(dataFormat, camelContext, "representer", representer).     setPropertyRef(dataFormat, camelContext, "dumperOptions", dumperOptions).     setPropertyRef(dataFormat, camelContext, "resolver", resolver). }
false;protected;4;5;;protected void setProperty(DataFormat dataFormat, CamelContext camelContext, String propertyName, Object propertyValue) {     if (ObjectHelper.isNotEmpty(propertyValue)) {         setProperty(camelContext, dataFormat, propertyName, propertyValue).     } }
false;protected;4;7;;protected void setPropertyRef(DataFormat dataFormat, CamelContext camelContext, String propertyName, String propertyValue) {     if (ObjectHelper.isNotEmpty(propertyValue)) {         // must be a reference value         String ref = propertyValue.startsWith("#") ? propertyValue : "#" + propertyValue.         setProperty(camelContext, dataFormat, propertyName, ref).     } }
