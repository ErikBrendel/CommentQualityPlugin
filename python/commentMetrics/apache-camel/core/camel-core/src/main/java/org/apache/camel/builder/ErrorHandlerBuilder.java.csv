commented;modifiers;parameterAmount;loc;comment;code
true;;2;1;/**  * Adds error handler for the given exception type  *  * @param routeContext  the route context  * @param exception     the exception to handle  */ ;/**  * Adds error handler for the given exception type  *  * @param routeContext  the route context  * @param exception     the exception to handle  */ void addErrorHandlers(RouteContext routeContext, OnExceptionDefinition exception).
true;;2;1;/**  * Adds the error handlers for the given list of exception types  *  * @param routeContext  the route context  * @param exceptions    the list of exceptions to handle  */ ;/**  * Adds the error handlers for the given list of exception types  *  * @param routeContext  the route context  * @param exceptions    the list of exceptions to handle  */ void setErrorHandlers(RouteContext routeContext, List<OnExceptionDefinition> exceptions).
true;;1;1;/**  * Gets the error handlers  *  * @param routeContext  the route context  */ ;/**  * Gets the error handlers  *  * @param routeContext  the route context  */ List<OnExceptionDefinition> getErrorHandlers(RouteContext routeContext).
true;;0;1;/**  * Gets the exception policy strategy  */ ;/**  * Gets the exception policy strategy  */ ExceptionPolicyStrategy getExceptionPolicyStrategy().
true;;1;1;/**  * Sets the exception policy strategy to use for resolving the {@link org.apache.camel.model.OnExceptionDefinition}  * to use for a given thrown exception  *  * @param exceptionPolicyStrategy  the exception policy strategy  */ ;/**  * Sets the exception policy strategy to use for resolving the {@link org.apache.camel.model.OnExceptionDefinition}  * to use for a given thrown exception  *  * @param exceptionPolicyStrategy  the exception policy strategy  */ void setExceptionPolicyStrategy(ExceptionPolicyStrategy exceptionPolicyStrategy).
true;;0;1;/**  * Whether this error handler supports transacted exchanges.  */ ;/**  * Whether this error handler supports transacted exchanges.  */ boolean supportTransacted().
true;;2;1;/**  * Configures the other error handler based on this error handler.  *  * @param routeContext the route context  * @param handler the other error handler  */ ;/**  * Configures the other error handler based on this error handler.  *  * @param routeContext the route context  * @param handler the other error handler  */ void configure(RouteContext routeContext, ErrorHandler handler).
true;;0;1;/**  * Clones this builder so each {@link RouteBuilder} has its private builder  * to use, to avoid changes from one {@link RouteBuilder} to influence the  * others.  * <p/>  * This is needed by the current Camel 2.x architecture.  *  * @return a clone of this {@link ErrorHandlerBuilder}  */ ;/**  * Clones this builder so each {@link RouteBuilder} has its private builder  * to use, to avoid changes from one {@link RouteBuilder} to influence the  * others.  * <p/>  * This is needed by the current Camel 2.x architecture.  *  * @return a clone of this {@link ErrorHandlerBuilder}  */ ErrorHandlerBuilder cloneBuilder().
