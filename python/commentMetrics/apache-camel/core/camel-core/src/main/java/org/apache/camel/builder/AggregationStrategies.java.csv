commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;3;/**  * Creates a {@link FlexibleAggregationStrategy} pivoting around a particular type, e.g. it casts all <tt>pick expression</tt>  * results to the desired type.  *  * @param type The type the {@link FlexibleAggregationStrategy} deals with.  */ ;/**  * Creates a {@link FlexibleAggregationStrategy} pivoting around a particular type, e.g. it casts all <tt>pick expression</tt>  * results to the desired type.  *  * @param type The type the {@link FlexibleAggregationStrategy} deals with.  */ public static <T> FlexibleAggregationStrategy<T> flexible(Class<T> type) {     return new FlexibleAggregationStrategy<>(type). }
true;public,static;0;3;/**  * Creates a {@link FlexibleAggregationStrategy} with no particular type, i.e. performing no casts or type conversion of  * <tt>pick expression</tt> results.  */ ;/**  * Creates a {@link FlexibleAggregationStrategy} with no particular type, i.e. performing no casts or type conversion of  * <tt>pick expression</tt> results.  */ public static FlexibleAggregationStrategy<Object> flexible() {     return new FlexibleAggregationStrategy<>(). }
true;public,static;0;3;/**  * Use the latest incoming exchange.  *  * @see org.apache.camel.processor.aggregate.UseLatestAggregationStrategy  */ ;/**  * Use the latest incoming exchange.  *  * @see org.apache.camel.processor.aggregate.UseLatestAggregationStrategy  */ public static AggregationStrategy useLatest() {     return new UseLatestAggregationStrategy(). }
true;public,static;0;3;/**  * Use the original exchange.  *  * @see org.apache.camel.processor.aggregate.UseOriginalAggregationStrategy  */ ;/**  * Use the original exchange.  *  * @see org.apache.camel.processor.aggregate.UseOriginalAggregationStrategy  */ public static AggregationStrategy useOriginal() {     return new UseOriginalAggregationStrategy(). }
true;public,static;1;3;/**  * Use the original exchange.  *  * @param propagateException whether to propgate exception if errors was thrown during processing splitted messages.  *  * @see org.apache.camel.processor.aggregate.UseOriginalAggregationStrategy  */ ;/**  * Use the original exchange.  *  * @param propagateException whether to propgate exception if errors was thrown during processing splitted messages.  *  * @see org.apache.camel.processor.aggregate.UseOriginalAggregationStrategy  */ public static AggregationStrategy useOriginal(boolean propagateException) {     return new UseOriginalAggregationStrategy(propagateException). }
true;public,static;0;3;/**  * Creates a {@link GroupedExchangeAggregationStrategy} aggregation strategy.  */ ;/**  * Creates a {@link GroupedExchangeAggregationStrategy} aggregation strategy.  */ public static AggregationStrategy groupedExchange() {     return new GroupedExchangeAggregationStrategy(). }
true;public,static;0;3;/**  * Creates a {@link GroupedBodyAggregationStrategy} aggregation strategy.  */ ;/**  * Creates a {@link GroupedBodyAggregationStrategy} aggregation strategy.  */ public static AggregationStrategy groupedBody() {     return new GroupedBodyAggregationStrategy(). }
true;public,static;1;3;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ ;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ public static AggregationStrategy bean(Object bean) {     return new AggregationStrategyBeanAdapter(bean). }
true;public,static;2;3;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ ;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ public static AggregationStrategy bean(Object bean, String methodName) {     return new AggregationStrategyBeanAdapter(bean, methodName). }
true;public,static;2;6;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ ;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ public static AggregationStrategy beanAllowNull(Object bean, String methodName) {     AggregationStrategyBeanAdapter adapter = new AggregationStrategyBeanAdapter(bean, methodName).     adapter.setAllowNullOldExchange(true).     adapter.setAllowNullNewExchange(true).     return adapter. }
true;public,static;1;3;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ ;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ public static AggregationStrategy bean(Class<?> type) {     return new AggregationStrategyBeanAdapter(type). }
true;public,static;2;3;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ ;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ public static AggregationStrategy bean(Class<?> type, String methodName) {     return new AggregationStrategyBeanAdapter(type, methodName). }
true;public,static;2;6;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ ;/**  * Creates a {@link AggregationStrategyBeanAdapter} for using a POJO as the aggregation strategy.  */ public static AggregationStrategy beanAllowNull(Class<?> type, String methodName) {     AggregationStrategyBeanAdapter adapter = new AggregationStrategyBeanAdapter(type, methodName).     adapter.setAllowNullOldExchange(true).     adapter.setAllowNullNewExchange(true).     return adapter. }
