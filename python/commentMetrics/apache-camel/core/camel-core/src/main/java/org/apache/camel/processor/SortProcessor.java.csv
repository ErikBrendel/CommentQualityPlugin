commented;modifiers;parameterAmount;loc;comment;code
false;public;2;22;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         Message in = exchange.getIn().         @SuppressWarnings("unchecked")         List<T> list = expression.evaluate(exchange, List.class).         list.sort(comparator).         if (exchange.getPattern().isOutCapable()) {             Message out = exchange.getOut().             out.copyFromWithNewBody(in, list).         } else {             in.setBody(list).         }     } catch (Exception e) {         exchange.setException(e).     }     callback.done(true).     return true. }
false;public;0;3;;public String toString() {     return "Sort[" + expression + "]". }
false;public;0;4;;@Override public String getTraceLabel() {     return "sort[" + expression + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public Expression getExpression() {     return expression. }
false;public;0;3;;public Comparator<? super T> getComparator() {     return comparator. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
