commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Annotation[] getAnnotations() {     return annotations. }
false;public;0;3;;public Expression getExpression() {     return expression. }
false;public;0;3;;public int getIndex() {     return index. }
false;public;0;3;;public Class<?> getType() {     return type. }
false;public;1;3;;public void setExpression(Expression expression) {     this.expression = expression. }
false;public;1;11;;public <T extends Annotation> T hasAnnotation(T type) {     if (annotations == null) {         return null.     }     for (Annotation ann : annotations) {         if (ann.annotationType().isAssignableFrom(type.annotationType())) {             return (T) ann.         }     }     return null. }
false;public;0;11;;@Override public String toString() {     final StringBuilder sb = new StringBuilder().     sb.append("ParameterInfo").     sb.append("[index=").append(index).     sb.append(", type=").append(type).     sb.append(", annotations=").append(annotations == null ? "null" : Arrays.asList(annotations).toString()).     sb.append(", expression=").append(expression).     sb.append(']').     return sb.toString(). }
