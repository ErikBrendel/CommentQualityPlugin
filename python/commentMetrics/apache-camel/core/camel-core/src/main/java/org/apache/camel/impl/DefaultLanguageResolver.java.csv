commented;modifiers;parameterAmount;loc;comment;code
false;public;2;27;;public Language resolveLanguage(String name, CamelContext context) {     // lookup in registry first     Language languageReg = ResolverHelper.lookupLanguageInRegistryWithFallback(context, name).     if (languageReg != null) {         return languageReg.     }     Class<?> type = null.     try {         type = findLanguage(name, context).     } catch (NoFactoryAvailableException e) {     // ignore     } catch (Exception e) {         throw new IllegalArgumentException("Invalid URI, no Language registered for scheme: " + name, e).     }     if (type != null) {         if (Language.class.isAssignableFrom(type)) {             return (Language) context.getInjector().newInstance(type).         } else {             throw new IllegalArgumentException("Resolving language: " + name + " detected type conflict: Not a Language implementation. Found: " + type.getName()).         }     } else {         // no specific language found then try fallback         return noSpecificLanguageFound(name, context).     } }
false;protected;2;21;;protected Language noSpecificLanguageFound(String name, CamelContext context) {     Class<?> type = null.     try {         type = findLanguageResolver("default", context).     } catch (NoFactoryAvailableException e) {     // ignore     } catch (ClassNotFoundException e) {     // ignore     } catch (Exception e) {         throw new IllegalArgumentException("Invalid URI, no LanguageResolver registered for scheme: " + name, e).     }     if (type != null) {         if (LanguageResolver.class.isAssignableFrom(type)) {             LanguageResolver resolver = (LanguageResolver) context.getInjector().newInstance(type).             return resolver.resolveLanguage(name, context).         } else {             throw new IllegalArgumentException("Resolving language: " + name + " detected type conflict: Not a LanguageResolver implementation. Found: " + type.getName()).         }     }     throw new NoSuchLanguageException(name). }
false;protected;2;6;;protected Class<?> findLanguage(String name, CamelContext context) throws Exception {     if (languageFactory == null) {         languageFactory = context.getFactoryFinder(LANGUAGE_RESOURCE_PATH).     }     return languageFactory.findClass(name). }
false;protected;2;6;;protected Class<?> findLanguageResolver(String name, CamelContext context) throws Exception {     if (languageResolver == null) {         languageResolver = context.getFactoryFinder(LANGUAGE_RESOLVER_RESOURCE_PATH).     }     return languageResolver.findClass(name). }
false;protected;0;3;;protected Logger getLog() {     return LOG. }
