commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;// *************************************************** // Properties // *************************************************** @Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = (DefaultCamelContext) camelContext. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;protected;0;4;;// *************************************************** // Life cycle // *************************************************** @Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;0;4;;// *************************************************** // Route management // *************************************************** @Override public void startAllRoutes() throws Exception {     camelContext.startAllRoutes(). }
false;public;0;4;;@Override public boolean isStartingRoutes() {     return camelContext.isStartingRoutes(). }
false;public;1;4;;@Override public ServiceStatus getRouteStatus(String routeId) {     return camelContext.getRouteStatus(routeId). }
false;public;1;4;;@Override public void startRoute(String routeId) throws Exception {     camelContext.startRoute(routeId). }
false;public;1;4;;@Override public void stopRoute(String routeId) throws Exception {     camelContext.stopRoute(routeId). }
false;public;3;4;;@Override public void stopRoute(String routeId, long timeout, TimeUnit timeUnit) throws Exception {     camelContext.stopRoute(routeId, timeout, timeUnit). }
false;public;4;4;;@Override public boolean stopRoute(String routeId, long timeout, TimeUnit timeUnit, boolean abortAfterTimeout) throws Exception {     return camelContext.stopRoute(routeId, timeout, timeUnit, abortAfterTimeout). }
false;public;1;4;;@Override public void suspendRoute(String routeId) throws Exception {     camelContext.suspendRoute(routeId). }
false;public;3;4;;@Override public void suspendRoute(String routeId, long timeout, TimeUnit timeUnit) throws Exception {     camelContext.suspendRoute(routeId, timeout, timeUnit). }
false;public;1;4;;@Override public void resumeRoute(String routeId) throws Exception {     camelContext.resumeRoute(routeId). }
false;public;0;4;;// *************************************************** //  // *************************************************** @Override public Collection<Route> getControlledRoutes() {     return Collections.emptyList(). }
