commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Send the proxied message to this endpoint  *  * @param url  uri of endpoint  * @return the builder  */ ;/**  * Send the proxied message to this endpoint  *  * @param url  uri of endpoint  * @return the builder  */ public ProxyBuilder endpoint(String url) {     this.endpoint = camelContext.getEndpoint(url).     return this. }
true;public;1;4;/**  * Send the proxied message to this endpoint  *  * @param endpoint  the endpoint  * @return the builder  */ ;/**  * Send the proxied message to this endpoint  *  * @param endpoint  the endpoint  * @return the builder  */ public ProxyBuilder endpoint(Endpoint endpoint) {     this.endpoint = endpoint.     return this. }
true;public;1;4;/**  * Whether to use binding or not.  * <p/>  * Binding is enabled by default. Set this to <tt>false</tt> to use old behavior without binding.  * <p/>  * If binding is enabled then Camel will bind the method parameters to the input {@link org.apache.camel.Message}  * on the {@link org.apache.camel.Exchange} when invoking the proxy.  *  * @param binding <tt>true</tt> to use binding, <tt>false</tt> to use the old behavior with using a {@link org.apache.camel.component.bean.BeanInvocation}  *                as a provisional message body  * @return the builder  */ ;/**  * Whether to use binding or not.  * <p/>  * Binding is enabled by default. Set this to <tt>false</tt> to use old behavior without binding.  * <p/>  * If binding is enabled then Camel will bind the method parameters to the input {@link org.apache.camel.Message}  * on the {@link org.apache.camel.Exchange} when invoking the proxy.  *  * @param binding <tt>true</tt> to use binding, <tt>false</tt> to use the old behavior with using a {@link org.apache.camel.component.bean.BeanInvocation}  *                as a provisional message body  * @return the builder  */ public ProxyBuilder binding(boolean binding) {     this.binding = binding.     return this. }
true;public;1;7;/**  * Builds the proxy.  *  * @param interfaceClass  the service interface  * @return the proxied bean  * @throws Exception is thrown if error creating the proxy  */ ;/**  * Builds the proxy.  *  * @param interfaceClass  the service interface  * @return the proxied bean  * @throws Exception is thrown if error creating the proxy  */ @SuppressWarnings("unchecked") public <T> T build(Class<T> interfaceClass) throws Exception {     // to build a Proxy for     return build((Class<T>[]) new Class[] { interfaceClass }). }
true;public;1;4;/**  * Builds the proxy.  *  * @param interfaceClasses  the service interface(s)  * @return the proxied bean  * @throws Exception is thrown if error creating the proxy  */ ;/**  * Builds the proxy.  *  * @param interfaceClasses  the service interface(s)  * @return the proxied bean  * @throws Exception is thrown if error creating the proxy  */ public <T> T build(Class<T>... interfaceClasses) throws Exception {     ObjectHelper.notNull(endpoint, "endpoint").     return ProxyHelper.createProxy(endpoint, binding, interfaceClasses). }
