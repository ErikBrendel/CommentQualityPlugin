commented;modifiers;parameterAmount;loc;comment;code
false;public;1;41;;@Override public Transformer resolveTransformer(TransformerKey key) {     if (ObjectHelper.isEmpty(key.getScheme()) && key.getTo() == null) {         return null.     }     // try exact match     Transformer answer = get(aliasMap.getOrDefault(key, key)).     if (answer != null || ObjectHelper.isNotEmpty(key.getScheme())) {         return answer.     }     // try wildcard match for next - add an alias if matched     TransformerKey alias = null.     if (key.getFrom() != null && ObjectHelper.isNotEmpty(key.getFrom().getName())) {         alias = new TransformerKey(new DataType(key.getFrom().getModel()), key.getTo()).         answer = get(alias).     }     if (answer == null && ObjectHelper.isNotEmpty(key.getTo().getName())) {         alias = new TransformerKey(key.getFrom(), new DataType(key.getTo().getModel())).         answer = get(alias).     }     if (answer == null && key.getFrom() != null && ObjectHelper.isNotEmpty(key.getFrom().getName()) && ObjectHelper.isNotEmpty(key.getTo().getName())) {         alias = new TransformerKey(new DataType(key.getFrom().getModel()), new DataType(key.getTo().getModel())).         answer = get(alias).     }     if (answer == null && key.getFrom() != null) {         alias = new TransformerKey(key.getFrom().getModel()).         answer = get(alias).     }     if (answer == null) {         alias = new TransformerKey(key.getTo().getModel()).         answer = get(alias).     }     if (answer != null) {         aliasMap.put(key, alias).     }     return answer. }
false;public;1;4;;@Override public boolean isStatic(String scheme) {     return isStatic(new TransformerKey(scheme)). }
false;public;2;4;;@Override public boolean isStatic(DataType from, DataType to) {     return isStatic(new TransformerKey(from, to)). }
false;public;1;4;;@Override public boolean isDynamic(String scheme) {     return isDynamic(new TransformerKey(scheme)). }
false;public;2;4;;@Override public boolean isDynamic(DataType from, DataType to) {     return isDynamic(new TransformerKey(from, to)). }
false;public;0;4;;@Override public String toString() {     return "TransformerRegistry for " + context.getName() + ", capacity: " + maxCacheSize. }
false;private;1;4;;private TransformerKey createKey(TransformerDefinition def) {     return ObjectHelper.isNotEmpty(def.getScheme()) ? new TransformerKey(def.getScheme()) : new TransformerKey(new DataType(def.getFromType()), new DataType(def.getToType())). }
