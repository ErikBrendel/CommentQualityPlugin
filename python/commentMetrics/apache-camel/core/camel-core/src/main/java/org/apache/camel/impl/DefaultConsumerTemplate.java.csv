commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getMaximumCacheSize() {     return maximumCacheSize. }
false;public;1;3;;public void setMaximumCacheSize(int maximumCacheSize) {     this.maximumCacheSize = maximumCacheSize. }
false;public;0;6;;public int getCurrentCacheSize() {     if (consumerCache == null) {         return 0.     }     return consumerCache.size(). }
false;public;0;5;;public void cleanUp() {     if (consumerCache != null) {         consumerCache.cleanUp().     } }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;public Exchange receive(String endpointUri) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     return getConsumerCache().receive(endpoint). }
false;public;1;3;;public Exchange receive(Endpoint endpoint) {     return receive(endpoint.getEndpointUri()). }
false;public;2;4;;public Exchange receive(String endpointUri, long timeout) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     return getConsumerCache().receive(endpoint, timeout). }
false;public;2;3;;public Exchange receive(Endpoint endpoint, long timeout) {     return receive(endpoint.getEndpointUri(), timeout). }
false;public;1;4;;public Exchange receiveNoWait(String endpointUri) {     Endpoint endpoint = resolveMandatoryEndpoint(endpointUri).     return getConsumerCache().receiveNoWait(endpoint). }
false;public;1;3;;public Exchange receiveNoWait(Endpoint endpoint) {     return receiveNoWait(endpoint.getEndpointUri()). }
false;public;1;10;;public Object receiveBody(String endpointUri) {     Object answer = null.     Exchange exchange = receive(endpointUri).     try {         answer = extractResultBody(exchange).     } finally {         doneUoW(exchange).     }     return answer. }
false;public;1;3;;public Object receiveBody(Endpoint endpoint) {     return receiveBody(endpoint.getEndpointUri()). }
false;public;2;10;;public Object receiveBody(String endpointUri, long timeout) {     Object answer = null.     Exchange exchange = receive(endpointUri, timeout).     try {         answer = extractResultBody(exchange).     } finally {         doneUoW(exchange).     }     return answer. }
false;public;2;3;;public Object receiveBody(Endpoint endpoint, long timeout) {     return receiveBody(endpoint.getEndpointUri(), timeout). }
false;public;1;10;;public Object receiveBodyNoWait(String endpointUri) {     Object answer = null.     Exchange exchange = receiveNoWait(endpointUri).     try {         answer = extractResultBody(exchange).     } finally {         doneUoW(exchange).     }     return answer. }
false;public;1;3;;public Object receiveBodyNoWait(Endpoint endpoint) {     return receiveBodyNoWait(endpoint.getEndpointUri()). }
false;public;2;12;;@SuppressWarnings("unchecked") public <T> T receiveBody(String endpointUri, Class<T> type) {     Object answer = null.     Exchange exchange = receive(endpointUri).     try {         answer = extractResultBody(exchange).         answer = camelContext.getTypeConverter().convertTo(type, exchange, answer).     } finally {         doneUoW(exchange).     }     return (T) answer. }
false;public;2;3;;public <T> T receiveBody(Endpoint endpoint, Class<T> type) {     return receiveBody(endpoint.getEndpointUri(), type). }
false;public;3;12;;@SuppressWarnings("unchecked") public <T> T receiveBody(String endpointUri, long timeout, Class<T> type) {     Object answer = null.     Exchange exchange = receive(endpointUri, timeout).     try {         answer = extractResultBody(exchange).         answer = camelContext.getTypeConverter().convertTo(type, exchange, answer).     } finally {         doneUoW(exchange).     }     return (T) answer. }
false;public;3;3;;public <T> T receiveBody(Endpoint endpoint, long timeout, Class<T> type) {     return receiveBody(endpoint.getEndpointUri(), timeout, type). }
false;public;2;12;;@SuppressWarnings("unchecked") public <T> T receiveBodyNoWait(String endpointUri, Class<T> type) {     Object answer = null.     Exchange exchange = receiveNoWait(endpointUri).     try {         answer = extractResultBody(exchange).         answer = camelContext.getTypeConverter().convertTo(type, exchange, answer).     } finally {         doneUoW(exchange).     }     return (T) answer. }
false;public;2;3;;public <T> T receiveBodyNoWait(Endpoint endpoint, Class<T> type) {     return receiveBodyNoWait(endpoint.getEndpointUri(), type). }
false;public;1;19;;public void doneUoW(Exchange exchange) {     try {         // The receiveBody method will get a null exchange         if (exchange == null) {             return.         }         if (exchange.getUnitOfWork() == null) {             // handover completions and done them manually to ensure they are being executed             List<Synchronization> synchronizations = exchange.handoverCompletions().             UnitOfWorkHelper.doneSynchronizations(exchange, synchronizations, log).         } else {             // done the unit of work             exchange.getUnitOfWork().done(exchange).         }     } catch (Throwable e) {         log.warn("Exception occurred during done UnitOfWork for Exchange: " + exchange + ". This exception will be ignored.", e).     } }
false;protected;1;3;;protected Endpoint resolveMandatoryEndpoint(String endpointUri) {     return CamelContextHelper.getMandatoryEndpoint(camelContext, endpointUri). }
true;protected;1;19;/**  * Extracts the body from the given result.  * <p/>  * If the exchange pattern is provided it will try to honor it and retrieve the body  * from either IN or OUT according to the pattern.  *  * @param result   the result  * @return  the result, can be <tt>null</tt>.  */ ;/**  * Extracts the body from the given result.  * <p/>  * If the exchange pattern is provided it will try to honor it and retrieve the body  * from either IN or OUT according to the pattern.  *  * @param result   the result  * @return  the result, can be <tt>null</tt>.  */ protected Object extractResultBody(Exchange result) {     Object answer = null.     if (result != null) {         // rethrow if there was an exception         if (result.getException() != null) {             throw wrapRuntimeCamelException(result.getException()).         }         // okay no fault then return the response         if (result.hasOut()) {             // use OUT as the response             answer = result.getOut().getBody().         } else {             // use IN as the response             answer = result.getIn().getBody().         }     }     return answer. }
false;private;0;6;;private org.apache.camel.spi.ConsumerCache getConsumerCache() {     if (!isStarted()) {         throw new IllegalStateException("ConsumerTemplate has not been started").     }     return consumerCache. }
false;protected;0;6;;protected void doStart() throws Exception {     if (consumerCache == null) {         consumerCache = new DefaultConsumerCache(this, camelContext, maximumCacheSize).     }     ServiceHelper.startService(consumerCache). }
false;protected;0;5;;protected void doStop() throws Exception {     // we should shutdown the services as this is our intention, to not re-use the services anymore     ServiceHelper.stopAndShutdownService(consumerCache).     consumerCache = null. }
