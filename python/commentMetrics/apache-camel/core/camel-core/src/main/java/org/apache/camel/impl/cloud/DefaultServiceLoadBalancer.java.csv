commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ************************************* // Bean // ************************************* @Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;4;;@Override public ServiceDiscovery getServiceDiscovery() {     return serviceDiscovery. }
false;public;1;4;;@Override public void setServiceDiscovery(ServiceDiscovery serverDiscovery) {     this.serviceDiscovery = serverDiscovery. }
false;public;0;4;;@Override public ServiceChooser getServiceChooser() {     return serviceChooser. }
false;public;1;4;;@Override public void setServiceChooser(ServiceChooser serverChooser) {     this.serviceChooser = serverChooser. }
false;public;1;4;;@Override public void setServiceFilter(ServiceFilter serviceFilter) {     this.serviceFilter = serviceFilter. }
false;public;0;4;;@Override public ServiceFilter getServiceFilter() {     return serviceFilter. }
false;protected;0;15;;// ************************************* // Lifecycle // ************************************* @Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "camel context").     ObjectHelper.notNull(serviceDiscovery, "service discovery").     ObjectHelper.notNull(serviceChooser, "service chooser").     ObjectHelper.notNull(serviceFilter, "service serviceFilter").     LOGGER.info("ServiceCall is using default load balancer with service discovery type: {}, service filter type: {} and service chooser type: {}", serviceDiscovery.getClass(), serviceFilter.getClass(), serviceChooser.getClass()).     ServiceHelper.startService(serviceChooser).     ServiceHelper.startService(serviceDiscovery). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     // Stop services if needed     ServiceHelper.stopService(serviceDiscovery).     ServiceHelper.stopService(serviceChooser). }
false;public;2;19;;// ************************************* // Load Balancer // ************************************* @Override public <T> T process(String serviceName, ServiceLoadBalancerFunction<T> function) throws Exception {     ServiceDefinition service.     List<ServiceDefinition> services = serviceDiscovery.getServices(serviceName).     if (services == null || services.isEmpty()) {         throw new RejectedExecutionException("No active services with name " + serviceName).     } else {         // filter services         services = serviceFilter.apply(services).         // let the client service chooser find which server to use         service = services.isEmpty() ? null : services.size() > 1 ? serviceChooser.choose(services) : services.get(0).         if (service == null) {             throw new RejectedExecutionException("No active services with name " + serviceName).         }     }     return function.apply(service). }
