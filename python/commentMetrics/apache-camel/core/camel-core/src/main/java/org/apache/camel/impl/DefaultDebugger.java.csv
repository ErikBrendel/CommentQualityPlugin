commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Breakpoint getBreakpoint() {     return breakpoint. }
false;public;0;3;;public List<Condition> getConditions() {     return conditions. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;1;3;;public void addBreakpoint(Breakpoint breakpoint) {     breakpoints.add(new BreakpointConditions(breakpoint)). }
false;public;2;4;;@Override public void addBreakpoint(Breakpoint breakpoint, Condition... conditions) {     breakpoints.add(new BreakpointConditions(breakpoint, Arrays.asList(conditions))). }
false;public;1;4;;@Override public void addSingleStepBreakpoint(final Breakpoint breakpoint) {     addSingleStepBreakpoint(breakpoint, new Condition[] {}). }
false;public;0;4;;@Override public State getState() {     return breakpoint.getState(). }
false;public;0;4;;@Override public void suspend() {     breakpoint.suspend(). }
false;public;0;4;;@Override public void activate() {     breakpoint.activate(). }
false;public;3;4;;@Override public void beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {     breakpoint.beforeProcess(exchange, processor, definition). }
false;public;4;4;;@Override public void afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken) {     breakpoint.afterProcess(exchange, processor, definition, timeTaken). }
false;public;3;9;;@Override public void onEvent(Exchange exchange, ExchangeEvent event, NamedNode definition) {     if (event instanceof ExchangeCreatedEvent) {         exchange.getContext().getDebugger().startSingleStepExchange(exchange.getExchangeId(), this).     } else if (event instanceof ExchangeCompletedEvent) {         exchange.getContext().getDebugger().stopSingleStepExchange(exchange.getExchangeId()).     }     breakpoint.onEvent(exchange, event, definition). }
false;public;0;4;;@Override public String toString() {     return breakpoint.toString(). }
false;public;2;47;;@Override public void addSingleStepBreakpoint(final Breakpoint breakpoint, Condition... conditions) {     // wrap the breakpoint into single step breakpoint so we can automatic enable/disable the single step mode     Breakpoint singlestep = new Breakpoint() {          @Override         public State getState() {             return breakpoint.getState().         }          @Override         public void suspend() {             breakpoint.suspend().         }          @Override         public void activate() {             breakpoint.activate().         }          @Override         public void beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {             breakpoint.beforeProcess(exchange, processor, definition).         }          @Override         public void afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken) {             breakpoint.afterProcess(exchange, processor, definition, timeTaken).         }          @Override         public void onEvent(Exchange exchange, ExchangeEvent event, NamedNode definition) {             if (event instanceof ExchangeCreatedEvent) {                 exchange.getContext().getDebugger().startSingleStepExchange(exchange.getExchangeId(), this).             } else if (event instanceof ExchangeCompletedEvent) {                 exchange.getContext().getDebugger().stopSingleStepExchange(exchange.getExchangeId()).             }             breakpoint.onEvent(exchange, event, definition).         }          @Override         public String toString() {             return breakpoint.toString().         }     }.     addBreakpoint(singlestep, conditions). }
false;public;1;8;;@Override public void removeBreakpoint(Breakpoint breakpoint) {     for (BreakpointConditions condition : breakpoints) {         if (condition.getBreakpoint().equals(breakpoint)) {             breakpoints.remove(condition).         }     } }
false;public;0;6;;@Override public void suspendAllBreakpoints() {     for (BreakpointConditions breakpoint : breakpoints) {         breakpoint.getBreakpoint().suspend().     } }
false;public;0;6;;@Override public void activateAllBreakpoints() {     for (BreakpointConditions breakpoint : breakpoints) {         breakpoint.getBreakpoint().activate().     } }
false;public;0;8;;@Override public List<Breakpoint> getBreakpoints() {     List<Breakpoint> answer = new ArrayList<>(breakpoints.size()).     for (BreakpointConditions e : breakpoints) {         answer.add(e.getBreakpoint()).     }     return Collections.unmodifiableList(answer). }
false;public;2;10;;@Override public boolean startSingleStepExchange(String exchangeId, Breakpoint breakpoint) {     // can we accept single stepping the given exchange?     if (singleSteps.size() >= maxConcurrentSingleSteps) {         return false.     }     singleSteps.put(exchangeId, breakpoint).     return true. }
false;public;1;4;;@Override public void stopSingleStepExchange(String exchangeId) {     singleSteps.remove(exchangeId). }
false;public;3;23;;@Override public boolean beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {     // is the exchange in single step mode?     Breakpoint singleStep = singleSteps.get(exchange.getExchangeId()).     if (singleStep != null) {         onBeforeProcess(exchange, processor, definition, singleStep).         return true.     }     // does any of the breakpoints apply?     boolean match = false.     for (BreakpointConditions breakpoint : breakpoints) {         // breakpoint must be active         if (Breakpoint.State.Active.equals(breakpoint.getBreakpoint().getState())) {             if (matchConditions(exchange, processor, definition, breakpoint)) {                 match = true.                 onBeforeProcess(exchange, processor, definition, breakpoint.getBreakpoint()).             }         }     }     return match. }
false;public;4;23;;@Override public boolean afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken) {     // is the exchange in single step mode?     Breakpoint singleStep = singleSteps.get(exchange.getExchangeId()).     if (singleStep != null) {         onAfterProcess(exchange, processor, definition, timeTaken, singleStep).         return true.     }     // does any of the breakpoints apply?     boolean match = false.     for (BreakpointConditions breakpoint : breakpoints) {         // breakpoint must be active         if (Breakpoint.State.Active.equals(breakpoint.getBreakpoint().getState())) {             if (matchConditions(exchange, processor, definition, breakpoint)) {                 match = true.                 onAfterProcess(exchange, processor, definition, timeTaken, breakpoint.getBreakpoint()).             }         }     }     return match. }
false;public;2;23;;@Override public boolean onEvent(Exchange exchange, ExchangeEvent event) {     // is the exchange in single step mode?     Breakpoint singleStep = singleSteps.get(exchange.getExchangeId()).     if (singleStep != null) {         onEvent(exchange, event, singleStep).         return true.     }     // does any of the breakpoints apply?     boolean match = false.     for (BreakpointConditions breakpoint : breakpoints) {         // breakpoint must be active         if (Breakpoint.State.Active.equals(breakpoint.getBreakpoint().getState())) {             if (matchConditions(exchange, event, breakpoint)) {                 match = true.                 onEvent(exchange, event, breakpoint.getBreakpoint()).             }         }     }     return match. }
false;protected;4;7;;protected void onBeforeProcess(Exchange exchange, Processor processor, NamedNode definition, Breakpoint breakpoint) {     try {         breakpoint.beforeProcess(exchange, processor, definition).     } catch (Throwable e) {         log.warn("Exception occurred in breakpoint: " + breakpoint + ". This exception will be ignored.", e).     } }
false;protected;5;7;;protected void onAfterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken, Breakpoint breakpoint) {     try {         breakpoint.afterProcess(exchange, processor, definition, timeTaken).     } catch (Throwable e) {         log.warn("Exception occurred in breakpoint: " + breakpoint + ". This exception will be ignored.", e).     } }
false;protected;3;19;;@SuppressWarnings("unchecked") protected void onEvent(Exchange exchange, ExchangeEvent event, Breakpoint breakpoint) {     ProcessorDefinition<?> definition = null.     // try to get the last known definition     LinkedList<MessageHistory> list = exchange.getProperty(Exchange.MESSAGE_HISTORY, LinkedList.class).     if (list != null && !list.isEmpty()) {         NamedNode node = list.getLast().getNode().         if (node instanceof ProcessorDefinition) {             definition = (ProcessorDefinition<?>) node.         }     }     try {         breakpoint.onEvent(exchange, event, definition).     } catch (Throwable e) {         log.warn("Exception occurred in breakpoint: " + breakpoint + ". This exception will be ignored.", e).     } }
false;private;4;9;;private boolean matchConditions(Exchange exchange, Processor processor, NamedNode definition, BreakpointConditions breakpoint) {     for (Condition condition : breakpoint.getConditions()) {         if (!condition.matchProcess(exchange, processor, definition)) {             return false.         }     }     return true. }
false;private;3;9;;private boolean matchConditions(Exchange exchange, ExchangeEvent event, BreakpointConditions breakpoint) {     for (Condition condition : breakpoint.getConditions()) {         if (!condition.matchEvent(exchange, event)) {             return false.         }     }     return true. }
false;public;0;4;;@Override public void start() throws Exception {     super.start(). }
false;protected;0;8;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext", this).     // register our event notifier     ServiceHelper.startService(debugEventNotifier).     camelContext.getManagementStrategy().addEventNotifier(debugEventNotifier). }
false;protected;0;6;;@Override protected void doStop() throws Exception {     breakpoints.clear().     singleSteps.clear().     ServiceHelper.stopService(debugEventNotifier). }
false;public;0;4;;@Override public String toString() {     return "DefaultDebugger". }
false;public;1;11;;@Override public void notify(CamelEvent event) throws Exception {     ExchangeEvent aee = (ExchangeEvent) event.     Exchange exchange = aee.getExchange().     onEvent(exchange, aee).     if (event instanceof ExchangeCompletedEvent) {         // fail safe to ensure we remove single steps when the Exchange is complete         singleSteps.remove(exchange.getExchangeId()).     } }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeEvent. }
