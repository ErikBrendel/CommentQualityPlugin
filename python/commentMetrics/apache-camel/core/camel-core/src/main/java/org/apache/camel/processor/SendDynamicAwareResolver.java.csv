commented;modifiers;parameterAmount;loc;comment;code
false;public;2;26;;public SendDynamicAware resolve(CamelContext context, String scheme) {     String name = scheme.     // use factory finder to find a custom implementations     Class<?> type = null.     try {         type = findFactory(name, context).     } catch (Exception e) {     // ignore     }     if (type != null) {         if (LOG.isDebugEnabled()) {             LOG.debug("Found SendDynamicAware: {} via: {}{}", type.getName(), factoryFinder.getResourcePath(), name).         }         if (SendDynamicAware.class.isAssignableFrom(type)) {             SendDynamicAware answer = (SendDynamicAware) context.getInjector().newInstance(type).             answer.setScheme(scheme).             return answer.         } else {             throw new IllegalArgumentException("Type is not a SendDynamicAware implementation. Found: " + type.getName()).         }     }     return null. }
false;private;2;6;;private Class<?> findFactory(String name, CamelContext context) throws ClassNotFoundException, IOException {     if (factoryFinder == null) {         factoryFinder = context.getFactoryFinder(RESOURCE_PATH).     }     return factoryFinder.findClass(name). }
