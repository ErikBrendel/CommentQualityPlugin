commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "PollEnrich[" + getExpression() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "pollEnrich". }
false;public;0;4;;@Override public String getLabel() {     return "pollEnrich[" + getExpression() + "]". }
true;public;1;4;/**  * Timeout in millis when polling from the external service.  * <p/>  * The timeout has influence about the poll enrich behavior. It basically operations in three different modes:  * <ul>  *     <li>negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available.</li>  *     <li>0 - Attempts to receive a message exchange immediately without waiting and returning <tt>null</tt> if a message exchange is not available yet.</li>  *     <li>positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns <tt>null</tt> if timed out</li>  * </ul>  * The default value is -1 and therefore the method could block indefinitely, and therefore its recommended to use a timeout value  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Timeout in millis when polling from the external service.  * <p/>  * The timeout has influence about the poll enrich behavior. It basically operations in three different modes:  * <ul>  *     <li>negative value - Waits until a message is available and then returns it. Warning that this method could block indefinitely if no messages are available.</li>  *     <li>0 - Attempts to receive a message exchange immediately without waiting and returning <tt>null</tt> if a message exchange is not available yet.</li>  *     <li>positive value - Attempts to receive a message exchange, waiting up to the given timeout to expire if a message is not yet available. Returns <tt>null</tt> if timed out</li>  * </ul>  * The default value is -1 and therefore the method could block indefinitely, and therefore its recommended to use a timeout value  */ public PollEnrichDefinition timeout(long timeout) {     setTimeout(timeout).     return this. }
true;public;1;4;/**  * Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message.  * By default Camel will use the reply from the external service as outgoing message.  */ ;/**  * Sets the AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message.  * By default Camel will use the reply from the external service as outgoing message.  */ public PollEnrichDefinition aggregationStrategy(AggregationStrategy aggregationStrategy) {     setAggregationStrategy(aggregationStrategy).     return this. }
true;public;1;4;/**  * Refers to an AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message.  * By default Camel will use the reply from the external service as outgoing message.  */ ;/**  * Refers to an AggregationStrategy to be used to merge the reply from the external service, into a single outgoing message.  * By default Camel will use the reply from the external service as outgoing message.  */ public PollEnrichDefinition aggregationStrategyRef(String aggregationStrategyRef) {     setAggregationStrategyRef(aggregationStrategyRef).     return this. }
true;public;1;4;/**  * This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.  */ ;/**  * This option can be used to explicit declare the method name to use, when using POJOs as the AggregationStrategy.  */ public PollEnrichDefinition aggregationStrategyMethodName(String aggregationStrategyMethodName) {     setAggregationStrategyMethodName(aggregationStrategyMethodName).     return this. }
true;public;1;4;/**  * If this option is false then the aggregate method is not used if there was no data to enrich.  * If this option is true then null values is used as the oldExchange (when no data to enrich),  * when using POJOs as the AggregationStrategy.  */ ;/**  * If this option is false then the aggregate method is not used if there was no data to enrich.  * If this option is true then null values is used as the oldExchange (when no data to enrich),  * when using POJOs as the AggregationStrategy.  */ public PollEnrichDefinition aggregationStrategyMethodAllowNull(boolean aggregationStrategyMethodAllowNull) {     setAggregationStrategyMethodAllowNull(aggregationStrategyMethodAllowNull).     return this. }
true;public;1;4;/**  * If this option is false then the aggregate method is not used if there was an exception thrown while trying  * to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what  * to do if there was an exception in the aggregate method. For example to suppress the exception  * or set a custom message body etc.  */ ;/**  * If this option is false then the aggregate method is not used if there was an exception thrown while trying  * to retrieve the data to enrich from the resource. Setting this option to true allows end users to control what  * to do if there was an exception in the aggregate method. For example to suppress the exception  * or set a custom message body etc.  */ public PollEnrichDefinition aggregateOnException(boolean aggregateOnException) {     setAggregateOnException(aggregateOnException).     return this. }
true;public;1;4;/**  * Sets the maximum size used by the {@link org.apache.camel.spi.ConsumerCache} which is used  * to cache and reuse consumers when uris are reused.  *  * @param cacheSize  the cache size, use <tt>0</tt> for default cache size, or <tt>-1</tt> to turn cache off.  * @return the builder  */ ;/**  * Sets the maximum size used by the {@link org.apache.camel.spi.ConsumerCache} which is used  * to cache and reuse consumers when uris are reused.  *  * @param cacheSize  the cache size, use <tt>0</tt> for default cache size, or <tt>-1</tt> to turn cache off.  * @return the builder  */ public PollEnrichDefinition cacheSize(int cacheSize) {     setCacheSize(cacheSize).     return this. }
true;public;0;4;/**  * Ignore the invalidate endpoint exception when try to create a producer with that endpoint  *  * @return the builder  */ ;/**  * Ignore the invalidate endpoint exception when try to create a producer with that endpoint  *  * @return the builder  */ public PollEnrichDefinition ignoreInvalidEndpoint() {     setIgnoreInvalidEndpoint(true).     return this. }
true;public;1;5;/**  * Expression that computes the endpoint uri to use as the resource endpoint to enrich from  */ ;// Properties // ------------------------------------------------------------------------- /**  * Expression that computes the endpoint uri to use as the resource endpoint to enrich from  */ @Override public void setExpression(ExpressionDefinition expression) {     // override to include javadoc what the expression is used for     super.setExpression(expression). }
false;public;0;3;;public Long getTimeout() {     return timeout. }
false;public;1;3;;public void setTimeout(Long timeout) {     this.timeout = timeout. }
false;public;0;3;;public String getAggregationStrategyRef() {     return aggregationStrategyRef. }
false;public;1;3;;public void setAggregationStrategyRef(String aggregationStrategyRef) {     this.aggregationStrategyRef = aggregationStrategyRef. }
false;public;0;3;;public String getAggregationStrategyMethodName() {     return aggregationStrategyMethodName. }
false;public;1;3;;public void setAggregationStrategyMethodName(String aggregationStrategyMethodName) {     this.aggregationStrategyMethodName = aggregationStrategyMethodName. }
false;public;0;3;;public Boolean getAggregationStrategyMethodAllowNull() {     return aggregationStrategyMethodAllowNull. }
false;public;1;3;;public void setAggregationStrategyMethodAllowNull(Boolean aggregationStrategyMethodAllowNull) {     this.aggregationStrategyMethodAllowNull = aggregationStrategyMethodAllowNull. }
false;public;0;3;;public AggregationStrategy getAggregationStrategy() {     return aggregationStrategy. }
false;public;1;3;;public void setAggregationStrategy(AggregationStrategy aggregationStrategy) {     this.aggregationStrategy = aggregationStrategy. }
false;public;0;3;;public Boolean getAggregateOnException() {     return aggregateOnException. }
false;public;1;3;;public void setAggregateOnException(Boolean aggregateOnException) {     this.aggregateOnException = aggregateOnException. }
false;public;0;3;;public Integer getCacheSize() {     return cacheSize. }
false;public;1;3;;public void setCacheSize(Integer cacheSize) {     this.cacheSize = cacheSize. }
false;public;0;3;;public Boolean getIgnoreInvalidEndpoint() {     return ignoreInvalidEndpoint. }
false;public;1;3;;public void setIgnoreInvalidEndpoint(Boolean ignoreInvalidEndpoint) {     this.ignoreInvalidEndpoint = ignoreInvalidEndpoint. }
