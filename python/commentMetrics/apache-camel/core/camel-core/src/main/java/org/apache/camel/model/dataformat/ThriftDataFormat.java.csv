commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getInstanceClass() {     return instanceClass. }
true;public;1;3;/**  * Name of class to use when unarmshalling  */ ;/**  * Name of class to use when unarmshalling  */ public void setInstanceClass(String instanceClass) {     this.instanceClass = instanceClass. }
true;public;1;3;/**  * Defines a content type format in which thrift message will be  * serialized/deserialized from(to) the Java been.  * The format can either be native or json for either native binary thrift, json or simple json fields representation.  * The default value is binary.  */ ;/**  * Defines a content type format in which thrift message will be  * serialized/deserialized from(to) the Java been.  * The format can either be native or json for either native binary thrift, json or simple json fields representation.  * The default value is binary.  */ public void setContentTypeFormat(String contentTypeFormat) {     this.contentTypeFormat = contentTypeFormat. }
false;public;0;3;;public String getContentTypeFormat() {     return contentTypeFormat. }
false;public;0;3;;public Object getDefaultInstance() {     return defaultInstance. }
false;public;1;3;;public void setDefaultInstance(Object defaultInstance) {     this.defaultInstance = defaultInstance. }
false;protected;2;12;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (this.instanceClass != null) {         setProperty(camelContext, dataFormat, "instanceClass", instanceClass).     }     if (this.contentTypeFormat != null) {         setProperty(camelContext, dataFormat, "contentTypeFormat", contentTypeFormat).     }     if (this.defaultInstance != null) {         setProperty(camelContext, dataFormat, "defaultInstance", defaultInstance).     } }
