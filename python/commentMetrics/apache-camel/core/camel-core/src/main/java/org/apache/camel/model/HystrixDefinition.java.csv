commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "Hystrix[" + getOutputs() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "hystrix". }
false;public;0;4;;@Override public String getLabel() {     return "hystrix". }
false;public;0;3;;public List<ProcessorDefinition<?>> getOutputs() {     return outputs. }
false;public;0;3;;public boolean isOutputSupported() {     return true. }
false;public;1;8;;public void setOutputs(List<ProcessorDefinition<?>> outputs) {     this.outputs = outputs.     if (outputs != null) {         for (ProcessorDefinition<?> output : outputs) {             configureChild(output).         }     } }
false;public;1;12;;@Override public void addOutput(ProcessorDefinition<?> output) {     if (output instanceof OnFallbackDefinition) {         onFallback = (OnFallbackDefinition) output.     } else {         if (onFallback != null) {             onFallback.addOutput(output).         } else {             super.addOutput(output).         }     } }
false;public;0;8;;@Override public ProcessorDefinition<?> end() {     if (onFallback != null) {         // end fallback as well         onFallback.end().     }     return super.end(). }
false;public;0;12;;public void preCreateProcessor() {     // move the fallback from outputs to fallback which we need to ensure     // such as when using the XML DSL     Iterator<ProcessorDefinition<?>> it = outputs.iterator().     while (it.hasNext()) {         ProcessorDefinition<?> out = it.next().         if (out instanceof OnFallbackDefinition) {             onFallback = (OnFallbackDefinition) out.             it.remove().         }     } }
false;public;0;3;;// Getter/Setter // ------------------------------------------------------------------------- public HystrixConfigurationDefinition getHystrixConfiguration() {     return hystrixConfiguration. }
false;public;1;3;;public void setHystrixConfiguration(HystrixConfigurationDefinition hystrixConfiguration) {     this.hystrixConfiguration = hystrixConfiguration. }
false;public;0;3;;public String getHystrixConfigurationRef() {     return hystrixConfigurationRef. }
true;public;1;3;/**  * Refers to a Hystrix configuration to use for configuring the Hystrix EIP.  */ ;/**  * Refers to a Hystrix configuration to use for configuring the Hystrix EIP.  */ public void setHystrixConfigurationRef(String hystrixConfigurationRef) {     this.hystrixConfigurationRef = hystrixConfigurationRef. }
false;public;0;3;;public OnFallbackDefinition getOnFallback() {     return onFallback. }
false;public;1;3;;public void setOnFallback(OnFallbackDefinition onFallback) {     this.onFallback = onFallback. }
true;public;1;4;/**  * Sets the group key to use. The default value is CamelHystrix.  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Sets the group key to use. The default value is CamelHystrix.  */ public HystrixDefinition groupKey(String groupKey) {     hystrixConfiguration().groupKey(groupKey).     return this. }
true;public;1;4;/**  * Sets the thread pool key to use. The default value is CamelHystrix.  */ ;/**  * Sets the thread pool key to use. The default value is CamelHystrix.  */ public HystrixDefinition threadPoolKey(String threadPoolKey) {     hystrixConfiguration().threadPoolKey(threadPoolKey).     return this. }
true;public;0;4;/**  * Configures the Hystrix EIP  * <p/>  * Use <tt>end</tt> when configuration is complete, to return back to the Hystrix EIP.  */ ;/**  * Configures the Hystrix EIP  * <p/>  * Use <tt>end</tt> when configuration is complete, to return back to the Hystrix EIP.  */ public HystrixConfigurationDefinition hystrixConfiguration() {     hystrixConfiguration = hystrixConfiguration == null ? new HystrixConfigurationDefinition(this) : hystrixConfiguration.     return hystrixConfiguration. }
true;public;1;4;/**  * Configures the Hystrix EIP using the given configuration  */ ;/**  * Configures the Hystrix EIP using the given configuration  */ public HystrixDefinition hystrixConfiguration(HystrixConfigurationDefinition configuration) {     hystrixConfiguration = configuration.     return this. }
true;public;1;4;/**  * Refers to a Hystrix configuration to use for configuring the Hystrix EIP.  */ ;/**  * Refers to a Hystrix configuration to use for configuring the Hystrix EIP.  */ public HystrixDefinition hystrixConfiguration(String ref) {     hystrixConfigurationRef = ref.     return this. }
true;public;0;5;/**  * The Hystrix fallback route path to execute that does <b>not</b> go over the network.  * <p>  * This should be a static or cached result that can immediately be returned upon failure.  * If the fallback requires network connection then use {@link #onFallbackViaNetwork()}.  */ ;/**  * The Hystrix fallback route path to execute that does <b>not</b> go over the network.  * <p>  * This should be a static or cached result that can immediately be returned upon failure.  * If the fallback requires network connection then use {@link #onFallbackViaNetwork()}.  */ public HystrixDefinition onFallback() {     onFallback = new OnFallbackDefinition().     onFallback.setParent(this).     return this. }
true;public;0;6;/**  * The Hystrix fallback route path to execute that will go over the network.  * <p/>  * If the fallback will go over the network it is another possible point of failure and so it also needs to be  * wrapped by a HystrixCommand. It is important to execute the fallback command on a separate thread-pool,  * otherwise if the main command were to become latent and fill the thread-pool  * this would prevent the fallback from running if the two commands share the same pool.  */ ;/**  * The Hystrix fallback route path to execute that will go over the network.  * <p/>  * If the fallback will go over the network it is another possible point of failure and so it also needs to be  * wrapped by a HystrixCommand. It is important to execute the fallback command on a separate thread-pool,  * otherwise if the main command were to become latent and fill the thread-pool  * this would prevent the fallback from running if the two commands share the same pool.  */ public HystrixDefinition onFallbackViaNetwork() {     onFallback = new OnFallbackDefinition().     onFallback.setFallbackViaNetwork(true).     onFallback.setParent(this).     return this. }
