commented;modifiers;parameterAmount;loc;comment;code
false;public;2;30;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     getCurrentSagaCoordinator(exchange).whenComplete((existingCoordinator, ex) -> ifNotException(ex, exchange, callback, () -> {         CompletableFuture<CamelSagaCoordinator> coordinatorFuture.         final boolean inheritedCoordinator.         if (existingCoordinator != null) {             coordinatorFuture = CompletableFuture.completedFuture(existingCoordinator).             inheritedCoordinator = true.         } else {             coordinatorFuture = sagaService.newSaga().             inheritedCoordinator = false.         }         coordinatorFuture.whenComplete((coordinator, ex2) -> ifNotException(ex2, exchange, !inheritedCoordinator, coordinator, existingCoordinator, callback, () -> {             setCurrentSagaCoordinator(exchange, coordinator).             coordinator.beginStep(exchange, step).whenComplete((done, ex3) -> ifNotException(ex3, exchange, !inheritedCoordinator, coordinator, existingCoordinator, callback, () -> {                 super.process(exchange, doneSync -> {                     if (!inheritedCoordinator) {                         // Saga starts and ends here                         handleSagaCompletion(exchange, coordinator, null, callback).                     } else {                         callback.done(false).                     }                 }).             })).         })).     })).     return false. }
