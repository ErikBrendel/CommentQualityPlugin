commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;public Processor createErrorHandler(RouteContext routeContext, Processor processor) throws Exception {     validateDeadLetterUri(routeContext).     DeadLetterChannel answer = new DeadLetterChannel(routeContext.getCamelContext(), processor, getLogger(), getOnRedelivery(), getRedeliveryPolicy(), getExceptionPolicyStrategy(), getFailureProcessor(), getDeadLetterUri(), isDeadLetterHandleNewException(), isUseOriginalMessage(), getRetryWhilePolicy(routeContext.getCamelContext()), getExecutorService(routeContext.getCamelContext()), getOnPrepareFailure(), getOnExceptionOccurred()).     // configure error handler before we can use it     configure(routeContext, answer).     return answer. }
false;public;0;3;;public boolean supportTransacted() {     return false. }
false;public;0;6;;@Override public ErrorHandlerBuilder cloneBuilder() {     DeadLetterChannelBuilder answer = new DeadLetterChannelBuilder().     super.cloneBuilder(answer).     return answer. }
false;public;0;9;;// Properties // ------------------------------------------------------------------------- public Processor getFailureProcessor() {     if (failureProcessor == null) {         // wrap in our special safe fallback error handler if sending to dead letter channel fails         Processor child = new SendProcessor(deadLetter, ExchangePattern.InOnly).         // force MEP to be InOnly so when sending to DLQ we would not expect a reply if the MEP was InOut         failureProcessor = new FatalFallbackErrorHandler(child, true).     }     return failureProcessor. }
false;protected;1;9;;protected void validateDeadLetterUri(RouteContext routeContext) {     if (deadLetter == null) {         StringHelper.notEmpty(deadLetterUri, "deadLetterUri", this).         deadLetter = routeContext.getCamelContext().getEndpoint(deadLetterUri).         if (deadLetter == null) {             throw new NoSuchEndpointException(deadLetterUri).         }     } }
false;protected;0;3;;protected CamelLogger createLogger() {     return new CamelLogger(LoggerFactory.getLogger(DeadLetterChannel.class), LoggingLevel.ERROR). }
false;public;0;4;;@Override public String toString() {     return "DeadLetterChannelBuilder(" + deadLetterUri + ")". }
