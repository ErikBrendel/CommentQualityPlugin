commented;modifiers;parameterAmount;loc;comment;code
false;public;1;65;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     notNull(definition.getOperation(), "operation", this).     ClaimCheckProcessor claim = new ClaimCheckProcessor().     claim.setOperation(definition.getOperation().name()).     claim.setKey(definition.getKey()).     claim.setFilter(definition.getFilter()).     AggregationStrategy strategy = createAggregationStrategy(routeContext).     if (strategy != null) {         claim.setAggregationStrategy(strategy).     }     // only filter or aggregation strategy can be configured not both     if (definition.getFilter() != null && strategy != null) {         throw new IllegalArgumentException("Cannot use both filter and custom aggregation strategy on ClaimCheck EIP").     }     // validate filter, we cannot have both +/- at the same time     if (definition.getFilter() != null) {         Iterable it = ObjectHelper.createIterable(definition.getFilter(), ",").         boolean includeBody = false.         boolean excludeBody = false.         for (Object o : it) {             String pattern = o.toString().             if ("body".equals(pattern) || "+body".equals(pattern)) {                 includeBody = true.             } else if ("-body".equals(pattern)) {                 excludeBody = true.             }         }         if (includeBody && excludeBody) {             throw new IllegalArgumentException("Cannot have both include and exclude body at the same time in the filter: " + definition.getFilter()).         }         boolean includeHeaders = false.         boolean excludeHeaders = false.         for (Object o : it) {             String pattern = o.toString().             if ("headers".equals(pattern) || "+headers".equals(pattern)) {                 includeHeaders = true.             } else if ("-headers".equals(pattern)) {                 excludeHeaders = true.             }         }         if (includeHeaders && excludeHeaders) {             throw new IllegalArgumentException("Cannot have both include and exclude headers at the same time in the filter: " + definition.getFilter()).         }         boolean includeHeader = false.         boolean excludeHeader = false.         for (Object o : it) {             String pattern = o.toString().             if (pattern.startsWith("header:") || pattern.startsWith("+header:")) {                 includeHeader = true.             } else if (pattern.startsWith("-header:")) {                 excludeHeader = true.             }         }         if (includeHeader && excludeHeader) {             throw new IllegalArgumentException("Cannot have both include and exclude header at the same time in the filter: " + definition.getFilter()).         }     }     return claim. }
false;private;1;19;;private AggregationStrategy createAggregationStrategy(RouteContext routeContext) {     AggregationStrategy strategy = definition.getAggregationStrategy().     if (strategy == null && definition.getAggregationStrategyRef() != null) {         Object aggStrategy = routeContext.lookup(definition.getAggregationStrategyRef(), Object.class).         if (aggStrategy instanceof AggregationStrategy) {             strategy = (AggregationStrategy) aggStrategy.         } else if (aggStrategy != null) {             strategy = new AggregationStrategyBeanAdapter(aggStrategy, definition.getAggregationStrategyMethodName()).         } else {             throw new IllegalArgumentException("Cannot find AggregationStrategy in Registry with name: " + definition.getAggregationStrategyRef()).         }     }     if (strategy instanceof CamelContextAware) {         ((CamelContextAware) strategy).setCamelContext(routeContext.getCamelContext()).     }     return strategy. }
