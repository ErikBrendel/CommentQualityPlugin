commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;23;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     setProperty(camelContext, dataFormat, "mapping", mapping).     setProperty(camelContext, dataFormat, "streamName", streamName).     if (ignoreUnidentifiedRecords != null) {         setProperty(camelContext, dataFormat, "ignoreUnidentifiedRecords", ignoreUnidentifiedRecords).     }     if (ignoreUnexpectedRecords != null) {         setProperty(camelContext, dataFormat, "ignoreUnexpectedRecords", ignoreUnexpectedRecords).     }     if (ignoreInvalidRecords != null) {         setProperty(camelContext, dataFormat, "ignoreInvalidRecords", ignoreInvalidRecords).     }     if (encoding != null) {         setProperty(camelContext, dataFormat, "encoding", encoding).     }     if (beanReaderErrorHandlerType != null) {         setProperty(camelContext, dataFormat, "beanReaderErrorHandlerType", beanReaderErrorHandlerType).     }     if (unmarshalSingleObject != null) {         setProperty(camelContext, dataFormat, "unmarshalSingleObject", unmarshalSingleObject).     } }
false;public;0;3;;public String getMapping() {     return mapping. }
true;public;1;3;/**  * The BeanIO mapping file.  * Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file.  */ ;/**  * The BeanIO mapping file.  * Is by default loaded from the classpath. You can prefix with file:, http:, or classpath: to denote from where to load the mapping file.  */ public void setMapping(String mapping) {     this.mapping = mapping. }
false;public;0;3;;public String getStreamName() {     return streamName. }
true;public;1;3;/**  * The name of the stream to use.  */ ;/**  * The name of the stream to use.  */ public void setStreamName(String streamName) {     this.streamName = streamName. }
false;public;0;3;;public Boolean getIgnoreUnidentifiedRecords() {     return ignoreUnidentifiedRecords. }
true;public;1;3;/**  * Whether to ignore unidentified records.  */ ;/**  * Whether to ignore unidentified records.  */ public void setIgnoreUnidentifiedRecords(Boolean ignoreUnidentifiedRecords) {     this.ignoreUnidentifiedRecords = ignoreUnidentifiedRecords. }
false;public;0;3;;public Boolean getIgnoreUnexpectedRecords() {     return ignoreUnexpectedRecords. }
true;public;1;3;/**  * Whether to ignore unexpected records.  */ ;/**  * Whether to ignore unexpected records.  */ public void setIgnoreUnexpectedRecords(Boolean ignoreUnexpectedRecords) {     this.ignoreUnexpectedRecords = ignoreUnexpectedRecords. }
false;public;0;3;;public Boolean getIgnoreInvalidRecords() {     return ignoreInvalidRecords. }
true;public;1;3;/**  * Whether to ignore invalid records.  */ ;/**  * Whether to ignore invalid records.  */ public void setIgnoreInvalidRecords(Boolean ignoreInvalidRecords) {     this.ignoreInvalidRecords = ignoreInvalidRecords. }
false;public;0;3;;public String getEncoding() {     return encoding. }
true;public;1;3;/**  * The charset to use.  * <p/>  * Is by default the JVM platform default charset.  */ ;/**  * The charset to use.  * <p/>  * Is by default the JVM platform default charset.  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public String getBeanReaderErrorHandlerType() {     return beanReaderErrorHandlerType. }
true;public;1;3;/**  * To use a custom org.apache.camel.dataformat.beanio.BeanIOErrorHandler as error handler  * while parsing. Configure the fully qualified class name of the error handler.  * Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords  * may not be in use when you use a custom error handler.  */ ;/**  * To use a custom org.apache.camel.dataformat.beanio.BeanIOErrorHandler as error handler  * while parsing. Configure the fully qualified class name of the error handler.  * Notice the options ignoreUnidentifiedRecords, ignoreUnexpectedRecords, and ignoreInvalidRecords  * may not be in use when you use a custom error handler.  */ public void setBeanReaderErrorHandlerType(String beanReaderErrorHandlerType) {     this.beanReaderErrorHandlerType = beanReaderErrorHandlerType. }
false;public;0;3;;public Boolean getUnmarshalSingleObject() {     return unmarshalSingleObject. }
true;public;1;3;/**  * This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter  * is only intended in special use-cases where beanio maps the Camel message to a single POJO bean.  */ ;/**  * This options controls whether to unmarshal as a list of objects or as a single object only. The former is the default mode, and the latter  * is only intended in special use-cases where beanio maps the Camel message to a single POJO bean.  */ public void setUnmarshalSingleObject(Boolean unmarshalSingleObject) {     this.unmarshalSingleObject = unmarshalSingleObject. }
