commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the scheme name supported by the transformer.  * If you specify 'csv', the transformer will be picked up for all of 'csv' from/to  * Java transformation. Note that the scheme matching is performed only when  * no exactly matched transformer exists.  *  * @param scheme scheme name  */ ;/**  * Set the scheme name supported by the transformer.  * If you specify 'csv', the transformer will be picked up for all of 'csv' from/to  * Java transformation. Note that the scheme matching is performed only when  * no exactly matched transformer exists.  *  * @param scheme scheme name  */ public TransformerBuilder scheme(String scheme) {     this.scheme = scheme.     return this. }
true;public;1;4;/**  * Set the 'from' data type name.  * If you specify 'xml:XYZ', the transformer will be picked up if source type is  * 'xml:XYZ'. If you specify just 'xml', the transformer matches with all of  * 'xml' source type like 'xml:ABC' or 'xml:DEF'.  *  * @param from 'from' data type name  */ ;/**  * Set the 'from' data type name.  * If you specify 'xml:XYZ', the transformer will be picked up if source type is  * 'xml:XYZ'. If you specify just 'xml', the transformer matches with all of  * 'xml' source type like 'xml:ABC' or 'xml:DEF'.  *  * @param from 'from' data type name  */ public TransformerBuilder fromType(String from) {     this.from = from.     return this. }
true;public;1;4;/**  * Set the 'from' data type using Java class.  *  * @param from 'from' Java class  */ ;/**  * Set the 'from' data type using Java class.  *  * @param from 'from' Java class  */ public TransformerBuilder fromType(Class<?> from) {     this.from = new DataType(from).toString().     return this. }
true;public;1;4;/**  * Set the 'to' data type name.  * If you specify 'json:XYZ', the transformer will be picked up if destination type is  * 'json:XYZ'. If you specify just 'json', the transformer matches with all of  * 'json' destination type like 'json:ABC' or 'json:DEF'.  *  * @param to 'to' data type  */ ;/**  * Set the 'to' data type name.  * If you specify 'json:XYZ', the transformer will be picked up if destination type is  * 'json:XYZ'. If you specify just 'json', the transformer matches with all of  * 'json' destination type like 'json:ABC' or 'json:DEF'.  *  * @param to 'to' data type  */ public TransformerBuilder toType(String to) {     this.to = to.     return this. }
true;public;1;4;/**  * Set the 'to' data type using Java class.  *  * @param to 'to' Java class  */ ;/**  * Set the 'to' data type using Java class.  *  * @param to 'to' Java class  */ public TransformerBuilder toType(Class<?> to) {     this.to = new DataType(to).toString().     return this. }
true;public;1;5;/**  * Set the URI to be used for the endpoint {@code Transformer}.  *  * @param uri endpoint URI  */ ;/**  * Set the URI to be used for the endpoint {@code Transformer}.  *  * @param uri endpoint URI  */ public TransformerBuilder withUri(String uri) {     resetType().     this.uri = uri.     return this. }
true;public;1;5;/**  * Set the {@code DataFormatDefinition} to be used for the {@code DataFormat} {@code Transformer}.  */ ;/**  * Set the {@code DataFormatDefinition} to be used for the {@code DataFormat} {@code Transformer}.  */ public TransformerBuilder withDataFormat(DataFormatDefinition dataFormatDefinition) {     resetType().     this.dataFormat = dataFormatDefinition.     return this. }
true;public;1;5;/**  * Set the Java {@code Class} represents a custom {@code Transformer} implementation class.  */ ;/**  * Set the Java {@code Class} represents a custom {@code Transformer} implementation class.  */ public TransformerBuilder withJava(Class<? extends Transformer> clazz) {     resetType().     this.clazz = clazz.     return this. }
true;public;1;5;/**  * Set the Java Bean name to be used for custom {@code Transformer}.  */ ;/**  * Set the Java Bean name to be used for custom {@code Transformer}.  */ public TransformerBuilder withBean(String ref) {     resetType().     this.beanRef = ref.     return this. }
false;private;0;6;;private void resetType() {     this.uri = null.     this.dataFormat = null.     this.clazz = null.     this.beanRef = null. }
true;public;1;31;/**  * Configure a Transformer according to the configurations built on this builder  * and register it into given {@code CamelContext}.  *  * @param camelContext {@code CamelContext}  */ ;/**  * Configure a Transformer according to the configurations built on this builder  * and register it into given {@code CamelContext}.  *  * @param camelContext {@code CamelContext}  */ public void configure(CamelContext camelContext) {     TransformerDefinition transformer.     if (uri != null) {         EndpointTransformerDefinition etd = new EndpointTransformerDefinition().         etd.setUri(uri).         transformer = etd.     } else if (dataFormat != null) {         DataFormatTransformerDefinition dtd = new DataFormatTransformerDefinition().         dtd.setDataFormatType(dataFormat).         transformer = dtd.     } else if (clazz != null) {         CustomTransformerDefinition ctd = new CustomTransformerDefinition().         ctd.setClassName(clazz.getName()).         transformer = ctd.     } else if (beanRef != null) {         CustomTransformerDefinition ctd = new CustomTransformerDefinition().         ctd.setRef(beanRef).         transformer = ctd.     } else {         throw new IllegalArgumentException("No Transformer type was specified").     }     if (scheme != null) {         transformer.setScheme(scheme).     } else {         transformer.setFromType(from).         transformer.setToType(to).     }     camelContext.adapt(ModelCamelContext.class).getTransformers().add(transformer). }
