commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getXmlMapper() {     return xmlMapper. }
true;public;1;3;/**  * Lookup and use the existing XmlMapper with the given id.  */ ;/**  * Lookup and use the existing XmlMapper with the given id.  */ public void setXmlMapper(String xmlMapper) {     this.xmlMapper = xmlMapper. }
false;public;0;3;;public Boolean getPrettyPrint() {     return prettyPrint. }
true;public;1;3;/**  * To enable pretty printing output nicely formatted.  * <p/>  * Is by default false.  */ ;/**  * To enable pretty printing output nicely formatted.  * <p/>  * Is by default false.  */ public void setPrettyPrint(Boolean prettyPrint) {     this.prettyPrint = prettyPrint. }
false;public;0;3;;public String getUnmarshalTypeName() {     return unmarshalTypeName. }
true;public;1;3;/**  * Class name of the java type to use when unarmshalling  */ ;/**  * Class name of the java type to use when unarmshalling  */ public void setUnmarshalTypeName(String unmarshalTypeName) {     this.unmarshalTypeName = unmarshalTypeName. }
false;public;0;3;;public Class<?> getUnmarshalType() {     return unmarshalType. }
true;public;1;3;/**  * Class of the java type to use when unarmshalling  */ ;/**  * Class of the java type to use when unarmshalling  */ public void setUnmarshalType(Class<?> unmarshalType) {     this.unmarshalType = unmarshalType. }
false;public;0;3;;public Class<?> getJsonView() {     return jsonView. }
true;public;1;3;/**  * When marshalling a POJO to JSON you might want to exclude certain fields  * from the JSON output. With Jackson you can use JSON views to accomplish  * this. This option is to refer to the class which has @JsonView  * annotations  */ ;/**  * When marshalling a POJO to JSON you might want to exclude certain fields  * from the JSON output. With Jackson you can use JSON views to accomplish  * this. This option is to refer to the class which has @JsonView  * annotations  */ public void setJsonView(Class<?> jsonView) {     this.jsonView = jsonView. }
false;public;0;3;;public String getInclude() {     return include. }
true;public;1;3;/**  * If you want to marshal a pojo to JSON, and the pojo has some fields with  * null values. And you want to skip these null values, you can set this  * option to <tt>NON_NULL</tt>  */ ;/**  * If you want to marshal a pojo to JSON, and the pojo has some fields with  * null values. And you want to skip these null values, you can set this  * option to <tt>NON_NULL</tt>  */ public void setInclude(String include) {     this.include = include. }
false;public;0;3;;public Boolean getAllowJmsType() {     return allowJmsType. }
true;public;1;3;/**  * Used for JMS users to allow the JMSType header from the JMS spec to  * specify a FQN classname to use to unmarshal to.  */ ;/**  * Used for JMS users to allow the JMSType header from the JMS spec to  * specify a FQN classname to use to unmarshal to.  */ public void setAllowJmsType(Boolean allowJmsType) {     this.allowJmsType = allowJmsType. }
false;public;0;3;;public String getCollectionTypeName() {     return collectionTypeName. }
true;public;1;3;/**  * Refers to a custom collection type to lookup in the registry to use. This  * option should rarely be used, but allows to use different collection  * types than java.util.Collection based as default.  */ ;/**  * Refers to a custom collection type to lookup in the registry to use. This  * option should rarely be used, but allows to use different collection  * types than java.util.Collection based as default.  */ public void setCollectionTypeName(String collectionTypeName) {     this.collectionTypeName = collectionTypeName. }
false;public;0;3;;public Boolean getUseList() {     return useList. }
true;public;1;3;/**  * To unarmshal to a List of Map or a List of Pojo.  */ ;/**  * To unarmshal to a List of Map or a List of Pojo.  */ public void setUseList(Boolean useList) {     this.useList = useList. }
false;public;0;3;;public Boolean getEnableJaxbAnnotationModule() {     return enableJaxbAnnotationModule. }
true;public;1;3;/**  * Whether to enable the JAXB annotations module when using jackson. When  * enabled then JAXB annotations can be used by Jackson.  */ ;/**  * Whether to enable the JAXB annotations module when using jackson. When  * enabled then JAXB annotations can be used by Jackson.  */ public void setEnableJaxbAnnotationModule(Boolean enableJaxbAnnotationModule) {     this.enableJaxbAnnotationModule = enableJaxbAnnotationModule. }
false;public;0;3;;public String getModuleClassNames() {     return moduleClassNames. }
true;public;1;3;/**  * To use custom Jackson modules com.fasterxml.jackson.databind.Module  * specified as a String with FQN class names. Multiple classes can be  * separated by comma.  */ ;/**  * To use custom Jackson modules com.fasterxml.jackson.databind.Module  * specified as a String with FQN class names. Multiple classes can be  * separated by comma.  */ public void setModuleClassNames(String moduleClassNames) {     this.moduleClassNames = moduleClassNames. }
false;public;0;3;;public String getModuleRefs() {     return moduleRefs. }
true;public;1;3;/**  * To use custom Jackson modules referred from the Camel registry. Multiple  * modules can be separated by comma.  */ ;/**  * To use custom Jackson modules referred from the Camel registry. Multiple  * modules can be separated by comma.  */ public void setModuleRefs(String moduleRefs) {     this.moduleRefs = moduleRefs. }
false;public;0;3;;public String getEnableFeatures() {     return enableFeatures. }
true;public;1;3;/**  * Set of features to enable on the Jackson  * <tt>com.fasterxml.jackson.databind.ObjectMapper</tt>.  * <p/>  * The features should be a name that matches a enum from  * <tt>com.fasterxml.jackson.databind.SerializationFeature</tt>,  * <tt>com.fasterxml.jackson.databind.DeserializationFeature</tt>, or  * <tt>com.fasterxml.jackson.databind.MapperFeature</tt>  * <p/>  * Multiple features can be separated by comma  */ ;/**  * Set of features to enable on the Jackson  * <tt>com.fasterxml.jackson.databind.ObjectMapper</tt>.  * <p/>  * The features should be a name that matches a enum from  * <tt>com.fasterxml.jackson.databind.SerializationFeature</tt>,  * <tt>com.fasterxml.jackson.databind.DeserializationFeature</tt>, or  * <tt>com.fasterxml.jackson.databind.MapperFeature</tt>  * <p/>  * Multiple features can be separated by comma  */ public void setEnableFeatures(String enableFeatures) {     this.enableFeatures = enableFeatures. }
false;public;0;3;;public String getDisableFeatures() {     return disableFeatures. }
true;public;1;3;/**  * Set of features to disable on the Jackson  * <tt>com.fasterxml.jackson.databind.ObjectMapper</tt>.  * <p/>  * The features should be a name that matches a enum from  * <tt>com.fasterxml.jackson.databind.SerializationFeature</tt>,  * <tt>com.fasterxml.jackson.databind.DeserializationFeature</tt>, or  * <tt>com.fasterxml.jackson.databind.MapperFeature</tt>  * <p/>  * Multiple features can be separated by comma  */ ;/**  * Set of features to disable on the Jackson  * <tt>com.fasterxml.jackson.databind.ObjectMapper</tt>.  * <p/>  * The features should be a name that matches a enum from  * <tt>com.fasterxml.jackson.databind.SerializationFeature</tt>,  * <tt>com.fasterxml.jackson.databind.DeserializationFeature</tt>, or  * <tt>com.fasterxml.jackson.databind.MapperFeature</tt>  * <p/>  * Multiple features can be separated by comma  */ public void setDisableFeatures(String disableFeatures) {     this.disableFeatures = disableFeatures. }
false;public;0;3;;public Boolean getAllowUnmarshallType() {     return allowUnmarshallType. }
true;public;1;3;/**  * If enabled then Jackson is allowed to attempt to use the CamelJacksonUnmarshalType header during the unmarshalling.  * <p/>  * This should only be enabled when desired to be used.  */ ;/**  * If enabled then Jackson is allowed to attempt to use the CamelJacksonUnmarshalType header during the unmarshalling.  * <p/>  * This should only be enabled when desired to be used.  */ public void setAllowUnmarshallType(Boolean allowUnmarshallType) {     this.allowUnmarshallType = allowUnmarshallType. }
false;public;0;4;;@Override public String getDataFormatName() {     return "jacksonxml". }
false;protected;1;20;;@Override protected DataFormat createDataFormat(RouteContext routeContext) {     if (unmarshalType == null && unmarshalTypeName != null) {         try {             unmarshalType = routeContext.getCamelContext().getClassResolver().resolveMandatoryClass(unmarshalTypeName).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     if (collectionType == null && collectionTypeName != null) {         try {             collectionType = routeContext.getCamelContext().getClassResolver().resolveMandatoryClass(collectionTypeName).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return super.createDataFormat(routeContext). }
false;protected;2;47;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (xmlMapper != null) {         // must be a reference value         String ref = xmlMapper.startsWith("#") ? xmlMapper : "#" + xmlMapper.         setProperty(camelContext, dataFormat, "xmlMapper", ref).     }     if (unmarshalType != null) {         setProperty(camelContext, dataFormat, "unmarshalType", unmarshalType).     }     if (prettyPrint != null) {         setProperty(camelContext, dataFormat, "prettyPrint", prettyPrint).     }     if (jsonView != null) {         setProperty(camelContext, dataFormat, "jsonView", jsonView).     }     if (include != null) {         setProperty(camelContext, dataFormat, "include", include).     }     if (allowJmsType != null) {         setProperty(camelContext, dataFormat, "allowJmsType", allowJmsType).     }     if (collectionType != null) {         setProperty(camelContext, dataFormat, "collectionType", collectionType).     }     if (useList != null) {         setProperty(camelContext, dataFormat, "useList", useList).     }     if (enableJaxbAnnotationModule != null) {         setProperty(camelContext, dataFormat, "enableJaxbAnnotationModule", enableJaxbAnnotationModule).     }     if (moduleClassNames != null) {         setProperty(camelContext, dataFormat, "modulesClassNames", moduleClassNames).     }     if (moduleRefs != null) {         setProperty(camelContext, dataFormat, "moduleRefs", moduleRefs).     }     if (enableFeatures != null) {         setProperty(camelContext, dataFormat, "enableFeatures", enableFeatures).     }     if (disableFeatures != null) {         setProperty(camelContext, dataFormat, "disableFeatures", disableFeatures).     }     if (allowUnmarshallType != null) {         setProperty(camelContext, dataFormat, "allowUnmarshallType", allowUnmarshallType).     } }
