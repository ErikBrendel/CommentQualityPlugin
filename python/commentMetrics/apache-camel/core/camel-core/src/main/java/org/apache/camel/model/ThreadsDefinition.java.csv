commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getShortName() {     return "threads". }
false;public;0;4;;@Override public String getLabel() {     return "threads". }
false;public;0;4;;@Override public String toString() {     return "Threads[" + getOutputs() + "]". }
true;public;1;4;/**  * To use a custom thread pool  */ ;/**  * To use a custom thread pool  */ public ThreadsDefinition executorService(ExecutorService executorService) {     setExecutorService(executorService).     return this. }
true;public;1;4;/**  * To refer to a custom thread pool or use a thread pool profile (as overlay)  */ ;/**  * To refer to a custom thread pool or use a thread pool profile (as overlay)  */ public ThreadsDefinition executorServiceRef(String executorServiceRef) {     setExecutorServiceRef(executorServiceRef).     return this. }
true;public;1;4;/**  * Sets the core pool size  *  * @param poolSize the core pool size to keep minimum in the pool  * @return the builder  */ ;/**  * Sets the core pool size  *  * @param poolSize the core pool size to keep minimum in the pool  * @return the builder  */ public ThreadsDefinition poolSize(int poolSize) {     setPoolSize(poolSize).     return this. }
true;public;1;4;/**  * Sets the maximum pool size  *  * @param maxPoolSize the maximum pool size  * @return the builder  */ ;/**  * Sets the maximum pool size  *  * @param maxPoolSize the maximum pool size  * @return the builder  */ public ThreadsDefinition maxPoolSize(int maxPoolSize) {     setMaxPoolSize(maxPoolSize).     return this. }
true;public;1;4;/**  * Sets the keep alive time for idle threads  *  * @param keepAliveTime keep alive time  * @return the builder  */ ;/**  * Sets the keep alive time for idle threads  *  * @param keepAliveTime keep alive time  * @return the builder  */ public ThreadsDefinition keepAliveTime(long keepAliveTime) {     setKeepAliveTime(keepAliveTime).     return this. }
true;public;1;4;/**  * Sets the keep alive time unit.  * By default SECONDS is used.  *  * @param keepAliveTimeUnits time unit  * @return the builder  */ ;/**  * Sets the keep alive time unit.  * By default SECONDS is used.  *  * @param keepAliveTimeUnits time unit  * @return the builder  */ public ThreadsDefinition timeUnit(TimeUnit keepAliveTimeUnits) {     setTimeUnit(keepAliveTimeUnits).     return this. }
true;public;1;4;/**  * Sets the maximum number of tasks in the work queue.  * <p/>  * Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue  *  * @param maxQueueSize the max queue size  * @return the builder  */ ;/**  * Sets the maximum number of tasks in the work queue.  * <p/>  * Use <tt>-1</tt> or <tt>Integer.MAX_VALUE</tt> for an unbounded queue  *  * @param maxQueueSize the max queue size  * @return the builder  */ public ThreadsDefinition maxQueueSize(int maxQueueSize) {     setMaxQueueSize(maxQueueSize).     return this. }
true;public;1;4;/**  * Sets the handler for tasks which cannot be executed by the thread pool.  *  * @param rejectedPolicy  the policy for the handler  * @return the builder  */ ;/**  * Sets the handler for tasks which cannot be executed by the thread pool.  *  * @param rejectedPolicy  the policy for the handler  * @return the builder  */ public ThreadsDefinition rejectedPolicy(ThreadPoolRejectedPolicy rejectedPolicy) {     setRejectedPolicy(rejectedPolicy).     return this. }
true;public;1;4;/**  * Sets the thread name to use.  *  * @param threadName the thread name  * @return the builder  */ ;/**  * Sets the thread name to use.  *  * @param threadName the thread name  * @return the builder  */ public ThreadsDefinition threadName(String threadName) {     setThreadName(threadName).     return this. }
true;public;1;4;/**  * Whether or not to use as caller runs as <b>fallback</b> when a task is rejected being added to the thread pool (when its full).  * This is only used as fallback if no rejectedPolicy has been configured, or the thread pool has no configured rejection handler.  * <p/>  * Is by default <tt>true</tt>  *  * @param callerRunsWhenRejected whether or not the caller should run  * @return the builder  */ ;/**  * Whether or not to use as caller runs as <b>fallback</b> when a task is rejected being added to the thread pool (when its full).  * This is only used as fallback if no rejectedPolicy has been configured, or the thread pool has no configured rejection handler.  * <p/>  * Is by default <tt>true</tt>  *  * @param callerRunsWhenRejected whether or not the caller should run  * @return the builder  */ public ThreadsDefinition callerRunsWhenRejected(boolean callerRunsWhenRejected) {     setCallerRunsWhenRejected(callerRunsWhenRejected).     return this. }
true;public;1;4;/**  * Whether idle core threads is allowed to timeout and therefore can shrink the pool size below the core pool size  * <p/>  * Is by default <tt>false</tt>  *  * @param allowCoreThreadTimeOut <tt>true</tt> to allow timeout  * @return the builder  */ ;/**  * Whether idle core threads is allowed to timeout and therefore can shrink the pool size below the core pool size  * <p/>  * Is by default <tt>false</tt>  *  * @param allowCoreThreadTimeOut <tt>true</tt> to allow timeout  * @return the builder  */ public ThreadsDefinition allowCoreThreadTimeOut(boolean allowCoreThreadTimeOut) {     setAllowCoreThreadTimeOut(allowCoreThreadTimeOut).     return this. }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executorService = executorService. }
false;public;0;3;;public String getExecutorServiceRef() {     return executorServiceRef. }
false;public;1;3;;public void setExecutorServiceRef(String executorServiceRef) {     this.executorServiceRef = executorServiceRef. }
false;public;0;3;;public Integer getPoolSize() {     return poolSize. }
false;public;1;3;;public void setPoolSize(Integer poolSize) {     this.poolSize = poolSize. }
false;public;0;3;;public Integer getMaxPoolSize() {     return maxPoolSize. }
false;public;1;3;;public void setMaxPoolSize(Integer maxPoolSize) {     this.maxPoolSize = maxPoolSize. }
false;public;0;3;;public Long getKeepAliveTime() {     return keepAliveTime. }
false;public;1;3;;public void setKeepAliveTime(Long keepAliveTime) {     this.keepAliveTime = keepAliveTime. }
false;public;0;3;;public TimeUnit getTimeUnit() {     return timeUnit. }
false;public;1;3;;public void setTimeUnit(TimeUnit timeUnit) {     this.timeUnit = timeUnit. }
false;public;0;3;;public Integer getMaxQueueSize() {     return maxQueueSize. }
false;public;1;3;;public void setMaxQueueSize(Integer maxQueueSize) {     this.maxQueueSize = maxQueueSize. }
false;public;0;3;;public String getThreadName() {     return threadName. }
false;public;1;3;;public void setThreadName(String threadName) {     this.threadName = threadName. }
false;public;0;3;;public ThreadPoolRejectedPolicy getRejectedPolicy() {     return rejectedPolicy. }
false;public;1;3;;public void setRejectedPolicy(ThreadPoolRejectedPolicy rejectedPolicy) {     this.rejectedPolicy = rejectedPolicy. }
false;public;0;3;;public Boolean getCallerRunsWhenRejected() {     return callerRunsWhenRejected. }
false;public;1;3;;public void setCallerRunsWhenRejected(Boolean callerRunsWhenRejected) {     this.callerRunsWhenRejected = callerRunsWhenRejected. }
false;public;0;3;;public Boolean getAllowCoreThreadTimeOut() {     return allowCoreThreadTimeOut. }
false;public;1;3;;public void setAllowCoreThreadTimeOut(Boolean allowCoreThreadTimeOut) {     this.allowCoreThreadTimeOut = allowCoreThreadTimeOut. }
