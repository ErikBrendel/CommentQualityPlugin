commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "HandleFaultInterceptor[" + processor + "]". }
false;public;1;9;;public void done(boolean doneSync) {     try {         // handle fault after we are done         handleFault(exchange).     } finally {         // and let the original callback know we are done as well         callback.done(doneSync).     } }
false;public;2;14;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     return processor.process(exchange, new AsyncCallback() {          public void done(boolean doneSync) {             try {                 // handle fault after we are done                 handleFault(exchange).             } finally {                 // and let the original callback know we are done as well                 callback.done(doneSync).             }         }     }). }
true;protected;1;22;/**  * Handles the fault message by converting it to an Exception  */ ;/**  * Handles the fault message by converting it to an Exception  */ protected void handleFault(Exchange exchange) {     // Take the fault message out before we keep on going     Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn().     if (msg.isFault()) {         final Object faultBody = msg.getBody().         if (faultBody != null && exchange.getException() == null) {             // remove fault as we are converting it to an exception             if (exchange.hasOut()) {                 exchange.setOut(null).             } else {                 exchange.setIn(null).             }             if (faultBody instanceof Throwable) {                 exchange.setException((Throwable) faultBody).             } else {                 // wrap it in an exception                 String data = exchange.getContext().getTypeConverter().convertTo(String.class, exchange, faultBody).                 exchange.setException(new CamelException(data)).             }         }     } }
