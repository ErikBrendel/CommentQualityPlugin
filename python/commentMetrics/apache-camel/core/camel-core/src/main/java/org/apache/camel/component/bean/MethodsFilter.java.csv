commented;modifiers;parameterAmount;loc;comment;code
true;;1;28;/**  * Retains methods, preferring those from public classes in case of  * overrides.  *  * @param proposedMethod The method proposed to the filter.  */ ;/**  * Retains methods, preferring those from public classes in case of  * overrides.  *  * @param proposedMethod The method proposed to the filter.  */ void filterMethod(Method proposedMethod) {     if (proposedMethod.isBridge()) {         return.     }     for (int i = 0. i < methods.size(). i++) {         Method alreadyRegistered = methods.get(i).         if (Modifier.isPublic(proposedMethod.getDeclaringClass().getModifiers())) {             boolean overridden = ObjectHelper.isOverridingMethod(inheritingClass, proposedMethod, alreadyRegistered, false).             boolean overridding = ObjectHelper.isOverridingMethod(inheritingClass, alreadyRegistered, proposedMethod, false).             boolean registeredMethodIsPublic = Modifier.isPublic(alreadyRegistered.getDeclaringClass().getModifiers()).             if (overridden && !registeredMethodIsPublic) {                 // Retain the overridden method from a public class                 methods.set(i, proposedMethod).                 return.             } else if (overridding) {                 // Retain the override from a public class                 methods.set(i, proposedMethod).                 return.             }         }     }     methods.add(proposedMethod). }
false;;0;3;;List<Method> asReadOnlyList() {     return Collections.unmodifiableList(methods). }
