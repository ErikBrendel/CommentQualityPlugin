commented;modifiers;parameterAmount;loc;comment;code
false;public;1;70;;// ***************************** // Processor Factory // ***************************** @Override public Processor createProcessor(RouteContext routeContext) throws Exception {     final CamelContext camelContext = routeContext.getCamelContext().     final ServiceDiscovery serviceDiscovery = retrieveServiceDiscovery(camelContext).     final ServiceFilter serviceFilter = retrieveServiceFilter(camelContext).     final ServiceChooser serviceChooser = retrieveServiceChooser(camelContext).     final ServiceLoadBalancer loadBalancer = retrieveLoadBalancer(camelContext).     CamelContextAware.trySetCamelContext(serviceDiscovery, camelContext).     CamelContextAware.trySetCamelContext(serviceFilter, camelContext).     CamelContextAware.trySetCamelContext(serviceChooser, camelContext).     CamelContextAware.trySetCamelContext(loadBalancer, camelContext).     if (loadBalancer instanceof ServiceDiscoveryAware) {         ((ServiceDiscoveryAware) loadBalancer).setServiceDiscovery(serviceDiscovery).     }     if (loadBalancer instanceof ServiceFilterAware) {         ((ServiceFilterAware) loadBalancer).setServiceFilter(serviceFilter).     }     if (loadBalancer instanceof ServiceChooserAware) {         ((ServiceChooserAware) loadBalancer).setServiceChooser(serviceChooser).     }     // The component is used to configure the default scheme to use (eg camel component name).     // The component configured on EIP takes precedence vs configured on configuration.     String endpointScheme = definition.getComponent().     if (endpointScheme == null) {         ServiceCallConfigurationDefinition conf = retrieveConfig(camelContext).         if (conf != null) {             endpointScheme = conf.getComponent().         }     }     if (endpointScheme == null) {         ServiceCallConfigurationDefinition conf = retrieveDefaultConfig(camelContext).         if (conf != null) {             endpointScheme = conf.getComponent().         }     }     // The uri is used to tweak the uri.     // The uri configured on EIP takes precedence vs configured on configuration.     String endpointUri = definition.getUri().     if (endpointUri == null) {         ServiceCallConfigurationDefinition conf = retrieveConfig(camelContext).         if (conf != null) {             endpointUri = conf.getUri().         }     }     if (endpointUri == null) {         ServiceCallConfigurationDefinition conf = retrieveDefaultConfig(camelContext).         if (conf != null) {             endpointUri = conf.getUri().         }     }     // Service name is mandatory     ObjectHelper.notNull(definition.getName(), "Service name").     endpointScheme = ThrowingHelper.applyIfNotEmpty(endpointScheme, camelContext::resolvePropertyPlaceholders, () -> ServiceCallDefinitionConstants.DEFAULT_COMPONENT).     endpointUri = ThrowingHelper.applyIfNotEmpty(endpointUri, camelContext::resolvePropertyPlaceholders, () -> null).     return new DefaultServiceCallProcessor(camelContext, camelContext.resolvePropertyPlaceholders(definition.getName()), endpointScheme, endpointUri, definition.getPattern(), loadBalancer, retrieveExpression(camelContext, endpointScheme)). }
false;private;1;21;;// ***************************** // Helpers // ***************************** private ServiceCallConfigurationDefinition retrieveDefaultConfig(CamelContext camelContext) {     // check if a default configuration is bound to the registry     ServiceCallConfigurationDefinition config = camelContext.adapt(ModelCamelContext.class).getServiceCallConfiguration(null).     if (config == null) {         // Or if it is in the registry         config = lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_CONFIG_ID, ServiceCallConfigurationDefinition.class).     }     if (config == null) {         // If no default is set either by searching by name or bound to the         // camel context, assume that if there is a single instance in the         // registry, that is the default one         config = findByType(camelContext, ServiceCallConfigurationDefinition.class).     }     return config. }
false;private;1;13;;private ServiceCallConfigurationDefinition retrieveConfig(CamelContext camelContext) {     ServiceCallConfigurationDefinition config = null.     if (definition.getConfigurationRef() != null) {         // lookup in registry firstNotNull         config = lookup(camelContext, definition.getConfigurationRef(), ServiceCallConfigurationDefinition.class).         if (config == null) {             // and fallback as service configuration             config = camelContext.adapt(ModelCamelContext.class).getServiceCallConfiguration(definition.getConfigurationRef()).         }     }     return config. }
false;private;2;19;;// ****************************************** // ServiceDiscovery // ****************************************** private ServiceDiscovery retrieveServiceDiscovery(CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function) throws Exception {     ServiceDiscovery answer = null.     ServiceCallConfigurationDefinition config = function.apply(camelContext).     if (config != null) {         if (config.getServiceDiscoveryConfiguration() != null) {             answer = config.getServiceDiscoveryConfiguration().newInstance(camelContext).         } else {             answer = retrieve(ServiceDiscovery.class, camelContext, config::getServiceDiscovery, config::getServiceDiscoveryRef).         }     }     return answer. }
false;private;1;20;;private ServiceDiscovery retrieveServiceDiscovery(CamelContext camelContext) throws Exception {     return Suppliers.firstNotNull(() -> (definition.getServiceDiscoveryConfiguration() != null) ? definition.getServiceDiscoveryConfiguration().newInstance(camelContext) : null, // Local configuration     () -> retrieve(ServiceDiscovery.class, camelContext, definition::getServiceDiscovery, definition::getServiceDiscoveryRef), // Linked configuration     () -> retrieveServiceDiscovery(camelContext, this::retrieveConfig), // Default configuration     () -> retrieveServiceDiscovery(camelContext, this::retrieveDefaultConfig), // Check if there is a single instance in the registry     () -> findByType(camelContext, ServiceDiscovery.class), // From registry     () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_DISCOVERY_ID, ServiceDiscovery.class)).orElseGet(// impl.     () -> null). }
false;private;2;30;;// ****************************************** // ServiceFilter // ****************************************** private ServiceFilter retrieveServiceFilter(CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function) throws Exception {     ServiceFilter answer = null.     ServiceCallConfigurationDefinition config = function.apply(camelContext).     if (config != null) {         if (config.getServiceFilterConfiguration() != null) {             answer = config.getServiceFilterConfiguration().newInstance(camelContext).         } else {             answer = retrieve(ServiceFilter.class, camelContext, config::getServiceFilter, config::getServiceFilterRef).         }         if (answer == null) {             String ref = config.getServiceFilterRef().             if (ObjectHelper.equal("healthy", ref, true)) {                 answer = new HealthyServiceFilter().             } else if (ObjectHelper.equal("pass-through", ref, true)) {                 answer = new PassThroughServiceFilter().             } else if (ObjectHelper.equal("passthrough", ref, true)) {                 answer = new PassThroughServiceFilter().             }         }     }     return answer. }
false;private;1;18;;private ServiceFilter retrieveServiceFilter(CamelContext camelContext) throws Exception {     return Suppliers.firstNotNull(() -> (definition.getServiceFilterConfiguration() != null) ? definition.getServiceFilterConfiguration().newInstance(camelContext) : null, // Local configuration     () -> retrieve(ServiceFilter.class, camelContext, definition::getServiceFilter, definition::getServiceFilterRef), // Linked configuration     () -> retrieveServiceFilter(camelContext, this::retrieveConfig), // Default configuration     () -> retrieveServiceFilter(camelContext, this::retrieveDefaultConfig), // Check if there is a single instance in the registry     () -> findByType(camelContext, ServiceFilter.class), // From registry     () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_FILTER_ID, ServiceFilter.class)).orElseGet(// Default     () -> new HealthyServiceFilter()). }
false;private;2;26;;// ****************************************** // ServiceChooser // ****************************************** private ServiceChooser retrieveServiceChooser(CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function) throws Exception {     ServiceChooser answer = null.     ServiceCallConfigurationDefinition config = function.apply(camelContext).     if (config != null) {         answer = retrieve(ServiceChooser.class, camelContext, config::getServiceChooser, config::getServiceChooserRef).         if (answer == null) {             String ref = config.getServiceChooserRef().             if (ObjectHelper.equal("roundrobin", ref, true)) {                 answer = new RoundRobinServiceChooser().             } else if (ObjectHelper.equal("round-robin", ref, true)) {                 answer = new RoundRobinServiceChooser().             } else if (ObjectHelper.equal("random", ref, true)) {                 answer = new RandomServiceChooser().             }         }     }     return answer. }
false;private;1;17;;private ServiceChooser retrieveServiceChooser(CamelContext camelContext) throws Exception {     return Suppliers.firstNotNull(// Local configuration     () -> retrieve(ServiceChooser.class, camelContext, definition::getServiceChooser, definition::getServiceChooserRef), // Linked configuration     () -> retrieveServiceChooser(camelContext, this::retrieveConfig), // Default configuration     () -> retrieveServiceChooser(camelContext, this::retrieveDefaultConfig), // Check if there is a single instance in the registry     () -> findByType(camelContext, ServiceChooser.class), // From registry     () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_CHOOSER_ID, ServiceChooser.class)).orElseGet(// Default     () -> new RoundRobinServiceChooser()). }
false;private;2;19;;// ****************************************** // LoadBalancer // ****************************************** private ServiceLoadBalancer retrieveLoadBalancer(CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function) throws Exception {     ServiceLoadBalancer answer = null.     ServiceCallConfigurationDefinition config = function.apply(camelContext).     if (config != null) {         if (config.getLoadBalancerConfiguration() != null) {             answer = config.getLoadBalancerConfiguration().newInstance(camelContext).         } else {             answer = retrieve(ServiceLoadBalancer.class, camelContext, config::getLoadBalancer, config::getLoadBalancerRef).         }     }     return answer. }
false;private;1;18;;private ServiceLoadBalancer retrieveLoadBalancer(CamelContext camelContext) throws Exception {     return Suppliers.firstNotNull(() -> (definition.getLoadBalancerConfiguration() != null) ? definition.getLoadBalancerConfiguration().newInstance(camelContext) : null, // Local configuration     () -> retrieve(ServiceLoadBalancer.class, camelContext, definition::getLoadBalancer, definition::getLoadBalancerRef), // Linked configuration     () -> retrieveLoadBalancer(camelContext, this::retrieveConfig), // Default configuration     () -> retrieveLoadBalancer(camelContext, this::retrieveDefaultConfig), // Check if there is a single instance in the registry     () -> findByType(camelContext, ServiceLoadBalancer.class), // From registry     () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_LOAD_BALANCER_ID, ServiceLoadBalancer.class)).orElseGet(// Default     () -> new DefaultServiceLoadBalancer()). }
false;private;2;19;;// ****************************************** // Expression // ****************************************** private Expression retrieveExpression(CamelContext camelContext, Function<CamelContext, ServiceCallConfigurationDefinition> function) throws Exception {     Expression answer = null.     ServiceCallConfigurationDefinition config = function.apply(camelContext).     if (config != null) {         if (config.getExpressionConfiguration() != null) {             answer = config.getExpressionConfiguration().newInstance(camelContext).         } else {             answer = retrieve(Expression.class, camelContext, config::getExpression, config::getExpressionRef).         }     }     return answer. }
false;private;2;49;;private Expression retrieveExpression(CamelContext camelContext, String component) throws Exception {     Optional<Expression> expression = Suppliers.firstNotNull(() -> (definition.getExpressionConfiguration() != null) ? definition.getExpressionConfiguration().newInstance(camelContext) : null, // Local configuration     () -> retrieve(Expression.class, camelContext, definition::getExpression, definition::getExpressionRef), // Linked configuration     () -> retrieveExpression(camelContext, this::retrieveConfig), // Default configuration     () -> retrieveExpression(camelContext, this::retrieveDefaultConfig), // From registry     () -> lookup(camelContext, ServiceCallDefinitionConstants.DEFAULT_SERVICE_CALL_EXPRESSION_ID, Expression.class)).     if (expression.isPresent()) {         return expression.get().     } else {         String lookupName = component + "-service-expression".         // First try to find the factory from the registry.         ServiceExpressionFactory factory = CamelContextHelper.lookup(camelContext, lookupName, ServiceExpressionFactory.class).         if (factory != null) {             // it should be pre-configured.             return factory.newInstance(camelContext).         } else {             Class<?> type = null.             try {                 // Then use Service factory.                 type = camelContext.getFactoryFinder(ServiceCallDefinitionConstants.RESOURCE_PATH).findClass(lookupName).             } catch (Exception e) {             }             if (ObjectHelper.isNotEmpty(type)) {                 if (ServiceExpressionFactory.class.isAssignableFrom(type)) {                     factory = (ServiceExpressionFactory) camelContext.getInjector().newInstance(type).                 } else {                     throw new IllegalArgumentException("Resolving Expression: " + lookupName + " detected type conflict: Not a ServiceExpressionFactory implementation. Found: " + type.getName()).                 }             } else {                 // If no factory is found, returns the default                 factory = context -> new DefaultServiceCallExpression().             }             return factory.newInstance(camelContext).         }     } }
false;private;4;15;;// ************************************ // Helpers // ************************************ private <T> T retrieve(Class<T> type, CamelContext camelContext, Supplier<T> instanceSupplier, Supplier<String> refSupplier) {     T answer = null.     if (instanceSupplier != null) {         answer = instanceSupplier.get().     }     if (answer == null && refSupplier != null) {         String ref = refSupplier.get().         if (ref != null) {             answer = lookup(camelContext, ref, type).         }     }     return answer. }
