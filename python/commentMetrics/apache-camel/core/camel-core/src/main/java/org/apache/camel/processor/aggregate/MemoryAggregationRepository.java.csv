commented;modifiers;parameterAmount;loc;comment;code
false;public;4;15;;public Exchange add(CamelContext camelContext, String key, Exchange oldExchange, Exchange newExchange) {     if (!optimisticLocking) {         throw new UnsupportedOperationException().     }     if (oldExchange == null) {         if (cache.putIfAbsent(key, newExchange) != null) {             throw new OptimisticLockingException().         }     } else {         if (!cache.replace(key, oldExchange, newExchange)) {             throw new OptimisticLockingException().         }     }     return oldExchange. }
false;public;3;6;;public Exchange add(CamelContext camelContext, String key, Exchange exchange) {     if (optimisticLocking) {         throw new UnsupportedOperationException().     }     return cache.put(key, exchange). }
false;public;2;3;;public Exchange get(CamelContext camelContext, String key) {     return cache.get(key). }
false;public;3;9;;public void remove(CamelContext camelContext, String key, Exchange exchange) {     if (optimisticLocking) {         if (!cache.remove(key, exchange)) {             throw new OptimisticLockingException().         }     } else {         cache.remove(key).     } }
false;public;2;3;;public void confirm(CamelContext camelContext, String exchangeId) { // noop }
false;public;0;4;;public Set<String> getKeys() {     // do not allow edits to the set     return Collections.unmodifiableSet(cache.keySet()). }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;4;;@Override protected void doStop() throws Exception {     cache.clear(). }
