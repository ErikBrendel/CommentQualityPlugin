commented;modifiers;parameterAmount;loc;comment;code
false;public;1;48;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     // executor service is mandatory for wire tap     boolean shutdownThreadPool = ProcessorDefinitionHelper.willCreateNewThreadPool(routeContext, definition, true).     ExecutorService threadPool = ProcessorDefinitionHelper.getConfiguredExecutorService(routeContext, "WireTap", definition, true).     // must use InOnly for WireTap     definition.setPattern(ExchangePattern.InOnly).     // create the send dynamic producer to send to the wire tapped endpoint     SendDynamicProcessor dynamicTo = (SendDynamicProcessor) super.createProcessor(routeContext).     // create error handler we need to use for processing the wire tapped     Processor target = wrapInErrorHandler(routeContext, dynamicTo).     // and wrap in unit of work     CamelInternalProcessor internal = new CamelInternalProcessor(target).     internal.addAdvice(new CamelInternalProcessor.UnitOfWorkProcessorAdvice(routeContext)).     // is true by default     boolean isCopy = definition.getCopy() == null || definition.getCopy().     WireTapProcessor answer = new WireTapProcessor(dynamicTo, internal, definition.getPattern(), threadPool, shutdownThreadPool, definition.isDynamic()).     answer.setCopy(isCopy).     if (definition.getNewExchangeProcessorRef() != null) {         definition.setNewExchangeProcessor(routeContext.mandatoryLookup(definition.getNewExchangeProcessorRef(), Processor.class)).     }     if (definition.getNewExchangeProcessor() != null) {         answer.addNewExchangeProcessor(definition.getNewExchangeProcessor()).     }     if (definition.getNewExchangeExpression() != null) {         answer.setNewExchangeExpression(definition.getNewExchangeExpression().createExpression(routeContext)).     }     if (definition.getHeaders() != null && !definition.getHeaders().isEmpty()) {         for (SetHeaderDefinition header : definition.getHeaders()) {             Processor processor = createProcessor(routeContext, header).             answer.addNewExchangeProcessor(processor).         }     }     if (definition.getOnPrepareRef() != null) {         definition.setOnPrepare(CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), definition.getOnPrepareRef(), Processor.class)).     }     if (definition.getOnPrepare() != null) {         answer.setOnPrepare(definition.getOnPrepare()).     }     return answer. }
false;protected;1;9;;@Override protected Expression createExpression(RouteContext routeContext) {     // whether to use dynamic or static uri     if (definition.isDynamic()) {         return super.createExpression(routeContext).     } else {         return ExpressionBuilder.constantExpression(definition.getUri()).     } }
