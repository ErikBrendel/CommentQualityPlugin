commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;8;;protected AsyncProcessor chooseProcessor(AsyncProcessor[] processors, Exchange exchange) {     Object value = correlationExpression.evaluate(exchange, Object.class).     Object key = getStickyKey(value).     AsyncProcessor processor.     processor = stickyMap.computeIfAbsent(key, k -> loadBalancer.chooseProcessor(processors, exchange)).     return processor. }
false;public;1;5;;@Override public void removeProcessor(AsyncProcessor processor) {     stickyMap.values().remove(processor).     super.removeProcessor(processor). }
false;public;0;3;;public int getLastChosenProcessorIndex() {     return loadBalancer.getLastChosenProcessorIndex(). }
false;public;0;3;;public Expression getCorrelationExpression() {     return correlationExpression. }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public int getNumberOfHashGroups() {     return numberOfHashGroups. }
false;public;1;3;;public void setNumberOfHashGroups(int numberOfHashGroups) {     this.numberOfHashGroups = numberOfHashGroups. }
true;protected;1;10;/**  * A strategy to create the key for the sticky load balancing map.  * The default implementation uses the hash code of the value  * then modulos by the numberOfHashGroups to avoid the sticky map getting too big  *  * @param value the correlation value  * @return the key to be used in the sticky map  */ ;// Implementation methods // ------------------------------------------------------------------------- /**  * A strategy to create the key for the sticky load balancing map.  * The default implementation uses the hash code of the value  * then modulos by the numberOfHashGroups to avoid the sticky map getting too big  *  * @param value the correlation value  * @return the key to be used in the sticky map  */ protected Object getStickyKey(Object value) {     int hashCode = 37.     if (value != null) {         hashCode = value.hashCode().     }     if (numberOfHashGroups > 0) {         hashCode = hashCode % numberOfHashGroups.     }     return hashCode. }
