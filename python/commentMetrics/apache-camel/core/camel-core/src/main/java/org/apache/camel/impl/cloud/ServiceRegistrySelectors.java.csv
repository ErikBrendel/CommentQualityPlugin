commented;modifiers;parameterAmount;loc;comment;code
false;public;1;10;;@Override public Optional<ServiceRegistry> select(Collection<ServiceRegistry> services) {     if (services != null && services.size() == 1) {         return Optional.of(services.iterator().next()).     } else {         LOGGER.warn("Multiple ServiceRegistry instances available (items={})", services).     }     return Optional.empty(). }
false;public;1;6;;@Override public Optional<ServiceRegistry> select(Collection<ServiceRegistry> services) {     return ObjectHelper.isNotEmpty(services) ? Optional.of(services.iterator().next()) : Optional.empty(). }
false;public;1;21;;@Override public Optional<ServiceRegistry> select(Collection<ServiceRegistry> services) {     Optional<Map.Entry<Integer, List<ServiceRegistry>>> highPriorityServices = services.stream().collect(Collectors.groupingBy(ServiceRegistry::getOrder)).entrySet().stream().min(Comparator.comparingInt(Map.Entry::getKey)).     if (highPriorityServices.isPresent()) {         if (highPriorityServices.get().getValue().size() == 1) {             return Optional.of(highPriorityServices.get().getValue().iterator().next()).         } else {             LOGGER.warn("Multiple ServiceRegistry instances available for highest priority (order={}, items={})", highPriorityServices.get().getKey(), highPriorityServices.get().getValue()).         }     }     return Optional.empty(). }
false;public;1;10;;@Override public Optional<ServiceRegistry> select(Collection<ServiceRegistry> services) {     for (ServiceRegistry service : services) {         if (type.isInstance(service)) {             return Optional.of(service).         }     }     return Optional.empty(). }
false;public;1;12;;@Override public Optional<ServiceRegistry> select(Collection<ServiceRegistry> services) {     for (ServiceRegistry service : services) {         Map<String, Object> attributes = service.getAttributes().         if (ObjectHelper.equal(attributes.get(key), value)) {             return Optional.of(service).         }     }     return Optional.empty(). }
false;public,static;0;3;;// ********************************** // Helpers // ********************************** public static ServiceRegistry.Selector defaultSelector() {     return DEFAULT_SELECTOR. }
false;public,static;0;3;;public static ServiceRegistry.Selector single() {     return new SelectSingle(). }
false;public,static;0;3;;public static ServiceRegistry.Selector first() {     return new SelectFirst(). }
false;public,static;0;3;;public static ServiceRegistry.Selector order() {     return new SelectByOrder(). }
false;public,static;1;3;;public static ServiceRegistry.Selector type(Class<? extends ServiceRegistry> type) {     return new SelectByType(type). }
false;public,static;2;3;;public static ServiceRegistry.Selector attribute(String key, Object value) {     return new SelectByAttribute(key, value). }
