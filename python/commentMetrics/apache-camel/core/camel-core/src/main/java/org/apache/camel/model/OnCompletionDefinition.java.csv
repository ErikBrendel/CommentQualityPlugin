commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public boolean isRouteScoped() {     // is context scoped by default     return routeScoped != null ? routeScoped : false. }
false;public;0;3;;public Boolean getRouteScoped() {     return routeScoped. }
false;public;1;3;;public Processor getOnCompletion(String routeId) {     return onCompletions.get(routeId). }
false;public;0;3;;public Collection<Processor> getOnCompletions() {     return onCompletions.values(). }
false;public;2;3;;public void setOnCompletion(String routeId, Processor processor) {     onCompletions.put(routeId, processor). }
false;public;0;4;;@Override public String toString() {     return "onCompletion[" + getOutputs() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "onCompletion". }
false;public;0;4;;@Override public String getLabel() {     return "onCompletion". }
false;public;0;4;;@Override public boolean isAbstract() {     return true. }
false;public;0;4;;@Override public boolean isTopLevelOnly() {     return true. }
true;public;1;8;/**  * Removes all existing {@link org.apache.camel.model.OnCompletionDefinition} from the definition.  * <p/>  * This is used to let route scoped <tt>onCompletion</tt> overrule any global <tt>onCompletion</tt>.  * Hence we remove all existing as they are global.  *  * @param definition the parent definition that is the route  */ ;/**  * Removes all existing {@link org.apache.camel.model.OnCompletionDefinition} from the definition.  * <p/>  * This is used to let route scoped <tt>onCompletion</tt> overrule any global <tt>onCompletion</tt>.  * Hence we remove all existing as they are global.  *  * @param definition the parent definition that is the route  */ public void removeAllOnCompletionDefinition(ProcessorDefinition<?> definition) {     for (Iterator<ProcessorDefinition<?>> it = definition.getOutputs().iterator(). it.hasNext(). ) {         ProcessorDefinition<?> out = it.next().         if (out instanceof OnCompletionDefinition) {             it.remove().         }     } }
false;public;0;6;;@Override public ProcessorDefinition<?> end() {     // pop parent block, as we added our self as block to parent when synchronized was defined in the route     getParent().popBlock().     return super.end(). }
true;public;0;4;/**  * Sets the mode to be after route is done (default due backwards compatible).  * <p/>  * This executes the on completion work <i>after</i> the route consumer have written response  * back to the callee (if its InOut mode).  *  * @return the builder  */ ;/**  * Sets the mode to be after route is done (default due backwards compatible).  * <p/>  * This executes the on completion work <i>after</i> the route consumer have written response  * back to the callee (if its InOut mode).  *  * @return the builder  */ public OnCompletionDefinition modeAfterConsumer() {     setMode(OnCompletionMode.AfterConsumer).     return this. }
true;public;0;4;/**  * Sets the mode to be before consumer is done.  * <p/>  * This allows the on completion work to execute <i>before</i> the route consumer, writes any response  * back to the callee (if its InOut mode).  *  * @return the builder  */ ;/**  * Sets the mode to be before consumer is done.  * <p/>  * This allows the on completion work to execute <i>before</i> the route consumer, writes any response  * back to the callee (if its InOut mode).  *  * @return the builder  */ public OnCompletionDefinition modeBeforeConsumer() {     setMode(OnCompletionMode.BeforeConsumer).     return this. }
true;public;0;11;/**  * Will only synchronize when the {@link org.apache.camel.Exchange} completed successfully (no errors).  *  * @return the builder  */ ;/**  * Will only synchronize when the {@link org.apache.camel.Exchange} completed successfully (no errors).  *  * @return the builder  */ public OnCompletionDefinition onCompleteOnly() {     boolean isOnFailureOnly = getOnFailureOnly() != null && getOnFailureOnly().     if (isOnFailureOnly) {         throw new IllegalArgumentException("Both onCompleteOnly and onFailureOnly cannot be true. Only one of them can be true. On node: " + this).     }     // must define return type as OutputDefinition and not this type to avoid end user being able     // to invoke onFailureOnly/onCompleteOnly more than once     setOnCompleteOnly(Boolean.TRUE).     setOnFailureOnly(Boolean.FALSE).     return this. }
true;public;0;11;/**  * Will only synchronize when the {@link org.apache.camel.Exchange} ended with failure (exception or FAULT message).  *  * @return the builder  */ ;/**  * Will only synchronize when the {@link org.apache.camel.Exchange} ended with failure (exception or FAULT message).  *  * @return the builder  */ public OnCompletionDefinition onFailureOnly() {     boolean isOnCompleteOnly = getOnCompleteOnly() != null && getOnCompleteOnly().     if (isOnCompleteOnly) {         throw new IllegalArgumentException("Both onCompleteOnly and onFailureOnly cannot be true. Only one of them can be true. On node: " + this).     }     // must define return type as OutputDefinition and not this type to avoid end user being able     // to invoke onFailureOnly/onCompleteOnly more than once     setOnCompleteOnly(Boolean.FALSE).     setOnFailureOnly(Boolean.TRUE).     return this. }
true;public;1;4;/**  * Sets an additional predicate that should be true before the onCompletion is triggered.  * <p/>  * To be used for fine grained controlling whether a completion callback should be invoked or not  *  * @param predicate predicate that determines true or false  * @return the builder  */ ;/**  * Sets an additional predicate that should be true before the onCompletion is triggered.  * <p/>  * To be used for fine grained controlling whether a completion callback should be invoked or not  *  * @param predicate predicate that determines true or false  * @return the builder  */ public OnCompletionDefinition onWhen(@AsPredicate Predicate predicate) {     setOnWhen(new WhenDefinition(predicate)).     return this. }
true;public;0;4;/**  * Will use the original input body when an {@link org.apache.camel.Exchange} for this on completion.  * <p/>  * By default this feature is off.  *  * @return the builder  */ ;/**  * Will use the original input body when an {@link org.apache.camel.Exchange} for this on completion.  * <p/>  * By default this feature is off.  *  * @return the builder  */ public OnCompletionDefinition useOriginalBody() {     setUseOriginalMessagePolicy(Boolean.TRUE).     return this. }
true;public;1;4;/**  * To use a custom Thread Pool to be used for parallel processing.  * Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.  */ ;/**  * To use a custom Thread Pool to be used for parallel processing.  * Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.  */ public OnCompletionDefinition executorService(ExecutorService executorService) {     setExecutorService(executorService).     return this. }
true;public;1;4;/**  * Refers to a custom Thread Pool to be used for parallel processing.  * Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.  */ ;/**  * Refers to a custom Thread Pool to be used for parallel processing.  * Notice if you set this option, then parallel processing is automatic implied, and you do not have to enable that option as well.  */ public OnCompletionDefinition executorServiceRef(String executorServiceRef) {     setExecutorServiceRef(executorServiceRef).     return this. }
true;public;0;4;/**  * If enabled then the on completion process will run asynchronously by a separate thread from a thread pool.  * By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the route.  *  * @return the builder  */ ;/**  * If enabled then the on completion process will run asynchronously by a separate thread from a thread pool.  * By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the route.  *  * @return the builder  */ public OnCompletionDefinition parallelProcessing() {     setParallelProcessing(true).     return this. }
true;public;1;4;/**  * If enabled then the on completion process will run asynchronously by a separate thread from a thread pool.  * By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the route.  *  * @return the builder  */ ;/**  * If enabled then the on completion process will run asynchronously by a separate thread from a thread pool.  * By default this is false, meaning the on completion process will run synchronously using the same caller thread as from the route.  *  * @return the builder  */ public OnCompletionDefinition parallelProcessing(boolean parallelProcessing) {     setParallelProcessing(parallelProcessing).     return this. }
false;public;0;3;;public List<ProcessorDefinition<?>> getOutputs() {     return outputs. }
false;public;1;3;;public void setOutputs(List<ProcessorDefinition<?>> outputs) {     this.outputs = outputs. }
false;public;0;3;;public boolean isOutputSupported() {     return true. }
false;public;0;3;;public OnCompletionMode getMode() {     return mode. }
true;public;1;3;/**  * Sets the on completion mode.  * <p/>  * The default value is AfterConsumer  */ ;/**  * Sets the on completion mode.  * <p/>  * The default value is AfterConsumer  */ public void setMode(OnCompletionMode mode) {     this.mode = mode. }
false;public;0;3;;public Boolean getOnCompleteOnly() {     return onCompleteOnly. }
false;public;1;3;;public void setOnCompleteOnly(Boolean onCompleteOnly) {     this.onCompleteOnly = onCompleteOnly. }
false;public;0;3;;public Boolean getOnFailureOnly() {     return onFailureOnly. }
false;public;1;3;;public void setOnFailureOnly(Boolean onFailureOnly) {     this.onFailureOnly = onFailureOnly. }
false;public;0;3;;public WhenDefinition getOnWhen() {     return onWhen. }
false;public;1;3;;public void setOnWhen(WhenDefinition onWhen) {     this.onWhen = onWhen. }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executorService = executorService. }
false;public;0;3;;public String getExecutorServiceRef() {     return executorServiceRef. }
false;public;1;3;;public void setExecutorServiceRef(String executorServiceRef) {     this.executorServiceRef = executorServiceRef. }
false;public;0;3;;public Boolean getUseOriginalMessagePolicy() {     return useOriginalMessagePolicy. }
true;public;1;3;/**  * Will use the original input body when an {@link org.apache.camel.Exchange} for this on completion.  * <p/>  * By default this feature is off.  */ ;/**  * Will use the original input body when an {@link org.apache.camel.Exchange} for this on completion.  * <p/>  * By default this feature is off.  */ public void setUseOriginalMessagePolicy(Boolean useOriginalMessagePolicy) {     this.useOriginalMessagePolicy = useOriginalMessagePolicy. }
false;public;0;3;;public Boolean getParallelProcessing() {     return parallelProcessing. }
false;public;1;3;;public void setParallelProcessing(Boolean parallelProcessing) {     this.parallelProcessing = parallelProcessing. }
