commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the contained object.  *  * @return the contained object.  */ ;/**  * Returns the contained object.  *  * @return the contained object.  */ public E getObject() {     return object. }
true;public,synchronized;0;3;/**  * Returns <code>true</code> if this element is currently scheduled for  * timing out.  *  * @return <code>true</code> if scheduled or <code>false</code> if not  *         scheduled or already timed-out.  */ ;/**  * Returns <code>true</code> if this element is currently scheduled for  * timing out.  *  * @return <code>true</code> if scheduled or <code>false</code> if not  *         scheduled or already timed-out.  */ public synchronized boolean scheduled() {     return timeout != null. }
true;public,synchronized;1;5;/**  * Schedules the given timeout task. Before this methods calls the  * {@link Timeout#schedule()} method it sets this element as timeout  * listener.  *  * @param t a timeout task.  */ ;/**  * Schedules the given timeout task. Before this methods calls the  * {@link Timeout#schedule()} method it sets this element as timeout  * listener.  *  * @param t a timeout task.  */ public synchronized void schedule(Timeout t) {     this.timeout = t.     this.timeout.setTimeoutHandler(this).     this.timeout.schedule(). }
true;public,synchronized;0;6;/**  * Cancels the scheduled timeout for this element. If this element is not  * scheduled or has already timed-out this method has no effect.  */ ;/**  * Cancels the scheduled timeout for this element. If this element is not  * scheduled or has already timed-out this method has no effect.  */ public synchronized void cancel() {     if (timeout != null) {         timeout.cancel().     }     timeout(null). }
true;public,synchronized;1;3;/**  * Marks this element as timed-out.  *  * @param t timeout task that caused the notification.  */ ;/**  * Marks this element as timed-out.  *  * @param t timeout task that caused the notification.  */ public synchronized void timeout(Timeout t) {     this.timeout = null. }
