commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public ServiceCallDefinition end() {     return this.parent.orElseThrow(() -> new IllegalStateException("Parent definition is not set")). }
false;public;0;7;;public ProcessorDefinition<?> endParent() {     return this.parent.map(ServiceCallDefinition::end).orElseThrow(() -> new IllegalStateException("Parent definition is not set")). }
false;public;0;3;;// ************************************************************************* //  // ************************************************************************* public List<PropertyDefinition> getProperties() {     return properties. }
true;public;1;3;/**  * Set client properties to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ ;/**  * Set client properties to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ public void setProperties(List<PropertyDefinition> properties) {     this.properties = properties. }
true;public;2;10;/**  * Adds a custom property to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ ;/**  * Adds a custom property to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ public ServiceCallServiceDiscoveryConfiguration property(String key, String value) {     if (properties == null) {         properties = new ArrayList<>().     }     PropertyDefinition prop = new PropertyDefinition().     prop.setKey(key).     prop.setValue(value).     properties.add(prop).     return this. }
false;protected;1;17;;protected Map<String, String> getPropertiesAsMap(CamelContext camelContext) throws Exception {     Map<String, String> answer.     if (properties == null || properties.isEmpty()) {         answer = Collections.emptyMap().     } else {         answer = new HashMap<>().         for (PropertyDefinition prop : properties) {             // support property placeholders             String key = CamelContextHelper.parseText(camelContext, prop.getKey()).             String value = CamelContextHelper.parseText(camelContext, prop.getValue()).             answer.put(key, value).         }     }     return answer. }
false;public;1;67;;// ************************************************************************* // Factory // ************************************************************************* @Override public ServiceDiscovery newInstance(CamelContext camelContext) throws Exception {     ObjectHelper.notNull(factoryKey, "ServiceDiscovery factoryKey").     ServiceDiscovery answer.     // First try to find the factory from the registry.     ServiceDiscoveryFactory factory = CamelContextHelper.lookup(camelContext, factoryKey, ServiceDiscoveryFactory.class).     if (factory != null) {         // If a factory is found in the registry do not re-configure it as         // it should be pre-configured.         answer = factory.newInstance(camelContext).     } else {         Class<?> type.         try {             // Then use Service factory.             type = camelContext.getFactoryFinder(ServiceCallDefinitionConstants.RESOURCE_PATH).findClass(factoryKey).         } catch (Exception e) {             throw new NoFactoryAvailableException(ServiceCallDefinitionConstants.RESOURCE_PATH + factoryKey, e).         }         if (type != null) {             if (ServiceDiscoveryFactory.class.isAssignableFrom(type)) {                 factory = (ServiceDiscoveryFactory) camelContext.getInjector().newInstance(type).             } else {                 throw new IllegalArgumentException("Resolving ServiceDiscovery: " + factoryKey + " detected type conflict: Not a ServiceDiscoveryFactory implementation. Found: " + type.getName()).             }         }         try {             Map<String, Object> parameters = new HashMap<>().             IntrospectionSupport.getProperties(this, parameters, null, false).             parameters.replaceAll((k, v) -> {                 if (v instanceof String) {                     try {                         v = camelContext.resolvePropertyPlaceholders((String) v).                     } catch (Exception e) {                         throw new IllegalArgumentException(String.format("Exception while resolving %s (%s)", k, v.toString()), e).                     }                 }                 return v.             }).             // Convert properties to Map<String, String>             parameters.put("properties", getPropertiesAsMap(camelContext)).             postProcessFactoryParameters(camelContext, parameters).             IntrospectionSupport.setProperties(factory, parameters).             answer = factory.newInstance(camelContext).         } catch (Exception e) {             throw new IllegalArgumentException(e).         }     }     return answer. }
false;protected;2;2;;// ************************************************************************* // Utilities // ************************************************************************* protected void postProcessFactoryParameters(CamelContext camelContext, Map<String, Object> parameters) throws Exception { }
