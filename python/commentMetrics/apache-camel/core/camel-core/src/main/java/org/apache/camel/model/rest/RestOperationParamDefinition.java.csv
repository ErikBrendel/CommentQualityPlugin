commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public RestParamType getType() {     return type != null ? type : RestParamType.path. }
true;public;1;3;/**  * Sets the Swagger Parameter type.  */ ;/**  * Sets the Swagger Parameter type.  */ public void setType(RestParamType type) {     this.type = type. }
false;public;0;3;;public String getName() {     return name. }
true;public;1;3;/**  * Sets the Swagger Parameter name.  */ ;/**  * Sets the Swagger Parameter name.  */ public void setName(String name) {     this.name = name. }
false;public;0;3;;public String getDescription() {     return description != null ? description : "". }
true;public;1;3;/**  * Sets the Swagger Parameter description.  */ ;/**  * Sets the Swagger Parameter description.  */ public void setDescription(String description) {     this.description = description. }
true;public;0;3;/**  * Sets the Swagger Parameter default value.  */ ;/**  * Sets the Swagger Parameter default value.  */ public String getDefaultValue() {     return defaultValue != null ? defaultValue : "". }
false;public;1;3;;public void setDefaultValue(String defaultValue) {     this.defaultValue = defaultValue. }
false;public;0;3;;public Boolean getRequired() {     return required != null ? required : true. }
true;public;1;3;/**  * Sets the Swagger Parameter required flag.  */ ;/**  * Sets the Swagger Parameter required flag.  */ public void setRequired(Boolean required) {     this.required = required. }
false;public;0;3;;public CollectionFormat getCollectionFormat() {     return collectionFormat. }
true;public;1;3;/**  * Sets the Swagger Parameter collection format.  */ ;/**  * Sets the Swagger Parameter collection format.  */ public void setCollectionFormat(CollectionFormat collectionFormat) {     this.collectionFormat = collectionFormat. }
false;public;0;3;;public String getArrayType() {     return arrayType. }
true;public;1;3;/**  * Sets the Swagger Parameter array type.  * Required if data type is "array". Describes the type of items in the array.  */ ;/**  * Sets the Swagger Parameter array type.  * Required if data type is "array". Describes the type of items in the array.  */ public void setArrayType(String arrayType) {     this.arrayType = arrayType. }
false;public;0;3;;public String getDataType() {     return dataType != null ? dataType : "string". }
true;public;1;3;/**  * Sets the Swagger Parameter data type.  */ ;/**  * Sets the Swagger Parameter data type.  */ public void setDataType(String dataType) {     this.dataType = dataType. }
false;public;0;3;;public String getDataFormat() {     return dataFormat. }
true;public;1;3;/**  * Sets the Swagger Parameter data format.  */ ;/**  * Sets the Swagger Parameter data format.  */ public void setDataFormat(String dataFormat) {     this.dataFormat = dataFormat. }
false;public;0;7;;public List<String> getAllowableValues() {     if (allowableValues != null) {         return allowableValues.     }     return new ArrayList<>(). }
true;public;1;3;/**  * Sets the Swagger Parameter list of allowable values (enum).  */ ;/**  * Sets the Swagger Parameter list of allowable values (enum).  */ public void setAllowableValues(List<String> allowableValues) {     this.allowableValues = allowableValues. }
false;public;0;3;;public List<RestPropertyDefinition> getExamples() {     return examples. }
true;public;1;3;/**  * Sets the Swagger Parameter examples.  */ ;/**  * Sets the Swagger Parameter examples.  */ public void setExamples(List<RestPropertyDefinition> examples) {     this.examples = examples. }
true;public;1;4;/**  * Name of the parameter.  * <p/>  * This option is mandatory.  */ ;/**  * Name of the parameter.  * <p/>  * This option is mandatory.  */ public RestOperationParamDefinition name(String name) {     setName(name).     return this. }
true;public;1;4;/**  * Description of the parameter.  */ ;/**  * Description of the parameter.  */ public RestOperationParamDefinition description(String name) {     setDescription(name).     return this. }
true;public;1;4;/**  * The default value of the parameter.  */ ;/**  * The default value of the parameter.  */ public RestOperationParamDefinition defaultValue(String name) {     setDefaultValue(name).     return this. }
true;public;1;4;/**  * Whether the parameter is required  */ ;/**  * Whether the parameter is required  */ public RestOperationParamDefinition required(Boolean required) {     setRequired(required).     return this. }
true;public;1;4;/**  * Sets the collection format.  */ ;/**  * Sets the collection format.  */ public RestOperationParamDefinition collectionFormat(CollectionFormat collectionFormat) {     setCollectionFormat(collectionFormat).     return this. }
true;public;1;4;/**  * The data type of the array data type  */ ;/**  * The data type of the array data type  */ public RestOperationParamDefinition arrayType(String arrayType) {     setArrayType(arrayType).     return this. }
true;public;1;4;/**  * The data type of the parameter such as <tt>string</tt>, <tt>integer</tt>, <tt>boolean</tt>  */ ;/**  * The data type of the parameter such as <tt>string</tt>, <tt>integer</tt>, <tt>boolean</tt>  */ public RestOperationParamDefinition dataType(String type) {     setDataType(type).     return this. }
true;public;1;4;/**  * The data format of the parameter such as <tt>binary</tt>, <tt>date</tt>, <tt>date-time</tt>, <tt>password</tt>.  * The format is usually derived from the dataType alone. However you can set this option for more fine grained control  * of the format in use.  */ ;/**  * The data format of the parameter such as <tt>binary</tt>, <tt>date</tt>, <tt>date-time</tt>, <tt>password</tt>.  * The format is usually derived from the dataType alone. However you can set this option for more fine grained control  * of the format in use.  */ public RestOperationParamDefinition dataFormat(String type) {     setDataFormat(type).     return this. }
true;public;1;4;/**  * Allowed values of the parameter when its an enum type  */ ;/**  * Allowed values of the parameter when its an enum type  */ public RestOperationParamDefinition allowableValues(List<String> allowableValues) {     setAllowableValues(allowableValues).     return this. }
true;public;1;4;/**  * Allowed values of the parameter when its an enum type  */ ;/**  * Allowed values of the parameter when its an enum type  */ public RestOperationParamDefinition allowableValues(String... allowableValues) {     setAllowableValues(Arrays.asList(allowableValues)).     return this. }
true;public;1;4;/**  * Allowed values of the parameter when its an enum type  */ ;/**  * Allowed values of the parameter when its an enum type  */ public RestOperationParamDefinition allowableValues(String allowableValues) {     setAllowableValues(Arrays.asList(allowableValues.split(","))).     return this. }
true;public;1;4;/**  * The parameter type such as body, form, header, path, query  */ ;/**  * The parameter type such as body, form, header, path, query  */ public RestOperationParamDefinition type(RestParamType type) {     setType(type).     return this. }
true;public;2;7;/**  * Adds a body example with the given content-type  */ ;/**  * Adds a body example with the given content-type  */ public RestOperationParamDefinition example(String contentType, String example) {     if (examples == null) {         examples = new ArrayList<>().     }     examples.add(new RestPropertyDefinition(contentType, example)).     return this. }
true;public;1;7;/**  * Adds a single example  */ ;/**  * Adds a single example  */ public RestOperationParamDefinition example(String example) {     if (examples == null) {         examples = new ArrayList<>().     }     examples.add(new RestPropertyDefinition("", example)).     return this. }
true;public;0;6;/**  * Ends the configuration of this parameter  */ ;/**  * Ends the configuration of this parameter  */ public RestDefinition endParam() {     // name is mandatory     StringHelper.notEmpty(name, "name").     verb.getParams().add(this).     return verb.getRest(). }
