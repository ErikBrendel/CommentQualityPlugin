commented;modifiers;parameterAmount;loc;comment;code
true;public;2;4;/**  * A helper method to make it easy to create newly populated instances  */ ;/**  * A helper method to make it easy to create newly populated instances  */ public DefaultNamespaceContext add(String prefix, String uri) {     map.put(prefix, uri).     return this. }
false;public;1;7;;public String getNamespaceURI(String prefix) {     String answer = map.get(prefix).     if (answer == null && parent != null) {         return parent.getNamespaceURI(prefix).     }     return answer. }
false;public;1;11;;public String getPrefix(String namespaceURI) {     for (Entry<String, String> entry : map.entrySet()) {         if (namespaceURI.equals(entry.getValue())) {             return entry.getKey().         }     }     if (parent != null) {         return parent.getPrefix(namespaceURI).     }     return null. }
false;public;1;15;;public Iterator<String> getPrefixes(String namespaceURI) {     Set<String> set = new HashSet<>().     for (Entry<String, String> entry : map.entrySet()) {         if (namespaceURI.equals(entry.getValue())) {             set.add(entry.getKey()).         }     }     if (parent != null) {         Iterator<String> iter = CastUtils.cast(parent.getPrefixes(namespaceURI)).         while (iter.hasNext()) {             set.add(iter.next()).         }     }     return set.iterator(). }
false;public;1;3;;public void setNamespaces(Map<String, String> namespaces) {     map.putAll(namespaces). }
false;public;0;3;;public Map<String, String> getNamespaces() {     return map. }
true;public;0;20;/**  * toString() implementation that outputs the namespace mappings with the following format: "[me: {prefix -> value}, {prefix -> value}], [parent: {prefix -> value}, {prefix -> value}].  * Recurses up the parent's chain.  */ ;/**  * toString() implementation that outputs the namespace mappings with the following format: "[me: {prefix -> value}, {prefix -> value}], [parent: {prefix -> value}, {prefix -> value}].  * Recurses up the parent's chain.  */ @Override public String toString() {     StringBuilder sb = new StringBuilder("[me: ").     for (Entry<String, String> nsEntry : map.entrySet()) {         sb.append("{" + nsEntry.getKey() + " -> " + nsEntry.getValue() + "},").     }     if (!map.isEmpty()) {         // remove the last comma         sb.deleteCharAt(sb.length() - 1).     }     sb.append("]").     // Get the parent's namespace mappings     if (parent != null) {         sb.append(", [parent: ").         sb.append(parent.toString()).         sb.append("]").     }     return sb.toString(). }
