commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Gets the type of this token  *  * @return the type  */ ;/**  * Gets the type of this token  *  * @return the type  */ public TokenType getType() {     return type. }
true;public;0;3;/**  * Gets the input value in this token  *  * @return the value  */ ;/**  * Gets the input value in this token  *  * @return the value  */ public String getValue() {     return value. }
true;public;0;3;/**  * Whether the type is whitespace  */ ;/**  * Whether the type is whitespace  */ public boolean isWhitespace() {     return type == TokenType.whiteSpace. }
true;public;0;3;/**  * Whether the type is eol  */ ;/**  * Whether the type is eol  */ public boolean isEol() {     return type == TokenType.eol. }
true;public;0;3;/**  * Whether the type is escape  */ ;/**  * Whether the type is escape  */ public boolean isEscape() {     return type == TokenType.escape. }
true;public;0;3;/**  * Whether the type is single quote  */ ;/**  * Whether the type is single quote  */ public boolean isSingleQuote() {     return type == TokenType.singleQuote. }
true;public;0;3;/**  * Whether the type is double quote  */ ;/**  * Whether the type is double quote  */ public boolean isDoubleQuote() {     return type == TokenType.doubleQuote. }
true;public;0;3;/**  * Whether the type is a function start  */ ;/**  * Whether the type is a function start  */ public boolean isFunctionStart() {     return type == TokenType.functionStart. }
true;public;0;3;/**  * Whether the type is a function end  */ ;/**  * Whether the type is a function end  */ public boolean isFunctionEnd() {     return type == TokenType.functionEnd. }
true;public;0;3;/**  * Whether the type is binary operator  */ ;/**  * Whether the type is binary operator  */ public boolean isBinary() {     return type == TokenType.binaryOperator. }
true;public;0;3;/**  * Whether the type is unary operator  */ ;/**  * Whether the type is unary operator  */ public boolean isUnary() {     return type == TokenType.unaryOperator. }
true;public;0;3;/**  * Whether the type is logical operator  */ ;/**  * Whether the type is logical operator  */ public boolean isLogical() {     return type == TokenType.logicalOperator. }
true;public;0;3;/**  * Whether the type is a null value  */ ;/**  * Whether the type is a null value  */ public boolean isNullValue() {     return type == TokenType.nullValue. }
true;public;0;3;/**  * Whether the type is a minus operator  */ ;/**  * Whether the type is a minus operator  */ public boolean isMinusValue() {     return type == TokenType.minusValue. }
false;public;0;4;;@Override public String toString() {     return value. }
