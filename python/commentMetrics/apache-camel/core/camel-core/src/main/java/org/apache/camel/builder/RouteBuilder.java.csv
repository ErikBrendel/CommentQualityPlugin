commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return getRouteCollection().toString(). }
true;public,abstract;0;1;/**  * <b>Called on initialization to build the routes using the fluent builder syntax.</b>  * <p/>  * This is a central method for RouteBuilder implementations to implement  * the routes using the Java fluent builder syntax.  *  * @throws Exception can be thrown during configuration  */ ;/**  * <b>Called on initialization to build the routes using the fluent builder syntax.</b>  * <p/>  * This is a central method for RouteBuilder implementations to implement  * the routes using the Java fluent builder syntax.  *  * @throws Exception can be thrown during configuration  */ public abstract void configure() throws Exception.
true;public;0;3;/**  * Configures the REST services  *  * @return the builder  */ ;/**  * Configures the REST services  *  * @return the builder  */ public RestConfigurationDefinition restConfiguration() {     return restConfiguration(""). }
true;public;1;14;/**  * Configures the REST service for the given component  *  * @return the builder  */ ;/**  * Configures the REST service for the given component  *  * @return the builder  */ public RestConfigurationDefinition restConfiguration(String component) {     if (restConfigurations == null) {         restConfigurations = new HashMap<>().     }     RestConfigurationDefinition restConfiguration = restConfigurations.get(component).     if (restConfiguration == null) {         restConfiguration = new RestConfigurationDefinition().         if (!component.isEmpty()) {             restConfiguration.component(component).         }         restConfigurations.put(component, restConfiguration).     }     return restConfiguration. }
true;public;0;6;/**  * Creates a new REST service  *  * @return the builder  */ ;/**  * Creates a new REST service  *  * @return the builder  */ public RestDefinition rest() {     getRestCollection().setCamelContext(getContext()).     RestDefinition answer = getRestCollection().rest().     configureRest(answer).     return answer. }
true;public;1;6;/**  * Creates a new REST service  *  * @param path  the base path  * @return the builder  */ ;/**  * Creates a new REST service  *  * @param path  the base path  * @return the builder  */ public RestDefinition rest(String path) {     getRestCollection().setCamelContext(getContext()).     RestDefinition answer = getRestCollection().rest(path).     configureRest(answer).     return answer. }
true;public;0;5;/**  * Create a new {@code TransformerBuilder}.  *  * @return the builder  */ ;/**  * Create a new {@code TransformerBuilder}.  *  * @return the builder  */ public TransformerBuilder transformer() {     TransformerBuilder tdb = new TransformerBuilder().     transformerBuilders.add(tdb).     return tdb. }
true;public;0;5;/**  * Create a new {@code ValidatorBuilder}.  *  * @return the builder  */ ;/**  * Create a new {@code ValidatorBuilder}.  *  * @return the builder  */ public ValidatorBuilder validator() {     ValidatorBuilder vb = new ValidatorBuilder().     validatorBuilders.add(vb).     return vb. }
true;public;1;6;/**  * Creates a new route from the given URI input  *  * @param uri  the from uri  * @return the builder  */ ;/**  * Creates a new route from the given URI input  *  * @param uri  the from uri  * @return the builder  */ public RouteDefinition from(String uri) {     getRouteCollection().setCamelContext(getContext()).     RouteDefinition answer = getRouteCollection().from(uri).     configureRoute(answer).     return answer. }
true;public;2;6;/**  * Creates a new route from the given URI input  *  * @param uri  the String formatted from uri  * @param args arguments for the string formatting of the uri  * @return the builder  */ ;/**  * Creates a new route from the given URI input  *  * @param uri  the String formatted from uri  * @param args arguments for the string formatting of the uri  * @return the builder  */ public RouteDefinition fromF(String uri, Object... args) {     getRouteCollection().setCamelContext(getContext()).     RouteDefinition answer = getRouteCollection().from(String.format(uri, args)).     configureRoute(answer).     return answer. }
true;public;1;6;/**  * Creates a new route from the given endpoint  *  * @param endpoint  the from endpoint  * @return the builder  */ ;/**  * Creates a new route from the given endpoint  *  * @param endpoint  the from endpoint  * @return the builder  */ public RouteDefinition from(Endpoint endpoint) {     getRouteCollection().setCamelContext(getContext()).     RouteDefinition answer = getRouteCollection().from(endpoint).     configureRoute(answer).     return answer. }
true;public;1;6;/**  * Creates a new route from the given URIs input  *  * @param uris  the from uris  * @return the builder  */ ;/**  * Creates a new route from the given URIs input  *  * @param uris  the from uris  * @return the builder  */ public RouteDefinition from(String... uris) {     getRouteCollection().setCamelContext(getContext()).     RouteDefinition answer = getRouteCollection().from(uris).     configureRoute(answer).     return answer. }
true;public;1;6;/**  * Creates a new route from the given endpoint  *  * @param endpoints  the from endpoints  * @return the builder  */ ;/**  * Creates a new route from the given endpoint  *  * @param endpoints  the from endpoints  * @return the builder  */ public RouteDefinition from(Endpoint... endpoints) {     getRouteCollection().setCamelContext(getContext()).     RouteDefinition answer = getRouteCollection().from(endpoints).     configureRoute(answer).     return answer. }
true;public;1;7;/**  * Installs the given <a href="http://camel.apache.org/error-handler.html">error handler</a> builder  *  * @param errorHandlerBuilder  the error handler to be used by default for all child routes  */ ;/**  * Installs the given <a href="http://camel.apache.org/error-handler.html">error handler</a> builder  *  * @param errorHandlerBuilder  the error handler to be used by default for all child routes  */ public void errorHandler(ErrorHandlerBuilder errorHandlerBuilder) {     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("errorHandler must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     setErrorHandlerBuilder(errorHandlerBuilder). }
true;public;2;15;/**  * Injects a property placeholder value with the given key converted to the given type.  *  * @param key  the property key  * @param type the type to convert the value as  * @return the value, or <tt>null</tt> if value is empty  * @throws Exception is thrown if property with key not found or error converting to the given type.  */ ;/**  * Injects a property placeholder value with the given key converted to the given type.  *  * @param key  the property key  * @param type the type to convert the value as  * @return the value, or <tt>null</tt> if value is empty  * @throws Exception is thrown if property with key not found or error converting to the given type.  */ public <T> T propertyInject(String key, Class<T> type) throws Exception {     StringHelper.notEmpty(key, "key").     ObjectHelper.notNull(type, "Class type").     // the properties component is mandatory     PropertiesComponent pc = getContext().getPropertiesComponent().     // enclose key with {{ }} to force parsing     Object value = pc.parseUri(pc.getPrefixToken() + key + pc.getSuffixToken()).     if (value != null) {         return getContext().getTypeConverter().mandatoryConvertTo(type, value).     } else {         return null.     } }
true;public;0;7;/**  * Adds a route for an interceptor that intercepts every processing step.  *  * @return the builder  */ ;/**  * Adds a route for an interceptor that intercepts every processing step.  *  * @return the builder  */ public InterceptDefinition intercept() {     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("intercept must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     return getRouteCollection().intercept(). }
true;public;0;7;/**  * Adds a route for an interceptor that intercepts incoming messages on any inputs in this route  *  * @return the builder  */ ;/**  * Adds a route for an interceptor that intercepts incoming messages on any inputs in this route  *  * @return the builder  */ public InterceptFromDefinition interceptFrom() {     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("interceptFrom must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     return getRouteCollection().interceptFrom(). }
true;public;1;7;/**  * Adds a route for an interceptor that intercepts incoming messages on the given endpoint.  *  * @param uri  endpoint uri  * @return the builder  */ ;/**  * Adds a route for an interceptor that intercepts incoming messages on the given endpoint.  *  * @param uri  endpoint uri  * @return the builder  */ public InterceptFromDefinition interceptFrom(String uri) {     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("interceptFrom must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     return getRouteCollection().interceptFrom(uri). }
true;public;1;7;/**  * Applies a route for an interceptor if an exchange is send to the given endpoint  *  * @param uri  endpoint uri  * @return the builder  */ ;/**  * Applies a route for an interceptor if an exchange is send to the given endpoint  *  * @param uri  endpoint uri  * @return the builder  */ public InterceptSendToEndpointDefinition interceptSendToEndpoint(String uri) {     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("interceptSendToEndpoint must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     return getRouteCollection().interceptSendToEndpoint(uri). }
true;public;1;8;/**  * <a href="http://camel.apache.org/exception-clause.html">Exception clause</a>  * for catching certain exceptions and handling them.  *  * @param exception exception to catch  * @return the builder  */ ;/**  * <a href="http://camel.apache.org/exception-clause.html">Exception clause</a>  * for catching certain exceptions and handling them.  *  * @param exception exception to catch  * @return the builder  */ public OnExceptionDefinition onException(Class<? extends Throwable> exception) {     // is only allowed at the top currently     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("onException must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     return getRouteCollection().onException(exception). }
true;public;1;7;/**  * <a href="http://camel.apache.org/exception-clause.html">Exception clause</a>  * for catching certain exceptions and handling them.  *  * @param exceptions list of exceptions to catch  * @return the builder  */ ;/**  * <a href="http://camel.apache.org/exception-clause.html">Exception clause</a>  * for catching certain exceptions and handling them.  *  * @param exceptions list of exceptions to catch  * @return the builder  */ public OnExceptionDefinition onException(Class<? extends Throwable>... exceptions) {     OnExceptionDefinition last = null.     for (Class<? extends Throwable> ex : exceptions) {         last = last == null ? onException(ex) : last.onException(ex).     }     return last != null ? last : onException(Exception.class). }
true;public;0;8;/**  * <a href="http://camel.apache.org/oncompletion.html">On completion</a>  * callback for doing custom routing when the {@link org.apache.camel.Exchange} is complete.  *  * @return the builder  */ ;/**  * <a href="http://camel.apache.org/oncompletion.html">On completion</a>  * callback for doing custom routing when the {@link org.apache.camel.Exchange} is complete.  *  * @return the builder  */ public OnCompletionDefinition onCompletion() {     // is only allowed at the top currently     if (!getRouteCollection().getRoutes().isEmpty()) {         throw new IllegalArgumentException("onCompletion must be defined before any routes in the RouteBuilder").     }     getRouteCollection().setCamelContext(getContext()).     return getRouteCollection().onCompletion(). }
false;public;1;11;;public void addRoutesToCamelContext(CamelContext context) throws Exception {     // must configure routes before rests     configureRoutes((ModelCamelContext) context).     configureRests((ModelCamelContext) context).     // but populate rests before routes, as we want to turn rests into routes     populateRests().     populateTransformers().     populateValidators().     populateRoutes(). }
true;public;1;6;/**  * Configures the routes  *  * @param context the Camel context  * @return the routes configured  * @throws Exception can be thrown during configuration  */ ;/**  * Configures the routes  *  * @param context the Camel context  * @return the routes configured  * @throws Exception can be thrown during configuration  */ public RoutesDefinition configureRoutes(ModelCamelContext context) throws Exception {     setContext(context).     checkInitialized().     routeCollection.setCamelContext(context).     return routeCollection. }
true;public;1;5;/**  * Configures the rests  *  * @param context the Camel context  * @return the rests configured  * @throws Exception can be thrown during configuration  */ ;/**  * Configures the rests  *  * @param context the Camel context  * @return the rests configured  * @throws Exception can be thrown during configuration  */ public RestsDefinition configureRests(ModelCamelContext context) throws Exception {     setContext(context).     restCollection.setCamelContext(context).     return restCollection. }
false;public;1;5;;@Override public void setErrorHandlerBuilder(ErrorHandlerBuilder errorHandlerBuilder) {     super.setErrorHandlerBuilder(errorHandlerBuilder).     getRouteCollection().setErrorHandlerFactory(getErrorHandlerBuilder()). }
true;protected;0;15;// ----------------------------------------------------------------------- ;// Implementation methods // ----------------------------------------------------------------------- protected void checkInitialized() throws Exception {     if (initialized.compareAndSet(false, true)) {         // Set the CamelContext ErrorHandler here         ModelCamelContext camelContext = getContext().         if (camelContext.getErrorHandlerFactory() instanceof ErrorHandlerBuilder) {             setErrorHandlerBuilder((ErrorHandlerBuilder) camelContext.getErrorHandlerFactory()).         }         configure().         // a route builder prepares the route definitions correctly already         for (RouteDefinition route : getRouteCollection().getRoutes()) {             route.markPrepared().         }     } }
false;protected;0;8;;protected void populateRoutes() throws Exception {     ModelCamelContext camelContext = getContext().     if (camelContext == null) {         throw new IllegalArgumentException("CamelContext has not been injected!").     }     getRouteCollection().setCamelContext(camelContext).     camelContext.addRouteDefinitions(getRouteCollection().getRoutes()). }
false;protected;0;52;;protected void populateRests() throws Exception {     ModelCamelContext camelContext = getContext().     if (camelContext == null) {         throw new IllegalArgumentException("CamelContext has not been injected!").     }     getRestCollection().setCamelContext(camelContext).     // setup rest configuration before adding the rests     if (getRestConfigurations() != null) {         for (Map.Entry<String, RestConfigurationDefinition> entry : getRestConfigurations().entrySet()) {             RestConfiguration config = entry.getValue().asRestConfiguration(getContext()).             if ("".equals(entry.getKey())) {                 camelContext.setRestConfiguration(config).             } else {                 camelContext.addRestConfiguration(config).             }         }     }     camelContext.addRestDefinitions(getRestCollection().getRests()).     // convert rests into routes so we they are routes for runtime     List<RouteDefinition> routes = new ArrayList<>().     for (RestDefinition rest : getRestCollection().getRests()) {         List<RouteDefinition> list = rest.asRouteDefinition(getContext()).         routes.addAll(list).     }     // convert rests api-doc into routes so they are routes for runtime     for (RestConfiguration config : camelContext.getRestConfigurations()) {         if (config.getApiContextPath() != null) {             // avoid adding rest-api multiple times, in case multiple RouteBuilder classes is added             // to the CamelContext, as we only want to setup rest-api once             // so we check all existing routes if they have rest-api route already added             boolean hasRestApi = false.             for (RouteDefinition route : camelContext.getRouteDefinitions()) {                 FromDefinition from = route.getInputs().get(0).                 if (from.getUri() != null && from.getUri().startsWith("rest-api:")) {                     hasRestApi = true.                 }             }             if (!hasRestApi) {                 RouteDefinition route = RestDefinition.asRouteApiDefinition(camelContext, config).                 log.debug("Adding routeId: {} as rest-api route", route.getId()).                 routes.add(route).             }         }     }     // add the rest routes     for (RouteDefinition route : routes) {         getRouteCollection().route(route).     } }
false;protected;0;9;;protected void populateTransformers() {     ModelCamelContext camelContext = getContext().     if (camelContext == null) {         throw new IllegalArgumentException("CamelContext has not been injected!").     }     for (TransformerBuilder tdb : transformerBuilders) {         tdb.configure(camelContext).     } }
false;protected;0;9;;protected void populateValidators() {     ModelCamelContext camelContext = getContext().     if (camelContext == null) {         throw new IllegalArgumentException("CamelContext has not been injected!").     }     for (ValidatorBuilder vb : validatorBuilders) {         vb.configure(camelContext).     } }
false;public;0;3;;public RestsDefinition getRestCollection() {     return restCollection. }
false;public;0;3;;public Map<String, RestConfigurationDefinition> getRestConfigurations() {     return restConfigurations. }
false;public;1;3;;public void setRestCollection(RestsDefinition restCollection) {     this.restCollection = restCollection. }
false;public;1;3;;public void setRouteCollection(RoutesDefinition routeCollection) {     this.routeCollection = routeCollection. }
false;public;0;3;;public RoutesDefinition getRouteCollection() {     return this.routeCollection. }
false;protected;1;3;;protected void configureRest(RestDefinition rest) { // noop }
false;protected;1;3;;protected void configureRoute(RouteDefinition route) { // noop }
