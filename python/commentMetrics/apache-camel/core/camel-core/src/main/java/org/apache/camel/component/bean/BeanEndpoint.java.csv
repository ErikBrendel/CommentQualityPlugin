commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new BeanProducer(this, processor). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("You cannot consume from a bean endpoint"). }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public BeanProcessor getProcessor() {     return processor. }
false;protected;0;24;;@Override protected void doStart() throws Exception {     super.doStart().     if (processor == null) {         BeanHolder holder = getBeanHolder().         if (holder == null) {             RegistryBean registryBean = new RegistryBean(getCamelContext(), beanName).             if (isCache()) {                 holder = registryBean.createCacheHolder().             } else {                 holder = registryBean.             }         }         processor = new BeanProcessor(holder).         if (method != null) {             processor.setMethod(method).         }         processor.setCache(cache).         if (parameters != null) {             setProperties(processor, parameters).         }     } }
false;protected;0;5;;@Override protected void doStop() throws Exception {     super.doStop(). // noop }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public String getBeanName() {     return beanName. }
true;public;1;3;/**  * Sets the name of the bean to invoke  */ ;/**  * Sets the name of the bean to invoke  */ public void setBeanName(String beanName) {     this.beanName = beanName. }
false;public;0;3;;public boolean isCache() {     return cache != null ? cache : false. }
false;public;0;3;;public Boolean getCache() {     return cache. }
true;public;1;3;/**  * If enabled, Camel will cache the result of the first Registry look-up.  * Cache can be enabled if the bean in the Registry is defined as a singleton scope.  */ ;/**  * If enabled, Camel will cache the result of the first Registry look-up.  * Cache can be enabled if the bean in the Registry is defined as a singleton scope.  */ public void setCache(Boolean cache) {     this.cache = cache. }
false;public;0;3;;public String getMethod() {     return method. }
true;public;1;3;/**  * Sets the name of the method to invoke on the bean  */ ;/**  * Sets the name of the method to invoke on the bean  */ public void setMethod(String method) {     this.method = method. }
false;public;0;3;;public BeanHolder getBeanHolder() {     return beanHolder. }
false;public;1;3;;public void setBeanHolder(BeanHolder beanHolder) {     this.beanHolder = beanHolder. }
false;public;0;3;;public Map<String, Object> getParameters() {     return parameters. }
true;public;1;3;/**  * Used for configuring additional properties on the bean  */ ;/**  * Used for configuring additional properties on the bean  */ public void setParameters(Map<String, Object> parameters) {     this.parameters = parameters. }
false;protected;0;4;;// Implementation methods // ------------------------------------------------------------------------- @Override protected String createEndpointUri() {     return "bean:" + getBeanName() + (method != null ? "?method=" + method : ""). }
