commented;modifiers;parameterAmount;loc;comment;code
false;public;2;7;;public Object evaluate(Exchange exchange, Class type) {     if (exchange.getFromEndpoint() != null) {         return exchange.getFromEndpoint().getEndpointUri().     } else {         return null.     } }
false;public;0;3;;public String toString() {     return "". }
false;public;1;22;;@Override @SuppressWarnings({ "unchecked", "rawtypes" }) public Processor createProcessor(RouteContext routeContext) throws Exception {     // insert a set header definition so we can set the intercepted endpoint uri as a header     // this allows us to use the same header for both the interceptFrom and interceptSendToEndpoint     SetHeaderDefinition headerDefinition = new SetHeaderDefinition(Exchange.INTERCEPTED_ENDPOINT, new ExpressionAdapter() {          public Object evaluate(Exchange exchange, Class type) {             if (exchange.getFromEndpoint() != null) {                 return exchange.getFromEndpoint().getEndpointUri().             } else {                 return null.             }         }          public String toString() {             return "".         }     }).     definition.getOutputs().add(0, headerDefinition).     return this.createChildProcessor(routeContext, true). }
