commented;modifiers;parameterAmount;loc;comment;code
false;public;1;26;;@Override public String createId(NamedNode definition) {     if (definition instanceof RouteDefinition) {         Optional<String> id = extractId((RouteDefinition) definition).         if (id.isPresent()) {             return id.get().         }         id = extractIdFromRestDefinition((RouteDefinition) definition).         if (id.isPresent()) {             return id.get().         }     }     if (definition instanceof VerbDefinition) {         Optional<String> id = extractIdFromVerb((VerbDefinition) definition).         if (id.isPresent()) {             return id.get().         }     }     return defaultNodeIdFactory.createId(definition). }
true;private;1;31;/**  * Extract id from routes  */ ;/**  * Extract id from routes  */ private Optional<String> extractId(RouteDefinition routeDefinition) {     if (routeDefinition.getRestDefinition() != null) {         return Optional.empty().     }     List<FromDefinition> inputs = routeDefinition.getInputs().     if (inputs == null || inputs.isEmpty()) {         return Optional.empty().     }     FromDefinition from = inputs.get(0).     String uri = from.getUri().     // we want to use the context-path of the route     int colon = uri.indexOf(':').     if (colon > 0) {         String name = uri.substring(colon + 1).         int questionMark = name.indexOf("?").         if (questionMark > 0) {             return Optional.of(name.substring(0, questionMark)).         } else {             return Optional.of(name).         }     }     return Optional.empty(). }
true;private;1;7;/**  * Extract id from a rest route.  */ ;/**  * Extract id from a rest route.  */ private Optional<String> extractIdFromRestDefinition(RouteDefinition route) {     if (route.getRestDefinition() != null) {         return extractIdFromInput(route).     }     return Optional.empty(). }
true;private;1;20;/**  * Extract id from a rest verb definition.  */ ;/**  * Extract id from a rest verb definition.  */ private Optional<String> extractIdFromVerb(VerbDefinition verb) {     RestDefinition restDefinition = verb.getRest().     if (restDefinition != null) {         StringBuilder routeId = new StringBuilder().         routeId.append(verb.asVerb()).         appendWithSeparator(routeId, prepareUri(restDefinition.getPath())).         if (verb.getUri() != null && verb.getUri().length() > 0) {             appendWithSeparator(routeId, prepareUri(verb.getUri())).         }         verb.setUsedForGeneratingNodeId(true).         return Optional.of(routeId.toString()).     }     return Optional.empty(). }
true;private;1;36;/**  * Extract id from rest input uri.  */ ;/**  * Extract id from rest input uri.  */ private Optional<String> extractIdFromInput(RouteDefinition route) {     List<FromDefinition> inputs = route.getInputs().     if (inputs == null || inputs.isEmpty()) {         return Optional.empty().     }     FromDefinition from = inputs.get(0).     String uri = from.getUri().     String[] uriSplitted = uri.split(":").     // needs to have at least 3 fields     if (uriSplitted.length < 3) {         return Optional.empty().     }     String verb = uriSplitted[1].     String contextPath = uriSplitted[2].     String additionalUri = "".     if (uriSplitted.length > 3 && uriSplitted[3].startsWith("/")) {         additionalUri = uriSplitted[3].     }     StringBuilder routeId = new StringBuilder(verb.length() + contextPath.length() + additionalUri.length()).     routeId.append(verb).     appendWithSeparator(routeId, prepareUri(contextPath)).     if (additionalUri.length() > 0) {         appendWithSeparator(routeId, prepareUri(additionalUri)).     }     return Optional.of(routeId.toString()). }
true;private;1;11;/**  * Prepares uri to be part of the id.  */ ;/**  * Prepares uri to be part of the id.  */ private String prepareUri(String uri) {     if (uri == null) {         return "".     }     if (uri.contains("?")) {         uri = uri.substring(0, uri.indexOf('?')).     }     return uri.replaceAll("/", String.valueOf(SEPARATOR)). }
true;private;2;15;/**  * Appends new element to the builder.  */ ;/**  * Appends new element to the builder.  */ private void appendWithSeparator(StringBuilder builder, String str) {     if (builder.charAt(builder.length() - 1) == SEPARATOR) {         if (str.startsWith(String.valueOf(SEPARATOR))) {             builder.append(str.replaceFirst(String.valueOf(SEPARATOR), "")).         } else {             builder.append(str).         }     } else {         if (!str.startsWith(String.valueOf(SEPARATOR))) {             builder.append(SEPARATOR).         }         builder.append(str).     } }
