commented;modifiers;parameterAmount;loc;comment;code
false;protected;6;29;;@Override protected String buildCamelEndpointUri(String name, String host, Integer port, String uri, String contextPath, String scheme) {     // build basic uri if none provided     String answer = uri.     if (answer == null) {         answer = doBuildCamelEndpointUri(host, port, contextPath, scheme).     } else {         // we have existing uri, then replace the serviceName with ip:port         if (answer.contains(name + ".host")) {             answer = answer.replaceFirst(name + "\\.host", host).         }         if (answer.contains(name + ".port") && port != null) {             answer = answer.replaceFirst(name + "\\.port", "" + port).         }         if (answer.contains(name) && port != null) {             answer = answer.replaceFirst(name, host + ":" + port).         }         if (answer.contains(name) && port == null) {             answer = answer.replaceFirst(name, host).         }         // include scheme if not provided         if (!answer.startsWith(scheme)) {             answer = scheme + ":" + answer.         }     }     LOGGER.debug("Camel endpoint uri: {} for calling service: {} on server {}:{}", answer, name, host, port).     return answer. }
false;protected;4;26;;protected String doBuildCamelEndpointUri(String host, Integer port, String contextPath, String scheme) {     if (scheme == null) {         // use http/https by default if no scheme or port have been configured         if (port == null) {             scheme = "http4".         } else if (port == 443) {             scheme = "https4".         } else {             scheme = "http4".         }     }     String answer = scheme + "://" + host.     if (port != null) {         answer = answer + ":" + port.     }     if (contextPath != null) {         if (!contextPath.startsWith("/")) {             contextPath = "/" + contextPath.         }         answer += contextPath.     }     return answer. }
