commented;modifiers;parameterAmount;loc;comment;code
false;public;2;23;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (newExchange == null) {         return oldExchange.     }     if (oldExchange == null) {         return newExchange.     }     Exchange answer = null.     // propagate exception first     propagateException(oldExchange, newExchange).     if (newExchange.getException() != null) {         answer = newExchange.     }     if (answer == null) {         // the propagate failures         answer = propagateFailure(oldExchange, newExchange).     }     return answer. }
false;protected;2;11;;protected void propagateException(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return.     }     // propagate exception from old exchange if there isn't already an exception     if (newExchange.getException() == null) {         newExchange.setException(oldExchange.getException()).         newExchange.setProperty(Exchange.FAILURE_ENDPOINT, oldExchange.getProperty(Exchange.FAILURE_ENDPOINT)).     } }
false;protected;2;14;;protected Exchange propagateFailure(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     // propagate exception from old exchange if there isn't already an exception     boolean exceptionHandled = hasExceptionBeenHandledByErrorHandler(oldExchange).     if (oldExchange.isFailed() || oldExchange.isRollbackOnly() || exceptionHandled) {         // propagate failure by using old exchange as the answer         return oldExchange.     }     return newExchange. }
false;public;0;4;;@Override public String toString() {     return "UseLatestAggregationStrategy". }
