commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public boolean isEnabled() {     return enabled. }
false;public;1;3;;public void setEnabled(boolean enabled) {     this.enabled = enabled. }
false;public;1;13;;@Override public List<String> getAllEndpoints(boolean includeInputs) {     List<String> answer = new ArrayList<>().     if (includeInputs) {         for (Map.Entry<String, Set<String>> entry : inputs.entrySet()) {             answer.addAll(entry.getValue()).         }     }     for (Map.Entry<String, Map<String, String>> entry : outputs.entrySet()) {         answer.addAll(entry.getValue().keySet()).     }     return Collections.unmodifiableList(answer). }
false;public;2;15;;@Override public List<String> getEndpointsPerRoute(String routeId, boolean includeInputs) {     List<String> answer = new ArrayList<>().     if (includeInputs) {         Set<String> uris = inputs.get(routeId).         if (uris != null) {             answer.addAll(uris).         }     }     Map<String, String> uris = outputs.get(routeId).     if (uris != null) {         answer.addAll(uris.keySet()).     }     return Collections.unmodifiableList(answer). }
false;public;0;42;;@Override public List<Statistic> getEndpointStatistics() {     List<Statistic> answer = new ArrayList<>().     // inputs     for (Map.Entry<String, Set<String>> entry : inputs.entrySet()) {         String routeId = entry.getKey().         for (String uri : entry.getValue()) {             Long hits = 0L.             if (extended) {                 String key = asUtilizationKey(routeId, uri).                 if (key != null) {                     hits = inputUtilization.getStatistics().get(key).                     if (hits == null) {                         hits = 0L.                     }                 }             }             answer.add(new EndpointRuntimeStatistics(uri, routeId, "in", hits)).         }     }     // outputs     for (Map.Entry<String, Map<String, String>> entry : outputs.entrySet()) {         String routeId = entry.getKey().         for (String uri : entry.getValue().keySet()) {             Long hits = 0L.             if (extended) {                 String key = asUtilizationKey(routeId, uri).                 if (key != null) {                     hits = outputUtilization.getStatistics().get(key).                     if (hits == null) {                         hits = 0L.                     }                 }             }             answer.add(new EndpointRuntimeStatistics(uri, routeId, "out", hits)).         }     }     return answer. }
false;public;0;4;;@Override public int getLimit() {     return limit. }
false;public;1;4;;@Override public void setLimit(int limit) {     this.limit = limit. }
false;public;0;6;;@Override public void clear() {     inputs.clear().     outputs.clear().     reset(). }
false;public;0;10;;@Override public void reset() {     // its safe to call clear as reset     if (inputUtilization != null) {         inputUtilization.clear().     }     if (outputUtilization != null) {         outputUtilization.clear().     } }
false;public;0;6;;@Override public int size() {     int total = inputs.values().size().     total += outputs.values().size().     return total. }
false;protected;0;24;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "camelContext", this).     if (inputs == null) {         inputs = new HashMap<>().     }     if (outputs == null) {         outputs = new HashMap<>().     }     if (getCamelContext().getManagementStrategy() != null && getCamelContext().getManagementStrategy().getManagementAgent() != null) {         extended = getCamelContext().getManagementStrategy().getManagementAgent().getStatisticsLevel().isExtended().     }     if (extended) {         inputUtilization = new DefaultEndpointUtilizationStatistics(limit).         outputUtilization = new DefaultEndpointUtilizationStatistics(limit).     }     if (extended) {         log.info("Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: {})", limit).     } else {         log.info("Runtime endpoint registry is in normal mode gathering information of all incoming and outgoing endpoints (cache limit: {})", limit).     }     ServiceHelper.startService(inputUtilization, outputUtilization). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     clear().     ServiceHelper.stopService(inputUtilization, outputUtilization). }
false;public;1;57;;@Override @SuppressWarnings("unchecked") public void notify(CamelEvent event) throws Exception {     if (event instanceof RouteAddedEvent) {         RouteAddedEvent rse = (RouteAddedEvent) event.         Endpoint endpoint = rse.getRoute().getEndpoint().         String routeId = rse.getRoute().getId().         // a HashSet is fine for inputs as we only have a limited number of those         Set<String> uris = new HashSet<>().         uris.add(endpoint.getEndpointUri()).         inputs.put(routeId, uris).         // use a LRUCache for outputs as we could potential have unlimited uris if dynamic routing is in use         // and therefore need to have the limit in use         outputs.put(routeId, LRUCacheFactory.newLRUCache(limit)).     } else if (event instanceof RouteRemovedEvent) {         RouteRemovedEvent rse = (RouteRemovedEvent) event.         String routeId = rse.getRoute().getId().         inputs.remove(routeId).         outputs.remove(routeId).         if (extended) {             String uri = rse.getRoute().getEndpoint().getEndpointUri().             String key = asUtilizationKey(routeId, uri).             if (key != null) {                 inputUtilization.remove(key).             }         }     } else if (extended && event instanceof ExchangeCreatedEvent) {         // we only capture details in extended mode         ExchangeCreatedEvent ece = (ExchangeCreatedEvent) event.         Endpoint endpoint = ece.getExchange().getFromEndpoint().         if (endpoint != null) {             String routeId = ece.getExchange().getFromRouteId().             String uri = endpoint.getEndpointUri().             String key = asUtilizationKey(routeId, uri).             if (key != null) {                 inputUtilization.onHit(key).             }         }     } else if (event instanceof ExchangeSendingEvent) {         ExchangeSendingEvent ese = (ExchangeSendingEvent) event.         Endpoint endpoint = ese.getEndpoint().         String routeId = getRouteId(ese.getExchange()).         String uri = endpoint.getEndpointUri().         Map<String, String> uris = outputs.get(routeId).         if (uris != null && !uris.containsKey(uri)) {             uris.put(uri, uri).         }         if (extended) {             String key = asUtilizationKey(routeId, uri).             if (key != null) {                 outputUtilization.onHit(key).             }         }     } }
false;private;1;13;;private String getRouteId(Exchange exchange) {     String answer = null.     UnitOfWork uow = exchange.getUnitOfWork().     RouteContext rc = uow != null ? uow.getRouteContext() : null.     if (rc != null) {         answer = rc.getRoute().getId().     }     if (answer == null) {         // fallback and get from route id on the exchange         answer = exchange.getFromRouteId().     }     return answer. }
false;public;0;4;;@Override public boolean isDisabled() {     return !enabled. }
false;public;1;7;;@Override public boolean isEnabled(CamelEvent event) {     return enabled && event instanceof ExchangeCreatedEvent || event instanceof ExchangeSendingEvent || event instanceof RouteAddedEvent || event instanceof RouteRemovedEvent. }
false;private,static;2;7;;private static String asUtilizationKey(String routeId, String uri) {     if (routeId == null || uri == null) {         return null.     } else {         return routeId + "|" + uri.     } }
false;public;0;3;;public String getUri() {     return uri. }
false;public;0;3;;public String getRouteId() {     return routeId. }
false;public;0;3;;public String getDirection() {     return direction. }
false;public;0;3;;public long getHits() {     return hits. }
