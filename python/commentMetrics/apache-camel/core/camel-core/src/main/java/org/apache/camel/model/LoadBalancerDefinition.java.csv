commented;modifiers;parameterAmount;loc;comment;code
true;protected;3;7;/**  * Sets a named property on the data format instance using introspection  */ ;/**  * Sets a named property on the data format instance using introspection  */ protected void setProperty(Object bean, String name, Object value) {     try {         IntrospectionSupport.setProperty(bean, name, value).     } catch (Exception e) {         throw new IllegalArgumentException("Failed to set property " + name + " on " + bean + ". Reason: " + e, e).     } }
true;public;0;3;/**  * Maximum number of outputs, as some load balancers only support 1 processor  */ ;/**  * Maximum number of outputs, as some load balancers only support 1 processor  */ public int getMaximumNumberOfOutputs() {     return Integer.MAX_VALUE. }
true;public;1;2;/**  * Allows derived classes to customize the load balancer  */ ;/**  * Allows derived classes to customize the load balancer  */ public void configureLoadBalancer(LoadBalancer loadBalancer) { }
false;public;0;3;;public LoadBalancer getLoadBalancer() {     return loadBalancer. }
false;public;1;3;;public void setLoadBalancer(LoadBalancer loadBalancer) {     this.loadBalancer = loadBalancer. }
false;public;0;3;;public String getLoadBalancerTypeName() {     return loadBalancerTypeName. }
false;public;0;4;;@Override public Map<QName, Object> getOtherAttributes() {     return otherAttributes. }
false;public;1;4;;@Override public void setOtherAttributes(Map<QName, Object> otherAttributes) {     this.otherAttributes = otherAttributes. }
false;public;0;8;;@Override public String toString() {     if (loadBalancer != null) {         return loadBalancer.toString().     } else {         return loadBalancerTypeName.     } }
