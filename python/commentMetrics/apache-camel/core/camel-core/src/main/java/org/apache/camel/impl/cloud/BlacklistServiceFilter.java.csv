commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the servers to blacklist.  *  * @param servers server in the format: [service@]host:port.  */ ;/**  * Set the servers to blacklist.  *  * @param servers server in the format: [service@]host:port.  */ public void setServers(List<String> servers) {     this.services.clear().     servers.forEach(this::addServer). }
true;public;1;4;/**  * Set the servers to blacklist.  *  * @param servers servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ ;/**  * Set the servers to blacklist.  *  * @param servers servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ public void setServers(String servers) {     this.services.clear().     addServer(servers). }
true;public;1;3;/**  * Add a server to the known list of servers.  */ ;/**  * Add a server to the known list of servers.  */ public void addServer(ServiceDefinition server) {     services.add(server). }
true;public;1;3;/**  * Add a server to the known list of servers to blacklist.  * @param serverString servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ ;/**  * Add a server to the known list of servers to blacklist.  * @param serverString servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ public void addServer(String serverString) {     DefaultServiceDefinition.parse(serverString).forEach(this::addServer). }
true;public;1;3;/**  * Remove an existing server from the list of known servers.  */ ;/**  * Remove an existing server from the list of known servers.  */ public void removeServer(Predicate<ServiceDefinition> condition) {     services.removeIf(condition). }
false;public;1;8;;@Override public List<ServiceDefinition> apply(List<ServiceDefinition> services) {     return services.stream().filter(s -> this.services.stream().noneMatch(b -> b.matches(s))).collect(Collectors.toList()). }
false;;0;3;;List<ServiceDefinition> getBlacklistedServices() {     return Collections.unmodifiableList(this.services). }
false;public,static;1;8;;// ************************************************************************* // Helpers // ************************************************************************* public static BlacklistServiceFilter forServices(Collection<ServiceDefinition> definitions) {     BlacklistServiceFilter filter = new BlacklistServiceFilter().     for (ServiceDefinition definition : definitions) {         filter.addServer(definition).     }     return filter. }
false;public,static;1;8;;public static BlacklistServiceFilter forServices(ServiceDefinition... definitions) {     BlacklistServiceFilter filter = new BlacklistServiceFilter().     for (ServiceDefinition definition : definitions) {         filter.addServer(definition).     }     return filter. }
