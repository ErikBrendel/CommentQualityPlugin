commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public BindyType getType() {     return type. }
true;public;1;3;/**  * Whether to use csv, fixed or key value pairs mode.  */ ;/**  * Whether to use csv, fixed or key value pairs mode.  */ public void setType(BindyType type) {     this.type = type. }
false;public;0;3;;public String getClassType() {     return classType. }
true;public;1;3;/**  * Name of model class to use.  */ ;/**  * Name of model class to use.  */ public void setClassType(String classType) {     this.classType = classType. }
true;public;1;3;/**  * Type of model class to use.  */ ;/**  * Type of model class to use.  */ public void setClassType(Class<?> classType) {     this.clazz = classType. }
false;public;0;3;;public String getLocale() {     return locale. }
true;public;1;3;/**  * To configure a default locale to use, such as <tt>us</tt> for united states.  * <p/>  * To use the JVM platform default locale then use the name <tt>default</tt>  */ ;/**  * To configure a default locale to use, such as <tt>us</tt> for united states.  * <p/>  * To use the JVM platform default locale then use the name <tt>default</tt>  */ public void setLocale(String locale) {     this.locale = locale. }
false;public;0;3;;public Boolean getUnwrapSingleInstance() {     return unwrapSingleInstance. }
true;public;1;3;/**  * When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a <tt>java.util.List</tt>.  */ ;/**  * When unmarshalling should a single instance be unwrapped and returned instead of wrapped in a <tt>java.util.List</tt>.  */ public void setUnwrapSingleInstance(Boolean unwrapSingleInstance) {     this.unwrapSingleInstance = unwrapSingleInstance. }
false;protected;1;22;;protected DataFormat createDataFormat(RouteContext routeContext) {     if (classType == null && clazz == null) {         throw new IllegalArgumentException("Either packages or classType must be specified").     }     if (type == BindyType.Csv) {         setDataFormatName("bindy-csv").     } else if (type == BindyType.Fixed) {         setDataFormatName("bindy-fixed").     } else {         setDataFormatName("bindy-kvp").     }     if (clazz == null && classType != null) {         try {             clazz = routeContext.getCamelContext().getClassResolver().resolveMandatoryClass(classType).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return super.createDataFormat(routeContext). }
false;protected;2;8;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     setProperty(camelContext, dataFormat, "locale", locale).     setProperty(camelContext, dataFormat, "classType", clazz).     if (unwrapSingleInstance != null) {         setProperty(camelContext, dataFormat, "unwrapSingleInstance", unwrapSingleInstance).     } }
