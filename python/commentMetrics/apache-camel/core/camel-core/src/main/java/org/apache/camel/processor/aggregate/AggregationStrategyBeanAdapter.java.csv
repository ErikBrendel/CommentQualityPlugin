commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String getMethodName() {     return methodName. }
false;public;1;3;;public void setMethodName(String methodName) {     this.methodName = methodName. }
false;public;0;3;;public boolean isAllowNullOldExchange() {     return allowNullOldExchange. }
false;public;1;3;;public void setAllowNullOldExchange(boolean allowNullOldExchange) {     this.allowNullOldExchange = allowNullOldExchange. }
false;public;0;3;;public boolean isAllowNullNewExchange() {     return allowNullNewExchange. }
false;public;1;3;;public void setAllowNullNewExchange(boolean allowNullNewExchange) {     this.allowNullNewExchange = allowNullNewExchange. }
false;public;2;27;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (!allowNullOldExchange && oldExchange == null) {         return newExchange.     }     if (!allowNullNewExchange && newExchange == null) {         return oldExchange.     }     try {         Object out = mi.invoke(pojo, oldExchange, newExchange).         if (out != null) {             if (oldExchange != null) {                 oldExchange.getIn().setBody(out).             } else {                 newExchange.getIn().setBody(out).             }         }     } catch (Exception e) {         if (oldExchange != null) {             oldExchange.setException(e).         } else {             newExchange.setException(e).         }     }     return oldExchange != null ? oldExchange : newExchange. }
true;protected;1;20;/**  * Validates whether the given method is valid.  *  * @param method  the method  * @return true if valid, false to skip the method  */ ;/**  * Validates whether the given method is valid.  *  * @param method  the method  * @return true if valid, false to skip the method  */ protected boolean isValidMethod(Method method) {     // must not be in the excluded list     for (Method excluded : EXCLUDED_METHODS) {         if (method.equals(excluded)) {             return false.         }     }     // must be a public method     if (!Modifier.isPublic(method.getModifiers())) {         return false.     }     // return type must not be void and it should not be a bridge method     if (method.getReturnType().equals(Void.TYPE) || method.isBridge()) {         return false.     }     return true. }
false;private,static;1;3;;private static boolean isStaticMethod(Method method) {     return Modifier.isStatic(method.getModifiers()). }
false;protected;0;46;;@Override protected void doStart() throws Exception {     Method found = null.     if (methodName != null) {         for (Method method : type.getMethods()) {             if (isValidMethod(method) && method.getName().equals(methodName)) {                 if (found == null) {                     found = method.                 } else {                     throw new IllegalArgumentException("The bean " + type + " has 2 or more methods with the name " + methodName).                 }             }         }     } else {         for (Method method : type.getMethods()) {             if (isValidMethod(method)) {                 if (found == null) {                     found = method.                 } else {                     throw new IllegalArgumentException("The bean " + type + " has 2 or more methods and no explicit method name was configured.").                 }             }         }     }     if (found == null) {         throw new UnsupportedOperationException("Cannot find a valid method with name: " + methodName + " on bean type: " + type).     }     // if its not a static method then we must have an instance of the pojo     if (!isStaticMethod(found) && pojo == null) {         pojo = camelContext.getInjector().newInstance(type).     }     // create the method info which has adapted to the pojo     AggregationStrategyBeanInfo bi = new AggregationStrategyBeanInfo(type, found).     mi = bi.createMethodInfo().     // in case the POJO is CamelContextAware     if (pojo instanceof CamelContextAware) {         ((CamelContextAware) pojo).setCamelContext(getCamelContext()).     }     // in case the pojo is a service     ServiceHelper.startService(pojo). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(pojo). }
