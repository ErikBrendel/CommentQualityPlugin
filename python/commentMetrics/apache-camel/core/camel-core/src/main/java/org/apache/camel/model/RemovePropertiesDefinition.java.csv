commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "removeProperties[" + getPattern() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "removeProperties". }
false;public;0;4;;@Override public String getLabel() {     return "removeProperties[" + getPattern() + "]". }
true;public;1;3;/**  * Name or pattern of properties to remove.  *  * The pattern is matched in the following order:  * 1 = exact match  * 2 = wildcard (pattern ends with a * and the name starts with the pattern)  * 3 = regular expression  * (all of above is case in-sensitive).  */ ;/**  * Name or pattern of properties to remove.  *  * The pattern is matched in the following order:  * 1 = exact match  * 2 = wildcard (pattern ends with a * and the name starts with the pattern)  * 3 = regular expression  * (all of above is case in-sensitive).  */ public void setPattern(String pattern) {     this.pattern = pattern. }
false;public;0;3;;public String getPattern() {     return pattern. }
false;public;0;3;;public String[] getExcludePatterns() {     return excludePatterns. }
true;public;1;3;/**  * Name or pattern of properties to not remove.  *  * The pattern is matched in the following order:  * 1 = exact match  * 2 = wildcard (pattern ends with a * and the name starts with the pattern)  * 3 = regular expression  * (all of above is case in-sensitive).  */ ;/**  * Name or pattern of properties to not remove.  *  * The pattern is matched in the following order:  * 1 = exact match  * 2 = wildcard (pattern ends with a * and the name starts with the pattern)  * 3 = regular expression  * (all of above is case in-sensitive).  */ public void setExcludePatterns(String[] excludePatterns) {     this.excludePatterns = excludePatterns. }
false;public;0;3;;public String getExcludePattern() {     return excludePattern. }
true;public;1;3;/**  * Name or pattern of properties to not remove.  *  * The pattern is matched in the following order:  * 1 = exact match  * 2 = wildcard (pattern ends with a * and the name starts with the pattern)  * 3 = regular expression  * (all of above is case in-sensitive).  */ ;/**  * Name or pattern of properties to not remove.  *  * The pattern is matched in the following order:  * 1 = exact match  * 2 = wildcard (pattern ends with a * and the name starts with the pattern)  * 3 = regular expression  * (all of above is case in-sensitive).  */ public void setExcludePattern(String excludePattern) {     this.excludePattern = excludePattern. }
