commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Callback executed before processing a step in the route.  *  * @param exchange  the current exchange  * @return any state to keep and provide as data to the {@link #after(org.apache.camel.Exchange, Object)} method, or use <tt>null</tt> for no state.  * @throws Exception is thrown if error during the call.  */ ;/**  * Callback executed before processing a step in the route.  *  * @param exchange  the current exchange  * @return any state to keep and provide as data to the {@link #after(org.apache.camel.Exchange, Object)} method, or use <tt>null</tt> for no state.  * @throws Exception is thrown if error during the call.  */ T before(Exchange exchange) throws Exception.
true;;2;1;/**  * Callback executed after processing a step in the route.  *  * @param exchange  the current exchange  * @param data      the state, if any, returned in the {@link #before(org.apache.camel.Exchange)} method.  * @throws Exception is thrown if error during the call.  */ ;/**  * Callback executed after processing a step in the route.  *  * @param exchange  the current exchange  * @param data      the state, if any, returned in the {@link #before(org.apache.camel.Exchange)} method.  * @throws Exception is thrown if error during the call.  */ void after(Exchange exchange, T data) throws Exception.
true;static;1;8;/**  * Wrap an InstrumentationProcessor into a CamelInternalProcessorAdvice  */ ;/**  * Wrap an InstrumentationProcessor into a CamelInternalProcessorAdvice  */ static <T> CamelInternalProcessorAdvice<T> wrap(InstrumentationProcessor<T> instrumentationProcessor) {     if (instrumentationProcessor instanceof CamelInternalProcessor) {         return (CamelInternalProcessorAdvice<T>) instrumentationProcessor.     } else {         return new CamelInternalProcessorAdviceWrapper<T>(instrumentationProcessor).     } }
false;static;1;7;;static Object unwrap(CamelInternalProcessorAdvice<?> advice) {     if (advice instanceof CamelInternalProcessorAdviceWrapper) {         return ((CamelInternalProcessorAdviceWrapper) advice).unwrap().     } else {         return advice.     } }
false;;0;3;;InstrumentationProcessor<T> unwrap() {     return instrumentationProcessor. }
false;public;0;4;;@Override public int getOrder() {     return instrumentationProcessor.getOrder(). }
false;public;1;4;;@Override public T before(Exchange exchange) throws Exception {     return instrumentationProcessor.before(exchange). }
false;public;2;4;;@Override public void after(Exchange exchange, T data) throws Exception {     instrumentationProcessor.after(exchange, data). }
