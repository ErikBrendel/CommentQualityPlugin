commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public String toString() {     if (messageFrequency > 0) {         return "SamplingThrottler[1 exchange per: " + messageFrequency + " messages received]".     } else {         return "SamplingThrottler[1 exchange per: " + samplePeriod + " " + units.toString().toLowerCase(Locale.ENGLISH) + "]".     } }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;7;;public String getTraceLabel() {     if (messageFrequency > 0) {         return "samplingThrottler[1 exchange per: " + messageFrequency + " messages received]".     } else {         return "samplingThrottler[1 exchange per: " + samplePeriod + " " + units.toString().toLowerCase(Locale.ENGLISH) + "]".     } }
false;public;0;3;;public long getMessageFrequency() {     return messageFrequency. }
false;public;0;3;;public long getSamplePeriod() {     return samplePeriod. }
false;public;0;3;;public TimeUnit getUnits() {     return units. }
false;public;2;40;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     boolean doSend = false.     synchronized (calculationLock) {         if (messageFrequency > 0) {             currentMessageCount++.             if (currentMessageCount % messageFrequency == 0) {                 doSend = true.             }         } else {             long now = System.currentTimeMillis().             if (now >= timeOfLastExchange + periodInMillis) {                 doSend = true.                 if (log.isTraceEnabled()) {                     log.trace(sampled.sample()).                 }                 timeOfLastExchange = now.             } else {                 if (log.isTraceEnabled()) {                     log.trace(sampled.drop()).                 }             }         }     }     if (!doSend) {         // will just set a property         try {             stopper.process(exchange).         } catch (Exception e) {             exchange.setException(e).         }     }     // we are done synchronously     callback.done(true).     return true. }
false;;0;6;;String drop() {     droppedThisPeriod++.     totalThisPeriod++.     totalDropped++.     return getDroppedLog(). }
false;;0;6;;String sample() {     // a new period, reset to 1     totalThisPeriod = 1.     totalSampled++.     droppedThisPeriod = 0.     return getSampledLog(). }
false;;0;3;;String getSampledLog() {     return String.format("Sampled %d of %d total exchanges", totalSampled, totalSampled + totalDropped). }
false;;0;4;;String getDroppedLog() {     return String.format("Dropped %d of %d exchanges in this period, totalling %d dropped of %d exchanges overall.", droppedThisPeriod, totalThisPeriod, totalDropped, totalSampled + totalDropped). }
