commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public boolean shouldRetry(final int retryCounter) {     return maximumRetries <= 0 || retryCounter < maximumRetries. }
false;public;1;6;;public void doDelay(final int retryCounter) throws InterruptedException {     long sleepFor = getDelay(retryCounter).     if (sleepFor > 0) {         Thread.sleep(sleepFor).     } }
false;public;1;11;;public long getDelay(final int retryCounter) {     long sleepFor = 0.     if (retryDelay > 0 || randomBackOff) {         sleepFor = exponentialBackOff ? (retryDelay << retryCounter) : (randomBackOff ? ThreadLocalRandom.current().nextInt((int) (maximumRetryDelay > 0 ? maximumRetryDelay : DEFAULT_MAXIMUM_RETRY_DELAY)) : retryDelay).         if (maximumRetryDelay > 0 && sleepFor > maximumRetryDelay) {             sleepFor = maximumRetryDelay.         }     }     return sleepFor. }
false;public;0;3;;public int getMaximumRetries() {     return maximumRetries. }
false;public;1;3;;public void setMaximumRetries(int maximumRetries) {     this.maximumRetries = maximumRetries. }
false;public;1;4;;public OptimisticLockRetryPolicy maximumRetries(int maximumRetries) {     setMaximumRetries(maximumRetries).     return this. }
false;public;0;3;;public long getRetryDelay() {     return retryDelay. }
false;public;1;3;;public void setRetryDelay(long retryDelay) {     this.retryDelay = retryDelay. }
false;public;1;4;;public OptimisticLockRetryPolicy retryDelay(long retryDelay) {     setRetryDelay(retryDelay).     return this. }
false;public;0;3;;public long getMaximumRetryDelay() {     return maximumRetryDelay. }
false;public;1;3;;public void setMaximumRetryDelay(long maximumRetryDelay) {     this.maximumRetryDelay = maximumRetryDelay. }
false;public;1;4;;public OptimisticLockRetryPolicy maximumRetryDelay(long maximumRetryDelay) {     setMaximumRetryDelay(maximumRetryDelay).     return this. }
false;public;0;3;;public boolean isExponentialBackOff() {     return exponentialBackOff. }
false;public;1;3;;public void setExponentialBackOff(boolean exponentialBackOff) {     this.exponentialBackOff = exponentialBackOff. }
false;public;0;4;;public OptimisticLockRetryPolicy exponentialBackOff() {     setExponentialBackOff(true).     return this. }
false;public;0;3;;public boolean isRandomBackOff() {     return randomBackOff. }
false;public;1;3;;public void setRandomBackOff(boolean randomBackOff) {     this.randomBackOff = randomBackOff. }
false;public;0;4;;public OptimisticLockRetryPolicy randomBackOff() {     setRandomBackOff(true).     return this. }
false;public;0;11;;@Override public String toString() {     final StringBuilder sb = new StringBuilder("OptimisticLockRetryPolicy[").     sb.append("maximumRetries=").append(maximumRetries).     sb.append(", retryDelay=").append(retryDelay).     sb.append(", maximumRetryDelay=").append(maximumRetryDelay).     sb.append(", exponentialBackOff=").append(exponentialBackOff).     sb.append(", randomBackOff=").append(randomBackOff).     sb.append(']').     return sb.toString(). }
