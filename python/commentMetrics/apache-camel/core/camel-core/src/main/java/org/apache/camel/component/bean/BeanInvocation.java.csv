commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public String toString() {     Object list = null.     if (args != null) {         list = Arrays.asList(args).     }     return "BeanInvocation " + method + " with " + list + "]". }
false;public;0;3;;public Object[] getArgs() {     return args. }
false;public;0;3;;public Method getMethod() {     return method. }
false;public;1;3;;public void setMethod(Method method) {     this.method = method. }
false;public;1;3;;public void setArgs(Object[] args) {     this.args = args. }
true;public;2;12;/**  * This causes us to invoke the endpoint Pojo using reflection.  *  * @param pojo     the bean on which to perform this invocation  * @param exchange the exchange carrying the method invocation  */ ;/**  * This causes us to invoke the endpoint Pojo using reflection.  *  * @param pojo     the bean on which to perform this invocation  * @param exchange the exchange carrying the method invocation  */ public void invoke(Object pojo, Exchange exchange) {     try {         LOG.trace("Invoking method: {} with args: {}", getMethod(), getArgs()).         Object response = getMethod().invoke(pojo, getArgs()).         LOG.trace("Got response: {}", response).         exchange.getOut().setBody(response).     } catch (InvocationTargetException e) {         exchange.setException(RuntimeCamelException.wrapRuntimeCamelException(e.getCause())).     } catch (Exception e) {         throw RuntimeCamelException.wrapRuntimeCamelException(e).     } }
false;public;1;9;;public void readExternal(ObjectInput objectInput) throws IOException, ClassNotFoundException {     methodBean = ObjectHelper.cast(MethodBean.class, objectInput.readObject()).     try {         method = methodBean.getMethod().     } catch (NoSuchMethodException e) {         throw new IOException(e).     }     args = ObjectHelper.cast(Object[].class, objectInput.readObject()). }
false;public;1;7;;public void writeExternal(ObjectOutput objectOutput) throws IOException {     if (methodBean == null) {         methodBean = new MethodBean(method).     }     objectOutput.writeObject(methodBean).     objectOutput.writeObject(args). }
