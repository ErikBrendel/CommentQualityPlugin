commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public boolean matches(Exchange exchange) {     return (predicate != null) ? predicate.test(exchange) : false. }
true;public;1;4;/**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange.  */ ;// ******************************* // Exchange // ******************************* /**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange.  */ public T exchange(final Predicate<Exchange> predicate) {     this.predicate = predicate::test.     return parent. }
true;public;1;3;/**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Message.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .message(m -> m.getBody() != null)  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ ;// ******************************* // Message // ******************************* /**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Message.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .message(m -> m.getBody() != null)  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ public T message(final Predicate<Message> predicate) {     return exchange(e -> predicate.test(e.getIn())). }
true;public;1;3;/**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body(b -> b != null)  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ ;// ******************************* // Body // ******************************* /**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body(b -> b != null)  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ public T body(final Predicate<Object> predicate) {     return exchange(e -> predicate.test(e.getIn().getBody())). }
true;public;2;3;/**  * Define a {@link org.apache.camel.Predicate} which targets the typed Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body(Long.class, b -> (b & 1) == 0)  *            .log("Received even number ${body}")  *     .endChoice()  * }</pre></blockquote>  */ ;/**  * Define a {@link org.apache.camel.Predicate} which targets the typed Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body(Long.class, b -> (b & 1) == 0)  *            .log("Received even number ${body}")  *     .endChoice()  * }</pre></blockquote>  */ public <B> T body(final Class<B> type, final Predicate<B> predicate) {     return exchange(e -> predicate.test(e.getIn().getBody(type))). }
true;public;1;6;/**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body((b, h) -> b != null || h.containsKy("ToProcess"))  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ ;/**  * Define a {@link org.apache.camel.Predicate} which targets the Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body((b, h) -> b != null || h.containsKy("ToProcess"))  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ public T body(final BiPredicate<Object, Map<String, Object>> predicate) {     return exchange(e -> predicate.test(e.getIn().getBody(), e.getIn().getHeaders())). }
true;public;2;6;/**  * Define a {@link org.apache.camel.Predicate} which targets the typed Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body(String.class, (b, h) -> b != null && !b.isEmpty() || h.containsKy("ToProcess"))  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ ;/**  * Define a {@link org.apache.camel.Predicate} which targets the typed Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .choice()  *         .when()  *            .body(String.class, (b, h) -> b != null && !b.isEmpty() || h.containsKy("ToProcess"))  *            .log("Received ${body}")  *     .endChoice()  * }</pre></blockquote>  */ public <B> T body(final Class<B> type, final BiPredicate<B, Map<String, Object>> predicate) {     return exchange(e -> predicate.test(e.getIn().getBody(type), e.getIn().getHeaders())). }
