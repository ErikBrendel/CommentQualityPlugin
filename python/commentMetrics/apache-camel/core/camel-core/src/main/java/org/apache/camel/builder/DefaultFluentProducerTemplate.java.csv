commented;modifiers;parameterAmount;loc;comment;code
false;protected;1;4;;@Override protected ConvertBodyProcessor computeValue(Class<?> type) {     return new ConvertBodyProcessor(type). }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return context. }
false;public;0;7;;@Override public int getCurrentCacheSize() {     if (template == null) {         return 0.     }     return template.getCurrentCacheSize(). }
false;public;0;6;;@Override public void cleanUp() {     if (template != null) {         template.cleanUp().     } }
false;public;1;4;;@Override public void setDefaultEndpointUri(String endpointUri) {     setDefaultEndpoint(getCamelContext().getEndpoint(endpointUri)). }
false;public;0;4;;@Override public Endpoint getDefaultEndpoint() {     return defaultEndpoint.orElse(null). }
false;public;1;4;;@Override public void setDefaultEndpoint(Endpoint defaultEndpoint) {     this.defaultEndpoint = Optional.ofNullable(defaultEndpoint). }
false;public;0;4;;@Override public int getMaximumCacheSize() {     return maximumCacheSize. }
false;public;1;4;;@Override public void setMaximumCacheSize(int maximumCacheSize) {     this.maximumCacheSize = maximumCacheSize. }
false;public;0;4;;@Override public boolean isEventNotifierEnabled() {     return eventNotifierEnabled. }
false;public;1;4;;@Override public void setEventNotifierEnabled(boolean eventNotifierEnabled) {     this.eventNotifierEnabled = eventNotifierEnabled. }
false;public;0;7;;@Override public FluentProducerTemplate clearAll() {     clearBody().     clearHeaders().     return this. }
false;public;2;12;;@Override public FluentProducerTemplate withHeader(String key, Object value) {     Map<String, Object> map = headers.get().     if (map == null) {         map = new HashMap<>().         headers.set(map).     }     map.put(key, value).     return this. }
false;public;0;6;;@Override public FluentProducerTemplate clearHeaders() {     headers.remove().     return this. }
false;public;1;6;;@Override public FluentProducerTemplate withBody(Object body) {     this.body.set(body).     return this. }
false;public;2;10;;@Override public FluentProducerTemplate withBodyAs(Object body, Class<?> type) {     Object b = type != null ? context.getTypeConverter().convertTo(type, body) : body.     this.body.set(b).     return this. }
false;public;0;6;;@Override public FluentProducerTemplate clearBody() {     body.remove().     return this. }
false;public;1;5;;@Override public FluentProducerTemplate withTemplateCustomizer(final Consumer<ProducerTemplate> templateCustomizer) {     this.templateCustomizer = Optional.of(templateCustomizer).     return this. }
false;public;1;4;;@Override public FluentProducerTemplate withExchange(final Exchange exchange) {     return withExchange(() -> exchange). }
false;public;1;5;;@Override public FluentProducerTemplate withExchange(final Supplier<Exchange> exchangeSupplier) {     this.exchangeSupplier = Optional.of(exchangeSupplier).     return this. }
false;public;1;4;;@Override public FluentProducerTemplate withProcessor(final Processor processor) {     return withProcessor(() -> processor). }
false;public;1;5;;@Override public FluentProducerTemplate withProcessor(final Supplier<Processor> processorSupplier) {     this.processorSupplier = Optional.of(processorSupplier).     return this. }
false;public;1;4;;@Override public FluentProducerTemplate to(String endpointUri) {     return to(context.getEndpoint(endpointUri)). }
false;public;1;5;;@Override public FluentProducerTemplate to(Endpoint endpoint) {     this.endpoint = Optional.of(endpoint).     return this. }
false;public;0;4;;// ************************ // REQUEST // ************************ @Override public Object request() throws CamelExecutionException {     return request(Object.class). }
false;public;1;35;;@Override @SuppressWarnings("unchecked") public <T> T request(Class<T> type) throws CamelExecutionException {     if (exchangeSupplier.isPresent()) {         throw new IllegalArgumentException("withExchange not supported on FluentProducerTemplate.request method. Use send method instead.").     }     // Determine the target endpoint     final Endpoint target = target().     // Create the default processor if not provided.     final Supplier<Processor> processorSupplier = this.processorSupplier.orElse(() -> defaultProcessor()).     T result.     if (type == Exchange.class) {         result = (T) template().request(target, processorSupplier.get()).     } else if (type == Message.class) {         Exchange exchange = template().request(target, processorSupplier.get()).         result = exchange.hasOut() ? (T) exchange.getOut() : (T) exchange.getIn().     } else {         Exchange exchange = template().send(target, ExchangePattern.InOut, processorSupplier.get(), resultProcessors.get(type)).         result = context.getTypeConverter().convertTo(type, ExchangeHelper.extractResultBody(exchange, exchange.getPattern())).     }     return result. }
false;public;0;4;;@Override public Future<Object> asyncRequest() {     return asyncRequest(Object.class). }
false;public;1;23;;@Override public <T> Future<T> asyncRequest(Class<T> type) {     // Determine the target endpoint     final Endpoint target = target().     Future<T> result.     if (ObjectHelper.isNotEmpty(headers.get())) {         // Make a copy of the headers and body so that async processing won't         // be invalidated by subsequent reuse of the template         final Map<String, Object> headersCopy = new HashMap<>(headers.get()).         final Object bodyCopy = body.get().         result = template().asyncRequestBodyAndHeaders(target, bodyCopy, headersCopy, type).     } else {         // Make a copy of the and body so that async processing won't be         // invalidated by subsequent reuse of the template         final Object bodyCopy = body.get().         result = template().asyncRequestBody(target, bodyCopy, type).     }     return result. }
false;public;0;9;;// ************************ // SEND // ************************ @Override public Exchange send() throws CamelExecutionException {     // Determine the target endpoint     final Endpoint target = target().     return exchangeSupplier.isPresent() ? template().send(target, exchangeSupplier.get().get()) : template().send(target, processorSupplier.orElse(() -> defaultProcessor()).get()). }
false;public;0;9;;@Override public Future<Exchange> asyncSend() {     // Determine the target endpoint     final Endpoint target = target().     return exchangeSupplier.isPresent() ? template().asyncSend(target, exchangeSupplier.get().get()) : template().asyncSend(target, processorSupplier.orElse(() -> defaultAsyncProcessor()).get()). }
true;public,static;1;3;/**  * Create the FluentProducerTemplate by setting the camel context  *  * @param context the camel context  */ ;// ************************ // HELPERS // ************************ /**  * Create the FluentProducerTemplate by setting the camel context  *  * @param context the camel context  */ public static FluentProducerTemplate on(CamelContext context) {     return new DefaultFluentProducerTemplate(context). }
false;private;0;12;;private ProducerTemplate template() {     ObjectHelper.notNull(context, "CamelContext").     if (template == null) {         template = context.createProducerTemplate(maximumCacheSize).         defaultEndpoint.ifPresent(template::setDefaultEndpoint).         template.setEventNotifierEnabled(eventNotifierEnabled).         templateCustomizer.ifPresent(tc -> tc.accept(template)).     }     return template. }
false;private;0;6;;private Processor defaultProcessor() {     return exchange -> {         ObjectHelper.ifNotEmpty(headers.get(), exchange.getIn().getHeaders()::putAll).         ObjectHelper.ifNotEmpty(body.get(), exchange.getIn()::setBody).     }. }
false;private;0;9;;private Processor defaultAsyncProcessor() {     final Map<String, Object> headersCopy = ObjectHelper.isNotEmpty(this.headers.get()) ? new HashMap<>(this.headers.get()) : null.     final Object bodyCopy = this.body.get().     return exchange -> {         ObjectHelper.ifNotEmpty(headersCopy, exchange.getIn().getHeaders()::putAll).         ObjectHelper.ifNotEmpty(bodyCopy, exchange.getIn()::setBody).     }. }
false;private;0;10;;private Endpoint target() {     if (endpoint.isPresent()) {         return endpoint.get().     }     if (defaultEndpoint.isPresent()) {         return defaultEndpoint.get().     }     throw new IllegalArgumentException("No endpoint configured on FluentProducerTemplate. You can configure an endpoint with to(uri)"). }
false;protected;0;7;;@Override protected void doStart() throws Exception {     if (template == null) {         template = template().     }     ServiceHelper.startService(template). }
false;protected;0;5;;@Override protected void doStop() throws Exception {     clearAll().     ServiceHelper.stopService(template). }
