commented;modifiers;parameterAmount;loc;comment;code
true;public,static;6;4;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ @SuppressWarnings("unchecked") public static <T> T createProxyObject(Endpoint endpoint, boolean binding, Producer producer, ClassLoader classLoader, Class<T>[] interfaces, MethodInfoCache methodCache) {     return (T) Proxy.newProxyInstance(classLoader, interfaces.clone(), new CamelInvocationHandler(endpoint, binding, producer, methodCache)). }
true;public,static;5;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, boolean binding, ClassLoader cl, Class<T> interfaceClass, MethodInfoCache methodCache) throws Exception {     return createProxy(endpoint, binding, cl, toArray(interfaceClass), methodCache). }
true;public,static;5;4;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, boolean binding, ClassLoader cl, Class<T>[] interfaceClasses, MethodInfoCache methodCache) throws Exception {     Producer producer = DeferServiceFactory.createProducer(endpoint).     return createProxyObject(endpoint, binding, producer, cl, interfaceClasses, methodCache). }
true;public,static;3;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, ClassLoader cl, Class<T> interfaceClass) throws Exception {     return createProxy(endpoint, true, cl, toArray(interfaceClass)). }
true;public,static;4;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, boolean binding, ClassLoader cl, Class<T>... interfaceClasses) throws Exception {     return createProxy(endpoint, binding, cl, interfaceClasses, createMethodInfoCache(endpoint)). }
true;public,static;2;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, Class<T> interfaceClass) throws Exception {     return createProxy(endpoint, true, toArray(interfaceClass)). }
true;public,static;3;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, boolean binding, Class<T>... interfaceClasses) throws Exception {     return createProxy(endpoint, binding, getClassLoader(interfaceClasses), interfaceClasses). }
true;public,static;3;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, Producer producer, Class<T> interfaceClass) throws Exception {     return createProxy(endpoint, true, producer, toArray(interfaceClass)). }
true;public,static;4;3;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ ;/**  * Creates a Proxy which sends the exchange to the endpoint.  */ public static <T> T createProxy(Endpoint endpoint, boolean binding, Producer producer, Class<T>... interfaceClasses) throws Exception {     return createProxyObject(endpoint, binding, producer, getClassLoader(interfaceClasses), interfaceClasses, createMethodInfoCache(endpoint)). }
true;protected,static;1;6;/**  * Returns the class loader of the first interface or throws {@link IllegalArgumentException} if there are no interfaces specified  */ ;/**  * Returns the class loader of the first interface or throws {@link IllegalArgumentException} if there are no interfaces specified  */ protected static ClassLoader getClassLoader(Class<?>... interfaces) {     if (interfaces == null || interfaces.length < 1) {         throw new IllegalArgumentException("You must provide at least 1 interface class.").     }     return interfaces[0].getClassLoader(). }
false;protected,static;1;3;;protected static MethodInfoCache createMethodInfoCache(Endpoint endpoint) {     return new MethodInfoCache(endpoint.getCamelContext()). }
false;private,static;1;7;;@SuppressWarnings("unchecked") private static <T> Class<T>[] toArray(Class<T> interfaceClass) {     // Class to build a Proxy for     return new Class[] { interfaceClass }. }
