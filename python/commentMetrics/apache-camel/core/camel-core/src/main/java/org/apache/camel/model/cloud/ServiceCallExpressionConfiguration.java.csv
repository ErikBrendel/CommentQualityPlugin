commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ServiceCallDefinition end() {     return this.parent. }
false;public;0;3;;public ProcessorDefinition<?> endParent() {     return this.parent.end(). }
false;public;0;3;;// ************************************************************************* //  // ************************************************************************* public List<PropertyDefinition> getProperties() {     return properties. }
true;public;1;3;/**  * Set client properties to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ ;/**  * Set client properties to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ public void setProperties(List<PropertyDefinition> properties) {     this.properties = properties. }
true;public;2;10;/**  * Adds a custom property to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ ;/**  * Adds a custom property to use.  * <p/>  * These properties are specific to what service call implementation are in  * use. For example if using ribbon, then the client properties are define  * in com.netflix.client.config.CommonClientConfigKey.  */ public ServiceCallExpressionConfiguration property(String key, String value) {     if (properties == null) {         properties = new ArrayList<>().     }     PropertyDefinition prop = new PropertyDefinition().     prop.setKey(key).     prop.setValue(value).     properties.add(prop).     return this. }
false;protected;1;17;;protected Map<String, String> getPropertiesAsMap(CamelContext camelContext) throws Exception {     Map<String, String> answer.     if (properties == null || properties.isEmpty()) {         answer = Collections.emptyMap().     } else {         answer = new HashMap<>().         for (PropertyDefinition prop : properties) {             // support property placeholders             String key = CamelContextHelper.parseText(camelContext, prop.getKey()).             String value = CamelContextHelper.parseText(camelContext, prop.getValue()).             answer.put(key, value).         }     }     return answer. }
false;public;0;3;;public String getHostHeader() {     return hostHeader. }
true;public;1;3;/**  * The header that holds the service host information, default ServiceCallConstants.SERVICE_HOST  */ ;/**  * The header that holds the service host information, default ServiceCallConstants.SERVICE_HOST  */ public void setHostHeader(String hostHeader) {     this.hostHeader = hostHeader. }
false;public;0;3;;public String getPortHeader() {     return portHeader. }
true;public;1;3;/**  * The header that holds the service port information, default ServiceCallConstants.SERVICE_PORT  */ ;/**  * The header that holds the service port information, default ServiceCallConstants.SERVICE_PORT  */ public void setPortHeader(String portHeader) {     this.portHeader = portHeader. }
false;public;0;3;;public ExpressionDefinition getExpressionType() {     return expressionType. }
false;public;1;3;;public void setExpressionType(ExpressionDefinition expressionType) {     this.expressionType = expressionType. }
false;public;0;3;;public Expression getExpression() {     return expression. }
false;public;1;3;;public void setExpression(Expression expression) {     this.expression = expression. }
true;public;1;4;/**  * The header that holds the service host information, default ServiceCallConstants.SERVICE_HOST  */ ;/**  * The header that holds the service host information, default ServiceCallConstants.SERVICE_HOST  */ public ServiceCallExpressionConfiguration hostHeader(String hostHeader) {     setHostHeader(hostHeader).     return this. }
true;public;1;4;/**  * The header that holds the service port information, default ServiceCallConstants.SERVICE_PORT  */ ;/**  * The header that holds the service port information, default ServiceCallConstants.SERVICE_PORT  */ public ServiceCallExpressionConfiguration portHeader(String portHeader) {     setPortHeader(portHeader).     return this. }
false;public;1;4;;public ServiceCallExpressionConfiguration expressionType(ExpressionDefinition expressionType) {     setExpressionType(expressionType).     return this. }
false;public;1;4;;public ServiceCallExpressionConfiguration expression(Expression expression) {     setExpression(expression).     return this. }
false;public;1;80;;// ************************************************************************* // Factory // ************************************************************************* @Override public Expression newInstance(CamelContext camelContext) throws Exception {     Expression answer = getExpression().     if (answer != null) {         return answer.     }     ExpressionDefinition expressionType = getExpressionType().     if (expressionType != null && answer == null) {         return expressionType.createExpression(camelContext).     }     if (factoryKey != null) {         // First try to find the factory from the registry.         ServiceExpressionFactory factory = CamelContextHelper.lookup(camelContext, factoryKey, ServiceExpressionFactory.class).         if (factory != null) {             // If a factory is found in the registry do not re-configure it as             // it should be pre-configured.             answer = factory.newInstance(camelContext).         } else {             Class<?> type.             try {                 // Then use Service factory.                 type = camelContext.getFactoryFinder(ServiceCallDefinitionConstants.RESOURCE_PATH).findClass(factoryKey).             } catch (Exception e) {                 throw new NoFactoryAvailableException(ServiceCallDefinitionConstants.RESOURCE_PATH + factoryKey, e).             }             if (type != null) {                 if (ServiceExpressionFactory.class.isAssignableFrom(type)) {                     factory = (ServiceExpressionFactory) camelContext.getInjector().newInstance(type).                 } else {                     throw new IllegalArgumentException("Resolving Expression: " + factoryKey + " detected type conflict: Not a ExpressionFactory implementation. Found: " + type.getName()).                 }             }             try {                 Map<String, Object> parameters = new HashMap<>().                 IntrospectionSupport.getProperties(this, parameters, null, false).                 parameters.replaceAll((k, v) -> {                     if (v instanceof String) {                         try {                             v = camelContext.resolvePropertyPlaceholders((String) v).                         } catch (Exception e) {                             throw new IllegalArgumentException(String.format("Exception while resolving %s (%s)", k, v.toString()), e).                         }                     }                     return v.                 }).                 // Convert properties to Map<String, String>                 parameters.put("properties", getPropertiesAsMap(camelContext)).                 postProcessFactoryParameters(camelContext, parameters).                 IntrospectionSupport.setProperties(factory, parameters).                 answer = factory.newInstance(camelContext).             } catch (Exception e) {                 throw new IllegalArgumentException(e).             }         }     } else {         answer = new DefaultServiceCallExpression(ObjectHelper.notNull(hostHeader, "hostHeader"), ObjectHelper.notNull(portHeader, "portHeader")).     }     return answer. }
false;protected;2;2;;// ************************************************************************* // Utilities // ************************************************************************* protected void postProcessFactoryParameters(CamelContext camelContext, Map<String, Object> parameters) throws Exception { }
