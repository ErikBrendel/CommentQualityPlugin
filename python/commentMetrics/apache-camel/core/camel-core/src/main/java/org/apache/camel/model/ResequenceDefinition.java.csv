commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public List<ProcessorDefinition<?>> getOutputs() {     return outputs. }
false;public;1;3;;public void setOutputs(List<ProcessorDefinition<?>> outputs) {     this.outputs = outputs. }
false;public;0;4;;@Override public boolean isOutputSupported() {     return true. }
true;public;0;3;/**  * Configures the stream-based resequencing algorithm using the default  * configuration.  *  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Configures the stream-based resequencing algorithm using the default  * configuration.  *  * @return the builder  */ public ResequenceDefinition stream() {     return stream(StreamResequencerConfig.getDefault()). }
true;public;0;3;/**  * Configures the batch-based resequencing algorithm using the default  * configuration.  *  * @return the builder  */ ;/**  * Configures the batch-based resequencing algorithm using the default  * configuration.  *  * @return the builder  */ public ResequenceDefinition batch() {     return batch(BatchResequencerConfig.getDefault()). }
true;public;1;5;/**  * Configures the stream-based resequencing algorithm using the given  * {@link StreamResequencerConfig}.  *  * @param config  the config  * @return the builder  */ ;/**  * Configures the stream-based resequencing algorithm using the given  * {@link StreamResequencerConfig}.  *  * @param config  the config  * @return the builder  */ public ResequenceDefinition stream(StreamResequencerConfig config) {     this.streamConfig = config.     this.batchConfig = null.     return this. }
true;public;1;5;/**  * Configures the batch-based resequencing algorithm using the given  * {@link BatchResequencerConfig}.  *  * @param config  the config  * @return the builder  */ ;/**  * Configures the batch-based resequencing algorithm using the given  * {@link BatchResequencerConfig}.  *  * @param config  the config  * @return the builder  */ public ResequenceDefinition batch(BatchResequencerConfig config) {     this.batchConfig = config.     this.streamConfig = null.     return this. }
true;public;1;12;/**  * Sets the timeout  * @param timeout  timeout in millis  * @return the builder  */ ;/**  * Sets the timeout  * @param timeout  timeout in millis  * @return the builder  */ public ResequenceDefinition timeout(long timeout) {     if (streamConfig != null) {         streamConfig.setTimeout(timeout).     } else {         // initialize batch mode as its default mode         if (batchConfig == null) {             batch().         }         batchConfig.setBatchTimeout(timeout).     }     return this. }
true;public;1;7;/**  * Sets the interval in milli seconds the stream resequencer will at most wait  * while waiting for condition of being able to deliver.  *  * @param deliveryAttemptInterval  interval in millis  * @return the builder  */ ;/**  * Sets the interval in milli seconds the stream resequencer will at most wait  * while waiting for condition of being able to deliver.  *  * @param deliveryAttemptInterval  interval in millis  * @return the builder  */ public ResequenceDefinition deliveryAttemptInterval(long deliveryAttemptInterval) {     if (streamConfig == null) {         throw new IllegalStateException("deliveryAttemptInterval() only supported for stream resequencer").     }     streamConfig.setDeliveryAttemptInterval(deliveryAttemptInterval).     return this. }
true;public;0;7;/**  * Sets the rejectOld flag to throw an error when a message older than the last delivered message is processed  * @return the builder  */ ;/**  * Sets the rejectOld flag to throw an error when a message older than the last delivered message is processed  * @return the builder  */ public ResequenceDefinition rejectOld() {     if (streamConfig == null) {         throw new IllegalStateException("rejectOld() only supported for stream resequencer").     }     streamConfig.setRejectOld(true).     return this. }
true;public;1;11;/**  * Sets the in batch size for number of exchanges received  * @param batchSize  the batch size  * @return the builder  */ ;/**  * Sets the in batch size for number of exchanges received  * @param batchSize  the batch size  * @return the builder  */ public ResequenceDefinition size(int batchSize) {     if (streamConfig != null) {         throw new IllegalStateException("size() only supported for batch resequencer").     }     // initialize batch mode as its default mode     if (batchConfig == null) {         batch().     }     batchConfig.setBatchSize(batchSize).     return this. }
true;public;1;8;/**  * Sets the capacity for the stream resequencer  *  * @param capacity  the capacity  * @return the builder  */ ;/**  * Sets the capacity for the stream resequencer  *  * @param capacity  the capacity  * @return the builder  */ public ResequenceDefinition capacity(int capacity) {     if (streamConfig == null) {         throw new IllegalStateException("capacity() only supported for stream resequencer").     }     streamConfig.setCapacity(capacity).     return this. }
true;public;0;11;/**  * Enables duplicates for the batch resequencer mode  * @return the builder  */ ;/**  * Enables duplicates for the batch resequencer mode  * @return the builder  */ public ResequenceDefinition allowDuplicates() {     if (streamConfig != null) {         throw new IllegalStateException("allowDuplicates() only supported for batch resequencer").     }     // initialize batch mode as its default mode     if (batchConfig == null) {         batch().     }     batchConfig.setAllowDuplicates(true).     return this. }
true;public;0;11;/**  * Enables reverse mode for the batch resequencer mode.  * <p/>  * This means the expression for determine the sequence order will be reversed.  * Can be used for Z..A or 9..0 ordering.  *  * @return the builder  */ ;/**  * Enables reverse mode for the batch resequencer mode.  * <p/>  * This means the expression for determine the sequence order will be reversed.  * Can be used for Z..A or 9..0 ordering.  *  * @return the builder  */ public ResequenceDefinition reverse() {     if (streamConfig != null) {         throw new IllegalStateException("reverse() only supported for batch resequencer").     }     // initialize batch mode as its default mode     if (batchConfig == null) {         batch().     }     batchConfig.setReverse(true).     return this. }
true;public;0;12;/**  * If an incoming {@link org.apache.camel.Exchange} is invalid, then it will be ignored.  *  * @return builder  */ ;/**  * If an incoming {@link org.apache.camel.Exchange} is invalid, then it will be ignored.  *  * @return builder  */ public ResequenceDefinition ignoreInvalidExchanges() {     if (streamConfig != null) {         streamConfig.setIgnoreInvalidExchanges(true).     } else {         // initialize batch mode as its default mode         if (batchConfig == null) {             batch().         }         batchConfig.setIgnoreInvalidExchanges(true).     }     return this. }
true;public;1;7;/**  * Sets the comparator to use for stream resequencer  *  * @param comparator  the comparator  * @return the builder  */ ;/**  * Sets the comparator to use for stream resequencer  *  * @param comparator  the comparator  * @return the builder  */ public ResequenceDefinition comparator(ExpressionResultComparator comparator) {     if (streamConfig == null) {         throw new IllegalStateException("comparator() only supported for stream resequencer").     }     streamConfig.setComparator(comparator).     return this. }
false;public;0;4;;@Override public String toString() {     return "Resequencer[" + getExpression() + " -> " + getOutputs() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "resequence". }
false;public;0;4;;@Override public String getLabel() {     return "resequencer[" + (getExpression() != null ? getExpression().getLabel() : "") + "]". }
false;public;0;3;;public ResequencerConfig getResequencerConfig() {     return resequencerConfig. }
true;public;1;3;/**  * To configure the resequencer in using either batch or stream configuration. Will by default use batch configuration.  */ ;/**  * To configure the resequencer in using either batch or stream configuration. Will by default use batch configuration.  */ public void setResequencerConfig(ResequencerConfig resequencerConfig) {     this.resequencerConfig = resequencerConfig. }
false;public;0;6;;public BatchResequencerConfig getBatchConfig() {     if (batchConfig == null && resequencerConfig != null && resequencerConfig instanceof BatchResequencerConfig) {         return (BatchResequencerConfig) resequencerConfig.     }     return batchConfig. }
false;public;0;6;;public StreamResequencerConfig getStreamConfig() {     if (streamConfig == null && resequencerConfig != null && resequencerConfig instanceof StreamResequencerConfig) {         return (StreamResequencerConfig) resequencerConfig.     }     return streamConfig. }
false;public;1;3;;public void setBatchConfig(BatchResequencerConfig batchConfig) {     this.batchConfig = batchConfig. }
false;public;1;3;;public void setStreamConfig(StreamResequencerConfig streamConfig) {     this.streamConfig = streamConfig. }
false;public;0;3;;public ExpressionDefinition getExpression() {     return expression. }
true;public;1;3;/**  * Expression to use for re-ordering the messages, such as a header with a sequence number  */ ;/**  * Expression to use for re-ordering the messages, such as a header with a sequence number  */ public void setExpression(ExpressionDefinition expression) {     this.expression = expression. }
