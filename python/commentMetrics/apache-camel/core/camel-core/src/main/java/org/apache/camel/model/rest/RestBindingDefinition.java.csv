commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "RestBinding". }
false;public;0;3;;public String getConsumes() {     return consumes. }
true;public;2;6;/**  * Adds a default value for the query parameter  *  * @param paramName   query parameter name  * @param defaultValue the default value  */ ;/**  * Adds a default value for the query parameter  *  * @param paramName   query parameter name  * @param defaultValue the default value  */ public void addDefaultValue(String paramName, String defaultValue) {     if (defaultValues == null) {         defaultValues = new HashMap<>().     }     defaultValues.put(paramName, defaultValue). }
true;public;1;6;/**  * Adds a required query parameter  *  * @param paramName   query parameter name  */ ;/**  * Adds a required query parameter  *  * @param paramName   query parameter name  */ public void addRequiredQueryParameter(String paramName) {     if (requiredQueryParameters == null) {         requiredQueryParameters = new HashSet<>().     }     requiredQueryParameters.add(paramName). }
false;public;0;3;;public Set<String> getRequiredQueryParameters() {     return requiredQueryParameters. }
true;public;1;6;/**  * Adds a required HTTP header  *  * @param headerName   HTTP header name  */ ;/**  * Adds a required HTTP header  *  * @param headerName   HTTP header name  */ public void addRequiredHeader(String headerName) {     if (requiredHeaders == null) {         requiredHeaders = new HashSet<>().     }     requiredHeaders.add(headerName). }
false;public;0;3;;public Set<String> getRequiredHeaders() {     return requiredHeaders. }
false;public;0;3;;public Boolean getRequiredBody() {     return requiredBody. }
false;public;1;3;;public void setRequiredBody(Boolean requiredBody) {     this.requiredBody = requiredBody. }
true;public;0;3;/**  * Gets the registered default values for query parameters  */ ;/**  * Gets the registered default values for query parameters  */ public Map<String, String> getDefaultValues() {     return defaultValues. }
true;public;1;3;/**  * Sets the component name that this definition will apply to  */ ;/**  * Sets the component name that this definition will apply to  */ public void setComponent(String component) {     this.component = component. }
false;public;0;3;;public String getComponent() {     return component. }
true;public;1;3;/**  * To define the content type what the REST service consumes (accept as input), such as application/xml or application/json  */ ;/**  * To define the content type what the REST service consumes (accept as input), such as application/xml or application/json  */ public void setConsumes(String consumes) {     this.consumes = consumes. }
false;public;0;3;;public String getProduces() {     return produces. }
true;public;1;3;/**  * To define the content type what the REST service produces (uses for output), such as application/xml or application/json  */ ;/**  * To define the content type what the REST service produces (uses for output), such as application/xml or application/json  */ public void setProduces(String produces) {     this.produces = produces. }
false;public;0;3;;public RestBindingMode getBindingMode() {     return bindingMode. }
true;public;1;3;/**  * Sets the binding mode to use.  * <p/>  * The default value is off  */ ;/**  * Sets the binding mode to use.  * <p/>  * The default value is off  */ public void setBindingMode(RestBindingMode bindingMode) {     this.bindingMode = bindingMode. }
false;public;0;3;;public String getType() {     return type. }
true;public;1;3;/**  * Sets the class name to use for binding from input to POJO for the incoming data  * <p/>  * The canonical name of the class of the input data. Append a [] to the end of the canonical name  * if you want the input to be an array type.  */ ;/**  * Sets the class name to use for binding from input to POJO for the incoming data  * <p/>  * The canonical name of the class of the input data. Append a [] to the end of the canonical name  * if you want the input to be an array type.  */ public void setType(String type) {     this.type = type. }
false;public;0;3;;public String getOutType() {     return outType. }
true;public;1;3;/**  * Sets the class name to use for binding from POJO to output for the outgoing data  * <p/>  * The canonical name of the class of the input data. Append a [] to the end of the canonical name  * if you want the input to be an array type.  */ ;/**  * Sets the class name to use for binding from POJO to output for the outgoing data  * <p/>  * The canonical name of the class of the input data. Append a [] to the end of the canonical name  * if you want the input to be an array type.  */ public void setOutType(String outType) {     this.outType = outType. }
false;public;0;3;;public Boolean getSkipBindingOnErrorCode() {     return skipBindingOnErrorCode. }
true;public;1;3;/**  * Whether to skip binding on output if there is a custom HTTP error code header.  * This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.  */ ;/**  * Whether to skip binding on output if there is a custom HTTP error code header.  * This allows to build custom error messages that do not bind to json / xml etc, as success messages otherwise will do.  */ public void setSkipBindingOnErrorCode(Boolean skipBindingOnErrorCode) {     this.skipBindingOnErrorCode = skipBindingOnErrorCode. }
false;public;0;3;;public Boolean getClientRequestValidation() {     return clientRequestValidation. }
true;public;1;3;/**  * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from  * the client is supported by the Rest-DSL configuration of its consumes/produces settings.  * <p/>  * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.  * <p/>  * The default value is false.  */ ;/**  * Whether to enable validation of the client request to check whether the Content-Type and Accept headers from  * the client is supported by the Rest-DSL configuration of its consumes/produces settings.  * <p/>  * This can be turned on, to enable this check. In case of validation error, then HTTP Status codes 415 or 406 is returned.  * <p/>  * The default value is false.  */ public void setClientRequestValidation(Boolean clientRequestValidation) {     this.clientRequestValidation = clientRequestValidation. }
false;public;0;3;;public Boolean getEnableCORS() {     return enableCORS. }
true;public;1;3;/**  * Whether to enable CORS headers in the HTTP response.  * <p/>  * The default value is false.  */ ;/**  * Whether to enable CORS headers in the HTTP response.  * <p/>  * The default value is false.  */ public void setEnableCORS(Boolean enableCORS) {     this.enableCORS = enableCORS. }
false;public;0;4;;@Override public String getShortName() {     return "restBinding". }
false;public;0;4;;@Override public String getLabel() {     return "". }
