commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "IdempotentConsumer[" + messageIdExpression + " -> " + processor + "]". }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;2;57;;public boolean process(final Exchange exchange, final AsyncCallback callback) {     final AsyncCallback target.     final String messageId.     try {         messageId = messageIdExpression.evaluate(exchange, String.class).         if (messageId == null) {             exchange.setException(new NoMessageIdException(exchange, messageIdExpression)).             callback.done(true).             return true.         }     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     }     try {         boolean newKey.         if (eager) {             // add the key to the repository             newKey = idempotentRepository.add(exchange, messageId).         } else {             // check if we already have the key             newKey = !idempotentRepository.contains(exchange, messageId).         }         if (!newKey) {             // mark the exchange as duplicate             exchange.setProperty(Exchange.DUPLICATE_MESSAGE, Boolean.TRUE).             // we already have this key so its a duplicate message             onDuplicate(exchange, messageId).             if (skipDuplicate) {                 // if we should skip duplicate then we are done                 log.debug("Ignoring duplicate message with id: {} for exchange: {}", messageId, exchange).                 callback.done(true).                 return true.             }         }         final Synchronization onCompletion = new IdempotentOnCompletion(idempotentRepository, messageId, eager, removeOnFailure).         target = new IdempotentConsumerCallback(exchange, onCompletion, callback, completionEager).         if (!completionEager) {             // the scope is to do the idempotent completion work as an unit of work on the exchange when its done being routed             exchange.addOnCompletion(onCompletion).         }     } catch (Exception e) {         exchange.setException(e).         callback.done(true).         return true.     }     // process the exchange     return processor.process(exchange, target). }
false;public;0;8;;public List<Processor> next() {     if (!hasNext()) {         return null.     }     List<Processor> answer = new ArrayList<>(1).     answer.add(processor).     return answer. }
false;public;0;3;;public boolean hasNext() {     return processor != null. }
true;public;0;3;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- public Expression getMessageIdExpression() {     return messageIdExpression. }
false;public;0;3;;public IdempotentRepository getIdempotentRepository() {     return idempotentRepository. }
false;public;0;3;;public Processor getProcessor() {     return processor. }
false;public;0;3;;public long getDuplicateMessageCount() {     return duplicateMessageCount.get(). }
false;protected;0;7;;// Implementation methods // ------------------------------------------------------------------------- protected void doStart() throws Exception {     // must add before start so it will have CamelContext injected first     if (!camelContext.hasService(idempotentRepository)) {         camelContext.addService(idempotentRepository).     }     ServiceHelper.startService(processor, idempotentRepository). }
false;protected;0;3;;protected void doStop() throws Exception {     ServiceHelper.stopService(processor, idempotentRepository). }
false;protected;0;5;;@Override protected void doShutdown() throws Exception {     ServiceHelper.stopAndShutdownServices(processor, idempotentRepository).     camelContext.removeService(idempotentRepository). }
false;public;0;3;;public boolean isEager() {     return eager. }
false;public;0;3;;public boolean isCompletionEager() {     return completionEager. }
false;public;0;3;;public boolean isSkipDuplicate() {     return skipDuplicate. }
false;public;0;3;;public boolean isRemoveOnFailure() {     return removeOnFailure. }
true;public;0;3;/**  * Resets the duplicate message counter to <code>0L</code>.  */ ;/**  * Resets the duplicate message counter to <code>0L</code>.  */ public void resetDuplicateMessageCount() {     duplicateMessageCount.set(0L). }
false;private;2;5;;private void onDuplicate(Exchange exchange, String messageId) {     duplicateMessageCount.incrementAndGet().     onDuplicateMessage(exchange, messageId). }
true;public;0;3;/**  * Clear the idempotent repository  */ ;/**  * Clear the idempotent repository  */ public void clear() {     idempotentRepository.clear(). }
true;protected;2;3;/**  * A strategy method to allow derived classes to overload the behaviour of  * processing a duplicate message  *  * @param exchange  the exchange  * @param messageId the message ID of this exchange  */ ;/**  * A strategy method to allow derived classes to overload the behaviour of  * processing a duplicate message  *  * @param exchange  the exchange  * @param messageId the message ID of this exchange  */ protected void onDuplicateMessage(Exchange exchange, String messageId) { // noop }
false;public;1;15;;@Override public void done(boolean doneSync) {     try {         if (completionEager) {             if (exchange.isFailed()) {                 onCompletion.onFailure(exchange).             } else {                 onCompletion.onComplete(exchange).             }         }     // if completion is not eager then the onCompletion is invoked as part of the UoW of the Exchange     } finally {         callback.done(doneSync).     } }
false;public;0;4;;@Override public String toString() {     return "IdempotentConsumerCallback". }
