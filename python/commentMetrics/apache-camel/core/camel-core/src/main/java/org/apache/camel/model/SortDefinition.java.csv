commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "sort[" + getExpression() + " by: " + (comparatorRef != null ? "ref:" + comparatorRef : comparator) + "]". }
false;public;0;4;;@Override public String getShortName() {     return "sort". }
false;public;0;4;;@Override public String getLabel() {     return "sort[" + getExpression() + "]". }
true;public;1;5;/**  * Optional expression to sort by something else than the message body  */ ;/**  * Optional expression to sort by something else than the message body  */ @Override public void setExpression(ExpressionDefinition expression) {     // override to include javadoc what the expression is used for     super.setExpression(expression). }
false;public;0;3;;public Comparator<? super T> getComparator() {     return comparator. }
false;public;1;3;;public void setComparator(Comparator<T> comparator) {     this.comparator = comparator. }
false;public;0;3;;public String getComparatorRef() {     return comparatorRef. }
false;public;1;3;;public void setComparatorRef(String comparatorRef) {     this.comparatorRef = comparatorRef. }
true;public;1;4;/**  * Sets the comparator to use for sorting  *  * @param comparator  the comparator to use for sorting  * @return the builder  */ ;/**  * Sets the comparator to use for sorting  *  * @param comparator  the comparator to use for sorting  * @return the builder  */ public SortDefinition<T> comparator(Comparator<T> comparator) {     setComparator(comparator).     return this. }
true;public;1;4;/**  * Sets a reference to lookup for the comparator to use for sorting  *  * @param ref reference for the comparator  * @return the builder  */ ;/**  * Sets a reference to lookup for the comparator to use for sorting  *  * @param ref reference for the comparator  * @return the builder  */ public SortDefinition<T> comparatorRef(String ref) {     setComparatorRef(ref).     return this. }
