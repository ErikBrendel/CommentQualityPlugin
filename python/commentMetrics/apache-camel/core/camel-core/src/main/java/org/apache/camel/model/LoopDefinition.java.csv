commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Enables copy mode so a copy of the input Exchange is used for each iteration.  * @return the builder  */ ;/**  * Enables copy mode so a copy of the input Exchange is used for each iteration.  * @return the builder  */ public LoopDefinition copy() {     setCopy(true).     return this. }
false;public;0;3;;public Boolean getCopy() {     return copy. }
false;public;0;3;;public Boolean getDoWhile() {     return doWhile. }
true;public;1;3;/**  * Enables the while loop that loops until the predicate evaluates to false or null.  */ ;/**  * Enables the while loop that loops until the predicate evaluates to false or null.  */ public void setDoWhile(Boolean doWhile) {     this.doWhile = doWhile. }
true;public;1;3;/**  * If the copy attribute is true, a copy of the input Exchange is used for each iteration.  * That means each iteration will start from a copy of the same message.  * <p/>  * By default loop will loop the same exchange all over, so each iteration may  * have different message content.  */ ;/**  * If the copy attribute is true, a copy of the input Exchange is used for each iteration.  * That means each iteration will start from a copy of the same message.  * <p/>  * By default loop will loop the same exchange all over, so each iteration may  * have different message content.  */ public void setCopy(Boolean copy) {     this.copy = copy. }
false;public;0;4;;@Override public String toString() {     return "Loop[" + getExpression() + " -> " + getOutputs() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "loop". }
false;public;0;4;;@Override public String getLabel() {     return "loop[" + getExpression() + "]". }
true;public;1;5;/**  * Expression to define how many times we should loop. Notice the expression is only evaluated once, and should return  * a number as how many times to loop. A value of zero or negative means no looping. The loop is like a for-loop fashion,  * if you want a while loop, then the dynamic router may be a better choice.  */ ;/**  * Expression to define how many times we should loop. Notice the expression is only evaluated once, and should return  * a number as how many times to loop. A value of zero or negative means no looping. The loop is like a for-loop fashion,  * if you want a while loop, then the dynamic router may be a better choice.  */ @Override public void setExpression(ExpressionDefinition expression) {     // override to include javadoc what the expression is used for     super.setExpression(expression). }
