commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Class<?> getUnmarshalType() {     return unmarshalType. }
true;public;1;3;/**  * Class name of the java type to use when unarmshalling  */ ;/**  * Class name of the java type to use when unarmshalling  */ public void setUnmarshalType(Class<?> unmarshalType) {     this.unmarshalType = unmarshalType. }
false;public;0;3;;public String getUnmarshalTypeName() {     return unmarshalTypeName. }
true;public;1;3;/**  * Class name of the java type to use when unarmshalling  */ ;/**  * Class name of the java type to use when unarmshalling  */ public void setUnmarshalTypeName(String unmarshalTypeName) {     this.unmarshalTypeName = unmarshalTypeName. }
false;public;0;3;;public boolean isUseList() {     return useList. }
true;public;1;3;/**  * To unarmshal to a List of Map or a List of Pojo.  */ ;/**  * To unarmshal to a List of Map or a List of Pojo.  */ public void setUseList(boolean useList) {     this.useList = useList. }
false;protected;1;11;;@Override protected DataFormat createDataFormat(RouteContext routeContext) {     if (unmarshalType == null && unmarshalTypeName != null) {         try {             unmarshalType = routeContext.getCamelContext().getClassResolver().resolveMandatoryClass(unmarshalTypeName).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return super.createDataFormat(routeContext). }
false;protected;2;9;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (unmarshalType != null) {         setProperty(camelContext, dataFormat, "unmarshalType", unmarshalType).     }     if (useList != null) {         setProperty(camelContext, dataFormat, "useList", useList).     } }
