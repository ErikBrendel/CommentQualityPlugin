commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;15;;// *********************** // policy life-cycle // *********************** @Override public void doStart() throws Exception {     if (serviceRegistry == null) {         serviceRegistry = ServiceRegistryHelper.lookupService(camelContext, serviceRegistrySelector).orElseThrow(() -> new IllegalStateException("ServiceRegistry service not found")).     }     LOGGER.debug("ServiceRegistrationRoutePolicy {} is using ServiceRegistry instance {} (id={}, type={})", this, serviceRegistry, serviceRegistry.getId(), serviceRegistry.getClass().getName()). }
false;public;1;4;;// *********************** // route life-cycle // *********************** @Override public void onStart(Route route) {     register(route). }
false;public;1;4;;@Override public void onStop(Route route) {     deregister(route). }
false;public;1;4;;@Override public void onSuspend(Route route) {     deregister(route). }
false;public;1;4;;@Override public void onResume(Route route) {     register(route). }
false;private;1;3;;// *********************** // registration helpers // *********************** private void register(Route route) {     computeServiceDefinition(route).ifPresent(serviceRegistry::register). }
false;private;1;3;;private void deregister(Route route) {     computeServiceDefinition(route).ifPresent(serviceRegistry::deregister). }
false;private;1;74;;private Optional<ServiceDefinition> computeServiceDefinition(Route route) {     final Endpoint endpoint = route.getConsumer().getEndpoint().     final Map<String, String> properties = new HashMap<>().     if (endpoint instanceof DiscoverableService) {         final DiscoverableService service = (DiscoverableService) endpoint.         // first load all the properties from the endpoint         properties.putAll(service.getServiceProperties()).     }     // provided ones     for (Map.Entry<String, Object> entry : route.getProperties().entrySet()) {         if (!entry.getKey().startsWith(ServiceDefinition.SERVICE_META_PREFIX)) {             continue.         }         final String key = entry.getKey().         final String val = camelContext.getTypeConverter().convertTo(String.class, entry.getValue()).         properties.put(key, val).     }     // try to get the service name from route properties     String serviceName = properties.get(ServiceDefinition.SERVICE_META_NAME).     if (serviceName == null) {         // if not check if the route group is defined use the route group         serviceName = route.getGroup().         if (serviceName != null) {             properties.put(ServiceDefinition.SERVICE_META_NAME, serviceName).         }     }     if (ObjectHelper.isEmpty(serviceName)) {         LOGGER.debug("Route {} has not enough information for service registration", route).         return Optional.empty().     }     // try to get the service id from route properties     String serviceId = properties.get(ServiceDefinition.SERVICE_META_ID).     if (serviceId == null) {         // if not check if the route id is custom and use it         RouteDefinition definition = (RouteDefinition) route.getRouteContext().getRoute().         if (definition.hasCustomIdAssigned()) {             serviceId = route.getId().         }         if (serviceId != null) {             properties.put(ServiceDefinition.SERVICE_META_ID, serviceId).         }     }     if (serviceId == null) {         // finally auto generate the service id         serviceId = getCamelContext().getUuidGenerator().generateUuid().     }     final String serviceHost = properties.get(ServiceDefinition.SERVICE_META_HOST).     final String servicePort = properties.getOrDefault(ServiceDefinition.SERVICE_META_PORT, "-1").     // endpoint and the route.     return Optional.of(new DefaultServiceDefinition(serviceId, serviceName, serviceHost, Integer.parseInt(servicePort), properties)). }
