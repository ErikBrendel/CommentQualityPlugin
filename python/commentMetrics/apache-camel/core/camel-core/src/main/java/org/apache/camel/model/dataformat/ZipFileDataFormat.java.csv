commented;modifiers;parameterAmount;loc;comment;code
false;protected;2;12;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (usingIterator != null) {         setProperty(camelContext, dataFormat, "usingIterator", usingIterator).     }     if (allowEmptyDirectory != null) {         setProperty(camelContext, dataFormat, "allowEmptyDirectory", allowEmptyDirectory).     }     if (preservePathElements != null) {         setProperty(camelContext, dataFormat, "preservePathElements", preservePathElements).     } }
false;public;0;3;;public Boolean getUsingIterator() {     return usingIterator. }
false;public;0;3;;public Boolean getAllowEmptyDirectory() {     return allowEmptyDirectory. }
false;public;0;3;;public Boolean getPreservePathElements() {     return preservePathElements. }
true;public;1;3;/**  * If the zip file has more then one entry, the setting this option to true, allows to work with the splitter EIP,  * to split the data using an iterator in a streaming mode.  */ ;/**  * If the zip file has more then one entry, the setting this option to true, allows to work with the splitter EIP,  * to split the data using an iterator in a streaming mode.  */ public void setUsingIterator(Boolean usingIterator) {     this.usingIterator = usingIterator. }
true;public;1;3;/**  * If the zip file has more then one entry, setting this option to true, allows to get the iterator  * even if the directory is empty  */ ;/**  * If the zip file has more then one entry, setting this option to true, allows to get the iterator  * even if the directory is empty  */ public void setAllowEmptyDirectory(Boolean allowEmptyDirectory) {     this.allowEmptyDirectory = allowEmptyDirectory. }
true;public;1;3;/**  * If the file name contains path elements, setting this option to true, allows the path to be maintained  * in the zip file.  */ ;/**  * If the file name contains path elements, setting this option to true, allows the path to be maintained  * in the zip file.  */ public void setPreservePathElements(Boolean preservePathElements) {     this.preservePathElements = preservePathElements. }
