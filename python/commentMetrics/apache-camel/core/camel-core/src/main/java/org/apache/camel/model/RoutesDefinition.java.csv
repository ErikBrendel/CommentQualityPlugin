commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "Routes: " + routes. }
false;public;0;4;;@Override public String getShortName() {     return "routes". }
false;public;0;3;;public String getLabel() {     return "Route " + getId(). }
true;public;0;3;// ----------------------------------------------------------------------- ;// Properties // ----------------------------------------------------------------------- public List<RouteDefinition> getRoutes() {     return routes. }
false;public;1;3;;public void setRoutes(List<RouteDefinition> routes) {     this.routes = routes. }
false;public;0;3;;public List<InterceptFromDefinition> getInterceptFroms() {     return interceptFroms. }
false;public;1;3;;public void setInterceptFroms(List<InterceptFromDefinition> interceptFroms) {     this.interceptFroms = interceptFroms. }
false;public;0;3;;public List<InterceptSendToEndpointDefinition> getInterceptSendTos() {     return interceptSendTos. }
false;public;1;3;;public void setInterceptSendTos(List<InterceptSendToEndpointDefinition> interceptSendTos) {     this.interceptSendTos = interceptSendTos. }
false;public;0;3;;public List<InterceptDefinition> getIntercepts() {     return intercepts. }
false;public;1;3;;public void setIntercepts(List<InterceptDefinition> intercepts) {     this.intercepts = intercepts. }
false;public;0;3;;public List<OnExceptionDefinition> getOnExceptions() {     return onExceptions. }
false;public;1;3;;public void setOnExceptions(List<OnExceptionDefinition> onExceptions) {     this.onExceptions = onExceptions. }
false;public;0;3;;public List<OnCompletionDefinition> getOnCompletions() {     return onCompletions. }
false;public;1;3;;public void setOnCompletions(List<OnCompletionDefinition> onCompletions) {     this.onCompletions = onCompletions. }
false;public;0;3;;public ModelCamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(ModelCamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public ErrorHandlerFactory getErrorHandlerFactory() {     return errorHandlerFactory. }
false;public;1;3;;public void setErrorHandlerFactory(ErrorHandlerFactory errorHandlerFactory) {     this.errorHandlerFactory = errorHandlerFactory. }
true;public;0;4;/**  * Creates a new route  *  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Creates a new route  *  * @return the builder  */ public RouteDefinition route() {     RouteDefinition route = createRoute().     return route(route). }
true;public;1;5;/**  * Creates a new route from the given URI input  *  * @param uri  the from uri  * @return the builder  */ ;/**  * Creates a new route from the given URI input  *  * @param uri  the from uri  * @return the builder  */ public RouteDefinition from(@AsEndpointUri String uri) {     RouteDefinition route = createRoute().     route.from(uri).     return route(route). }
true;public;1;5;/**  * Creates a new route from the given endpoint  *  * @param endpoint  the from endpoint  * @return the builder  */ ;/**  * Creates a new route from the given endpoint  *  * @param endpoint  the from endpoint  * @return the builder  */ public RouteDefinition from(Endpoint endpoint) {     RouteDefinition route = createRoute().     route.from(endpoint).     return route(route). }
true;public;1;5;/**  * Creates a new route from the given URI inputs  *  * @param uris  the from uri  * @return the builder  */ ;/**  * Creates a new route from the given URI inputs  *  * @param uris  the from uri  * @return the builder  */ public RouteDefinition from(@AsEndpointUri String... uris) {     RouteDefinition route = createRoute().     route.from(uris).     return route(route). }
true;public;1;5;/**  * Creates a new route from the given endpoints  *  * @param endpoints  the from endpoints  * @return the builder  */ ;/**  * Creates a new route from the given endpoints  *  * @param endpoints  the from endpoints  * @return the builder  */ public RouteDefinition from(Endpoint... endpoints) {     RouteDefinition route = createRoute().     route.from(endpoints).     return route(route). }
true;public;1;9;/**  * Creates a new route using the given route  *  * @param route the route  * @return the builder  */ ;/**  * Creates a new route using the given route  *  * @param route the route  * @return the builder  */ public RouteDefinition route(RouteDefinition route) {     // must prepare the route before we can add it to the routes list     RouteDefinitionHelper.prepareRoute(getCamelContext(), route, getOnExceptions(), getIntercepts(), getInterceptFroms(), getInterceptSendTos(), getOnCompletions()).     getRoutes().add(route).     // mark this route as prepared     route.markPrepared().     return route. }
true;public;0;5;/**  * Creates and adds an interceptor that is triggered on every step in the route  * processing.  *  * @return the interceptor builder to configure  */ ;/**  * Creates and adds an interceptor that is triggered on every step in the route  * processing.  *  * @return the interceptor builder to configure  */ public InterceptDefinition intercept() {     InterceptDefinition answer = new InterceptDefinition().     getIntercepts().add(0, answer).     return answer. }
true;public;0;5;/**  * Creates and adds an interceptor that is triggered when an exchange  * is received as input to any routes (eg from all the <tt>from</tt>)  *  * @return the interceptor builder to configure  */ ;/**  * Creates and adds an interceptor that is triggered when an exchange  * is received as input to any routes (eg from all the <tt>from</tt>)  *  * @return the interceptor builder to configure  */ public InterceptFromDefinition interceptFrom() {     InterceptFromDefinition answer = new InterceptFromDefinition().     getInterceptFroms().add(answer).     return answer. }
true;public;1;5;/**  * Creates and adds an interceptor that is triggered when an exchange is received  * as input to the route defined with the given endpoint (eg from the <tt>from</tt>)  *  * @param uri uri of the endpoint  * @return the interceptor builder to configure  */ ;/**  * Creates and adds an interceptor that is triggered when an exchange is received  * as input to the route defined with the given endpoint (eg from the <tt>from</tt>)  *  * @param uri uri of the endpoint  * @return the interceptor builder to configure  */ public InterceptFromDefinition interceptFrom(@AsEndpointUri final String uri) {     InterceptFromDefinition answer = new InterceptFromDefinition(uri).     getInterceptFroms().add(answer).     return answer. }
true;public;1;5;/**  * Creates and adds an interceptor that is triggered when an exchange is  * send to the given endpoint  *  * @param uri uri of the endpoint  * @return  the builder  */ ;/**  * Creates and adds an interceptor that is triggered when an exchange is  * send to the given endpoint  *  * @param uri uri of the endpoint  * @return  the builder  */ public InterceptSendToEndpointDefinition interceptSendToEndpoint(@AsEndpointUri final String uri) {     InterceptSendToEndpointDefinition answer = new InterceptSendToEndpointDefinition(uri).     getInterceptSendTos().add(answer).     return answer. }
true;public;1;6;/**  * Adds an on exception  *  * @param exception  the exception  * @return the builder  */ ;/**  * Adds an on exception  *  * @param exception  the exception  * @return the builder  */ public OnExceptionDefinition onException(Class<? extends Throwable> exception) {     OnExceptionDefinition answer = new OnExceptionDefinition(exception).     answer.setRouteScoped(false).     getOnExceptions().add(answer).     return answer. }
true;public;0;5;/**  * Adds an on completion  *  * @return the builder  */ ;/**  * Adds an on completion  *  * @return the builder  */ public OnCompletionDefinition onCompletion() {     OnCompletionDefinition answer = new OnCompletionDefinition().     getOnCompletions().add(answer).     return answer. }
true;protected;0;8;// ------------------------------------------------------------------------- ;// Implementation methods // ------------------------------------------------------------------------- protected RouteDefinition createRoute() {     RouteDefinition route = new RouteDefinition().     ErrorHandlerFactory handler = getErrorHandlerFactory().     if (handler != null) {         route.setErrorHandlerBuilderIfNull(handler).     }     return route. }
