commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the servers.  *  * @param servers server in the format: [service@]host:port.  */ ;/**  * Set the servers.  *  * @param servers server in the format: [service@]host:port.  */ public void setServers(List<String> servers) {     this.services.clear().     servers.forEach(this::addServer). }
false;public;2;16;;public void addServers(String serviceName, List<String> servers) {     for (String server : servers) {         String host = StringHelper.before(server, ":").         String port = StringHelper.after(server, ":").         if (ObjectHelper.isNotEmpty(host) && ObjectHelper.isNotEmpty(port)) {             addServer(DefaultServiceDefinition.builder().withName(serviceName).withHost(host).withPort(Integer.parseInt(port)).build()).         }     } }
true;public;1;4;/**  * Set the servers.  *  * @param servers servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ ;/**  * Set the servers.  *  * @param servers servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ public void setServers(String servers) {     this.services.clear().     addServer(servers). }
true;public;1;3;/**  * Add a server to the known list of servers.  */ ;/**  * Add a server to the known list of servers.  */ public void addServer(ServiceDefinition server) {     services.add(server). }
true;public;1;3;/**  * Add a server to the known list of servers.  * @param serverString servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ ;/**  * Add a server to the known list of servers.  * @param serverString servers separated by comma in the format: [service@]host:port,[service@]host2:port,[service@]host3:port and so on.  */ public void addServer(String serverString) {     DefaultServiceDefinition.parse(serverString).forEach(this::addServer). }
true;public;1;3;/**  * Remove an existing server from the list of known servers.  */ ;/**  * Remove an existing server from the list of known servers.  */ public void removeServer(Predicate<ServiceDefinition> condition) {     services.removeIf(condition). }
false;public;1;8;;@Override public List<ServiceDefinition> getServices(String name) {     return Collections.unmodifiableList(services.stream().filter(s -> Objects.isNull(s.getName()) || Objects.equals(name, s.getName())).collect(Collectors.toList())). }
false;public,static;1;8;;// ************************************************************************* // Helpers // ************************************************************************* public static StaticServiceDiscovery forServices(Collection<ServiceDefinition> definitions) {     StaticServiceDiscovery discovery = new StaticServiceDiscovery().     for (ServiceDefinition definition : definitions) {         discovery.addServer(definition).     }     return discovery. }
false;public,static;1;8;;public static StaticServiceDiscovery forServices(ServiceDefinition... definitions) {     StaticServiceDiscovery discovery = new StaticServiceDiscovery().     for (ServiceDefinition definition : definitions) {         discovery.addServer(definition).     }     return discovery. }
