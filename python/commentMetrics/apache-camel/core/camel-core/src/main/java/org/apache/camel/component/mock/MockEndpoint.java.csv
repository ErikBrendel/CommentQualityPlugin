# id;timestamp;commentText;codeText;commentWords;codeWords
MockEndpoint -> public void expectedHeaderReceived(final String name, final Object value);1549264559;Sets an expectation that the given header name & value are received by this endpoint_<p/>_You can set multiple expectations for different header names._If you set a value of <tt>null</tt> that means we accept either the header is absent, or its value is <tt>null</tt>_<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderReceived(final String name, final Object value) {_        if (expectedMinimumCount == -1) {_            expectedMinimumMessageCount(1)__        }_        if (expectedHeaderValues == null) {_            expectedHeaderValues = getCamelContext().getHeadersMapFactory().newMap()__            _            expects(new Runnable() {_                public void run() {_                    for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                        Exchange exchange = getReceivedExchange(i)__                        for (Map.Entry<String, Object> entry : expectedHeaderValues.entrySet()) {_                            String key = entry.getKey()__                            Object expectedValue = entry.getValue()___                            _                            if (expectedValue != null) {_                                assertTrue("Exchange " + i + " has no headers", exchange.getIn().hasHeaders())__                                boolean hasKey = exchange.getIn().getHeaders().containsKey(key)__                                assertTrue("No header with name " + key + " found for message: " + i, hasKey)__                            }__                            Object actualValue = exchange.getIn().getHeader(key)__                            actualValue = extractActualValue(exchange, actualValue, expectedValue)___                            assertEquals("Header with name " + key + " for message: " + i, expectedValue, actualValue)__                        }_                    }_                }_            })__        }_        expectedHeaderValues.put(name, value)__    };sets,an,expectation,that,the,given,header,name,value,are,received,by,this,endpoint,p,you,can,set,multiple,expectations,for,different,header,names,if,you,set,a,value,of,tt,null,tt,that,means,we,accept,either,the,header,is,absent,or,its,value,is,tt,null,tt,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,received,final,string,name,final,object,value,if,expected,minimum,count,1,expected,minimum,message,count,1,if,expected,header,values,null,expected,header,values,get,camel,context,get,headers,map,factory,new,map,expects,new,runnable,public,void,run,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,for,map,entry,string,object,entry,expected,header,values,entry,set,string,key,entry,get,key,object,expected,value,entry,get,value,if,expected,value,null,assert,true,exchange,i,has,no,headers,exchange,get,in,has,headers,boolean,has,key,exchange,get,in,get,headers,contains,key,key,assert,true,no,header,with,name,key,found,for,message,i,has,key,object,actual,value,exchange,get,in,get,header,key,actual,value,extract,actual,value,exchange,actual,value,expected,value,assert,equals,header,with,name,key,for,message,i,expected,value,actual,value,expected,header,values,put,name,value
MockEndpoint -> public void expectedHeaderReceived(final String name, final Object value);1549433221;Sets an expectation that the given header name & value are received by this endpoint_<p/>_You can set multiple expectations for different header names._If you set a value of <tt>null</tt> that means we accept either the header is absent, or its value is <tt>null</tt>;public void expectedHeaderReceived(final String name, final Object value) {_        if (expectedMinimumCount == -1 && expectedCount <= 0) {_            expectedMinimumMessageCount(1)__        }_        if (expectedHeaderValues == null) {_            expectedHeaderValues = getCamelContext().getHeadersMapFactory().newMap()__            _            expects(new Runnable() {_                public void run() {_                    for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                        Exchange exchange = getReceivedExchange(i)__                        for (Map.Entry<String, Object> entry : expectedHeaderValues.entrySet()) {_                            String key = entry.getKey()__                            Object expectedValue = entry.getValue()___                            _                            if (expectedValue != null) {_                                assertTrue("Exchange " + i + " has no headers", exchange.getIn().hasHeaders())__                                boolean hasKey = exchange.getIn().getHeaders().containsKey(key)__                                assertTrue("No header with name " + key + " found for message: " + i, hasKey)__                            }__                            Object actualValue = exchange.getIn().getHeader(key)__                            actualValue = extractActualValue(exchange, actualValue, expectedValue)___                            assertEquals("Header with name " + key + " for message: " + i, expectedValue, actualValue)__                        }_                    }_                }_            })__        }_        expectedHeaderValues.put(name, value)__    };sets,an,expectation,that,the,given,header,name,value,are,received,by,this,endpoint,p,you,can,set,multiple,expectations,for,different,header,names,if,you,set,a,value,of,tt,null,tt,that,means,we,accept,either,the,header,is,absent,or,its,value,is,tt,null,tt;public,void,expected,header,received,final,string,name,final,object,value,if,expected,minimum,count,1,expected,count,0,expected,minimum,message,count,1,if,expected,header,values,null,expected,header,values,get,camel,context,get,headers,map,factory,new,map,expects,new,runnable,public,void,run,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,for,map,entry,string,object,entry,expected,header,values,entry,set,string,key,entry,get,key,object,expected,value,entry,get,value,if,expected,value,null,assert,true,exchange,i,has,no,headers,exchange,get,in,has,headers,boolean,has,key,exchange,get,in,get,headers,contains,key,key,assert,true,no,header,with,name,key,found,for,message,i,has,key,object,actual,value,exchange,get,in,get,header,key,actual,value,extract,actual,value,exchange,actual,value,expected,value,assert,equals,header,with,name,key,for,message,i,expected,value,actual,value,expected,header,values,put,name,value
MockEndpoint -> public void expectedHeaderReceived(final String name, final Object value);1550749310;Sets an expectation that the given header name & value are received by this endpoint_<p/>_You can set multiple expectations for different header names._If you set a value of <tt>null</tt> that means we accept either the header is absent, or its value is <tt>null</tt>;public void expectedHeaderReceived(final String name, final Object value) {_        if (expectedMinimumCount == -1 && expectedCount <= 0) {_            expectedMinimumMessageCount(1)__        }_        if (expectedHeaderValues == null) {_            expectedHeaderValues = getCamelContext().getHeadersMapFactory().newMap()__            _            expects(new Runnable() {_                public void run() {_                    for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                        Exchange exchange = getReceivedExchange(i)__                        for (Map.Entry<String, Object> entry : expectedHeaderValues.entrySet()) {_                            String key = entry.getKey()__                            Object expectedValue = entry.getValue()___                            _                            if (expectedValue != null) {_                                assertTrue("Exchange " + i + " has no headers", exchange.getIn().hasHeaders())__                                boolean hasKey = exchange.getIn().getHeaders().containsKey(key)__                                assertTrue("No header with name " + key + " found for message: " + i, hasKey)__                            }__                            Object actualValue = exchange.getIn().getHeader(key)__                            actualValue = extractActualValue(exchange, actualValue, expectedValue)___                            assertEquals("Header with name " + key + " for message: " + i, expectedValue, actualValue)__                        }_                    }_                }_            })__        }_        expectedHeaderValues.put(name, value)__    };sets,an,expectation,that,the,given,header,name,value,are,received,by,this,endpoint,p,you,can,set,multiple,expectations,for,different,header,names,if,you,set,a,value,of,tt,null,tt,that,means,we,accept,either,the,header,is,absent,or,its,value,is,tt,null,tt;public,void,expected,header,received,final,string,name,final,object,value,if,expected,minimum,count,1,expected,count,0,expected,minimum,message,count,1,if,expected,header,values,null,expected,header,values,get,camel,context,get,headers,map,factory,new,map,expects,new,runnable,public,void,run,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,for,map,entry,string,object,entry,expected,header,values,entry,set,string,key,entry,get,key,object,expected,value,entry,get,value,if,expected,value,null,assert,true,exchange,i,has,no,headers,exchange,get,in,has,headers,boolean,has,key,exchange,get,in,get,headers,contains,key,key,assert,true,no,header,with,name,key,found,for,message,i,has,key,object,actual,value,exchange,get,in,get,header,key,actual,value,extract,actual,value,exchange,actual,value,expected,value,assert,equals,header,with,name,key,for,message,i,expected,value,actual,value,expected,header,values,put,name,value
MockEndpoint -> public void setExpectedMessageCount(int expectedCount);1549264559;@see #setExpectedCount(int);public void setExpectedMessageCount(int expectedCount) {_        this.expectedCount = expectedCount__        if (expectedCount <= 0) {_            latch = null__        } else {_            latch = new CountDownLatch(expectedCount)__        }_    };see,set,expected,count,int;public,void,set,expected,message,count,int,expected,count,this,expected,count,expected,count,if,expected,count,0,latch,null,else,latch,new,count,down,latch,expected,count
MockEndpoint -> public void setExpectedMessageCount(int expectedCount);1549433221;@see #setExpectedCount(int);public void setExpectedMessageCount(int expectedCount) {_        this.expectedCount = expectedCount__        if (expectedCount <= 0) {_            latch = null__        } else {_            latch = new CountDownLatch(expectedCount)__        }_    };see,set,expected,count,int;public,void,set,expected,message,count,int,expected,count,this,expected,count,expected,count,if,expected,count,0,latch,null,else,latch,new,count,down,latch,expected,count
MockEndpoint -> public void setExpectedMessageCount(int expectedCount);1550749310;@see #setExpectedCount(int);public void setExpectedMessageCount(int expectedCount) {_        this.expectedCount = expectedCount__        if (expectedCount <= 0) {_            latch = null__        } else {_            latch = new CountDownLatch(expectedCount)__        }_    };see,set,expected,count,int;public,void,set,expected,message,count,int,expected,count,this,expected,count,expected,count,if,expected,count,0,latch,null,else,latch,new,count,down,latch,expected,count
MockEndpoint -> public void expects(Runnable runnable);1549264559;Adds the expectation which will be invoked when enough messages are received;public void expects(Runnable runnable) {_        tests.add(runnable)__    };adds,the,expectation,which,will,be,invoked,when,enough,messages,are,received;public,void,expects,runnable,runnable,tests,add,runnable
MockEndpoint -> public void expects(Runnable runnable);1549433221;Adds the expectation which will be invoked when enough messages are received;public void expects(Runnable runnable) {_        tests.add(runnable)__    };adds,the,expectation,which,will,be,invoked,when,enough,messages,are,received;public,void,expects,runnable,runnable,tests,add,runnable
MockEndpoint -> public void expects(Runnable runnable);1550749310;Adds the expectation which will be invoked when enough messages are received;public void expects(Runnable runnable) {_        tests.add(runnable)__    };adds,the,expectation,which,will,be,invoked,when,enough,messages,are,received;public,void,expects,runnable,runnable,tests,add,runnable
MockEndpoint -> protected void addReceivedExchange(Exchange copy);1549264559;Adds the received exchange.__@param copy  a copy of the received exchange;protected void addReceivedExchange(Exchange copy) {_        if (retainFirst == 0 && retainLast == 0) {_            _        } else if (retainFirst < 0 && retainLast < 0) {_            _            receivedExchanges.add(copy)__        } else {_            _            if (retainFirst > 0 && counter < retainFirst) {_                _                receivedExchanges.add(copy)__            } else if (retainLast > 0) {_                _                int index = receivedExchanges.size() - retainLast__                if (index >= 0) {_                    _                    _                    if (retainFirst <= 0 || retainFirst <= index) {_                        receivedExchanges.remove(index)__                    }_                }_                _                receivedExchanges.add(copy)__            }_        }_    };adds,the,received,exchange,param,copy,a,copy,of,the,received,exchange;protected,void,add,received,exchange,exchange,copy,if,retain,first,0,retain,last,0,else,if,retain,first,0,retain,last,0,received,exchanges,add,copy,else,if,retain,first,0,counter,retain,first,received,exchanges,add,copy,else,if,retain,last,0,int,index,received,exchanges,size,retain,last,if,index,0,if,retain,first,0,retain,first,index,received,exchanges,remove,index,received,exchanges,add,copy
MockEndpoint -> protected void addReceivedExchange(Exchange copy);1549433221;Adds the received exchange.__@param copy  a copy of the received exchange;protected void addReceivedExchange(Exchange copy) {_        if (retainFirst == 0 && retainLast == 0) {_            _        } else if (retainFirst < 0 && retainLast < 0) {_            _            receivedExchanges.add(copy)__        } else {_            _            if (retainFirst > 0 && counter < retainFirst) {_                _                receivedExchanges.add(copy)__            } else if (retainLast > 0) {_                _                int index = receivedExchanges.size() - retainLast__                if (index >= 0) {_                    _                    _                    if (retainFirst <= 0 || retainFirst <= index) {_                        receivedExchanges.remove(index)__                    }_                }_                _                receivedExchanges.add(copy)__            }_        }_    };adds,the,received,exchange,param,copy,a,copy,of,the,received,exchange;protected,void,add,received,exchange,exchange,copy,if,retain,first,0,retain,last,0,else,if,retain,first,0,retain,last,0,received,exchanges,add,copy,else,if,retain,first,0,counter,retain,first,received,exchanges,add,copy,else,if,retain,last,0,int,index,received,exchanges,size,retain,last,if,index,0,if,retain,first,0,retain,first,index,received,exchanges,remove,index,received,exchanges,add,copy
MockEndpoint -> protected void addReceivedExchange(Exchange copy);1550749310;Adds the received exchange.__@param copy  a copy of the received exchange;protected void addReceivedExchange(Exchange copy) {_        if (retainFirst == 0 && retainLast == 0) {_            _        } else if (retainFirst < 0 && retainLast < 0) {_            _            receivedExchanges.add(copy)__        } else {_            _            if (retainFirst > 0 && counter < retainFirst) {_                _                receivedExchanges.add(copy)__            } else if (retainLast > 0) {_                _                int index = receivedExchanges.size() - retainLast__                if (index >= 0) {_                    _                    _                    if (retainFirst <= 0 || retainFirst <= index) {_                        receivedExchanges.remove(index)__                    }_                }_                _                receivedExchanges.add(copy)__            }_        }_    };adds,the,received,exchange,param,copy,a,copy,of,the,received,exchange;protected,void,add,received,exchange,exchange,copy,if,retain,first,0,retain,last,0,else,if,retain,first,0,retain,last,0,received,exchanges,add,copy,else,if,retain,first,0,counter,retain,first,received,exchanges,add,copy,else,if,retain,last,0,int,index,received,exchanges,size,retain,last,if,index,0,if,retain,first,0,retain,first,index,received,exchanges,remove,index,received,exchanges,add,copy
MockEndpoint -> public static void setAssertPeriod(CamelContext context, long period);1549264559;Sets the assert period on all the expectations on any {@link MockEndpoint} instances registered_in the given context.__@param context the camel context used to find all the available endpoints_@param period the period in millis;public static void setAssertPeriod(CamelContext context, long period) {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.setAssertPeriod(period)__            }_        }_    };sets,the,assert,period,on,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,param,context,the,camel,context,used,to,find,all,the,available,endpoints,param,period,the,period,in,millis;public,static,void,set,assert,period,camel,context,context,long,period,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,set,assert,period,period
MockEndpoint -> public static void setAssertPeriod(CamelContext context, long period);1549433221;Sets the assert period on all the expectations on any {@link MockEndpoint} instances registered_in the given context.__@param context the camel context used to find all the available endpoints_@param period the period in millis;public static void setAssertPeriod(CamelContext context, long period) {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.setAssertPeriod(period)__            }_        }_    };sets,the,assert,period,on,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,param,context,the,camel,context,used,to,find,all,the,available,endpoints,param,period,the,period,in,millis;public,static,void,set,assert,period,camel,context,context,long,period,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,set,assert,period,period
MockEndpoint -> public static void setAssertPeriod(CamelContext context, long period);1550749310;Sets the assert period on all the expectations on any {@link MockEndpoint} instances registered_in the given context.__@param context the camel context used to find all the available endpoints_@param period the period in millis;public static void setAssertPeriod(CamelContext context, long period) {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.setAssertPeriod(period)__            }_        }_    };sets,the,assert,period,on,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,param,context,the,camel,context,used,to,find,all,the,available,endpoints,param,period,the,period,in,millis;public,static,void,set,assert,period,camel,context,context,long,period,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,set,assert,period,period
MockEndpoint -> public void returnReplyHeader(String headerName, Expression expression);1549264559;Set the expression which value will be set to the message header_@param headerName that will be set value_@param expression which is use to set the message header;public void returnReplyHeader(String headerName, Expression expression) {_        this.defaultProcessor = exchange -> {_            Object exp = expression.evaluate(exchange, Object.class)__            exchange.getMessage().setHeader(headerName, exp)__        }__    };set,the,expression,which,value,will,be,set,to,the,message,header,param,header,name,that,will,be,set,value,param,expression,which,is,use,to,set,the,message,header;public,void,return,reply,header,string,header,name,expression,expression,this,default,processor,exchange,object,exp,expression,evaluate,exchange,object,class,exchange,get,message,set,header,header,name,exp
MockEndpoint -> public void returnReplyHeader(String headerName, Expression expression);1549433221;Set the expression which value will be set to the message header_@param headerName that will be set value_@param expression which is use to set the message header;public void returnReplyHeader(String headerName, Expression expression) {_        this.defaultProcessor = exchange -> {_            Object exp = expression.evaluate(exchange, Object.class)__            exchange.getMessage().setHeader(headerName, exp)__        }__    };set,the,expression,which,value,will,be,set,to,the,message,header,param,header,name,that,will,be,set,value,param,expression,which,is,use,to,set,the,message,header;public,void,return,reply,header,string,header,name,expression,expression,this,default,processor,exchange,object,exp,expression,evaluate,exchange,object,class,exchange,get,message,set,header,header,name,exp
MockEndpoint -> public void returnReplyHeader(String headerName, Expression expression);1550749310;Set the expression which value will be set to the message header_@param headerName that will be set value_@param expression which is use to set the message header;public void returnReplyHeader(String headerName, Expression expression) {_        this.defaultProcessor = exchange -> {_            Object exp = expression.evaluate(exchange, Object.class)__            exchange.getMessage().setHeader(headerName, exp)__        }__    };set,the,expression,which,value,will,be,set,to,the,message,header,param,header,name,that,will,be,set,value,param,expression,which,is,use,to,set,the,message,header;public,void,return,reply,header,string,header,name,expression,expression,this,default,processor,exchange,object,exp,expression,evaluate,exchange,object,class,exchange,get,message,set,header,header,name,exp
MockEndpoint -> public void expectsAscending(final Expression expression);1549264559;Adds an expectation that messages received should have ascending values_of the given expression such as a user generated counter value;public void expectsAscending(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertMessagesAscending(expression)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,ascending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,void,expects,ascending,final,expression,expression,expects,new,runnable,public,void,run,assert,messages,ascending,expression
MockEndpoint -> public void expectsAscending(final Expression expression);1549433221;Adds an expectation that messages received should have ascending values_of the given expression such as a user generated counter value;public void expectsAscending(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertMessagesAscending(expression)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,ascending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,void,expects,ascending,final,expression,expression,expects,new,runnable,public,void,run,assert,messages,ascending,expression
MockEndpoint -> public void expectsAscending(final Expression expression);1550749310;Adds an expectation that messages received should have ascending values_of the given expression such as a user generated counter value;public void expectsAscending(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertMessagesAscending(expression)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,ascending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,void,expects,ascending,final,expression,expression,expects,new,runnable,public,void,run,assert,messages,ascending,expression
MockEndpoint -> public static void resetMocks(CamelContext context);1549264559;Reset all mock endpoints__@param context the camel context used to find all the available endpoints to reset;public static void resetMocks(CamelContext context) {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.reset()__            }_        }_    };reset,all,mock,endpoints,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,reset;public,static,void,reset,mocks,camel,context,context,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,reset
MockEndpoint -> public static void resetMocks(CamelContext context);1549433221;Reset all mock endpoints__@param context the camel context used to find all the available endpoints to reset;public static void resetMocks(CamelContext context) {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.reset()__            }_        }_    };reset,all,mock,endpoints,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,reset;public,static,void,reset,mocks,camel,context,context,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,reset
MockEndpoint -> public static void resetMocks(CamelContext context);1550749310;Reset all mock endpoints__@param context the camel context used to find all the available endpoints to reset;public static void resetMocks(CamelContext context) {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.reset()__            }_        }_    };reset,all,mock,endpoints,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,reset;public,static,void,reset,mocks,camel,context,context,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,reset
MockEndpoint -> public void expectsNoDuplicates(final Expression expression);1549264559;Adds an expectation that no duplicate messages should be received using_the expression to determine the message ID__@param expression the expression used to create a unique message ID for_message comparison (which could just be the message_payload if the payload can be tested for uniqueness using_{@link Object#equals(Object)} and_{@link Object#hashCode()};public void expectsNoDuplicates(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertNoDuplicates(expression)__            }_        })__    };adds,an,expectation,that,no,duplicate,messages,should,be,received,using,the,expression,to,determine,the,message,id,param,expression,the,expression,used,to,create,a,unique,message,id,for,message,comparison,which,could,just,be,the,message,payload,if,the,payload,can,be,tested,for,uniqueness,using,link,object,equals,object,and,link,object,hash,code;public,void,expects,no,duplicates,final,expression,expression,expects,new,runnable,public,void,run,assert,no,duplicates,expression
MockEndpoint -> public void expectsNoDuplicates(final Expression expression);1549433221;Adds an expectation that no duplicate messages should be received using_the expression to determine the message ID__@param expression the expression used to create a unique message ID for_message comparison (which could just be the message_payload if the payload can be tested for uniqueness using_{@link Object#equals(Object)} and_{@link Object#hashCode()};public void expectsNoDuplicates(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertNoDuplicates(expression)__            }_        })__    };adds,an,expectation,that,no,duplicate,messages,should,be,received,using,the,expression,to,determine,the,message,id,param,expression,the,expression,used,to,create,a,unique,message,id,for,message,comparison,which,could,just,be,the,message,payload,if,the,payload,can,be,tested,for,uniqueness,using,link,object,equals,object,and,link,object,hash,code;public,void,expects,no,duplicates,final,expression,expression,expects,new,runnable,public,void,run,assert,no,duplicates,expression
MockEndpoint -> public void expectsNoDuplicates(final Expression expression);1550749310;Adds an expectation that no duplicate messages should be received using_the expression to determine the message ID__@param expression the expression used to create a unique message ID for_message comparison (which could just be the message_payload if the payload can be tested for uniqueness using_{@link Object#equals(Object)} and_{@link Object#hashCode()};public void expectsNoDuplicates(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertNoDuplicates(expression)__            }_        })__    };adds,an,expectation,that,no,duplicate,messages,should,be,received,using,the,expression,to,determine,the,message,id,param,expression,the,expression,used,to,create,a,unique,message,id,for,message,comparison,which,could,just,be,the,message,payload,if,the,payload,can,be,tested,for,uniqueness,using,link,object,equals,object,and,link,object,hash,code;public,void,expects,no,duplicates,final,expression,expression,expects,new,runnable,public,void,run,assert,no,duplicates,expression
MockEndpoint -> @Handler     public void handle(Exchange exchange) throws Exception;1549264559;Handles the incoming exchange._<p/>_This method turns this mock endpoint into a bean which you can use_in the Camel routes, which allows you to inject MockEndpoint as beans_in your routes and use the features of the mock to control the bean.__@param exchange  the exchange_@throws Exception can be thrown;@Handler_    public void handle(Exchange exchange) throws Exception {_        onExchange(exchange)__    };handles,the,incoming,exchange,p,this,method,turns,this,mock,endpoint,into,a,bean,which,you,can,use,in,the,camel,routes,which,allows,you,to,inject,mock,endpoint,as,beans,in,your,routes,and,use,the,features,of,the,mock,to,control,the,bean,param,exchange,the,exchange,throws,exception,can,be,thrown;handler,public,void,handle,exchange,exchange,throws,exception,on,exchange,exchange
MockEndpoint -> @Handler     public void handle(Exchange exchange) throws Exception;1549433221;Handles the incoming exchange._<p/>_This method turns this mock endpoint into a bean which you can use_in the Camel routes, which allows you to inject MockEndpoint as beans_in your routes and use the features of the mock to control the bean.__@param exchange  the exchange_@throws Exception can be thrown;@Handler_    public void handle(Exchange exchange) throws Exception {_        onExchange(exchange)__    };handles,the,incoming,exchange,p,this,method,turns,this,mock,endpoint,into,a,bean,which,you,can,use,in,the,camel,routes,which,allows,you,to,inject,mock,endpoint,as,beans,in,your,routes,and,use,the,features,of,the,mock,to,control,the,bean,param,exchange,the,exchange,throws,exception,can,be,thrown;handler,public,void,handle,exchange,exchange,throws,exception,on,exchange,exchange
MockEndpoint -> @Handler     public void handle(Exchange exchange) throws Exception;1550749310;Handles the incoming exchange._<p/>_This method turns this mock endpoint into a bean which you can use_in the Camel routes, which allows you to inject MockEndpoint as beans_in your routes and use the features of the mock to control the bean.__@param exchange  the exchange_@throws Exception can be thrown;@Handler_    public void handle(Exchange exchange) throws Exception {_        onExchange(exchange)__    };handles,the,incoming,exchange,p,this,method,turns,this,mock,endpoint,into,a,bean,which,you,can,use,in,the,camel,routes,which,allows,you,to,inject,mock,endpoint,as,beans,in,your,routes,and,use,the,features,of,the,mock,to,control,the,bean,param,exchange,the,exchange,throws,exception,can,be,thrown;handler,public,void,handle,exchange,exchange,throws,exception,on,exchange,exchange
MockEndpoint -> public void returnReplyBody(Expression expression);1549264559;Set the expression which value will be set to the message body_@param expression which is use to set the message body;public void returnReplyBody(Expression expression) {_        this.defaultProcessor = exchange -> {_            Object exp = expression.evaluate(exchange, Object.class)__            exchange.getMessage().setBody(exp)__        }__    };set,the,expression,which,value,will,be,set,to,the,message,body,param,expression,which,is,use,to,set,the,message,body;public,void,return,reply,body,expression,expression,this,default,processor,exchange,object,exp,expression,evaluate,exchange,object,class,exchange,get,message,set,body,exp
MockEndpoint -> public void returnReplyBody(Expression expression);1549433221;Set the expression which value will be set to the message body_@param expression which is use to set the message body;public void returnReplyBody(Expression expression) {_        this.defaultProcessor = exchange -> {_            Object exp = expression.evaluate(exchange, Object.class)__            exchange.getMessage().setBody(exp)__        }__    };set,the,expression,which,value,will,be,set,to,the,message,body,param,expression,which,is,use,to,set,the,message,body;public,void,return,reply,body,expression,expression,this,default,processor,exchange,object,exp,expression,evaluate,exchange,object,class,exchange,get,message,set,body,exp
MockEndpoint -> public void returnReplyBody(Expression expression);1550749310;Set the expression which value will be set to the message body_@param expression which is use to set the message body;public void returnReplyBody(Expression expression) {_        this.defaultProcessor = exchange -> {_            Object exp = expression.evaluate(exchange, Object.class)__            exchange.getMessage().setBody(exp)__        }__    };set,the,expression,which,value,will,be,set,to,the,message,body,param,expression,which,is,use,to,set,the,message,body;public,void,return,reply,body,expression,expression,this,default,processor,exchange,object,exp,expression,evaluate,exchange,object,class,exchange,get,message,set,body,exp
MockEndpoint -> public void assertIsSatisfied() throws InterruptedException;1549264559;Validates that all the available expectations on this endpoint are_satisfied_ or throw an exception;public void assertIsSatisfied() throws InterruptedException {_        assertIsSatisfied(sleepForEmptyTest)__    };validates,that,all,the,available,expectations,on,this,endpoint,are,satisfied,or,throw,an,exception;public,void,assert,is,satisfied,throws,interrupted,exception,assert,is,satisfied,sleep,for,empty,test
MockEndpoint -> public void assertIsSatisfied() throws InterruptedException;1549433221;Validates that all the available expectations on this endpoint are_satisfied_ or throw an exception;public void assertIsSatisfied() throws InterruptedException {_        assertIsSatisfied(sleepForEmptyTest)__    };validates,that,all,the,available,expectations,on,this,endpoint,are,satisfied,or,throw,an,exception;public,void,assert,is,satisfied,throws,interrupted,exception,assert,is,satisfied,sleep,for,empty,test
MockEndpoint -> public void assertIsSatisfied() throws InterruptedException;1550749310;Validates that all the available expectations on this endpoint are_satisfied_ or throw an exception;public void assertIsSatisfied() throws InterruptedException {_        assertIsSatisfied(sleepForEmptyTest)__    };validates,that,all,the,available,expectations,on,this,endpoint,are,satisfied,or,throw,an,exception;public,void,assert,is,satisfied,throws,interrupted,exception,assert,is,satisfied,sleep,for,empty,test
MockEndpoint -> public void expectedBodiesReceived(Object... bodies);1549264559;Sets an expectation that the given body values are received by this endpoint_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceived(Object... bodies) {_        List<Object> bodyList = new ArrayList<>()__        bodyList.addAll(Arrays.asList(bodies))__        expectedBodiesReceived(bodyList)__    };sets,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,object,bodies,list,object,body,list,new,array,list,body,list,add,all,arrays,as,list,bodies,expected,bodies,received,body,list
MockEndpoint -> public void expectedBodiesReceived(Object... bodies);1549433221;Sets an expectation that the given body values are received by this endpoint_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceived(Object... bodies) {_        List<Object> bodyList = new ArrayList<>()__        bodyList.addAll(Arrays.asList(bodies))__        expectedBodiesReceived(bodyList)__    };sets,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,object,bodies,list,object,body,list,new,array,list,body,list,add,all,arrays,as,list,bodies,expected,bodies,received,body,list
MockEndpoint -> public void expectedBodiesReceived(Object... bodies);1550749310;Sets an expectation that the given body values are received by this endpoint_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceived(Object... bodies) {_        List<Object> bodyList = new ArrayList<>()__        bodyList.addAll(Arrays.asList(bodies))__        expectedBodiesReceived(bodyList)__    };sets,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,object,bodies,list,object,body,list,new,array,list,body,list,add,all,arrays,as,list,bodies,expected,bodies,received,body,list
MockEndpoint -> public void setCopyOnExchange(boolean copyOnExchange);1549264559;Sets whether to make a deep copy of the incoming {@link Exchange} when received at this mock endpoint._<p/>_Is by default <tt>true</tt>.;public void setCopyOnExchange(boolean copyOnExchange) {_        this.copyOnExchange = copyOnExchange__    };sets,whether,to,make,a,deep,copy,of,the,incoming,link,exchange,when,received,at,this,mock,endpoint,p,is,by,default,tt,true,tt;public,void,set,copy,on,exchange,boolean,copy,on,exchange,this,copy,on,exchange,copy,on,exchange
MockEndpoint -> public void setCopyOnExchange(boolean copyOnExchange);1549433221;Sets whether to make a deep copy of the incoming {@link Exchange} when received at this mock endpoint._<p/>_Is by default <tt>true</tt>.;public void setCopyOnExchange(boolean copyOnExchange) {_        this.copyOnExchange = copyOnExchange__    };sets,whether,to,make,a,deep,copy,of,the,incoming,link,exchange,when,received,at,this,mock,endpoint,p,is,by,default,tt,true,tt;public,void,set,copy,on,exchange,boolean,copy,on,exchange,this,copy,on,exchange,copy,on,exchange
MockEndpoint -> public void setCopyOnExchange(boolean copyOnExchange);1550749310;Sets whether to make a deep copy of the incoming {@link Exchange} when received at this mock endpoint._<p/>_Is by default <tt>true</tt>.;public void setCopyOnExchange(boolean copyOnExchange) {_        this.copyOnExchange = copyOnExchange__    };sets,whether,to,make,a,deep,copy,of,the,incoming,link,exchange,when,received,at,this,mock,endpoint,p,is,by,default,tt,true,tt;public,void,set,copy,on,exchange,boolean,copy,on,exchange,this,copy,on,exchange,copy,on,exchange
MockEndpoint -> public void setResultMinimumWaitTime(long resultMinimumWaitTime);1549264559;Sets the minimum expected amount of time (in millis) the {@link #assertIsSatisfied()} will_wait on a latch until it is satisfied;public void setResultMinimumWaitTime(long resultMinimumWaitTime) {_        this.resultMinimumWaitTime = resultMinimumWaitTime__    };sets,the,minimum,expected,amount,of,time,in,millis,the,link,assert,is,satisfied,will,wait,on,a,latch,until,it,is,satisfied;public,void,set,result,minimum,wait,time,long,result,minimum,wait,time,this,result,minimum,wait,time,result,minimum,wait,time
MockEndpoint -> public void setResultMinimumWaitTime(long resultMinimumWaitTime);1549433221;Sets the minimum expected amount of time (in millis) the {@link #assertIsSatisfied()} will_wait on a latch until it is satisfied;public void setResultMinimumWaitTime(long resultMinimumWaitTime) {_        this.resultMinimumWaitTime = resultMinimumWaitTime__    };sets,the,minimum,expected,amount,of,time,in,millis,the,link,assert,is,satisfied,will,wait,on,a,latch,until,it,is,satisfied;public,void,set,result,minimum,wait,time,long,result,minimum,wait,time,this,result,minimum,wait,time,result,minimum,wait,time
MockEndpoint -> public void setResultMinimumWaitTime(long resultMinimumWaitTime);1550749310;Sets the minimum expected amount of time (in millis) the {@link #assertIsSatisfied()} will_wait on a latch until it is satisfied;public void setResultMinimumWaitTime(long resultMinimumWaitTime) {_        this.resultMinimumWaitTime = resultMinimumWaitTime__    };sets,the,minimum,expected,amount,of,time,in,millis,the,link,assert,is,satisfied,will,wait,on,a,latch,until,it,is,satisfied;public,void,set,result,minimum,wait,time,long,result,minimum,wait,time,this,result,minimum,wait,time,result,minimum,wait,time
MockEndpoint -> public static MockEndpoint resolve(CamelContext context, String uri);1549264559;A helper method to resolve the mock endpoint of the given URI on the given context__@param context the camel context to try resolve the mock endpoint from_@param uri the uri of the endpoint to resolve_@return the endpoint;public static MockEndpoint resolve(CamelContext context, String uri) {_        return CamelContextHelper.getMandatoryEndpoint(context, uri, MockEndpoint.class)__    };a,helper,method,to,resolve,the,mock,endpoint,of,the,given,uri,on,the,given,context,param,context,the,camel,context,to,try,resolve,the,mock,endpoint,from,param,uri,the,uri,of,the,endpoint,to,resolve,return,the,endpoint;public,static,mock,endpoint,resolve,camel,context,context,string,uri,return,camel,context,helper,get,mandatory,endpoint,context,uri,mock,endpoint,class
MockEndpoint -> public static MockEndpoint resolve(CamelContext context, String uri);1549433221;A helper method to resolve the mock endpoint of the given URI on the given context__@param context the camel context to try resolve the mock endpoint from_@param uri the uri of the endpoint to resolve_@return the endpoint;public static MockEndpoint resolve(CamelContext context, String uri) {_        return CamelContextHelper.getMandatoryEndpoint(context, uri, MockEndpoint.class)__    };a,helper,method,to,resolve,the,mock,endpoint,of,the,given,uri,on,the,given,context,param,context,the,camel,context,to,try,resolve,the,mock,endpoint,from,param,uri,the,uri,of,the,endpoint,to,resolve,return,the,endpoint;public,static,mock,endpoint,resolve,camel,context,context,string,uri,return,camel,context,helper,get,mandatory,endpoint,context,uri,mock,endpoint,class
MockEndpoint -> public static MockEndpoint resolve(CamelContext context, String uri);1550749310;A helper method to resolve the mock endpoint of the given URI on the given context__@param context the camel context to try resolve the mock endpoint from_@param uri the uri of the endpoint to resolve_@return the endpoint;public static MockEndpoint resolve(CamelContext context, String uri) {_        return CamelContextHelper.getMandatoryEndpoint(context, uri, MockEndpoint.class)__    };a,helper,method,to,resolve,the,mock,endpoint,of,the,given,uri,on,the,given,context,param,context,the,camel,context,to,try,resolve,the,mock,endpoint,from,param,uri,the,uri,of,the,endpoint,to,resolve,return,the,endpoint;public,static,mock,endpoint,resolve,camel,context,context,string,uri,return,camel,context,helper,get,mandatory,endpoint,context,uri,mock,endpoint,class
MockEndpoint -> public static void assertIsSatisfied(CamelContext context) throws InterruptedException;1549264559;Asserts that all the expectations on any {@link MockEndpoint} instances registered_in the given context are valid__@param context the camel context used to find all the available endpoints to be asserted;public static void assertIsSatisfied(CamelContext context) throws InterruptedException {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.assertIsSatisfied()__            }_        }_    };asserts,that,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,are,valid,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,be,asserted;public,static,void,assert,is,satisfied,camel,context,context,throws,interrupted,exception,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,assert,is,satisfied
MockEndpoint -> public static void assertIsSatisfied(CamelContext context) throws InterruptedException;1549433221;Asserts that all the expectations on any {@link MockEndpoint} instances registered_in the given context are valid__@param context the camel context used to find all the available endpoints to be asserted;public static void assertIsSatisfied(CamelContext context) throws InterruptedException {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.assertIsSatisfied()__            }_        }_    };asserts,that,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,are,valid,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,be,asserted;public,static,void,assert,is,satisfied,camel,context,context,throws,interrupted,exception,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,assert,is,satisfied
MockEndpoint -> public static void assertIsSatisfied(CamelContext context) throws InterruptedException;1550749310;Asserts that all the expectations on any {@link MockEndpoint} instances registered_in the given context are valid__@param context the camel context used to find all the available endpoints to be asserted;public static void assertIsSatisfied(CamelContext context) throws InterruptedException {_        ObjectHelper.notNull(context, "camelContext")__        Collection<Endpoint> endpoints = context.getEndpoints()__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.assertIsSatisfied()__            }_        }_    };asserts,that,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,are,valid,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,be,asserted;public,static,void,assert,is,satisfied,camel,context,context,throws,interrupted,exception,object,helper,not,null,context,camel,context,collection,endpoint,endpoints,context,get,endpoints,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,assert,is,satisfied
MockEndpoint -> public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException;1549264559;Validates that the assertions fail on this endpoint__@param timeoutForEmptyEndpoints the timeout in milliseconds that we_should wait for the test to be true;public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {_        boolean failed = false__        try {_            assertIsSatisfied(timeoutForEmptyEndpoints)__            _            failed = true__        } catch (AssertionError e) {_            log.info("Caught expected failure: {}", e)__        }_        if (failed) { _            _            fail("Expected assertion failure but test succeeded!")__        }_    };validates,that,the,assertions,fail,on,this,endpoint,param,timeout,for,empty,endpoints,the,timeout,in,milliseconds,that,we,should,wait,for,the,test,to,be,true;public,void,assert,is,not,satisfied,long,timeout,for,empty,endpoints,throws,interrupted,exception,boolean,failed,false,try,assert,is,satisfied,timeout,for,empty,endpoints,failed,true,catch,assertion,error,e,log,info,caught,expected,failure,e,if,failed,fail,expected,assertion,failure,but,test,succeeded
MockEndpoint -> public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException;1549433221;Validates that the assertions fail on this endpoint__@param timeoutForEmptyEndpoints the timeout in milliseconds that we_should wait for the test to be true;public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {_        boolean failed = false__        try {_            assertIsSatisfied(timeoutForEmptyEndpoints)__            _            failed = true__        } catch (AssertionError e) {_            log.info("Caught expected failure: {}", e)__        }_        if (failed) { _            _            fail("Expected assertion failure but test succeeded!")__        }_    };validates,that,the,assertions,fail,on,this,endpoint,param,timeout,for,empty,endpoints,the,timeout,in,milliseconds,that,we,should,wait,for,the,test,to,be,true;public,void,assert,is,not,satisfied,long,timeout,for,empty,endpoints,throws,interrupted,exception,boolean,failed,false,try,assert,is,satisfied,timeout,for,empty,endpoints,failed,true,catch,assertion,error,e,log,info,caught,expected,failure,e,if,failed,fail,expected,assertion,failure,but,test,succeeded
MockEndpoint -> public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException;1550749310;Validates that the assertions fail on this endpoint__@param timeoutForEmptyEndpoints the timeout in milliseconds that we_should wait for the test to be true;public void assertIsNotSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {_        boolean failed = false__        try {_            assertIsSatisfied(timeoutForEmptyEndpoints)__            _            failed = true__        } catch (AssertionError e) {_            if (log.isDebugEnabled()) {_                _                log.debug("Caught expected failure: " + e.getMessage(), e)__            } else {_                log.info("Caught expected failure: " + e.getMessage())__            }_        }_        if (failed) { _            _            fail("Expected assertion failure but test succeeded!")__        }_    };validates,that,the,assertions,fail,on,this,endpoint,param,timeout,for,empty,endpoints,the,timeout,in,milliseconds,that,we,should,wait,for,the,test,to,be,true;public,void,assert,is,not,satisfied,long,timeout,for,empty,endpoints,throws,interrupted,exception,boolean,failed,false,try,assert,is,satisfied,timeout,for,empty,endpoints,failed,true,catch,assertion,error,e,if,log,is,debug,enabled,log,debug,caught,expected,failure,e,get,message,e,else,log,info,caught,expected,failure,e,get,message,if,failed,fail,expected,assertion,failure,but,test,succeeded
MockEndpoint -> public AssertionClause allMessages();1549264559;Adds an assertion to all the received messages__@return the assertion clause;public AssertionClause allMessages() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                List<Exchange> list = getReceivedExchanges()__                int index = 0__                for (Exchange exchange : list) {_                    applyAssertionOn(MockEndpoint.this, index++, exchange)__                }_            }_        }__        expects(clause)__        return clause__    };adds,an,assertion,to,all,the,received,messages,return,the,assertion,clause;public,assertion,clause,all,messages,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,list,exchange,list,get,received,exchanges,int,index,0,for,exchange,exchange,list,apply,assertion,on,mock,endpoint,this,index,exchange,expects,clause,return,clause
MockEndpoint -> public AssertionClause allMessages();1549433221;Adds an assertion to all the received messages__@return the assertion clause;public AssertionClause allMessages() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                List<Exchange> list = getReceivedExchanges()__                int index = 0__                for (Exchange exchange : list) {_                    applyAssertionOn(MockEndpoint.this, index++, exchange)__                }_            }_        }__        expects(clause)__        return clause__    };adds,an,assertion,to,all,the,received,messages,return,the,assertion,clause;public,assertion,clause,all,messages,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,list,exchange,list,get,received,exchanges,int,index,0,for,exchange,exchange,list,apply,assertion,on,mock,endpoint,this,index,exchange,expects,clause,return,clause
MockEndpoint -> public AssertionClause allMessages();1550749310;Adds an assertion to all the received messages__@return the assertion clause;public AssertionClause allMessages() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                List<Exchange> list = getReceivedExchanges()__                int index = 0__                for (Exchange exchange : list) {_                    applyAssertionOn(MockEndpoint.this, index++, exchange)__                }_            }_        }__        expects(clause)__        return clause__    };adds,an,assertion,to,all,the,received,messages,return,the,assertion,clause;public,assertion,clause,all,messages,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,list,exchange,list,get,received,exchanges,int,index,0,for,exchange,exchange,list,apply,assertion,on,mock,endpoint,this,index,exchange,expects,clause,return,clause
MockEndpoint -> public void expectedMessagesMatches(Predicate... predicates);1549264559;Sets an expectation that the given predicates matches the received messages by this endpoint;public void expectedMessagesMatches(Predicate... predicates) {_        for (int i = 0_ i < predicates.length_ i++) {_            final int messageIndex = i__            final Predicate predicate = predicates[i]__            final AssertionClause clause = new AssertionClause(this) {_                public void run() {_                    addPredicate(predicate)__                    applyAssertionOn(MockEndpoint.this, messageIndex, assertExchangeReceived(messageIndex))__                }_            }__            expects(clause)__        }_    };sets,an,expectation,that,the,given,predicates,matches,the,received,messages,by,this,endpoint;public,void,expected,messages,matches,predicate,predicates,for,int,i,0,i,predicates,length,i,final,int,message,index,i,final,predicate,predicate,predicates,i,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,add,predicate,predicate,apply,assertion,on,mock,endpoint,this,message,index,assert,exchange,received,message,index,expects,clause
MockEndpoint -> public void expectedMessagesMatches(Predicate... predicates);1549433221;Sets an expectation that the given predicates matches the received messages by this endpoint;public void expectedMessagesMatches(Predicate... predicates) {_        for (int i = 0_ i < predicates.length_ i++) {_            final int messageIndex = i__            final Predicate predicate = predicates[i]__            final AssertionClause clause = new AssertionClause(this) {_                public void run() {_                    addPredicate(predicate)__                    applyAssertionOn(MockEndpoint.this, messageIndex, assertExchangeReceived(messageIndex))__                }_            }__            expects(clause)__        }_    };sets,an,expectation,that,the,given,predicates,matches,the,received,messages,by,this,endpoint;public,void,expected,messages,matches,predicate,predicates,for,int,i,0,i,predicates,length,i,final,int,message,index,i,final,predicate,predicate,predicates,i,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,add,predicate,predicate,apply,assertion,on,mock,endpoint,this,message,index,assert,exchange,received,message,index,expects,clause
MockEndpoint -> public void expectedMessagesMatches(Predicate... predicates);1550749310;Sets an expectation that the given predicates matches the received messages by this endpoint;public void expectedMessagesMatches(Predicate... predicates) {_        for (int i = 0_ i < predicates.length_ i++) {_            final int messageIndex = i__            final Predicate predicate = predicates[i]__            final AssertionClause clause = new AssertionClause(this) {_                public void run() {_                    addPredicate(predicate)__                    applyAssertionOn(MockEndpoint.this, messageIndex, assertExchangeReceived(messageIndex))__                }_            }__            expects(clause)__        }_    };sets,an,expectation,that,the,given,predicates,matches,the,received,messages,by,this,endpoint;public,void,expected,messages,matches,predicate,predicates,for,int,i,0,i,predicates,length,i,final,int,message,index,i,final,predicate,predicate,predicates,i,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,add,predicate,predicate,apply,assertion,on,mock,endpoint,this,message,index,assert,exchange,received,message,index,expects,clause
MockEndpoint -> public void expectedPropertyValuesReceivedInAnyOrder(String name, Object... values);1549264559;Adds an expectation that the given property values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedPropertyValuesReceivedInAnyOrder(String name, Object... values) {_        List<Object> valueList = new ArrayList<>()__        valueList.addAll(Arrays.asList(values))__        expectedPropertyValuesReceivedInAnyOrder(name, valueList)__    };adds,an,expectation,that,the,given,property,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,property,values,received,in,any,order,string,name,object,values,list,object,value,list,new,array,list,value,list,add,all,arrays,as,list,values,expected,property,values,received,in,any,order,name,value,list
MockEndpoint -> public void expectedPropertyValuesReceivedInAnyOrder(String name, Object... values);1549433221;Adds an expectation that the given property values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedPropertyValuesReceivedInAnyOrder(String name, Object... values) {_        List<Object> valueList = new ArrayList<>()__        valueList.addAll(Arrays.asList(values))__        expectedPropertyValuesReceivedInAnyOrder(name, valueList)__    };adds,an,expectation,that,the,given,property,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,property,values,received,in,any,order,string,name,object,values,list,object,value,list,new,array,list,value,list,add,all,arrays,as,list,values,expected,property,values,received,in,any,order,name,value,list
MockEndpoint -> public void expectedPropertyValuesReceivedInAnyOrder(String name, Object... values);1550749310;Adds an expectation that the given property values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedPropertyValuesReceivedInAnyOrder(String name, Object... values) {_        List<Object> valueList = new ArrayList<>()__        valueList.addAll(Arrays.asList(values))__        expectedPropertyValuesReceivedInAnyOrder(name, valueList)__    };adds,an,expectation,that,the,given,property,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,property,values,received,in,any,order,string,name,object,values,list,object,value,list,new,array,list,value,list,add,all,arrays,as,list,values,expected,property,values,received,in,any,order,name,value,list
MockEndpoint -> public AssertionClause expectsAscending();1549264559;Adds an expectation that messages received should have ascending values_of the given expression such as a user generated counter value;public AssertionClause expectsAscending() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertMessagesAscending(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,messages,received,should,have,ascending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,assertion,clause,expects,ascending,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,messages,ascending,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectsAscending();1549433221;Adds an expectation that messages received should have ascending values_of the given expression such as a user generated counter value;public AssertionClause expectsAscending() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertMessagesAscending(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,messages,received,should,have,ascending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,assertion,clause,expects,ascending,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,messages,ascending,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectsAscending();1550749310;Adds an expectation that messages received should have ascending values_of the given expression such as a user generated counter value;public AssertionClause expectsAscending() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertMessagesAscending(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,messages,received,should,have,ascending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,assertion,clause,expects,ascending,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,messages,ascending,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public void whenAnyExchangeReceived(Processor processor);1549264559;Set the processor that will be invoked when the some message_is received.__This processor could be overwritten by_{@link #whenExchangeReceived(int, Processor)} method.;public void whenAnyExchangeReceived(Processor processor) {_        this.defaultProcessor = processor__    };set,the,processor,that,will,be,invoked,when,the,some,message,is,received,this,processor,could,be,overwritten,by,link,when,exchange,received,int,processor,method;public,void,when,any,exchange,received,processor,processor,this,default,processor,processor
MockEndpoint -> public void whenAnyExchangeReceived(Processor processor);1549433221;Set the processor that will be invoked when the some message_is received.__This processor could be overwritten by_{@link #whenExchangeReceived(int, Processor)} method.;public void whenAnyExchangeReceived(Processor processor) {_        this.defaultProcessor = processor__    };set,the,processor,that,will,be,invoked,when,the,some,message,is,received,this,processor,could,be,overwritten,by,link,when,exchange,received,int,processor,method;public,void,when,any,exchange,received,processor,processor,this,default,processor,processor
MockEndpoint -> public void whenAnyExchangeReceived(Processor processor);1550749310;Set the processor that will be invoked when the some message_is received.__This processor could be overwritten by_{@link #whenExchangeReceived(int, Processor)} method.;public void whenAnyExchangeReceived(Processor processor) {_        this.defaultProcessor = processor__    };set,the,processor,that,will,be,invoked,when,the,some,message,is,received,this,processor,could,be,overwritten,by,link,when,exchange,received,int,processor,method;public,void,when,any,exchange,received,processor,processor,this,default,processor,processor
MockEndpoint -> public AssertionClause expectedBodyReceived();1549264559;Adds an expectation that the given body value are received by this endpoint;public AssertionClause expectedBodyReceived() {_        expectedMessageCount(1)__        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                Exchange exchange = getReceivedExchange(0)__                assertTrue("No exchange received for counter: " + 0, exchange != null)___                Object actualBody = exchange.getIn().getBody()__                Expression exp = createExpression(getCamelContext())__                Object expectedBody = exp.evaluate(exchange, Object.class)___                assertEquals("Body of message: " + 0, expectedBody, actualBody)__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,the,given,body,value,are,received,by,this,endpoint;public,assertion,clause,expected,body,received,expected,message,count,1,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,exchange,exchange,get,received,exchange,0,assert,true,no,exchange,received,for,counter,0,exchange,null,object,actual,body,exchange,get,in,get,body,expression,exp,create,expression,get,camel,context,object,expected,body,exp,evaluate,exchange,object,class,assert,equals,body,of,message,0,expected,body,actual,body,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectedBodyReceived();1549433221;Adds an expectation that the given body value are received by this endpoint;public AssertionClause expectedBodyReceived() {_        expectedMessageCount(1)__        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                Exchange exchange = getReceivedExchange(0)__                assertTrue("No exchange received for counter: " + 0, exchange != null)___                Object actualBody = exchange.getIn().getBody()__                Expression exp = createExpression(getCamelContext())__                Object expectedBody = exp.evaluate(exchange, Object.class)___                assertEquals("Body of message: " + 0, expectedBody, actualBody)__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,the,given,body,value,are,received,by,this,endpoint;public,assertion,clause,expected,body,received,expected,message,count,1,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,exchange,exchange,get,received,exchange,0,assert,true,no,exchange,received,for,counter,0,exchange,null,object,actual,body,exchange,get,in,get,body,expression,exp,create,expression,get,camel,context,object,expected,body,exp,evaluate,exchange,object,class,assert,equals,body,of,message,0,expected,body,actual,body,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectedBodyReceived();1550749310;Adds an expectation that the given body value are received by this endpoint;public AssertionClause expectedBodyReceived() {_        expectedMessageCount(1)__        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                Exchange exchange = getReceivedExchange(0)__                assertTrue("No exchange received for counter: " + 0, exchange != null)___                Object actualBody = exchange.getIn().getBody()__                Expression exp = createExpression(getCamelContext())__                Object expectedBody = exp.evaluate(exchange, Object.class)___                assertEquals("Body of message: " + 0, expectedBody, actualBody)__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,the,given,body,value,are,received,by,this,endpoint;public,assertion,clause,expected,body,received,expected,message,count,1,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,exchange,exchange,get,received,exchange,0,assert,true,no,exchange,received,for,counter,0,exchange,null,object,actual,body,exchange,get,in,get,body,expression,exp,create,expression,get,camel,context,object,expected,body,exp,evaluate,exchange,object,class,assert,equals,body,of,message,0,expected,body,actual,body,expects,clause,return,clause
MockEndpoint -> public void setMinimumExpectedMessageCount(int expectedCount);1549264559;Specifies the minimum number of expected message exchanges that should be_received by this endpoint__@param expectedCount the number of message exchanges that should be_expected by this endpoint;public void setMinimumExpectedMessageCount(int expectedCount) {_        this.expectedMinimumCount = expectedCount__        if (expectedCount <= 0) {_            latch = null__        } else {_            latch = new CountDownLatch(expectedMinimumCount)__        }_    };specifies,the,minimum,number,of,expected,message,exchanges,that,should,be,received,by,this,endpoint,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint;public,void,set,minimum,expected,message,count,int,expected,count,this,expected,minimum,count,expected,count,if,expected,count,0,latch,null,else,latch,new,count,down,latch,expected,minimum,count
MockEndpoint -> public void setMinimumExpectedMessageCount(int expectedCount);1549433221;Specifies the minimum number of expected message exchanges that should be_received by this endpoint__@param expectedCount the number of message exchanges that should be_expected by this endpoint;public void setMinimumExpectedMessageCount(int expectedCount) {_        this.expectedMinimumCount = expectedCount__        if (expectedCount <= 0) {_            latch = null__        } else {_            latch = new CountDownLatch(expectedMinimumCount)__        }_    };specifies,the,minimum,number,of,expected,message,exchanges,that,should,be,received,by,this,endpoint,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint;public,void,set,minimum,expected,message,count,int,expected,count,this,expected,minimum,count,expected,count,if,expected,count,0,latch,null,else,latch,new,count,down,latch,expected,minimum,count
MockEndpoint -> public void setMinimumExpectedMessageCount(int expectedCount);1550749310;Specifies the minimum number of expected message exchanges that should be_received by this endpoint__@param expectedCount the number of message exchanges that should be_expected by this endpoint;public void setMinimumExpectedMessageCount(int expectedCount) {_        this.expectedMinimumCount = expectedCount__        if (expectedCount <= 0) {_            latch = null__        } else {_            latch = new CountDownLatch(expectedMinimumCount)__        }_    };specifies,the,minimum,number,of,expected,message,exchanges,that,should,be,received,by,this,endpoint,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint;public,void,set,minimum,expected,message,count,int,expected,count,this,expected,minimum,count,expected,count,if,expected,count,0,latch,null,else,latch,new,count,down,latch,expected,minimum,count
MockEndpoint -> public void setAssertPeriod(long period);1549264559;Sets a grace period after which the mock endpoint will re-assert_to ensure the preliminary assertion is still valid._<p/>_This is used for example to assert that <b>exactly</b> a number of messages_arrives. For example if {@link #expectedMessageCount(int)} was set to 5, then_the assertion is satisfied when 5 or more message arrives. To ensure that_exactly 5 messages arrives, then you would need to wait a little period_to ensure no further message arrives. This is what you can use this_{@link #setAssertPeriod(long)} method for._<p/>_By default this period is disabled.__@param period grace period in millis;public void setAssertPeriod(long period) {_        this.assertPeriod = period__    };sets,a,grace,period,after,which,the,mock,endpoint,will,re,assert,to,ensure,the,preliminary,assertion,is,still,valid,p,this,is,used,for,example,to,assert,that,b,exactly,b,a,number,of,messages,arrives,for,example,if,link,expected,message,count,int,was,set,to,5,then,the,assertion,is,satisfied,when,5,or,more,message,arrives,to,ensure,that,exactly,5,messages,arrives,then,you,would,need,to,wait,a,little,period,to,ensure,no,further,message,arrives,this,is,what,you,can,use,this,link,set,assert,period,long,method,for,p,by,default,this,period,is,disabled,param,period,grace,period,in,millis;public,void,set,assert,period,long,period,this,assert,period,period
MockEndpoint -> public void setAssertPeriod(long period);1549433221;Sets a grace period after which the mock endpoint will re-assert_to ensure the preliminary assertion is still valid._<p/>_This is used for example to assert that <b>exactly</b> a number of messages_arrives. For example if {@link #expectedMessageCount(int)} was set to 5, then_the assertion is satisfied when 5 or more message arrives. To ensure that_exactly 5 messages arrives, then you would need to wait a little period_to ensure no further message arrives. This is what you can use this_method for._<p/>_By default this period is disabled.__@param period grace period in millis;public void setAssertPeriod(long period) {_        this.assertPeriod = period__    };sets,a,grace,period,after,which,the,mock,endpoint,will,re,assert,to,ensure,the,preliminary,assertion,is,still,valid,p,this,is,used,for,example,to,assert,that,b,exactly,b,a,number,of,messages,arrives,for,example,if,link,expected,message,count,int,was,set,to,5,then,the,assertion,is,satisfied,when,5,or,more,message,arrives,to,ensure,that,exactly,5,messages,arrives,then,you,would,need,to,wait,a,little,period,to,ensure,no,further,message,arrives,this,is,what,you,can,use,this,method,for,p,by,default,this,period,is,disabled,param,period,grace,period,in,millis;public,void,set,assert,period,long,period,this,assert,period,period
MockEndpoint -> public void setAssertPeriod(long period);1550749310;Sets a grace period after which the mock endpoint will re-assert_to ensure the preliminary assertion is still valid._<p/>_This is used for example to assert that <b>exactly</b> a number of messages_arrives. For example if {@link #expectedMessageCount(int)} was set to 5, then_the assertion is satisfied when 5 or more message arrives. To ensure that_exactly 5 messages arrives, then you would need to wait a little period_to ensure no further message arrives. This is what you can use this_method for._<p/>_By default this period is disabled.__@param period grace period in millis;public void setAssertPeriod(long period) {_        this.assertPeriod = period__    };sets,a,grace,period,after,which,the,mock,endpoint,will,re,assert,to,ensure,the,preliminary,assertion,is,still,valid,p,this,is,used,for,example,to,assert,that,b,exactly,b,a,number,of,messages,arrives,for,example,if,link,expected,message,count,int,was,set,to,5,then,the,assertion,is,satisfied,when,5,or,more,message,arrives,to,ensure,that,exactly,5,messages,arrives,then,you,would,need,to,wait,a,little,period,to,ensure,no,further,message,arrives,this,is,what,you,can,use,this,method,for,p,by,default,this,period,is,disabled,param,period,grace,period,in,millis;public,void,set,assert,period,long,period,this,assert,period,period
MockEndpoint -> public void expectedBodiesReceivedInAnyOrder(final List<?> bodies);1549264559;Adds an expectation that the given body values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceivedInAnyOrder(final List<?> bodies) {_        expectedMessageCount(bodies.size())__        this.expectedBodyValues = bodies__        this.actualBodyValues = new ArrayList<>()___        expects(new Runnable() {_            public void run() {_                List<Object> actualBodyValuesSet = new ArrayList<>(actualBodyValues)__                for (int i = 0_ i < expectedBodyValues.size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    assertTrue("No exchange received for counter: " + i, exchange != null)___                    Object expectedBody = expectedBodyValues.get(i)__                    assertTrue("Message with body " + expectedBody + " was expected but not found in " + actualBodyValuesSet, actualBodyValuesSet.remove(expectedBody))__                }_            }_        })__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,in,any,order,final,list,bodies,expected,message,count,bodies,size,this,expected,body,values,bodies,this,actual,body,values,new,array,list,expects,new,runnable,public,void,run,list,object,actual,body,values,set,new,array,list,actual,body,values,for,int,i,0,i,expected,body,values,size,i,exchange,exchange,get,received,exchange,i,assert,true,no,exchange,received,for,counter,i,exchange,null,object,expected,body,expected,body,values,get,i,assert,true,message,with,body,expected,body,was,expected,but,not,found,in,actual,body,values,set,actual,body,values,set,remove,expected,body
MockEndpoint -> public void expectedBodiesReceivedInAnyOrder(final List<?> bodies);1549433221;Adds an expectation that the given body values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceivedInAnyOrder(final List<?> bodies) {_        expectedMessageCount(bodies.size())__        this.expectedBodyValues = bodies__        this.actualBodyValues = new ArrayList<>()___        expects(new Runnable() {_            public void run() {_                List<Object> actualBodyValuesSet = new ArrayList<>(actualBodyValues)__                for (int i = 0_ i < expectedBodyValues.size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    assertTrue("No exchange received for counter: " + i, exchange != null)___                    Object expectedBody = expectedBodyValues.get(i)__                    assertTrue("Message with body " + expectedBody + " was expected but not found in " + actualBodyValuesSet, actualBodyValuesSet.remove(expectedBody))__                }_            }_        })__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,in,any,order,final,list,bodies,expected,message,count,bodies,size,this,expected,body,values,bodies,this,actual,body,values,new,array,list,expects,new,runnable,public,void,run,list,object,actual,body,values,set,new,array,list,actual,body,values,for,int,i,0,i,expected,body,values,size,i,exchange,exchange,get,received,exchange,i,assert,true,no,exchange,received,for,counter,i,exchange,null,object,expected,body,expected,body,values,get,i,assert,true,message,with,body,expected,body,was,expected,but,not,found,in,actual,body,values,set,actual,body,values,set,remove,expected,body
MockEndpoint -> public void expectedBodiesReceivedInAnyOrder(final List<?> bodies);1550749310;Adds an expectation that the given body values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceivedInAnyOrder(final List<?> bodies) {_        expectedMessageCount(bodies.size())__        this.expectedBodyValues = bodies__        this.actualBodyValues = new ArrayList<>()___        expects(new Runnable() {_            public void run() {_                List<Object> actualBodyValuesSet = new ArrayList<>(actualBodyValues)__                for (int i = 0_ i < expectedBodyValues.size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    assertTrue("No exchange received for counter: " + i, exchange != null)___                    Object expectedBody = expectedBodyValues.get(i)__                    assertTrue("Message with body " + expectedBody + " was expected but not found in " + actualBodyValuesSet, actualBodyValuesSet.remove(expectedBody))__                }_            }_        })__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,in,any,order,final,list,bodies,expected,message,count,bodies,size,this,expected,body,values,bodies,this,actual,body,values,new,array,list,expects,new,runnable,public,void,run,list,object,actual,body,values,set,new,array,list,actual,body,values,for,int,i,0,i,expected,body,values,size,i,exchange,exchange,get,received,exchange,i,assert,true,no,exchange,received,for,counter,i,exchange,null,object,expected,body,expected,body,values,get,i,assert,true,message,with,body,expected,body,was,expected,but,not,found,in,actual,body,values,set,actual,body,values,set,remove,expected,body
MockEndpoint -> public void expectedMessageCount(int expectedCount);1549264559;Specifies the expected number of message exchanges that should be_received by this endpoint__If you want to assert that <b>exactly</b> n messages arrives to this mock_endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.__@param expectedCount the number of message exchanges that should be_expected by this endpoint_@see #setAssertPeriod(long);public void expectedMessageCount(int expectedCount) {_        setExpectedMessageCount(expectedCount)__    };specifies,the,expected,number,of,message,exchanges,that,should,be,received,by,this,endpoint,if,you,want,to,assert,that,b,exactly,b,n,messages,arrives,to,this,mock,endpoint,then,see,also,the,link,set,assert,period,long,method,for,further,details,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint,see,set,assert,period,long;public,void,expected,message,count,int,expected,count,set,expected,message,count,expected,count
MockEndpoint -> public void expectedMessageCount(int expectedCount);1549433221;Specifies the expected number of message exchanges that should be_received by this endpoint__If you want to assert that <b>exactly</b> n messages arrives to this mock_endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.__@param expectedCount the number of message exchanges that should be_expected by this endpoint_@see #setAssertPeriod(long);public void expectedMessageCount(int expectedCount) {_        setExpectedMessageCount(expectedCount)__    };specifies,the,expected,number,of,message,exchanges,that,should,be,received,by,this,endpoint,if,you,want,to,assert,that,b,exactly,b,n,messages,arrives,to,this,mock,endpoint,then,see,also,the,link,set,assert,period,long,method,for,further,details,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint,see,set,assert,period,long;public,void,expected,message,count,int,expected,count,set,expected,message,count,expected,count
MockEndpoint -> public void expectedMessageCount(int expectedCount);1550749310;Specifies the expected number of message exchanges that should be_received by this endpoint__If you want to assert that <b>exactly</b> n messages arrives to this mock_endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.__@param expectedCount the number of message exchanges that should be_expected by this endpoint_@see #setAssertPeriod(long);public void expectedMessageCount(int expectedCount) {_        setExpectedMessageCount(expectedCount)__    };specifies,the,expected,number,of,message,exchanges,that,should,be,received,by,this,endpoint,if,you,want,to,assert,that,b,exactly,b,n,messages,arrives,to,this,mock,endpoint,then,see,also,the,link,set,assert,period,long,method,for,further,details,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint,see,set,assert,period,long;public,void,expected,message,count,int,expected,count,set,expected,message,count,expected,count
MockEndpoint -> public void expectedFileExists(final String name, final String content);1549264559;Adds an expectation that a file exists with the given name_<p/>_Will wait at most 5 seconds while checking for the existence of the file.__@param name name of file, will cater for / and \ on different OS platforms_@param content content of file to compare, can be <tt>null</tt> to not compare content;public void expectedFileExists(final String name, final String content) {_        final File file = new File(FileUtil.normalizePath(name))___        expects(new Runnable() {_            public void run() {_                _                final long timeout = System.currentTimeMillis() + 5000___                boolean stop = false__                while (!stop && !file.exists()) {_                    try {_                        Thread.sleep(50)__                    } catch (InterruptedException e) {_                        _                    }_                    stop = System.currentTimeMillis() > timeout__                }__                assertTrue("The file should exists: " + name, file.exists())___                if (content != null) {_                    String body = getCamelContext().getTypeConverter().convertTo(String.class, file)__                    assertEquals("Content of file: " + name, content, body)__                }_            }_        })__    };adds,an,expectation,that,a,file,exists,with,the,given,name,p,will,wait,at,most,5,seconds,while,checking,for,the,existence,of,the,file,param,name,name,of,file,will,cater,for,and,on,different,os,platforms,param,content,content,of,file,to,compare,can,be,tt,null,tt,to,not,compare,content;public,void,expected,file,exists,final,string,name,final,string,content,final,file,file,new,file,file,util,normalize,path,name,expects,new,runnable,public,void,run,final,long,timeout,system,current,time,millis,5000,boolean,stop,false,while,stop,file,exists,try,thread,sleep,50,catch,interrupted,exception,e,stop,system,current,time,millis,timeout,assert,true,the,file,should,exists,name,file,exists,if,content,null,string,body,get,camel,context,get,type,converter,convert,to,string,class,file,assert,equals,content,of,file,name,content,body
MockEndpoint -> public void expectedFileExists(final String name, final String content);1549433221;Adds an expectation that a file exists with the given name_<p/>_Will wait at most 5 seconds while checking for the existence of the file.__@param name name of file, will cater for / and \ on different OS platforms_@param content content of file to compare, can be <tt>null</tt> to not compare content;public void expectedFileExists(final String name, final String content) {_        final File file = new File(FileUtil.normalizePath(name))___        expects(new Runnable() {_            public void run() {_                _                final long timeout = System.currentTimeMillis() + 5000___                boolean stop = false__                while (!stop && !file.exists()) {_                    try {_                        Thread.sleep(50)__                    } catch (InterruptedException e) {_                        _                    }_                    stop = System.currentTimeMillis() > timeout__                }__                assertTrue("The file should exists: " + name, file.exists())___                if (content != null) {_                    String body = getCamelContext().getTypeConverter().convertTo(String.class, file)__                    assertEquals("Content of file: " + name, content, body)__                }_            }_        })__    };adds,an,expectation,that,a,file,exists,with,the,given,name,p,will,wait,at,most,5,seconds,while,checking,for,the,existence,of,the,file,param,name,name,of,file,will,cater,for,and,on,different,os,platforms,param,content,content,of,file,to,compare,can,be,tt,null,tt,to,not,compare,content;public,void,expected,file,exists,final,string,name,final,string,content,final,file,file,new,file,file,util,normalize,path,name,expects,new,runnable,public,void,run,final,long,timeout,system,current,time,millis,5000,boolean,stop,false,while,stop,file,exists,try,thread,sleep,50,catch,interrupted,exception,e,stop,system,current,time,millis,timeout,assert,true,the,file,should,exists,name,file,exists,if,content,null,string,body,get,camel,context,get,type,converter,convert,to,string,class,file,assert,equals,content,of,file,name,content,body
MockEndpoint -> public void expectedFileExists(final String name, final String content);1550749310;Adds an expectation that a file exists with the given name_<p/>_Will wait at most 5 seconds while checking for the existence of the file.__@param name name of file, will cater for / and \ on different OS platforms_@param content content of file to compare, can be <tt>null</tt> to not compare content;public void expectedFileExists(final String name, final String content) {_        final File file = new File(FileUtil.normalizePath(name))___        expects(new Runnable() {_            public void run() {_                _                final long timeout = System.currentTimeMillis() + 5000___                boolean stop = false__                while (!stop && !file.exists()) {_                    try {_                        Thread.sleep(50)__                    } catch (InterruptedException e) {_                        _                    }_                    stop = System.currentTimeMillis() > timeout__                }__                assertTrue("The file should exists: " + name, file.exists())___                if (content != null) {_                    String body = getCamelContext().getTypeConverter().convertTo(String.class, file)__                    assertEquals("Content of file: " + name, content, body)__                }_            }_        })__    };adds,an,expectation,that,a,file,exists,with,the,given,name,p,will,wait,at,most,5,seconds,while,checking,for,the,existence,of,the,file,param,name,name,of,file,will,cater,for,and,on,different,os,platforms,param,content,content,of,file,to,compare,can,be,tt,null,tt,to,not,compare,content;public,void,expected,file,exists,final,string,name,final,string,content,final,file,file,new,file,file,util,normalize,path,name,expects,new,runnable,public,void,run,final,long,timeout,system,current,time,millis,5000,boolean,stop,false,while,stop,file,exists,try,thread,sleep,50,catch,interrupted,exception,e,stop,system,current,time,millis,timeout,assert,true,the,file,should,exists,name,file,exists,if,content,null,string,body,get,camel,context,get,type,converter,convert,to,string,class,file,assert,equals,content,of,file,name,content,body
MockEndpoint -> public void expectedHeaderValuesReceivedInAnyOrder(String name, Object... values);1549264559;Adds an expectation that the given header values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderValuesReceivedInAnyOrder(String name, Object... values) {_        List<Object> valueList = new ArrayList<>()__        valueList.addAll(Arrays.asList(values))__        expectedHeaderValuesReceivedInAnyOrder(name, valueList)__    };adds,an,expectation,that,the,given,header,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,values,received,in,any,order,string,name,object,values,list,object,value,list,new,array,list,value,list,add,all,arrays,as,list,values,expected,header,values,received,in,any,order,name,value,list
MockEndpoint -> public void expectedHeaderValuesReceivedInAnyOrder(String name, Object... values);1549433221;Adds an expectation that the given header values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderValuesReceivedInAnyOrder(String name, Object... values) {_        List<Object> valueList = new ArrayList<>()__        valueList.addAll(Arrays.asList(values))__        expectedHeaderValuesReceivedInAnyOrder(name, valueList)__    };adds,an,expectation,that,the,given,header,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,values,received,in,any,order,string,name,object,values,list,object,value,list,new,array,list,value,list,add,all,arrays,as,list,values,expected,header,values,received,in,any,order,name,value,list
MockEndpoint -> public void expectedHeaderValuesReceivedInAnyOrder(String name, Object... values);1550749310;Adds an expectation that the given header values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderValuesReceivedInAnyOrder(String name, Object... values) {_        List<Object> valueList = new ArrayList<>()__        valueList.addAll(Arrays.asList(values))__        expectedHeaderValuesReceivedInAnyOrder(name, valueList)__    };adds,an,expectation,that,the,given,header,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,values,received,in,any,order,string,name,object,values,list,object,value,list,new,array,list,value,list,add,all,arrays,as,list,values,expected,header,values,received,in,any,order,name,value,list
MockEndpoint -> public void setSleepForEmptyTest(long sleepForEmptyTest);1549264559;Allows a sleep to be specified to wait to check that this endpoint really_is empty when {@link #expectedMessageCount(int)} is called with zero__@param sleepForEmptyTest the milliseconds to sleep for to determine that_this endpoint really is empty;public void setSleepForEmptyTest(long sleepForEmptyTest) {_        this.sleepForEmptyTest = sleepForEmptyTest__    };allows,a,sleep,to,be,specified,to,wait,to,check,that,this,endpoint,really,is,empty,when,link,expected,message,count,int,is,called,with,zero,param,sleep,for,empty,test,the,milliseconds,to,sleep,for,to,determine,that,this,endpoint,really,is,empty;public,void,set,sleep,for,empty,test,long,sleep,for,empty,test,this,sleep,for,empty,test,sleep,for,empty,test
MockEndpoint -> public void setSleepForEmptyTest(long sleepForEmptyTest);1549433221;Allows a sleep to be specified to wait to check that this endpoint really_is empty when {@link #expectedMessageCount(int)} is called with zero__@param sleepForEmptyTest the milliseconds to sleep for to determine that_this endpoint really is empty;public void setSleepForEmptyTest(long sleepForEmptyTest) {_        this.sleepForEmptyTest = sleepForEmptyTest__    };allows,a,sleep,to,be,specified,to,wait,to,check,that,this,endpoint,really,is,empty,when,link,expected,message,count,int,is,called,with,zero,param,sleep,for,empty,test,the,milliseconds,to,sleep,for,to,determine,that,this,endpoint,really,is,empty;public,void,set,sleep,for,empty,test,long,sleep,for,empty,test,this,sleep,for,empty,test,sleep,for,empty,test
MockEndpoint -> public void setSleepForEmptyTest(long sleepForEmptyTest);1550749310;Allows a sleep to be specified to wait to check that this endpoint really_is empty when {@link #expectedMessageCount(int)} is called with zero__@param sleepForEmptyTest the milliseconds to sleep for to determine that_this endpoint really is empty;public void setSleepForEmptyTest(long sleepForEmptyTest) {_        this.sleepForEmptyTest = sleepForEmptyTest__    };allows,a,sleep,to,be,specified,to,wait,to,check,that,this,endpoint,really,is,empty,when,link,expected,message,count,int,is,called,with,zero,param,sleep,for,empty,test,the,milliseconds,to,sleep,for,to,determine,that,this,endpoint,really,is,empty;public,void,set,sleep,for,empty,test,long,sleep,for,empty,test,this,sleep,for,empty,test,sleep,for,empty,test
MockEndpoint -> public void setRetainFirst(int retainFirst);1549264559;Specifies to only retain the first n'th number of received {@link Exchange}s._<p/>_This is used when testing with big data, to reduce memory consumption by not storing_copies of every {@link Exchange} this mock endpoint receives._<p/>_<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}_will still return the actual number of received {@link Exchange}s. For example_if we have received 5000 {@link Exchange}s, and have configured to only retain the first_10 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return <tt>5000</tt>_but there is only the first 10 {@link Exchange}s in the {@link #getExchanges()} and_{@link #getReceivedExchanges()} methods._<p/>_When using this method, then some of the other expectation methods is not supported,_for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first_number of bodies received._<p/>_You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,_to limit both the first and last received.__@param retainFirst  to limit and only keep the first n'th received {@link Exchange}s, use_<tt>0</tt> to not retain any messages, or <tt>-1</tt> to retain all._@see #setRetainLast(int);public void setRetainFirst(int retainFirst) {_        this.retainFirst = retainFirst__    };specifies,to,only,retain,the,first,n,th,number,of,received,link,exchange,s,p,this,is,used,when,testing,with,big,data,to,reduce,memory,consumption,by,not,storing,copies,of,every,link,exchange,this,mock,endpoint,receives,p,b,important,b,when,using,this,limitation,then,the,link,get,received,counter,will,still,return,the,actual,number,of,received,link,exchange,s,for,example,if,we,have,received,5000,link,exchange,s,and,have,configured,to,only,retain,the,first,10,link,exchange,s,then,the,link,get,received,counter,will,still,return,tt,5000,tt,but,there,is,only,the,first,10,link,exchange,s,in,the,link,get,exchanges,and,link,get,received,exchanges,methods,p,when,using,this,method,then,some,of,the,other,expectation,methods,is,not,supported,for,example,the,link,expected,bodies,received,object,sets,a,expectation,on,the,first,number,of,bodies,received,p,you,can,configure,both,link,set,retain,first,int,and,link,set,retain,last,int,methods,to,limit,both,the,first,and,last,received,param,retain,first,to,limit,and,only,keep,the,first,n,th,received,link,exchange,s,use,tt,0,tt,to,not,retain,any,messages,or,tt,1,tt,to,retain,all,see,set,retain,last,int;public,void,set,retain,first,int,retain,first,this,retain,first,retain,first
MockEndpoint -> public void setRetainFirst(int retainFirst);1549433221;Specifies to only retain the first n'th number of received {@link Exchange}s._<p/>_This is used when testing with big data, to reduce memory consumption by not storing_copies of every {@link Exchange} this mock endpoint receives._<p/>_<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}_will still return the actual number of received {@link Exchange}s. For example_if we have received 5000 {@link Exchange}s, and have configured to only retain the first_10 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return <tt>5000</tt>_but there is only the first 10 {@link Exchange}s in the {@link #getExchanges()} and_{@link #getReceivedExchanges()} methods._<p/>_When using this method, then some of the other expectation methods is not supported,_for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first_number of bodies received._<p/>_You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,_to limit both the first and last received.__@param retainFirst  to limit and only keep the first n'th received {@link Exchange}s, use_<tt>0</tt> to not retain any messages, or <tt>-1</tt> to retain all._@see #setRetainLast(int);public void setRetainFirst(int retainFirst) {_        this.retainFirst = retainFirst__    };specifies,to,only,retain,the,first,n,th,number,of,received,link,exchange,s,p,this,is,used,when,testing,with,big,data,to,reduce,memory,consumption,by,not,storing,copies,of,every,link,exchange,this,mock,endpoint,receives,p,b,important,b,when,using,this,limitation,then,the,link,get,received,counter,will,still,return,the,actual,number,of,received,link,exchange,s,for,example,if,we,have,received,5000,link,exchange,s,and,have,configured,to,only,retain,the,first,10,link,exchange,s,then,the,link,get,received,counter,will,still,return,tt,5000,tt,but,there,is,only,the,first,10,link,exchange,s,in,the,link,get,exchanges,and,link,get,received,exchanges,methods,p,when,using,this,method,then,some,of,the,other,expectation,methods,is,not,supported,for,example,the,link,expected,bodies,received,object,sets,a,expectation,on,the,first,number,of,bodies,received,p,you,can,configure,both,link,set,retain,first,int,and,link,set,retain,last,int,methods,to,limit,both,the,first,and,last,received,param,retain,first,to,limit,and,only,keep,the,first,n,th,received,link,exchange,s,use,tt,0,tt,to,not,retain,any,messages,or,tt,1,tt,to,retain,all,see,set,retain,last,int;public,void,set,retain,first,int,retain,first,this,retain,first,retain,first
MockEndpoint -> public void setRetainFirst(int retainFirst);1550749310;Specifies to only retain the first n'th number of received {@link Exchange}s._<p/>_This is used when testing with big data, to reduce memory consumption by not storing_copies of every {@link Exchange} this mock endpoint receives._<p/>_<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}_will still return the actual number of received {@link Exchange}s. For example_if we have received 5000 {@link Exchange}s, and have configured to only retain the first_10 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return <tt>5000</tt>_but there is only the first 10 {@link Exchange}s in the {@link #getExchanges()} and_{@link #getReceivedExchanges()} methods._<p/>_When using this method, then some of the other expectation methods is not supported,_for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first_number of bodies received._<p/>_You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,_to limit both the first and last received.__@param retainFirst  to limit and only keep the first n'th received {@link Exchange}s, use_<tt>0</tt> to not retain any messages, or <tt>-1</tt> to retain all._@see #setRetainLast(int);public void setRetainFirst(int retainFirst) {_        this.retainFirst = retainFirst__    };specifies,to,only,retain,the,first,n,th,number,of,received,link,exchange,s,p,this,is,used,when,testing,with,big,data,to,reduce,memory,consumption,by,not,storing,copies,of,every,link,exchange,this,mock,endpoint,receives,p,b,important,b,when,using,this,limitation,then,the,link,get,received,counter,will,still,return,the,actual,number,of,received,link,exchange,s,for,example,if,we,have,received,5000,link,exchange,s,and,have,configured,to,only,retain,the,first,10,link,exchange,s,then,the,link,get,received,counter,will,still,return,tt,5000,tt,but,there,is,only,the,first,10,link,exchange,s,in,the,link,get,exchanges,and,link,get,received,exchanges,methods,p,when,using,this,method,then,some,of,the,other,expectation,methods,is,not,supported,for,example,the,link,expected,bodies,received,object,sets,a,expectation,on,the,first,number,of,bodies,received,p,you,can,configure,both,link,set,retain,first,int,and,link,set,retain,last,int,methods,to,limit,both,the,first,and,last,received,param,retain,first,to,limit,and,only,keep,the,first,n,th,received,link,exchange,s,use,tt,0,tt,to,not,retain,any,messages,or,tt,1,tt,to,retain,all,see,set,retain,last,int;public,void,set,retain,first,int,retain,first,this,retain,first,retain,first
MockEndpoint -> public AssertionClause expectsDescending();1549264559;Adds an expectation that messages received should have descending values_of the given expression such as a user generated counter value;public AssertionClause expectsDescending() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertMessagesDescending(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,messages,received,should,have,descending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,assertion,clause,expects,descending,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,messages,descending,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectsDescending();1549433221;Adds an expectation that messages received should have descending values_of the given expression such as a user generated counter value;public AssertionClause expectsDescending() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertMessagesDescending(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,messages,received,should,have,descending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,assertion,clause,expects,descending,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,messages,descending,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectsDescending();1550749310;Adds an expectation that messages received should have descending values_of the given expression such as a user generated counter value;public AssertionClause expectsDescending() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertMessagesDescending(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,messages,received,should,have,descending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,assertion,clause,expects,descending,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,messages,descending,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public void assertIsNotSatisfied() throws InterruptedException;1549264559;Validates that the assertions fail on this endpoint;public void assertIsNotSatisfied() throws InterruptedException {_        boolean failed = false__        try {_            assertIsSatisfied()__            _            failed = true__        } catch (AssertionError e) {_            log.info("Caught expected failure: {}", e)__        }_        if (failed) {_            _            fail("Expected assertion failure but test succeeded!")__        }_    };validates,that,the,assertions,fail,on,this,endpoint;public,void,assert,is,not,satisfied,throws,interrupted,exception,boolean,failed,false,try,assert,is,satisfied,failed,true,catch,assertion,error,e,log,info,caught,expected,failure,e,if,failed,fail,expected,assertion,failure,but,test,succeeded
MockEndpoint -> public void assertIsNotSatisfied() throws InterruptedException;1549433221;Validates that the assertions fail on this endpoint;public void assertIsNotSatisfied() throws InterruptedException {_        boolean failed = false__        try {_            assertIsSatisfied()__            _            failed = true__        } catch (AssertionError e) {_            log.info("Caught expected failure: {}", e)__        }_        if (failed) {_            _            fail("Expected assertion failure but test succeeded!")__        }_    };validates,that,the,assertions,fail,on,this,endpoint;public,void,assert,is,not,satisfied,throws,interrupted,exception,boolean,failed,false,try,assert,is,satisfied,failed,true,catch,assertion,error,e,log,info,caught,expected,failure,e,if,failed,fail,expected,assertion,failure,but,test,succeeded
MockEndpoint -> public void assertIsNotSatisfied() throws InterruptedException;1550749310;Validates that the assertions fail on this endpoint;public void assertIsNotSatisfied() throws InterruptedException {_        boolean failed = false__        try {_            assertIsSatisfied()__            _            failed = true__        } catch (AssertionError e) {_            if (log.isDebugEnabled()) {_                _                log.debug("Caught expected failure: " + e.getMessage(), e)__            } else {_                log.info("Caught expected failure: " + e.getMessage())__            }_        }_        if (failed) {_            _            fail("Expected assertion failure but test succeeded!")__        }_    };validates,that,the,assertions,fail,on,this,endpoint;public,void,assert,is,not,satisfied,throws,interrupted,exception,boolean,failed,false,try,assert,is,satisfied,failed,true,catch,assertion,error,e,if,log,is,debug,enabled,log,debug,caught,expected,failure,e,get,message,e,else,log,info,caught,expected,failure,e,get,message,if,failed,fail,expected,assertion,failure,but,test,succeeded
MockEndpoint -> public void expectedPropertyReceived(final String name, final Object value);1549264559;Sets an expectation that the given property name & value are received by this endpoint_<p/>_You can set multiple expectations for different property names._If you set a value of <tt>null</tt> that means we accept either the property is absent, or its value is <tt>null</tt>;public void expectedPropertyReceived(final String name, final Object value) {_        if (expectedPropertyValues == null) {_            expectedPropertyValues = new HashMap<>()__        }_        expectedPropertyValues.put(name, value)___        expects(new Runnable() {_            public void run() {_                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    for (Map.Entry<String, Object> entry : expectedPropertyValues.entrySet()) {_                        String key = entry.getKey()__                        Object expectedValue = entry.getValue()___                        _                        if (expectedValue != null) {_                            assertTrue("Exchange " + i + " has no properties", !exchange.getProperties().isEmpty())__                            boolean hasKey = exchange.getProperties().containsKey(key)__                            assertTrue("No property with name " + key + " found for message: " + i, hasKey)__                        }__                        Object actualValue = exchange.getProperty(key)__                        actualValue = extractActualValue(exchange, actualValue, expectedValue)___                        assertEquals("Property with name " + key + " for message: " + i, expectedValue, actualValue)__                    }_                }_            }_        })__    };sets,an,expectation,that,the,given,property,name,value,are,received,by,this,endpoint,p,you,can,set,multiple,expectations,for,different,property,names,if,you,set,a,value,of,tt,null,tt,that,means,we,accept,either,the,property,is,absent,or,its,value,is,tt,null,tt;public,void,expected,property,received,final,string,name,final,object,value,if,expected,property,values,null,expected,property,values,new,hash,map,expected,property,values,put,name,value,expects,new,runnable,public,void,run,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,for,map,entry,string,object,entry,expected,property,values,entry,set,string,key,entry,get,key,object,expected,value,entry,get,value,if,expected,value,null,assert,true,exchange,i,has,no,properties,exchange,get,properties,is,empty,boolean,has,key,exchange,get,properties,contains,key,key,assert,true,no,property,with,name,key,found,for,message,i,has,key,object,actual,value,exchange,get,property,key,actual,value,extract,actual,value,exchange,actual,value,expected,value,assert,equals,property,with,name,key,for,message,i,expected,value,actual,value
MockEndpoint -> public void expectedPropertyReceived(final String name, final Object value);1549433221;Sets an expectation that the given property name & value are received by this endpoint_<p/>_You can set multiple expectations for different property names._If you set a value of <tt>null</tt> that means we accept either the property is absent, or its value is <tt>null</tt>;public void expectedPropertyReceived(final String name, final Object value) {_        if (expectedPropertyValues == null) {_            expectedPropertyValues = new HashMap<>()__        }_        expectedPropertyValues.put(name, value)___        expects(new Runnable() {_            public void run() {_                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    for (Map.Entry<String, Object> entry : expectedPropertyValues.entrySet()) {_                        String key = entry.getKey()__                        Object expectedValue = entry.getValue()___                        _                        if (expectedValue != null) {_                            assertTrue("Exchange " + i + " has no properties", !exchange.getProperties().isEmpty())__                            boolean hasKey = exchange.getProperties().containsKey(key)__                            assertTrue("No property with name " + key + " found for message: " + i, hasKey)__                        }__                        Object actualValue = exchange.getProperty(key)__                        actualValue = extractActualValue(exchange, actualValue, expectedValue)___                        assertEquals("Property with name " + key + " for message: " + i, expectedValue, actualValue)__                    }_                }_            }_        })__    };sets,an,expectation,that,the,given,property,name,value,are,received,by,this,endpoint,p,you,can,set,multiple,expectations,for,different,property,names,if,you,set,a,value,of,tt,null,tt,that,means,we,accept,either,the,property,is,absent,or,its,value,is,tt,null,tt;public,void,expected,property,received,final,string,name,final,object,value,if,expected,property,values,null,expected,property,values,new,hash,map,expected,property,values,put,name,value,expects,new,runnable,public,void,run,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,for,map,entry,string,object,entry,expected,property,values,entry,set,string,key,entry,get,key,object,expected,value,entry,get,value,if,expected,value,null,assert,true,exchange,i,has,no,properties,exchange,get,properties,is,empty,boolean,has,key,exchange,get,properties,contains,key,key,assert,true,no,property,with,name,key,found,for,message,i,has,key,object,actual,value,exchange,get,property,key,actual,value,extract,actual,value,exchange,actual,value,expected,value,assert,equals,property,with,name,key,for,message,i,expected,value,actual,value
MockEndpoint -> public void expectedPropertyReceived(final String name, final Object value);1550749310;Sets an expectation that the given property name & value are received by this endpoint_<p/>_You can set multiple expectations for different property names._If you set a value of <tt>null</tt> that means we accept either the property is absent, or its value is <tt>null</tt>;public void expectedPropertyReceived(final String name, final Object value) {_        if (expectedPropertyValues == null) {_            expectedPropertyValues = new HashMap<>()__        }_        expectedPropertyValues.put(name, value)___        expects(new Runnable() {_            public void run() {_                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    for (Map.Entry<String, Object> entry : expectedPropertyValues.entrySet()) {_                        String key = entry.getKey()__                        Object expectedValue = entry.getValue()___                        _                        if (expectedValue != null) {_                            assertTrue("Exchange " + i + " has no properties", !exchange.getProperties().isEmpty())__                            boolean hasKey = exchange.getProperties().containsKey(key)__                            assertTrue("No property with name " + key + " found for message: " + i, hasKey)__                        }__                        Object actualValue = exchange.getProperty(key)__                        actualValue = extractActualValue(exchange, actualValue, expectedValue)___                        assertEquals("Property with name " + key + " for message: " + i, expectedValue, actualValue)__                    }_                }_            }_        })__    };sets,an,expectation,that,the,given,property,name,value,are,received,by,this,endpoint,p,you,can,set,multiple,expectations,for,different,property,names,if,you,set,a,value,of,tt,null,tt,that,means,we,accept,either,the,property,is,absent,or,its,value,is,tt,null,tt;public,void,expected,property,received,final,string,name,final,object,value,if,expected,property,values,null,expected,property,values,new,hash,map,expected,property,values,put,name,value,expects,new,runnable,public,void,run,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,for,map,entry,string,object,entry,expected,property,values,entry,set,string,key,entry,get,key,object,expected,value,entry,get,value,if,expected,value,null,assert,true,exchange,i,has,no,properties,exchange,get,properties,is,empty,boolean,has,key,exchange,get,properties,contains,key,key,assert,true,no,property,with,name,key,found,for,message,i,has,key,object,actual,value,exchange,get,property,key,actual,value,extract,actual,value,exchange,actual,value,expected,value,assert,equals,property,with,name,key,for,message,i,expected,value,actual,value
MockEndpoint -> public void assertMessagesAscending(Expression expression);1549264559;Asserts that the messages have ascending values of the given expression;public void assertMessagesAscending(Expression expression) {_        assertMessagesSorted(expression, true)__    };asserts,that,the,messages,have,ascending,values,of,the,given,expression;public,void,assert,messages,ascending,expression,expression,assert,messages,sorted,expression,true
MockEndpoint -> public void assertMessagesAscending(Expression expression);1549433221;Asserts that the messages have ascending values of the given expression;public void assertMessagesAscending(Expression expression) {_        assertMessagesSorted(expression, true)__    };asserts,that,the,messages,have,ascending,values,of,the,given,expression;public,void,assert,messages,ascending,expression,expression,assert,messages,sorted,expression,true
MockEndpoint -> public void assertMessagesAscending(Expression expression);1550749310;Asserts that the messages have ascending values of the given expression;public void assertMessagesAscending(Expression expression) {_        assertMessagesSorted(expression, true)__    };asserts,that,the,messages,have,ascending,values,of,the,given,expression;public,void,assert,messages,ascending,expression,expression,assert,messages,sorted,expression,true
MockEndpoint -> public void expectedMinimumMessageCount(int expectedCount);1549264559;Specifies the minimum number of expected message exchanges that should be_received by this endpoint__@param expectedCount the number of message exchanges that should be_expected by this endpoint;public void expectedMinimumMessageCount(int expectedCount) {_        setMinimumExpectedMessageCount(expectedCount)__    };specifies,the,minimum,number,of,expected,message,exchanges,that,should,be,received,by,this,endpoint,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint;public,void,expected,minimum,message,count,int,expected,count,set,minimum,expected,message,count,expected,count
MockEndpoint -> public void expectedMinimumMessageCount(int expectedCount);1549433221;Specifies the minimum number of expected message exchanges that should be_received by this endpoint__@param expectedCount the number of message exchanges that should be_expected by this endpoint;public void expectedMinimumMessageCount(int expectedCount) {_        setMinimumExpectedMessageCount(expectedCount)__    };specifies,the,minimum,number,of,expected,message,exchanges,that,should,be,received,by,this,endpoint,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint;public,void,expected,minimum,message,count,int,expected,count,set,minimum,expected,message,count,expected,count
MockEndpoint -> public void expectedMinimumMessageCount(int expectedCount);1550749310;Specifies the minimum number of expected message exchanges that should be_received by this endpoint__@param expectedCount the number of message exchanges that should be_expected by this endpoint;public void expectedMinimumMessageCount(int expectedCount) {_        setMinimumExpectedMessageCount(expectedCount)__    };specifies,the,minimum,number,of,expected,message,exchanges,that,should,be,received,by,this,endpoint,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint;public,void,expected,minimum,message,count,int,expected,count,set,minimum,expected,message,count,expected,count
MockEndpoint -> public void setReporter(Processor reporter);1549264559;Allows a processor to added to the endpoint to report on progress of the test;public void setReporter(Processor reporter) {_        this.reporter = reporter__    };allows,a,processor,to,added,to,the,endpoint,to,report,on,progress,of,the,test;public,void,set,reporter,processor,reporter,this,reporter,reporter
MockEndpoint -> public void setReporter(Processor reporter);1549433221;Allows a processor to added to the endpoint to report on progress of the test;public void setReporter(Processor reporter) {_        this.reporter = reporter__    };allows,a,processor,to,added,to,the,endpoint,to,report,on,progress,of,the,test;public,void,set,reporter,processor,reporter,this,reporter,reporter
MockEndpoint -> public void setReporter(Processor reporter);1550749310;Allows a processor to added to the endpoint to report on progress of the test;public void setReporter(Processor reporter) {_        this.reporter = reporter__    };allows,a,processor,to,added,to,the,endpoint,to,report,on,progress,of,the,test;public,void,set,reporter,processor,reporter,this,reporter,reporter
MockEndpoint -> public void expectsDescending(final Expression expression);1549264559;Adds an expectation that messages received should have descending values_of the given expression such as a user generated counter value;public void expectsDescending(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertMessagesDescending(expression)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,descending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,void,expects,descending,final,expression,expression,expects,new,runnable,public,void,run,assert,messages,descending,expression
MockEndpoint -> public void expectsDescending(final Expression expression);1549433221;Adds an expectation that messages received should have descending values_of the given expression such as a user generated counter value;public void expectsDescending(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertMessagesDescending(expression)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,descending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,void,expects,descending,final,expression,expression,expects,new,runnable,public,void,run,assert,messages,descending,expression
MockEndpoint -> public void expectsDescending(final Expression expression);1550749310;Adds an expectation that messages received should have descending values_of the given expression such as a user generated counter value;public void expectsDescending(final Expression expression) {_        expects(new Runnable() {_            public void run() {_                assertMessagesDescending(expression)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,descending,values,of,the,given,expression,such,as,a,user,generated,counter,value;public,void,expects,descending,final,expression,expression,expects,new,runnable,public,void,run,assert,messages,descending,expression
MockEndpoint -> public void expectedBodiesReceived(final List<?> bodies);1549264559;Adds an expectation that the given body values are received by this_endpoint in the specified order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceived(final List<?> bodies) {_        expectedMessageCount(bodies.size())__        this.expectedBodyValues = bodies__        this.actualBodyValues = new ArrayList<>()___        expects(new Runnable() {_            public void run() {_                for (int i = 0_ i < expectedBodyValues.size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    assertTrue("No exchange received for counter: " + i, exchange != null)___                    Object expectedBody = expectedBodyValues.get(i)__                    Object actualBody = null__                    if (i < actualBodyValues.size()) {_                        actualBody = actualBodyValues.get(i)__                    }_                    actualBody = extractActualValue(exchange, actualBody, expectedBody)___                    assertEquals("Body of message: " + i, expectedBody, actualBody)__                }_            }_        })__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,the,specified,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,final,list,bodies,expected,message,count,bodies,size,this,expected,body,values,bodies,this,actual,body,values,new,array,list,expects,new,runnable,public,void,run,for,int,i,0,i,expected,body,values,size,i,exchange,exchange,get,received,exchange,i,assert,true,no,exchange,received,for,counter,i,exchange,null,object,expected,body,expected,body,values,get,i,object,actual,body,null,if,i,actual,body,values,size,actual,body,actual,body,values,get,i,actual,body,extract,actual,value,exchange,actual,body,expected,body,assert,equals,body,of,message,i,expected,body,actual,body
MockEndpoint -> public void expectedBodiesReceived(final List<?> bodies);1549433221;Adds an expectation that the given body values are received by this_endpoint in the specified order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceived(final List<?> bodies) {_        expectedMessageCount(bodies.size())__        this.expectedBodyValues = bodies__        this.actualBodyValues = new ArrayList<>()___        expects(new Runnable() {_            public void run() {_                for (int i = 0_ i < expectedBodyValues.size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    assertTrue("No exchange received for counter: " + i, exchange != null)___                    Object expectedBody = expectedBodyValues.get(i)__                    Object actualBody = null__                    if (i < actualBodyValues.size()) {_                        actualBody = actualBodyValues.get(i)__                    }_                    actualBody = extractActualValue(exchange, actualBody, expectedBody)___                    assertEquals("Body of message: " + i, expectedBody, actualBody)__                }_            }_        })__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,the,specified,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,final,list,bodies,expected,message,count,bodies,size,this,expected,body,values,bodies,this,actual,body,values,new,array,list,expects,new,runnable,public,void,run,for,int,i,0,i,expected,body,values,size,i,exchange,exchange,get,received,exchange,i,assert,true,no,exchange,received,for,counter,i,exchange,null,object,expected,body,expected,body,values,get,i,object,actual,body,null,if,i,actual,body,values,size,actual,body,actual,body,values,get,i,actual,body,extract,actual,value,exchange,actual,body,expected,body,assert,equals,body,of,message,i,expected,body,actual,body
MockEndpoint -> public void expectedBodiesReceived(final List<?> bodies);1550749310;Adds an expectation that the given body values are received by this_endpoint in the specified order_<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceived(final List<?> bodies) {_        expectedMessageCount(bodies.size())__        this.expectedBodyValues = bodies__        this.actualBodyValues = new ArrayList<>()___        expects(new Runnable() {_            public void run() {_                for (int i = 0_ i < expectedBodyValues.size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)__                    assertTrue("No exchange received for counter: " + i, exchange != null)___                    Object expectedBody = expectedBodyValues.get(i)__                    Object actualBody = null__                    if (i < actualBodyValues.size()) {_                        actualBody = actualBodyValues.get(i)__                    }_                    actualBody = extractActualValue(exchange, actualBody, expectedBody)___                    assertEquals("Body of message: " + i, expectedBody, actualBody)__                }_            }_        })__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,the,specified,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,final,list,bodies,expected,message,count,bodies,size,this,expected,body,values,bodies,this,actual,body,values,new,array,list,expects,new,runnable,public,void,run,for,int,i,0,i,expected,body,values,size,i,exchange,exchange,get,received,exchange,i,assert,true,no,exchange,received,for,counter,i,exchange,null,object,expected,body,expected,body,values,get,i,object,actual,body,null,if,i,actual,body,values,size,actual,body,actual,body,values,get,i,actual,body,extract,actual,value,exchange,actual,body,expected,body,assert,equals,body,of,message,i,expected,body,actual,body
MockEndpoint -> public void expectedPropertyValuesReceivedInAnyOrder(final String name, final List<?> values);1549264559;Adds an expectation that the given property values are received by this_endpoint in any order._<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedPropertyValuesReceivedInAnyOrder(final String name, final List<?> values) {_        expectedMessageCount(values.size())___        expects(new Runnable() {_            public void run() {_                _                final Set<Object> actualPropertyValues = new CopyOnWriteArraySet<>(values)___                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)___                    Object actualValue = exchange.getProperty(name)__                    for (Object expectedValue : actualPropertyValues) {_                        actualValue = extractActualValue(exchange, actualValue, expectedValue)__                        _                        actualPropertyValues.remove(actualValue)__                    }_                }__                _                assertTrue("Expected " + values.size() + " properties with key[" + name + "], received " + (values.size() - actualPropertyValues.size())_                        + " properties. Expected property values: " + actualPropertyValues, actualPropertyValues.isEmpty())__            }_        })__    };adds,an,expectation,that,the,given,property,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,property,values,received,in,any,order,final,string,name,final,list,values,expected,message,count,values,size,expects,new,runnable,public,void,run,final,set,object,actual,property,values,new,copy,on,write,array,set,values,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,object,actual,value,exchange,get,property,name,for,object,expected,value,actual,property,values,actual,value,extract,actual,value,exchange,actual,value,expected,value,actual,property,values,remove,actual,value,assert,true,expected,values,size,properties,with,key,name,received,values,size,actual,property,values,size,properties,expected,property,values,actual,property,values,actual,property,values,is,empty
MockEndpoint -> public void expectedPropertyValuesReceivedInAnyOrder(final String name, final List<?> values);1549433221;Adds an expectation that the given property values are received by this_endpoint in any order._<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedPropertyValuesReceivedInAnyOrder(final String name, final List<?> values) {_        expectedMessageCount(values.size())___        expects(new Runnable() {_            public void run() {_                _                final Set<Object> actualPropertyValues = new CopyOnWriteArraySet<>(values)___                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)___                    Object actualValue = exchange.getProperty(name)__                    for (Object expectedValue : actualPropertyValues) {_                        actualValue = extractActualValue(exchange, actualValue, expectedValue)__                        _                        actualPropertyValues.remove(actualValue)__                    }_                }__                _                assertTrue("Expected " + values.size() + " properties with key[" + name + "], received " + (values.size() - actualPropertyValues.size())_                        + " properties. Expected property values: " + actualPropertyValues, actualPropertyValues.isEmpty())__            }_        })__    };adds,an,expectation,that,the,given,property,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,property,values,received,in,any,order,final,string,name,final,list,values,expected,message,count,values,size,expects,new,runnable,public,void,run,final,set,object,actual,property,values,new,copy,on,write,array,set,values,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,object,actual,value,exchange,get,property,name,for,object,expected,value,actual,property,values,actual,value,extract,actual,value,exchange,actual,value,expected,value,actual,property,values,remove,actual,value,assert,true,expected,values,size,properties,with,key,name,received,values,size,actual,property,values,size,properties,expected,property,values,actual,property,values,actual,property,values,is,empty
MockEndpoint -> public void expectedPropertyValuesReceivedInAnyOrder(final String name, final List<?> values);1550749310;Adds an expectation that the given property values are received by this_endpoint in any order._<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedPropertyValuesReceivedInAnyOrder(final String name, final List<?> values) {_        expectedMessageCount(values.size())___        expects(new Runnable() {_            public void run() {_                _                final Set<Object> actualPropertyValues = new CopyOnWriteArraySet<>(values)___                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)___                    Object actualValue = exchange.getProperty(name)__                    for (Object expectedValue : actualPropertyValues) {_                        actualValue = extractActualValue(exchange, actualValue, expectedValue)__                        _                        actualPropertyValues.remove(actualValue)__                    }_                }__                _                assertTrue("Expected " + values.size() + " properties with key[" + name + "], received " + (values.size() - actualPropertyValues.size())_                        + " properties. Expected property values: " + actualPropertyValues, actualPropertyValues.isEmpty())__            }_        })__    };adds,an,expectation,that,the,given,property,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,property,values,received,in,any,order,final,string,name,final,list,values,expected,message,count,values,size,expects,new,runnable,public,void,run,final,set,object,actual,property,values,new,copy,on,write,array,set,values,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,object,actual,value,exchange,get,property,name,for,object,expected,value,actual,property,values,actual,value,extract,actual,value,exchange,actual,value,expected,value,actual,property,values,remove,actual,value,assert,true,expected,values,size,properties,with,key,name,received,values,size,actual,property,values,size,properties,expected,property,values,actual,property,values,actual,property,values,is,empty
MockEndpoint -> public void setResultWaitTime(long resultWaitTime);1549264559;Sets the maximum amount of time (in millis) the {@link #assertIsSatisfied()} will_wait on a latch until it is satisfied;public void setResultWaitTime(long resultWaitTime) {_        this.resultWaitTime = resultWaitTime__    };sets,the,maximum,amount,of,time,in,millis,the,link,assert,is,satisfied,will,wait,on,a,latch,until,it,is,satisfied;public,void,set,result,wait,time,long,result,wait,time,this,result,wait,time,result,wait,time
MockEndpoint -> public void setResultWaitTime(long resultWaitTime);1549433221;Sets the maximum amount of time (in millis) the {@link #assertIsSatisfied()} will_wait on a latch until it is satisfied;public void setResultWaitTime(long resultWaitTime) {_        this.resultWaitTime = resultWaitTime__    };sets,the,maximum,amount,of,time,in,millis,the,link,assert,is,satisfied,will,wait,on,a,latch,until,it,is,satisfied;public,void,set,result,wait,time,long,result,wait,time,this,result,wait,time,result,wait,time
MockEndpoint -> public void setResultWaitTime(long resultWaitTime);1550749310;Sets the maximum amount of time (in millis) the {@link #assertIsSatisfied()} will_wait on a latch until it is satisfied;public void setResultWaitTime(long resultWaitTime) {_        this.resultWaitTime = resultWaitTime__    };sets,the,maximum,amount,of,time,in,millis,the,link,assert,is,satisfied,will,wait,on,a,latch,until,it,is,satisfied;public,void,set,result,wait,time,long,result,wait,time,this,result,wait,time,result,wait,time
MockEndpoint -> public void expectedFileExists(final String name);1549264559;Adds an expectation that a file exists with the given name__@param name name of file, will cater for / and \ on different OS platforms;public void expectedFileExists(final String name) {_        expectedFileExists(name, null)__    };adds,an,expectation,that,a,file,exists,with,the,given,name,param,name,name,of,file,will,cater,for,and,on,different,os,platforms;public,void,expected,file,exists,final,string,name,expected,file,exists,name,null
MockEndpoint -> public void expectedFileExists(final String name);1549433221;Adds an expectation that a file exists with the given name__@param name name of file, will cater for / and \ on different OS platforms;public void expectedFileExists(final String name) {_        expectedFileExists(name, null)__    };adds,an,expectation,that,a,file,exists,with,the,given,name,param,name,name,of,file,will,cater,for,and,on,different,os,platforms;public,void,expected,file,exists,final,string,name,expected,file,exists,name,null
MockEndpoint -> public void expectedFileExists(final String name);1550749310;Adds an expectation that a file exists with the given name__@param name name of file, will cater for / and \ on different OS platforms;public void expectedFileExists(final String name) {_        expectedFileExists(name, null)__    };adds,an,expectation,that,a,file,exists,with,the,given,name,param,name,name,of,file,will,cater,for,and,on,different,os,platforms;public,void,expected,file,exists,final,string,name,expected,file,exists,name,null
MockEndpoint -> public AssertionClause message(final int messageIndex);1549264559;Adds an assertion to the given message index__@param messageIndex the number of the message_@return the assertion clause;public AssertionClause message(final int messageIndex) {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                applyAssertionOn(MockEndpoint.this, messageIndex, assertExchangeReceived(messageIndex))__            }_        }__        expects(clause)__        return clause__    };adds,an,assertion,to,the,given,message,index,param,message,index,the,number,of,the,message,return,the,assertion,clause;public,assertion,clause,message,final,int,message,index,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,apply,assertion,on,mock,endpoint,this,message,index,assert,exchange,received,message,index,expects,clause,return,clause
MockEndpoint -> public AssertionClause message(final int messageIndex);1549433221;Adds an assertion to the given message index__@param messageIndex the number of the message_@return the assertion clause;public AssertionClause message(final int messageIndex) {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                applyAssertionOn(MockEndpoint.this, messageIndex, assertExchangeReceived(messageIndex))__            }_        }__        expects(clause)__        return clause__    };adds,an,assertion,to,the,given,message,index,param,message,index,the,number,of,the,message,return,the,assertion,clause;public,assertion,clause,message,final,int,message,index,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,apply,assertion,on,mock,endpoint,this,message,index,assert,exchange,received,message,index,expects,clause,return,clause
MockEndpoint -> public AssertionClause message(final int messageIndex);1550749310;Adds an assertion to the given message index__@param messageIndex the number of the message_@return the assertion clause;public AssertionClause message(final int messageIndex) {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                applyAssertionOn(MockEndpoint.this, messageIndex, assertExchangeReceived(messageIndex))__            }_        }__        expects(clause)__        return clause__    };adds,an,assertion,to,the,given,message,index,param,message,index,the,number,of,the,message,return,the,assertion,clause;public,assertion,clause,message,final,int,message,index,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,apply,assertion,on,mock,endpoint,this,message,index,assert,exchange,received,message,index,expects,clause,return,clause
MockEndpoint -> protected void performAssertions(Exchange exchange, Exchange copy) throws Exception;1549264559;Performs the assertions on the incoming exchange.__@param exchange   the actual exchange_@param copy       a copy of the exchange (only store this)_@throws Exception can be thrown if something went wrong;protected void performAssertions(Exchange exchange, Exchange copy) throws Exception {_        Message in = copy.getIn()__        Object actualBody = in.getBody()___        if (expectedHeaderValues != null) {_            if (actualHeaderValues == null) {_                actualHeaderValues = getCamelContext().getHeadersMapFactory().newMap()__            }_            if (in.hasHeaders()) {_                actualHeaderValues.putAll(in.getHeaders())__            }_        }__        if (expectedPropertyValues != null) {_            if (actualPropertyValues == null) {_                actualPropertyValues = getCamelContext().getHeadersMapFactory().newMap()__            }_            actualPropertyValues.putAll(copy.getProperties())__        }__        if (expectedBodyValues != null) {_            int index = actualBodyValues.size()__            if (expectedBodyValues.size() > index) {_                Object expectedBody = expectedBodyValues.get(index)__                if (expectedBody != null) {_                    _                    _                    Object body = in.getBody(expectedBody.getClass())__                    if (body != null) {_                        actualBody = body__                    }_                }_                actualBodyValues.add(actualBody)__            }_        }__        _        if (log.isDebugEnabled()) {_            String msg = getEndpointUri() + " >>>> " + counter + " : " + copy + " with body: " + actualBody__            if (copy.getIn().hasHeaders()) {_                msg += " and headers:" + copy.getIn().getHeaders()__            }_            log.debug(msg)__        }__        _        copy.setProperty(Exchange.RECEIVED_TIMESTAMP, new Date())___        _        addReceivedExchange(copy)__        _        ++counter___        Processor processor = processors.get(getReceivedCounter()) != null_                ? processors.get(getReceivedCounter()) : defaultProcessor___        if (processor != null) {_            try {_                _                _                processor.process(exchange)__            } catch (Exception e) {_                _                exchange.setException(e)__            }_        }_    };performs,the,assertions,on,the,incoming,exchange,param,exchange,the,actual,exchange,param,copy,a,copy,of,the,exchange,only,store,this,throws,exception,can,be,thrown,if,something,went,wrong;protected,void,perform,assertions,exchange,exchange,exchange,copy,throws,exception,message,in,copy,get,in,object,actual,body,in,get,body,if,expected,header,values,null,if,actual,header,values,null,actual,header,values,get,camel,context,get,headers,map,factory,new,map,if,in,has,headers,actual,header,values,put,all,in,get,headers,if,expected,property,values,null,if,actual,property,values,null,actual,property,values,get,camel,context,get,headers,map,factory,new,map,actual,property,values,put,all,copy,get,properties,if,expected,body,values,null,int,index,actual,body,values,size,if,expected,body,values,size,index,object,expected,body,expected,body,values,get,index,if,expected,body,null,object,body,in,get,body,expected,body,get,class,if,body,null,actual,body,body,actual,body,values,add,actual,body,if,log,is,debug,enabled,string,msg,get,endpoint,uri,counter,copy,with,body,actual,body,if,copy,get,in,has,headers,msg,and,headers,copy,get,in,get,headers,log,debug,msg,copy,set,property,exchange,new,date,add,received,exchange,copy,counter,processor,processor,processors,get,get,received,counter,null,processors,get,get,received,counter,default,processor,if,processor,null,try,processor,process,exchange,catch,exception,e,exchange,set,exception,e
MockEndpoint -> protected void performAssertions(Exchange exchange, Exchange copy) throws Exception;1549433221;Performs the assertions on the incoming exchange.__@param exchange   the actual exchange_@param copy       a copy of the exchange (only store this)_@throws Exception can be thrown if something went wrong;protected void performAssertions(Exchange exchange, Exchange copy) throws Exception {_        Message in = copy.getIn()__        Object actualBody = in.getBody()___        if (expectedHeaderValues != null) {_            if (actualHeaderValues == null) {_                actualHeaderValues = getCamelContext().getHeadersMapFactory().newMap()__            }_            if (in.hasHeaders()) {_                actualHeaderValues.putAll(in.getHeaders())__            }_        }__        if (expectedPropertyValues != null) {_            if (actualPropertyValues == null) {_                actualPropertyValues = getCamelContext().getHeadersMapFactory().newMap()__            }_            actualPropertyValues.putAll(copy.getProperties())__        }__        if (expectedBodyValues != null) {_            int index = actualBodyValues.size()__            if (expectedBodyValues.size() > index) {_                Object expectedBody = expectedBodyValues.get(index)__                if (expectedBody != null) {_                    _                    _                    Object body = in.getBody(expectedBody.getClass())__                    if (body != null) {_                        actualBody = body__                    }_                }_                actualBodyValues.add(actualBody)__            }_        }__        _        if (log.isDebugEnabled()) {_            String msg = getEndpointUri() + " >>>> " + counter + " : " + copy + " with body: " + actualBody__            if (copy.getIn().hasHeaders()) {_                msg += " and headers:" + copy.getIn().getHeaders()__            }_            log.debug(msg)__        }__        _        copy.setProperty(Exchange.RECEIVED_TIMESTAMP, new Date())___        _        addReceivedExchange(copy)__        _        ++counter___        Processor processor = processors.get(getReceivedCounter()) != null_                ? processors.get(getReceivedCounter()) : defaultProcessor___        if (processor != null) {_            try {_                _                _                processor.process(exchange)__            } catch (Exception e) {_                _                exchange.setException(e)__            }_        }_    };performs,the,assertions,on,the,incoming,exchange,param,exchange,the,actual,exchange,param,copy,a,copy,of,the,exchange,only,store,this,throws,exception,can,be,thrown,if,something,went,wrong;protected,void,perform,assertions,exchange,exchange,exchange,copy,throws,exception,message,in,copy,get,in,object,actual,body,in,get,body,if,expected,header,values,null,if,actual,header,values,null,actual,header,values,get,camel,context,get,headers,map,factory,new,map,if,in,has,headers,actual,header,values,put,all,in,get,headers,if,expected,property,values,null,if,actual,property,values,null,actual,property,values,get,camel,context,get,headers,map,factory,new,map,actual,property,values,put,all,copy,get,properties,if,expected,body,values,null,int,index,actual,body,values,size,if,expected,body,values,size,index,object,expected,body,expected,body,values,get,index,if,expected,body,null,object,body,in,get,body,expected,body,get,class,if,body,null,actual,body,body,actual,body,values,add,actual,body,if,log,is,debug,enabled,string,msg,get,endpoint,uri,counter,copy,with,body,actual,body,if,copy,get,in,has,headers,msg,and,headers,copy,get,in,get,headers,log,debug,msg,copy,set,property,exchange,new,date,add,received,exchange,copy,counter,processor,processor,processors,get,get,received,counter,null,processors,get,get,received,counter,default,processor,if,processor,null,try,processor,process,exchange,catch,exception,e,exchange,set,exception,e
MockEndpoint -> protected void performAssertions(Exchange exchange, Exchange copy) throws Exception;1550749310;Performs the assertions on the incoming exchange.__@param exchange   the actual exchange_@param copy       a copy of the exchange (only store this)_@throws Exception can be thrown if something went wrong;protected void performAssertions(Exchange exchange, Exchange copy) throws Exception {_        Message in = copy.getIn()__        Object actualBody = in.getBody()___        if (expectedHeaderValues != null) {_            if (actualHeaderValues == null) {_                actualHeaderValues = getCamelContext().getHeadersMapFactory().newMap()__            }_            if (in.hasHeaders()) {_                actualHeaderValues.putAll(in.getHeaders())__            }_        }__        if (expectedPropertyValues != null) {_            if (actualPropertyValues == null) {_                actualPropertyValues = getCamelContext().getHeadersMapFactory().newMap()__            }_            actualPropertyValues.putAll(copy.getProperties())__        }__        if (expectedBodyValues != null) {_            int index = actualBodyValues.size()__            if (expectedBodyValues.size() > index) {_                Object expectedBody = expectedBodyValues.get(index)__                if (expectedBody != null) {_                    _                    _                    Object body = in.getBody(expectedBody.getClass())__                    if (body != null) {_                        actualBody = body__                    }_                }_                actualBodyValues.add(actualBody)__            }_        }__        _        if (log.isDebugEnabled()) {_            String msg = getEndpointUri() + " >>>> " + counter + " : " + copy + " with body: " + actualBody__            if (copy.getIn().hasHeaders()) {_                msg += " and headers:" + copy.getIn().getHeaders()__            }_            log.debug(msg)__        }__        _        copy.setProperty(Exchange.RECEIVED_TIMESTAMP, new Date())___        _        addReceivedExchange(copy)__        _        ++counter___        Processor processor = processors.get(getReceivedCounter()) != null_                ? processors.get(getReceivedCounter()) : defaultProcessor___        if (processor != null) {_            try {_                _                _                processor.process(exchange)__            } catch (Exception e) {_                _                exchange.setException(e)__            }_        }_    };performs,the,assertions,on,the,incoming,exchange,param,exchange,the,actual,exchange,param,copy,a,copy,of,the,exchange,only,store,this,throws,exception,can,be,thrown,if,something,went,wrong;protected,void,perform,assertions,exchange,exchange,exchange,copy,throws,exception,message,in,copy,get,in,object,actual,body,in,get,body,if,expected,header,values,null,if,actual,header,values,null,actual,header,values,get,camel,context,get,headers,map,factory,new,map,if,in,has,headers,actual,header,values,put,all,in,get,headers,if,expected,property,values,null,if,actual,property,values,null,actual,property,values,get,camel,context,get,headers,map,factory,new,map,actual,property,values,put,all,copy,get,properties,if,expected,body,values,null,int,index,actual,body,values,size,if,expected,body,values,size,index,object,expected,body,expected,body,values,get,index,if,expected,body,null,object,body,in,get,body,expected,body,get,class,if,body,null,actual,body,body,actual,body,values,add,actual,body,if,log,is,debug,enabled,string,msg,get,endpoint,uri,counter,copy,with,body,actual,body,if,copy,get,in,has,headers,msg,and,headers,copy,get,in,get,headers,log,debug,msg,copy,set,property,exchange,new,date,add,received,exchange,copy,counter,processor,processor,processors,get,get,received,counter,null,processors,get,get,received,counter,default,processor,if,processor,null,try,processor,process,exchange,catch,exception,e,exchange,set,exception,e
MockEndpoint -> public void whenExchangeReceived(int index, Processor processor);1549264559;Set the processor that will be invoked when the index_message is received.;public void whenExchangeReceived(int index, Processor processor) {_        this.processors.put(index, processor)__    };set,the,processor,that,will,be,invoked,when,the,index,message,is,received;public,void,when,exchange,received,int,index,processor,processor,this,processors,put,index,processor
MockEndpoint -> public void whenExchangeReceived(int index, Processor processor);1549433221;Set the processor that will be invoked when the index_message is received.;public void whenExchangeReceived(int index, Processor processor) {_        this.processors.put(index, processor)__    };set,the,processor,that,will,be,invoked,when,the,index,message,is,received;public,void,when,exchange,received,int,index,processor,processor,this,processors,put,index,processor
MockEndpoint -> public void whenExchangeReceived(int index, Processor processor);1550749310;Set the processor that will be invoked when the index_message is received.;public void whenExchangeReceived(int index, Processor processor) {_        this.processors.put(index, processor)__    };set,the,processor,that,will,be,invoked,when,the,index,message,is,received;public,void,when,exchange,received,int,index,processor,processor,this,processors,put,index,processor
MockEndpoint -> public void expectedHeaderValuesReceivedInAnyOrder(final String name, final List<?> values);1549264559;Adds an expectation that the given header values are received by this_endpoint in any order._<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderValuesReceivedInAnyOrder(final String name, final List<?> values) {_        expectedMessageCount(values.size())___        expects(new Runnable() {_            public void run() {_                _                final Set<Object> actualHeaderValues = new CopyOnWriteArraySet<>(values)___                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)___                    Object actualValue = exchange.getIn().getHeader(name)__                    for (Object expectedValue : actualHeaderValues) {_                        actualValue = extractActualValue(exchange, actualValue, expectedValue)__                        _                        actualHeaderValues.remove(actualValue)__                    }_                }__                _                assertTrue("Expected " + values.size() + " headers with key[" + name + "], received " + (values.size() - actualHeaderValues.size())_                        + " headers. Expected header values: " + actualHeaderValues, actualHeaderValues.isEmpty())__            }_        })__    };adds,an,expectation,that,the,given,header,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,values,received,in,any,order,final,string,name,final,list,values,expected,message,count,values,size,expects,new,runnable,public,void,run,final,set,object,actual,header,values,new,copy,on,write,array,set,values,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,object,actual,value,exchange,get,in,get,header,name,for,object,expected,value,actual,header,values,actual,value,extract,actual,value,exchange,actual,value,expected,value,actual,header,values,remove,actual,value,assert,true,expected,values,size,headers,with,key,name,received,values,size,actual,header,values,size,headers,expected,header,values,actual,header,values,actual,header,values,is,empty
MockEndpoint -> public void expectedHeaderValuesReceivedInAnyOrder(final String name, final List<?> values);1549433221;Adds an expectation that the given header values are received by this_endpoint in any order._<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderValuesReceivedInAnyOrder(final String name, final List<?> values) {_        expectedMessageCount(values.size())___        expects(new Runnable() {_            public void run() {_                _                final Set<Object> actualHeaderValues = new CopyOnWriteArraySet<>(values)___                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)___                    Object actualValue = exchange.getIn().getHeader(name)__                    for (Object expectedValue : actualHeaderValues) {_                        actualValue = extractActualValue(exchange, actualValue, expectedValue)__                        _                        actualHeaderValues.remove(actualValue)__                    }_                }__                _                assertTrue("Expected " + values.size() + " headers with key[" + name + "], received " + (values.size() - actualHeaderValues.size())_                        + " headers. Expected header values: " + actualHeaderValues, actualHeaderValues.isEmpty())__            }_        })__    };adds,an,expectation,that,the,given,header,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,values,received,in,any,order,final,string,name,final,list,values,expected,message,count,values,size,expects,new,runnable,public,void,run,final,set,object,actual,header,values,new,copy,on,write,array,set,values,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,object,actual,value,exchange,get,in,get,header,name,for,object,expected,value,actual,header,values,actual,value,extract,actual,value,exchange,actual,value,expected,value,actual,header,values,remove,actual,value,assert,true,expected,values,size,headers,with,key,name,received,values,size,actual,header,values,size,headers,expected,header,values,actual,header,values,actual,header,values,is,empty
MockEndpoint -> public void expectedHeaderValuesReceivedInAnyOrder(final String name, final List<?> values);1550749310;Adds an expectation that the given header values are received by this_endpoint in any order._<p/>_<b>Important:</b> The number of values must match the expected number of messages, so if you expect 3 messages, then_there must be 3 values._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedHeaderValuesReceivedInAnyOrder(final String name, final List<?> values) {_        expectedMessageCount(values.size())___        expects(new Runnable() {_            public void run() {_                _                final Set<Object> actualHeaderValues = new CopyOnWriteArraySet<>(values)___                for (int i = 0_ i < getReceivedExchanges().size()_ i++) {_                    Exchange exchange = getReceivedExchange(i)___                    Object actualValue = exchange.getIn().getHeader(name)__                    for (Object expectedValue : actualHeaderValues) {_                        actualValue = extractActualValue(exchange, actualValue, expectedValue)__                        _                        actualHeaderValues.remove(actualValue)__                    }_                }__                _                assertTrue("Expected " + values.size() + " headers with key[" + name + "], received " + (values.size() - actualHeaderValues.size())_                        + " headers. Expected header values: " + actualHeaderValues, actualHeaderValues.isEmpty())__            }_        })__    };adds,an,expectation,that,the,given,header,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,values,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,values,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,header,values,received,in,any,order,final,string,name,final,list,values,expected,message,count,values,size,expects,new,runnable,public,void,run,final,set,object,actual,header,values,new,copy,on,write,array,set,values,for,int,i,0,i,get,received,exchanges,size,i,exchange,exchange,get,received,exchange,i,object,actual,value,exchange,get,in,get,header,name,for,object,expected,value,actual,header,values,actual,value,extract,actual,value,exchange,actual,value,expected,value,actual,header,values,remove,actual,value,assert,true,expected,values,size,headers,with,key,name,received,values,size,actual,header,values,size,headers,expected,header,values,actual,header,values,actual,header,values,is,empty
MockEndpoint -> public void setReportGroup(int reportGroup);1549264559;A number that is used to turn on throughput logging based on groups of the size.;public void setReportGroup(int reportGroup) {_        this.reportGroup = reportGroup__    };a,number,that,is,used,to,turn,on,throughput,logging,based,on,groups,of,the,size;public,void,set,report,group,int,report,group,this,report,group,report,group
MockEndpoint -> public void setReportGroup(int reportGroup);1549433221;A number that is used to turn on throughput logging based on groups of the size.;public void setReportGroup(int reportGroup) {_        this.reportGroup = reportGroup__    };a,number,that,is,used,to,turn,on,throughput,logging,based,on,groups,of,the,size;public,void,set,report,group,int,report,group,this,report,group,report,group
MockEndpoint -> public void setReportGroup(int reportGroup);1550749310;A number that is used to turn on throughput logging based on groups of the size.;public void setReportGroup(int reportGroup) {_        this.reportGroup = reportGroup__    };a,number,that,is,used,to,turn,on,throughput,logging,based,on,groups,of,the,size;public,void,set,report,group,int,report,group,this,report,group,report,group
MockEndpoint -> public void expectedBodiesReceivedInAnyOrder(Object... bodies);1549264559;Adds an expectation that the given body values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceivedInAnyOrder(Object... bodies) {_        List<Object> bodyList = new ArrayList<>()__        bodyList.addAll(Arrays.asList(bodies))__        expectedBodiesReceivedInAnyOrder(bodyList)__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,in,any,order,object,bodies,list,object,body,list,new,array,list,body,list,add,all,arrays,as,list,bodies,expected,bodies,received,in,any,order,body,list
MockEndpoint -> public void expectedBodiesReceivedInAnyOrder(Object... bodies);1549433221;Adds an expectation that the given body values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceivedInAnyOrder(Object... bodies) {_        List<Object> bodyList = new ArrayList<>()__        bodyList.addAll(Arrays.asList(bodies))__        expectedBodiesReceivedInAnyOrder(bodyList)__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,in,any,order,object,bodies,list,object,body,list,new,array,list,body,list,add,all,arrays,as,list,bodies,expected,bodies,received,in,any,order,body,list
MockEndpoint -> public void expectedBodiesReceivedInAnyOrder(Object... bodies);1550749310;Adds an expectation that the given body values are received by this_endpoint in any order_<p/>_<b>Important:</b> The number of bodies must match the expected number of messages, so if you expect 3 messages, then_there must be 3 bodies._<p/>_<b>Important:</b> This overrides any previous set value using {@link #expectedMessageCount(int)};public void expectedBodiesReceivedInAnyOrder(Object... bodies) {_        List<Object> bodyList = new ArrayList<>()__        bodyList.addAll(Arrays.asList(bodies))__        expectedBodiesReceivedInAnyOrder(bodyList)__    };adds,an,expectation,that,the,given,body,values,are,received,by,this,endpoint,in,any,order,p,b,important,b,the,number,of,bodies,must,match,the,expected,number,of,messages,so,if,you,expect,3,messages,then,there,must,be,3,bodies,p,b,important,b,this,overrides,any,previous,set,value,using,link,expected,message,count,int;public,void,expected,bodies,received,in,any,order,object,bodies,list,object,body,list,new,array,list,body,list,add,all,arrays,as,list,bodies,expected,bodies,received,in,any,order,body,list
MockEndpoint -> public void expectedExchangePattern(final ExchangePattern exchangePattern);1549264559;Adds an expectation that messages received should have the given exchange pattern;public void expectedExchangePattern(final ExchangePattern exchangePattern) {_        expectedMessagesMatches(new Predicate() {_            public boolean matches(Exchange exchange) {_                return exchange.getPattern().equals(exchangePattern)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,the,given,exchange,pattern;public,void,expected,exchange,pattern,final,exchange,pattern,exchange,pattern,expected,messages,matches,new,predicate,public,boolean,matches,exchange,exchange,return,exchange,get,pattern,equals,exchange,pattern
MockEndpoint -> public void expectedExchangePattern(final ExchangePattern exchangePattern);1549433221;Adds an expectation that messages received should have the given exchange pattern;public void expectedExchangePattern(final ExchangePattern exchangePattern) {_        expectedMessagesMatches(new Predicate() {_            public boolean matches(Exchange exchange) {_                return exchange.getPattern().equals(exchangePattern)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,the,given,exchange,pattern;public,void,expected,exchange,pattern,final,exchange,pattern,exchange,pattern,expected,messages,matches,new,predicate,public,boolean,matches,exchange,exchange,return,exchange,get,pattern,equals,exchange,pattern
MockEndpoint -> public void expectedExchangePattern(final ExchangePattern exchangePattern);1550749310;Adds an expectation that messages received should have the given exchange pattern;public void expectedExchangePattern(final ExchangePattern exchangePattern) {_        expectedMessagesMatches(new Predicate() {_            public boolean matches(Exchange exchange) {_                return exchange.getPattern().equals(exchangePattern)__            }_        })__    };adds,an,expectation,that,messages,received,should,have,the,given,exchange,pattern;public,void,expected,exchange,pattern,final,exchange,pattern,exchange,pattern,expected,messages,matches,new,predicate,public,boolean,matches,exchange,exchange,return,exchange,get,pattern,equals,exchange,pattern
MockEndpoint -> public void assertMessagesDescending(Expression expression);1549264559;Asserts that the messages have descending values of the given expression;public void assertMessagesDescending(Expression expression) {_        assertMessagesSorted(expression, false)__    };asserts,that,the,messages,have,descending,values,of,the,given,expression;public,void,assert,messages,descending,expression,expression,assert,messages,sorted,expression,false
MockEndpoint -> public void assertMessagesDescending(Expression expression);1549433221;Asserts that the messages have descending values of the given expression;public void assertMessagesDescending(Expression expression) {_        assertMessagesSorted(expression, false)__    };asserts,that,the,messages,have,descending,values,of,the,given,expression;public,void,assert,messages,descending,expression,expression,assert,messages,sorted,expression,false
MockEndpoint -> public void assertMessagesDescending(Expression expression);1550749310;Asserts that the messages have descending values of the given expression;public void assertMessagesDescending(Expression expression) {_        assertMessagesSorted(expression, false)__    };asserts,that,the,messages,have,descending,values,of,the,given,expression;public,void,assert,messages,descending,expression,expression,assert,messages,sorted,expression,false
MockEndpoint -> public AssertionClause expectsNoDuplicates();1549264559;Adds an expectation that no duplicate messages should be received using_the expression to determine the message ID;public AssertionClause expectsNoDuplicates() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertNoDuplicates(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,no,duplicate,messages,should,be,received,using,the,expression,to,determine,the,message,id;public,assertion,clause,expects,no,duplicates,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,no,duplicates,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectsNoDuplicates();1549433221;Adds an expectation that no duplicate messages should be received using_the expression to determine the message ID;public AssertionClause expectsNoDuplicates() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertNoDuplicates(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,no,duplicate,messages,should,be,received,using,the,expression,to,determine,the,message,id;public,assertion,clause,expects,no,duplicates,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,no,duplicates,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public AssertionClause expectsNoDuplicates();1550749310;Adds an expectation that no duplicate messages should be received using_the expression to determine the message ID;public AssertionClause expectsNoDuplicates() {_        final AssertionClause clause = new AssertionClause(this) {_            public void run() {_                assertNoDuplicates(createExpression(getCamelContext()))__            }_        }__        expects(clause)__        return clause__    };adds,an,expectation,that,no,duplicate,messages,should,be,received,using,the,expression,to,determine,the,message,id;public,assertion,clause,expects,no,duplicates,final,assertion,clause,clause,new,assertion,clause,this,public,void,run,assert,no,duplicates,create,expression,get,camel,context,expects,clause,return,clause
MockEndpoint -> public Exchange assertExchangeReceived(int index);1549264559;Asserts that the given index of message is received (starting at zero);public Exchange assertExchangeReceived(int index) {_        int count = getReceivedCounter()__        assertTrue("Not enough messages received. Was: " + count, count > index)__        return getReceivedExchange(index)__    };asserts,that,the,given,index,of,message,is,received,starting,at,zero;public,exchange,assert,exchange,received,int,index,int,count,get,received,counter,assert,true,not,enough,messages,received,was,count,count,index,return,get,received,exchange,index
MockEndpoint -> public Exchange assertExchangeReceived(int index);1549433221;Asserts that the given index of message is received (starting at zero);public Exchange assertExchangeReceived(int index) {_        int count = getReceivedCounter()__        assertTrue("Not enough messages received. Was: " + count, count > index)__        return getReceivedExchange(index)__    };asserts,that,the,given,index,of,message,is,received,starting,at,zero;public,exchange,assert,exchange,received,int,index,int,count,get,received,counter,assert,true,not,enough,messages,received,was,count,count,index,return,get,received,exchange,index
MockEndpoint -> public Exchange assertExchangeReceived(int index);1550749310;Asserts that the given index of message is received (starting at zero);public Exchange assertExchangeReceived(int index) {_        int count = getReceivedCounter()__        assertTrue("Not enough messages received. Was: " + count, count > index)__        return getReceivedExchange(index)__    };asserts,that,the,given,index,of,message,is,received,starting,at,zero;public,exchange,assert,exchange,received,int,index,int,count,get,received,counter,assert,true,not,enough,messages,received,was,count,count,index,return,get,received,exchange,index
MockEndpoint -> public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException;1549264559;Validates that all the available expectations on this endpoint are_satisfied_ or throw an exception__@param timeoutForEmptyEndpoints the timeout in milliseconds that we_should wait for the test to be true;public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {_        log.info("Asserting: {} is satisfied", this)__        doAssertIsSatisfied(timeoutForEmptyEndpoints)__        if (assertPeriod > 0) {_            _            Thread.sleep(assertPeriod)__            log.info("Re-asserting: {} is satisfied after {} millis", this, assertPeriod)__            _            doAssertIsSatisfied(0)__        }_    };validates,that,all,the,available,expectations,on,this,endpoint,are,satisfied,or,throw,an,exception,param,timeout,for,empty,endpoints,the,timeout,in,milliseconds,that,we,should,wait,for,the,test,to,be,true;public,void,assert,is,satisfied,long,timeout,for,empty,endpoints,throws,interrupted,exception,log,info,asserting,is,satisfied,this,do,assert,is,satisfied,timeout,for,empty,endpoints,if,assert,period,0,thread,sleep,assert,period,log,info,re,asserting,is,satisfied,after,millis,this,assert,period,do,assert,is,satisfied,0
MockEndpoint -> public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException;1549433221;Validates that all the available expectations on this endpoint are_satisfied_ or throw an exception__@param timeoutForEmptyEndpoints the timeout in milliseconds that we_should wait for the test to be true;public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {_        log.info("Asserting: {} is satisfied", this)__        doAssertIsSatisfied(timeoutForEmptyEndpoints)__        if (assertPeriod > 0) {_            _            Thread.sleep(assertPeriod)__            log.info("Re-asserting: {} is satisfied after {} millis", this, assertPeriod)__            _            doAssertIsSatisfied(0)__        }_    };validates,that,all,the,available,expectations,on,this,endpoint,are,satisfied,or,throw,an,exception,param,timeout,for,empty,endpoints,the,timeout,in,milliseconds,that,we,should,wait,for,the,test,to,be,true;public,void,assert,is,satisfied,long,timeout,for,empty,endpoints,throws,interrupted,exception,log,info,asserting,is,satisfied,this,do,assert,is,satisfied,timeout,for,empty,endpoints,if,assert,period,0,thread,sleep,assert,period,log,info,re,asserting,is,satisfied,after,millis,this,assert,period,do,assert,is,satisfied,0
MockEndpoint -> public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException;1550749310;Validates that all the available expectations on this endpoint are_satisfied_ or throw an exception__@param timeoutForEmptyEndpoints the timeout in milliseconds that we_should wait for the test to be true;public void assertIsSatisfied(long timeoutForEmptyEndpoints) throws InterruptedException {_        log.info("Asserting: {} is satisfied", this)__        doAssertIsSatisfied(timeoutForEmptyEndpoints)__        if (assertPeriod > 0) {_            _            Thread.sleep(assertPeriod)__            log.info("Re-asserting: {} is satisfied after {} millis", this, assertPeriod)__            _            doAssertIsSatisfied(0)__        }_    };validates,that,all,the,available,expectations,on,this,endpoint,are,satisfied,or,throw,an,exception,param,timeout,for,empty,endpoints,the,timeout,in,milliseconds,that,we,should,wait,for,the,test,to,be,true;public,void,assert,is,satisfied,long,timeout,for,empty,endpoints,throws,interrupted,exception,log,info,asserting,is,satisfied,this,do,assert,is,satisfied,timeout,for,empty,endpoints,if,assert,period,0,thread,sleep,assert,period,log,info,re,asserting,is,satisfied,after,millis,this,assert,period,do,assert,is,satisfied,0
MockEndpoint -> public void setExpectedCount(int expectedCount);1549264559;Specifies the expected number of message exchanges that should be_received by this endpoint._<p/>_<b>Beware:</b> If you want to expect that <tt>0</tt> messages, then take extra care,_as <tt>0</tt> matches when the tests starts, so you need to set a assert period time_to let the test run for a while to make sure there are still no messages arrived_ for_that use {@link #setAssertPeriod(long)}._An alternative is to use <a href="http://camel.apache.org/notifybuilder.html">NotifyBuilder</a>, and use the notifier_to know when Camel is done routing some messages, before you call the {@link #assertIsSatisfied()} method on the mocks._This allows you to not use a fixed assert period, to speedup testing times._<p/>_If you want to assert that <b>exactly</b> n'th message arrives to this mock_endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.__@param expectedCount the number of message exchanges that should be_expected by this endpoint_@see #setAssertPeriod(long);public void setExpectedCount(int expectedCount) {_        setExpectedMessageCount(expectedCount)__    };specifies,the,expected,number,of,message,exchanges,that,should,be,received,by,this,endpoint,p,b,beware,b,if,you,want,to,expect,that,tt,0,tt,messages,then,take,extra,care,as,tt,0,tt,matches,when,the,tests,starts,so,you,need,to,set,a,assert,period,time,to,let,the,test,run,for,a,while,to,make,sure,there,are,still,no,messages,arrived,for,that,use,link,set,assert,period,long,an,alternative,is,to,use,a,href,http,camel,apache,org,notifybuilder,html,notify,builder,a,and,use,the,notifier,to,know,when,camel,is,done,routing,some,messages,before,you,call,the,link,assert,is,satisfied,method,on,the,mocks,this,allows,you,to,not,use,a,fixed,assert,period,to,speedup,testing,times,p,if,you,want,to,assert,that,b,exactly,b,n,th,message,arrives,to,this,mock,endpoint,then,see,also,the,link,set,assert,period,long,method,for,further,details,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint,see,set,assert,period,long;public,void,set,expected,count,int,expected,count,set,expected,message,count,expected,count
MockEndpoint -> public void setExpectedCount(int expectedCount);1549433221;Specifies the expected number of message exchanges that should be_received by this endpoint._<p/>_<b>Beware:</b> If you want to expect that <tt>0</tt> messages, then take extra care,_as <tt>0</tt> matches when the tests starts, so you need to set a assert period time_to let the test run for a while to make sure there are still no messages arrived_ for_that use {@link #setAssertPeriod(long)}._An alternative is to use <a href="http://camel.apache.org/notifybuilder.html">NotifyBuilder</a>, and use the notifier_to know when Camel is done routing some messages, before you call the {@link #assertIsSatisfied()} method on the mocks._This allows you to not use a fixed assert period, to speedup testing times._<p/>_If you want to assert that <b>exactly</b> n'th message arrives to this mock_endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.__@param expectedCount the number of message exchanges that should be_expected by this endpoint_@see #setAssertPeriod(long);public void setExpectedCount(int expectedCount) {_        setExpectedMessageCount(expectedCount)__    };specifies,the,expected,number,of,message,exchanges,that,should,be,received,by,this,endpoint,p,b,beware,b,if,you,want,to,expect,that,tt,0,tt,messages,then,take,extra,care,as,tt,0,tt,matches,when,the,tests,starts,so,you,need,to,set,a,assert,period,time,to,let,the,test,run,for,a,while,to,make,sure,there,are,still,no,messages,arrived,for,that,use,link,set,assert,period,long,an,alternative,is,to,use,a,href,http,camel,apache,org,notifybuilder,html,notify,builder,a,and,use,the,notifier,to,know,when,camel,is,done,routing,some,messages,before,you,call,the,link,assert,is,satisfied,method,on,the,mocks,this,allows,you,to,not,use,a,fixed,assert,period,to,speedup,testing,times,p,if,you,want,to,assert,that,b,exactly,b,n,th,message,arrives,to,this,mock,endpoint,then,see,also,the,link,set,assert,period,long,method,for,further,details,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint,see,set,assert,period,long;public,void,set,expected,count,int,expected,count,set,expected,message,count,expected,count
MockEndpoint -> public void setExpectedCount(int expectedCount);1550749310;Specifies the expected number of message exchanges that should be_received by this endpoint._<p/>_<b>Beware:</b> If you want to expect that <tt>0</tt> messages, then take extra care,_as <tt>0</tt> matches when the tests starts, so you need to set a assert period time_to let the test run for a while to make sure there are still no messages arrived_ for_that use {@link #setAssertPeriod(long)}._An alternative is to use <a href="http://camel.apache.org/notifybuilder.html">NotifyBuilder</a>, and use the notifier_to know when Camel is done routing some messages, before you call the {@link #assertIsSatisfied()} method on the mocks._This allows you to not use a fixed assert period, to speedup testing times._<p/>_If you want to assert that <b>exactly</b> n'th message arrives to this mock_endpoint, then see also the {@link #setAssertPeriod(long)} method for further details.__@param expectedCount the number of message exchanges that should be_expected by this endpoint_@see #setAssertPeriod(long);public void setExpectedCount(int expectedCount) {_        setExpectedMessageCount(expectedCount)__    };specifies,the,expected,number,of,message,exchanges,that,should,be,received,by,this,endpoint,p,b,beware,b,if,you,want,to,expect,that,tt,0,tt,messages,then,take,extra,care,as,tt,0,tt,matches,when,the,tests,starts,so,you,need,to,set,a,assert,period,time,to,let,the,test,run,for,a,while,to,make,sure,there,are,still,no,messages,arrived,for,that,use,link,set,assert,period,long,an,alternative,is,to,use,a,href,http,camel,apache,org,notifybuilder,html,notify,builder,a,and,use,the,notifier,to,know,when,camel,is,done,routing,some,messages,before,you,call,the,link,assert,is,satisfied,method,on,the,mocks,this,allows,you,to,not,use,a,fixed,assert,period,to,speedup,testing,times,p,if,you,want,to,assert,that,b,exactly,b,n,th,message,arrives,to,this,mock,endpoint,then,see,also,the,link,set,assert,period,long,method,for,further,details,param,expected,count,the,number,of,message,exchanges,that,should,be,expected,by,this,endpoint,see,set,assert,period,long;public,void,set,expected,count,int,expected,count,set,expected,message,count,expected,count
MockEndpoint -> public void setRetainLast(int retainLast);1549264559;Specifies to only retain the last n'th number of received {@link Exchange}s._<p/>_This is used when testing with big data, to reduce memory consumption by not storing_copies of every {@link Exchange} this mock endpoint receives._<p/>_<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}_will still return the actual number of received {@link Exchange}s. For example_if we have received 5000 {@link Exchange}s, and have configured to only retain the last_20 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return <tt>5000</tt>_but there is only the last 20 {@link Exchange}s in the {@link #getExchanges()} and_{@link #getReceivedExchanges()} methods._<p/>_When using this method, then some of the other expectation methods is not supported,_for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first_number of bodies received._<p/>_You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,_to limit both the first and last received.__@param retainLast  to limit and only keep the last n'th received {@link Exchange}s, use_<tt>0</tt> to not retain any messages, or <tt>-1</tt> to retain all._@see #setRetainFirst(int);public void setRetainLast(int retainLast) {_        this.retainLast = retainLast__    };specifies,to,only,retain,the,last,n,th,number,of,received,link,exchange,s,p,this,is,used,when,testing,with,big,data,to,reduce,memory,consumption,by,not,storing,copies,of,every,link,exchange,this,mock,endpoint,receives,p,b,important,b,when,using,this,limitation,then,the,link,get,received,counter,will,still,return,the,actual,number,of,received,link,exchange,s,for,example,if,we,have,received,5000,link,exchange,s,and,have,configured,to,only,retain,the,last,20,link,exchange,s,then,the,link,get,received,counter,will,still,return,tt,5000,tt,but,there,is,only,the,last,20,link,exchange,s,in,the,link,get,exchanges,and,link,get,received,exchanges,methods,p,when,using,this,method,then,some,of,the,other,expectation,methods,is,not,supported,for,example,the,link,expected,bodies,received,object,sets,a,expectation,on,the,first,number,of,bodies,received,p,you,can,configure,both,link,set,retain,first,int,and,link,set,retain,last,int,methods,to,limit,both,the,first,and,last,received,param,retain,last,to,limit,and,only,keep,the,last,n,th,received,link,exchange,s,use,tt,0,tt,to,not,retain,any,messages,or,tt,1,tt,to,retain,all,see,set,retain,first,int;public,void,set,retain,last,int,retain,last,this,retain,last,retain,last
MockEndpoint -> public void setRetainLast(int retainLast);1549433221;Specifies to only retain the last n'th number of received {@link Exchange}s._<p/>_This is used when testing with big data, to reduce memory consumption by not storing_copies of every {@link Exchange} this mock endpoint receives._<p/>_<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}_will still return the actual number of received {@link Exchange}s. For example_if we have received 5000 {@link Exchange}s, and have configured to only retain the last_20 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return <tt>5000</tt>_but there is only the last 20 {@link Exchange}s in the {@link #getExchanges()} and_{@link #getReceivedExchanges()} methods._<p/>_When using this method, then some of the other expectation methods is not supported,_for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first_number of bodies received._<p/>_You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,_to limit both the first and last received.__@param retainLast  to limit and only keep the last n'th received {@link Exchange}s, use_<tt>0</tt> to not retain any messages, or <tt>-1</tt> to retain all._@see #setRetainFirst(int);public void setRetainLast(int retainLast) {_        this.retainLast = retainLast__    };specifies,to,only,retain,the,last,n,th,number,of,received,link,exchange,s,p,this,is,used,when,testing,with,big,data,to,reduce,memory,consumption,by,not,storing,copies,of,every,link,exchange,this,mock,endpoint,receives,p,b,important,b,when,using,this,limitation,then,the,link,get,received,counter,will,still,return,the,actual,number,of,received,link,exchange,s,for,example,if,we,have,received,5000,link,exchange,s,and,have,configured,to,only,retain,the,last,20,link,exchange,s,then,the,link,get,received,counter,will,still,return,tt,5000,tt,but,there,is,only,the,last,20,link,exchange,s,in,the,link,get,exchanges,and,link,get,received,exchanges,methods,p,when,using,this,method,then,some,of,the,other,expectation,methods,is,not,supported,for,example,the,link,expected,bodies,received,object,sets,a,expectation,on,the,first,number,of,bodies,received,p,you,can,configure,both,link,set,retain,first,int,and,link,set,retain,last,int,methods,to,limit,both,the,first,and,last,received,param,retain,last,to,limit,and,only,keep,the,last,n,th,received,link,exchange,s,use,tt,0,tt,to,not,retain,any,messages,or,tt,1,tt,to,retain,all,see,set,retain,first,int;public,void,set,retain,last,int,retain,last,this,retain,last,retain,last
MockEndpoint -> public void setRetainLast(int retainLast);1550749310;Specifies to only retain the last n'th number of received {@link Exchange}s._<p/>_This is used when testing with big data, to reduce memory consumption by not storing_copies of every {@link Exchange} this mock endpoint receives._<p/>_<b>Important:</b> When using this limitation, then the {@link #getReceivedCounter()}_will still return the actual number of received {@link Exchange}s. For example_if we have received 5000 {@link Exchange}s, and have configured to only retain the last_20 {@link Exchange}s, then the {@link #getReceivedCounter()} will still return <tt>5000</tt>_but there is only the last 20 {@link Exchange}s in the {@link #getExchanges()} and_{@link #getReceivedExchanges()} methods._<p/>_When using this method, then some of the other expectation methods is not supported,_for example the {@link #expectedBodiesReceived(Object...)} sets a expectation on the first_number of bodies received._<p/>_You can configure both {@link #setRetainFirst(int)} and {@link #setRetainLast(int)} methods,_to limit both the first and last received.__@param retainLast  to limit and only keep the last n'th received {@link Exchange}s, use_<tt>0</tt> to not retain any messages, or <tt>-1</tt> to retain all._@see #setRetainFirst(int);public void setRetainLast(int retainLast) {_        this.retainLast = retainLast__    };specifies,to,only,retain,the,last,n,th,number,of,received,link,exchange,s,p,this,is,used,when,testing,with,big,data,to,reduce,memory,consumption,by,not,storing,copies,of,every,link,exchange,this,mock,endpoint,receives,p,b,important,b,when,using,this,limitation,then,the,link,get,received,counter,will,still,return,the,actual,number,of,received,link,exchange,s,for,example,if,we,have,received,5000,link,exchange,s,and,have,configured,to,only,retain,the,last,20,link,exchange,s,then,the,link,get,received,counter,will,still,return,tt,5000,tt,but,there,is,only,the,last,20,link,exchange,s,in,the,link,get,exchanges,and,link,get,received,exchanges,methods,p,when,using,this,method,then,some,of,the,other,expectation,methods,is,not,supported,for,example,the,link,expected,bodies,received,object,sets,a,expectation,on,the,first,number,of,bodies,received,p,you,can,configure,both,link,set,retain,first,int,and,link,set,retain,last,int,methods,to,limit,both,the,first,and,last,received,param,retain,last,to,limit,and,only,keep,the,last,n,th,received,link,exchange,s,use,tt,0,tt,to,not,retain,any,messages,or,tt,1,tt,to,retain,all,see,set,retain,first,int;public,void,set,retain,last,int,retain,last,this,retain,last,retain,last
MockEndpoint -> public static void assertIsSatisfied(CamelContext context, long timeout, TimeUnit unit) throws InterruptedException;1549264559;Asserts that all the expectations on any {@link MockEndpoint} instances registered_in the given context are valid__@param context the camel context used to find all the available endpoints to be asserted_@param timeout timeout_@param unit    time unit;public static void assertIsSatisfied(CamelContext context, long timeout, TimeUnit unit) throws InterruptedException {_        ObjectHelper.notNull(context, "camelContext")__        ObjectHelper.notNull(unit, "unit")__        Collection<Endpoint> endpoints = context.getEndpoints()__        long millis = unit.toMillis(timeout)__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.setResultWaitTime(millis)__                mockEndpoint.assertIsSatisfied()__            }_        }_    };asserts,that,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,are,valid,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,be,asserted,param,timeout,timeout,param,unit,time,unit;public,static,void,assert,is,satisfied,camel,context,context,long,timeout,time,unit,unit,throws,interrupted,exception,object,helper,not,null,context,camel,context,object,helper,not,null,unit,unit,collection,endpoint,endpoints,context,get,endpoints,long,millis,unit,to,millis,timeout,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,set,result,wait,time,millis,mock,endpoint,assert,is,satisfied
MockEndpoint -> public static void assertIsSatisfied(CamelContext context, long timeout, TimeUnit unit) throws InterruptedException;1549433221;Asserts that all the expectations on any {@link MockEndpoint} instances registered_in the given context are valid__@param context the camel context used to find all the available endpoints to be asserted_@param timeout timeout_@param unit    time unit;public static void assertIsSatisfied(CamelContext context, long timeout, TimeUnit unit) throws InterruptedException {_        ObjectHelper.notNull(context, "camelContext")__        ObjectHelper.notNull(unit, "unit")__        Collection<Endpoint> endpoints = context.getEndpoints()__        long millis = unit.toMillis(timeout)__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.setResultWaitTime(millis)__                mockEndpoint.assertIsSatisfied()__            }_        }_    };asserts,that,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,are,valid,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,be,asserted,param,timeout,timeout,param,unit,time,unit;public,static,void,assert,is,satisfied,camel,context,context,long,timeout,time,unit,unit,throws,interrupted,exception,object,helper,not,null,context,camel,context,object,helper,not,null,unit,unit,collection,endpoint,endpoints,context,get,endpoints,long,millis,unit,to,millis,timeout,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,set,result,wait,time,millis,mock,endpoint,assert,is,satisfied
MockEndpoint -> public static void assertIsSatisfied(CamelContext context, long timeout, TimeUnit unit) throws InterruptedException;1550749310;Asserts that all the expectations on any {@link MockEndpoint} instances registered_in the given context are valid__@param context the camel context used to find all the available endpoints to be asserted_@param timeout timeout_@param unit    time unit;public static void assertIsSatisfied(CamelContext context, long timeout, TimeUnit unit) throws InterruptedException {_        ObjectHelper.notNull(context, "camelContext")__        ObjectHelper.notNull(unit, "unit")__        Collection<Endpoint> endpoints = context.getEndpoints()__        long millis = unit.toMillis(timeout)__        for (Endpoint endpoint : endpoints) {_            _            if (endpoint instanceof InterceptSendToEndpoint) {_                endpoint = ((InterceptSendToEndpoint) endpoint).getOriginalEndpoint()__            }_            if (endpoint instanceof MockEndpoint) {_                MockEndpoint mockEndpoint = (MockEndpoint) endpoint__                mockEndpoint.setResultWaitTime(millis)__                mockEndpoint.assertIsSatisfied()__            }_        }_    };asserts,that,all,the,expectations,on,any,link,mock,endpoint,instances,registered,in,the,given,context,are,valid,param,context,the,camel,context,used,to,find,all,the,available,endpoints,to,be,asserted,param,timeout,timeout,param,unit,time,unit;public,static,void,assert,is,satisfied,camel,context,context,long,timeout,time,unit,unit,throws,interrupted,exception,object,helper,not,null,context,camel,context,object,helper,not,null,unit,unit,collection,endpoint,endpoints,context,get,endpoints,long,millis,unit,to,millis,timeout,for,endpoint,endpoint,endpoints,if,endpoint,instanceof,intercept,send,to,endpoint,endpoint,intercept,send,to,endpoint,endpoint,get,original,endpoint,if,endpoint,instanceof,mock,endpoint,mock,endpoint,mock,endpoint,mock,endpoint,endpoint,mock,endpoint,set,result,wait,time,millis,mock,endpoint,assert,is,satisfied
