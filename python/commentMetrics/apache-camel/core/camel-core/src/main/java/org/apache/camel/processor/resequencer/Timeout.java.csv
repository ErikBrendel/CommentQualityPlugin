commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Returns the timeout handler that has been registered for notification.  *  * @return the timeout handler.  */ ;/**  * Returns the timeout handler that has been registered for notification.  *  * @return the timeout handler.  */ public TimeoutHandler getTimeoutHandlers() {     return timeoutHandler. }
true;public;1;3;/**  * Sets a timeout handler for receiving timeout notifications.  *  * @param timeoutHandler  *            a timeout handler.  */ ;/**  * Sets a timeout handler for receiving timeout notifications.  *  * @param timeoutHandler  *            a timeout handler.  */ public void setTimeoutHandler(TimeoutHandler timeoutHandler) {     this.timeoutHandler = timeoutHandler. }
true;public;0;3;/**  * Schedules this timeout task.  */ ;/**  * Schedules this timeout task.  */ public void schedule() {     timer.schedule(this, timeout). }
true;public;0;4;/**  * Notifies the timeout handler about the scheduled timeout.  */ ;/**  * Notifies the timeout handler about the scheduled timeout.  */ @Override public void run() {     timeoutHandler.timeout(this). }
