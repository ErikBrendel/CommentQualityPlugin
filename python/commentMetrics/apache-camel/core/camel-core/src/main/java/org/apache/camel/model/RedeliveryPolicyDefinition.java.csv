commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "RedeliveryPolicy[maximumRedeliveries: " + maximumRedeliveries + "]". }
true;public;0;4;/**  * Allow synchronous delayed redelivery. The route, in particular the consumer's component,  * must support the Asynchronous Routing Engine (e.g. seda).  *  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Allow synchronous delayed redelivery. The route, in particular the consumer's component,  * must support the Asynchronous Routing Engine (e.g. seda).  *  * @return the builder  */ public RedeliveryPolicyDefinition asyncDelayedRedelivery() {     setAsyncDelayedRedelivery("true").     return this. }
true;public;1;3;/**  * Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.  *  * @param allowRedeliveryWhileStopping <tt>true</tt> to allow redelivery, <tt>false</tt> to reject redeliveries  * @return the builder  */ ;/**  * Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.  *  * @param allowRedeliveryWhileStopping <tt>true</tt> to allow redelivery, <tt>false</tt> to reject redeliveries  * @return the builder  */ public RedeliveryPolicyDefinition allowRedeliveryWhileStopping(boolean allowRedeliveryWhileStopping) {     return allowRedeliveryWhileStopping(Boolean.toString(allowRedeliveryWhileStopping)). }
true;public;1;4;/**  * Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.  *  * @param allowRedeliveryWhileStopping <tt>true</tt> to allow redelivery, <tt>false</tt> to reject redeliveries  * @return the builder  */ ;/**  * Controls whether to allow redelivery while stopping/shutting down a route that uses error handling.  *  * @param allowRedeliveryWhileStopping <tt>true</tt> to allow redelivery, <tt>false</tt> to reject redeliveries  * @return the builder  */ public RedeliveryPolicyDefinition allowRedeliveryWhileStopping(String allowRedeliveryWhileStopping) {     setAllowRedeliveryWhileStopping(allowRedeliveryWhileStopping).     return this. }
true;public;1;3;/**  * Sets the back off multiplier  *  * @param backOffMultiplier  the back off multiplier  * @return the builder  */ ;/**  * Sets the back off multiplier  *  * @param backOffMultiplier  the back off multiplier  * @return the builder  */ public RedeliveryPolicyDefinition backOffMultiplier(double backOffMultiplier) {     return backOffMultiplier(Double.toString(backOffMultiplier)). }
true;public;1;4;/**  * Sets the back off multiplier (supports property placeholders)  *  * @param backOffMultiplier  the back off multiplier  * @return the builder  */ ;/**  * Sets the back off multiplier (supports property placeholders)  *  * @param backOffMultiplier  the back off multiplier  * @return the builder  */ public RedeliveryPolicyDefinition backOffMultiplier(String backOffMultiplier) {     setBackOffMultiplier(backOffMultiplier).     return this. }
true;public;1;4;/**  * Sets the collision avoidance percentage  *  * @param collisionAvoidancePercent  the percentage  * @return the builder  */ ;/**  * Sets the collision avoidance percentage  *  * @param collisionAvoidancePercent  the percentage  * @return the builder  */ public RedeliveryPolicyDefinition collisionAvoidancePercent(double collisionAvoidancePercent) {     setCollisionAvoidanceFactor(Double.toString(collisionAvoidancePercent * 0.01d)).     return this. }
true;public;1;3;/**  * Sets the collision avoidance factor  *  * @param collisionAvoidanceFactor  the factor  * @return the builder  */ ;/**  * Sets the collision avoidance factor  *  * @param collisionAvoidanceFactor  the factor  * @return the builder  */ public RedeliveryPolicyDefinition collisionAvoidanceFactor(double collisionAvoidanceFactor) {     return collisionAvoidanceFactor(Double.toString(collisionAvoidanceFactor)). }
true;public;1;4;/**  * Sets the collision avoidance factor (supports property placeholders)  *  * @param collisionAvoidanceFactor  the factor  * @return the builder  */ ;/**  * Sets the collision avoidance factor (supports property placeholders)  *  * @param collisionAvoidanceFactor  the factor  * @return the builder  */ public RedeliveryPolicyDefinition collisionAvoidanceFactor(String collisionAvoidanceFactor) {     setCollisionAvoidanceFactor(collisionAvoidanceFactor).     return this. }
true;public;1;3;/**  * Sets the initial redelivery delay  *  * @param delay  delay in millis  * @return the builder  */ ;/**  * Sets the initial redelivery delay  *  * @param delay  delay in millis  * @return the builder  */ public RedeliveryPolicyDefinition redeliveryDelay(long delay) {     return redeliveryDelay(Long.toString(delay)). }
true;public;1;4;/**  * Sets the initial redelivery delay (supports property placeholders)  *  * @param delay  delay in millis  * @return the builder  */ ;/**  * Sets the initial redelivery delay (supports property placeholders)  *  * @param delay  delay in millis  * @return the builder  */ public RedeliveryPolicyDefinition redeliveryDelay(String delay) {     setRedeliveryDelay(delay).     return this. }
true;public;1;4;/**  * Sets the logging level to use when retries has exhausted  *  * @param retriesExhaustedLogLevel  the logging level  * @return the builder  */ ;/**  * Sets the logging level to use when retries has exhausted  *  * @param retriesExhaustedLogLevel  the logging level  * @return the builder  */ public RedeliveryPolicyDefinition retriesExhaustedLogLevel(LoggingLevel retriesExhaustedLogLevel) {     setRetriesExhaustedLogLevel(retriesExhaustedLogLevel).     return this. }
true;public;1;4;/**  * Sets the logging level to use for logging retry attempts  *  * @param retryAttemptedLogLevel  the logging level  * @return the builder  */ ;/**  * Sets the logging level to use for logging retry attempts  *  * @param retryAttemptedLogLevel  the logging level  * @return the builder  */ public RedeliveryPolicyDefinition retryAttemptedLogLevel(LoggingLevel retryAttemptedLogLevel) {     setRetryAttemptedLogLevel(retryAttemptedLogLevel).     return this. }
true;public;1;4;/**  * Sets the interval to use for logging retry attempts  *  * @param retryAttemptedLogInterval  the retry logging interval  * @return the builder  */ ;/**  * Sets the interval to use for logging retry attempts  *  * @param retryAttemptedLogInterval  the retry logging interval  * @return the builder  */ public RedeliveryPolicyDefinition retryAttemptedLogInterval(String retryAttemptedLogInterval) {     setRetryAttemptedLogInterval(retryAttemptedLogInterval).     return this. }
true;public;1;3;/**  * Sets whether stack traces should be logged.  * Can be used to include or reduce verbose.  *  * @param logStackTrace  whether stack traces should be logged or not  * @return the builder  */ ;/**  * Sets whether stack traces should be logged.  * Can be used to include or reduce verbose.  *  * @param logStackTrace  whether stack traces should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logStackTrace(boolean logStackTrace) {     return logStackTrace(Boolean.toString(logStackTrace)). }
true;public;1;4;/**  * Sets whether stack traces should be logged (supports property placeholders)  * Can be used to include or reduce verbose.  *  * @param logStackTrace  whether stack traces should be logged or not  * @return the builder  */ ;/**  * Sets whether stack traces should be logged (supports property placeholders)  * Can be used to include or reduce verbose.  *  * @param logStackTrace  whether stack traces should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logStackTrace(String logStackTrace) {     setLogStackTrace(logStackTrace).     return this. }
true;public;1;3;/**  * Sets whether stack traces should be logged when an retry attempt failed.  * Can be used to include or reduce verbose.  *  * @param logRetryStackTrace  whether stack traces should be logged or not  * @return the builder  */ ;/**  * Sets whether stack traces should be logged when an retry attempt failed.  * Can be used to include or reduce verbose.  *  * @param logRetryStackTrace  whether stack traces should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logRetryStackTrace(boolean logRetryStackTrace) {     return logRetryStackTrace(Boolean.toString(logRetryStackTrace)). }
true;public;1;4;/**  * Sets whether stack traces should be logged when an retry attempt failed (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logRetryStackTrace  whether stack traces should be logged or not  * @return the builder  */ ;/**  * Sets whether stack traces should be logged when an retry attempt failed (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logRetryStackTrace  whether stack traces should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logRetryStackTrace(String logRetryStackTrace) {     setLogRetryStackTrace(logRetryStackTrace).     return this. }
true;public;1;3;/**  * Sets whether retry attempts should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logRetryAttempted  whether retry attempts should be logged or not  * @return the builder  */ ;/**  * Sets whether retry attempts should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logRetryAttempted  whether retry attempts should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logRetryAttempted(boolean logRetryAttempted) {     return logRetryAttempted(Boolean.toString(logRetryAttempted)). }
true;public;1;4;/**  * Sets whether retry attempts should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logRetryAttempted  whether retry attempts should be logged or not  * @return the builder  */ ;/**  * Sets whether retry attempts should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logRetryAttempted  whether retry attempts should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logRetryAttempted(String logRetryAttempted) {     setLogRetryAttempted(logRetryAttempted).     return this. }
true;public;1;3;/**  * Sets whether handled exceptions should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logHandled  whether handled exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether handled exceptions should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logHandled  whether handled exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logHandled(boolean logHandled) {     return logHandled(Boolean.toString(logHandled)). }
true;public;1;4;/**  * Sets whether handled exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logHandled  whether handled exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether handled exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logHandled  whether handled exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logHandled(String logHandled) {     setLogHandled(logHandled).     return this. }
true;public;1;3;/**  * Sets whether new exceptions should be logged or not.  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  *  * @param logNewException  whether new exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether new exceptions should be logged or not.  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  *  * @param logNewException  whether new exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logNewException(boolean logNewException) {     return logNewException(Boolean.toString(logNewException)). }
true;public;1;4;/**  * Sets whether new exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  *  * @param logNewException  whether new exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether new exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  *  * @param logNewException  whether new exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logNewException(String logNewException) {     setLogNewException(logNewException).     return this. }
true;public;1;3;/**  * Sets whether continued exceptions should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logContinued  whether continued exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether continued exceptions should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logContinued  whether continued exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logContinued(boolean logContinued) {     return logContinued(Boolean.toString(logContinued)). }
true;public;1;4;/**  * Sets whether continued exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logContinued  whether continued exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether continued exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logContinued  whether continued exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logContinued(String logContinued) {     setLogContinued(logContinued).     return this. }
true;public;1;3;/**  * Sets whether exhausted exceptions should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logExhausted  whether exhausted exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether exhausted exceptions should be logged or not.  * Can be used to include or reduce verbose.  *  * @param logExhausted  whether exhausted exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logExhausted(boolean logExhausted) {     return logExhausted(Boolean.toString(logExhausted)). }
true;public;1;4;/**  * Sets whether exhausted exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logExhausted  whether exhausted exceptions should be logged or not  * @return the builder  */ ;/**  * Sets whether exhausted exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logExhausted  whether exhausted exceptions should be logged or not  * @return the builder  */ public RedeliveryPolicyDefinition logExhausted(String logExhausted) {     setLogExhausted(logExhausted).     return this. }
true;public;1;4;/**  * Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logExhaustedMessageHistory  whether exhausted exceptions should be logged with message history  * @return the builder  */ ;/**  * Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logExhaustedMessageHistory  whether exhausted exceptions should be logged with message history  * @return the builder  */ public RedeliveryPolicyDefinition logExhaustedMessageHistory(boolean logExhaustedMessageHistory) {     setLogExhaustedMessageHistory(Boolean.toString(logExhaustedMessageHistory)).     return this. }
true;public;1;4;/**  * Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logExhaustedMessageHistory  whether exhausted exceptions should be logged with message history  * @return the builder  */ ;/**  * Sets whether exhausted exceptions should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose.  *  * @param logExhaustedMessageHistory  whether exhausted exceptions should be logged with message history  * @return the builder  */ public RedeliveryPolicyDefinition logExhaustedMessageHistory(String logExhaustedMessageHistory) {     setLogExhaustedMessageHistory(logExhaustedMessageHistory).     return this. }
true;public;1;4;/**  * Sets whether exhausted message body should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose. Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  *  * @param logExhaustedMessageBody  whether exhausted message body should be logged with message history  * @return the builder  */ ;/**  * Sets whether exhausted message body should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose. Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  *  * @param logExhaustedMessageBody  whether exhausted message body should be logged with message history  * @return the builder  */ public RedeliveryPolicyDefinition logExhaustedMessageBody(boolean logExhaustedMessageBody) {     setLogExhaustedMessageBody(Boolean.toString(logExhaustedMessageBody)).     return this. }
true;public;1;4;/**  * Sets whether exhausted message body should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose. Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  *  * @param logExhaustedMessageBody  whether exhausted message body should be logged with message history  * @return the builder  */ ;/**  * Sets whether exhausted message body should be logged including message history or not (supports property placeholders).  * Can be used to include or reduce verbose. Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  *  * @param logExhaustedMessageBody  whether exhausted message body should be logged with message history  * @return the builder  */ public RedeliveryPolicyDefinition logExhaustedMessageBody(String logExhaustedMessageBody) {     setLogExhaustedMessageBody(logExhaustedMessageBody).     return this. }
true;public;1;3;/**  * Sets the maximum redeliveries  * <ul>  *   <li>x = redeliver at most x times</li>  *   <li>0 = no redeliveries</li>  *   <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries  the value  * @return the builder  */ ;/**  * Sets the maximum redeliveries  * <ul>  *   <li>x = redeliver at most x times</li>  *   <li>0 = no redeliveries</li>  *   <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries  the value  * @return the builder  */ public RedeliveryPolicyDefinition maximumRedeliveries(int maximumRedeliveries) {     return maximumRedeliveries(Integer.toString(maximumRedeliveries)). }
true;public;1;4;/**  * Sets the maximum redeliveries (supports property placeholders)  * <ul>  *   <li>x = redeliver at most x times</li>  *   <li>0 = no redeliveries</li>  *   <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries  the value  * @return the builder  */ ;/**  * Sets the maximum redeliveries (supports property placeholders)  * <ul>  *   <li>x = redeliver at most x times</li>  *   <li>0 = no redeliveries</li>  *   <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries  the value  * @return the builder  */ public RedeliveryPolicyDefinition maximumRedeliveries(String maximumRedeliveries) {     setMaximumRedeliveries(maximumRedeliveries).     return this. }
true;public;0;4;/**  * Turn on collision avoidance.  *  * @return the builder  */ ;/**  * Turn on collision avoidance.  *  * @return the builder  */ public RedeliveryPolicyDefinition useCollisionAvoidance() {     setUseCollisionAvoidance("true").     return this. }
true;public;0;4;/**  * Turn on exponential backk off  *  * @return the builder  */ ;/**  * Turn on exponential backk off  *  * @return the builder  */ public RedeliveryPolicyDefinition useExponentialBackOff() {     setUseExponentialBackOff("true").     return this. }
true;public;1;3;/**  * Sets the maximum delay between redelivery  *  * @param maximumRedeliveryDelay  the delay in millis  * @return the builder  */ ;/**  * Sets the maximum delay between redelivery  *  * @param maximumRedeliveryDelay  the delay in millis  * @return the builder  */ public RedeliveryPolicyDefinition maximumRedeliveryDelay(long maximumRedeliveryDelay) {     return maximumRedeliveryDelay(Long.toString(maximumRedeliveryDelay)). }
true;public;1;4;/**  * Sets the maximum delay between redelivery (supports property placeholders)  *  * @param maximumRedeliveryDelay  the delay in millis  * @return the builder  */ ;/**  * Sets the maximum delay between redelivery (supports property placeholders)  *  * @param maximumRedeliveryDelay  the delay in millis  * @return the builder  */ public RedeliveryPolicyDefinition maximumRedeliveryDelay(String maximumRedeliveryDelay) {     setMaximumRedeliveryDelay(maximumRedeliveryDelay).     return this. }
true;public;1;4;/**  * Sets the delay pattern with delay intervals.  *  * @param delayPattern the delay pattern  * @return the builder  */ ;/**  * Sets the delay pattern with delay intervals.  *  * @param delayPattern the delay pattern  * @return the builder  */ public RedeliveryPolicyDefinition delayPattern(String delayPattern) {     setDelayPattern(delayPattern).     return this. }
true;public;1;4;/**  * Sets the reference of the instance of {@link org.apache.camel.spi.ExchangeFormatter} to generate the log message from exchange.  *  * @param exchangeFormatterRef name of the instance of {@link org.apache.camel.spi.ExchangeFormatter}  * @return the builder  */ ;/**  * Sets the reference of the instance of {@link org.apache.camel.spi.ExchangeFormatter} to generate the log message from exchange.  *  * @param exchangeFormatterRef name of the instance of {@link org.apache.camel.spi.ExchangeFormatter}  * @return the builder  */ public RedeliveryPolicyDefinition exchangeFormatterRef(String exchangeFormatterRef) {     setExchangeFormatterRef(exchangeFormatterRef).     return this. }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public String getMaximumRedeliveries() {     return maximumRedeliveries. }
false;public;1;3;;public void setMaximumRedeliveries(String maximumRedeliveries) {     this.maximumRedeliveries = maximumRedeliveries. }
false;public;0;3;;public String getRedeliveryDelay() {     return redeliveryDelay. }
false;public;1;3;;public void setRedeliveryDelay(String redeliveryDelay) {     this.redeliveryDelay = redeliveryDelay. }
false;public;0;3;;public String getAsyncDelayedRedelivery() {     return asyncDelayedRedelivery. }
false;public;1;3;;public void setAsyncDelayedRedelivery(String asyncDelayedRedelivery) {     this.asyncDelayedRedelivery = asyncDelayedRedelivery. }
false;public;0;3;;public String getBackOffMultiplier() {     return backOffMultiplier. }
false;public;1;3;;public void setBackOffMultiplier(String backOffMultiplier) {     this.backOffMultiplier = backOffMultiplier. }
false;public;0;3;;public String getUseExponentialBackOff() {     return useExponentialBackOff. }
false;public;1;3;;public void setUseExponentialBackOff(String useExponentialBackOff) {     this.useExponentialBackOff = useExponentialBackOff. }
false;public;0;3;;public String getCollisionAvoidanceFactor() {     return collisionAvoidanceFactor. }
false;public;1;3;;public void setCollisionAvoidanceFactor(String collisionAvoidanceFactor) {     this.collisionAvoidanceFactor = collisionAvoidanceFactor. }
false;public;0;3;;public String getUseCollisionAvoidance() {     return useCollisionAvoidance. }
false;public;1;3;;public void setUseCollisionAvoidance(String useCollisionAvoidance) {     this.useCollisionAvoidance = useCollisionAvoidance. }
false;public;0;3;;public String getMaximumRedeliveryDelay() {     return maximumRedeliveryDelay. }
false;public;1;3;;public void setMaximumRedeliveryDelay(String maximumRedeliveryDelay) {     this.maximumRedeliveryDelay = maximumRedeliveryDelay. }
false;public;0;3;;public LoggingLevel getRetriesExhaustedLogLevel() {     return retriesExhaustedLogLevel. }
false;public;1;3;;public void setRetriesExhaustedLogLevel(LoggingLevel retriesExhaustedLogLevel) {     this.retriesExhaustedLogLevel = retriesExhaustedLogLevel. }
false;public;0;3;;public LoggingLevel getRetryAttemptedLogLevel() {     return retryAttemptedLogLevel. }
false;public;1;3;;public void setRetryAttemptedLogLevel(LoggingLevel retryAttemptedLogLevel) {     this.retryAttemptedLogLevel = retryAttemptedLogLevel. }
false;public;0;3;;public String getRetryAttemptedLogInterval() {     return retryAttemptedLogInterval. }
false;public;1;3;;public void setRetryAttemptedLogInterval(String retryAttemptedLogInterval) {     this.retryAttemptedLogInterval = retryAttemptedLogInterval. }
false;public;0;3;;public String getLogRetryAttempted() {     return logRetryAttempted. }
false;public;1;3;;public void setLogRetryAttempted(String logRetryAttempted) {     this.logRetryAttempted = logRetryAttempted. }
false;public;0;3;;public String getLogStackTrace() {     return logStackTrace. }
false;public;1;3;;public void setLogStackTrace(String logStackTrace) {     this.logStackTrace = logStackTrace. }
false;public;0;3;;public String getLogRetryStackTrace() {     return logRetryStackTrace. }
false;public;1;3;;public void setLogRetryStackTrace(String logRetryStackTrace) {     this.logRetryStackTrace = logRetryStackTrace. }
false;public;0;3;;public String getLogHandled() {     return logHandled. }
false;public;1;3;;public void setLogHandled(String logHandled) {     this.logHandled = logHandled. }
false;public;0;3;;public String getLogNewException() {     return logNewException. }
false;public;1;3;;public void setLogNewException(String logNewException) {     this.logNewException = logNewException. }
false;public;0;3;;public String getLogContinued() {     return logContinued. }
false;public;1;3;;public void setLogContinued(String logContinued) {     this.logContinued = logContinued. }
false;public;0;3;;public String getLogExhausted() {     return logExhausted. }
false;public;1;3;;public void setLogExhausted(String logExhausted) {     this.logExhausted = logExhausted. }
false;public;0;3;;public String getLogExhaustedMessageHistory() {     return logExhaustedMessageHistory. }
false;public;1;3;;public void setLogExhaustedMessageHistory(String logExhaustedMessageHistory) {     this.logExhaustedMessageHistory = logExhaustedMessageHistory. }
false;public;0;3;;public String getLogExhaustedMessageBody() {     return logExhaustedMessageBody. }
false;public;1;3;;public void setLogExhaustedMessageBody(String logExhaustedMessageBody) {     this.logExhaustedMessageBody = logExhaustedMessageBody. }
false;public;0;3;;public String getDisableRedelivery() {     return disableRedelivery. }
true;public;1;3;/**  * Disables redelivery (same as setting maximum redeliveries to 0)  */ ;/**  * Disables redelivery (same as setting maximum redeliveries to 0)  */ public void setDisableRedelivery(String disableRedelivery) {     this.disableRedelivery = disableRedelivery. }
false;public;0;3;;public String getDelayPattern() {     return delayPattern. }
false;public;1;3;;public void setDelayPattern(String delayPattern) {     this.delayPattern = delayPattern. }
false;public;0;3;;public String getAllowRedeliveryWhileStopping() {     return allowRedeliveryWhileStopping. }
false;public;1;3;;public void setAllowRedeliveryWhileStopping(String allowRedeliveryWhileStopping) {     this.allowRedeliveryWhileStopping = allowRedeliveryWhileStopping. }
false;public;0;3;;public String getExchangeFormatterRef() {     return exchangeFormatterRef. }
false;public;1;3;;public void setExchangeFormatterRef(String exchangeFormatterRef) {     this.exchangeFormatterRef = exchangeFormatterRef. }
