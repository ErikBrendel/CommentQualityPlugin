commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     if (processor != null) {         processor.process(exchange).     } }
true;public;1;4;/**  * Define a {@link Processor} which targets the Exchange.  */ ;// ******************************* // Exchange // ******************************* /**  * Define a {@link Processor} which targets the Exchange.  */ public T exchange(final Consumer<Exchange> consumer) {     processor = consumer::accept.     return parent. }
true;public;1;4;/**  * Define a {@link Processor} which targets the Exchange In Message.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .message(m -> m.setHeader("HasBody", m.getBody() != null)).  * }</pre></blockquote>  */ ;// ******************************* // Message // ******************************* /**  * Define a {@link Processor} which targets the Exchange In Message.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .message(m -> m.setHeader("HasBody", m.getBody() != null)).  * }</pre></blockquote>  */ public T message(final Consumer<Message> consumer) {     processor = e -> consumer.accept(e.getIn()).     return parent. }
true;public;1;4;/**  * Define a {@link Processor} which targets the Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body(System.out::println).  * }</pre></blockquote>  */ ;// ******************************* // Body // ******************************* /**  * Define a {@link Processor} which targets the Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body(System.out::println).  * }</pre></blockquote>  */ public T body(final Consumer<Object> consumer) {     processor = e -> consumer.accept(e.getIn().getBody()).     return parent. }
true;public;2;4;/**  * Define a {@link Processor} which targets the typed Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body(MyObject.class, MyObject::dumpToStdOut).  * }</pre></blockquote>  */ ;/**  * Define a {@link Processor} which targets the typed Exchange In Body.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body(MyObject.class, MyObject::dumpToStdOut).  * }</pre></blockquote>  */ public <B> T body(Class<B> type, final Consumer<B> consumer) {     processor = e -> consumer.accept(e.getIn().getBody(type)).     return parent. }
true;public;1;7;/**  * Define a {@link Processor} which targets the Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body((b, h) -> h.put("ClassName", b.getClass().getName())).  * }</pre></blockquote>  */ ;/**  * Define a {@link Processor} which targets the Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body((b, h) -> h.put("ClassName", b.getClass().getName())).  * }</pre></blockquote>  */ public T body(final BiConsumer<Object, Map<String, Object>> consumer) {     processor = e -> consumer.accept(e.getIn().getBody(), e.getIn().getHeaders()).     return parent. }
true;public;2;7;/**  * Define a {@link Processor} which targets the typed Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body(MyObject.class, (b, h) -> {  *             if (h.containsKey("dump")) {  *                  b.dumpToStdOut().  *             }  *         }).  * }</pre></blockquote>  */ ;/**  * Define a {@link Processor} which targets the typed Exchange In Body and its Headers.  *  * <blockquote><pre>{@code  * from("direct:aggregate")  *     .process()  *         .body(MyObject.class, (b, h) -> {  *             if (h.containsKey("dump")) {  *                  b.dumpToStdOut().  *             }  *         }).  * }</pre></blockquote>  */ public <B> T body(Class<B> type, final BiConsumer<B, Map<String, Object>> consumer) {     processor = e -> consumer.accept(e.getIn().getBody(type), e.getIn().getHeaders()).     return parent. }
