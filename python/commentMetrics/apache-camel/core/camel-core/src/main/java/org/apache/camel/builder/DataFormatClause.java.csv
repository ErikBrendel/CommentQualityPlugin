commented;modifiers;parameterAmount;loc;comment;code
true;public;0;3;/**  * Uses the Avro data format  */ ;/**  * Uses the Avro data format  */ public T avro() {     return dataFormat(new AvroDataFormat()). }
false;public;1;5;;public T avro(Object schema) {     AvroDataFormat dataFormat = new AvroDataFormat().     dataFormat.setSchema(schema).     return dataFormat(dataFormat). }
false;public;1;3;;public T avro(String instanceClassName) {     return dataFormat(new AvroDataFormat(instanceClassName)). }
true;public;0;4;/**  * Uses the base64 data format  */ ;/**  * Uses the base64 data format  */ public T base64() {     Base64DataFormat dataFormat = new Base64DataFormat().     return dataFormat(dataFormat). }
true;public;3;7;/**  * Uses the base64 data format  */ ;/**  * Uses the base64 data format  */ public T base64(int lineLength, String lineSeparator, boolean urlSafe) {     Base64DataFormat dataFormat = new Base64DataFormat().     dataFormat.setLineLength(lineLength).     dataFormat.setLineSeparator(lineSeparator).     dataFormat.setUrlSafe(urlSafe).     return dataFormat(dataFormat). }
true;public;2;6;/**  * Uses the beanio data format  */ ;/**  * Uses the beanio data format  */ public T beanio(String mapping, String streamName) {     BeanioDataFormat dataFormat = new BeanioDataFormat().     dataFormat.setMapping(mapping).     dataFormat.setStreamName(streamName).     return dataFormat(dataFormat). }
true;public;3;7;/**  * Uses the beanio data format  */ ;/**  * Uses the beanio data format  */ public T beanio(String mapping, String streamName, String encoding) {     BeanioDataFormat dataFormat = new BeanioDataFormat().     dataFormat.setMapping(mapping).     dataFormat.setStreamName(streamName).     dataFormat.setEncoding(encoding).     return dataFormat(dataFormat). }
true;public;6;11;/**  * Uses the beanio data format  */ ;/**  * Uses the beanio data format  */ public T beanio(String mapping, String streamName, String encoding, boolean ignoreUnidentifiedRecords, boolean ignoreUnexpectedRecords, boolean ignoreInvalidRecords) {     BeanioDataFormat dataFormat = new BeanioDataFormat().     dataFormat.setMapping(mapping).     dataFormat.setStreamName(streamName).     dataFormat.setEncoding(encoding).     dataFormat.setIgnoreUnidentifiedRecords(ignoreUnidentifiedRecords).     dataFormat.setIgnoreUnexpectedRecords(ignoreUnexpectedRecords).     dataFormat.setIgnoreInvalidRecords(ignoreInvalidRecords).     return dataFormat(dataFormat). }
true;public;4;8;/**  * Uses the beanio data format  */ ;/**  * Uses the beanio data format  */ public T beanio(String mapping, String streamName, String encoding, String beanReaderErrorHandlerType) {     BeanioDataFormat dataFormat = new BeanioDataFormat().     dataFormat.setMapping(mapping).     dataFormat.setStreamName(streamName).     dataFormat.setEncoding(encoding).     dataFormat.setBeanReaderErrorHandlerType(beanReaderErrorHandlerType).     return dataFormat(dataFormat). }
true;public;2;6;/**  * Uses the Bindy data format  *  * @param type      the type of bindy data format to use  * @param classType the POJO class type  */ ;/**  * Uses the Bindy data format  *  * @param type      the type of bindy data format to use  * @param classType the POJO class type  */ public T bindy(BindyType type, Class<?> classType) {     BindyDataFormat bindy = new BindyDataFormat().     bindy.setType(type).     bindy.setClassType(classType).     return dataFormat(bindy). }
true;public;3;7;/**  * Uses the Bindy data format  *  * @param type      the type of bindy data format to use  * @param classType the POJO class type  * @param unwrapSingleInstance whether unmarshal should unwrap if there is a single instance in the result  */ ;/**  * Uses the Bindy data format  *  * @param type      the type of bindy data format to use  * @param classType the POJO class type  * @param unwrapSingleInstance whether unmarshal should unwrap if there is a single instance in the result  */ public T bindy(BindyType type, Class<?> classType, boolean unwrapSingleInstance) {     BindyDataFormat bindy = new BindyDataFormat().     bindy.setType(type).     bindy.setClassType(classType).     bindy.setUnwrapSingleInstance(unwrapSingleInstance).     return dataFormat(bindy). }
true;public;1;5;/**  * Uses the Boon data format  *  * @param classType the POJO class type  */ ;/**  * Uses the Boon data format  *  * @param classType the POJO class type  */ public T boon(Class<?> classType) {     BoonDataFormat boon = new BoonDataFormat().     boon.setUnmarshalType(classType).     return dataFormat(boon). }
true;public;0;3;/**  * Uses the CSV data format  */ ;/**  * Uses the CSV data format  */ public T csv() {     return dataFormat(new CsvDataFormat()). }
true;public;0;3;/**  * Uses the CSV data format for a huge file.  * Sequential access through an iterator.  */ ;/**  * Uses the CSV data format for a huge file.  * Sequential access through an iterator.  */ public T csvLazyLoad() {     return dataFormat(new CsvDataFormat(true)). }
true;public;1;3;/**  * Uses the custom data format  */ ;/**  * Uses the custom data format  */ public T custom(String ref) {     return dataFormat(new CustomDataFormat(ref)). }
true;public;0;4;/**  * Uses the GZIP deflater data format  */ ;/**  * Uses the GZIP deflater data format  */ public T gzip() {     GzipDataFormat gzdf = new GzipDataFormat().     return dataFormat(gzdf). }
true;public;0;3;/**  * Uses the HL7 data format  */ ;/**  * Uses the HL7 data format  */ public T hl7() {     return dataFormat(new HL7DataFormat()). }
true;public;1;5;/**  * Uses the HL7 data format  */ ;/**  * Uses the HL7 data format  */ public T hl7(boolean validate) {     HL7DataFormat hl7 = new HL7DataFormat().     hl7.setValidate(validate).     return dataFormat(hl7). }
true;public;1;5;/**  * Uses the HL7 data format  */ ;/**  * Uses the HL7 data format  */ public T hl7(Object parser) {     HL7DataFormat hl7 = new HL7DataFormat().     hl7.setParser(parser).     return dataFormat(hl7). }
true;public;1;5;/**  * Uses the iCal data format  */ ;/**  * Uses the iCal data format  */ public T ical(boolean validating) {     IcalDataFormat ical = new IcalDataFormat().     ical.setValidating(validating).     return dataFormat(ical). }
true;public;0;4;/**  * Uses the LZF deflater data format  */ ;/**  * Uses the LZF deflater data format  */ public T lzf() {     LZFDataFormat lzfdf = new LZFDataFormat().     return dataFormat(lzfdf). }
true;public;0;4;/**  * Uses the MIME Multipart data format  */ ;/**  * Uses the MIME Multipart data format  */ public T mimeMultipart() {     MimeMultipartDataFormat mm = new MimeMultipartDataFormat().     return dataFormat(mm). }
true;public;1;5;/**  * Uses the MIME Multipart data format  *  * @param multipartSubType Specifies the subtype of the MIME Multipart  */ ;/**  * Uses the MIME Multipart data format  *  * @param multipartSubType Specifies the subtype of the MIME Multipart  */ public T mimeMultipart(String multipartSubType) {     MimeMultipartDataFormat mm = new MimeMultipartDataFormat().     mm.setMultipartSubType(multipartSubType).     return dataFormat(mm). }
true;public;4;9;/**  * Uses the MIME Multipart data format  *  * @param multipartSubType           the subtype of the MIME Multipart  * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled  *                                   into a MIME Multipart (with only one body part).  * @param headersInline              define the MIME Multipart headers as part of the message body  *                                   or as Camel headers  * @param binaryContent              have binary encoding for binary content (true) or use Base-64  *                                   encoding for binary content (false)  */ ;/**  * Uses the MIME Multipart data format  *  * @param multipartSubType           the subtype of the MIME Multipart  * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled  *                                   into a MIME Multipart (with only one body part).  * @param headersInline              define the MIME Multipart headers as part of the message body  *                                   or as Camel headers  * @param binaryContent              have binary encoding for binary content (true) or use Base-64  *                                   encoding for binary content (false)  */ public T mimeMultipart(String multipartSubType, boolean multipartWithoutAttachment, boolean headersInline, boolean binaryContent) {     MimeMultipartDataFormat mm = new MimeMultipartDataFormat().     mm.setMultipartSubType(multipartSubType).     mm.setMultipartWithoutAttachment(multipartWithoutAttachment).     mm.setHeadersInline(headersInline).     mm.setBinaryContent(binaryContent).     return dataFormat(mm). }
true;public;5;10;/**  * Uses the MIME Multipart data format  *  * @param multipartSubType           the subtype of the MIME Multipart  * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled  *                                   into a MIME Multipart (with only one body part).  * @param headersInline              define the MIME Multipart headers as part of the message body  *                                   or as Camel headers  * @param includeHeaders            if headersInline is set to true all camel headers matching this  *                                   regex are also stored as MIME headers on the Multipart  * @param binaryContent              have binary encoding for binary content (true) or use Base-64  *                                   encoding for binary content (false)  */ ;/**  * Uses the MIME Multipart data format  *  * @param multipartSubType           the subtype of the MIME Multipart  * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled  *                                   into a MIME Multipart (with only one body part).  * @param headersInline              define the MIME Multipart headers as part of the message body  *                                   or as Camel headers  * @param includeHeaders            if headersInline is set to true all camel headers matching this  *                                   regex are also stored as MIME headers on the Multipart  * @param binaryContent              have binary encoding for binary content (true) or use Base-64  *                                   encoding for binary content (false)  */ public T mimeMultipart(String multipartSubType, boolean multipartWithoutAttachment, boolean headersInline, String includeHeaders, boolean binaryContent) {     MimeMultipartDataFormat mm = new MimeMultipartDataFormat().     mm.setMultipartSubType(multipartSubType).     mm.setMultipartWithoutAttachment(multipartWithoutAttachment).     mm.setHeadersInline(headersInline).     mm.setIncludeHeaders(includeHeaders).     mm.setBinaryContent(binaryContent).     return dataFormat(mm). }
true;public;3;8;/**  * Uses the MIME Multipart data format  *  * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled  *                                   into a MIME Multipart (with only one body part).  * @param headersInline              define the MIME Multipart headers as part of the message body  *                                   or as Camel headers  * @param binaryContent              have binary encoding for binary content (true) or use Base-64  *                                   encoding for binary content (false)  */ ;/**  * Uses the MIME Multipart data format  *  * @param multipartWithoutAttachment defines whether a message without attachment is also marshaled  *                                   into a MIME Multipart (with only one body part).  * @param headersInline              define the MIME Multipart headers as part of the message body  *                                   or as Camel headers  * @param binaryContent              have binary encoding for binary content (true) or use Base-64  *                                   encoding for binary content (false)  */ public T mimeMultipart(boolean multipartWithoutAttachment, boolean headersInline, boolean binaryContent) {     MimeMultipartDataFormat mm = new MimeMultipartDataFormat().     mm.setMultipartWithoutAttachment(multipartWithoutAttachment).     mm.setHeadersInline(headersInline).     mm.setBinaryContent(binaryContent).     return dataFormat(mm). }
true;public;2;6;/**  * Uses the PGP data format  */ ;/**  * Uses the PGP data format  */ public T pgp(String keyFileName, String keyUserid) {     PGPDataFormat pgp = new PGPDataFormat().     pgp.setKeyFileName(keyFileName).     pgp.setKeyUserid(keyUserid).     return dataFormat(pgp). }
true;public;3;7;/**  * Uses the PGP data format  */ ;/**  * Uses the PGP data format  */ public T pgp(String keyFileName, String keyUserid, String password) {     PGPDataFormat pgp = new PGPDataFormat().     pgp.setKeyFileName(keyFileName).     pgp.setKeyUserid(keyUserid).     pgp.setPassword(password).     return dataFormat(pgp). }
true;public;5;9;/**  * Uses the PGP data format  */ ;/**  * Uses the PGP data format  */ public T pgp(String keyFileName, String keyUserid, String password, boolean armored, boolean integrity) {     PGPDataFormat pgp = new PGPDataFormat().     pgp.setKeyFileName(keyFileName).     pgp.setKeyUserid(keyUserid).     pgp.setPassword(password).     pgp.setArmored(armored).     pgp.setIntegrity(integrity).     return dataFormat(pgp). }
true;public;0;3;/**  * Uses the Jackson XML data format  */ ;/**  * Uses the Jackson XML data format  */ public T jacksonxml() {     return dataFormat(new JacksonXMLDataFormat()). }
true;public;1;5;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  */ ;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  */ public T jacksonxml(Class<?> unmarshalType) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setUnmarshalType(unmarshalType).     return dataFormat(jacksonXMLDataFormat). }
true;public;2;6;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  */ ;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  */ public T jacksonxml(Class<?> unmarshalType, Class<?> jsonView) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setUnmarshalType(unmarshalType).     jacksonXMLDataFormat.setJsonView(jsonView).     return dataFormat(jacksonXMLDataFormat). }
true;public;1;5;/**  * Uses the Jackson XML data format using the Jackson library turning pretty  * printing on or off  *  * @param prettyPrint  *            turn pretty printing on or off  */ ;/**  * Uses the Jackson XML data format using the Jackson library turning pretty  * printing on or off  *  * @param prettyPrint  *            turn pretty printing on or off  */ public T jacksonxml(boolean prettyPrint) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(jacksonXMLDataFormat). }
true;public;2;6;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param prettyPrint  *            turn pretty printing on or off  */ ;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param prettyPrint  *            turn pretty printing on or off  */ public T jacksonxml(Class<?> unmarshalType, boolean prettyPrint) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setUnmarshalType(unmarshalType).     jacksonXMLDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(jacksonXMLDataFormat). }
true;public;3;7;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  * @param prettyPrint  *            turn pretty printing on or off  */ ;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  * @param prettyPrint  *            turn pretty printing on or off  */ public T jacksonxml(Class<?> unmarshalType, Class<?> jsonView, boolean prettyPrint) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setUnmarshalType(unmarshalType).     jacksonXMLDataFormat.setJsonView(jsonView).     jacksonXMLDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(jacksonXMLDataFormat). }
true;public;3;7;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  * @param include  *            include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  */ ;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  * @param include  *            include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  */ public T jacksonxml(Class<?> unmarshalType, Class<?> jsonView, String include) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setUnmarshalType(unmarshalType).     jacksonXMLDataFormat.setJsonView(jsonView).     jacksonXMLDataFormat.setInclude(include).     return dataFormat(jacksonXMLDataFormat). }
true;public;4;8;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  * @param include  *            include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  * @param prettyPrint  *            turn pretty printing on or off  */ ;/**  * Uses the Jackson XML data format  *  * @param unmarshalType  *            unmarshal type for xml jackson type  * @param jsonView  *            the view type for xml jackson type  * @param include  *            include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  * @param prettyPrint  *            turn pretty printing on or off  */ public T jacksonxml(Class<?> unmarshalType, Class<?> jsonView, String include, boolean prettyPrint) {     JacksonXMLDataFormat jacksonXMLDataFormat = new JacksonXMLDataFormat().     jacksonXMLDataFormat.setUnmarshalType(unmarshalType).     jacksonXMLDataFormat.setJsonView(jsonView).     jacksonXMLDataFormat.setInclude(include).     jacksonXMLDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(jacksonXMLDataFormat). }
true;public;0;3;/**  * Uses the JAXB data format  */ ;/**  * Uses the JAXB data format  */ public T jaxb() {     return dataFormat(new JaxbDataFormat()). }
true;public;1;5;/**  * Uses the JAXB data format with context path  */ ;/**  * Uses the JAXB data format with context path  */ public T jaxb(String contextPath) {     JaxbDataFormat dataFormat = new JaxbDataFormat().     dataFormat.setContextPath(contextPath).     return dataFormat(dataFormat). }
true;public;1;3;/**  * Uses the JAXB data format turning pretty printing on or off  */ ;/**  * Uses the JAXB data format turning pretty printing on or off  */ public T jaxb(boolean prettyPrint) {     return dataFormat(new JaxbDataFormat(prettyPrint)). }
true;public;0;3;/**  * Uses the JiBX data format.  */ ;/**  * Uses the JiBX data format.  */ public T jibx() {     return dataFormat(new JibxDataFormat()). }
true;public;1;3;/**  * Uses the JiBX data format with unmarshall class.  */ ;/**  * Uses the JiBX data format with unmarshall class.  */ public T jibx(Class<?> unmarshallClass) {     return dataFormat(new JibxDataFormat(unmarshallClass)). }
true;public;0;3;/**  * Uses the JSON data format using the XStream json library  */ ;/**  * Uses the JSON data format using the XStream json library  */ public T json() {     return dataFormat(new JsonDataFormat()). }
true;public;1;5;/**  * Uses the JSON data format using the XStream json library turning pretty printing on or off  *  * @param prettyPrint turn pretty printing on or off  */ ;/**  * Uses the JSON data format using the XStream json library turning pretty printing on or off  *  * @param prettyPrint turn pretty printing on or off  */ public T json(boolean prettyPrint) {     JsonDataFormat json = new JsonDataFormat().     json.setPrettyPrint(prettyPrint).     return dataFormat(json). }
true;public;1;3;/**  * Uses the JSON data format  *  * @param library the json library to use  */ ;/**  * Uses the JSON data format  *  * @param library the json library to use  */ public T json(JsonLibrary library) {     return dataFormat(new JsonDataFormat(library)). }
true;public;2;5;/**  * Uses the JSON data format  *  * @param library     the json library to use  * @param prettyPrint turn pretty printing on or off  */ ;/**  * Uses the JSON data format  *  * @param library     the json library to use  * @param prettyPrint turn pretty printing on or off  */ public T json(JsonLibrary library, boolean prettyPrint) {     JsonDataFormat json = new JsonDataFormat(library).     json.setPrettyPrint(prettyPrint).     return dataFormat(json). }
true;public;2;5;/**  * Uses the JSON data format  *  * @param type          the json type to use  * @param unmarshalType unmarshal type for json jackson type  */ ;/**  * Uses the JSON data format  *  * @param type          the json type to use  * @param unmarshalType unmarshal type for json jackson type  */ public T json(JsonLibrary type, Class<?> unmarshalType) {     JsonDataFormat json = new JsonDataFormat(type).     json.setUnmarshalType(unmarshalType).     return dataFormat(json). }
true;public;3;6;/**  * Uses the JSON data format  *  * @param type          the json type to use  * @param unmarshalType unmarshal type for json jackson type  * @param prettyPrint   turn pretty printing on or off  */ ;/**  * Uses the JSON data format  *  * @param type          the json type to use  * @param unmarshalType unmarshal type for json jackson type  * @param prettyPrint   turn pretty printing on or off  */ public T json(JsonLibrary type, Class<?> unmarshalType, boolean prettyPrint) {     JsonDataFormat json = new JsonDataFormat(type).     json.setUnmarshalType(unmarshalType).     json.setPrettyPrint(prettyPrint).     return dataFormat(json). }
true;public;2;6;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  */ ;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  */ public T json(Class<?> unmarshalType, Class<?> jsonView) {     JsonDataFormat json = new JsonDataFormat(JsonLibrary.Jackson).     json.setUnmarshalType(unmarshalType).     json.setJsonView(jsonView).     return dataFormat(json). }
true;public;3;7;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  * @param prettyPrint   turn pretty printing on or off  */ ;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  * @param prettyPrint   turn pretty printing on or off  */ public T json(Class<?> unmarshalType, Class<?> jsonView, boolean prettyPrint) {     JsonDataFormat json = new JsonDataFormat(JsonLibrary.Jackson).     json.setUnmarshalType(unmarshalType).     json.setJsonView(jsonView).     json.setPrettyPrint(prettyPrint).     return dataFormat(json). }
true;public;3;7;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  * @param include       include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  */ ;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  * @param include       include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  */ public T json(Class<?> unmarshalType, Class<?> jsonView, String include) {     JsonDataFormat json = new JsonDataFormat(JsonLibrary.Jackson).     json.setUnmarshalType(unmarshalType).     json.setJsonView(jsonView).     json.setInclude(include).     return dataFormat(json). }
true;public;4;8;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  * @param include       include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  * @param prettyPrint  turn pretty printing on or off  */ ;/**  * Uses the Jackson JSON data format  *  * @param unmarshalType unmarshal type for json jackson type  * @param jsonView      the view type for json jackson type  * @param include       include such as <tt>ALWAYS</tt>, <tt>NON_NULL</tt>, etc.  * @param prettyPrint  turn pretty printing on or off  */ public T json(Class<?> unmarshalType, Class<?> jsonView, String include, boolean prettyPrint) {     JsonDataFormat json = new JsonDataFormat(JsonLibrary.Jackson).     json.setUnmarshalType(unmarshalType).     json.setJsonView(jsonView).     json.setInclude(include).     json.setPrettyPrint(prettyPrint).     return dataFormat(json). }
true;public;0;3;/**  * Uses the protobuf data format  */ ;/**  * Uses the protobuf data format  */ public T protobuf() {     return dataFormat(new ProtobufDataFormat()). }
false;public;1;5;;public T protobuf(Object defaultInstance) {     ProtobufDataFormat dataFormat = new ProtobufDataFormat().     dataFormat.setDefaultInstance(defaultInstance).     return dataFormat(dataFormat). }
false;public;2;6;;public T protobuf(Object defaultInstance, String contentTypeFormat) {     ProtobufDataFormat dataFormat = new ProtobufDataFormat().     dataFormat.setDefaultInstance(defaultInstance).     dataFormat.setContentTypeFormat(contentTypeFormat).     return dataFormat(dataFormat). }
false;public;1;3;;public T protobuf(String instanceClassName) {     return dataFormat(new ProtobufDataFormat(instanceClassName)). }
false;public;2;3;;public T protobuf(String instanceClassName, String contentTypeFormat) {     return dataFormat(new ProtobufDataFormat(instanceClassName, contentTypeFormat)). }
true;public;0;3;/**  * Uses the RSS data format  */ ;/**  * Uses the RSS data format  */ public T rss() {     return dataFormat(new RssDataFormat()). }
true;public;0;3;/**  * Uses the Java Serialization data format  */ ;/**  * Uses the Java Serialization data format  */ public T serialization() {     return dataFormat(new SerializationDataFormat()). }
true;public;0;3;/**  * Uses the Soap 1.1 JAXB data format  */ ;/**  * Uses the Soap 1.1 JAXB data format  */ public T soapjaxb() {     return dataFormat(new SoapJaxbDataFormat()). }
true;public;1;3;/**  * Uses the Soap 1.1 JAXB data format  */ ;/**  * Uses the Soap 1.1 JAXB data format  */ public T soapjaxb(String contextPath) {     return dataFormat(new SoapJaxbDataFormat(contextPath)). }
true;public;2;3;/**  * Uses the Soap 1.1 JAXB data format  */ ;/**  * Uses the Soap 1.1 JAXB data format  */ public T soapjaxb(String contextPath, String elementNameStrategyRef) {     return dataFormat(new SoapJaxbDataFormat(contextPath, elementNameStrategyRef)). }
true;public;2;3;/**  * Uses the Soap 1.1 JAXB data format  */ ;/**  * Uses the Soap 1.1 JAXB data format  */ public T soapjaxb(String contextPath, Object elementNameStrategy) {     return dataFormat(new SoapJaxbDataFormat(contextPath, elementNameStrategy)). }
true;public;0;5;/**  * Uses the Soap 1.2 JAXB data format  */ ;/**  * Uses the Soap 1.2 JAXB data format  */ public T soapjaxb12() {     SoapJaxbDataFormat soap = new SoapJaxbDataFormat().     soap.setVersion("1.2").     return dataFormat(soap). }
true;public;1;5;/**  * Uses the Soap 1.2 JAXB data format  */ ;/**  * Uses the Soap 1.2 JAXB data format  */ public T soapjaxb12(String contextPath) {     SoapJaxbDataFormat soap = new SoapJaxbDataFormat(contextPath).     soap.setVersion("1.2").     return dataFormat(soap). }
true;public;2;5;/**  * Uses the Soap 1.2 JAXB data format  */ ;/**  * Uses the Soap 1.2 JAXB data format  */ public T soapjaxb12(String contextPath, String elementNameStrategyRef) {     SoapJaxbDataFormat soap = new SoapJaxbDataFormat(contextPath, elementNameStrategyRef).     soap.setVersion("1.2").     return dataFormat(soap). }
true;public;2;5;/**  * Uses the Soap JAXB data format  */ ;/**  * Uses the Soap JAXB data format  */ public T soapjaxb12(String contextPath, Object elementNameStrategy) {     SoapJaxbDataFormat soap = new SoapJaxbDataFormat(contextPath, elementNameStrategy).     soap.setVersion("1.2").     return dataFormat(soap). }
true;public;0;3;/**  * Uses the String data format  */ ;/**  * Uses the String data format  */ public T string() {     return string(null). }
true;public;1;5;/**  * Uses the String data format supporting encoding using given charset  */ ;/**  * Uses the String data format supporting encoding using given charset  */ public T string(String charset) {     StringDataFormat sdf = new StringDataFormat().     sdf.setCharset(charset).     return dataFormat(sdf). }
true;public;0;3;/**  * Uses the Syslog data format  */ ;/**  * Uses the Syslog data format  */ public T syslog() {     return dataFormat(new SyslogDataFormat()). }
true;public;0;3;/**  * Uses the Thrift data format  */ ;/**  * Uses the Thrift data format  */ public T thrift() {     return dataFormat(new ThriftDataFormat()). }
false;public;1;5;;public T thrift(Object defaultInstance) {     ThriftDataFormat dataFormat = new ThriftDataFormat().     dataFormat.setDefaultInstance(defaultInstance).     return dataFormat(dataFormat). }
false;public;2;6;;public T thrift(Object defaultInstance, String contentTypeFormat) {     ThriftDataFormat dataFormat = new ThriftDataFormat().     dataFormat.setDefaultInstance(defaultInstance).     dataFormat.setContentTypeFormat(contentTypeFormat).     return dataFormat(dataFormat). }
false;public;1;3;;public T thrift(String instanceClassName) {     return dataFormat(new ThriftDataFormat(instanceClassName)). }
false;public;2;3;;public T thrift(String instanceClassName, String contentTypeFormat) {     return dataFormat(new ThriftDataFormat(instanceClassName, contentTypeFormat)). }
true;public;1;3;/**  * Return WellFormed HTML (an XML Document) either  * {@link java.lang.String} or {@link org.w3c.dom.Node}  */ ;/**  * Return WellFormed HTML (an XML Document) either  * {@link java.lang.String} or {@link org.w3c.dom.Node}  */ public T tidyMarkup(Class<?> dataObjectType) {     return dataFormat(new TidyMarkupDataFormat(dataObjectType)). }
true;public;0;3;/**  * Return TidyMarkup in the default format  * as {@link org.w3c.dom.Node}  */ ;/**  * Return TidyMarkup in the default format  * as {@link org.w3c.dom.Node}  */ public T tidyMarkup() {     return dataFormat(new TidyMarkupDataFormat(Node.class)). }
true;public;0;3;/**  * Uses the XStream data format.  * <p/>  * Favor using {@link #xstream(String)} to pass in a permission  */ ;/**  * Uses the XStream data format.  * <p/>  * Favor using {@link #xstream(String)} to pass in a permission  */ public T xstream() {     return dataFormat(new XStreamDataFormat()). }
true;public;1;8;/**  * Uses the xstream by setting the encoding or permission  *  * @param encodingOrPermission is either an encoding or permission syntax  */ ;/**  * Uses the xstream by setting the encoding or permission  *  * @param encodingOrPermission is either an encoding or permission syntax  */ public T xstream(String encodingOrPermission) {     // is it an encoding? if not we assume its a permission     if (Charset.isSupported(encodingOrPermission)) {         return xstream(encodingOrPermission, (String) null).     } else {         return xstream(null, encodingOrPermission).     } }
true;public;2;6;/**  * Uses the xstream by setting the encoding  */ ;/**  * Uses the xstream by setting the encoding  */ public T xstream(String encoding, String permission) {     XStreamDataFormat xdf = new XStreamDataFormat().     xdf.setPermissions(permission).     xdf.setEncoding(encoding).     return dataFormat(xdf). }
true;public;1;3;/**  * Uses the xstream by permitting the java type  *  * @param type the pojo xstream should use as allowed permission  */ ;/**  * Uses the xstream by permitting the java type  *  * @param type the pojo xstream should use as allowed permission  */ public T xstream(Class<?> type) {     return xstream(null, type). }
true;public;2;8;/**  * Uses the xstream by permitting the java type  *  * @param encoding encoding to use  * @param type the pojo class(es) xstream should use as allowed permission  */ ;/**  * Uses the xstream by permitting the java type  *  * @param encoding encoding to use  * @param type the pojo class(es) xstream should use as allowed permission  */ public T xstream(String encoding, Class<?>... type) {     CollectionStringBuffer csb = new CollectionStringBuffer(",").     for (Class<?> clazz : type) {         csb.append("+").         csb.append(clazz.getName()).     }     return xstream(encoding, csb.toString()). }
true;public;1;3;/**  * Uses the YAML data format  *  * @param library the yaml library to use  */ ;/**  * Uses the YAML data format  *  * @param library the yaml library to use  */ public T yaml(YAMLLibrary library) {     return dataFormat(new YAMLDataFormat(library)). }
true;public;2;3;/**  * Uses the YAML data format  *  * @param library the yaml type to use  * @param type the type for json snakeyaml type  */ ;/**  * Uses the YAML data format  *  * @param library the yaml type to use  * @param type the type for json snakeyaml type  */ public T yaml(YAMLLibrary library, Class<?> type) {     return dataFormat(new YAMLDataFormat(library, type)). }
true;public;0;4;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML() {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     return dataFormat(xsdf). }
true;public;2;6;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     return dataFormat(xsdf). }
true;public;3;7;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setNamespaces(namespaces).     return dataFormat(xsdf). }
true;public;3;7;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, String passPhrase) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhrase(passPhrase).     return dataFormat(xsdf). }
true;public;4;8;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String passPhrase) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhrase(passPhrase).     return dataFormat(xsdf). }
true;public;4;8;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, String passPhrase, String xmlCipherAlgorithm) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhrase(passPhrase).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     return dataFormat(xsdf). }
true;public;5;9;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String passPhrase, String xmlCipherAlgorithm) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhrase(passPhrase).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     return dataFormat(xsdf). }
true;public;3;7;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, byte[] passPhraseByte) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhraseByte(passPhraseByte).     return dataFormat(xsdf). }
true;public;4;8;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, byte[] passPhraseByte) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhraseByte(passPhraseByte).     return dataFormat(xsdf). }
true;public;4;8;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, byte[] passPhraseByte, String xmlCipherAlgorithm) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhraseByte(passPhraseByte).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     return dataFormat(xsdf). }
true;public;5;9;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, byte[] passPhraseByte, String xmlCipherAlgorithm) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setPassPhraseByte(passPhraseByte).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     return dataFormat(xsdf). }
true;public;6;11;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParametersRef(keyOrTrustStoreParametersId).     return dataFormat(xsdf). }
true;public;7;12;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId, String keyPassword) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParametersRef(keyOrTrustStoreParametersId).     xsdf.setKeyPassword(keyPassword).     return dataFormat(xsdf). }
true;public;6;11;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParameters(keyOrTrustStoreParameters).     return dataFormat(xsdf). }
true;public;7;12;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters, String keyPassword) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParameters(keyOrTrustStoreParameters).     xsdf.setKeyPassword(keyPassword).     return dataFormat(xsdf). }
true;public;7;11;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParametersRef(keyOrTrustStoreParametersId).     return dataFormat(xsdf). }
true;public;8;12;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, String keyOrTrustStoreParametersId, String keyPassword) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParametersRef(keyOrTrustStoreParametersId).     xsdf.setKeyPassword(keyPassword).     return dataFormat(xsdf). }
true;public;7;12;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParameters(keyOrTrustStoreParameters).     return dataFormat(xsdf). }
true;public;8;13;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters, String keyPassword) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParameters(keyOrTrustStoreParameters).     xsdf.setKeyPassword(keyPassword).     return dataFormat(xsdf). }
true;public;9;15;/**  * Uses the XML Security data format  */ ;/**  * Uses the XML Security data format  */ public T secureXML(String secureTag, Map<String, String> namespaces, boolean secureTagContents, String recipientKeyAlias, String xmlCipherAlgorithm, String keyCipherAlgorithm, KeyStoreParameters keyOrTrustStoreParameters, String keyPassword, String digestAlgorithm) {     XMLSecurityDataFormat xsdf = new XMLSecurityDataFormat().     xsdf.setSecureTag(secureTag).     xsdf.setNamespaces(namespaces).     xsdf.setSecureTagContents(secureTagContents).     xsdf.setRecipientKeyAlias(recipientKeyAlias).     xsdf.setXmlCipherAlgorithm(xmlCipherAlgorithm).     xsdf.setKeyCipherAlgorithm(keyCipherAlgorithm).     xsdf.setKeyOrTrustStoreParameters(keyOrTrustStoreParameters).     xsdf.setDigestAlgorithm(digestAlgorithm).     xsdf.setKeyPassword(keyPassword).     return dataFormat(xsdf). }
true;public;0;4;/**  * Uses the Tar file data format  */ ;/**  * Uses the Tar file data format  */ public T tarFile() {     TarFileDataFormat tfdf = new TarFileDataFormat().     return dataFormat(tfdf). }
true;public;0;4;/**  * Uses the ZIP deflater data format  */ ;/**  * Uses the ZIP deflater data format  */ public T zip() {     ZipDataFormat zdf = new ZipDataFormat(Deflater.DEFAULT_COMPRESSION).     return dataFormat(zdf). }
true;public;1;4;/**  * Uses the ZIP deflater data format  */ ;/**  * Uses the ZIP deflater data format  */ public T zip(int compressionLevel) {     ZipDataFormat zdf = new ZipDataFormat(compressionLevel).     return dataFormat(zdf). }
true;public;0;4;/**  * Uses the ZIP file data format  */ ;/**  * Uses the ZIP file data format  */ public T zipFile() {     ZipFileDataFormat zfdf = new ZipFileDataFormat().     return dataFormat(zfdf). }
true;public;0;4;/**  * Uses the ASN.1 file data format  */ ;/**  * Uses the ASN.1 file data format  */ public T asn1() {     ASN1DataFormat asn1Df = new ASN1DataFormat().     return dataFormat(asn1Df). }
false;public;1;3;;public T asn1(String clazzName) {     return dataFormat(new ASN1DataFormat(clazzName)). }
false;public;1;3;;public T asn1(Boolean usingIterator) {     return dataFormat(new ASN1DataFormat(usingIterator)). }
true;public;0;4;/**  * Uses the FHIR JSON data format  */ ;/**  * Uses the FHIR JSON data format  */ public T fhirJson() {     FhirJsonDataFormat jsonDataFormat = new FhirJsonDataFormat().     return dataFormat(jsonDataFormat). }
false;public;1;5;;public T fhirJson(String version) {     FhirJsonDataFormat jsonDataFormat = new FhirJsonDataFormat().     jsonDataFormat.setFhirVersion(version).     return dataFormat(jsonDataFormat). }
false;public;1;5;;public T fhirJson(boolean prettyPrint) {     FhirJsonDataFormat jsonDataFormat = new FhirJsonDataFormat().     jsonDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(jsonDataFormat). }
false;public;2;6;;public T fhirJson(String version, boolean prettyPrint) {     FhirJsonDataFormat jsonDataFormat = new FhirJsonDataFormat().     jsonDataFormat.setPrettyPrint(prettyPrint).     jsonDataFormat.setFhirVersion(version).     return dataFormat(jsonDataFormat). }
true;public;0;4;/**  * Uses the FHIR XML data format  */ ;/**  * Uses the FHIR XML data format  */ public T fhirXml() {     FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().     return dataFormat(fhirXmlDataFormat). }
false;public;1;5;;public T fhirXml(String version) {     FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().     fhirXmlDataFormat.setFhirVersion(version).     return dataFormat(fhirXmlDataFormat). }
false;public;1;5;;public T fhirXml(boolean prettyPrint) {     FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().     fhirXmlDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(fhirXmlDataFormat). }
false;public;2;6;;public T fhirXml(String version, boolean prettyPrint) {     FhirXmlDataFormat fhirXmlDataFormat = new FhirXmlDataFormat().     fhirXmlDataFormat.setFhirVersion(version).     fhirXmlDataFormat.setPrettyPrint(prettyPrint).     return dataFormat(fhirXmlDataFormat). }
false;private;1;11;;@SuppressWarnings("unchecked") private T dataFormat(DataFormatDefinition dataFormatType) {     switch(operation) {         case Unmarshal:             return (T) processorType.unmarshal(dataFormatType).         case Marshal:             return (T) processorType.marshal(dataFormatType).         default:             throw new IllegalArgumentException("Unknown DataFormat operation: " + operation).     } }
