commented;modifiers;parameterAmount;loc;comment;code
false;public;1;39;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     // the load balancer is stateful so we should only create it once in case its used from a context scoped error handler     LoadBalancer loadBalancer = definition.getLoadBalancerType().getLoadBalancer().     if (loadBalancer == null) {         // then create it and reuse it         loadBalancer = LoadBalancerReifier.reifier(definition.getLoadBalancerType()).createLoadBalancer(routeContext).         definition.getLoadBalancerType().setLoadBalancer(loadBalancer).         // some load balancer can only support a fixed number of outputs         int max = definition.getLoadBalancerType().getMaximumNumberOfOutputs().         int size = definition.getOutputs().size().         if (size > max) {             throw new IllegalArgumentException("To many outputs configured on " + definition.getLoadBalancerType() + ": " + size + " > " + max).         }         for (ProcessorDefinition<?> processorType : definition.getOutputs()) {             // on Windows boxes or with IBM JDKs etc.             if (LoadBalanceDefinition.class.isInstance(processorType)) {                 throw new IllegalArgumentException("Loadbalancer already configured to: " + definition.getLoadBalancerType() + ". Cannot set it to: " + processorType).             }             Processor processor = createProcessor(routeContext, processorType).             Channel channel = wrapChannel(routeContext, processor, processorType).             loadBalancer.addProcessor(channel).         }     }     Boolean inherit = definition.isInheritErrorHandler().     if (definition.getLoadBalancerType() instanceof FailoverLoadBalancerDefinition) {         // special for failover load balancer where you can configure it to not inherit error handler for its children         // but the load balancer itself should inherit so Camels error handler can react afterwards         inherit = true.     }     Processor target = wrapChannel(routeContext, loadBalancer, definition, inherit).     return target. }
