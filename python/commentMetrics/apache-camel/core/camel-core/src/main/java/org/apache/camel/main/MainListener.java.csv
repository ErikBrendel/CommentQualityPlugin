commented;modifiers;parameterAmount;loc;comment;code
true;;1;1;/**  * Callback before the CamelContext(s) is being created and started.  *  * @param main  the main instance  */ ;/**  * Callback before the CamelContext(s) is being created and started.  *  * @param main  the main instance  */ void beforeStart(MainSupport main).
true;;1;1;/**  * Callback to configure <b>each</b> created CamelContext.  * <p/>  * Notice this callback will be invoked for <b>each</b> CamelContext and therefore can be invoked  * multiple times if there is 2 or more CamelContext's being created.  *  * @param context the created CamelContext  */ ;/**  * Callback to configure <b>each</b> created CamelContext.  * <p/>  * Notice this callback will be invoked for <b>each</b> CamelContext and therefore can be invoked  * multiple times if there is 2 or more CamelContext's being created.  *  * @param context the created CamelContext  */ void configure(CamelContext context).
true;;1;1;/**  * Callback after the CamelContext(s) has been started.  *  * @param main  the main instance  */ ;/**  * Callback after the CamelContext(s) has been started.  *  * @param main  the main instance  */ void afterStart(MainSupport main).
true;;1;1;/**  * Callback before the CamelContext(s) is being stopped.  *  * @param main  the main instance  */ ;/**  * Callback before the CamelContext(s) is being stopped.  *  * @param main  the main instance  */ void beforeStop(MainSupport main).
true;;1;1;/**  * Callback after the CamelContext(s) has been stopped.  *  * @param main  the main instance  */ ;/**  * Callback after the CamelContext(s) has been stopped.  *  * @param main  the main instance  */ void afterStop(MainSupport main).
