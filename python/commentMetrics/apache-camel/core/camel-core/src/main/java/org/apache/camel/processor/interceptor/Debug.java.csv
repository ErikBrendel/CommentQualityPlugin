commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public void done(boolean doneSync) {     long diff = watch.taken().     try {         debugger.afterProcess(exchange, processor, definition, diff).     } finally {         // must notify original callback         callback.done(doneSync).     } }
false;public;2;24;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     try {         debugger.beforeProcess(exchange, target, definition).     } catch (Throwable e) {         exchange.setException(e).         callback.done(true).         return true.     }     final StopWatch watch = new StopWatch().     return processor.process(exchange, new AsyncCallback() {          public void done(boolean doneSync) {             long diff = watch.taken().             try {                 debugger.afterProcess(exchange, processor, definition, diff).             } finally {                 // must notify original callback                 callback.done(doneSync).             }         }     }). }
false;public;0;4;;@Override public String toString() {     return "Debug[" + target + "]". }
false;public;4;34;;public Processor wrapProcessorInInterceptors(final CamelContext context, final NamedNode definition, final Processor target, final Processor nextTarget) throws Exception {     return new DelegateAsyncProcessor(target) {          @Override         public boolean process(final Exchange exchange, final AsyncCallback callback) {             try {                 debugger.beforeProcess(exchange, target, definition).             } catch (Throwable e) {                 exchange.setException(e).                 callback.done(true).                 return true.             }             final StopWatch watch = new StopWatch().             return processor.process(exchange, new AsyncCallback() {                  public void done(boolean doneSync) {                     long diff = watch.taken().                     try {                         debugger.afterProcess(exchange, processor, definition, diff).                     } finally {                         // must notify original callback                         callback.done(doneSync).                     }                 }             }).         }          @Override         public String toString() {             return "Debug[" + target + "]".         }     }. }
