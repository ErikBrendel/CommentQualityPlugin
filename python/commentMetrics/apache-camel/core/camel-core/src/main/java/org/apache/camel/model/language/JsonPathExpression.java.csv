commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getResultTypeName() {     return resultTypeName. }
true;public;1;3;/**  * Sets the class name of the result type (type from output)  */ ;/**  * Sets the class name of the result type (type from output)  */ public void setResultTypeName(String resultTypeName) {     this.resultTypeName = resultTypeName. }
false;public;0;3;;public Class<?> getResultType() {     return resultType. }
true;public;1;3;/**  * Sets the class of the result type (type from output)  */ ;/**  * Sets the class of the result type (type from output)  */ public void setResultType(Class<?> resultType) {     this.resultType = resultType. }
false;public;0;3;;public Boolean getSuppressExceptions() {     return suppressExceptions. }
false;public;0;3;;public Boolean getAllowSimple() {     return allowSimple. }
true;public;1;3;/**  * Whether to allow in inlined simple exceptions in the JsonPath expression  */ ;/**  * Whether to allow in inlined simple exceptions in the JsonPath expression  */ public void setAllowSimple(Boolean allowSimple) {     this.allowSimple = allowSimple. }
false;public;0;3;;public Boolean getAllowEasyPredicate() {     return allowEasyPredicate. }
true;public;1;3;/**  * Whether to allow using the easy predicate parser to pre-parse predicates.  */ ;/**  * Whether to allow using the easy predicate parser to pre-parse predicates.  */ public void setAllowEasyPredicate(Boolean allowEasyPredicate) {     this.allowEasyPredicate = allowEasyPredicate. }
true;public;1;3;/**  * Whether to suppress exceptions such as PathNotFoundException.  */ ;/**  * Whether to suppress exceptions such as PathNotFoundException.  */ public void setSuppressExceptions(Boolean suppressExceptions) {     this.suppressExceptions = suppressExceptions. }
false;public;0;3;;public Boolean getWriteAsString() {     return writeAsString. }
true;public;1;3;/**  * Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.  */ ;/**  * Whether to write the output of each row/element as a JSON String value instead of a Map/POJO value.  */ public void setWriteAsString(Boolean writeAsString) {     this.writeAsString = writeAsString. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
true;public;1;3;/**  * Name of header to use as input, instead of the message body  */ ;/**  * Name of header to use as input, instead of the message body  */ public void setHeaderName(String headerName) {     this.headerName = headerName. }
false;public;0;3;;public String getLanguage() {     return "jsonpath". }
false;public;1;11;;@Override public Expression createExpression(CamelContext camelContext) {     if (resultType == null && resultTypeName != null) {         try {             resultType = camelContext.getClassResolver().resolveMandatoryClass(resultTypeName).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return super.createExpression(camelContext). }
false;protected;2;22;;@Override protected void configureExpression(CamelContext camelContext, Expression expression) {     if (resultType != null) {         setProperty(expression, "resultType", resultType).     }     if (suppressExceptions != null) {         setProperty(expression, "suppressExceptions", suppressExceptions).     }     if (allowSimple != null) {         setProperty(expression, "allowSimple", allowSimple).     }     if (allowEasyPredicate != null) {         setProperty(expression, "allowEasyPredicate", allowEasyPredicate).     }     if (writeAsString != null) {         setProperty(expression, "writeAsString", writeAsString).     }     if (headerName != null) {         setProperty(expression, "headerName", headerName).     }     super.configureExpression(camelContext, expression). }
false;protected;2;22;;@Override protected void configurePredicate(CamelContext camelContext, Predicate predicate) {     if (resultType != null) {         setProperty(predicate, "resultType", resultType).     }     if (suppressExceptions != null) {         setProperty(predicate, "suppressExceptions", suppressExceptions).     }     if (allowSimple != null) {         setProperty(predicate, "allowSimple", allowSimple).     }     if (allowEasyPredicate != null) {         setProperty(predicate, "allowEasyPredicate", allowEasyPredicate).     }     if (writeAsString != null) {         setProperty(predicate, "writeAsString", writeAsString).     }     if (headerName != null) {         setProperty(predicate, "headerName", headerName).     }     super.configurePredicate(camelContext, predicate). }
