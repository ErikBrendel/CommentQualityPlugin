commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getCode() {     return code. }
false;public;1;3;;public void setCode(String code) {     this.code = code. }
false;public;0;3;;public String getResponseModel() {     return responseModel != null ? responseModel : "". }
false;public;1;3;;public void setResponseModel(String responseModel) {     this.responseModel = responseModel. }
false;public;0;3;;public String getMessage() {     return message. }
false;public;1;3;;public void setMessage(String message) {     this.message = message. }
false;public;0;3;;public List<RestOperationResponseHeaderDefinition> getHeaders() {     return headers. }
false;public;1;3;;public void setHeaders(List<RestOperationResponseHeaderDefinition> headers) {     this.headers = headers. }
false;public;0;3;;public List<RestPropertyDefinition> getExamples() {     return examples. }
true;public;1;3;/**  * Examples of response messages  */ ;/**  * Examples of response messages  */ public void setExamples(List<RestPropertyDefinition> examples) {     this.examples = examples. }
true;public;1;4;/**  * The response code such as a HTTP status code  */ ;/**  * The response code such as a HTTP status code  */ public RestOperationResponseMsgDefinition code(int code) {     setCode("" + code).     return this. }
true;public;1;4;/**  * The response code such as a HTTP status code. Can use <tt>general</tt>, or other words  * to indicate general error responses that do not map to a specific HTTP status code  */ ;/**  * The response code such as a HTTP status code. Can use <tt>general</tt>, or other words  * to indicate general error responses that do not map to a specific HTTP status code  */ public RestOperationResponseMsgDefinition code(String code) {     setCode(code).     return this. }
true;public;1;4;/**  * The response message (description)  */ ;/**  * The response message (description)  */ public RestOperationResponseMsgDefinition message(String msg) {     setMessage(msg).     return this. }
true;public;1;4;/**  * The response model  */ ;/**  * The response model  */ public RestOperationResponseMsgDefinition responseModel(Class<?> type) {     setResponseModel(type.getCanonicalName()).     return this. }
true;public;2;7;/**  * Adds an example  */ ;/**  * Adds an example  */ public RestOperationResponseMsgDefinition example(String key, String example) {     if (examples == null) {         examples = new ArrayList<>().     }     examples.add(new RestPropertyDefinition(key, example)).     return this. }
true;public;1;9;/**  * Adds a response header  */ ;/**  * Adds a response header  */ public RestOperationResponseHeaderDefinition header(String name) {     if (headers == null) {         headers = new ArrayList<>().     }     RestOperationResponseHeaderDefinition header = new RestOperationResponseHeaderDefinition(this).     header.setName(name).     headers.add(header).     return header. }
true;public;0;7;/**  * Ends the configuration of this response message  */ ;/**  * Ends the configuration of this response message  */ public RestDefinition endResponseMessage() {     // code and message is mandatory     StringHelper.notEmpty(code, "code").     StringHelper.notEmpty(message, "message").     verb.getResponseMsgs().add(this).     return verb.getRest(). }
