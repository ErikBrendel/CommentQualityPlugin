commented;modifiers;parameterAmount;loc;comment;code
false;public;2;43;;@Override public void addRoutes(RouteContext routeContext, Collection<Route> routes) throws Exception {     // and therefore is in a better position to decide among context/route scoped OnException at runtime     if (definition.getRouteScoped() == null) {         definition.setRouteScoped(definition.getParent() != null).     }     setHandledFromExpressionType(routeContext).     setContinuedFromExpressionType(routeContext).     setRetryWhileFromExpressionType(routeContext).     setOnRedeliveryFromRedeliveryRef(routeContext).     setOnExceptionOccurredFromOnExceptionOccurredRef(routeContext).     // load exception classes     if (definition.getExceptions() != null && !definition.getExceptions().isEmpty()) {         definition.setExceptionClasses(createExceptionClasses(routeContext.getCamelContext().getClassResolver())).     }     // must validate configuration before creating processor     definition.validateConfiguration().     if (definition.getUseOriginalMessagePolicy() != null && definition.getUseOriginalMessagePolicy()) {         // ensure allow original is turned on         routeContext.setAllowUseOriginalMessage(true).     }     // lets attach this on exception to the route error handler     Processor child = createOutputsProcessor(routeContext).     if (child != null) {         // wrap in our special safe fallback error handler if OnException have child output         Processor errorHandler = new FatalFallbackErrorHandler(child).         String id = routeContext.getRoute().getId().         definition.setErrorHandler(id, errorHandler).     }     // lookup the error handler builder     ErrorHandlerBuilder builder = (ErrorHandlerBuilder) ((RouteDefinition) routeContext.getRoute()).getErrorHandlerBuilder().     // and add this as error handlers     builder.addErrorHandlers(routeContext, definition). }
false;public;1;29;;@Override public CatchProcessor createProcessor(RouteContext routeContext) throws Exception {     // load exception classes     if (definition.getExceptions() != null && !definition.getExceptions().isEmpty()) {         definition.setExceptionClasses(createExceptionClasses(routeContext.getCamelContext().getClassResolver())).     }     if (definition.getUseOriginalMessagePolicy() != null && definition.getUseOriginalMessagePolicy()) {         // ensure allow original is turned on         routeContext.setAllowUseOriginalMessage(true).     }     // must validate configuration before creating processor     definition.validateConfiguration().     Processor childProcessor = this.createChildProcessor(routeContext, false).     Predicate when = null.     if (definition.getOnWhen() != null) {         when = definition.getOnWhen().getExpression().createPredicate(routeContext).     }     Predicate handle = null.     if (definition.getHandled() != null) {         handle = definition.getHandled().createPredicate(routeContext).     }     return new CatchProcessor(definition.getExceptionClasses(), childProcessor, when, handle). }
false;protected;1;9;;protected List<Class<? extends Throwable>> createExceptionClasses(ClassResolver resolver) throws ClassNotFoundException {     List<String> list = definition.getExceptions().     List<Class<? extends Throwable>> answer = new ArrayList<>(list.size()).     for (String name : list) {         Class<? extends Throwable> type = resolver.resolveMandatoryClass(name, Throwable.class).         answer.add(type).     }     return answer. }
false;private;1;5;;private void setHandledFromExpressionType(RouteContext routeContext) {     if (definition.getHandled() != null && definition.getHandledPolicy() == null && routeContext != null) {         definition.handled(definition.getHandled().createPredicate(routeContext)).     } }
false;private;1;5;;private void setContinuedFromExpressionType(RouteContext routeContext) {     if (definition.getContinued() != null && definition.getContinuedPolicy() == null && routeContext != null) {         definition.continued(definition.getContinued().createPredicate(routeContext)).     } }
false;private;1;5;;private void setRetryWhileFromExpressionType(RouteContext routeContext) {     if (definition.getRetryWhile() != null && definition.getRetryWhilePolicy() == null && routeContext != null) {         definition.retryWhile(definition.getRetryWhile().createPredicate(routeContext)).     } }
false;private;1;8;;private void setOnRedeliveryFromRedeliveryRef(RouteContext routeContext) {     // lookup onRedelivery if ref is provided     if (ObjectHelper.isNotEmpty(definition.getOnRedeliveryRef())) {         // if ref is provided then use mandatory lookup to fail if not found         Processor onRedelivery = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), definition.getOnRedeliveryRef(), Processor.class).         definition.setOnRedelivery(onRedelivery).     } }
false;private;1;8;;private void setOnExceptionOccurredFromOnExceptionOccurredRef(RouteContext routeContext) {     // lookup onRedelivery if ref is provided     if (ObjectHelper.isNotEmpty(definition.getOnExceptionOccurredRef())) {         // if ref is provided then use mandatory lookup to fail if not found         Processor onExceptionOccurred = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), definition.getOnExceptionOccurredRef(), Processor.class).         definition.setOnExceptionOccurred(onExceptionOccurred).     } }
