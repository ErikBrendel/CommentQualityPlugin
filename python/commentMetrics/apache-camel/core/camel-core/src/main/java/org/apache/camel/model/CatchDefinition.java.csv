commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "DoCatch[ " + getExceptionClasses() + " -> " + getOutputs() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "doCatch". }
false;public;0;4;;@Override public String getLabel() {     return "doCatch[ " + getExceptionClasses() + "]". }
false;public;0;4;;@Override public List<ProcessorDefinition<?>> getOutputs() {     return outputs. }
false;public;1;3;;public void setOutputs(List<ProcessorDefinition<?>> outputs) {     this.outputs = outputs. }
false;public;0;3;;public boolean isOutputSupported() {     return true. }
false;public;0;3;;public List<Class<? extends Throwable>> getExceptionClasses() {     return exceptionClasses. }
false;public;1;3;;public void setExceptionClasses(List<Class<? extends Throwable>> exceptionClasses) {     this.exceptionClasses = exceptionClasses. }
true;public;1;4;/**  * The exceptions to catch.  *  * @param exceptionClasses  a list of the exception classes  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * The exceptions to catch.  *  * @param exceptionClasses  a list of the exception classes  * @return the builder  */ public CatchDefinition exceptionClasses(List<Class<? extends Throwable>> exceptionClasses) {     setExceptionClasses(exceptionClasses).     return this. }
true;public;1;9;/**  * The exception(s) to catch.  *  * @param exceptions  one or more exceptions  * @return the builder  */ ;/**  * The exception(s) to catch.  *  * @param exceptions  one or more exceptions  * @return the builder  */ public CatchDefinition exception(Class<? extends Throwable>... exceptions) {     if (exceptionClasses == null) {         exceptionClasses = new ArrayList<>().     }     if (exceptions != null) {         exceptionClasses.addAll(Arrays.asList(exceptions)).     }     return this. }
true;public;1;4;/**  * Sets an additional predicate that should be true before the onCatch is triggered.  * <p/>  * To be used for fine grained controlling whether a thrown exception should be intercepted  * by this exception type or not.  *  * @param predicate  predicate that determines true or false  * @return the builder  */ ;/**  * Sets an additional predicate that should be true before the onCatch is triggered.  * <p/>  * To be used for fine grained controlling whether a thrown exception should be intercepted  * by this exception type or not.  *  * @param predicate  predicate that determines true or false  * @return the builder  */ public CatchDefinition onWhen(@AsPredicate Predicate predicate) {     setOnWhen(new WhenDefinition(predicate)).     return this. }
true;public;1;5;/**  * Sets the exception class that the CatchType want to catch  *  * @param exception  the exception of class  * @return the builder  */ ;/**  * Sets the exception class that the CatchType want to catch  *  * @param exception  the exception of class  * @return the builder  */ public CatchDefinition exceptionClasses(Class<? extends Throwable> exception) {     List<Class<? extends Throwable>> list = getExceptionClasses().     list.add(exception).     return this. }
false;public;0;3;;public List<String> getExceptions() {     return exceptions. }
false;public;1;3;;public void setExceptions(List<String> exceptions) {     this.exceptions = exceptions. }
false;public;0;3;;public WhenDefinition getOnWhen() {     return onWhen. }
false;public;1;3;;public void setOnWhen(WhenDefinition onWhen) {     this.onWhen = onWhen. }
