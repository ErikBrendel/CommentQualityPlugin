commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public ProcessorDefinition<?> get(int index) {     if (index < whenClauses.size()) {         return whenClauses.get(index).     }     if (index == whenClauses.size()) {         return otherwise.     }     throw new IndexOutOfBoundsException("Index " + index + " is out of bounds with size " + size()). }
false;public;1;10;;public boolean add(ProcessorDefinition<?> def) {     if (def instanceof WhenDefinition) {         return whenClauses.add((WhenDefinition) def).     } else if (def instanceof OtherwiseDefinition) {         otherwise = (OtherwiseDefinition) def.         return true.     }     throw new IllegalArgumentException("Expected either a WhenDefinition or OtherwiseDefinition but was " + ObjectHelper.classCanonicalName(def)). }
false;public;0;3;;public int size() {     return whenClauses.size() + (otherwise == null ? 0 : 1). }
false;public;0;4;;public void clear() {     whenClauses.clear().     otherwise = null. }
false;public;2;14;;public ProcessorDefinition<?> set(int index, ProcessorDefinition<?> element) {     if (index < whenClauses.size()) {         if (element instanceof WhenDefinition) {             return whenClauses.set(index, (WhenDefinition) element).         }         throw new IllegalArgumentException("Expected WhenDefinition but was " + ObjectHelper.classCanonicalName(element)).     } else if (index == whenClauses.size()) {         ProcessorDefinition<?> old = otherwise.         otherwise = (OtherwiseDefinition) element.         return old.     }     throw new IndexOutOfBoundsException("Index " + index + " is out of bounds with size " + size()). }
false;public;1;10;;public ProcessorDefinition<?> remove(int index) {     if (index < whenClauses.size()) {         return whenClauses.remove(index).     } else if (index == whenClauses.size()) {         ProcessorDefinition<?> old = otherwise.         otherwise = null.         return old.     }     throw new IndexOutOfBoundsException("Index " + index + " is out of bounds with size " + size()). }
false;public;0;63;;@Override public List<ProcessorDefinition<?>> getOutputs() {     // but make it appear as a list on the outside     return new AbstractList<ProcessorDefinition<?>>() {          public ProcessorDefinition<?> get(int index) {             if (index < whenClauses.size()) {                 return whenClauses.get(index).             }             if (index == whenClauses.size()) {                 return otherwise.             }             throw new IndexOutOfBoundsException("Index " + index + " is out of bounds with size " + size()).         }          public boolean add(ProcessorDefinition<?> def) {             if (def instanceof WhenDefinition) {                 return whenClauses.add((WhenDefinition) def).             } else if (def instanceof OtherwiseDefinition) {                 otherwise = (OtherwiseDefinition) def.                 return true.             }             throw new IllegalArgumentException("Expected either a WhenDefinition or OtherwiseDefinition but was " + ObjectHelper.classCanonicalName(def)).         }          public int size() {             return whenClauses.size() + (otherwise == null ? 0 : 1).         }          public void clear() {             whenClauses.clear().             otherwise = null.         }          public ProcessorDefinition<?> set(int index, ProcessorDefinition<?> element) {             if (index < whenClauses.size()) {                 if (element instanceof WhenDefinition) {                     return whenClauses.set(index, (WhenDefinition) element).                 }                 throw new IllegalArgumentException("Expected WhenDefinition but was " + ObjectHelper.classCanonicalName(element)).             } else if (index == whenClauses.size()) {                 ProcessorDefinition<?> old = otherwise.                 otherwise = (OtherwiseDefinition) element.                 return old.             }             throw new IndexOutOfBoundsException("Index " + index + " is out of bounds with size " + size()).         }          public ProcessorDefinition<?> remove(int index) {             if (index < whenClauses.size()) {                 return whenClauses.remove(index).             } else if (index == whenClauses.size()) {                 ProcessorDefinition<?> old = otherwise.                 otherwise = null.                 return old.             }             throw new IndexOutOfBoundsException("Index " + index + " is out of bounds with size " + size()).         }     }. }
false;public;0;4;;@Override public boolean isOutputSupported() {     return true. }
false;public;0;4;;@Override public String toString() {     return "Choice[" + getWhenClauses() + (getOtherwise() != null ? " " + getOtherwise() : "") + "]". }
false;public;1;13;;@Override public void addOutput(ProcessorDefinition<?> output) {     if (onlyWhenOrOtherwise) {         if (output instanceof WhenDefinition || output instanceof OtherwiseDefinition) {             // okay we are adding a when or otherwise so allow any kind of output after this again             onlyWhenOrOtherwise = false.         } else {             throw new IllegalArgumentException("A new choice clause should start with a when() or otherwise(). " + "If you intend to end the entire choice and are using endChoice() then use end() instead.").         }     }     super.addOutput(output). }
false;public;0;6;;@Override public ProcessorDefinition<?> end() {     // we end a block so only when or otherwise is supported     onlyWhenOrOtherwise = true.     return super.end(). }
false;public;0;6;;@Override public ChoiceDefinition endChoice() {     // we end a block so only when or otherwise is supported     onlyWhenOrOtherwise = true.     return super.endChoice(). }
true;public;1;4;/**  * Sets the predicate for the when node  *  * @param predicate the predicate  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Sets the predicate for the when node  *  * @param predicate the predicate  * @return the builder  */ public ChoiceDefinition when(@AsPredicate Predicate predicate) {     addClause(new WhenDefinition(predicate)).     return this. }
true;public;0;6;/**  * Creates an expression for the when node  *  * @return expression to be used as builder to configure the when node  */ ;/**  * Creates an expression for the when node  *  * @return expression to be used as builder to configure the when node  */ @AsPredicate public ExpressionClause<ChoiceDefinition> when() {     ExpressionClause<ChoiceDefinition> clause = new ExpressionClause<>(this).     addClause(new WhenDefinition(clause)).     return clause. }
false;private;1;6;;private void addClause(ProcessorDefinition<?> when) {     onlyWhenOrOtherwise = true.     popBlock().     addOutput(when).     pushBlock(when). }
true;public;0;5;/**  * Sets the otherwise node  *  * @return the builder  */ ;/**  * Sets the otherwise node  *  * @return the builder  */ public ChoiceDefinition otherwise() {     OtherwiseDefinition answer = new OtherwiseDefinition().     addClause(answer).     return this. }
false;public;1;12;;@Override public void setId(String value) {     // when setting id, we should set it on the fine grained element, if possible     if (otherwise != null) {         otherwise.setId(value).     } else if (!getWhenClauses().isEmpty()) {         int size = getWhenClauses().size().         getWhenClauses().get(size - 1).setId(value).     } else {         super.setId(value).     } }
false;public;0;4;;// Properties // ------------------------------------------------------------------------- @Override public String getShortName() {     return "choice". }
false;public;0;10;;@Override public String getLabel() {     CollectionStringBuffer buffer = new CollectionStringBuffer("choice[").     List<WhenDefinition> list = getWhenClauses().     for (WhenDefinition whenType : list) {         buffer.append(whenType.getLabel()).     }     buffer.append("]").     return buffer.toString(). }
false;public;0;3;;public List<WhenDefinition> getWhenClauses() {     return whenClauses. }
true;public;1;3;/**  * Sets the when clauses  */ ;/**  * Sets the when clauses  */ public void setWhenClauses(List<WhenDefinition> whenClauses) {     this.whenClauses = whenClauses. }
false;public;0;3;;public OtherwiseDefinition getOtherwise() {     return otherwise. }
false;public;1;3;;public void setOtherwise(OtherwiseDefinition otherwise) {     this.otherwise = otherwise. }
false;public;1;18;;@Override public void configureChild(ProcessorDefinition<?> output) {     if (whenClauses == null || whenClauses.isEmpty()) {         return.     }     for (WhenDefinition when : whenClauses) {         if (when.getExpression() instanceof ExpressionClause) {             ExpressionClause<?> clause = (ExpressionClause<?>) when.getExpression().             if (clause.getExpressionType() != null) {                 // if using the Java DSL then the expression may have been set using the                 // ExpressionClause which is a fancy builder to define expressions and predicates                 // using fluent builders in the DSL. However we need afterwards a callback to                 // reset the expression to the expression type the ExpressionClause did build for us                 when.setExpression(clause.getExpressionType()).             }         }     } }
