commented;modifiers;parameterAmount;loc;comment;code
true;public;3;39;/**  * Perform data transformation with specified from/to type using DataFormat.  * @param message message to apply transformation  * @param from 'from' data type  * @param to 'to' data type  */ ;/**  * Perform data transformation with specified from/to type using DataFormat.  * @param message message to apply transformation  * @param from 'from' data type  * @param to 'to' data type  */ @Override public void transform(Message message, DataType from, DataType to) throws Exception {     Exchange exchange = message.getExchange().     CamelContext context = exchange.getContext().     // Unmarshaling into Java Object     if ((to == null || to.isJavaType()) && (from.equals(getFrom()) || from.getModel().equals(getModel()))) {         DataFormat dataFormat = getDataFormat(exchange).         LOG.debug("Unmarshaling with '{}'", dataFormat).         Object answer = dataFormat.unmarshal(exchange, message.getBody(InputStream.class)).         if (to != null && to.getName() != null) {             Class<?> toClass = context.getClassResolver().resolveClass(to.getName()).             if (!toClass.isAssignableFrom(answer.getClass())) {                 LOG.debug("Converting to '{}'", toClass.getName()).                 answer = context.getTypeConverter().mandatoryConvertTo(toClass, answer).             }         }         message.setBody(answer).     // Marshaling from Java Object     } else if ((from == null || from.isJavaType()) && (to.equals(getTo()) || to.getModel().equals(getModel()))) {         Object input = message.getBody().         if (from != null && from.getName() != null) {             Class<?> fromClass = context.getClassResolver().resolveClass(from.getName()).             if (!fromClass.isAssignableFrom(input.getClass())) {                 LOG.debug("Converting to '{}'", fromClass.getName()).                 input = context.getTypeConverter().mandatoryConvertTo(fromClass, input).             }         }         OutputStreamBuilder osb = OutputStreamBuilder.withExchange(exchange).         DataFormat dataFormat = getDataFormat(exchange).         LOG.debug("Marshaling with '{}'", dataFormat).         dataFormat.marshal(exchange, message.getBody(), osb).         message.setBody(osb.build()).     } else {         throw new IllegalArgumentException("Unsupported transformation: from='" + from + ", to='" + to + "'").     } }
true;private;1;10;/**  * A bit dirty hack to create DataFormat instance, as it requires a RouteContext anyway.  */ ;/**  * A bit dirty hack to create DataFormat instance, as it requires a RouteContext anyway.  */ private DataFormat getDataFormat(Exchange exchange) throws Exception {     if (this.dataFormat == null) {         this.dataFormat = DataFormatDefinition.getDataFormat(exchange.getUnitOfWork().getRouteContext(), this.dataFormatType, this.dataFormatRef).         if (this.dataFormat != null && !getCamelContext().hasService(this.dataFormat)) {             getCamelContext().addService(this.dataFormat, false).         }     }     return this.dataFormat. }
true;public;1;5;/**  * Set DataFormat ref.  * @param ref DataFormat ref  * @return this DataFormatTransformer instance  */ ;/**  * Set DataFormat ref.  * @param ref DataFormat ref  * @return this DataFormatTransformer instance  */ public DataFormatTransformer setDataFormatRef(String ref) {     this.dataFormatRef = ref.     this.transformerString = null.     return this. }
true;public;1;5;/**  * Set DataFormatDefinition.  * @param dataFormatType DataFormatDefinition  * @return this DataFormatTransformer instance  */ ;/**  * Set DataFormatDefinition.  * @param dataFormatType DataFormatDefinition  * @return this DataFormatTransformer instance  */ public DataFormatTransformer setDataFormatType(DataFormatDefinition dataFormatType) {     this.dataFormatType = dataFormatType.     this.transformerString = null.     return this. }
false;public;0;9;;@Override public String toString() {     if (transformerString == null) {         transformerString = String.format("DataFormatTransformer[scheme='%s', from='%s', to='%s', ref='%s', type='%s']", getModel(), getFrom(), getTo(), dataFormatRef, dataFormatType).     }     return transformerString. }
false;public;0;4;;@Override public void doStart() throws Exception { // no-op }
false;public;0;5;;@Override public void doStop() throws Exception {     ServiceHelper.stopService(this.dataFormat).     getCamelContext().removeService(this.dataFormat). }
