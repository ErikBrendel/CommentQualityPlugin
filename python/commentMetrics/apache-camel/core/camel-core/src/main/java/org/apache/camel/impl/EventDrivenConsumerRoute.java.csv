commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "EventDrivenConsumerRoute[" + getEndpoint() + " -> " + processor + "]". }
false;public;0;3;;public Processor getProcessor() {     return processor. }
true;protected;1;15;/**  * Factory method to lazily create the complete list of services required for this route  * such as adding the processor or consumer  */ ;/**  * Factory method to lazily create the complete list of services required for this route  * such as adding the processor or consumer  */ @Override protected void addServices(List<Service> services) throws Exception {     Endpoint endpoint = getEndpoint().     consumer = endpoint.createConsumer(processor).     if (consumer != null) {         services.add(consumer).         if (consumer instanceof RouteAware) {             ((RouteAware) consumer).setRoute(this).         }     }     Processor processor = getProcessor().     if (processor instanceof Service) {         services.add((Service) processor).     } }
false;public;0;18;;@SuppressWarnings("unchecked") public Navigate<Processor> navigate() {     Processor answer = getProcessor().     // and navigate to its output where it all starts from end user point of view     if (answer instanceof Navigate) {         Navigate<Processor> nav = (Navigate<Processor>) answer.         if (nav.next().size() == 1) {             Object first = nav.next().get(0).             if (first instanceof Navigate) {                 return (Navigate<Processor>) first.             }         }         return (Navigate<Processor>) answer.     }     return null. }
false;public;1;5;;public List<Processor> filter(String pattern) {     List<Processor> match = new ArrayList<>().     doFilter(pattern, navigate(), match).     return match. }
false;private;3;19;;@SuppressWarnings("unchecked") private void doFilter(String pattern, Navigate<Processor> nav, List<Processor> match) {     List<Processor> list = nav.next().     if (list != null) {         for (Processor proc : list) {             String id = null.             if (proc instanceof IdAware) {                 id = ((IdAware) proc).getId().             }             if (PatternHelper.matchPattern(id, pattern)) {                 match.add(proc).             }             if (proc instanceof Navigate) {                 Navigate<Processor> child = (Navigate<Processor>) proc.                 doFilter(pattern, child, match).             }         }     } }
false;public;0;3;;public Consumer getConsumer() {     return consumer. }
false;public;0;3;;public boolean supportsSuspension() {     return consumer instanceof Suspendable && consumer instanceof SuspendableService. }
