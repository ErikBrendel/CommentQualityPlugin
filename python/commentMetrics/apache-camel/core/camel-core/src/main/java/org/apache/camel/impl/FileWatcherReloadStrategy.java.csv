commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setFolder(String folder) {     this.folder = folder. }
false;public;1;3;;public void setRecursive(boolean isRecursive) {     this.isRecursive = isRecursive. }
true;public;1;3;/**  * Sets the delay in millis between checks for updated files.  * The default is 500 millis.  */ ;/**  * Sets the delay in millis between checks for updated files.  * The default is 500 millis.  */ public void setDelay(long delay) {     this.delay = delay. }
false;public;0;4;;@ManagedAttribute(description = "Folder being watched") public String getFolder() {     return folder. }
false;public;0;4;;@ManagedAttribute(description = "Whether the reload strategy watches directory recursively") public boolean isRecursive() {     return isRecursive. }
false;protected;0;24;;@Override protected void doStart() throws Exception {     super.doStart().     if (folder == null) {         // no folder configured         return.     }     File dir = new File(folder).     if (dir.exists() && dir.isDirectory()) {         log.info("Starting ReloadStrategy to watch directory: {}", dir).         // only include xml files         endpoint = getCamelContext().getEndpoint("file:" + dir + "?delay=" + delay + "&recursive=" + isRecursive + "&include=.*xml$&readLock=none&noop=true&idempotentKey=${file:name}-${file:modified}").         // must wrap in unit of work         task = new UnitOfWorkProducer(new UpdatedFileProcessor(endpoint)).         consumer = endpoint.createConsumer(task).         ServiceHelper.startService(endpoint).         ServiceHelper.startService(consumer).     } }
false;protected;0;13;;@Override protected void doStop() throws Exception {     super.doStop().     if (consumer != null) {         ServiceHelper.stopAndShutdownServices(consumer).         getCamelContext().removeService(consumer).     }     if (endpoint != null) {         ServiceHelper.stopAndShutdownServices(endpoint).         getCamelContext().removeEndpoint(endpoint).     } }
false;public;1;13;;@Override public void process(Exchange exchange) throws Exception {     String name = exchange.getMessage().getHeader(Exchange.FILE_NAME, String.class).     log.debug("Modified/Created file: {}", name).     try {         InputStream is = exchange.getMessage().getMandatoryBody(InputStream.class).         onReloadXml(getCamelContext(), name, is).         IOHelper.close(is).     } catch (Exception e) {         log.warn("Error reloading routes from file: " + name + " due " + e.getMessage() + ". This exception is ignored.", e).     } }
