commented;modifiers;parameterAmount;loc;comment;code
false;public;1;12;;@Override public void done(boolean doneSync) {     try {         // emit event that the exchange was sent to the endpoint         if (watch != null) {             long timeTaken = watch.taken().             EventHelper.notifyExchangeSent(exchange.getContext(), exchange, getEndpoint(), timeTaken).         }     } finally {         callback.done(doneSync).     } }
false;public;2;40;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     if (!isStarted()) {         exchange.setException(new IllegalStateException("Producer has not been started: " + this)).         callback.done(true).         return true.     }     final boolean sending = EventHelper.notifyExchangeSending(exchange.getContext(), exchange, getEndpoint()).     // record timing for sending the exchange using the producer     StopWatch watch.     if (sending) {         watch = new StopWatch().     } else {         watch = null.     }     try {         log.debug(">>>> {} {}", getEndpoint(), exchange).         return producer.process(exchange, new AsyncCallback() {              @Override             public void done(boolean doneSync) {                 try {                     // emit event that the exchange was sent to the endpoint                     if (watch != null) {                         long timeTaken = watch.taken().                         EventHelper.notifyExchangeSent(exchange.getContext(), exchange, getEndpoint(), timeTaken).                     }                 } finally {                     callback.done(doneSync).                 }             }         }).     } catch (Throwable throwable) {         exchange.setException(throwable).         callback.done(true).     }     return true. }
false;public;0;4;;@Override public Endpoint getEndpoint() {     return producer.getEndpoint(). }
false;public;0;4;;@Override public boolean isSingleton() {     return producer.isSingleton(). }
false;protected;0;4;;@Override protected void doStart() throws Exception {     ServiceHelper.startService(producer). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(producer). }
