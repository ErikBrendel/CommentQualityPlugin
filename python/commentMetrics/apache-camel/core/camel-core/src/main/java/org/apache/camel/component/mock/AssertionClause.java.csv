commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;// Builder methods // ------------------------------------------------------------------------- public ValueBuilder expression(Expression expression) {     // must override this method as we provide null in the constructor     super.expression(expression).     return new PredicateValueBuilder(getExpressionValue()). }
false;public;1;5;;public ValueBuilder expression(ExpressionDefinition expression) {     // must override this method as we provide null in the constructor     super.expression(expression).     return new PredicateValueBuilder(expression.createExpression(mock.getCamelContext())). }
true;public;1;4;/**  * Adds the given predicate to this assertion clause  */ ;/**  * Adds the given predicate to this assertion clause  */ public AssertionClause predicate(Predicate predicate) {     addPredicate(predicate).     return this. }
true;public;0;5;/**  * Adds the given predicate to this assertion clause  */ ;/**  * Adds the given predicate to this assertion clause  */ public ExpressionClause<AssertionClause> predicate() {     ExpressionClause<AssertionClause> clause = new ExpressionClause<>(this).     addPredicate(clause).     return clause. }
false;public;1;3;;public boolean matches(Exchange exchange) {     return clause.matches(exchange). }
false;public;0;4;;@Override public String toString() {     return "arrives " + clause.toString() + " exchange". }
true;public;0;14;/**  * Adds a {@link TimeClause} predicate for message arriving.  */ ;/**  * Adds a {@link TimeClause} predicate for message arriving.  */ public TimeClause arrives() {     final TimeClause clause = new TimeClause(previous, next).     addPredicate(new Predicate() {          public boolean matches(Exchange exchange) {             return clause.matches(exchange).         }          @Override         public String toString() {             return "arrives " + clause.toString() + " exchange".         }     }).     return clause. }
true;protected;3;14;/**  * Performs any assertions on the given exchange  */ ;/**  * Performs any assertions on the given exchange  */ protected void applyAssertionOn(MockEndpoint endpoint, int index, Exchange exchange) {     for (Predicate predicate : predicates) {         currentIndex = index.         Object value = exchange.hasOut() ? exchange.getOut().getBody() : exchange.getIn().getBody().         // by resetting it (this is also what StreamCachingAdvice does)         if (value instanceof StreamCache) {             ((StreamCache) value).reset().         }         PredicateAssertHelper.assertMatches(predicate, "Assertion error at index " + index + " on mock " + endpoint.getEndpointUri() + " with predicate: ", exchange).     } }
false;protected;1;3;;protected void addPredicate(Predicate predicate) {     predicates.add(predicate). }
false;public;2;7;;public <T> T evaluate(Exchange exchange, Class<T> type) {     Date answer = null.     if (currentIndex > 0 && mock.getReceivedCounter() > 0) {         answer = mock.getReceivedExchanges().get(currentIndex - 1).getProperty(Exchange.RECEIVED_TIMESTAMP, Date.class).     }     return (T) answer. }
false;public;2;7;;public <T> T evaluate(Exchange exchange, Class<T> type) {     Date answer = null.     if (currentIndex < mock.getReceivedCounter() - 1) {         answer = mock.getReceivedExchanges().get(currentIndex + 1).getProperty(Exchange.RECEIVED_TIMESTAMP, Date.class).     }     return (T) answer. }
false;protected;1;6;;@Override protected Predicate onNewPredicate(Predicate predicate) {     predicate = super.onNewPredicate(predicate).     addPredicate(predicate).     return predicate. }
false;protected;1;4;;@Override protected ValueBuilder onNewValueBuilder(Expression exp) {     return new PredicateValueBuilder(exp). }
