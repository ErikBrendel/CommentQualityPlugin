commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getLanguage() {     return "bean". }
false;public;0;3;;public String getRef() {     return ref. }
true;public;1;3;/**  * Reference to bean to lookup in the registry  */ ;/**  * Reference to bean to lookup in the registry  */ public void setRef(String ref) {     this.ref = ref. }
false;public;0;3;;public String getMethod() {     return method. }
true;public;1;3;/**  * Name of method to call  */ ;/**  * Name of method to call  */ public void setMethod(String method) {     this.method = method. }
false;public;0;3;;public Class<?> getBeanType() {     return beanType. }
false;public;1;4;;public void setBeanType(Class<?> beanType) {     this.beanType = beanType.     this.instance = null. }
false;public;0;3;;public String getBeanTypeName() {     return beanTypeName. }
true;public;1;3;/**  * Class name of the bean to use  */ ;/**  * Class name of the bean to use  */ public void setBeanTypeName(String beanTypeName) {     this.beanTypeName = beanTypeName. }
false;public;0;3;;public Object getInstance() {     return instance. }
false;public;1;10;;public void setInstance(Object instance) {     // people may by mistake pass in a class type as the instance     if (instance instanceof Class) {         this.beanType = (Class<?>) instance.         this.instance = null.     } else {         this.beanType = null.         this.instance = instance.     } }
false;public;1;39;;@Override public Expression createExpression(CamelContext camelContext) {     Expression answer.     if (beanType == null && beanTypeName != null) {         try {             beanType = camelContext.getClassResolver().resolveMandatoryClass(beanTypeName).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     BeanHolder holder.     if (beanType != null) {         // create a bean if there is a default public no-arg constructor         if (ObjectHelper.hasDefaultPublicNoArgConstructor(beanType)) {             instance = camelContext.getInjector().newInstance(beanType).             holder = new ConstantBeanHolder(instance, camelContext).         } else {             holder = new ConstantStaticTypeBeanHolder(beanType, camelContext).         }     } else if (instance != null) {         holder = new ConstantBeanHolder(instance, camelContext).     } else {         String ref = beanName().         // if its a ref then check that the ref exists         BeanHolder regHolder = new RegistryBean(camelContext, ref).         // get the bean which will check that it exists         instance = regHolder.getBean().         holder = new ConstantBeanHolder(instance, camelContext).     }     // create answer using the holder     answer = new BeanExpression(holder, getMethod()).     // and do sanity check that if a method name was given, that it exists     validateHasMethod(camelContext, instance, beanType, getMethod()).     return answer. }
false;public;1;4;;@Override public Predicate createPredicate(CamelContext camelContext) {     return (Predicate) createExpression(camelContext). }
true;protected;4;33;/**  * Validates the given bean has the method.  * <p/>  * This implementation will skip trying to validate OGNL method name expressions.  *  * @param context  camel context  * @param bean     the bean instance  * @param type     the bean type  * @param method   the method, can be <tt>null</tt> if no method name provided  * @throws org.apache.camel.RuntimeCamelException is thrown if bean does not have the method  */ ;/**  * Validates the given bean has the method.  * <p/>  * This implementation will skip trying to validate OGNL method name expressions.  *  * @param context  camel context  * @param bean     the bean instance  * @param type     the bean type  * @param method   the method, can be <tt>null</tt> if no method name provided  * @throws org.apache.camel.RuntimeCamelException is thrown if bean does not have the method  */ protected void validateHasMethod(CamelContext context, Object bean, Class<?> type, String method) {     if (method == null) {         return.     }     if (bean == null && type == null) {         throw new IllegalArgumentException("Either bean or type should be provided on " + this).     }     // do not try to validate ognl methods     if (OgnlHelper.isValidOgnlExpression(method)) {         return.     }     // if invalid OGNL then fail     if (OgnlHelper.isInvalidValidOgnlExpression(method)) {         ExpressionIllegalSyntaxException cause = new ExpressionIllegalSyntaxException(method).         throw RuntimeCamelException.wrapRuntimeCamelException(new MethodNotFoundException(bean != null ? bean : type, method, cause)).     }     if (bean != null) {         BeanInfo info = new BeanInfo(context, bean.getClass()).         if (!info.hasMethod(method)) {             throw RuntimeCamelException.wrapRuntimeCamelException(new MethodNotFoundException(null, bean, method)).         }     } else {         BeanInfo info = new BeanInfo(context, type).         // must be a static method as we do not have a bean instance to invoke         if (!info.hasStaticMethod(method)) {             throw RuntimeCamelException.wrapRuntimeCamelException(new MethodNotFoundException(null, type, method, true)).         }     } }
false;protected;0;8;;protected String beanName() {     if (ref != null) {         return ref.     } else if (instance != null) {         return ObjectHelper.className(instance).     }     return getExpression(). }
false;public;0;5;;@Override public String toString() {     boolean isRef = ref != null.     return "bean[" + (isRef ? "ref:" : "") + beanName() + (method != null ? " method:" + method : "") + "]". }
