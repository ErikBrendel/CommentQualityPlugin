commented;modifiers;parameterAmount;loc;comment;code
false;public;1;35;;@Override public void notify(CamelEvent event) throws Exception {     boolean begin = event instanceof ExchangeCreatedEvent.     boolean complete = event instanceof ExchangeCompletedEvent || event instanceof ExchangeFailedEvent.     if (maxMessages > 0 && complete) {         doneMessages++.         boolean result = doneMessages >= maxMessages.         LOG.trace("Duration max messages check {} >= {} -> {}", doneMessages, maxMessages, result).         if (result) {             if (completed.compareAndSet(false, true)) {                 LOG.info("Duration max messages triggering shutdown of the JVM.").                 try {                     // shutting down CamelContext                     if (stopCamelContext) {                         camelContext.stop().                     }                 } catch (Exception e) {                     LOG.warn("Error during stopping CamelContext. This exception is ignored.", e).                 } finally {                     // trigger stopping the Main                     latch.countDown().                 }             }         }     }     // idle reacts on both incoming and complete messages     if (maxIdleSeconds > 0 && (begin || complete)) {         LOG.trace("Message activity so restarting stop watch").         watch.restart().     } }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeCompletedEvent || event instanceof ExchangeFailedEvent. }
false;public;0;4;;@Override public String toString() {     return "MainDurationEventNotifier[" + maxMessages + " max messages]". }
false;protected;0;46;;@Override protected void doStart() throws Exception {     if (maxIdleSeconds > 0) {         // we only start watch when Camel is started         camelContext.addStartupListener((context, alreadyStarted) -> watch = new StopWatch()).         // okay we need to trigger on idle after X period, and therefore we need a background task that checks this         executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "MainDurationIdleChecker").         Runnable task = () -> {             if (watch == null) {                 // camel has not been started yet                 return.             }             // any inflight messages currently             int inflight = camelContext.getInflightRepository().size().             if (inflight > 0) {                 LOG.trace("Duration max idle check is skipped due {} inflight messages", inflight).                 return.             }             long seconds = watch.taken() / 1000.             boolean result = seconds >= maxIdleSeconds.             LOG.trace("Duration max idle check {} >= {} -> {}", seconds, maxIdleSeconds, result).             if (result) {                 if (completed.compareAndSet(false, true)) {                     LOG.info("Duration max idle triggering shutdown of the JVM.").                     try {                         // shutting down CamelContext                         if (stopCamelContext) {                             camelContext.stop().                         }                     } catch (Exception e) {                         LOG.warn("Error during stopping CamelContext. This exception is ignored.", e).                     } finally {                         // trigger stopping the Main                         latch.countDown().                     }                 }             }         }.         executorService.scheduleAtFixedRate(task, 1, 1, TimeUnit.SECONDS).     } }
