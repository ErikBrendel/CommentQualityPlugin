commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public String toString() {     if (fallbackViaNetwork != null && fallbackViaNetwork) {         return "OnFallbackViaNetwork[" + getOutputs() + "]".     } else {         return "OnFallback[" + getOutputs() + "]".     } }
false;public;0;4;;@Override public String getShortName() {     return "onFallback". }
false;public;0;12;;@Override public String getLabel() {     String name = fallbackViaNetwork != null && fallbackViaNetwork ? "onFallbackViaNetwork" : "onFallback".     CollectionStringBuffer buffer = new CollectionStringBuffer(name).     buffer.append("[").     List<ProcessorDefinition<?>> list = getOutputs().     for (ProcessorDefinition<?> type : list) {         buffer.append(type.getLabel()).     }     buffer.append("]").     return buffer.toString(). }
false;public;0;3;;public Boolean getFallbackViaNetwork() {     return fallbackViaNetwork. }
true;public;1;3;/**  * Whether the fallback goes over the network.  * <p/>  * If the fallback will go over the network it is another possible point of failure and so it also needs to be  * wrapped by a HystrixCommand. It is important to execute the fallback command on a separate thread-pool,  * otherwise if the main command were to become latent and fill the thread-pool  * this would prevent the fallback from running if the two commands share the same pool.  */ ;/**  * Whether the fallback goes over the network.  * <p/>  * If the fallback will go over the network it is another possible point of failure and so it also needs to be  * wrapped by a HystrixCommand. It is important to execute the fallback command on a separate thread-pool,  * otherwise if the main command were to become latent and fill the thread-pool  * this would prevent the fallback from running if the two commands share the same pool.  */ public void setFallbackViaNetwork(Boolean fallbackViaNetwork) {     this.fallbackViaNetwork = fallbackViaNetwork. }
false;public;0;4;;public boolean isFallbackViaNetwork() {     // is default false     return fallbackViaNetwork != null && fallbackViaNetwork. }
