commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext.     if (strategy instanceof CamelContextAware) {         ((CamelContextAware) strategy).setCamelContext(camelContext).     } }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;0;3;;public AggregationStrategy getDelegate() {     return strategy. }
false;public;0;4;;@Override public boolean canPreComplete() {     return strategy.canPreComplete(). }
false;public;2;4;;@Override public boolean preComplete(Exchange oldExchange, Exchange newExchange) {     return strategy.preComplete(oldExchange, newExchange). }
false;public;1;4;;@Override public void onCompletion(Exchange exchange) {     strategy.onCompletion(exchange). }
false;public;4;4;;@Override public void timeout(Exchange exchange, int index, int total, long timeout) {     strategy.timeout(exchange, index, total, timeout). }
false;public;2;4;;@Override public void onOptimisticLockFailure(Exchange oldExchange, Exchange newExchange) {     strategy.onOptimisticLockFailure(oldExchange, newExchange). }
false;public;2;8;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     // aggregate using the actual strategy first     Exchange answer = strategy.aggregate(oldExchange, newExchange).     // ensure any errors is propagated from the new exchange to the answer     propagateFailure(answer, newExchange).     return answer. }
false;protected;2;24;;protected void propagateFailure(Exchange answer, Exchange newExchange) {     // if new exchange failed then propagate all the error related properties to the answer     boolean exceptionHandled = hasExceptionBeenHandledByErrorHandler(newExchange).     if (newExchange.isFailed() || newExchange.isRollbackOnly() || exceptionHandled) {         if (newExchange.getException() != null) {             answer.setException(newExchange.getException()).         }         if (newExchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {             answer.setProperty(Exchange.EXCEPTION_CAUGHT, newExchange.getProperty(Exchange.EXCEPTION_CAUGHT)).         }         if (newExchange.getProperty(Exchange.FAILURE_ENDPOINT) != null) {             answer.setProperty(Exchange.FAILURE_ENDPOINT, newExchange.getProperty(Exchange.FAILURE_ENDPOINT)).         }         if (newExchange.getProperty(Exchange.FAILURE_ROUTE_ID) != null) {             answer.setProperty(Exchange.FAILURE_ROUTE_ID, newExchange.getProperty(Exchange.FAILURE_ROUTE_ID)).         }         if (newExchange.getProperty(Exchange.ERRORHANDLER_HANDLED) != null) {             answer.setProperty(Exchange.ERRORHANDLER_HANDLED, newExchange.getProperty(Exchange.ERRORHANDLER_HANDLED)).         }         if (newExchange.getProperty(Exchange.FAILURE_HANDLED) != null) {             answer.setProperty(Exchange.FAILURE_HANDLED, newExchange.getProperty(Exchange.FAILURE_HANDLED)).         }     } }
false;public;0;4;;@Override public String toString() {     return "ShareUnitOfWorkAggregationStrategy". }
false;protected;0;4;;@Override protected void doStart() throws Exception {     ServiceHelper.startService(strategy). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopAndShutdownServices(strategy). }
