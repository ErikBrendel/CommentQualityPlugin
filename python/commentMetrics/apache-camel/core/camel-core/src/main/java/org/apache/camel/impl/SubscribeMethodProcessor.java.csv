commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Endpoint getEndpoint() {     return endpoint. }
false;protected;4;15;;protected void addMethod(final Object pojo, final Method method, final Endpoint endpoint, String predicate) {     BeanInfo info = new BeanInfo(endpoint.getCamelContext(), method).     BeanProcessor answer = new BeanProcessor(pojo, info).     // must ensure the consumer is being executed in an unit of work so synchronization callbacks etc is invoked     CamelInternalProcessor internal = new CamelInternalProcessor(answer).     internal.addAdvice(new CamelInternalProcessor.UnitOfWorkProcessorAdvice(null)).     Predicate p.     if (ObjectHelper.isEmpty(predicate)) {         p = PredicateBuilder.constant(true).     } else {         p = endpoint.getCamelContext().resolveLanguage("simple").createPredicate(predicate).     }     methods.put(internal, p). }
false;public;2;16;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         // evaluate which predicate matches and call the method         for (Map.Entry<AsyncProcessor, Predicate> entry : methods.entrySet()) {             Predicate predicate = entry.getValue().             if (predicate.matches(exchange)) {                 return entry.getKey().process(exchange, callback).             }         }     } catch (Throwable e) {         exchange.setException(e).     }     callback.done(true).     return true. }
false;protected;0;4;;@Override protected void doStart() throws Exception {     ServiceHelper.startService(methods.keySet()). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(methods.keySet()). }
false;protected;0;4;;@Override protected void doShutdown() throws Exception {     ServiceHelper.stopAndShutdownServices(methods.keySet()). }
false;public;0;4;;@Override public String toString() {     return "SubscribeMethodProcessor[" + endpoint + "]". }
false;public;0;4;;@Override public List<Processor> next() {     return new ArrayList<>(methods.keySet()). }
false;public;0;4;;@Override public boolean hasNext() {     return !methods.isEmpty(). }
