commented;modifiers;parameterAmount;loc;comment;code
false;public;1;21;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     // if configured from XML then streamConfig has been set with the configuration     if (definition.getResequencerConfig() != null) {         if (definition.getResequencerConfig() instanceof StreamResequencerConfig) {             definition.setStreamConfig((StreamResequencerConfig) definition.getResequencerConfig()).         } else {             definition.setBatchConfig((BatchResequencerConfig) definition.getResequencerConfig()).         }     }     if (definition.getStreamConfig() != null) {         return createStreamResequencer(routeContext, definition.getStreamConfig()).     } else {         if (definition.getBatchConfig() == null) {             // default as batch mode             definition.batch().         }         return createBatchResequencer(routeContext, definition.getBatchConfig()).     } }
true;protected;2;26;/**  * Creates a batch {@link Resequencer} instance applying the given <code>config</code>.  *  * @param routeContext route context.  * @param config batch resequencer configuration.  * @return the configured batch resequencer.  * @throws Exception can be thrown  */ ;/**  * Creates a batch {@link Resequencer} instance applying the given <code>config</code>.  *  * @param routeContext route context.  * @param config batch resequencer configuration.  * @return the configured batch resequencer.  * @throws Exception can be thrown  */ @SuppressWarnings("deprecation") protected Resequencer createBatchResequencer(RouteContext routeContext, BatchResequencerConfig config) throws Exception {     Processor processor = this.createChildProcessor(routeContext, true).     Expression expression = definition.getExpression().createExpression(routeContext).     // and wrap in unit of work     CamelInternalProcessor internal = new CamelInternalProcessor(processor).     internal.addAdvice(new CamelInternalProcessor.UnitOfWorkProcessorAdvice(routeContext)).     ObjectHelper.notNull(config, "config", this).     ObjectHelper.notNull(expression, "expression", this).     boolean isReverse = config.getReverse() != null && config.getReverse().     boolean isAllowDuplicates = config.getAllowDuplicates() != null && config.getAllowDuplicates().     Resequencer resequencer = new Resequencer(routeContext.getCamelContext(), internal, expression, isAllowDuplicates, isReverse).     resequencer.setBatchSize(config.getBatchSize()).     resequencer.setBatchTimeout(config.getBatchTimeout()).     resequencer.setReverse(isReverse).     resequencer.setAllowDuplicates(isAllowDuplicates).     if (config.getIgnoreInvalidExchanges() != null) {         resequencer.setIgnoreInvalidExchanges(config.getIgnoreInvalidExchanges()).     }     return resequencer. }
true;protected;2;34;/**  * Creates a {@link StreamResequencer} instance applying the given <code>config</code>.  *  * @param routeContext route context.  * @param config stream resequencer configuration.  * @return the configured stream resequencer.  * @throws Exception can be thrwon  */ ;/**  * Creates a {@link StreamResequencer} instance applying the given <code>config</code>.  *  * @param routeContext route context.  * @param config stream resequencer configuration.  * @return the configured stream resequencer.  * @throws Exception can be thrwon  */ protected StreamResequencer createStreamResequencer(RouteContext routeContext, StreamResequencerConfig config) throws Exception {     Processor processor = this.createChildProcessor(routeContext, true).     Expression expression = definition.getExpression().createExpression(routeContext).     CamelInternalProcessor internal = new CamelInternalProcessor(processor).     internal.addAdvice(new CamelInternalProcessor.UnitOfWorkProcessorAdvice(routeContext)).     ObjectHelper.notNull(config, "config", this).     ObjectHelper.notNull(expression, "expression", this).     ExpressionResultComparator comparator.     if (config.getComparatorRef() != null) {         comparator = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), config.getComparatorRef(), ExpressionResultComparator.class).     } else {         comparator = config.getComparator().         if (comparator == null) {             comparator = new DefaultExchangeComparator().         }     }     comparator.setExpression(expression).     StreamResequencer resequencer = new StreamResequencer(routeContext.getCamelContext(), internal, comparator, expression).     resequencer.setTimeout(config.getTimeout()).     if (config.getDeliveryAttemptInterval() != null) {         resequencer.setDeliveryAttemptInterval(config.getDeliveryAttemptInterval()).     }     resequencer.setCapacity(config.getCapacity()).     resequencer.setRejectOld(config.getRejectOld()).     if (config.getIgnoreInvalidExchanges() != null) {         resequencer.setIgnoreInvalidExchanges(config.getIgnoreInvalidExchanges()).     }     return resequencer. }
