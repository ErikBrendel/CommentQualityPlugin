commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "Intercept[" + getOutputs() + "]". }
false;public;0;4;;@Override public String getShortName() {     return "intercept". }
false;public;0;4;;@Override public String getLabel() {     return "intercept". }
false;public;0;4;;@Override public boolean isAbstract() {     return true. }
false;public;0;4;;@Override public boolean isTopLevelOnly() {     return true. }
true;public;1;5;/**  * Applies this interceptor only if the given predicate is true  *  * @param predicate the predicate  * @return the builder  */ ;/**  * Applies this interceptor only if the given predicate is true  *  * @param predicate the predicate  * @return the builder  */ public InterceptDefinition when(@AsPredicate Predicate predicate) {     WhenDefinition when = new WhenDefinition(predicate).     addOutput(when).     return this. }
true;public;0;21;/**  * This method is <b>only</b> for handling some post configuration  * that is needed since this is an interceptor, and we have to do  * a bit of magic logic to fixup to handle predicates  * with or without proceed/stop set as well.  */ ;/**  * This method is <b>only</b> for handling some post configuration  * that is needed since this is an interceptor, and we have to do  * a bit of magic logic to fixup to handle predicates  * with or without proceed/stop set as well.  */ public void afterPropertiesSet() {     if (getOutputs().size() == 0) {         // no outputs         return.     }     ProcessorDefinition<?> first = getOutputs().get(0).     if (first instanceof WhenDefinition) {         WhenDefinition when = (WhenDefinition) first.         // as the first one is the interceptor itself         for (int i = 1. i < outputs.size(). i++) {             ProcessorDefinition<?> out = outputs.get(i).             when.addOutput(out).         }         // remove the moved from the original output, by just keeping the first one         ProcessorDefinition<?> keep = outputs.get(0).         clearOutput().         outputs.add(keep).     } }
false;public;0;3;;public List<Processor> getIntercepted() {     return intercepted. }
false;public;1;8;;public Processor getInterceptedProcessor(int index) {     // avoid out of bounds     if (index <= intercepted.size() - 1) {         return intercepted.get(index).     } else {         return null.     } }
