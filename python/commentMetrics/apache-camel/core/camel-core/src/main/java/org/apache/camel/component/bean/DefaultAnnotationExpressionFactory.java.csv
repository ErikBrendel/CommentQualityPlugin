commented;modifiers;parameterAmount;loc;comment;code
false;public;4;18;;public Expression createExpression(CamelContext camelContext, Annotation annotation, LanguageAnnotation languageAnnotation, Class<?> expressionReturnType) {     String languageName = languageAnnotation.language().     if (languageName == null) {         throw new IllegalArgumentException("Cannot determine the language from the annotation: " + annotation).     }     Language language = camelContext.resolveLanguage(languageName).     if (language == null) {         throw new IllegalArgumentException("Cannot find the language: " + languageName + " on the classpath").     }     String expression = getExpressionFromAnnotation(annotation).     if (expressionReturnType == Boolean.class || expressionReturnType == boolean.class) {         Predicate predicate = language.createPredicate(expression).         return PredicateToExpressionAdapter.toExpression(predicate).     } else {         return language.createExpression(expression).     } }
false;protected;1;7;;protected String getExpressionFromAnnotation(Annotation annotation) {     Object value = getAnnotationObjectValue(annotation, "value").     if (value == null) {         throw new IllegalArgumentException("Cannot determine the expression from the annotation: " + annotation).     }     return value.toString(). }
true;protected;2;10;/**  * @param annotation The annotation to get the value of  * @param methodName The annotation name  * @return The value of the annotation  */ ;/**  * @param annotation The annotation to get the value of  * @param methodName The annotation name  * @return The value of the annotation  */ protected Object getAnnotationObjectValue(Annotation annotation, String methodName) {     try {         Method method = annotation.getClass().getMethod(methodName).         Object value = ObjectHelper.invokeMethod(method, annotation).         return value.     } catch (NoSuchMethodException e) {         throw new IllegalArgumentException("Cannot determine the Object value of the annotation: " + annotation + " as it does not have the method: " + methodName + "() method", e).     } }
