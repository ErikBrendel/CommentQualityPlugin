# id;timestamp;commentText;codeText;commentWords;codeWords
ExpressionBuilder -> public static Expression exchangeOgnlExpression(final String ognl);1549264559;Returns the expression for the exchange invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the exchange in a simple OGNL syntax;public static Expression exchangeOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                _                return new MethodCallExpression(exchange, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchange,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,exchange,in,a,simple,ognl,syntax;public,static,expression,exchange,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,new,method,call,expression,exchange,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,ognl,ognl
ExpressionBuilder -> public static Expression exchangeOgnlExpression(final String ognl);1549910857;Returns the expression for the exchange invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the exchange in a simple OGNL syntax;public static Expression exchangeOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                _                return new MethodCallExpression(exchange, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchange,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,exchange,in,a,simple,ognl,syntax;public,static,expression,exchange,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,new,method,call,expression,exchange,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,ognl,ognl
ExpressionBuilder -> public static Expression exchangeOgnlExpression(final String ognl);1549911461;Returns the expression for the exchange invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the exchange in a simple OGNL syntax;public static Expression exchangeOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                _                return new MethodCallExpression(exchange, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchange,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,exchange,in,a,simple,ognl,syntax;public,static,expression,exchange,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,new,method,call,expression,exchange,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,ognl,ognl
ExpressionBuilder -> public static Expression exchangeOgnlExpression(final String ognl);1549967332;Returns the expression for the exchange invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the exchange in a simple OGNL syntax;public static Expression exchangeOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                _                return new MethodCallExpression(exchange, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchange,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,exchange,in,a,simple,ognl,syntax;public,static,expression,exchange,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,new,method,call,expression,exchange,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,ognl,ognl
ExpressionBuilder -> public static Expression exchangeOgnlExpression(final String ognl);1549967797;Returns the expression for the exchange invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the exchange in a simple OGNL syntax;public static Expression exchangeOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                _                return new MethodCallExpression(exchange, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchange,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,exchange,in,a,simple,ognl,syntax;public,static,expression,exchange,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,new,method,call,expression,exchange,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,ognl,ognl
ExpressionBuilder -> public static Expression exchangeExceptionStackTraceExpression();1549264559;Returns an expression for an exception stacktrace set on the exchange__@return an expression object which will return the exception stacktrace set on the exchange;public static Expression exchangeExceptionStackTraceExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                if (exception != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    exception.printStackTrace(pw)__                    IOHelper.close(pw, sw)__                    return sw.toString()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "exchangeExceptionStackTrace"__            }_        }__    };returns,an,expression,for,an,exception,stacktrace,set,on,the,exchange,return,an,expression,object,which,will,return,the,exception,stacktrace,set,on,the,exchange;public,static,expression,exchange,exception,stack,trace,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,exception,print,stack,trace,pw,iohelper,close,pw,sw,return,sw,to,string,else,return,null,override,public,string,to,string,return,exchange,exception,stack,trace
ExpressionBuilder -> public static Expression exchangeExceptionStackTraceExpression();1549910857;Returns an expression for an exception stacktrace set on the exchange__@return an expression object which will return the exception stacktrace set on the exchange;public static Expression exchangeExceptionStackTraceExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                if (exception != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    exception.printStackTrace(pw)__                    IOHelper.close(pw, sw)__                    return sw.toString()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "exchangeExceptionStackTrace"__            }_        }__    };returns,an,expression,for,an,exception,stacktrace,set,on,the,exchange,return,an,expression,object,which,will,return,the,exception,stacktrace,set,on,the,exchange;public,static,expression,exchange,exception,stack,trace,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,exception,print,stack,trace,pw,iohelper,close,pw,sw,return,sw,to,string,else,return,null,override,public,string,to,string,return,exchange,exception,stack,trace
ExpressionBuilder -> public static Expression exchangeExceptionStackTraceExpression();1549911461;Returns an expression for an exception stacktrace set on the exchange__@return an expression object which will return the exception stacktrace set on the exchange;public static Expression exchangeExceptionStackTraceExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                if (exception != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    exception.printStackTrace(pw)__                    IOHelper.close(pw, sw)__                    return sw.toString()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "exchangeExceptionStackTrace"__            }_        }__    };returns,an,expression,for,an,exception,stacktrace,set,on,the,exchange,return,an,expression,object,which,will,return,the,exception,stacktrace,set,on,the,exchange;public,static,expression,exchange,exception,stack,trace,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,exception,print,stack,trace,pw,iohelper,close,pw,sw,return,sw,to,string,else,return,null,override,public,string,to,string,return,exchange,exception,stack,trace
ExpressionBuilder -> public static Expression exchangeExceptionStackTraceExpression();1549967332;Returns an expression for an exception stacktrace set on the exchange__@return an expression object which will return the exception stacktrace set on the exchange;public static Expression exchangeExceptionStackTraceExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                if (exception != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    exception.printStackTrace(pw)__                    IOHelper.close(pw, sw)__                    return sw.toString()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "exchangeExceptionStackTrace"__            }_        }__    };returns,an,expression,for,an,exception,stacktrace,set,on,the,exchange,return,an,expression,object,which,will,return,the,exception,stacktrace,set,on,the,exchange;public,static,expression,exchange,exception,stack,trace,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,exception,print,stack,trace,pw,iohelper,close,pw,sw,return,sw,to,string,else,return,null,override,public,string,to,string,return,exchange,exception,stack,trace
ExpressionBuilder -> public static Expression exchangeExceptionStackTraceExpression();1549967797;Returns an expression for an exception stacktrace set on the exchange__@return an expression object which will return the exception stacktrace set on the exchange;public static Expression exchangeExceptionStackTraceExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                if (exception != null) {_                    StringWriter sw = new StringWriter()__                    PrintWriter pw = new PrintWriter(sw)__                    exception.printStackTrace(pw)__                    IOHelper.close(pw, sw)__                    return sw.toString()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "exchangeExceptionStackTrace"__            }_        }__    };returns,an,expression,for,an,exception,stacktrace,set,on,the,exchange,return,an,expression,object,which,will,return,the,exception,stacktrace,set,on,the,exchange;public,static,expression,exchange,exception,stack,trace,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,string,writer,sw,new,string,writer,print,writer,pw,new,print,writer,sw,exception,print,stack,trace,pw,iohelper,close,pw,sw,return,sw,to,string,else,return,null,override,public,string,to,string,return,exchange,exception,stack,trace
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function);1549264559;Returns a functional expression for the exchanges inbound message body converted to a desired type and headers;public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type,and,headers;public,static,t,expression,body,expression,final,class,t,body,type,final,bi,function,t,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function);1549910857;Returns a functional expression for the exchanges inbound message body converted to a desired type and headers;public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type,and,headers;public,static,t,expression,body,expression,final,class,t,body,type,final,bi,function,t,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function);1549911461;Returns a functional expression for the exchanges inbound message body converted to a desired type and headers;public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type,and,headers;public,static,t,expression,body,expression,final,class,t,body,type,final,bi,function,t,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function);1549967332;Returns a functional expression for the exchanges inbound message body converted to a desired type and headers;public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type,and,headers;public,static,t,expression,body,expression,final,class,t,body,type,final,bi,function,t,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function);1549967797;Returns a functional expression for the exchanges inbound message body converted to a desired type and headers;public static <T> Expression bodyExpression(final Class<T> bodyType, final BiFunction<T, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type,and,headers;public,static,t,expression,body,expression,final,class,t,body,type,final,bi,function,t,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static Expression append(final Expression left, final Expression right);1549264559;Appends the String evaluations of the two expressions together;public static Expression append(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return left.evaluate(exchange, String.class) + right.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "append(" + left + ", " + right + ")"__            }_        }__    };appends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,append,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,left,evaluate,exchange,string,class,right,evaluate,exchange,string,class,override,public,string,to,string,return,append,left,right
ExpressionBuilder -> public static Expression append(final Expression left, final Expression right);1549910857;Appends the String evaluations of the two expressions together;public static Expression append(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return left.evaluate(exchange, String.class) + right.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "append(" + left + ", " + right + ")"__            }_        }__    };appends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,append,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,left,evaluate,exchange,string,class,right,evaluate,exchange,string,class,override,public,string,to,string,return,append,left,right
ExpressionBuilder -> public static Expression append(final Expression left, final Expression right);1549911461;Appends the String evaluations of the two expressions together;public static Expression append(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return left.evaluate(exchange, String.class) + right.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "append(" + left + ", " + right + ")"__            }_        }__    };appends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,append,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,left,evaluate,exchange,string,class,right,evaluate,exchange,string,class,override,public,string,to,string,return,append,left,right
ExpressionBuilder -> public static Expression append(final Expression left, final Expression right);1549967332;Appends the String evaluations of the two expressions together;public static Expression append(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return left.evaluate(exchange, String.class) + right.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "append(" + left + ", " + right + ")"__            }_        }__    };appends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,append,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,left,evaluate,exchange,string,class,right,evaluate,exchange,string,class,override,public,string,to,string,return,append,left,right
ExpressionBuilder -> public static Expression append(final Expression left, final Expression right);1549967797;Appends the String evaluations of the two expressions together;public static Expression append(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return left.evaluate(exchange, String.class) + right.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "append(" + left + ", " + right + ")"__            }_        }__    };appends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,append,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,left,evaluate,exchange,string,class,right,evaluate,exchange,string,class,override,public,string,to,string,return,append,left,right
ExpressionBuilder -> public static Expression faultBodyExpression();1549264559;Returns the expression for the fault messages body;public static Expression faultBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody() : null__            }__            @Override_            public String toString() {_                return "faultBody"__            }_        }__    };returns,the,expression,for,the,fault,messages,body;public,static,expression,fault,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,null,override,public,string,to,string,return,fault,body
ExpressionBuilder -> public static Expression faultBodyExpression();1549910857;Returns the expression for the fault messages body;public static Expression faultBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody() : null__            }__            @Override_            public String toString() {_                return "faultBody"__            }_        }__    };returns,the,expression,for,the,fault,messages,body;public,static,expression,fault,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,null,override,public,string,to,string,return,fault,body
ExpressionBuilder -> public static Expression faultBodyExpression();1549911461;Returns the expression for the fault messages body;public static Expression faultBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody() : null__            }__            @Override_            public String toString() {_                return "faultBody"__            }_        }__    };returns,the,expression,for,the,fault,messages,body;public,static,expression,fault,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,null,override,public,string,to,string,return,fault,body
ExpressionBuilder -> public static Expression faultBodyExpression();1549967332;Returns the expression for the fault messages body;public static Expression faultBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody() : null__            }__            @Override_            public String toString() {_                return "faultBody"__            }_        }__    };returns,the,expression,for,the,fault,messages,body;public,static,expression,fault,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,null,override,public,string,to,string,return,fault,body
ExpressionBuilder -> public static Expression faultBodyExpression();1549967797;Returns the expression for the fault messages body;public static Expression faultBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody() : null__            }__            @Override_            public String toString() {_                return "faultBody"__            }_        }__    };returns,the,expression,for,the,fault,messages,body;public,static,expression,fault,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,null,override,public,string,to,string,return,fault,body
ExpressionBuilder -> public static Expression ognlExpression(final Expression exp, final String ognl);1549264559;Returns the expression for invoking a method (support OGNL syntax) on the given expression__@param exp   the expression to evaluate and invoke the method on its result_@param ognl  methods to invoke on the evaluated expression in a simple OGNL syntax;public static Expression ognlExpression(final Expression exp, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = exp.evaluate(exchange, Object.class)__                if (value == null) {_                    return null__                }_                _                _                return new MethodCallExpression(value, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "ognl(" + exp + ", " + ognl + ")"__            }_        }__    };returns,the,expression,for,invoking,a,method,support,ognl,syntax,on,the,given,expression,param,exp,the,expression,to,evaluate,and,invoke,the,method,on,its,result,param,ognl,methods,to,invoke,on,the,evaluated,expression,in,a,simple,ognl,syntax;public,static,expression,ognl,expression,final,expression,exp,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,exp,evaluate,exchange,object,class,if,value,null,return,null,return,new,method,call,expression,value,ognl,evaluate,exchange,override,public,string,to,string,return,ognl,exp,ognl
ExpressionBuilder -> public static Expression ognlExpression(final Expression exp, final String ognl);1549910857;Returns the expression for invoking a method (support OGNL syntax) on the given expression__@param exp   the expression to evaluate and invoke the method on its result_@param ognl  methods to invoke on the evaluated expression in a simple OGNL syntax;public static Expression ognlExpression(final Expression exp, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = exp.evaluate(exchange, Object.class)__                if (value == null) {_                    return null__                }_                _                _                return new MethodCallExpression(value, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "ognl(" + exp + ", " + ognl + ")"__            }_        }__    };returns,the,expression,for,invoking,a,method,support,ognl,syntax,on,the,given,expression,param,exp,the,expression,to,evaluate,and,invoke,the,method,on,its,result,param,ognl,methods,to,invoke,on,the,evaluated,expression,in,a,simple,ognl,syntax;public,static,expression,ognl,expression,final,expression,exp,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,exp,evaluate,exchange,object,class,if,value,null,return,null,return,new,method,call,expression,value,ognl,evaluate,exchange,override,public,string,to,string,return,ognl,exp,ognl
ExpressionBuilder -> public static Expression ognlExpression(final Expression exp, final String ognl);1549911461;Returns the expression for invoking a method (support OGNL syntax) on the given expression__@param exp   the expression to evaluate and invoke the method on its result_@param ognl  methods to invoke on the evaluated expression in a simple OGNL syntax;public static Expression ognlExpression(final Expression exp, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = exp.evaluate(exchange, Object.class)__                if (value == null) {_                    return null__                }_                _                _                return new MethodCallExpression(value, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "ognl(" + exp + ", " + ognl + ")"__            }_        }__    };returns,the,expression,for,invoking,a,method,support,ognl,syntax,on,the,given,expression,param,exp,the,expression,to,evaluate,and,invoke,the,method,on,its,result,param,ognl,methods,to,invoke,on,the,evaluated,expression,in,a,simple,ognl,syntax;public,static,expression,ognl,expression,final,expression,exp,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,exp,evaluate,exchange,object,class,if,value,null,return,null,return,new,method,call,expression,value,ognl,evaluate,exchange,override,public,string,to,string,return,ognl,exp,ognl
ExpressionBuilder -> public static Expression ognlExpression(final Expression exp, final String ognl);1549967332;Returns the expression for invoking a method (support OGNL syntax) on the given expression__@param exp   the expression to evaluate and invoke the method on its result_@param ognl  methods to invoke on the evaluated expression in a simple OGNL syntax;public static Expression ognlExpression(final Expression exp, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = exp.evaluate(exchange, Object.class)__                if (value == null) {_                    return null__                }_                _                _                return new MethodCallExpression(value, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "ognl(" + exp + ", " + ognl + ")"__            }_        }__    };returns,the,expression,for,invoking,a,method,support,ognl,syntax,on,the,given,expression,param,exp,the,expression,to,evaluate,and,invoke,the,method,on,its,result,param,ognl,methods,to,invoke,on,the,evaluated,expression,in,a,simple,ognl,syntax;public,static,expression,ognl,expression,final,expression,exp,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,exp,evaluate,exchange,object,class,if,value,null,return,null,return,new,method,call,expression,value,ognl,evaluate,exchange,override,public,string,to,string,return,ognl,exp,ognl
ExpressionBuilder -> public static Expression ognlExpression(final Expression exp, final String ognl);1549967797;Returns the expression for invoking a method (support OGNL syntax) on the given expression__@param exp   the expression to evaluate and invoke the method on its result_@param ognl  methods to invoke on the evaluated expression in a simple OGNL syntax;public static Expression ognlExpression(final Expression exp, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = exp.evaluate(exchange, Object.class)__                if (value == null) {_                    return null__                }_                _                _                return new MethodCallExpression(value, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "ognl(" + exp + ", " + ognl + ")"__            }_        }__    };returns,the,expression,for,invoking,a,method,support,ognl,syntax,on,the,given,expression,param,exp,the,expression,to,evaluate,and,invoke,the,method,on,its,result,param,ognl,methods,to,invoke,on,the,evaluated,expression,in,a,simple,ognl,syntax;public,static,expression,ognl,expression,final,expression,exp,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,exp,evaluate,exchange,object,class,if,value,null,return,null,return,new,method,call,expression,value,ognl,evaluate,exchange,override,public,string,to,string,return,ognl,exp,ognl
ExpressionBuilder -> public static Expression messageIdExpression();1549264559;Returns an Expression for the inbound message id;public static Expression messageIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getMessageId()__            }__            @Override_            public String toString() {_                return "messageId"__            }_        }__    };returns,an,expression,for,the,inbound,message,id;public,static,expression,message,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,message,id,override,public,string,to,string,return,message,id
ExpressionBuilder -> public static Expression messageIdExpression();1549910857;Returns an Expression for the inbound message id;public static Expression messageIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getMessageId()__            }__            @Override_            public String toString() {_                return "messageId"__            }_        }__    };returns,an,expression,for,the,inbound,message,id;public,static,expression,message,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,message,id,override,public,string,to,string,return,message,id
ExpressionBuilder -> public static Expression messageIdExpression();1549911461;Returns an Expression for the inbound message id;public static Expression messageIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getMessageId()__            }__            @Override_            public String toString() {_                return "messageId"__            }_        }__    };returns,an,expression,for,the,inbound,message,id;public,static,expression,message,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,message,id,override,public,string,to,string,return,message,id
ExpressionBuilder -> public static Expression messageIdExpression();1549967332;Returns an Expression for the inbound message id;public static Expression messageIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getMessageId()__            }__            @Override_            public String toString() {_                return "messageId"__            }_        }__    };returns,an,expression,for,the,inbound,message,id;public,static,expression,message,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,message,id,override,public,string,to,string,return,message,id
ExpressionBuilder -> public static Expression messageIdExpression();1549967797;Returns an Expression for the inbound message id;public static Expression messageIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getMessageId()__            }__            @Override_            public String toString() {_                return "messageId"__            }_        }__    };returns,an,expression,for,the,inbound,message,id;public,static,expression,message,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,message,id,override,public,string,to,string,return,message,id
ExpressionBuilder -> public static Expression attachmentsExpression();1549264559;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachments,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentsExpression();1549910857;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachments,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentsExpression();1549911461;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachments,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentsExpression();1549967332;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachments,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentsExpression();1549967797;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachments,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String name, final String ognl);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression bodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body = exchange.getIn().getBody(type)__                if (body != null) {_                    _                    _                    MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                    _                    call.setInstance(body)__                    return call.evaluate(exchange)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "bodyOgnlAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,exchange,get,in,get,body,type,if,body,null,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,else,return,null,override,public,string,to,string,return,body,ognl,as,name,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String name, final String ognl);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression bodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body = exchange.getIn().getBody(type)__                if (body != null) {_                    _                    _                    MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                    _                    call.setInstance(body)__                    return call.evaluate(exchange)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "bodyOgnlAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,exchange,get,in,get,body,type,if,body,null,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,else,return,null,override,public,string,to,string,return,body,ognl,as,name,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String name, final String ognl);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression bodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body = exchange.getIn().getBody(type)__                if (body != null) {_                    _                    _                    MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                    _                    call.setInstance(body)__                    return call.evaluate(exchange)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "bodyOgnlAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,exchange,get,in,get,body,type,if,body,null,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,else,return,null,override,public,string,to,string,return,body,ognl,as,name,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String name, final String ognl);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression bodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body = exchange.getIn().getBody(type)__                if (body != null) {_                    _                    _                    MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                    _                    call.setInstance(body)__                    return call.evaluate(exchange)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "bodyOgnlAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,exchange,get,in,get,body,type,if,body,null,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,else,return,null,override,public,string,to,string,return,body,ognl,as,name,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String name, final String ognl);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression bodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body = exchange.getIn().getBody(type)__                if (body != null) {_                    _                    _                    MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                    _                    call.setInstance(body)__                    return call.evaluate(exchange)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "bodyOgnlAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,exchange,get,in,get,body,type,if,body,null,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,else,return,null,override,public,string,to,string,return,body,ognl,as,name,ognl
ExpressionBuilder -> public static Expression exchangeExceptionExpression(final Class<Exception> type);1549264559;Returns an expression for an exception set on the exchange_<p/>_Is used to get the caused exception that typically have been wrapped in some sort_of Camel wrapper exception_@param type the exception type_@see Exchange#getException(Class)_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression(final Class<Exception> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException(type)__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                    return ObjectHelper.getException(type, exception)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException[" + type + "]"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,p,is,used,to,get,the,caused,exception,that,typically,have,been,wrapped,in,some,sort,of,camel,wrapper,exception,param,type,the,exception,type,see,exchange,get,exception,class,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,final,class,exception,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,type,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,object,helper,get,exception,type,exception,return,exception,override,public,string,to,string,return,exchange,exception,type
ExpressionBuilder -> public static Expression exchangeExceptionExpression(final Class<Exception> type);1549910857;Returns an expression for an exception set on the exchange_<p/>_Is used to get the caused exception that typically have been wrapped in some sort_of Camel wrapper exception_@param type the exception type_@see Exchange#getException(Class)_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression(final Class<Exception> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException(type)__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                    return ObjectHelper.getException(type, exception)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException[" + type + "]"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,p,is,used,to,get,the,caused,exception,that,typically,have,been,wrapped,in,some,sort,of,camel,wrapper,exception,param,type,the,exception,type,see,exchange,get,exception,class,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,final,class,exception,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,type,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,object,helper,get,exception,type,exception,return,exception,override,public,string,to,string,return,exchange,exception,type
ExpressionBuilder -> public static Expression exchangeExceptionExpression(final Class<Exception> type);1549911461;Returns an expression for an exception set on the exchange_<p/>_Is used to get the caused exception that typically have been wrapped in some sort_of Camel wrapper exception_@param type the exception type_@see Exchange#getException(Class)_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression(final Class<Exception> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException(type)__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                    return ObjectHelper.getException(type, exception)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException[" + type + "]"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,p,is,used,to,get,the,caused,exception,that,typically,have,been,wrapped,in,some,sort,of,camel,wrapper,exception,param,type,the,exception,type,see,exchange,get,exception,class,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,final,class,exception,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,type,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,object,helper,get,exception,type,exception,return,exception,override,public,string,to,string,return,exchange,exception,type
ExpressionBuilder -> public static Expression exchangeExceptionExpression(final Class<Exception> type);1549967332;Returns an expression for an exception set on the exchange_<p/>_Is used to get the caused exception that typically have been wrapped in some sort_of Camel wrapper exception_@param type the exception type_@see Exchange#getException(Class)_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression(final Class<Exception> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException(type)__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                    return ObjectHelper.getException(type, exception)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException[" + type + "]"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,p,is,used,to,get,the,caused,exception,that,typically,have,been,wrapped,in,some,sort,of,camel,wrapper,exception,param,type,the,exception,type,see,exchange,get,exception,class,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,final,class,exception,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,type,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,object,helper,get,exception,type,exception,return,exception,override,public,string,to,string,return,exchange,exception,type
ExpressionBuilder -> public static Expression exchangeExceptionExpression(final Class<Exception> type);1549967797;Returns an expression for an exception set on the exchange_<p/>_Is used to get the caused exception that typically have been wrapped in some sort_of Camel wrapper exception_@param type the exception type_@see Exchange#getException(Class)_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression(final Class<Exception> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException(type)__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                    return ObjectHelper.getException(type, exception)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException[" + type + "]"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,p,is,used,to,get,the,caused,exception,that,typically,have,been,wrapped,in,some,sort,of,camel,wrapper,exception,param,type,the,exception,type,see,exchange,get,exception,class,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,final,class,exception,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,type,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,object,helper,get,exception,type,exception,return,exception,override,public,string,to,string,return,exchange,exception,type
ExpressionBuilder -> public static Expression nullExpression();1549264559;Returns the expression for the {@code null} value;public static Expression nullExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return null__            }__            @Override_            public String toString() {_                return "null"__            }_        }__    };returns,the,expression,for,the,code,null,value;public,static,expression,null,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,null,override,public,string,to,string,return,null
ExpressionBuilder -> public static Expression nullExpression();1549910857;Returns the expression for the {@code null} value;public static Expression nullExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return null__            }__            @Override_            public String toString() {_                return "null"__            }_        }__    };returns,the,expression,for,the,code,null,value;public,static,expression,null,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,null,override,public,string,to,string,return,null
ExpressionBuilder -> public static Expression nullExpression();1549911461;Returns the expression for the {@code null} value;public static Expression nullExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return null__            }__            @Override_            public String toString() {_                return "null"__            }_        }__    };returns,the,expression,for,the,code,null,value;public,static,expression,null,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,null,override,public,string,to,string,return,null
ExpressionBuilder -> public static Expression nullExpression();1549967332;Returns the expression for the {@code null} value;public static Expression nullExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return null__            }__            @Override_            public String toString() {_                return "null"__            }_        }__    };returns,the,expression,for,the,code,null,value;public,static,expression,null,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,null,override,public,string,to,string,return,null
ExpressionBuilder -> public static Expression nullExpression();1549967797;Returns the expression for the {@code null} value;public static Expression nullExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return null__            }__            @Override_            public String toString() {_                return "null"__            }_        }__    };returns,the,expression,for,the,code,null,value;public,static,expression,null,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,null,override,public,string,to,string,return,null
ExpressionBuilder -> public static Expression routeIdExpression();1549264559;Returns an Expression for the route id;public static Expression routeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String answer = null__                UnitOfWork uow = exchange.getUnitOfWork()__                RouteContext rc = uow != null ? uow.getRouteContext() : null__                if (rc != null) {_                    answer = rc.getRoute().getId()__                }_                if (answer == null) {_                    _                    answer = exchange.getFromRouteId()__                }_                return answer__            }__            @Override_            public String toString() {_                return "routeId"__            }_        }__    };returns,an,expression,for,the,route,id;public,static,expression,route,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,answer,null,unit,of,work,uow,exchange,get,unit,of,work,route,context,rc,uow,null,uow,get,route,context,null,if,rc,null,answer,rc,get,route,get,id,if,answer,null,answer,exchange,get,from,route,id,return,answer,override,public,string,to,string,return,route,id
ExpressionBuilder -> public static Expression routeIdExpression();1549910857;Returns an Expression for the route id;public static Expression routeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String answer = null__                UnitOfWork uow = exchange.getUnitOfWork()__                RouteContext rc = uow != null ? uow.getRouteContext() : null__                if (rc != null) {_                    answer = rc.getRoute().getId()__                }_                if (answer == null) {_                    _                    answer = exchange.getFromRouteId()__                }_                return answer__            }__            @Override_            public String toString() {_                return "routeId"__            }_        }__    };returns,an,expression,for,the,route,id;public,static,expression,route,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,answer,null,unit,of,work,uow,exchange,get,unit,of,work,route,context,rc,uow,null,uow,get,route,context,null,if,rc,null,answer,rc,get,route,get,id,if,answer,null,answer,exchange,get,from,route,id,return,answer,override,public,string,to,string,return,route,id
ExpressionBuilder -> public static Expression routeIdExpression();1549911461;Returns an Expression for the route id;public static Expression routeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String answer = null__                UnitOfWork uow = exchange.getUnitOfWork()__                RouteContext rc = uow != null ? uow.getRouteContext() : null__                if (rc != null) {_                    answer = rc.getRoute().getId()__                }_                if (answer == null) {_                    _                    answer = exchange.getFromRouteId()__                }_                return answer__            }__            @Override_            public String toString() {_                return "routeId"__            }_        }__    };returns,an,expression,for,the,route,id;public,static,expression,route,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,answer,null,unit,of,work,uow,exchange,get,unit,of,work,route,context,rc,uow,null,uow,get,route,context,null,if,rc,null,answer,rc,get,route,get,id,if,answer,null,answer,exchange,get,from,route,id,return,answer,override,public,string,to,string,return,route,id
ExpressionBuilder -> public static Expression routeIdExpression();1549967332;Returns an Expression for the route id;public static Expression routeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String answer = null__                UnitOfWork uow = exchange.getUnitOfWork()__                RouteContext rc = uow != null ? uow.getRouteContext() : null__                if (rc != null) {_                    answer = rc.getRoute().getId()__                }_                if (answer == null) {_                    _                    answer = exchange.getFromRouteId()__                }_                return answer__            }__            @Override_            public String toString() {_                return "routeId"__            }_        }__    };returns,an,expression,for,the,route,id;public,static,expression,route,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,answer,null,unit,of,work,uow,exchange,get,unit,of,work,route,context,rc,uow,null,uow,get,route,context,null,if,rc,null,answer,rc,get,route,get,id,if,answer,null,answer,exchange,get,from,route,id,return,answer,override,public,string,to,string,return,route,id
ExpressionBuilder -> public static Expression routeIdExpression();1549967797;Returns an Expression for the route id;public static Expression routeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String answer = null__                UnitOfWork uow = exchange.getUnitOfWork()__                RouteContext rc = uow != null ? uow.getRouteContext() : null__                if (rc != null) {_                    answer = rc.getRoute().getId()__                }_                if (answer == null) {_                    _                    answer = exchange.getFromRouteId()__                }_                return answer__            }__            @Override_            public String toString() {_                return "routeId"__            }_        }__    };returns,an,expression,for,the,route,id;public,static,expression,route,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,answer,null,unit,of,work,uow,exchange,get,unit,of,work,route,context,rc,uow,null,uow,get,route,context,null,if,rc,null,answer,rc,get,route,get,id,if,answer,null,answer,exchange,get,from,route,id,return,answer,override,public,string,to,string,return,route,id
ExpressionBuilder -> @Deprecated     public static Expression toExpression(final String uri);1549264559;Returns an expression processing the exchange to the given endpoint uri__@param uri endpoint uri to send the exchange to_@return an expression object which will return the OUT body_@deprecated not in use, and not available in XML DSL;@Deprecated_    public static Expression toExpression(final String uri) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(uri).evaluate(exchange, String.class)__                Endpoint endpoint = exchange.getContext().getEndpoint(text)__                if (endpoint == null) {_                    throw new NoSuchEndpointException(text)__                }__                Producer producer__                try {_                    producer = endpoint.createProducer()__                    producer.start()__                    producer.process(exchange)__                    producer.stop()__                } catch (Exception e) {_                    throw RuntimeCamelException.wrapRuntimeCamelException(e)__                }__                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getBody()__                } else {_                    return exchange.getIn().getBody()__                }_            }__            @Override_            public String toString() {_                return "to(" + uri + ")"__            }_        }__    };returns,an,expression,processing,the,exchange,to,the,given,endpoint,uri,param,uri,endpoint,uri,to,send,the,exchange,to,return,an,expression,object,which,will,return,the,out,body,deprecated,not,in,use,and,not,available,in,xml,dsl;deprecated,public,static,expression,to,expression,final,string,uri,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,uri,evaluate,exchange,string,class,endpoint,endpoint,exchange,get,context,get,endpoint,text,if,endpoint,null,throw,new,no,such,endpoint,exception,text,producer,producer,try,producer,endpoint,create,producer,producer,start,producer,process,exchange,producer,stop,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,body,else,return,exchange,get,in,get,body,override,public,string,to,string,return,to,uri
ExpressionBuilder -> @Deprecated     public static Expression toExpression(final String uri);1549910857;Returns an expression processing the exchange to the given endpoint uri__@param uri endpoint uri to send the exchange to_@return an expression object which will return the OUT body_@deprecated not in use, and not available in XML DSL;@Deprecated_    public static Expression toExpression(final String uri) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(uri).evaluate(exchange, String.class)__                Endpoint endpoint = exchange.getContext().getEndpoint(text)__                if (endpoint == null) {_                    throw new NoSuchEndpointException(text)__                }__                Producer producer__                try {_                    producer = endpoint.createProducer()__                    producer.start()__                    producer.process(exchange)__                    producer.stop()__                } catch (Exception e) {_                    throw RuntimeCamelException.wrapRuntimeCamelException(e)__                }__                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getBody()__                } else {_                    return exchange.getIn().getBody()__                }_            }__            @Override_            public String toString() {_                return "to(" + uri + ")"__            }_        }__    };returns,an,expression,processing,the,exchange,to,the,given,endpoint,uri,param,uri,endpoint,uri,to,send,the,exchange,to,return,an,expression,object,which,will,return,the,out,body,deprecated,not,in,use,and,not,available,in,xml,dsl;deprecated,public,static,expression,to,expression,final,string,uri,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,uri,evaluate,exchange,string,class,endpoint,endpoint,exchange,get,context,get,endpoint,text,if,endpoint,null,throw,new,no,such,endpoint,exception,text,producer,producer,try,producer,endpoint,create,producer,producer,start,producer,process,exchange,producer,stop,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,body,else,return,exchange,get,in,get,body,override,public,string,to,string,return,to,uri
ExpressionBuilder -> @Deprecated     public static Expression toExpression(final String uri);1549911461;Returns an expression processing the exchange to the given endpoint uri__@param uri endpoint uri to send the exchange to_@return an expression object which will return the OUT body_@deprecated not in use, and not available in XML DSL;@Deprecated_    public static Expression toExpression(final String uri) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(uri).evaluate(exchange, String.class)__                Endpoint endpoint = exchange.getContext().getEndpoint(text)__                if (endpoint == null) {_                    throw new NoSuchEndpointException(text)__                }__                Producer producer__                try {_                    producer = endpoint.createProducer()__                    producer.start()__                    producer.process(exchange)__                    producer.stop()__                } catch (Exception e) {_                    throw RuntimeCamelException.wrapRuntimeCamelException(e)__                }__                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getBody()__                } else {_                    return exchange.getIn().getBody()__                }_            }__            @Override_            public String toString() {_                return "to(" + uri + ")"__            }_        }__    };returns,an,expression,processing,the,exchange,to,the,given,endpoint,uri,param,uri,endpoint,uri,to,send,the,exchange,to,return,an,expression,object,which,will,return,the,out,body,deprecated,not,in,use,and,not,available,in,xml,dsl;deprecated,public,static,expression,to,expression,final,string,uri,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,uri,evaluate,exchange,string,class,endpoint,endpoint,exchange,get,context,get,endpoint,text,if,endpoint,null,throw,new,no,such,endpoint,exception,text,producer,producer,try,producer,endpoint,create,producer,producer,start,producer,process,exchange,producer,stop,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,body,else,return,exchange,get,in,get,body,override,public,string,to,string,return,to,uri
ExpressionBuilder -> @Deprecated     public static Expression toExpression(final String uri);1549967332;Returns an expression processing the exchange to the given endpoint uri__@param uri endpoint uri to send the exchange to_@return an expression object which will return the OUT body_@deprecated not in use, and not available in XML DSL;@Deprecated_    public static Expression toExpression(final String uri) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(uri).evaluate(exchange, String.class)__                Endpoint endpoint = exchange.getContext().getEndpoint(text)__                if (endpoint == null) {_                    throw new NoSuchEndpointException(text)__                }__                Producer producer__                try {_                    producer = endpoint.createProducer()__                    producer.start()__                    producer.process(exchange)__                    producer.stop()__                } catch (Exception e) {_                    throw RuntimeCamelException.wrapRuntimeCamelException(e)__                }__                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getBody()__                } else {_                    return exchange.getIn().getBody()__                }_            }__            @Override_            public String toString() {_                return "to(" + uri + ")"__            }_        }__    };returns,an,expression,processing,the,exchange,to,the,given,endpoint,uri,param,uri,endpoint,uri,to,send,the,exchange,to,return,an,expression,object,which,will,return,the,out,body,deprecated,not,in,use,and,not,available,in,xml,dsl;deprecated,public,static,expression,to,expression,final,string,uri,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,uri,evaluate,exchange,string,class,endpoint,endpoint,exchange,get,context,get,endpoint,text,if,endpoint,null,throw,new,no,such,endpoint,exception,text,producer,producer,try,producer,endpoint,create,producer,producer,start,producer,process,exchange,producer,stop,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,body,else,return,exchange,get,in,get,body,override,public,string,to,string,return,to,uri
ExpressionBuilder -> @Deprecated     public static Expression toExpression(final String uri);1549967797;Returns an expression processing the exchange to the given endpoint uri__@param uri endpoint uri to send the exchange to_@return an expression object which will return the OUT body_@deprecated not in use, and not available in XML DSL;@Deprecated_    public static Expression toExpression(final String uri) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(uri).evaluate(exchange, String.class)__                Endpoint endpoint = exchange.getContext().getEndpoint(text)__                if (endpoint == null) {_                    throw new NoSuchEndpointException(text)__                }__                Producer producer__                try {_                    producer = endpoint.createProducer()__                    producer.start()__                    producer.process(exchange)__                    producer.stop()__                } catch (Exception e) {_                    throw RuntimeCamelException.wrapRuntimeCamelException(e)__                }__                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getBody()__                } else {_                    return exchange.getIn().getBody()__                }_            }__            @Override_            public String toString() {_                return "to(" + uri + ")"__            }_        }__    };returns,an,expression,processing,the,exchange,to,the,given,endpoint,uri,param,uri,endpoint,uri,to,send,the,exchange,to,return,an,expression,object,which,will,return,the,out,body,deprecated,not,in,use,and,not,available,in,xml,dsl;deprecated,public,static,expression,to,expression,final,string,uri,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,uri,evaluate,exchange,string,class,endpoint,endpoint,exchange,get,context,get,endpoint,text,if,endpoint,null,throw,new,no,such,endpoint,exception,text,producer,producer,try,producer,endpoint,create,producer,producer,start,producer,process,exchange,producer,stop,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,body,else,return,exchange,get,in,get,body,override,public,string,to,string,return,to,uri
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName);1549264559;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName) {_        return systemPropertyExpression(propertyName, null)__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,return,system,property,expression,property,name,null
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName);1549910857;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName) {_        return systemPropertyExpression(propertyName, null)__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,return,system,property,expression,property,name,null
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName);1549911461;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName) {_        return systemPropertyExpression(propertyName, null)__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,return,system,property,expression,property,name,null
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName);1549967332;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName) {_        return systemPropertyExpression(propertyName, null)__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,return,system,property,expression,property,name,null
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName);1549967797;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName) {_        return systemPropertyExpression(propertyName, null)__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,return,system,property,expression,property,name,null
ExpressionBuilder -> public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body__                try {_                    body = exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                _                _                MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                _                call.setInstance(body)__                return call.evaluate(exchange)__            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,mandatory,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,try,body,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,override,public,string,to,string,return,mandatory,body,as,name,ognl
ExpressionBuilder -> public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body__                try {_                    body = exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                _                _                MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                _                call.setInstance(body)__                return call.evaluate(exchange)__            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,mandatory,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,try,body,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,override,public,string,to,string,return,mandatory,body,as,name,ognl
ExpressionBuilder -> public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body__                try {_                    body = exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                _                _                MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                _                call.setInstance(body)__                return call.evaluate(exchange)__            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,mandatory,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,try,body,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,override,public,string,to,string,return,mandatory,body,as,name,ognl
ExpressionBuilder -> public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body__                try {_                    body = exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                _                _                MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                _                call.setInstance(body)__                return call.evaluate(exchange)__            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,mandatory,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,try,body,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,override,public,string,to,string,return,mandatory,body,as,name,ognl
ExpressionBuilder -> public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type and invoking methods on the converted body defined in a simple OGNL notation;public static Expression mandatoryBodyOgnlExpression(final String name, final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                Object body__                try {_                    body = exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                _                _                MethodCallExpression call = new MethodCallExpression(exchange, ognl)__                _                call.setInstance(body)__                return call.evaluate(exchange)__            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "](" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,and,invoking,methods,on,the,converted,body,defined,in,a,simple,ognl,notation;public,static,expression,mandatory,body,ognl,expression,final,string,name,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,object,body,try,body,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,method,call,expression,call,new,method,call,expression,exchange,ognl,call,set,instance,body,return,call,evaluate,exchange,override,public,string,to,string,return,mandatory,body,as,name,ognl
ExpressionBuilder -> public static Expression typeConverterExpression();1549264559;Returns an expression for the type converter__@return an expression object which will return the type converter;public static Expression typeConverterExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getTypeConverter()__            }__            @Override_            public String toString() {_                return "typeConverter"__            }_        }__    };returns,an,expression,for,the,type,converter,return,an,expression,object,which,will,return,the,type,converter;public,static,expression,type,converter,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,type,converter,override,public,string,to,string,return,type,converter
ExpressionBuilder -> public static Expression typeConverterExpression();1549910857;Returns an expression for the type converter__@return an expression object which will return the type converter;public static Expression typeConverterExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getTypeConverter()__            }__            @Override_            public String toString() {_                return "typeConverter"__            }_        }__    };returns,an,expression,for,the,type,converter,return,an,expression,object,which,will,return,the,type,converter;public,static,expression,type,converter,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,type,converter,override,public,string,to,string,return,type,converter
ExpressionBuilder -> public static Expression typeConverterExpression();1549911461;Returns an expression for the type converter__@return an expression object which will return the type converter;public static Expression typeConverterExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getTypeConverter()__            }__            @Override_            public String toString() {_                return "typeConverter"__            }_        }__    };returns,an,expression,for,the,type,converter,return,an,expression,object,which,will,return,the,type,converter;public,static,expression,type,converter,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,type,converter,override,public,string,to,string,return,type,converter
ExpressionBuilder -> public static Expression typeConverterExpression();1549967332;Returns an expression for the type converter__@return an expression object which will return the type converter;public static Expression typeConverterExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getTypeConverter()__            }__            @Override_            public String toString() {_                return "typeConverter"__            }_        }__    };returns,an,expression,for,the,type,converter,return,an,expression,object,which,will,return,the,type,converter;public,static,expression,type,converter,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,type,converter,override,public,string,to,string,return,type,converter
ExpressionBuilder -> public static Expression typeConverterExpression();1549967797;Returns an expression for the type converter__@return an expression object which will return the type converter;public static Expression typeConverterExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getTypeConverter()__            }__            @Override_            public String toString() {_                return "typeConverter"__            }_        }__    };returns,an,expression,for,the,type,converter,return,an,expression,object,which,will,return,the,type,converter;public,static,expression,type,converter,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,type,converter,override,public,string,to,string,return,type,converter
ExpressionBuilder -> public static Expression outMessageExpression(final Function<Message, Object> function);1549264559;Returns a functional expression for the OUT message;public static Expression outMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getOut())__            }__            @Override_            public String toString() {_                return "outMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,out,message;public,static,expression,out,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,out,override,public,string,to,string,return,out,message,expression
ExpressionBuilder -> public static Expression outMessageExpression(final Function<Message, Object> function);1549910857;Returns a functional expression for the OUT message;public static Expression outMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getOut())__            }__            @Override_            public String toString() {_                return "outMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,out,message;public,static,expression,out,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,out,override,public,string,to,string,return,out,message,expression
ExpressionBuilder -> public static Expression outMessageExpression(final Function<Message, Object> function);1549911461;Returns a functional expression for the OUT message;public static Expression outMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getOut())__            }__            @Override_            public String toString() {_                return "outMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,out,message;public,static,expression,out,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,out,override,public,string,to,string,return,out,message,expression
ExpressionBuilder -> public static Expression outMessageExpression(final Function<Message, Object> function);1549967332;Returns a functional expression for the OUT message;public static Expression outMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getOut())__            }__            @Override_            public String toString() {_                return "outMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,out,message;public,static,expression,out,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,out,override,public,string,to,string,return,out,message,expression
ExpressionBuilder -> public static Expression outMessageExpression(final Function<Message, Object> function);1549967797;Returns a functional expression for the OUT message;public static Expression outMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getOut())__            }__            @Override_            public String toString() {_                return "outMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,out,message;public,static,expression,out,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,out,override,public,string,to,string,return,out,message,expression
ExpressionBuilder -> public static Expression exchangeExceptionExpression();1549264559;Returns an expression for an exception set on the exchange__@see Exchange#getException()_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,see,exchange,get,exception,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,override,public,string,to,string,return,exchange,exception
ExpressionBuilder -> public static Expression exchangeExceptionExpression();1549910857;Returns an expression for an exception set on the exchange__@see Exchange#getException()_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,see,exchange,get,exception,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,override,public,string,to,string,return,exchange,exception
ExpressionBuilder -> public static Expression exchangeExceptionExpression();1549911461;Returns an expression for an exception set on the exchange__@see Exchange#getException()_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,see,exchange,get,exception,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,override,public,string,to,string,return,exchange,exception
ExpressionBuilder -> public static Expression exchangeExceptionExpression();1549967332;Returns an expression for an exception set on the exchange__@see Exchange#getException()_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,see,exchange,get,exception,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,override,public,string,to,string,return,exchange,exception
ExpressionBuilder -> public static Expression exchangeExceptionExpression();1549967797;Returns an expression for an exception set on the exchange__@see Exchange#getException()_@return an expression object which will return the exception set on the exchange;public static Expression exchangeExceptionExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception__            }__            @Override_            public String toString() {_                return "exchangeException"__            }_        }__    };returns,an,expression,for,an,exception,set,on,the,exchange,see,exchange,get,exception,return,an,expression,object,which,will,return,the,exception,set,on,the,exchange;public,static,expression,exchange,exception,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,override,public,string,to,string,return,exchange,exception
ExpressionBuilder -> public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName);1549264559;Returns an {@link TokenXMLExpressionIterator} expression;public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName) {_        StringHelper.notEmpty(tagName, "tagName")__        return new TokenXMLExpressionIterator(tagName, inheritNamespaceTagName)__    };returns,an,link,token,xmlexpression,iterator,expression;public,static,expression,tokenize,xmlexpression,string,tag,name,string,inherit,namespace,tag,name,string,helper,not,empty,tag,name,tag,name,return,new,token,xmlexpression,iterator,tag,name,inherit,namespace,tag,name
ExpressionBuilder -> public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName);1549910857;Returns an {@link TokenXMLExpressionIterator} expression;public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName) {_        StringHelper.notEmpty(tagName, "tagName")__        return new TokenXMLExpressionIterator(tagName, inheritNamespaceTagName)__    };returns,an,link,token,xmlexpression,iterator,expression;public,static,expression,tokenize,xmlexpression,string,tag,name,string,inherit,namespace,tag,name,string,helper,not,empty,tag,name,tag,name,return,new,token,xmlexpression,iterator,tag,name,inherit,namespace,tag,name
ExpressionBuilder -> public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName);1549911461;Returns an {@link TokenXMLExpressionIterator} expression;public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName) {_        StringHelper.notEmpty(tagName, "tagName")__        return new TokenXMLExpressionIterator(tagName, inheritNamespaceTagName)__    };returns,an,link,token,xmlexpression,iterator,expression;public,static,expression,tokenize,xmlexpression,string,tag,name,string,inherit,namespace,tag,name,string,helper,not,empty,tag,name,tag,name,return,new,token,xmlexpression,iterator,tag,name,inherit,namespace,tag,name
ExpressionBuilder -> public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName);1549967332;Returns an {@link TokenXMLExpressionIterator} expression;public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName) {_        StringHelper.notEmpty(tagName, "tagName")__        return new TokenXMLExpressionIterator(tagName, inheritNamespaceTagName)__    };returns,an,link,token,xmlexpression,iterator,expression;public,static,expression,tokenize,xmlexpression,string,tag,name,string,inherit,namespace,tag,name,string,helper,not,empty,tag,name,tag,name,return,new,token,xmlexpression,iterator,tag,name,inherit,namespace,tag,name
ExpressionBuilder -> public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName);1549967797;Returns an {@link TokenXMLExpressionIterator} expression;public static Expression tokenizeXMLExpression(String tagName, String inheritNamespaceTagName) {_        StringHelper.notEmpty(tagName, "tagName")__        return new TokenXMLExpressionIterator(tagName, inheritNamespaceTagName)__    };returns,an,link,token,xmlexpression,iterator,expression;public,static,expression,tokenize,xmlexpression,string,tag,name,string,inherit,namespace,tag,name,string,helper,not,empty,tag,name,tag,name,return,new,token,xmlexpression,iterator,tag,name,inherit,namespace,tag,name
ExpressionBuilder -> public static Expression inMessageExpression(final Function<Message, Object> function);1549264559;Returns a functional expression for the IN message;public static Expression inMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getIn())__            }__            @Override_            public String toString() {_                return "inMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,in,message;public,static,expression,in,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,override,public,string,to,string,return,in,message,expression
ExpressionBuilder -> public static Expression inMessageExpression(final Function<Message, Object> function);1549910857;Returns a functional expression for the IN message;public static Expression inMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getIn())__            }__            @Override_            public String toString() {_                return "inMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,in,message;public,static,expression,in,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,override,public,string,to,string,return,in,message,expression
ExpressionBuilder -> public static Expression inMessageExpression(final Function<Message, Object> function);1549911461;Returns a functional expression for the IN message;public static Expression inMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getIn())__            }__            @Override_            public String toString() {_                return "inMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,in,message;public,static,expression,in,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,override,public,string,to,string,return,in,message,expression
ExpressionBuilder -> public static Expression inMessageExpression(final Function<Message, Object> function);1549967332;Returns a functional expression for the IN message;public static Expression inMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getIn())__            }__            @Override_            public String toString() {_                return "inMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,in,message;public,static,expression,in,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,override,public,string,to,string,return,in,message,expression
ExpressionBuilder -> public static Expression inMessageExpression(final Function<Message, Object> function);1549967797;Returns a functional expression for the IN message;public static Expression inMessageExpression(final Function<Message, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange.getIn())__            }__            @Override_            public String toString() {_                return "inMessageExpression"__            }_        }__    };returns,a,functional,expression,for,the,in,message;public,static,expression,in,message,expression,final,function,message,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,override,public,string,to,string,return,in,message,expression
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type__@param type the type_@param nullBodyAllowed whether null bodies is allowed and if so a null is returned,_otherwise an exception is thrown;public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (nullBodyAllowed) {_                    if (exchange.getIn().getBody() == null) {_                        return null__                    }__                    _                    if (exchange.getIn().getBody() instanceof BeanInvocation) {_                        _                        _                        _                        BeanInvocation bi = (BeanInvocation) exchange.getIn().getBody()__                        if (bi.getArgs() == null || bi.getArgs().length == 0 || bi.getArgs()[0] == null) {_                            return null__                        }_                    }_                }__                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,param,type,the,type,param,null,body,allowed,whether,null,bodies,is,allowed,and,if,so,a,null,is,returned,otherwise,an,exception,is,thrown;public,static,t,expression,mandatory,body,expression,final,class,t,type,final,boolean,null,body,allowed,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,null,body,allowed,if,exchange,get,in,get,body,null,return,null,if,exchange,get,in,get,body,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,exchange,get,in,get,body,if,bi,get,args,null,bi,get,args,length,0,bi,get,args,0,null,return,null,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type__@param type the type_@param nullBodyAllowed whether null bodies is allowed and if so a null is returned,_otherwise an exception is thrown;public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (nullBodyAllowed) {_                    if (exchange.getIn().getBody() == null) {_                        return null__                    }__                    _                    if (exchange.getIn().getBody() instanceof BeanInvocation) {_                        _                        _                        _                        BeanInvocation bi = (BeanInvocation) exchange.getIn().getBody()__                        if (bi.getArgs() == null || bi.getArgs().length == 0 || bi.getArgs()[0] == null) {_                            return null__                        }_                    }_                }__                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,param,type,the,type,param,null,body,allowed,whether,null,bodies,is,allowed,and,if,so,a,null,is,returned,otherwise,an,exception,is,thrown;public,static,t,expression,mandatory,body,expression,final,class,t,type,final,boolean,null,body,allowed,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,null,body,allowed,if,exchange,get,in,get,body,null,return,null,if,exchange,get,in,get,body,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,exchange,get,in,get,body,if,bi,get,args,null,bi,get,args,length,0,bi,get,args,0,null,return,null,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type__@param type the type_@param nullBodyAllowed whether null bodies is allowed and if so a null is returned,_otherwise an exception is thrown;public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (nullBodyAllowed) {_                    if (exchange.getIn().getBody() == null) {_                        return null__                    }__                    _                    if (exchange.getIn().getBody() instanceof BeanInvocation) {_                        _                        _                        _                        BeanInvocation bi = (BeanInvocation) exchange.getIn().getBody()__                        if (bi.getArgs() == null || bi.getArgs().length == 0 || bi.getArgs()[0] == null) {_                            return null__                        }_                    }_                }__                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,param,type,the,type,param,null,body,allowed,whether,null,bodies,is,allowed,and,if,so,a,null,is,returned,otherwise,an,exception,is,thrown;public,static,t,expression,mandatory,body,expression,final,class,t,type,final,boolean,null,body,allowed,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,null,body,allowed,if,exchange,get,in,get,body,null,return,null,if,exchange,get,in,get,body,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,exchange,get,in,get,body,if,bi,get,args,null,bi,get,args,length,0,bi,get,args,0,null,return,null,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type__@param type the type_@param nullBodyAllowed whether null bodies is allowed and if so a null is returned,_otherwise an exception is thrown;public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (nullBodyAllowed) {_                    if (exchange.getIn().getBody() == null) {_                        return null__                    }__                    _                    if (exchange.getIn().getBody() instanceof BeanInvocation) {_                        _                        _                        _                        BeanInvocation bi = (BeanInvocation) exchange.getIn().getBody()__                        if (bi.getArgs() == null || bi.getArgs().length == 0 || bi.getArgs()[0] == null) {_                            return null__                        }_                    }_                }__                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,param,type,the,type,param,null,body,allowed,whether,null,bodies,is,allowed,and,if,so,a,null,is,returned,otherwise,an,exception,is,thrown;public,static,t,expression,mandatory,body,expression,final,class,t,type,final,boolean,null,body,allowed,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,null,body,allowed,if,exchange,get,in,get,body,null,return,null,if,exchange,get,in,get,body,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,exchange,get,in,get,body,if,bi,get,args,null,bi,get,args,length,0,bi,get,args,0,null,return,null,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type__@param type the type_@param nullBodyAllowed whether null bodies is allowed and if so a null is returned,_otherwise an exception is thrown;public static <T> Expression mandatoryBodyExpression(final Class<T> type, final boolean nullBodyAllowed) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (nullBodyAllowed) {_                    if (exchange.getIn().getBody() == null) {_                        return null__                    }__                    _                    if (exchange.getIn().getBody() instanceof BeanInvocation) {_                        _                        _                        _                        BeanInvocation bi = (BeanInvocation) exchange.getIn().getBody()__                        if (bi.getArgs() == null || bi.getArgs().length == 0 || bi.getArgs()[0] == null) {_                            return null__                        }_                    }_                }__                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,param,type,the,type,param,null,body,allowed,whether,null,bodies,is,allowed,and,if,so,a,null,is,returned,otherwise,an,exception,is,thrown;public,static,t,expression,mandatory,body,expression,final,class,t,type,final,boolean,null,body,allowed,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,null,body,allowed,if,exchange,get,in,get,body,null,return,null,if,exchange,get,in,get,body,instanceof,bean,invocation,bean,invocation,bi,bean,invocation,exchange,get,in,get,body,if,bi,get,args,null,bi,get,args,length,0,bi,get,args,0,null,return,null,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,type,get,name
ExpressionBuilder -> public static Expression outHeadersExpression();1549264559;Returns an expression for the outbound message headers__@return an expression object which will return the headers, will be <tt>null</tt> if the_exchange is not out capable.;public static Expression outHeadersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getHeaders()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outHeaders"__            }_        }__    };returns,an,expression,for,the,outbound,message,headers,return,an,expression,object,which,will,return,the,headers,will,be,tt,null,tt,if,the,exchange,is,not,out,capable;public,static,expression,out,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,headers,else,return,null,override,public,string,to,string,return,out,headers
ExpressionBuilder -> public static Expression outHeadersExpression();1549910857;Returns an expression for the outbound message headers__@return an expression object which will return the headers, will be <tt>null</tt> if the_exchange is not out capable.;public static Expression outHeadersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getHeaders()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outHeaders"__            }_        }__    };returns,an,expression,for,the,outbound,message,headers,return,an,expression,object,which,will,return,the,headers,will,be,tt,null,tt,if,the,exchange,is,not,out,capable;public,static,expression,out,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,headers,else,return,null,override,public,string,to,string,return,out,headers
ExpressionBuilder -> public static Expression outHeadersExpression();1549911461;Returns an expression for the outbound message headers__@return an expression object which will return the headers, will be <tt>null</tt> if the_exchange is not out capable.;public static Expression outHeadersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getHeaders()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outHeaders"__            }_        }__    };returns,an,expression,for,the,outbound,message,headers,return,an,expression,object,which,will,return,the,headers,will,be,tt,null,tt,if,the,exchange,is,not,out,capable;public,static,expression,out,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,headers,else,return,null,override,public,string,to,string,return,out,headers
ExpressionBuilder -> public static Expression outHeadersExpression();1549967332;Returns an expression for the outbound message headers__@return an expression object which will return the headers, will be <tt>null</tt> if the_exchange is not out capable.;public static Expression outHeadersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getHeaders()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outHeaders"__            }_        }__    };returns,an,expression,for,the,outbound,message,headers,return,an,expression,object,which,will,return,the,headers,will,be,tt,null,tt,if,the,exchange,is,not,out,capable;public,static,expression,out,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,headers,else,return,null,override,public,string,to,string,return,out,headers
ExpressionBuilder -> public static Expression outHeadersExpression();1549967797;Returns an expression for the outbound message headers__@return an expression object which will return the headers, will be <tt>null</tt> if the_exchange is not out capable.;public static Expression outHeadersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                if (ExchangeHelper.isOutCapable(exchange)) {_                    return exchange.getOut().getHeaders()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outHeaders"__            }_        }__    };returns,an,expression,for,the,outbound,message,headers,return,an,expression,object,which,will,return,the,headers,will,be,tt,null,tt,if,the,exchange,is,not,out,capable;public,static,expression,out,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,helper,is,out,capable,exchange,return,exchange,get,out,get,headers,else,return,null,override,public,string,to,string,return,out,headers
ExpressionBuilder -> public static Expression bodyTypeExpression();1549264559;Returns the expression for the exchanges inbound message body type;public static Expression bodyTypeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody().getClass()__            }__            @Override_            public String toString() {_                return "bodyType"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,type;public,static,expression,body,type,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,get,class,override,public,string,to,string,return,body,type
ExpressionBuilder -> public static Expression bodyTypeExpression();1549910857;Returns the expression for the exchanges inbound message body type;public static Expression bodyTypeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody().getClass()__            }__            @Override_            public String toString() {_                return "bodyType"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,type;public,static,expression,body,type,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,get,class,override,public,string,to,string,return,body,type
ExpressionBuilder -> public static Expression bodyTypeExpression();1549911461;Returns the expression for the exchanges inbound message body type;public static Expression bodyTypeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody().getClass()__            }__            @Override_            public String toString() {_                return "bodyType"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,type;public,static,expression,body,type,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,get,class,override,public,string,to,string,return,body,type
ExpressionBuilder -> public static Expression bodyTypeExpression();1549967332;Returns the expression for the exchanges inbound message body type;public static Expression bodyTypeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody().getClass()__            }__            @Override_            public String toString() {_                return "bodyType"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,type;public,static,expression,body,type,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,get,class,override,public,string,to,string,return,body,type
ExpressionBuilder -> public static Expression bodyTypeExpression();1549967797;Returns the expression for the exchanges inbound message body type;public static Expression bodyTypeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody().getClass()__            }__            @Override_            public String toString() {_                return "bodyType"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,type;public,static,expression,body,type,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,get,class,override,public,string,to,string,return,body,type
ExpressionBuilder -> public static Expression randomExpression(final int min, final int max);1549264559;Returns a random number between min and max (exclusive);public static Expression randomExpression(final int min, final int max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Random random = new Random()__                int randomNum = random.nextInt(max - min) + min__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,int,min,final,int,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,random,random,new,random,int,random,num,random,next,int,max,min,min,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final int min, final int max);1549910857;Returns a random number between min and max (exclusive);public static Expression randomExpression(final int min, final int max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Random random = new Random()__                int randomNum = random.nextInt(max - min) + min__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,int,min,final,int,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,random,random,new,random,int,random,num,random,next,int,max,min,min,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final int min, final int max);1549911461;Returns a random number between min and max (exclusive);public static Expression randomExpression(final int min, final int max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Random random = new Random()__                int randomNum = random.nextInt(max - min) + min__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,int,min,final,int,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,random,random,new,random,int,random,num,random,next,int,max,min,min,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final int min, final int max);1549967332;Returns a random number between min and max (exclusive);public static Expression randomExpression(final int min, final int max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Random random = new Random()__                int randomNum = random.nextInt(max - min) + min__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,int,min,final,int,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,random,random,new,random,int,random,num,random,next,int,max,min,min,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final int min, final int max);1549967797;Returns a random number between min and max (exclusive);public static Expression randomExpression(final int min, final int max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Random random = new Random()__                int randomNum = random.nextInt(max - min) + min__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,int,min,final,int,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,random,random,new,random,int,random,num,random,next,int,max,min,min,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression camelContextNameExpression();1549264559;Returns an expression for the {@link org.apache.camel.CamelContext} name__@return an expression object which will return the camel context name;public static Expression camelContextNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getName()__            }__            @Override_            public String toString() {_                return "camelContextName"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,name,return,an,expression,object,which,will,return,the,camel,context,name;public,static,expression,camel,context,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,name,override,public,string,to,string,return,camel,context,name
ExpressionBuilder -> public static Expression camelContextNameExpression();1549910857;Returns an expression for the {@link org.apache.camel.CamelContext} name__@return an expression object which will return the camel context name;public static Expression camelContextNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getName()__            }__            @Override_            public String toString() {_                return "camelContextName"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,name,return,an,expression,object,which,will,return,the,camel,context,name;public,static,expression,camel,context,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,name,override,public,string,to,string,return,camel,context,name
ExpressionBuilder -> public static Expression camelContextNameExpression();1549911461;Returns an expression for the {@link org.apache.camel.CamelContext} name__@return an expression object which will return the camel context name;public static Expression camelContextNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getName()__            }__            @Override_            public String toString() {_                return "camelContextName"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,name,return,an,expression,object,which,will,return,the,camel,context,name;public,static,expression,camel,context,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,name,override,public,string,to,string,return,camel,context,name
ExpressionBuilder -> public static Expression camelContextNameExpression();1549967332;Returns an expression for the {@link org.apache.camel.CamelContext} name__@return an expression object which will return the camel context name;public static Expression camelContextNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getName()__            }__            @Override_            public String toString() {_                return "camelContextName"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,name,return,an,expression,object,which,will,return,the,camel,context,name;public,static,expression,camel,context,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,name,override,public,string,to,string,return,camel,context,name
ExpressionBuilder -> public static Expression camelContextNameExpression();1549967797;Returns an expression for the {@link org.apache.camel.CamelContext} name__@return an expression object which will return the camel context name;public static Expression camelContextNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getName()__            }__            @Override_            public String toString() {_                return "camelContextName"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,name,return,an,expression,object,which,will,return,the,camel,context,name;public,static,expression,camel,context,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,name,override,public,string,to,string,return,camel,context,name
ExpressionBuilder -> public static Expression exchangePropertyExpression(final String propertyName);1549264559;Returns an expression for the property value of exchange with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression exchangePropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getProperty(text)__            }__            @Override_            public String toString() {_                return "exchangeProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,exchange,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,property,text,override,public,string,to,string,return,exchange,property,property,name
ExpressionBuilder -> public static Expression exchangePropertyExpression(final String propertyName);1549910857;Returns an expression for the property value of exchange with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression exchangePropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getProperty(text)__            }__            @Override_            public String toString() {_                return "exchangeProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,exchange,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,property,text,override,public,string,to,string,return,exchange,property,property,name
ExpressionBuilder -> public static Expression exchangePropertyExpression(final String propertyName);1549911461;Returns an expression for the property value of exchange with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression exchangePropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getProperty(text)__            }__            @Override_            public String toString() {_                return "exchangeProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,exchange,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,property,text,override,public,string,to,string,return,exchange,property,property,name
ExpressionBuilder -> public static Expression exchangePropertyExpression(final String propertyName);1549967332;Returns an expression for the property value of exchange with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression exchangePropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getProperty(text)__            }__            @Override_            public String toString() {_                return "exchangeProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,exchange,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,property,text,override,public,string,to,string,return,exchange,property,property,name
ExpressionBuilder -> public static Expression exchangePropertyExpression(final String propertyName);1549967797;Returns an expression for the property value of exchange with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression exchangePropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getProperty(text)__            }__            @Override_            public String toString() {_                return "exchangeProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,exchange,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,property,text,override,public,string,to,string,return,exchange,property,property,name
ExpressionBuilder -> public static Expression typeExpression(final String name);1549264559;Returns an expression for a type value__@param name the type name_@return an expression object which will return the type value;public static Expression typeExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type = exchange.getContext().getClassResolver().resolveClass(text)__                if (type != null) {_                    return type__                }__                int pos = text.lastIndexOf(".")__                if (pos > 0) {_                    String before = text.substring(0, pos)__                    String after = text.substring(pos + 1)__                    type = exchange.getContext().getClassResolver().resolveClass(before)__                    if (type != null) {_                        return ObjectHelper.lookupConstantFieldValue(type, after)__                    }_                }__                throw CamelExecutionException.wrapCamelExecutionException(exchange, new ClassNotFoundException("Cannot find type " + text))__            }__            @Override_            public String toString() {_                return "type:" + name__            }_        }__    };returns,an,expression,for,a,type,value,param,name,the,type,name,return,an,expression,object,which,will,return,the,type,value;public,static,expression,type,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,exchange,get,context,get,class,resolver,resolve,class,text,if,type,null,return,type,int,pos,text,last,index,of,if,pos,0,string,before,text,substring,0,pos,string,after,text,substring,pos,1,type,exchange,get,context,get,class,resolver,resolve,class,before,if,type,null,return,object,helper,lookup,constant,field,value,type,after,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,new,class,not,found,exception,cannot,find,type,text,override,public,string,to,string,return,type,name
ExpressionBuilder -> public static Expression typeExpression(final String name);1549910857;Returns an expression for a type value__@param name the type name_@return an expression object which will return the type value;public static Expression typeExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type = exchange.getContext().getClassResolver().resolveClass(text)__                if (type != null) {_                    return type__                }__                int pos = text.lastIndexOf(".")__                if (pos > 0) {_                    String before = text.substring(0, pos)__                    String after = text.substring(pos + 1)__                    type = exchange.getContext().getClassResolver().resolveClass(before)__                    if (type != null) {_                        return ObjectHelper.lookupConstantFieldValue(type, after)__                    }_                }__                throw CamelExecutionException.wrapCamelExecutionException(exchange, new ClassNotFoundException("Cannot find type " + text))__            }__            @Override_            public String toString() {_                return "type:" + name__            }_        }__    };returns,an,expression,for,a,type,value,param,name,the,type,name,return,an,expression,object,which,will,return,the,type,value;public,static,expression,type,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,exchange,get,context,get,class,resolver,resolve,class,text,if,type,null,return,type,int,pos,text,last,index,of,if,pos,0,string,before,text,substring,0,pos,string,after,text,substring,pos,1,type,exchange,get,context,get,class,resolver,resolve,class,before,if,type,null,return,object,helper,lookup,constant,field,value,type,after,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,new,class,not,found,exception,cannot,find,type,text,override,public,string,to,string,return,type,name
ExpressionBuilder -> public static Expression typeExpression(final String name);1549911461;Returns an expression for a type value__@param name the type name_@return an expression object which will return the type value;public static Expression typeExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type = exchange.getContext().getClassResolver().resolveClass(text)__                if (type != null) {_                    return type__                }__                int pos = text.lastIndexOf(".")__                if (pos > 0) {_                    String before = text.substring(0, pos)__                    String after = text.substring(pos + 1)__                    type = exchange.getContext().getClassResolver().resolveClass(before)__                    if (type != null) {_                        return ObjectHelper.lookupConstantFieldValue(type, after)__                    }_                }__                throw CamelExecutionException.wrapCamelExecutionException(exchange, new ClassNotFoundException("Cannot find type " + text))__            }__            @Override_            public String toString() {_                return "type:" + name__            }_        }__    };returns,an,expression,for,a,type,value,param,name,the,type,name,return,an,expression,object,which,will,return,the,type,value;public,static,expression,type,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,exchange,get,context,get,class,resolver,resolve,class,text,if,type,null,return,type,int,pos,text,last,index,of,if,pos,0,string,before,text,substring,0,pos,string,after,text,substring,pos,1,type,exchange,get,context,get,class,resolver,resolve,class,before,if,type,null,return,object,helper,lookup,constant,field,value,type,after,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,new,class,not,found,exception,cannot,find,type,text,override,public,string,to,string,return,type,name
ExpressionBuilder -> public static Expression typeExpression(final String name);1549967332;Returns an expression for a type value__@param name the type name_@return an expression object which will return the type value;public static Expression typeExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type = exchange.getContext().getClassResolver().resolveClass(text)__                if (type != null) {_                    return type__                }__                int pos = text.lastIndexOf(".")__                if (pos > 0) {_                    String before = text.substring(0, pos)__                    String after = text.substring(pos + 1)__                    type = exchange.getContext().getClassResolver().resolveClass(before)__                    if (type != null) {_                        return ObjectHelper.lookupConstantFieldValue(type, after)__                    }_                }__                throw CamelExecutionException.wrapCamelExecutionException(exchange, new ClassNotFoundException("Cannot find type " + text))__            }__            @Override_            public String toString() {_                return "type:" + name__            }_        }__    };returns,an,expression,for,a,type,value,param,name,the,type,name,return,an,expression,object,which,will,return,the,type,value;public,static,expression,type,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,exchange,get,context,get,class,resolver,resolve,class,text,if,type,null,return,type,int,pos,text,last,index,of,if,pos,0,string,before,text,substring,0,pos,string,after,text,substring,pos,1,type,exchange,get,context,get,class,resolver,resolve,class,before,if,type,null,return,object,helper,lookup,constant,field,value,type,after,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,new,class,not,found,exception,cannot,find,type,text,override,public,string,to,string,return,type,name
ExpressionBuilder -> public static Expression typeExpression(final String name);1549967797;Returns an expression for a type value__@param name the type name_@return an expression object which will return the type value;public static Expression typeExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type = exchange.getContext().getClassResolver().resolveClass(text)__                if (type != null) {_                    return type__                }__                int pos = text.lastIndexOf(".")__                if (pos > 0) {_                    String before = text.substring(0, pos)__                    String after = text.substring(pos + 1)__                    type = exchange.getContext().getClassResolver().resolveClass(before)__                    if (type != null) {_                        return ObjectHelper.lookupConstantFieldValue(type, after)__                    }_                }__                throw CamelExecutionException.wrapCamelExecutionException(exchange, new ClassNotFoundException("Cannot find type " + text))__            }__            @Override_            public String toString() {_                return "type:" + name__            }_        }__    };returns,an,expression,for,a,type,value,param,name,the,type,name,return,an,expression,object,which,will,return,the,type,value;public,static,expression,type,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,exchange,get,context,get,class,resolver,resolve,class,text,if,type,null,return,type,int,pos,text,last,index,of,if,pos,0,string,before,text,substring,0,pos,string,after,text,substring,pos,1,type,exchange,get,context,get,class,resolver,resolve,class,before,if,type,null,return,object,helper,lookup,constant,field,value,type,after,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,new,class,not,found,exception,cannot,find,type,text,override,public,string,to,string,return,type,name
ExpressionBuilder -> public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function);1549264559;Returns a functional expression for the exchanges inbound message body and headers;public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,and,headers;public,static,expression,body,expression,final,bi,function,object,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function);1549910857;Returns a functional expression for the exchanges inbound message body and headers;public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,and,headers;public,static,expression,body,expression,final,bi,function,object,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function);1549911461;Returns a functional expression for the exchanges inbound message body and headers;public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,and,headers;public,static,expression,body,expression,final,bi,function,object,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function);1549967332;Returns a functional expression for the exchanges inbound message body and headers;public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,and,headers;public,static,expression,body,expression,final,bi,function,object,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function);1549967797;Returns a functional expression for the exchanges inbound message body and headers;public static Expression bodyExpression(final BiFunction<Object, Map<String, Object>, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(),_                    exchange.getIn().getHeaders()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,and,headers;public,static,expression,body,expression,final,bi,function,object,map,string,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,exchange,get,in,get,headers,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName);1549264559;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@return an expression object which will return the system property value;public static Expression systemEnvironmentExpression(final String propertyName) {_        return systemEnvironmentExpression(propertyName, null)__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,environment,expression,final,string,property,name,return,system,environment,expression,property,name,null
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName);1549910857;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@return an expression object which will return the system property value;public static Expression systemEnvironmentExpression(final String propertyName) {_        return systemEnvironmentExpression(propertyName, null)__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,environment,expression,final,string,property,name,return,system,environment,expression,property,name,null
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName);1549911461;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@return an expression object which will return the system property value;public static Expression systemEnvironmentExpression(final String propertyName) {_        return systemEnvironmentExpression(propertyName, null)__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,environment,expression,final,string,property,name,return,system,environment,expression,property,name,null
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName);1549967332;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@return an expression object which will return the system property value;public static Expression systemEnvironmentExpression(final String propertyName) {_        return systemEnvironmentExpression(propertyName, null)__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,environment,expression,final,string,property,name,return,system,environment,expression,property,name,null
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName);1549967797;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@return an expression object which will return the system property value;public static Expression systemEnvironmentExpression(final String propertyName) {_        return systemEnvironmentExpression(propertyName, null)__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,environment,expression,final,string,property,name,return,system,environment,expression,property,name,null
ExpressionBuilder -> public static Expression messageHistoryExpression(final boolean detailed);1549264559;Returns the message history (including exchange details or not);public static Expression messageHistoryExpression(final boolean detailed) {_        return new ExpressionAdapter() {__            private ExchangeFormatter formatter___            public Object evaluate(Exchange exchange) {_                ExchangeFormatter ef = null__                if (detailed) {_                    _                    ef = getOrCreateExchangeFormatter(exchange.getContext())__                }_                return MessageHelper.dumpMessageHistoryStacktrace(exchange, ef, false)__            }__            private ExchangeFormatter getOrCreateExchangeFormatter(CamelContext camelContext) {_                if (formatter == null) {_                    Set<ExchangeFormatter> formatters = camelContext.getRegistry().findByType(ExchangeFormatter.class)__                    if (formatters != null && formatters.size() == 1) {_                        formatter = formatters.iterator().next()__                    } else {_                        _                        DefaultExchangeFormatter def = new DefaultExchangeFormatter()__                        def.setShowExchangeId(true)__                        def.setMultiline(true)__                        def.setShowHeaders(true)__                        def.setStyle(DefaultExchangeFormatter.OutputStyle.Fixed)__                        try {_                            Integer maxChars = CamelContextHelper.parseInteger(camelContext, camelContext.getGlobalOption(Exchange.LOG_DEBUG_BODY_MAX_CHARS))__                            if (maxChars != null) {_                                def.setMaxChars(maxChars)__                            }_                        } catch (Exception e) {_                            throw RuntimeCamelException.wrapRuntimeCamelException(e)__                        }_                        formatter = def__                    }_                }_                return formatter__            }__            @Override_            public String toString() {_                return "messageHistory(" + detailed + ")"__            }_        }__    };returns,the,message,history,including,exchange,details,or,not;public,static,expression,message,history,expression,final,boolean,detailed,return,new,expression,adapter,private,exchange,formatter,formatter,public,object,evaluate,exchange,exchange,exchange,formatter,ef,null,if,detailed,ef,get,or,create,exchange,formatter,exchange,get,context,return,message,helper,dump,message,history,stacktrace,exchange,ef,false,private,exchange,formatter,get,or,create,exchange,formatter,camel,context,camel,context,if,formatter,null,set,exchange,formatter,formatters,camel,context,get,registry,find,by,type,exchange,formatter,class,if,formatters,null,formatters,size,1,formatter,formatters,iterator,next,else,default,exchange,formatter,def,new,default,exchange,formatter,def,set,show,exchange,id,true,def,set,multiline,true,def,set,show,headers,true,def,set,style,default,exchange,formatter,output,style,fixed,try,integer,max,chars,camel,context,helper,parse,integer,camel,context,camel,context,get,global,option,exchange,if,max,chars,null,def,set,max,chars,max,chars,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,formatter,def,return,formatter,override,public,string,to,string,return,message,history,detailed
ExpressionBuilder -> public static Expression messageHistoryExpression(final boolean detailed);1549910857;Returns the message history (including exchange details or not);public static Expression messageHistoryExpression(final boolean detailed) {_        return new ExpressionAdapter() {__            private ExchangeFormatter formatter___            public Object evaluate(Exchange exchange) {_                ExchangeFormatter ef = null__                if (detailed) {_                    _                    ef = getOrCreateExchangeFormatter(exchange.getContext())__                }_                return MessageHelper.dumpMessageHistoryStacktrace(exchange, ef, false)__            }__            private ExchangeFormatter getOrCreateExchangeFormatter(CamelContext camelContext) {_                if (formatter == null) {_                    Set<ExchangeFormatter> formatters = camelContext.getRegistry().findByType(ExchangeFormatter.class)__                    if (formatters != null && formatters.size() == 1) {_                        formatter = formatters.iterator().next()__                    } else {_                        _                        DefaultExchangeFormatter def = new DefaultExchangeFormatter()__                        def.setShowExchangeId(true)__                        def.setMultiline(true)__                        def.setShowHeaders(true)__                        def.setStyle(DefaultExchangeFormatter.OutputStyle.Fixed)__                        try {_                            Integer maxChars = CamelContextHelper.parseInteger(camelContext, camelContext.getGlobalOption(Exchange.LOG_DEBUG_BODY_MAX_CHARS))__                            if (maxChars != null) {_                                def.setMaxChars(maxChars)__                            }_                        } catch (Exception e) {_                            throw RuntimeCamelException.wrapRuntimeCamelException(e)__                        }_                        formatter = def__                    }_                }_                return formatter__            }__            @Override_            public String toString() {_                return "messageHistory(" + detailed + ")"__            }_        }__    };returns,the,message,history,including,exchange,details,or,not;public,static,expression,message,history,expression,final,boolean,detailed,return,new,expression,adapter,private,exchange,formatter,formatter,public,object,evaluate,exchange,exchange,exchange,formatter,ef,null,if,detailed,ef,get,or,create,exchange,formatter,exchange,get,context,return,message,helper,dump,message,history,stacktrace,exchange,ef,false,private,exchange,formatter,get,or,create,exchange,formatter,camel,context,camel,context,if,formatter,null,set,exchange,formatter,formatters,camel,context,get,registry,find,by,type,exchange,formatter,class,if,formatters,null,formatters,size,1,formatter,formatters,iterator,next,else,default,exchange,formatter,def,new,default,exchange,formatter,def,set,show,exchange,id,true,def,set,multiline,true,def,set,show,headers,true,def,set,style,default,exchange,formatter,output,style,fixed,try,integer,max,chars,camel,context,helper,parse,integer,camel,context,camel,context,get,global,option,exchange,if,max,chars,null,def,set,max,chars,max,chars,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,formatter,def,return,formatter,override,public,string,to,string,return,message,history,detailed
ExpressionBuilder -> public static Expression messageHistoryExpression(final boolean detailed);1549911461;Returns the message history (including exchange details or not);public static Expression messageHistoryExpression(final boolean detailed) {_        return new ExpressionAdapter() {__            private ExchangeFormatter formatter___            public Object evaluate(Exchange exchange) {_                ExchangeFormatter ef = null__                if (detailed) {_                    _                    ef = getOrCreateExchangeFormatter(exchange.getContext())__                }_                return MessageHelper.dumpMessageHistoryStacktrace(exchange, ef, false)__            }__            private ExchangeFormatter getOrCreateExchangeFormatter(CamelContext camelContext) {_                if (formatter == null) {_                    Set<ExchangeFormatter> formatters = camelContext.getRegistry().findByType(ExchangeFormatter.class)__                    if (formatters != null && formatters.size() == 1) {_                        formatter = formatters.iterator().next()__                    } else {_                        _                        DefaultExchangeFormatter def = new DefaultExchangeFormatter()__                        def.setShowExchangeId(true)__                        def.setMultiline(true)__                        def.setShowHeaders(true)__                        def.setStyle(DefaultExchangeFormatter.OutputStyle.Fixed)__                        try {_                            Integer maxChars = CamelContextHelper.parseInteger(camelContext, camelContext.getGlobalOption(Exchange.LOG_DEBUG_BODY_MAX_CHARS))__                            if (maxChars != null) {_                                def.setMaxChars(maxChars)__                            }_                        } catch (Exception e) {_                            throw RuntimeCamelException.wrapRuntimeCamelException(e)__                        }_                        formatter = def__                    }_                }_                return formatter__            }__            @Override_            public String toString() {_                return "messageHistory(" + detailed + ")"__            }_        }__    };returns,the,message,history,including,exchange,details,or,not;public,static,expression,message,history,expression,final,boolean,detailed,return,new,expression,adapter,private,exchange,formatter,formatter,public,object,evaluate,exchange,exchange,exchange,formatter,ef,null,if,detailed,ef,get,or,create,exchange,formatter,exchange,get,context,return,message,helper,dump,message,history,stacktrace,exchange,ef,false,private,exchange,formatter,get,or,create,exchange,formatter,camel,context,camel,context,if,formatter,null,set,exchange,formatter,formatters,camel,context,get,registry,find,by,type,exchange,formatter,class,if,formatters,null,formatters,size,1,formatter,formatters,iterator,next,else,default,exchange,formatter,def,new,default,exchange,formatter,def,set,show,exchange,id,true,def,set,multiline,true,def,set,show,headers,true,def,set,style,default,exchange,formatter,output,style,fixed,try,integer,max,chars,camel,context,helper,parse,integer,camel,context,camel,context,get,global,option,exchange,if,max,chars,null,def,set,max,chars,max,chars,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,formatter,def,return,formatter,override,public,string,to,string,return,message,history,detailed
ExpressionBuilder -> public static Expression messageHistoryExpression(final boolean detailed);1549967332;Returns the message history (including exchange details or not);public static Expression messageHistoryExpression(final boolean detailed) {_        return new ExpressionAdapter() {__            private ExchangeFormatter formatter___            public Object evaluate(Exchange exchange) {_                ExchangeFormatter ef = null__                if (detailed) {_                    _                    ef = getOrCreateExchangeFormatter(exchange.getContext())__                }_                return MessageHelper.dumpMessageHistoryStacktrace(exchange, ef, false)__            }__            private ExchangeFormatter getOrCreateExchangeFormatter(CamelContext camelContext) {_                if (formatter == null) {_                    Set<ExchangeFormatter> formatters = camelContext.getRegistry().findByType(ExchangeFormatter.class)__                    if (formatters != null && formatters.size() == 1) {_                        formatter = formatters.iterator().next()__                    } else {_                        _                        DefaultExchangeFormatter def = new DefaultExchangeFormatter()__                        def.setShowExchangeId(true)__                        def.setMultiline(true)__                        def.setShowHeaders(true)__                        def.setStyle(DefaultExchangeFormatter.OutputStyle.Fixed)__                        try {_                            Integer maxChars = CamelContextHelper.parseInteger(camelContext, camelContext.getGlobalOption(Exchange.LOG_DEBUG_BODY_MAX_CHARS))__                            if (maxChars != null) {_                                def.setMaxChars(maxChars)__                            }_                        } catch (Exception e) {_                            throw RuntimeCamelException.wrapRuntimeCamelException(e)__                        }_                        formatter = def__                    }_                }_                return formatter__            }__            @Override_            public String toString() {_                return "messageHistory(" + detailed + ")"__            }_        }__    };returns,the,message,history,including,exchange,details,or,not;public,static,expression,message,history,expression,final,boolean,detailed,return,new,expression,adapter,private,exchange,formatter,formatter,public,object,evaluate,exchange,exchange,exchange,formatter,ef,null,if,detailed,ef,get,or,create,exchange,formatter,exchange,get,context,return,message,helper,dump,message,history,stacktrace,exchange,ef,false,private,exchange,formatter,get,or,create,exchange,formatter,camel,context,camel,context,if,formatter,null,set,exchange,formatter,formatters,camel,context,get,registry,find,by,type,exchange,formatter,class,if,formatters,null,formatters,size,1,formatter,formatters,iterator,next,else,default,exchange,formatter,def,new,default,exchange,formatter,def,set,show,exchange,id,true,def,set,multiline,true,def,set,show,headers,true,def,set,style,default,exchange,formatter,output,style,fixed,try,integer,max,chars,camel,context,helper,parse,integer,camel,context,camel,context,get,global,option,exchange,if,max,chars,null,def,set,max,chars,max,chars,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,formatter,def,return,formatter,override,public,string,to,string,return,message,history,detailed
ExpressionBuilder -> public static Expression messageHistoryExpression(final boolean detailed);1549967797;Returns the message history (including exchange details or not);public static Expression messageHistoryExpression(final boolean detailed) {_        return new ExpressionAdapter() {__            private ExchangeFormatter formatter___            public Object evaluate(Exchange exchange) {_                ExchangeFormatter ef = null__                if (detailed) {_                    _                    ef = getOrCreateExchangeFormatter(exchange.getContext())__                }_                return MessageHelper.dumpMessageHistoryStacktrace(exchange, ef, false)__            }__            private ExchangeFormatter getOrCreateExchangeFormatter(CamelContext camelContext) {_                if (formatter == null) {_                    Set<ExchangeFormatter> formatters = camelContext.getRegistry().findByType(ExchangeFormatter.class)__                    if (formatters != null && formatters.size() == 1) {_                        formatter = formatters.iterator().next()__                    } else {_                        _                        DefaultExchangeFormatter def = new DefaultExchangeFormatter()__                        def.setShowExchangeId(true)__                        def.setMultiline(true)__                        def.setShowHeaders(true)__                        def.setStyle(DefaultExchangeFormatter.OutputStyle.Fixed)__                        try {_                            Integer maxChars = CamelContextHelper.parseInteger(camelContext, camelContext.getGlobalOption(Exchange.LOG_DEBUG_BODY_MAX_CHARS))__                            if (maxChars != null) {_                                def.setMaxChars(maxChars)__                            }_                        } catch (Exception e) {_                            throw RuntimeCamelException.wrapRuntimeCamelException(e)__                        }_                        formatter = def__                    }_                }_                return formatter__            }__            @Override_            public String toString() {_                return "messageHistory(" + detailed + ")"__            }_        }__    };returns,the,message,history,including,exchange,details,or,not;public,static,expression,message,history,expression,final,boolean,detailed,return,new,expression,adapter,private,exchange,formatter,formatter,public,object,evaluate,exchange,exchange,exchange,formatter,ef,null,if,detailed,ef,get,or,create,exchange,formatter,exchange,get,context,return,message,helper,dump,message,history,stacktrace,exchange,ef,false,private,exchange,formatter,get,or,create,exchange,formatter,camel,context,camel,context,if,formatter,null,set,exchange,formatter,formatters,camel,context,get,registry,find,by,type,exchange,formatter,class,if,formatters,null,formatters,size,1,formatter,formatters,iterator,next,else,default,exchange,formatter,def,new,default,exchange,formatter,def,set,show,exchange,id,true,def,set,multiline,true,def,set,show,headers,true,def,set,style,default,exchange,formatter,output,style,fixed,try,integer,max,chars,camel,context,helper,parse,integer,camel,context,camel,context,get,global,option,exchange,if,max,chars,null,def,set,max,chars,max,chars,catch,exception,e,throw,runtime,camel,exception,wrap,runtime,camel,exception,e,formatter,def,return,formatter,override,public,string,to,string,return,message,history,detailed
ExpressionBuilder -> public static Expression languageExpression(final String language, final String expression);1549264559;Returns an expression for evaluating the expression/predicate using the given language__@param expression  the expression or predicate_@return an expression object which will evaluate the expression/predicate using the given language;public static Expression languageExpression(final String language, final String expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createExpression(expression).evaluate(exchange, Object.class)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public boolean matches(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createPredicate(expression).matches(exchange)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public String toString() {_                return "language[" + language + ":" + expression + "]"__            }_        }__    };returns,an,expression,for,evaluating,the,expression,predicate,using,the,given,language,param,expression,the,expression,or,predicate,return,an,expression,object,which,will,evaluate,the,expression,predicate,using,the,given,language;public,static,expression,language,expression,final,string,language,final,string,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,expression,expression,evaluate,exchange,object,class,else,throw,new,no,such,language,exception,language,override,public,boolean,matches,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,predicate,expression,matches,exchange,else,throw,new,no,such,language,exception,language,override,public,string,to,string,return,language,language,expression
ExpressionBuilder -> public static Expression languageExpression(final String language, final String expression);1549910857;Returns an expression for evaluating the expression/predicate using the given language__@param expression  the expression or predicate_@return an expression object which will evaluate the expression/predicate using the given language;public static Expression languageExpression(final String language, final String expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createExpression(expression).evaluate(exchange, Object.class)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public boolean matches(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createPredicate(expression).matches(exchange)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public String toString() {_                return "language[" + language + ":" + expression + "]"__            }_        }__    };returns,an,expression,for,evaluating,the,expression,predicate,using,the,given,language,param,expression,the,expression,or,predicate,return,an,expression,object,which,will,evaluate,the,expression,predicate,using,the,given,language;public,static,expression,language,expression,final,string,language,final,string,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,expression,expression,evaluate,exchange,object,class,else,throw,new,no,such,language,exception,language,override,public,boolean,matches,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,predicate,expression,matches,exchange,else,throw,new,no,such,language,exception,language,override,public,string,to,string,return,language,language,expression
ExpressionBuilder -> public static Expression languageExpression(final String language, final String expression);1549911461;Returns an expression for evaluating the expression/predicate using the given language__@param expression  the expression or predicate_@return an expression object which will evaluate the expression/predicate using the given language;public static Expression languageExpression(final String language, final String expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createExpression(expression).evaluate(exchange, Object.class)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public boolean matches(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createPredicate(expression).matches(exchange)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public String toString() {_                return "language[" + language + ":" + expression + "]"__            }_        }__    };returns,an,expression,for,evaluating,the,expression,predicate,using,the,given,language,param,expression,the,expression,or,predicate,return,an,expression,object,which,will,evaluate,the,expression,predicate,using,the,given,language;public,static,expression,language,expression,final,string,language,final,string,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,expression,expression,evaluate,exchange,object,class,else,throw,new,no,such,language,exception,language,override,public,boolean,matches,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,predicate,expression,matches,exchange,else,throw,new,no,such,language,exception,language,override,public,string,to,string,return,language,language,expression
ExpressionBuilder -> public static Expression languageExpression(final String language, final String expression);1549967332;Returns an expression for evaluating the expression/predicate using the given language__@param expression  the expression or predicate_@return an expression object which will evaluate the expression/predicate using the given language;public static Expression languageExpression(final String language, final String expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createExpression(expression).evaluate(exchange, Object.class)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public boolean matches(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createPredicate(expression).matches(exchange)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public String toString() {_                return "language[" + language + ":" + expression + "]"__            }_        }__    };returns,an,expression,for,evaluating,the,expression,predicate,using,the,given,language,param,expression,the,expression,or,predicate,return,an,expression,object,which,will,evaluate,the,expression,predicate,using,the,given,language;public,static,expression,language,expression,final,string,language,final,string,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,expression,expression,evaluate,exchange,object,class,else,throw,new,no,such,language,exception,language,override,public,boolean,matches,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,predicate,expression,matches,exchange,else,throw,new,no,such,language,exception,language,override,public,string,to,string,return,language,language,expression
ExpressionBuilder -> public static Expression languageExpression(final String language, final String expression);1549967797;Returns an expression for evaluating the expression/predicate using the given language__@param expression  the expression or predicate_@return an expression object which will evaluate the expression/predicate using the given language;public static Expression languageExpression(final String language, final String expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createExpression(expression).evaluate(exchange, Object.class)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public boolean matches(Exchange exchange) {_                Language lan = exchange.getContext().resolveLanguage(language)__                if (lan != null) {_                    return lan.createPredicate(expression).matches(exchange)__                } else {_                    throw new NoSuchLanguageException(language)__                }_            }__            @Override_            public String toString() {_                return "language[" + language + ":" + expression + "]"__            }_        }__    };returns,an,expression,for,evaluating,the,expression,predicate,using,the,given,language,param,expression,the,expression,or,predicate,return,an,expression,object,which,will,evaluate,the,expression,predicate,using,the,given,language;public,static,expression,language,expression,final,string,language,final,string,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,expression,expression,evaluate,exchange,object,class,else,throw,new,no,such,language,exception,language,override,public,boolean,matches,exchange,exchange,language,lan,exchange,get,context,resolve,language,language,if,lan,null,return,lan,create,predicate,expression,matches,exchange,else,throw,new,no,such,language,exception,language,override,public,string,to,string,return,language,language,expression
ExpressionBuilder -> public static Expression refExpression(final String ref);1549264559;Returns an expression for lookup a bean in the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the bean;public static Expression refExpression(final String ref) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(ref).evaluate(exchange, String.class)__                return exchange.getContext().getRegistry().lookupByName(text)__            }__            @Override_            public String toString() {_                return "ref(" + ref + ")"__            }_        }__    };returns,an,expression,for,lookup,a,bean,in,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,bean;public,static,expression,ref,expression,final,string,ref,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,ref,evaluate,exchange,string,class,return,exchange,get,context,get,registry,lookup,by,name,text,override,public,string,to,string,return,ref,ref
ExpressionBuilder -> public static Expression refExpression(final String ref);1549910857;Returns an expression for lookup a bean in the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the bean;public static Expression refExpression(final String ref) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(ref).evaluate(exchange, String.class)__                return exchange.getContext().getRegistry().lookupByName(text)__            }__            @Override_            public String toString() {_                return "ref(" + ref + ")"__            }_        }__    };returns,an,expression,for,lookup,a,bean,in,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,bean;public,static,expression,ref,expression,final,string,ref,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,ref,evaluate,exchange,string,class,return,exchange,get,context,get,registry,lookup,by,name,text,override,public,string,to,string,return,ref,ref
ExpressionBuilder -> public static Expression refExpression(final String ref);1549911461;Returns an expression for lookup a bean in the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the bean;public static Expression refExpression(final String ref) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(ref).evaluate(exchange, String.class)__                return exchange.getContext().getRegistry().lookupByName(text)__            }__            @Override_            public String toString() {_                return "ref(" + ref + ")"__            }_        }__    };returns,an,expression,for,lookup,a,bean,in,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,bean;public,static,expression,ref,expression,final,string,ref,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,ref,evaluate,exchange,string,class,return,exchange,get,context,get,registry,lookup,by,name,text,override,public,string,to,string,return,ref,ref
ExpressionBuilder -> public static Expression refExpression(final String ref);1549967332;Returns an expression for lookup a bean in the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the bean;public static Expression refExpression(final String ref) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(ref).evaluate(exchange, String.class)__                return exchange.getContext().getRegistry().lookupByName(text)__            }__            @Override_            public String toString() {_                return "ref(" + ref + ")"__            }_        }__    };returns,an,expression,for,lookup,a,bean,in,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,bean;public,static,expression,ref,expression,final,string,ref,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,ref,evaluate,exchange,string,class,return,exchange,get,context,get,registry,lookup,by,name,text,override,public,string,to,string,return,ref,ref
ExpressionBuilder -> public static Expression refExpression(final String ref);1549967797;Returns an expression for lookup a bean in the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the bean;public static Expression refExpression(final String ref) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(ref).evaluate(exchange, String.class)__                return exchange.getContext().getRegistry().lookupByName(text)__            }__            @Override_            public String toString() {_                return "ref(" + ref + ")"__            }_        }__    };returns,an,expression,for,lookup,a,bean,in,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,bean;public,static,expression,ref,expression,final,string,ref,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,ref,evaluate,exchange,string,class,return,exchange,get,context,get,registry,lookup,by,name,text,override,public,string,to,string,return,ref,ref
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName,                                                          final String defaultValue);1549264559;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@param defaultValue default value to return if no system environment exists_@return an expression object which will return the system environment value;public static Expression systemEnvironmentExpression(final String propertyName,_                                                         final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String answer = System.getenv(text.toUpperCase())__                if (answer == null) {_                    String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                    answer = text2__                }_                return answer__            }__            @Override_            public String toString() {_                return "systemEnvironment(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,environment,exists,return,an,expression,object,which,will,return,the,system,environment,value;public,static,expression,system,environment,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,answer,system,getenv,text,to,upper,case,if,answer,null,string,text2,simple,expression,default,value,evaluate,exchange,string,class,answer,text2,return,answer,override,public,string,to,string,return,system,environment,property,name
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName,                                                          final String defaultValue);1549910857;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@param defaultValue default value to return if no system environment exists_@return an expression object which will return the system environment value;public static Expression systemEnvironmentExpression(final String propertyName,_                                                         final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String answer = System.getenv(text.toUpperCase())__                if (answer == null) {_                    String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                    answer = text2__                }_                return answer__            }__            @Override_            public String toString() {_                return "systemEnvironment(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,environment,exists,return,an,expression,object,which,will,return,the,system,environment,value;public,static,expression,system,environment,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,answer,system,getenv,text,to,upper,case,if,answer,null,string,text2,simple,expression,default,value,evaluate,exchange,string,class,answer,text2,return,answer,override,public,string,to,string,return,system,environment,property,name
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName,                                                          final String defaultValue);1549911461;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@param defaultValue default value to return if no system environment exists_@return an expression object which will return the system environment value;public static Expression systemEnvironmentExpression(final String propertyName,_                                                         final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String answer = System.getenv(text.toUpperCase())__                if (answer == null) {_                    String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                    answer = text2__                }_                return answer__            }__            @Override_            public String toString() {_                return "systemEnvironment(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,environment,exists,return,an,expression,object,which,will,return,the,system,environment,value;public,static,expression,system,environment,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,answer,system,getenv,text,to,upper,case,if,answer,null,string,text2,simple,expression,default,value,evaluate,exchange,string,class,answer,text2,return,answer,override,public,string,to,string,return,system,environment,property,name
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName,                                                          final String defaultValue);1549967332;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@param defaultValue default value to return if no system environment exists_@return an expression object which will return the system environment value;public static Expression systemEnvironmentExpression(final String propertyName,_                                                         final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String answer = System.getenv(text.toUpperCase())__                if (answer == null) {_                    String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                    answer = text2__                }_                return answer__            }__            @Override_            public String toString() {_                return "systemEnvironment(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,environment,exists,return,an,expression,object,which,will,return,the,system,environment,value;public,static,expression,system,environment,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,answer,system,getenv,text,to,upper,case,if,answer,null,string,text2,simple,expression,default,value,evaluate,exchange,string,class,answer,text2,return,answer,override,public,string,to,string,return,system,environment,property,name
ExpressionBuilder -> public static Expression systemEnvironmentExpression(final String propertyName,                                                          final String defaultValue);1549967797;Returns an expression for a system environment value with the given name__@param propertyName the name of the system environment the expression will return_@param defaultValue default value to return if no system environment exists_@return an expression object which will return the system environment value;public static Expression systemEnvironmentExpression(final String propertyName,_                                                         final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String answer = System.getenv(text.toUpperCase())__                if (answer == null) {_                    String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                    answer = text2__                }_                return answer__            }__            @Override_            public String toString() {_                return "systemEnvironment(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,environment,value,with,the,given,name,param,property,name,the,name,of,the,system,environment,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,environment,exists,return,an,expression,object,which,will,return,the,system,environment,value;public,static,expression,system,environment,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,answer,system,getenv,text,to,upper,case,if,answer,null,string,text2,simple,expression,default,value,evaluate,exchange,string,class,answer,text2,return,answer,override,public,string,to,string,return,system,environment,property,name
ExpressionBuilder -> public static <T> Expression outBodyExpression(final Class<T> type);1549264559;Returns the expression for the exchanges outbound message body converted_to the given type;public static <T> Expression outBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody(type)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,outbound,message,body,converted,to,the,given,type;public,static,t,expression,out,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,type,else,return,null,override,public,string,to,string,return,out,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression outBodyExpression(final Class<T> type);1549910857;Returns the expression for the exchanges outbound message body converted_to the given type;public static <T> Expression outBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody(type)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,outbound,message,body,converted,to,the,given,type;public,static,t,expression,out,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,type,else,return,null,override,public,string,to,string,return,out,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression outBodyExpression(final Class<T> type);1549911461;Returns the expression for the exchanges outbound message body converted_to the given type;public static <T> Expression outBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody(type)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,outbound,message,body,converted,to,the,given,type;public,static,t,expression,out,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,type,else,return,null,override,public,string,to,string,return,out,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression outBodyExpression(final Class<T> type);1549967332;Returns the expression for the exchanges outbound message body converted_to the given type;public static <T> Expression outBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody(type)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,outbound,message,body,converted,to,the,given,type;public,static,t,expression,out,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,type,else,return,null,override,public,string,to,string,return,out,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression outBodyExpression(final Class<T> type);1549967797;Returns the expression for the exchanges outbound message body converted_to the given type;public static <T> Expression outBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody(type)__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,outbound,message,body,converted,to,the,given,type;public,static,t,expression,out,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,type,else,return,null,override,public,string,to,string,return,out,body,as,type,get,name
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions);1549264559;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions) {_        return concatExpression(expressions, null)__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,return,concat,expression,expressions,null
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions);1549910857;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions) {_        return concatExpression(expressions, null)__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,return,concat,expression,expressions,null
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions);1549911461;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions) {_        return concatExpression(expressions, null)__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,return,concat,expression,expressions,null
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions);1549967332;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions) {_        return concatExpression(expressions, null)__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,return,concat,expression,expressions,null
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions);1549967797;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions) {_        return concatExpression(expressions, null)__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,return,concat,expression,expressions,null
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions, final String description);1549910857;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@param description the text description of the expression_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions, final String description) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                StringBuilder buffer = new StringBuilder()__                for (Expression expression : expressions) {_                    String text = expression.evaluate(exchange, String.class)__                    if (text != null) {_                        buffer.append(text)__                    }_                }_                return buffer.toString()__            }__            @Override_            public String toString() {_                if (description != null) {_                    return description__                } else {_                    return "concat" + expressions__                }_            }_        }__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,param,description,the,text,description,of,the,expression,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,final,string,description,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,builder,buffer,new,string,builder,for,expression,expression,expressions,string,text,expression,evaluate,exchange,string,class,if,text,null,buffer,append,text,return,buffer,to,string,override,public,string,to,string,if,description,null,return,description,else,return,concat,expressions
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions, final String description);1549911461;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@param description the text description of the expression_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions, final String description) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                StringBuilder buffer = new StringBuilder()__                for (Expression expression : expressions) {_                    String text = expression.evaluate(exchange, String.class)__                    if (text != null) {_                        buffer.append(text)__                    }_                }_                return buffer.toString()__            }__            @Override_            public String toString() {_                if (description != null) {_                    return description__                } else {_                    return "concat" + expressions__                }_            }_        }__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,param,description,the,text,description,of,the,expression,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,final,string,description,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,builder,buffer,new,string,builder,for,expression,expression,expressions,string,text,expression,evaluate,exchange,string,class,if,text,null,buffer,append,text,return,buffer,to,string,override,public,string,to,string,if,description,null,return,description,else,return,concat,expressions
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions, final String description);1549967332;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@param description the text description of the expression_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions, final String description) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                StringBuilder buffer = new StringBuilder()__                for (Expression expression : expressions) {_                    String text = expression.evaluate(exchange, String.class)__                    if (text != null) {_                        buffer.append(text)__                    }_                }_                return buffer.toString()__            }__            @Override_            public String toString() {_                if (description != null) {_                    return description__                } else {_                    return "concat" + expressions__                }_            }_        }__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,param,description,the,text,description,of,the,expression,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,final,string,description,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,builder,buffer,new,string,builder,for,expression,expression,expressions,string,text,expression,evaluate,exchange,string,class,if,text,null,buffer,append,text,return,buffer,to,string,override,public,string,to,string,if,description,null,return,description,else,return,concat,expressions
ExpressionBuilder -> public static Expression concatExpression(final Collection<Expression> expressions, final String description);1549967797;Returns an expression which returns the string concatenation value of the various_expressions__@param expressions the expression to be concatenated dynamically_@param description the text description of the expression_@return an expression which when evaluated will return the concatenated values;public static Expression concatExpression(final Collection<Expression> expressions, final String description) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                StringBuilder buffer = new StringBuilder()__                for (Expression expression : expressions) {_                    String text = expression.evaluate(exchange, String.class)__                    if (text != null) {_                        buffer.append(text)__                    }_                }_                return buffer.toString()__            }__            @Override_            public String toString() {_                if (description != null) {_                    return description__                } else {_                    return "concat" + expressions__                }_            }_        }__    };returns,an,expression,which,returns,the,string,concatenation,value,of,the,various,expressions,param,expressions,the,expression,to,be,concatenated,dynamically,param,description,the,text,description,of,the,expression,return,an,expression,which,when,evaluated,will,return,the,concatenated,values;public,static,expression,concat,expression,final,collection,expression,expressions,final,string,description,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,builder,buffer,new,string,builder,for,expression,expression,expressions,string,text,expression,evaluate,exchange,string,class,if,text,null,buffer,append,text,return,buffer,to,string,override,public,string,to,string,if,description,null,return,description,else,return,concat,expressions
ExpressionBuilder -> public static Expression threadNameExpression();1549264559;Returns the expression for the current thread name;public static Expression threadNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return Thread.currentThread().getName()__            }__            @Override_            public String toString() {_                return "threadName"__            }_        }__    };returns,the,expression,for,the,current,thread,name;public,static,expression,thread,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,thread,current,thread,get,name,override,public,string,to,string,return,thread,name
ExpressionBuilder -> public static Expression threadNameExpression();1549910857;Returns the expression for the current thread name;public static Expression threadNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return Thread.currentThread().getName()__            }__            @Override_            public String toString() {_                return "threadName"__            }_        }__    };returns,the,expression,for,the,current,thread,name;public,static,expression,thread,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,thread,current,thread,get,name,override,public,string,to,string,return,thread,name
ExpressionBuilder -> public static Expression threadNameExpression();1549911461;Returns the expression for the current thread name;public static Expression threadNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return Thread.currentThread().getName()__            }__            @Override_            public String toString() {_                return "threadName"__            }_        }__    };returns,the,expression,for,the,current,thread,name;public,static,expression,thread,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,thread,current,thread,get,name,override,public,string,to,string,return,thread,name
ExpressionBuilder -> public static Expression threadNameExpression();1549967332;Returns the expression for the current thread name;public static Expression threadNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return Thread.currentThread().getName()__            }__            @Override_            public String toString() {_                return "threadName"__            }_        }__    };returns,the,expression,for,the,current,thread,name;public,static,expression,thread,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,thread,current,thread,get,name,override,public,string,to,string,return,thread,name
ExpressionBuilder -> public static Expression threadNameExpression();1549967797;Returns the expression for the current thread name;public static Expression threadNameExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return Thread.currentThread().getName()__            }__            @Override_            public String toString() {_                return "threadName"__            }_        }__    };returns,the,expression,for,the,current,thread,name;public,static,expression,thread,name,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,thread,current,thread,get,name,override,public,string,to,string,return,thread,name
ExpressionBuilder -> public static Expression tokenizeExpression(final Expression expression,                                                 final String token);1549264559;Returns a tokenize expression which will tokenize the string with the_given token;public static Expression tokenizeExpression(final Expression expression,_                                                final String token) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(token).evaluate(exchange, String.class)__                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, text)__                return scanner__            }__            @Override_            public String toString() {_                return "tokenize(" + expression + ", " + token + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,token;public,static,expression,tokenize,expression,final,expression,expression,final,string,token,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,token,evaluate,exchange,string,class,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,text,return,scanner,override,public,string,to,string,return,tokenize,expression,token
ExpressionBuilder -> public static Expression tokenizeExpression(final Expression expression,                                                 final String token);1549910857;Returns a tokenize expression which will tokenize the string with the_given token;public static Expression tokenizeExpression(final Expression expression,_                                                final String token) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(token).evaluate(exchange, String.class)__                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, text)__                return scanner__            }__            @Override_            public String toString() {_                return "tokenize(" + expression + ", " + token + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,token;public,static,expression,tokenize,expression,final,expression,expression,final,string,token,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,token,evaluate,exchange,string,class,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,text,return,scanner,override,public,string,to,string,return,tokenize,expression,token
ExpressionBuilder -> public static Expression tokenizeExpression(final Expression expression,                                                 final String token);1549911461;Returns a tokenize expression which will tokenize the string with the_given token;public static Expression tokenizeExpression(final Expression expression,_                                                final String token) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(token).evaluate(exchange, String.class)__                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, text)__                return scanner__            }__            @Override_            public String toString() {_                return "tokenize(" + expression + ", " + token + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,token;public,static,expression,tokenize,expression,final,expression,expression,final,string,token,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,token,evaluate,exchange,string,class,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,text,return,scanner,override,public,string,to,string,return,tokenize,expression,token
ExpressionBuilder -> public static Expression tokenizeExpression(final Expression expression,                                                 final String token);1549967332;Returns a tokenize expression which will tokenize the string with the_given token;public static Expression tokenizeExpression(final Expression expression,_                                                final String token) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(token).evaluate(exchange, String.class)__                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, text)__                return scanner__            }__            @Override_            public String toString() {_                return "tokenize(" + expression + ", " + token + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,token;public,static,expression,tokenize,expression,final,expression,expression,final,string,token,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,token,evaluate,exchange,string,class,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,text,return,scanner,override,public,string,to,string,return,tokenize,expression,token
ExpressionBuilder -> public static Expression tokenizeExpression(final Expression expression,                                                 final String token);1549967797;Returns a tokenize expression which will tokenize the string with the_given token;public static Expression tokenizeExpression(final Expression expression,_                                                final String token) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(token).evaluate(exchange, String.class)__                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, text)__                return scanner__            }__            @Override_            public String toString() {_                return "tokenize(" + expression + ", " + token + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,token;public,static,expression,tokenize,expression,final,expression,expression,final,string,token,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,token,evaluate,exchange,string,class,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,text,return,scanner,override,public,string,to,string,return,tokenize,expression,token
ExpressionBuilder -> public static Expression regexTokenizeExpression(final Expression expression,                                                      final String regexTokenizer);1549264559;Returns a tokenize expression which will tokenize the string with the_given regex;public static Expression regexTokenizeExpression(final Expression expression,_                                                     final String regexTokenizer) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, regexTokenizer)__                return scanner__            }__            @Override_            public String toString() {_                return "regexTokenize(" + expression + ", " + regexTokenizer + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,regex;public,static,expression,regex,tokenize,expression,final,expression,expression,final,string,regex,tokenizer,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,regex,tokenizer,return,scanner,override,public,string,to,string,return,regex,tokenize,expression,regex,tokenizer
ExpressionBuilder -> public static Expression regexTokenizeExpression(final Expression expression,                                                      final String regexTokenizer);1549910857;Returns a tokenize expression which will tokenize the string with the_given regex;public static Expression regexTokenizeExpression(final Expression expression,_                                                     final String regexTokenizer) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, regexTokenizer)__                return scanner__            }__            @Override_            public String toString() {_                return "regexTokenize(" + expression + ", " + regexTokenizer + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,regex;public,static,expression,regex,tokenize,expression,final,expression,expression,final,string,regex,tokenizer,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,regex,tokenizer,return,scanner,override,public,string,to,string,return,regex,tokenize,expression,regex,tokenizer
ExpressionBuilder -> public static Expression regexTokenizeExpression(final Expression expression,                                                      final String regexTokenizer);1549911461;Returns a tokenize expression which will tokenize the string with the_given regex;public static Expression regexTokenizeExpression(final Expression expression,_                                                     final String regexTokenizer) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, regexTokenizer)__                return scanner__            }__            @Override_            public String toString() {_                return "regexTokenize(" + expression + ", " + regexTokenizer + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,regex;public,static,expression,regex,tokenize,expression,final,expression,expression,final,string,regex,tokenizer,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,regex,tokenizer,return,scanner,override,public,string,to,string,return,regex,tokenize,expression,regex,tokenizer
ExpressionBuilder -> public static Expression regexTokenizeExpression(final Expression expression,                                                      final String regexTokenizer);1549967332;Returns a tokenize expression which will tokenize the string with the_given regex;public static Expression regexTokenizeExpression(final Expression expression,_                                                     final String regexTokenizer) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, regexTokenizer)__                return scanner__            }__            @Override_            public String toString() {_                return "regexTokenize(" + expression + ", " + regexTokenizer + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,regex;public,static,expression,regex,tokenize,expression,final,expression,expression,final,string,regex,tokenizer,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,regex,tokenizer,return,scanner,override,public,string,to,string,return,regex,tokenize,expression,regex,tokenizer
ExpressionBuilder -> public static Expression regexTokenizeExpression(final Expression expression,                                                      final String regexTokenizer);1549967797;Returns a tokenize expression which will tokenize the string with the_given regex;public static Expression regexTokenizeExpression(final Expression expression,_                                                     final String regexTokenizer) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Scanner scanner = ExchangeHelper.getScanner(exchange, value, regexTokenizer)__                return scanner__            }__            @Override_            public String toString() {_                return "regexTokenize(" + expression + ", " + regexTokenizer + ")"__            }_        }__    };returns,a,tokenize,expression,which,will,tokenize,the,string,with,the,given,regex;public,static,expression,regex,tokenize,expression,final,expression,expression,final,string,regex,tokenizer,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,scanner,scanner,exchange,helper,get,scanner,exchange,value,regex,tokenizer,return,scanner,override,public,string,to,string,return,regex,tokenize,expression,regex,tokenizer
ExpressionBuilder -> public static Expression messageExpression(final Function<Message, Object> function);1549264559;Returns a functional expression for the IN message;public static Expression messageExpression(final Function<Message, Object> function) {_        return inMessageExpression(function)__    };returns,a,functional,expression,for,the,in,message;public,static,expression,message,expression,final,function,message,object,function,return,in,message,expression,function
ExpressionBuilder -> public static Expression messageExpression(final Function<Message, Object> function);1549910857;Returns a functional expression for the IN message;public static Expression messageExpression(final Function<Message, Object> function) {_        return inMessageExpression(function)__    };returns,a,functional,expression,for,the,in,message;public,static,expression,message,expression,final,function,message,object,function,return,in,message,expression,function
ExpressionBuilder -> public static Expression messageExpression(final Function<Message, Object> function);1549911461;Returns a functional expression for the IN message;public static Expression messageExpression(final Function<Message, Object> function) {_        return inMessageExpression(function)__    };returns,a,functional,expression,for,the,in,message;public,static,expression,message,expression,final,function,message,object,function,return,in,message,expression,function
ExpressionBuilder -> public static Expression messageExpression(final Function<Message, Object> function);1549967332;Returns a functional expression for the IN message;public static Expression messageExpression(final Function<Message, Object> function) {_        return inMessageExpression(function)__    };returns,a,functional,expression,for,the,in,message;public,static,expression,message,expression,final,function,message,object,function,return,in,message,expression,function
ExpressionBuilder -> public static Expression messageExpression(final Function<Message, Object> function);1549967797;Returns a functional expression for the IN message;public static Expression messageExpression(final Function<Message, Object> function) {_        return inMessageExpression(function)__    };returns,a,functional,expression,for,the,in,message;public,static,expression,message,expression,final,function,message,object,function,return,in,message,expression,function
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Expression type);1549264559;Returns an expression which converts the given expression to the given type the type_expression is evaluated to;public static Expression convertToExpression(final Expression expression, final Expression type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object result = type.evaluate(exchange, Object.class)__                if (result != null) {_                    return expression.evaluate(exchange, result.getClass())__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type,the,type,expression,is,evaluated,to;public,static,expression,convert,to,expression,final,expression,expression,final,expression,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,result,type,evaluate,exchange,object,class,if,result,null,return,expression,evaluate,exchange,result,get,class,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Expression type);1549910857;Returns an expression which converts the given expression to the given type the type_expression is evaluated to;public static Expression convertToExpression(final Expression expression, final Expression type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object result = type.evaluate(exchange, Object.class)__                if (result != null) {_                    return expression.evaluate(exchange, result.getClass())__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type,the,type,expression,is,evaluated,to;public,static,expression,convert,to,expression,final,expression,expression,final,expression,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,result,type,evaluate,exchange,object,class,if,result,null,return,expression,evaluate,exchange,result,get,class,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Expression type);1549911461;Returns an expression which converts the given expression to the given type the type_expression is evaluated to;public static Expression convertToExpression(final Expression expression, final Expression type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object result = type.evaluate(exchange, Object.class)__                if (result != null) {_                    return expression.evaluate(exchange, result.getClass())__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type,the,type,expression,is,evaluated,to;public,static,expression,convert,to,expression,final,expression,expression,final,expression,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,result,type,evaluate,exchange,object,class,if,result,null,return,expression,evaluate,exchange,result,get,class,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Expression type);1549967332;Returns an expression which converts the given expression to the given type the type_expression is evaluated to;public static Expression convertToExpression(final Expression expression, final Expression type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object result = type.evaluate(exchange, Object.class)__                if (result != null) {_                    return expression.evaluate(exchange, result.getClass())__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type,the,type,expression,is,evaluated,to;public,static,expression,convert,to,expression,final,expression,expression,final,expression,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,result,type,evaluate,exchange,object,class,if,result,null,return,expression,evaluate,exchange,result,get,class,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Expression type);1549967797;Returns an expression which converts the given expression to the given type the type_expression is evaluated to;public static Expression convertToExpression(final Expression expression, final Expression type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object result = type.evaluate(exchange, Object.class)__                if (result != null) {_                    return expression.evaluate(exchange, result.getClass())__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type,the,type,expression,is,evaluated,to;public,static,expression,convert,to,expression,final,expression,expression,final,expression,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,result,type,evaluate,exchange,object,class,if,result,null,return,expression,evaluate,exchange,result,get,class,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression prepend(final Expression left, final Expression right);1549264559;Prepends the String evaluations of the two expressions together;public static Expression prepend(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return right.evaluate(exchange, String.class) + left.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "prepend(" + left + ", " + right + ")"__            }_        }__    };prepends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,prepend,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,right,evaluate,exchange,string,class,left,evaluate,exchange,string,class,override,public,string,to,string,return,prepend,left,right
ExpressionBuilder -> public static Expression prepend(final Expression left, final Expression right);1549910857;Prepends the String evaluations of the two expressions together;public static Expression prepend(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return right.evaluate(exchange, String.class) + left.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "prepend(" + left + ", " + right + ")"__            }_        }__    };prepends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,prepend,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,right,evaluate,exchange,string,class,left,evaluate,exchange,string,class,override,public,string,to,string,return,prepend,left,right
ExpressionBuilder -> public static Expression prepend(final Expression left, final Expression right);1549911461;Prepends the String evaluations of the two expressions together;public static Expression prepend(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return right.evaluate(exchange, String.class) + left.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "prepend(" + left + ", " + right + ")"__            }_        }__    };prepends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,prepend,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,right,evaluate,exchange,string,class,left,evaluate,exchange,string,class,override,public,string,to,string,return,prepend,left,right
ExpressionBuilder -> public static Expression prepend(final Expression left, final Expression right);1549967332;Prepends the String evaluations of the two expressions together;public static Expression prepend(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return right.evaluate(exchange, String.class) + left.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "prepend(" + left + ", " + right + ")"__            }_        }__    };prepends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,prepend,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,right,evaluate,exchange,string,class,left,evaluate,exchange,string,class,override,public,string,to,string,return,prepend,left,right
ExpressionBuilder -> public static Expression prepend(final Expression left, final Expression right);1549967797;Prepends the String evaluations of the two expressions together;public static Expression prepend(final Expression left, final Expression right) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return right.evaluate(exchange, String.class) + left.evaluate(exchange, String.class)__            }__            @Override_            public String toString() {_                return "prepend(" + left + ", " + right + ")"__            }_        }__    };prepends,the,string,evaluations,of,the,two,expressions,together;public,static,expression,prepend,final,expression,left,final,expression,right,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,right,evaluate,exchange,string,class,left,evaluate,exchange,string,class,override,public,string,to,string,return,prepend,left,right
ExpressionBuilder -> public static Expression headersExpression();1549264559;Returns an expression for the inbound message headers__@return an expression object which will return the inbound headers;public static Expression headersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getHeaders()__            }__            @Override_            public String toString() {_                return "headers"__            }_        }__    };returns,an,expression,for,the,inbound,message,headers,return,an,expression,object,which,will,return,the,inbound,headers;public,static,expression,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,headers,override,public,string,to,string,return,headers
ExpressionBuilder -> public static Expression headersExpression();1549910857;Returns an expression for the inbound message headers__@return an expression object which will return the inbound headers;public static Expression headersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getHeaders()__            }__            @Override_            public String toString() {_                return "headers"__            }_        }__    };returns,an,expression,for,the,inbound,message,headers,return,an,expression,object,which,will,return,the,inbound,headers;public,static,expression,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,headers,override,public,string,to,string,return,headers
ExpressionBuilder -> public static Expression headersExpression();1549911461;Returns an expression for the inbound message headers__@return an expression object which will return the inbound headers;public static Expression headersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getHeaders()__            }__            @Override_            public String toString() {_                return "headers"__            }_        }__    };returns,an,expression,for,the,inbound,message,headers,return,an,expression,object,which,will,return,the,inbound,headers;public,static,expression,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,headers,override,public,string,to,string,return,headers
ExpressionBuilder -> public static Expression headersExpression();1549967332;Returns an expression for the inbound message headers__@return an expression object which will return the inbound headers;public static Expression headersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getHeaders()__            }__            @Override_            public String toString() {_                return "headers"__            }_        }__    };returns,an,expression,for,the,inbound,message,headers,return,an,expression,object,which,will,return,the,inbound,headers;public,static,expression,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,headers,override,public,string,to,string,return,headers
ExpressionBuilder -> public static Expression headersExpression();1549967797;Returns an expression for the inbound message headers__@return an expression object which will return the inbound headers;public static Expression headersExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getHeaders()__            }__            @Override_            public String toString() {_                return "headers"__            }_        }__    };returns,an,expression,for,the,inbound,message,headers,return,an,expression,object,which,will,return,the,inbound,headers;public,static,expression,headers,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,headers,override,public,string,to,string,return,headers
ExpressionBuilder -> public static Expression camelContextExpression();1549264559;Returns an expression for the {@link org.apache.camel.CamelContext}__@return an expression object which will return the camel context;public static Expression camelContextExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext()__            }__            @Override_            public String toString() {_                return "camelContext"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,return,an,expression,object,which,will,return,the,camel,context;public,static,expression,camel,context,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,override,public,string,to,string,return,camel,context
ExpressionBuilder -> public static Expression camelContextExpression();1549910857;Returns an expression for the {@link org.apache.camel.CamelContext}__@return an expression object which will return the camel context;public static Expression camelContextExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext()__            }__            @Override_            public String toString() {_                return "camelContext"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,return,an,expression,object,which,will,return,the,camel,context;public,static,expression,camel,context,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,override,public,string,to,string,return,camel,context
ExpressionBuilder -> public static Expression camelContextExpression();1549911461;Returns an expression for the {@link org.apache.camel.CamelContext}__@return an expression object which will return the camel context;public static Expression camelContextExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext()__            }__            @Override_            public String toString() {_                return "camelContext"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,return,an,expression,object,which,will,return,the,camel,context;public,static,expression,camel,context,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,override,public,string,to,string,return,camel,context
ExpressionBuilder -> public static Expression camelContextExpression();1549967332;Returns an expression for the {@link org.apache.camel.CamelContext}__@return an expression object which will return the camel context;public static Expression camelContextExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext()__            }__            @Override_            public String toString() {_                return "camelContext"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,return,an,expression,object,which,will,return,the,camel,context;public,static,expression,camel,context,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,override,public,string,to,string,return,camel,context
ExpressionBuilder -> public static Expression camelContextExpression();1549967797;Returns an expression for the {@link org.apache.camel.CamelContext}__@return an expression object which will return the camel context;public static Expression camelContextExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext()__            }__            @Override_            public String toString() {_                return "camelContext"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,camel,context,return,an,expression,object,which,will,return,the,camel,context;public,static,expression,camel,context,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,override,public,string,to,string,return,camel,context
ExpressionBuilder -> public static Expression outBodyExpression();1549264559;Returns the expression for the out messages body;public static Expression outBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBody"__            }_        }__    };returns,the,expression,for,the,out,messages,body;public,static,expression,out,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,else,return,null,override,public,string,to,string,return,out,body
ExpressionBuilder -> public static Expression outBodyExpression();1549910857;Returns the expression for the out messages body;public static Expression outBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBody"__            }_        }__    };returns,the,expression,for,the,out,messages,body;public,static,expression,out,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,else,return,null,override,public,string,to,string,return,out,body
ExpressionBuilder -> public static Expression outBodyExpression();1549911461;Returns the expression for the out messages body;public static Expression outBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBody"__            }_        }__    };returns,the,expression,for,the,out,messages,body;public,static,expression,out,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,else,return,null,override,public,string,to,string,return,out,body
ExpressionBuilder -> public static Expression outBodyExpression();1549967332;Returns the expression for the out messages body;public static Expression outBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBody"__            }_        }__    };returns,the,expression,for,the,out,messages,body;public,static,expression,out,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,else,return,null,override,public,string,to,string,return,out,body
ExpressionBuilder -> public static Expression outBodyExpression();1549967797;Returns the expression for the out messages body;public static Expression outBodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (exchange.hasOut()) {_                    return exchange.getOut().getBody()__                } else {_                    return null__                }_            }__            @Override_            public String toString() {_                return "outBody"__            }_        }__    };returns,the,expression,for,the,out,messages,body;public,static,expression,out,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,exchange,get,out,get,body,else,return,null,override,public,string,to,string,return,out,body
ExpressionBuilder -> public static Expression collateExpression(final String expression, final int group);1549264559;Returns an iterator to collate (iterate) the given expression;public static Expression collateExpression(final String expression, final int group) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.groupIteratorExpression(exp, null, "" + group, false).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "collate(" + expression + "," + group + ")"__            }_        }__    };returns,an,iterator,to,collate,iterate,the,given,expression;public,static,expression,collate,expression,final,string,expression,final,int,group,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,group,iterator,expression,exp,null,group,false,evaluate,exchange,object,class,override,public,string,to,string,return,collate,expression,group
ExpressionBuilder -> public static Expression collateExpression(final String expression, final int group);1549910857;Returns an iterator to collate (iterate) the given expression;public static Expression collateExpression(final String expression, final int group) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.groupIteratorExpression(exp, null, "" + group, false).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "collate(" + expression + "," + group + ")"__            }_        }__    };returns,an,iterator,to,collate,iterate,the,given,expression;public,static,expression,collate,expression,final,string,expression,final,int,group,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,group,iterator,expression,exp,null,group,false,evaluate,exchange,object,class,override,public,string,to,string,return,collate,expression,group
ExpressionBuilder -> public static Expression collateExpression(final String expression, final int group);1549911461;Returns an iterator to collate (iterate) the given expression;public static Expression collateExpression(final String expression, final int group) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.groupIteratorExpression(exp, null, "" + group, false).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "collate(" + expression + "," + group + ")"__            }_        }__    };returns,an,iterator,to,collate,iterate,the,given,expression;public,static,expression,collate,expression,final,string,expression,final,int,group,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,group,iterator,expression,exp,null,group,false,evaluate,exchange,object,class,override,public,string,to,string,return,collate,expression,group
ExpressionBuilder -> public static Expression collateExpression(final String expression, final int group);1549967332;Returns an iterator to collate (iterate) the given expression;public static Expression collateExpression(final String expression, final int group) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.groupIteratorExpression(exp, null, "" + group, false).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "collate(" + expression + "," + group + ")"__            }_        }__    };returns,an,iterator,to,collate,iterate,the,given,expression;public,static,expression,collate,expression,final,string,expression,final,int,group,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,group,iterator,expression,exp,null,group,false,evaluate,exchange,object,class,override,public,string,to,string,return,collate,expression,group
ExpressionBuilder -> public static Expression collateExpression(final String expression, final int group);1549967797;Returns an iterator to collate (iterate) the given expression;public static Expression collateExpression(final String expression, final int group) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.groupIteratorExpression(exp, null, "" + group, false).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "collate(" + expression + "," + group + ")"__            }_        }__    };returns,an,iterator,to,collate,iterate,the,given,expression;public,static,expression,collate,expression,final,string,expression,final,int,group,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,group,iterator,expression,exp,null,group,false,evaluate,exchange,object,class,override,public,string,to,string,return,collate,expression,group
ExpressionBuilder -> public static Expression headerExpression(final String headerName);1549264559;Returns an expression for the header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name)__                if (header == null) {_                    _                    header = exchange.getProperty(name)__                }_                return header__            }__            @Override_            public String toString() {_                return "header(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,if,header,null,header,exchange,get,property,name,return,header,override,public,string,to,string,return,header,header,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName);1549910857;Returns an expression for the header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name)__                if (header == null) {_                    _                    header = exchange.getProperty(name)__                }_                return header__            }__            @Override_            public String toString() {_                return "header(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,if,header,null,header,exchange,get,property,name,return,header,override,public,string,to,string,return,header,header,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName);1549911461;Returns an expression for the header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name)__                if (header == null) {_                    _                    header = exchange.getProperty(name)__                }_                return header__            }__            @Override_            public String toString() {_                return "header(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,if,header,null,header,exchange,get,property,name,return,header,override,public,string,to,string,return,header,header,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName);1549967332;Returns an expression for the header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name)__                if (header == null) {_                    _                    header = exchange.getProperty(name)__                }_                return header__            }__            @Override_            public String toString() {_                return "header(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,if,header,null,header,exchange,get,property,name,return,header,override,public,string,to,string,return,header,header,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName);1549967797;Returns an expression for the header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name)__                if (header == null) {_                    _                    header = exchange.getProperty(name)__                }_                return header__            }__            @Override_            public String toString() {_                return "header(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,if,header,null,header,exchange,get,property,name,return,header,override,public,string,to,string,return,header,header,name
ExpressionBuilder -> public static Expression mandatoryBodyExpression(final String name);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression mandatoryBodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,mandatory,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,name
ExpressionBuilder -> public static Expression mandatoryBodyExpression(final String name);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression mandatoryBodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,mandatory,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,name
ExpressionBuilder -> public static Expression mandatoryBodyExpression(final String name);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression mandatoryBodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,mandatory,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,name
ExpressionBuilder -> public static Expression mandatoryBodyExpression(final String name);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression mandatoryBodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,mandatory,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,name
ExpressionBuilder -> public static Expression mandatoryBodyExpression(final String name);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression mandatoryBodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                try {_                    return exchange.getIn().getMandatoryBody(type)__                } catch (InvalidPayloadException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_            }__            @Override_            public String toString() {_                return "mandatoryBodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,mandatory,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,try,return,exchange,get,in,get,mandatory,body,type,catch,invalid,payload,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,override,public,string,to,string,return,mandatory,body,as,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName, final String typeName);1549264559;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param typeName the type to convert to as a FQN class name_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName, final String typeName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Class<?> type__                try {_                    String text = simpleExpression(typeName).evaluate(exchange, String.class)__                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(text, type)__                if (header == null) {_                    _                    header = exchange.getProperty(text, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + typeName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,name,the,type,to,convert,to,as,a,fqn,class,name,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,final,string,type,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,class,type,try,string,text,simple,expression,type,name,evaluate,exchange,string,class,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,string,text,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,text,type,if,header,null,header,exchange,get,property,text,type,return,header,override,public,string,to,string,return,header,as,header,name,type,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName, final String typeName);1549910857;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param typeName the type to convert to as a FQN class name_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName, final String typeName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Class<?> type__                try {_                    String text = simpleExpression(typeName).evaluate(exchange, String.class)__                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(text, type)__                if (header == null) {_                    _                    header = exchange.getProperty(text, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + typeName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,name,the,type,to,convert,to,as,a,fqn,class,name,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,final,string,type,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,class,type,try,string,text,simple,expression,type,name,evaluate,exchange,string,class,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,string,text,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,text,type,if,header,null,header,exchange,get,property,text,type,return,header,override,public,string,to,string,return,header,as,header,name,type,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName, final String typeName);1549911461;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param typeName the type to convert to as a FQN class name_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName, final String typeName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Class<?> type__                try {_                    String text = simpleExpression(typeName).evaluate(exchange, String.class)__                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(text, type)__                if (header == null) {_                    _                    header = exchange.getProperty(text, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + typeName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,name,the,type,to,convert,to,as,a,fqn,class,name,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,final,string,type,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,class,type,try,string,text,simple,expression,type,name,evaluate,exchange,string,class,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,string,text,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,text,type,if,header,null,header,exchange,get,property,text,type,return,header,override,public,string,to,string,return,header,as,header,name,type,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName, final String typeName);1549967332;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param typeName the type to convert to as a FQN class name_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName, final String typeName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Class<?> type__                try {_                    String text = simpleExpression(typeName).evaluate(exchange, String.class)__                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(text, type)__                if (header == null) {_                    _                    header = exchange.getProperty(text, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + typeName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,name,the,type,to,convert,to,as,a,fqn,class,name,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,final,string,type,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,class,type,try,string,text,simple,expression,type,name,evaluate,exchange,string,class,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,string,text,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,text,type,if,header,null,header,exchange,get,property,text,type,return,header,override,public,string,to,string,return,header,as,header,name,type,name
ExpressionBuilder -> public static Expression headerExpression(final String headerName, final String typeName);1549967797;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param typeName the type to convert to as a FQN class name_@return an expression object which will return the header value;public static Expression headerExpression(final String headerName, final String typeName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Class<?> type__                try {_                    String text = simpleExpression(typeName).evaluate(exchange, String.class)__                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(text, type)__                if (header == null) {_                    _                    header = exchange.getProperty(text, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + typeName + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,name,the,type,to,convert,to,as,a,fqn,class,name,return,an,expression,object,which,will,return,the,header,value;public,static,expression,header,expression,final,string,header,name,final,string,type,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,class,type,try,string,text,simple,expression,type,name,evaluate,exchange,string,class,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,string,text,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,text,type,if,header,null,header,exchange,get,property,text,type,return,header,override,public,string,to,string,return,header,as,header,name,type,name
ExpressionBuilder -> public static Expression registryExpression();1549264559;Returns an expression for the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the registry;public static Expression registryExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getRegistry()__            }__            @Override_            public String toString() {_                return "registry"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,registry;public,static,expression,registry,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,registry,override,public,string,to,string,return,registry
ExpressionBuilder -> public static Expression registryExpression();1549910857;Returns an expression for the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the registry;public static Expression registryExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getRegistry()__            }__            @Override_            public String toString() {_                return "registry"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,registry;public,static,expression,registry,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,registry,override,public,string,to,string,return,registry
ExpressionBuilder -> public static Expression registryExpression();1549911461;Returns an expression for the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the registry;public static Expression registryExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getRegistry()__            }__            @Override_            public String toString() {_                return "registry"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,registry;public,static,expression,registry,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,registry,override,public,string,to,string,return,registry
ExpressionBuilder -> public static Expression registryExpression();1549967332;Returns an expression for the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the registry;public static Expression registryExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getRegistry()__            }__            @Override_            public String toString() {_                return "registry"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,registry;public,static,expression,registry,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,registry,override,public,string,to,string,return,registry
ExpressionBuilder -> public static Expression registryExpression();1549967797;Returns an expression for the {@link org.apache.camel.spi.Registry}__@return an expression object which will return the registry;public static Expression registryExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getRegistry()__            }__            @Override_            public String toString() {_                return "registry"__            }_        }__    };returns,an,expression,for,the,link,org,apache,camel,spi,registry,return,an,expression,object,which,will,return,the,registry;public,static,expression,registry,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,registry,override,public,string,to,string,return,registry
ExpressionBuilder -> public static Expression headersOgnlExpression(final String ognl);1549264559;Returns the expression for the exchanges inbound message header invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the header in a simple OGNL syntax;public static Expression headersOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "headerOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getIn().getHeader(text)__                }_            })__    };returns,the,expression,for,the,exchanges,inbound,message,header,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,header,in,a,simple,ognl,syntax;public,static,expression,headers,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,header,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,in,get,header,text
ExpressionBuilder -> public static Expression headersOgnlExpression(final String ognl);1549910857;Returns the expression for the exchanges inbound message header invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the header in a simple OGNL syntax;public static Expression headersOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "headerOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getIn().getHeader(text)__                }_            })__    };returns,the,expression,for,the,exchanges,inbound,message,header,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,header,in,a,simple,ognl,syntax;public,static,expression,headers,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,header,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,in,get,header,text
ExpressionBuilder -> public static Expression headersOgnlExpression(final String ognl);1549911461;Returns the expression for the exchanges inbound message header invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the header in a simple OGNL syntax;public static Expression headersOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "headerOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getIn().getHeader(text)__                }_            })__    };returns,the,expression,for,the,exchanges,inbound,message,header,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,header,in,a,simple,ognl,syntax;public,static,expression,headers,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,header,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,in,get,header,text
ExpressionBuilder -> public static Expression headersOgnlExpression(final String ognl);1549967332;Returns the expression for the exchanges inbound message header invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the header in a simple OGNL syntax;public static Expression headersOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "headerOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getIn().getHeader(text)__                }_            })__    };returns,the,expression,for,the,exchanges,inbound,message,header,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,header,in,a,simple,ognl,syntax;public,static,expression,headers,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,header,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,in,get,header,text
ExpressionBuilder -> public static Expression headersOgnlExpression(final String ognl);1549967797;Returns the expression for the exchanges inbound message header invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the header in a simple OGNL syntax;public static Expression headersOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "headerOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getIn().getHeader(text)__                }_            })__    };returns,the,expression,for,the,exchanges,inbound,message,header,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,header,in,a,simple,ognl,syntax;public,static,expression,headers,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,header,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,in,get,header,text
ExpressionBuilder -> public static Expression inMessageExpression();1549264559;Returns the expression for the IN message;public static Expression inMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn()__            }__            @Override_            public String toString() {_                return "inMessage"__            }_        }__    };returns,the,expression,for,the,in,message;public,static,expression,in,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,override,public,string,to,string,return,in,message
ExpressionBuilder -> public static Expression inMessageExpression();1549910857;Returns the expression for the IN message;public static Expression inMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn()__            }__            @Override_            public String toString() {_                return "inMessage"__            }_        }__    };returns,the,expression,for,the,in,message;public,static,expression,in,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,override,public,string,to,string,return,in,message
ExpressionBuilder -> public static Expression inMessageExpression();1549911461;Returns the expression for the IN message;public static Expression inMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn()__            }__            @Override_            public String toString() {_                return "inMessage"__            }_        }__    };returns,the,expression,for,the,in,message;public,static,expression,in,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,override,public,string,to,string,return,in,message
ExpressionBuilder -> public static Expression inMessageExpression();1549967332;Returns the expression for the IN message;public static Expression inMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn()__            }__            @Override_            public String toString() {_                return "inMessage"__            }_        }__    };returns,the,expression,for,the,in,message;public,static,expression,in,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,override,public,string,to,string,return,in,message
ExpressionBuilder -> public static Expression inMessageExpression();1549967797;Returns the expression for the IN message;public static Expression inMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn()__            }__            @Override_            public String toString() {_                return "inMessage"__            }_        }__    };returns,the,expression,for,the,in,message;public,static,expression,in,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,override,public,string,to,string,return,in,message
ExpressionBuilder -> private ExpressionBuilder();1549264559;Utility classes should not have a public constructor.;private ExpressionBuilder() {_    };utility,classes,should,not,have,a,public,constructor;private,expression,builder
ExpressionBuilder -> private ExpressionBuilder();1549910857;Utility classes should not have a public constructor.;private ExpressionBuilder() {_    };utility,classes,should,not,have,a,public,constructor;private,expression,builder
ExpressionBuilder -> private ExpressionBuilder();1549911461;Utility classes should not have a public constructor.;private ExpressionBuilder() {_    };utility,classes,should,not,have,a,public,constructor;private,expression,builder
ExpressionBuilder -> private ExpressionBuilder();1549967332;Utility classes should not have a public constructor.;private ExpressionBuilder() {_    };utility,classes,should,not,have,a,public,constructor;private,expression,builder
ExpressionBuilder -> private ExpressionBuilder();1549967797;Utility classes should not have a public constructor.;private ExpressionBuilder() {_    };utility,classes,should,not,have,a,public,constructor;private,expression,builder
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String ognl);1549264559;Returns the expression for the exchanges inbound message body invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression bodyOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                if (body == null) {_                    return null__                }_                _                _                return new MethodCallExpression(body, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "bodyOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,body,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,null,return,new,method,call,expression,body,ognl,evaluate,exchange,override,public,string,to,string,return,body,ognl,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String ognl);1549910857;Returns the expression for the exchanges inbound message body invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression bodyOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                if (body == null) {_                    return null__                }_                _                _                return new MethodCallExpression(body, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "bodyOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,body,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,null,return,new,method,call,expression,body,ognl,evaluate,exchange,override,public,string,to,string,return,body,ognl,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String ognl);1549911461;Returns the expression for the exchanges inbound message body invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression bodyOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                if (body == null) {_                    return null__                }_                _                _                return new MethodCallExpression(body, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "bodyOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,body,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,null,return,new,method,call,expression,body,ognl,evaluate,exchange,override,public,string,to,string,return,body,ognl,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String ognl);1549967332;Returns the expression for the exchanges inbound message body invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression bodyOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                if (body == null) {_                    return null__                }_                _                _                return new MethodCallExpression(body, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "bodyOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,body,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,null,return,new,method,call,expression,body,ognl,evaluate,exchange,override,public,string,to,string,return,body,ognl,ognl
ExpressionBuilder -> public static Expression bodyOgnlExpression(final String ognl);1549967797;Returns the expression for the exchanges inbound message body invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression bodyOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object body = exchange.getIn().getBody()__                if (body == null) {_                    return null__                }_                _                _                return new MethodCallExpression(body, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "bodyOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,body,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,body,exchange,get,in,get,body,if,body,null,return,null,return,new,method,call,expression,body,ognl,evaluate,exchange,override,public,string,to,string,return,body,ognl,ognl
ExpressionBuilder -> public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens);1549264559;Returns an {@link TokenPairExpressionIterator} expression;public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens) {_        return new TokenPairExpressionIterator(startToken, endToken, includeTokens)__    };returns,an,link,token,pair,expression,iterator,expression;public,static,expression,tokenize,pair,expression,string,start,token,string,end,token,boolean,include,tokens,return,new,token,pair,expression,iterator,start,token,end,token,include,tokens
ExpressionBuilder -> public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens);1549910857;Returns an {@link TokenPairExpressionIterator} expression;public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens) {_        return new TokenPairExpressionIterator(startToken, endToken, includeTokens)__    };returns,an,link,token,pair,expression,iterator,expression;public,static,expression,tokenize,pair,expression,string,start,token,string,end,token,boolean,include,tokens,return,new,token,pair,expression,iterator,start,token,end,token,include,tokens
ExpressionBuilder -> public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens);1549911461;Returns an {@link TokenPairExpressionIterator} expression;public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens) {_        return new TokenPairExpressionIterator(startToken, endToken, includeTokens)__    };returns,an,link,token,pair,expression,iterator,expression;public,static,expression,tokenize,pair,expression,string,start,token,string,end,token,boolean,include,tokens,return,new,token,pair,expression,iterator,start,token,end,token,include,tokens
ExpressionBuilder -> public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens);1549967332;Returns an {@link TokenPairExpressionIterator} expression;public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens) {_        return new TokenPairExpressionIterator(startToken, endToken, includeTokens)__    };returns,an,link,token,pair,expression,iterator,expression;public,static,expression,tokenize,pair,expression,string,start,token,string,end,token,boolean,include,tokens,return,new,token,pair,expression,iterator,start,token,end,token,include,tokens
ExpressionBuilder -> public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens);1549967797;Returns an {@link TokenPairExpressionIterator} expression;public static Expression tokenizePairExpression(String startToken, String endToken, boolean includeTokens) {_        return new TokenPairExpressionIterator(startToken, endToken, includeTokens)__    };returns,an,link,token,pair,expression,iterator,expression;public,static,expression,tokenize,pair,expression,string,start,token,string,end,token,boolean,include,tokens,return,new,token,pair,expression,iterator,start,token,end,token,include,tokens
ExpressionBuilder -> @SuppressWarnings({"unchecked", "rawtypes"})     public static Expression sortExpression(final Expression expression, final Comparator comparator);1549264559;Returns a sort expression which will sort the expression with the given comparator._<p/>_The expression is evaluated as a {@link List} object to allow sorting.;@SuppressWarnings({"unchecked", "rawtypes"})_    public static Expression sortExpression(final Expression expression, final Comparator comparator) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                List<?> list = expression.evaluate(exchange, List.class)__                list.sort(comparator)__                return list__            }__            @Override_            public String toString() {_                return "sort(" + expression + " by: " + comparator + ")"__            }_        }__    };returns,a,sort,expression,which,will,sort,the,expression,with,the,given,comparator,p,the,expression,is,evaluated,as,a,link,list,object,to,allow,sorting;suppress,warnings,unchecked,rawtypes,public,static,expression,sort,expression,final,expression,expression,final,comparator,comparator,return,new,expression,adapter,public,object,evaluate,exchange,exchange,list,list,expression,evaluate,exchange,list,class,list,sort,comparator,return,list,override,public,string,to,string,return,sort,expression,by,comparator
ExpressionBuilder -> @SuppressWarnings({"unchecked", "rawtypes"})     public static Expression sortExpression(final Expression expression, final Comparator comparator);1549910857;Returns a sort expression which will sort the expression with the given comparator._<p/>_The expression is evaluated as a {@link List} object to allow sorting.;@SuppressWarnings({"unchecked", "rawtypes"})_    public static Expression sortExpression(final Expression expression, final Comparator comparator) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                List<?> list = expression.evaluate(exchange, List.class)__                list.sort(comparator)__                return list__            }__            @Override_            public String toString() {_                return "sort(" + expression + " by: " + comparator + ")"__            }_        }__    };returns,a,sort,expression,which,will,sort,the,expression,with,the,given,comparator,p,the,expression,is,evaluated,as,a,link,list,object,to,allow,sorting;suppress,warnings,unchecked,rawtypes,public,static,expression,sort,expression,final,expression,expression,final,comparator,comparator,return,new,expression,adapter,public,object,evaluate,exchange,exchange,list,list,expression,evaluate,exchange,list,class,list,sort,comparator,return,list,override,public,string,to,string,return,sort,expression,by,comparator
ExpressionBuilder -> @SuppressWarnings({"unchecked", "rawtypes"})     public static Expression sortExpression(final Expression expression, final Comparator comparator);1549911461;Returns a sort expression which will sort the expression with the given comparator._<p/>_The expression is evaluated as a {@link List} object to allow sorting.;@SuppressWarnings({"unchecked", "rawtypes"})_    public static Expression sortExpression(final Expression expression, final Comparator comparator) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                List<?> list = expression.evaluate(exchange, List.class)__                list.sort(comparator)__                return list__            }__            @Override_            public String toString() {_                return "sort(" + expression + " by: " + comparator + ")"__            }_        }__    };returns,a,sort,expression,which,will,sort,the,expression,with,the,given,comparator,p,the,expression,is,evaluated,as,a,link,list,object,to,allow,sorting;suppress,warnings,unchecked,rawtypes,public,static,expression,sort,expression,final,expression,expression,final,comparator,comparator,return,new,expression,adapter,public,object,evaluate,exchange,exchange,list,list,expression,evaluate,exchange,list,class,list,sort,comparator,return,list,override,public,string,to,string,return,sort,expression,by,comparator
ExpressionBuilder -> @SuppressWarnings({"unchecked", "rawtypes"})     public static Expression sortExpression(final Expression expression, final Comparator comparator);1549967332;Returns a sort expression which will sort the expression with the given comparator._<p/>_The expression is evaluated as a {@link List} object to allow sorting.;@SuppressWarnings({"unchecked", "rawtypes"})_    public static Expression sortExpression(final Expression expression, final Comparator comparator) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                List<?> list = expression.evaluate(exchange, List.class)__                list.sort(comparator)__                return list__            }__            @Override_            public String toString() {_                return "sort(" + expression + " by: " + comparator + ")"__            }_        }__    };returns,a,sort,expression,which,will,sort,the,expression,with,the,given,comparator,p,the,expression,is,evaluated,as,a,link,list,object,to,allow,sorting;suppress,warnings,unchecked,rawtypes,public,static,expression,sort,expression,final,expression,expression,final,comparator,comparator,return,new,expression,adapter,public,object,evaluate,exchange,exchange,list,list,expression,evaluate,exchange,list,class,list,sort,comparator,return,list,override,public,string,to,string,return,sort,expression,by,comparator
ExpressionBuilder -> @SuppressWarnings({"unchecked", "rawtypes"})     public static Expression sortExpression(final Expression expression, final Comparator comparator);1549967797;Returns a sort expression which will sort the expression with the given comparator._<p/>_The expression is evaluated as a {@link List} object to allow sorting.;@SuppressWarnings({"unchecked", "rawtypes"})_    public static Expression sortExpression(final Expression expression, final Comparator comparator) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                List<?> list = expression.evaluate(exchange, List.class)__                list.sort(comparator)__                return list__            }__            @Override_            public String toString() {_                return "sort(" + expression + " by: " + comparator + ")"__            }_        }__    };returns,a,sort,expression,which,will,sort,the,expression,with,the,given,comparator,p,the,expression,is,evaluated,as,a,link,list,object,to,allow,sorting;suppress,warnings,unchecked,rawtypes,public,static,expression,sort,expression,final,expression,expression,final,comparator,comparator,return,new,expression,adapter,public,object,evaluate,exchange,exchange,list,list,expression,evaluate,exchange,list,class,list,sort,comparator,return,list,override,public,string,to,string,return,sort,expression,by,comparator
ExpressionBuilder -> public static Expression attachmentValuesExpression();1549264559;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments().values()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,values,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentValuesExpression();1549910857;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments().values()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,values,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentValuesExpression();1549911461;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments().values()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,values,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentValuesExpression();1549967332;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments().values()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,values,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static Expression attachmentValuesExpression();1549967797;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachments().values()__            }__            @Override_            public String toString() {_                return "attachments"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachments,values,override,public,string,to,string,return,attachments
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> type);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type;public static <T> Expression bodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,t,expression,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> type);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type;public static <T> Expression bodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,t,expression,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> type);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type;public static <T> Expression bodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,t,expression,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> type);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type;public static <T> Expression bodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,t,expression,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> type);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type;public static <T> Expression bodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,t,expression,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,type,get,name
ExpressionBuilder -> public static Expression outHeaderExpression(final String headerName);1549264559;Returns an expression for the out header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression outHeaderExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (!exchange.hasOut()) {_                    return null__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Message out = exchange.getOut()__                Object header = out.getHeader(text)__                if (header == null) {_                    _                    header = exchange.getProperty(text)__                }_                return header__            }__            @Override_            public String toString() {_                return "outHeader(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,out,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,out,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,null,string,text,simple,expression,header,name,evaluate,exchange,string,class,message,out,exchange,get,out,object,header,out,get,header,text,if,header,null,header,exchange,get,property,text,return,header,override,public,string,to,string,return,out,header,header,name
ExpressionBuilder -> public static Expression outHeaderExpression(final String headerName);1549910857;Returns an expression for the out header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression outHeaderExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (!exchange.hasOut()) {_                    return null__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Message out = exchange.getOut()__                Object header = out.getHeader(text)__                if (header == null) {_                    _                    header = exchange.getProperty(text)__                }_                return header__            }__            @Override_            public String toString() {_                return "outHeader(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,out,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,out,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,null,string,text,simple,expression,header,name,evaluate,exchange,string,class,message,out,exchange,get,out,object,header,out,get,header,text,if,header,null,header,exchange,get,property,text,return,header,override,public,string,to,string,return,out,header,header,name
ExpressionBuilder -> public static Expression outHeaderExpression(final String headerName);1549911461;Returns an expression for the out header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression outHeaderExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (!exchange.hasOut()) {_                    return null__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Message out = exchange.getOut()__                Object header = out.getHeader(text)__                if (header == null) {_                    _                    header = exchange.getProperty(text)__                }_                return header__            }__            @Override_            public String toString() {_                return "outHeader(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,out,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,out,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,null,string,text,simple,expression,header,name,evaluate,exchange,string,class,message,out,exchange,get,out,object,header,out,get,header,text,if,header,null,header,exchange,get,property,text,return,header,override,public,string,to,string,return,out,header,header,name
ExpressionBuilder -> public static Expression outHeaderExpression(final String headerName);1549967332;Returns an expression for the out header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression outHeaderExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (!exchange.hasOut()) {_                    return null__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Message out = exchange.getOut()__                Object header = out.getHeader(text)__                if (header == null) {_                    _                    header = exchange.getProperty(text)__                }_                return header__            }__            @Override_            public String toString() {_                return "outHeader(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,out,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,out,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,null,string,text,simple,expression,header,name,evaluate,exchange,string,class,message,out,exchange,get,out,object,header,out,get,header,text,if,header,null,header,exchange,get,property,text,return,header,override,public,string,to,string,return,out,header,header,name
ExpressionBuilder -> public static Expression outHeaderExpression(final String headerName);1549967797;Returns an expression for the out header value with the given name_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@return an expression object which will return the header value;public static Expression outHeaderExpression(final String headerName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (!exchange.hasOut()) {_                    return null__                }__                String text = simpleExpression(headerName).evaluate(exchange, String.class)__                Message out = exchange.getOut()__                Object header = out.getHeader(text)__                if (header == null) {_                    _                    header = exchange.getProperty(text)__                }_                return header__            }__            @Override_            public String toString() {_                return "outHeader(" + headerName + ")"__            }_        }__    };returns,an,expression,for,the,out,header,value,with,the,given,name,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,return,an,expression,object,which,will,return,the,header,value;public,static,expression,out,header,expression,final,string,header,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,exchange,has,out,return,null,string,text,simple,expression,header,name,evaluate,exchange,string,class,message,out,exchange,get,out,object,header,out,get,header,text,if,header,null,header,exchange,get,property,text,return,header,override,public,string,to,string,return,out,header,header,name
ExpressionBuilder -> public static Expression exchangePatternExpression();1549264559;Returns an expression for the exchange pattern__@see org.apache.camel.Exchange#getPattern()_@return an expression object which will return the exchange pattern;public static Expression exchangePatternExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getPattern()__            }__            @Override_            public String toString() {_                return "exchangePattern"__            }_        }__    };returns,an,expression,for,the,exchange,pattern,see,org,apache,camel,exchange,get,pattern,return,an,expression,object,which,will,return,the,exchange,pattern;public,static,expression,exchange,pattern,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,pattern,override,public,string,to,string,return,exchange,pattern
ExpressionBuilder -> public static Expression exchangePatternExpression();1549910857;Returns an expression for the exchange pattern__@see org.apache.camel.Exchange#getPattern()_@return an expression object which will return the exchange pattern;public static Expression exchangePatternExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getPattern()__            }__            @Override_            public String toString() {_                return "exchangePattern"__            }_        }__    };returns,an,expression,for,the,exchange,pattern,see,org,apache,camel,exchange,get,pattern,return,an,expression,object,which,will,return,the,exchange,pattern;public,static,expression,exchange,pattern,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,pattern,override,public,string,to,string,return,exchange,pattern
ExpressionBuilder -> public static Expression exchangePatternExpression();1549911461;Returns an expression for the exchange pattern__@see org.apache.camel.Exchange#getPattern()_@return an expression object which will return the exchange pattern;public static Expression exchangePatternExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getPattern()__            }__            @Override_            public String toString() {_                return "exchangePattern"__            }_        }__    };returns,an,expression,for,the,exchange,pattern,see,org,apache,camel,exchange,get,pattern,return,an,expression,object,which,will,return,the,exchange,pattern;public,static,expression,exchange,pattern,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,pattern,override,public,string,to,string,return,exchange,pattern
ExpressionBuilder -> public static Expression exchangePatternExpression();1549967332;Returns an expression for the exchange pattern__@see org.apache.camel.Exchange#getPattern()_@return an expression object which will return the exchange pattern;public static Expression exchangePatternExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getPattern()__            }__            @Override_            public String toString() {_                return "exchangePattern"__            }_        }__    };returns,an,expression,for,the,exchange,pattern,see,org,apache,camel,exchange,get,pattern,return,an,expression,object,which,will,return,the,exchange,pattern;public,static,expression,exchange,pattern,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,pattern,override,public,string,to,string,return,exchange,pattern
ExpressionBuilder -> public static Expression exchangePatternExpression();1549967797;Returns an expression for the exchange pattern__@see org.apache.camel.Exchange#getPattern()_@return an expression object which will return the exchange pattern;public static Expression exchangePatternExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getPattern()__            }__            @Override_            public String toString() {_                return "exchangePattern"__            }_        }__    };returns,an,expression,for,the,exchange,pattern,see,org,apache,camel,exchange,get,pattern,return,an,expression,object,which,will,return,the,exchange,pattern;public,static,expression,exchange,pattern,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,pattern,override,public,string,to,string,return,exchange,pattern
ExpressionBuilder -> public static Expression exchangeExpression();1549264559;Returns the expression for the exchange;public static Expression exchangeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange__            }__            @Override_            public String toString() {_                return "exchange"__            }_        }__    };returns,the,expression,for,the,exchange;public,static,expression,exchange,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,override,public,string,to,string,return,exchange
ExpressionBuilder -> public static Expression exchangeExpression();1549910857;Returns the expression for the exchange;public static Expression exchangeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange__            }__            @Override_            public String toString() {_                return "exchange"__            }_        }__    };returns,the,expression,for,the,exchange;public,static,expression,exchange,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,override,public,string,to,string,return,exchange
ExpressionBuilder -> public static Expression exchangeExpression();1549911461;Returns the expression for the exchange;public static Expression exchangeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange__            }__            @Override_            public String toString() {_                return "exchange"__            }_        }__    };returns,the,expression,for,the,exchange;public,static,expression,exchange,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,override,public,string,to,string,return,exchange
ExpressionBuilder -> public static Expression exchangeExpression();1549967332;Returns the expression for the exchange;public static Expression exchangeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange__            }__            @Override_            public String toString() {_                return "exchange"__            }_        }__    };returns,the,expression,for,the,exchange;public,static,expression,exchange,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,override,public,string,to,string,return,exchange
ExpressionBuilder -> public static Expression exchangeExpression();1549967797;Returns the expression for the exchange;public static Expression exchangeExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange__            }__            @Override_            public String toString() {_                return "exchange"__            }_        }__    };returns,the,expression,for,the,exchange;public,static,expression,exchange,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,override,public,string,to,string,return,exchange
ExpressionBuilder -> public static Expression skipFirstExpression(final Expression expression);1549264559;Returns an expression that skips the first element;public static Expression skipFirstExpression(final Expression expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Iterator it = exchange.getContext().getTypeConverter().tryConvertTo(Iterator.class, exchange, value)__                if (it != null) {_                    _                    it.next()__                    return it__                } else {_                    return value__                }_            }__            @Override_            public String toString() {_                return "skipFirst(" + expression + ")"__            }_        }__    };returns,an,expression,that,skips,the,first,element;public,static,expression,skip,first,expression,final,expression,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,iterator,it,exchange,get,context,get,type,converter,try,convert,to,iterator,class,exchange,value,if,it,null,it,next,return,it,else,return,value,override,public,string,to,string,return,skip,first,expression
ExpressionBuilder -> public static Expression skipFirstExpression(final Expression expression);1549910857;Returns an expression that skips the first element;public static Expression skipFirstExpression(final Expression expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Iterator it = exchange.getContext().getTypeConverter().tryConvertTo(Iterator.class, exchange, value)__                if (it != null) {_                    _                    it.next()__                    return it__                } else {_                    return value__                }_            }__            @Override_            public String toString() {_                return "skipFirst(" + expression + ")"__            }_        }__    };returns,an,expression,that,skips,the,first,element;public,static,expression,skip,first,expression,final,expression,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,iterator,it,exchange,get,context,get,type,converter,try,convert,to,iterator,class,exchange,value,if,it,null,it,next,return,it,else,return,value,override,public,string,to,string,return,skip,first,expression
ExpressionBuilder -> public static Expression skipFirstExpression(final Expression expression);1549911461;Returns an expression that skips the first element;public static Expression skipFirstExpression(final Expression expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Iterator it = exchange.getContext().getTypeConverter().tryConvertTo(Iterator.class, exchange, value)__                if (it != null) {_                    _                    it.next()__                    return it__                } else {_                    return value__                }_            }__            @Override_            public String toString() {_                return "skipFirst(" + expression + ")"__            }_        }__    };returns,an,expression,that,skips,the,first,element;public,static,expression,skip,first,expression,final,expression,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,iterator,it,exchange,get,context,get,type,converter,try,convert,to,iterator,class,exchange,value,if,it,null,it,next,return,it,else,return,value,override,public,string,to,string,return,skip,first,expression
ExpressionBuilder -> public static Expression skipFirstExpression(final Expression expression);1549967332;Returns an expression that skips the first element;public static Expression skipFirstExpression(final Expression expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Iterator it = exchange.getContext().getTypeConverter().tryConvertTo(Iterator.class, exchange, value)__                if (it != null) {_                    _                    it.next()__                    return it__                } else {_                    return value__                }_            }__            @Override_            public String toString() {_                return "skipFirst(" + expression + ")"__            }_        }__    };returns,an,expression,that,skips,the,first,element;public,static,expression,skip,first,expression,final,expression,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,iterator,it,exchange,get,context,get,type,converter,try,convert,to,iterator,class,exchange,value,if,it,null,it,next,return,it,else,return,value,override,public,string,to,string,return,skip,first,expression
ExpressionBuilder -> public static Expression skipFirstExpression(final Expression expression);1549967797;Returns an expression that skips the first element;public static Expression skipFirstExpression(final Expression expression) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object value = expression.evaluate(exchange, Object.class)__                Iterator it = exchange.getContext().getTypeConverter().tryConvertTo(Iterator.class, exchange, value)__                if (it != null) {_                    _                    it.next()__                    return it__                } else {_                    return value__                }_            }__            @Override_            public String toString() {_                return "skipFirst(" + expression + ")"__            }_        }__    };returns,an,expression,that,skips,the,first,element;public,static,expression,skip,first,expression,final,expression,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,value,expression,evaluate,exchange,object,class,iterator,it,exchange,get,context,get,type,converter,try,convert,to,iterator,class,exchange,value,if,it,null,it,next,return,it,else,return,value,override,public,string,to,string,return,skip,first,expression
ExpressionBuilder -> public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext);1549264559;Returns Simple expression or fallback to Constant expression if expression str is not Simple expression.;public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext) {_        if (StringHelper.hasStartToken(str, "simple")) {_            return camelContext.resolveLanguage("simple").createExpression(str)__        }_        return constantExpression(str)__    };returns,simple,expression,or,fallback,to,constant,expression,if,expression,str,is,not,simple,expression;public,static,expression,parse,simple,or,fallback,to,constant,expression,string,str,camel,context,camel,context,if,string,helper,has,start,token,str,simple,return,camel,context,resolve,language,simple,create,expression,str,return,constant,expression,str
ExpressionBuilder -> public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext);1549910857;Returns Simple expression or fallback to Constant expression if expression str is not Simple expression.;public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext) {_        if (StringHelper.hasStartToken(str, "simple")) {_            return camelContext.resolveLanguage("simple").createExpression(str)__        }_        return constantExpression(str)__    };returns,simple,expression,or,fallback,to,constant,expression,if,expression,str,is,not,simple,expression;public,static,expression,parse,simple,or,fallback,to,constant,expression,string,str,camel,context,camel,context,if,string,helper,has,start,token,str,simple,return,camel,context,resolve,language,simple,create,expression,str,return,constant,expression,str
ExpressionBuilder -> public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext);1549911461;Returns Simple expression or fallback to Constant expression if expression str is not Simple expression.;public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext) {_        if (StringHelper.hasStartToken(str, "simple")) {_            return camelContext.resolveLanguage("simple").createExpression(str)__        }_        return constantExpression(str)__    };returns,simple,expression,or,fallback,to,constant,expression,if,expression,str,is,not,simple,expression;public,static,expression,parse,simple,or,fallback,to,constant,expression,string,str,camel,context,camel,context,if,string,helper,has,start,token,str,simple,return,camel,context,resolve,language,simple,create,expression,str,return,constant,expression,str
ExpressionBuilder -> public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext);1549967332;Returns Simple expression or fallback to Constant expression if expression str is not Simple expression.;public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext) {_        if (StringHelper.hasStartToken(str, "simple")) {_            return camelContext.resolveLanguage("simple").createExpression(str)__        }_        return constantExpression(str)__    };returns,simple,expression,or,fallback,to,constant,expression,if,expression,str,is,not,simple,expression;public,static,expression,parse,simple,or,fallback,to,constant,expression,string,str,camel,context,camel,context,if,string,helper,has,start,token,str,simple,return,camel,context,resolve,language,simple,create,expression,str,return,constant,expression,str
ExpressionBuilder -> public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext);1549967797;Returns Simple expression or fallback to Constant expression if expression str is not Simple expression.;public static Expression parseSimpleOrFallbackToConstantExpression(String str, CamelContext camelContext) {_        if (StringHelper.hasStartToken(str, "simple")) {_            return camelContext.resolveLanguage("simple").createExpression(str)__        }_        return constantExpression(str)__    };returns,simple,expression,or,fallback,to,constant,expression,if,expression,str,is,not,simple,expression;public,static,expression,parse,simple,or,fallback,to,constant,expression,string,str,camel,context,camel,context,if,string,helper,has,start,token,str,simple,return,camel,context,resolve,language,simple,create,expression,str,return,constant,expression,str
ExpressionBuilder -> public static Expression attachmentObjectsExpression();1549264559;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,objects,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectsExpression();1549910857;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,objects,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectsExpression();1549911461;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,objects,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectsExpression();1549967332;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,objects,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectsExpression();1549967797;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectsExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,objects,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression skipExpression(final String expression, final int number);1549264559;Returns an iterator to skip (iterate) the given expression;public static Expression skipExpression(final String expression, final int number) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.skipIteratorExpression(exp, number).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "skip(" + expression + "," + number + ")"__            }_        }__    };returns,an,iterator,to,skip,iterate,the,given,expression;public,static,expression,skip,expression,final,string,expression,final,int,number,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,skip,iterator,expression,exp,number,evaluate,exchange,object,class,override,public,string,to,string,return,skip,expression,number
ExpressionBuilder -> public static Expression skipExpression(final String expression, final int number);1549910857;Returns an iterator to skip (iterate) the given expression;public static Expression skipExpression(final String expression, final int number) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.skipIteratorExpression(exp, number).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "skip(" + expression + "," + number + ")"__            }_        }__    };returns,an,iterator,to,skip,iterate,the,given,expression;public,static,expression,skip,expression,final,string,expression,final,int,number,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,skip,iterator,expression,exp,number,evaluate,exchange,object,class,override,public,string,to,string,return,skip,expression,number
ExpressionBuilder -> public static Expression skipExpression(final String expression, final int number);1549911461;Returns an iterator to skip (iterate) the given expression;public static Expression skipExpression(final String expression, final int number) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.skipIteratorExpression(exp, number).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "skip(" + expression + "," + number + ")"__            }_        }__    };returns,an,iterator,to,skip,iterate,the,given,expression;public,static,expression,skip,expression,final,string,expression,final,int,number,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,skip,iterator,expression,exp,number,evaluate,exchange,object,class,override,public,string,to,string,return,skip,expression,number
ExpressionBuilder -> public static Expression skipExpression(final String expression, final int number);1549967332;Returns an iterator to skip (iterate) the given expression;public static Expression skipExpression(final String expression, final int number) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.skipIteratorExpression(exp, number).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "skip(" + expression + "," + number + ")"__            }_        }__    };returns,an,iterator,to,skip,iterate,the,given,expression;public,static,expression,skip,expression,final,string,expression,final,int,number,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,skip,iterator,expression,exp,number,evaluate,exchange,object,class,override,public,string,to,string,return,skip,expression,number
ExpressionBuilder -> public static Expression skipExpression(final String expression, final int number);1549967797;Returns an iterator to skip (iterate) the given expression;public static Expression skipExpression(final String expression, final int number) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                _                Expression exp = exchange.getContext().resolveLanguage("simple").createExpression(expression)__                return ExpressionBuilder.skipIteratorExpression(exp, number).evaluate(exchange, Object.class)__            }__            @Override_            public String toString() {_                return "skip(" + expression + "," + number + ")"__            }_        }__    };returns,an,iterator,to,skip,iterate,the,given,expression;public,static,expression,skip,expression,final,string,expression,final,int,number,return,new,expression,adapter,public,object,evaluate,exchange,exchange,expression,exp,exchange,get,context,resolve,language,simple,create,expression,expression,return,expression,builder,skip,iterator,expression,exp,number,evaluate,exchange,object,class,override,public,string,to,string,return,skip,expression,number
ExpressionBuilder -> public static Expression exchangePropertiesExpression();1549264559;Returns an expression for the exchange properties of exchange__@return an expression object which will return the exchange properties;public static Expression exchangePropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getProperties()__            }__            @Override_            public String toString() {_                return "exchangeProperties"__            }_        }__    };returns,an,expression,for,the,exchange,properties,of,exchange,return,an,expression,object,which,will,return,the,exchange,properties;public,static,expression,exchange,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,properties,override,public,string,to,string,return,exchange,properties
ExpressionBuilder -> public static Expression exchangePropertiesExpression();1549910857;Returns an expression for the exchange properties of exchange__@return an expression object which will return the exchange properties;public static Expression exchangePropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getProperties()__            }__            @Override_            public String toString() {_                return "exchangeProperties"__            }_        }__    };returns,an,expression,for,the,exchange,properties,of,exchange,return,an,expression,object,which,will,return,the,exchange,properties;public,static,expression,exchange,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,properties,override,public,string,to,string,return,exchange,properties
ExpressionBuilder -> public static Expression exchangePropertiesExpression();1549911461;Returns an expression for the exchange properties of exchange__@return an expression object which will return the exchange properties;public static Expression exchangePropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getProperties()__            }__            @Override_            public String toString() {_                return "exchangeProperties"__            }_        }__    };returns,an,expression,for,the,exchange,properties,of,exchange,return,an,expression,object,which,will,return,the,exchange,properties;public,static,expression,exchange,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,properties,override,public,string,to,string,return,exchange,properties
ExpressionBuilder -> public static Expression exchangePropertiesExpression();1549967332;Returns an expression for the exchange properties of exchange__@return an expression object which will return the exchange properties;public static Expression exchangePropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getProperties()__            }__            @Override_            public String toString() {_                return "exchangeProperties"__            }_        }__    };returns,an,expression,for,the,exchange,properties,of,exchange,return,an,expression,object,which,will,return,the,exchange,properties;public,static,expression,exchange,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,properties,override,public,string,to,string,return,exchange,properties
ExpressionBuilder -> public static Expression exchangePropertiesExpression();1549967797;Returns an expression for the exchange properties of exchange__@return an expression object which will return the exchange properties;public static Expression exchangePropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getProperties()__            }__            @Override_            public String toString() {_                return "exchangeProperties"__            }_        }__    };returns,an,expression,for,the,exchange,properties,of,exchange,return,an,expression,object,which,will,return,the,exchange,properties;public,static,expression,exchange,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,properties,override,public,string,to,string,return,exchange,properties
ExpressionBuilder -> public static Expression cacheExpression(final Expression expression);1549264559;Returns an expression that caches the evaluation of another expression_and returns the cached value, to avoid re-evaluating the expression.__@param expression  the target expression to cache_@return the cached value;public static Expression cacheExpression(final Expression expression) {_        return new ExpressionAdapter() {_            private final AtomicReference<Object> cache = new AtomicReference<>()___            public Object evaluate(Exchange exchange) {_                Object answer = cache.get()__                if (answer == null) {_                    answer = expression.evaluate(exchange, Object.class)__                    cache.set(answer)__                }_                return answer__            }__            @Override_            public String toString() {_                return expression.toString()__            }_        }__    };returns,an,expression,that,caches,the,evaluation,of,another,expression,and,returns,the,cached,value,to,avoid,re,evaluating,the,expression,param,expression,the,target,expression,to,cache,return,the,cached,value;public,static,expression,cache,expression,final,expression,expression,return,new,expression,adapter,private,final,atomic,reference,object,cache,new,atomic,reference,public,object,evaluate,exchange,exchange,object,answer,cache,get,if,answer,null,answer,expression,evaluate,exchange,object,class,cache,set,answer,return,answer,override,public,string,to,string,return,expression,to,string
ExpressionBuilder -> public static Expression cacheExpression(final Expression expression);1549910857;Returns an expression that caches the evaluation of another expression_and returns the cached value, to avoid re-evaluating the expression.__@param expression  the target expression to cache_@return the cached value;public static Expression cacheExpression(final Expression expression) {_        return new ExpressionAdapter() {_            private final AtomicReference<Object> cache = new AtomicReference<>()___            public Object evaluate(Exchange exchange) {_                Object answer = cache.get()__                if (answer == null) {_                    answer = expression.evaluate(exchange, Object.class)__                    cache.set(answer)__                }_                return answer__            }__            @Override_            public String toString() {_                return expression.toString()__            }_        }__    };returns,an,expression,that,caches,the,evaluation,of,another,expression,and,returns,the,cached,value,to,avoid,re,evaluating,the,expression,param,expression,the,target,expression,to,cache,return,the,cached,value;public,static,expression,cache,expression,final,expression,expression,return,new,expression,adapter,private,final,atomic,reference,object,cache,new,atomic,reference,public,object,evaluate,exchange,exchange,object,answer,cache,get,if,answer,null,answer,expression,evaluate,exchange,object,class,cache,set,answer,return,answer,override,public,string,to,string,return,expression,to,string
ExpressionBuilder -> public static Expression cacheExpression(final Expression expression);1549911461;Returns an expression that caches the evaluation of another expression_and returns the cached value, to avoid re-evaluating the expression.__@param expression  the target expression to cache_@return the cached value;public static Expression cacheExpression(final Expression expression) {_        return new ExpressionAdapter() {_            private final AtomicReference<Object> cache = new AtomicReference<>()___            public Object evaluate(Exchange exchange) {_                Object answer = cache.get()__                if (answer == null) {_                    answer = expression.evaluate(exchange, Object.class)__                    cache.set(answer)__                }_                return answer__            }__            @Override_            public String toString() {_                return expression.toString()__            }_        }__    };returns,an,expression,that,caches,the,evaluation,of,another,expression,and,returns,the,cached,value,to,avoid,re,evaluating,the,expression,param,expression,the,target,expression,to,cache,return,the,cached,value;public,static,expression,cache,expression,final,expression,expression,return,new,expression,adapter,private,final,atomic,reference,object,cache,new,atomic,reference,public,object,evaluate,exchange,exchange,object,answer,cache,get,if,answer,null,answer,expression,evaluate,exchange,object,class,cache,set,answer,return,answer,override,public,string,to,string,return,expression,to,string
ExpressionBuilder -> public static Expression cacheExpression(final Expression expression);1549967332;Returns an expression that caches the evaluation of another expression_and returns the cached value, to avoid re-evaluating the expression.__@param expression  the target expression to cache_@return the cached value;public static Expression cacheExpression(final Expression expression) {_        return new ExpressionAdapter() {_            private final AtomicReference<Object> cache = new AtomicReference<>()___            public Object evaluate(Exchange exchange) {_                Object answer = cache.get()__                if (answer == null) {_                    answer = expression.evaluate(exchange, Object.class)__                    cache.set(answer)__                }_                return answer__            }__            @Override_            public String toString() {_                return expression.toString()__            }_        }__    };returns,an,expression,that,caches,the,evaluation,of,another,expression,and,returns,the,cached,value,to,avoid,re,evaluating,the,expression,param,expression,the,target,expression,to,cache,return,the,cached,value;public,static,expression,cache,expression,final,expression,expression,return,new,expression,adapter,private,final,atomic,reference,object,cache,new,atomic,reference,public,object,evaluate,exchange,exchange,object,answer,cache,get,if,answer,null,answer,expression,evaluate,exchange,object,class,cache,set,answer,return,answer,override,public,string,to,string,return,expression,to,string
ExpressionBuilder -> public static Expression cacheExpression(final Expression expression);1549967797;Returns an expression that caches the evaluation of another expression_and returns the cached value, to avoid re-evaluating the expression.__@param expression  the target expression to cache_@return the cached value;public static Expression cacheExpression(final Expression expression) {_        return new ExpressionAdapter() {_            private final AtomicReference<Object> cache = new AtomicReference<>()___            public Object evaluate(Exchange exchange) {_                Object answer = cache.get()__                if (answer == null) {_                    answer = expression.evaluate(exchange, Object.class)__                    cache.set(answer)__                }_                return answer__            }__            @Override_            public String toString() {_                return expression.toString()__            }_        }__    };returns,an,expression,that,caches,the,evaluation,of,another,expression,and,returns,the,cached,value,to,avoid,re,evaluating,the,expression,param,expression,the,target,expression,to,cache,return,the,cached,value;public,static,expression,cache,expression,final,expression,expression,return,new,expression,adapter,private,final,atomic,reference,object,cache,new,atomic,reference,public,object,evaluate,exchange,exchange,object,answer,cache,get,if,answer,null,answer,expression,evaluate,exchange,object,class,cache,set,answer,return,answer,override,public,string,to,string,return,expression,to,string
ExpressionBuilder -> public static Expression exchangeExpression(final Function<Exchange, Object> function);1549264559;Returns a functional expression for the exchange;public static Expression exchangeExpression(final Function<Exchange, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchange;public,static,expression,exchange,expression,final,function,exchange,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,override,public,string,to,string,return,exchange,expression
ExpressionBuilder -> public static Expression exchangeExpression(final Function<Exchange, Object> function);1549910857;Returns a functional expression for the exchange;public static Expression exchangeExpression(final Function<Exchange, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchange;public,static,expression,exchange,expression,final,function,exchange,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,override,public,string,to,string,return,exchange,expression
ExpressionBuilder -> public static Expression exchangeExpression(final Function<Exchange, Object> function);1549911461;Returns a functional expression for the exchange;public static Expression exchangeExpression(final Function<Exchange, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchange;public,static,expression,exchange,expression,final,function,exchange,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,override,public,string,to,string,return,exchange,expression
ExpressionBuilder -> public static Expression exchangeExpression(final Function<Exchange, Object> function);1549967332;Returns a functional expression for the exchange;public static Expression exchangeExpression(final Function<Exchange, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchange;public,static,expression,exchange,expression,final,function,exchange,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,override,public,string,to,string,return,exchange,expression
ExpressionBuilder -> public static Expression exchangeExpression(final Function<Exchange, Object> function);1549967797;Returns a functional expression for the exchange;public static Expression exchangeExpression(final Function<Exchange, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchange;public,static,expression,exchange,expression,final,function,exchange,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,override,public,string,to,string,return,exchange,expression
ExpressionBuilder -> public static Expression exchangeExceptionOgnlExpression(final String ognl);1549264559;Returns the expression for the exchanges exception invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression exchangeExceptionOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }__                if (exception == null) {_                    return null__                }__                _                _                return new MethodCallExpression(exception, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExceptionOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,exception,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,exchange,exception,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,return,null,return,new,method,call,expression,exception,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,exception,ognl,ognl
ExpressionBuilder -> public static Expression exchangeExceptionOgnlExpression(final String ognl);1549910857;Returns the expression for the exchanges exception invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression exchangeExceptionOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }__                if (exception == null) {_                    return null__                }__                _                _                return new MethodCallExpression(exception, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExceptionOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,exception,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,exchange,exception,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,return,null,return,new,method,call,expression,exception,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,exception,ognl,ognl
ExpressionBuilder -> public static Expression exchangeExceptionOgnlExpression(final String ognl);1549911461;Returns the expression for the exchanges exception invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression exchangeExceptionOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }__                if (exception == null) {_                    return null__                }__                _                _                return new MethodCallExpression(exception, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExceptionOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,exception,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,exchange,exception,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,return,null,return,new,method,call,expression,exception,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,exception,ognl,ognl
ExpressionBuilder -> public static Expression exchangeExceptionOgnlExpression(final String ognl);1549967332;Returns the expression for the exchanges exception invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression exchangeExceptionOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }__                if (exception == null) {_                    return null__                }__                _                _                return new MethodCallExpression(exception, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExceptionOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,exception,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,exchange,exception,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,return,null,return,new,method,call,expression,exception,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,exception,ognl,ognl
ExpressionBuilder -> public static Expression exchangeExceptionOgnlExpression(final String ognl);1549967797;Returns the expression for the exchanges exception invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the body in a simple OGNL syntax;public static Expression exchangeExceptionOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Object exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }__                if (exception == null) {_                    return null__                }__                _                _                return new MethodCallExpression(exception, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "exchangeExceptionOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,exception,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,body,in,a,simple,ognl,syntax;public,static,expression,exchange,exception,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,object,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,if,exception,null,return,null,return,new,method,call,expression,exception,ognl,evaluate,exchange,override,public,string,to,string,return,exchange,exception,ognl,ognl
ExpressionBuilder -> public static Expression bodyExpression();1549264559;Returns the expression for the exchanges inbound message body;public static Expression bodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody()__            }__            @Override_            public String toString() {_                return "body"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,override,public,string,to,string,return,body
ExpressionBuilder -> public static Expression bodyExpression();1549910857;Returns the expression for the exchanges inbound message body;public static Expression bodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody()__            }__            @Override_            public String toString() {_                return "body"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,override,public,string,to,string,return,body
ExpressionBuilder -> public static Expression bodyExpression();1549911461;Returns the expression for the exchanges inbound message body;public static Expression bodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody()__            }__            @Override_            public String toString() {_                return "body"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,override,public,string,to,string,return,body
ExpressionBuilder -> public static Expression bodyExpression();1549967332;Returns the expression for the exchanges inbound message body;public static Expression bodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody()__            }__            @Override_            public String toString() {_                return "body"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,override,public,string,to,string,return,body
ExpressionBuilder -> public static Expression bodyExpression();1549967797;Returns the expression for the exchanges inbound message body;public static Expression bodyExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getBody()__            }__            @Override_            public String toString() {_                return "body"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,body,override,public,string,to,string,return,body
ExpressionBuilder -> public static Expression bodyExpression(final String name);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression bodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,name
ExpressionBuilder -> public static Expression bodyExpression(final String name);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression bodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,name
ExpressionBuilder -> public static Expression bodyExpression(final String name);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression bodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,name
ExpressionBuilder -> public static Expression bodyExpression(final String name);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression bodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,name
ExpressionBuilder -> public static Expression bodyExpression(final String name);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type;public static Expression bodyExpression(final String name) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(name).evaluate(exchange, String.class)__                Class<?> type__                try {_                    type = exchange.getContext().getClassResolver().resolveMandatoryClass(text)__                } catch (ClassNotFoundException e) {_                    throw CamelExecutionException.wrapCamelExecutionException(exchange, e)__                }_                return exchange.getIn().getBody(type)__            }__            @Override_            public String toString() {_                return "bodyAs[" + name + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type;public,static,expression,body,expression,final,string,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,name,evaluate,exchange,string,class,class,type,try,type,exchange,get,context,get,class,resolver,resolve,mandatory,class,text,catch,class,not,found,exception,e,throw,camel,execution,exception,wrap,camel,execution,exception,exchange,e,return,exchange,get,in,get,body,type,override,public,string,to,string,return,body,as,name
ExpressionBuilder -> public static Expression propertyOgnlExpression(final String ognl);1549264559;Returns an expression for the property value of exchange with the given name invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the property in a simple OGNL syntax;public static Expression propertyOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "propertyOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getProperty(text)__                }_            })__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,property,in,a,simple,ognl,syntax;public,static,expression,property,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,property,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,property,text
ExpressionBuilder -> public static Expression propertyOgnlExpression(final String ognl);1549910857;Returns an expression for the property value of exchange with the given name invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the property in a simple OGNL syntax;public static Expression propertyOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "propertyOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getProperty(text)__                }_            })__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,property,in,a,simple,ognl,syntax;public,static,expression,property,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,property,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,property,text
ExpressionBuilder -> public static Expression propertyOgnlExpression(final String ognl);1549911461;Returns an expression for the property value of exchange with the given name invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the property in a simple OGNL syntax;public static Expression propertyOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "propertyOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getProperty(text)__                }_            })__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,property,in,a,simple,ognl,syntax;public,static,expression,property,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,property,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,property,text
ExpressionBuilder -> public static Expression propertyOgnlExpression(final String ognl);1549967332;Returns an expression for the property value of exchange with the given name invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the property in a simple OGNL syntax;public static Expression propertyOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "propertyOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getProperty(text)__                }_            })__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,property,in,a,simple,ognl,syntax;public,static,expression,property,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,property,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,property,text
ExpressionBuilder -> public static Expression propertyOgnlExpression(final String ognl);1549967797;Returns an expression for the property value of exchange with the given name invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the property in a simple OGNL syntax;public static Expression propertyOgnlExpression(final String ognl) {_        return new KeyedOgnlExpressionAdapter(ognl, "propertyOgnl(" + ognl + ")",_            new KeyedOgnlExpressionAdapter.KeyedEntityRetrievalStrategy() {_                public Object getKeyedEntity(Exchange exchange, String key) {_                    String text = simpleExpression(key).evaluate(exchange, String.class)__                    return exchange.getProperty(text)__                }_            })__    };returns,an,expression,for,the,property,value,of,exchange,with,the,given,name,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,property,in,a,simple,ognl,syntax;public,static,expression,property,ognl,expression,final,string,ognl,return,new,keyed,ognl,expression,adapter,ognl,property,ognl,ognl,new,keyed,ognl,expression,adapter,keyed,entity,retrieval,strategy,public,object,get,keyed,entity,exchange,exchange,string,key,string,text,simple,expression,key,evaluate,exchange,string,class,return,exchange,get,property,text
ExpressionBuilder -> public static Expression attachmentObjectValuesExpression();1549264559;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects().values()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,object,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,values,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectValuesExpression();1549910857;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects().values()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,object,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,values,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectValuesExpression();1549911461;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects().values()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,object,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,values,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectValuesExpression();1549967332;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects().values()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,object,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,values,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression attachmentObjectValuesExpression();1549967797;Returns an expression for the inbound message attachments__@return an expression object which will return the inbound message attachments;public static Expression attachmentObjectValuesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getIn().getAttachmentObjects().values()__            }__            @Override_            public String toString() {_                return "attachmentObjects"__            }_        }__    };returns,an,expression,for,the,inbound,message,attachments,return,an,expression,object,which,will,return,the,inbound,message,attachments;public,static,expression,attachment,object,values,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,in,get,attachment,objects,values,override,public,string,to,string,return,attachment,objects
ExpressionBuilder -> public static Expression camelContextOgnlExpression(final String ognl);1549264559;Returns the expression for the exchanges camelContext invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the context in a simple OGNL syntax;public static Expression camelContextOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                CamelContext context = exchange.getContext()__                if (context == null) {_                    return null__                }_                _                _                return new MethodCallExpression(context, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "camelContextOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,camel,context,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,context,in,a,simple,ognl,syntax;public,static,expression,camel,context,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,camel,context,context,exchange,get,context,if,context,null,return,null,return,new,method,call,expression,context,ognl,evaluate,exchange,override,public,string,to,string,return,camel,context,ognl,ognl
ExpressionBuilder -> public static Expression camelContextOgnlExpression(final String ognl);1549910857;Returns the expression for the exchanges camelContext invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the context in a simple OGNL syntax;public static Expression camelContextOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                CamelContext context = exchange.getContext()__                if (context == null) {_                    return null__                }_                _                _                return new MethodCallExpression(context, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "camelContextOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,camel,context,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,context,in,a,simple,ognl,syntax;public,static,expression,camel,context,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,camel,context,context,exchange,get,context,if,context,null,return,null,return,new,method,call,expression,context,ognl,evaluate,exchange,override,public,string,to,string,return,camel,context,ognl,ognl
ExpressionBuilder -> public static Expression camelContextOgnlExpression(final String ognl);1549911461;Returns the expression for the exchanges camelContext invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the context in a simple OGNL syntax;public static Expression camelContextOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                CamelContext context = exchange.getContext()__                if (context == null) {_                    return null__                }_                _                _                return new MethodCallExpression(context, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "camelContextOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,camel,context,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,context,in,a,simple,ognl,syntax;public,static,expression,camel,context,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,camel,context,context,exchange,get,context,if,context,null,return,null,return,new,method,call,expression,context,ognl,evaluate,exchange,override,public,string,to,string,return,camel,context,ognl,ognl
ExpressionBuilder -> public static Expression camelContextOgnlExpression(final String ognl);1549967332;Returns the expression for the exchanges camelContext invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the context in a simple OGNL syntax;public static Expression camelContextOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                CamelContext context = exchange.getContext()__                if (context == null) {_                    return null__                }_                _                _                return new MethodCallExpression(context, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "camelContextOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,camel,context,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,context,in,a,simple,ognl,syntax;public,static,expression,camel,context,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,camel,context,context,exchange,get,context,if,context,null,return,null,return,new,method,call,expression,context,ognl,evaluate,exchange,override,public,string,to,string,return,camel,context,ognl,ognl
ExpressionBuilder -> public static Expression camelContextOgnlExpression(final String ognl);1549967797;Returns the expression for the exchanges camelContext invoking methods defined_in a simple OGNL notation__@param ognl  methods to invoke on the context in a simple OGNL syntax;public static Expression camelContextOgnlExpression(final String ognl) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                CamelContext context = exchange.getContext()__                if (context == null) {_                    return null__                }_                _                _                return new MethodCallExpression(context, ognl).evaluate(exchange)__            }__            @Override_            public String toString() {_                return "camelContextOgnl(" + ognl + ")"__            }_        }__    };returns,the,expression,for,the,exchanges,camel,context,invoking,methods,defined,in,a,simple,ognl,notation,param,ognl,methods,to,invoke,on,the,context,in,a,simple,ognl,syntax;public,static,expression,camel,context,ognl,expression,final,string,ognl,return,new,expression,adapter,public,object,evaluate,exchange,exchange,camel,context,context,exchange,get,context,if,context,null,return,null,return,new,method,call,expression,context,ognl,evaluate,exchange,override,public,string,to,string,return,camel,context,ognl,ognl
ExpressionBuilder -> public static Expression outMessageExpression();1549264559;Returns the expression for the OUT message;public static Expression outMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getOut()__            }__            @Override_            public String toString() {_                return "outMessage"__            }_        }__    };returns,the,expression,for,the,out,message;public,static,expression,out,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,out,override,public,string,to,string,return,out,message
ExpressionBuilder -> public static Expression outMessageExpression();1549910857;Returns the expression for the OUT message;public static Expression outMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getOut()__            }__            @Override_            public String toString() {_                return "outMessage"__            }_        }__    };returns,the,expression,for,the,out,message;public,static,expression,out,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,out,override,public,string,to,string,return,out,message
ExpressionBuilder -> public static Expression outMessageExpression();1549911461;Returns the expression for the OUT message;public static Expression outMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getOut()__            }__            @Override_            public String toString() {_                return "outMessage"__            }_        }__    };returns,the,expression,for,the,out,message;public,static,expression,out,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,out,override,public,string,to,string,return,out,message
ExpressionBuilder -> public static Expression outMessageExpression();1549967332;Returns the expression for the OUT message;public static Expression outMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getOut()__            }__            @Override_            public String toString() {_                return "outMessage"__            }_        }__    };returns,the,expression,for,the,out,message;public,static,expression,out,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,out,override,public,string,to,string,return,out,message
ExpressionBuilder -> public static Expression outMessageExpression();1549967797;Returns the expression for the OUT message;public static Expression outMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getOut()__            }__            @Override_            public String toString() {_                return "outMessage"__            }_        }__    };returns,the,expression,for,the,out,message;public,static,expression,out,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,out,override,public,string,to,string,return,out,message
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName,                                                       final String defaultValue);1549264559;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@param defaultValue default value to return if no system property exists_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName,_                                                      final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                return System.getProperty(text, text2)__            }__            @Override_            public String toString() {_                return "systemProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,property,exists,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,text2,simple,expression,default,value,evaluate,exchange,string,class,return,system,get,property,text,text2,override,public,string,to,string,return,system,property,property,name
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName,                                                       final String defaultValue);1549910857;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@param defaultValue default value to return if no system property exists_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName,_                                                      final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                return System.getProperty(text, text2)__            }__            @Override_            public String toString() {_                return "systemProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,property,exists,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,text2,simple,expression,default,value,evaluate,exchange,string,class,return,system,get,property,text,text2,override,public,string,to,string,return,system,property,property,name
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName,                                                       final String defaultValue);1549911461;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@param defaultValue default value to return if no system property exists_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName,_                                                      final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                return System.getProperty(text, text2)__            }__            @Override_            public String toString() {_                return "systemProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,property,exists,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,text2,simple,expression,default,value,evaluate,exchange,string,class,return,system,get,property,text,text2,override,public,string,to,string,return,system,property,property,name
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName,                                                       final String defaultValue);1549967332;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@param defaultValue default value to return if no system property exists_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName,_                                                      final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                return System.getProperty(text, text2)__            }__            @Override_            public String toString() {_                return "systemProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,property,exists,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,text2,simple,expression,default,value,evaluate,exchange,string,class,return,system,get,property,text,text2,override,public,string,to,string,return,system,property,property,name
ExpressionBuilder -> public static Expression systemPropertyExpression(final String propertyName,                                                       final String defaultValue);1549967797;Returns an expression for a system property value with the given name__@param propertyName the name of the system property the expression will return_@param defaultValue default value to return if no system property exists_@return an expression object which will return the system property value;public static Expression systemPropertyExpression(final String propertyName,_                                                      final String defaultValue) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                String text2 = simpleExpression(defaultValue).evaluate(exchange, String.class)__                return System.getProperty(text, text2)__            }__            @Override_            public String toString() {_                return "systemProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,a,system,property,value,with,the,given,name,param,property,name,the,name,of,the,system,property,the,expression,will,return,param,default,value,default,value,to,return,if,no,system,property,exists,return,an,expression,object,which,will,return,the,system,property,value;public,static,expression,system,property,expression,final,string,property,name,final,string,default,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,string,text2,simple,expression,default,value,evaluate,exchange,string,class,return,system,get,property,text,text2,override,public,string,to,string,return,system,property,property,name
ExpressionBuilder -> public static Expression bodyExpression(final Function<Object, Object> function);1549264559;Returns a functional expression for the exchanges inbound message body;public static Expression bodyExpression(final Function<Object, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,final,function,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final Function<Object, Object> function);1549910857;Returns a functional expression for the exchanges inbound message body;public static Expression bodyExpression(final Function<Object, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,final,function,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final Function<Object, Object> function);1549911461;Returns a functional expression for the exchanges inbound message body;public static Expression bodyExpression(final Function<Object, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,final,function,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final Function<Object, Object> function);1549967332;Returns a functional expression for the exchanges inbound message body;public static Expression bodyExpression(final Function<Object, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,final,function,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static Expression bodyExpression(final Function<Object, Object> function);1549967797;Returns a functional expression for the exchanges inbound message body;public static Expression bodyExpression(final Function<Object, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody()_                )__            }__            @Override_            public String toString() {_                return "bodyExpression"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body;public,static,expression,body,expression,final,function,object,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,override,public,string,to,string,return,body,expression
ExpressionBuilder -> public static <T> Expression headerExpression(final String headerName, final Class<T> type);1549264559;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param type the type to convert to_@return an expression object which will return the header value;public static <T> Expression headerExpression(final String headerName, final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name, type)__                if (header == null) {_                    _                    header = exchange.getProperty(name, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + type + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,the,type,to,convert,to,return,an,expression,object,which,will,return,the,header,value;public,static,t,expression,header,expression,final,string,header,name,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,type,if,header,null,header,exchange,get,property,name,type,return,header,override,public,string,to,string,return,header,as,header,name,type
ExpressionBuilder -> public static <T> Expression headerExpression(final String headerName, final Class<T> type);1549910857;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param type the type to convert to_@return an expression object which will return the header value;public static <T> Expression headerExpression(final String headerName, final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name, type)__                if (header == null) {_                    _                    header = exchange.getProperty(name, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + type + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,the,type,to,convert,to,return,an,expression,object,which,will,return,the,header,value;public,static,t,expression,header,expression,final,string,header,name,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,type,if,header,null,header,exchange,get,property,name,type,return,header,override,public,string,to,string,return,header,as,header,name,type
ExpressionBuilder -> public static <T> Expression headerExpression(final String headerName, final Class<T> type);1549911461;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param type the type to convert to_@return an expression object which will return the header value;public static <T> Expression headerExpression(final String headerName, final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name, type)__                if (header == null) {_                    _                    header = exchange.getProperty(name, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + type + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,the,type,to,convert,to,return,an,expression,object,which,will,return,the,header,value;public,static,t,expression,header,expression,final,string,header,name,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,type,if,header,null,header,exchange,get,property,name,type,return,header,override,public,string,to,string,return,header,as,header,name,type
ExpressionBuilder -> public static <T> Expression headerExpression(final String headerName, final Class<T> type);1549967332;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param type the type to convert to_@return an expression object which will return the header value;public static <T> Expression headerExpression(final String headerName, final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name, type)__                if (header == null) {_                    _                    header = exchange.getProperty(name, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + type + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,the,type,to,convert,to,return,an,expression,object,which,will,return,the,header,value;public,static,t,expression,header,expression,final,string,header,name,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,type,if,header,null,header,exchange,get,property,name,type,return,header,override,public,string,to,string,return,header,as,header,name,type
ExpressionBuilder -> public static <T> Expression headerExpression(final String headerName, final Class<T> type);1549967797;Returns an expression for the header value with the given name converted to the given type_<p/>_Will fallback and look in properties if not found in headers.__@param headerName the name of the header the expression will return_@param type the type to convert to_@return an expression object which will return the header value;public static <T> Expression headerExpression(final String headerName, final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String name = simpleExpression(headerName).evaluate(exchange, String.class)__                Object header = exchange.getIn().getHeader(name, type)__                if (header == null) {_                    _                    header = exchange.getProperty(name, type)__                }_                return header__            }__            @Override_            public String toString() {_                return "headerAs(" + headerName + ", " + type + ")"__            }_        }__    };returns,an,expression,for,the,header,value,with,the,given,name,converted,to,the,given,type,p,will,fallback,and,look,in,properties,if,not,found,in,headers,param,header,name,the,name,of,the,header,the,expression,will,return,param,type,the,type,to,convert,to,return,an,expression,object,which,will,return,the,header,value;public,static,t,expression,header,expression,final,string,header,name,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,name,simple,expression,header,name,evaluate,exchange,string,class,object,header,exchange,get,in,get,header,name,type,if,header,null,header,exchange,get,property,name,type,return,header,override,public,string,to,string,return,header,as,header,name,type
ExpressionBuilder -> public static Expression messageExpression();1549264559;Returns the expression for the IN message;public static Expression messageExpression() {_        return inMessageExpression()__    };returns,the,expression,for,the,in,message;public,static,expression,message,expression,return,in,message,expression
ExpressionBuilder -> public static Expression messageExpression();1549910857;Returns the expression for the IN message;public static Expression messageExpression() {_        return inMessageExpression()__    };returns,the,expression,for,the,in,message;public,static,expression,message,expression,return,in,message,expression
ExpressionBuilder -> public static Expression messageExpression();1549911461;Returns the expression for the IN message;public static Expression messageExpression() {_        return inMessageExpression()__    };returns,the,expression,for,the,in,message;public,static,expression,message,expression,return,in,message,expression
ExpressionBuilder -> public static Expression messageExpression();1549967332;Returns the expression for the IN message;public static Expression messageExpression() {_        return inMessageExpression()__    };returns,the,expression,for,the,in,message;public,static,expression,message,expression,return,in,message,expression
ExpressionBuilder -> public static Expression messageExpression();1549967797;Returns the expression for the IN message;public static Expression messageExpression() {_        return inMessageExpression()__    };returns,the,expression,for,the,in,message;public,static,expression,message,expression,return,in,message,expression
ExpressionBuilder -> public static Expression exchangeExceptionMessageExpression();1549264559;Returns an expression for an exception message set on the exchange__@see <tt>Exchange.getException().getMessage()</tt>_@return an expression object which will return the exception message set on the exchange;public static Expression exchangeExceptionMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception != null ? exception.getMessage() : null__            }__            @Override_            public String toString() {_                return "exchangeExceptionMessage"__            }_        }__    };returns,an,expression,for,an,exception,message,set,on,the,exchange,see,tt,exchange,get,exception,get,message,tt,return,an,expression,object,which,will,return,the,exception,message,set,on,the,exchange;public,static,expression,exchange,exception,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,null,exception,get,message,null,override,public,string,to,string,return,exchange,exception,message
ExpressionBuilder -> public static Expression exchangeExceptionMessageExpression();1549910857;Returns an expression for an exception message set on the exchange__@see <tt>Exchange.getException().getMessage()</tt>_@return an expression object which will return the exception message set on the exchange;public static Expression exchangeExceptionMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception != null ? exception.getMessage() : null__            }__            @Override_            public String toString() {_                return "exchangeExceptionMessage"__            }_        }__    };returns,an,expression,for,an,exception,message,set,on,the,exchange,see,tt,exchange,get,exception,get,message,tt,return,an,expression,object,which,will,return,the,exception,message,set,on,the,exchange;public,static,expression,exchange,exception,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,null,exception,get,message,null,override,public,string,to,string,return,exchange,exception,message
ExpressionBuilder -> public static Expression exchangeExceptionMessageExpression();1549911461;Returns an expression for an exception message set on the exchange__@see <tt>Exchange.getException().getMessage()</tt>_@return an expression object which will return the exception message set on the exchange;public static Expression exchangeExceptionMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception != null ? exception.getMessage() : null__            }__            @Override_            public String toString() {_                return "exchangeExceptionMessage"__            }_        }__    };returns,an,expression,for,an,exception,message,set,on,the,exchange,see,tt,exchange,get,exception,get,message,tt,return,an,expression,object,which,will,return,the,exception,message,set,on,the,exchange;public,static,expression,exchange,exception,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,null,exception,get,message,null,override,public,string,to,string,return,exchange,exception,message
ExpressionBuilder -> public static Expression exchangeExceptionMessageExpression();1549967332;Returns an expression for an exception message set on the exchange__@see <tt>Exchange.getException().getMessage()</tt>_@return an expression object which will return the exception message set on the exchange;public static Expression exchangeExceptionMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception != null ? exception.getMessage() : null__            }__            @Override_            public String toString() {_                return "exchangeExceptionMessage"__            }_        }__    };returns,an,expression,for,an,exception,message,set,on,the,exchange,see,tt,exchange,get,exception,get,message,tt,return,an,expression,object,which,will,return,the,exception,message,set,on,the,exchange;public,static,expression,exchange,exception,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,null,exception,get,message,null,override,public,string,to,string,return,exchange,exception,message
ExpressionBuilder -> public static Expression exchangeExceptionMessageExpression();1549967797;Returns an expression for an exception message set on the exchange__@see <tt>Exchange.getException().getMessage()</tt>_@return an expression object which will return the exception message set on the exchange;public static Expression exchangeExceptionMessageExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Exception exception = exchange.getException()__                if (exception == null) {_                    exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class)__                }_                return exception != null ? exception.getMessage() : null__            }__            @Override_            public String toString() {_                return "exchangeExceptionMessage"__            }_        }__    };returns,an,expression,for,an,exception,message,set,on,the,exchange,see,tt,exchange,get,exception,get,message,tt,return,an,expression,object,which,will,return,the,exception,message,set,on,the,exchange;public,static,expression,exchange,exception,message,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,exception,exception,exchange,get,exception,if,exception,null,exception,exchange,get,property,exchange,exception,class,return,exception,null,exception,get,message,null,override,public,string,to,string,return,exchange,exception,message
ExpressionBuilder -> public static <T> Expression faultBodyExpression(final Class<T> type);1549264559;Returns the expression for the exchanges fault message body converted_to the given type;public static <T> Expression faultBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody(type) : null__            }__            @Override_            public String toString() {_                return "faultBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,fault,message,body,converted,to,the,given,type;public,static,t,expression,fault,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,type,null,override,public,string,to,string,return,fault,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression faultBodyExpression(final Class<T> type);1549910857;Returns the expression for the exchanges fault message body converted_to the given type;public static <T> Expression faultBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody(type) : null__            }__            @Override_            public String toString() {_                return "faultBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,fault,message,body,converted,to,the,given,type;public,static,t,expression,fault,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,type,null,override,public,string,to,string,return,fault,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression faultBodyExpression(final Class<T> type);1549911461;Returns the expression for the exchanges fault message body converted_to the given type;public static <T> Expression faultBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody(type) : null__            }__            @Override_            public String toString() {_                return "faultBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,fault,message,body,converted,to,the,given,type;public,static,t,expression,fault,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,type,null,override,public,string,to,string,return,fault,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression faultBodyExpression(final Class<T> type);1549967332;Returns the expression for the exchanges fault message body converted_to the given type;public static <T> Expression faultBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody(type) : null__            }__            @Override_            public String toString() {_                return "faultBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,fault,message,body,converted,to,the,given,type;public,static,t,expression,fault,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,type,null,override,public,string,to,string,return,fault,body,as,type,get,name
ExpressionBuilder -> public static <T> Expression faultBodyExpression(final Class<T> type);1549967797;Returns the expression for the exchanges fault message body converted_to the given type;public static <T> Expression faultBodyExpression(final Class<T> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                Message msg = exchange.hasOut() ? exchange.getOut() : exchange.getIn()__                return msg.isFault() ? msg.getBody(type) : null__            }__            @Override_            public String toString() {_                return "faultBodyAs[" + type.getName() + "]"__            }_        }__    };returns,the,expression,for,the,exchanges,fault,message,body,converted,to,the,given,type;public,static,t,expression,fault,body,expression,final,class,t,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,message,msg,exchange,has,out,exchange,get,out,exchange,get,in,return,msg,is,fault,msg,get,body,type,null,override,public,string,to,string,return,fault,body,as,type,get,name
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final Expression replacementExpression);1549264559;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final Expression replacementExpression) {__        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                String replacement = replacementExpression.evaluate(exchange, String.class)__                if (text == null || replacement == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,expression,replacement,expression,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,string,replacement,replacement,expression,evaluate,exchange,string,class,if,text,null,replacement,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final Expression replacementExpression);1549910857;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final Expression replacementExpression) {__        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                String replacement = replacementExpression.evaluate(exchange, String.class)__                if (text == null || replacement == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,expression,replacement,expression,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,string,replacement,replacement,expression,evaluate,exchange,string,class,if,text,null,replacement,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final Expression replacementExpression);1549911461;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final Expression replacementExpression) {__        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                String replacement = replacementExpression.evaluate(exchange, String.class)__                if (text == null || replacement == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,expression,replacement,expression,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,string,replacement,replacement,expression,evaluate,exchange,string,class,if,text,null,replacement,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final Expression replacementExpression);1549967332;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final Expression replacementExpression) {__        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                String replacement = replacementExpression.evaluate(exchange, String.class)__                if (text == null || replacement == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,expression,replacement,expression,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,string,replacement,replacement,expression,evaluate,exchange,string,class,if,text,null,replacement,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final Expression replacementExpression);1549967797;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final Expression replacementExpression) {__        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                String replacement = replacementExpression.evaluate(exchange, String.class)__                if (text == null || replacement == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,expression,replacement,expression,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,string,replacement,replacement,expression,evaluate,exchange,string,class,if,text,null,replacement,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression constantExpression(final Object value);1549264559;Returns an expression for the constant value__@param value the value the expression will return_@return an expression object which will return the constant value;public static Expression constantExpression(final Object value) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return value__            }__            @Override_            public String toString() {_                return "" + value__            }_        }__    };returns,an,expression,for,the,constant,value,param,value,the,value,the,expression,will,return,return,an,expression,object,which,will,return,the,constant,value;public,static,expression,constant,expression,final,object,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,value,override,public,string,to,string,return,value
ExpressionBuilder -> public static Expression constantExpression(final Object value);1549910857;Returns an expression for the constant value__@param value the value the expression will return_@return an expression object which will return the constant value;public static Expression constantExpression(final Object value) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return value__            }__            @Override_            public String toString() {_                return "" + value__            }_        }__    };returns,an,expression,for,the,constant,value,param,value,the,value,the,expression,will,return,return,an,expression,object,which,will,return,the,constant,value;public,static,expression,constant,expression,final,object,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,value,override,public,string,to,string,return,value
ExpressionBuilder -> public static Expression constantExpression(final Object value);1549911461;Returns an expression for the constant value__@param value the value the expression will return_@return an expression object which will return the constant value;public static Expression constantExpression(final Object value) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return value__            }__            @Override_            public String toString() {_                return "" + value__            }_        }__    };returns,an,expression,for,the,constant,value,param,value,the,value,the,expression,will,return,return,an,expression,object,which,will,return,the,constant,value;public,static,expression,constant,expression,final,object,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,value,override,public,string,to,string,return,value
ExpressionBuilder -> public static Expression constantExpression(final Object value);1549967332;Returns an expression for the constant value__@param value the value the expression will return_@return an expression object which will return the constant value;public static Expression constantExpression(final Object value) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return value__            }__            @Override_            public String toString() {_                return "" + value__            }_        }__    };returns,an,expression,for,the,constant,value,param,value,the,value,the,expression,will,return,return,an,expression,object,which,will,return,the,constant,value;public,static,expression,constant,expression,final,object,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,value,override,public,string,to,string,return,value
ExpressionBuilder -> public static Expression constantExpression(final Object value);1549967797;Returns an expression for the constant value__@param value the value the expression will return_@return an expression object which will return the constant value;public static Expression constantExpression(final Object value) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return value__            }__            @Override_            public String toString() {_                return "" + value__            }_        }__    };returns,an,expression,for,the,constant,value,param,value,the,value,the,expression,will,return,return,an,expression,object,which,will,return,the,constant,value;public,static,expression,constant,expression,final,object,value,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,value,override,public,string,to,string,return,value
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type);1549264559;Returns the expression for the exchanges inbound message body converted_to the given type._<p/>_Does <b>not</b> allow null bodies.;public static <T> Expression mandatoryBodyExpression(final Class<T> type) {_        return mandatoryBodyExpression(type, false)__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,p,does,b,not,b,allow,null,bodies;public,static,t,expression,mandatory,body,expression,final,class,t,type,return,mandatory,body,expression,type,false
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type);1549910857;Returns the expression for the exchanges inbound message body converted_to the given type._<p/>_Does <b>not</b> allow null bodies.;public static <T> Expression mandatoryBodyExpression(final Class<T> type) {_        return mandatoryBodyExpression(type, false)__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,p,does,b,not,b,allow,null,bodies;public,static,t,expression,mandatory,body,expression,final,class,t,type,return,mandatory,body,expression,type,false
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type);1549911461;Returns the expression for the exchanges inbound message body converted_to the given type._<p/>_Does <b>not</b> allow null bodies.;public static <T> Expression mandatoryBodyExpression(final Class<T> type) {_        return mandatoryBodyExpression(type, false)__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,p,does,b,not,b,allow,null,bodies;public,static,t,expression,mandatory,body,expression,final,class,t,type,return,mandatory,body,expression,type,false
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type);1549967332;Returns the expression for the exchanges inbound message body converted_to the given type._<p/>_Does <b>not</b> allow null bodies.;public static <T> Expression mandatoryBodyExpression(final Class<T> type) {_        return mandatoryBodyExpression(type, false)__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,p,does,b,not,b,allow,null,bodies;public,static,t,expression,mandatory,body,expression,final,class,t,type,return,mandatory,body,expression,type,false
ExpressionBuilder -> public static <T> Expression mandatoryBodyExpression(final Class<T> type);1549967797;Returns the expression for the exchanges inbound message body converted_to the given type._<p/>_Does <b>not</b> allow null bodies.;public static <T> Expression mandatoryBodyExpression(final Class<T> type) {_        return mandatoryBodyExpression(type, false)__    };returns,the,expression,for,the,exchanges,inbound,message,body,converted,to,the,given,type,p,does,b,not,b,allow,null,bodies;public,static,t,expression,mandatory,body,expression,final,class,t,type,return,mandatory,body,expression,type,false
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function);1549264559;Returns a functional expression for the exchanges inbound message body converted to a desired type;public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType)_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type;public,static,t,expression,body,expression,final,class,t,body,type,final,function,t,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function);1549910857;Returns a functional expression for the exchanges inbound message body converted to a desired type;public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType)_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type;public,static,t,expression,body,expression,final,class,t,body,type,final,function,t,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function);1549911461;Returns a functional expression for the exchanges inbound message body converted to a desired type;public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType)_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type;public,static,t,expression,body,expression,final,class,t,body,type,final,function,t,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function);1549967332;Returns a functional expression for the exchanges inbound message body converted to a desired type;public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType)_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type;public,static,t,expression,body,expression,final,class,t,body,type,final,function,t,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function);1549967797;Returns a functional expression for the exchanges inbound message body converted to a desired type;public static <T> Expression bodyExpression(final Class<T> bodyType, final Function<T, Object> function) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return function.apply(_                    exchange.getIn().getBody(bodyType)_                )__            }__            @Override_            public String toString() {_                return "bodyExpression (" + bodyType + ")"__            }_        }__    };returns,a,functional,expression,for,the,exchanges,inbound,message,body,converted,to,a,desired,type;public,static,t,expression,body,expression,final,class,t,body,type,final,function,t,object,function,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,function,apply,exchange,get,in,get,body,body,type,override,public,string,to,string,return,body,expression,body,type
ExpressionBuilder -> public static Expression randomExpression(final int max);1549264559;Returns a random number between 0 and max (exclusive);public static Expression randomExpression(final int max) {_        return randomExpression(0, max)__    };returns,a,random,number,between,0,and,max,exclusive;public,static,expression,random,expression,final,int,max,return,random,expression,0,max
ExpressionBuilder -> public static Expression randomExpression(final int max);1549910857;Returns a random number between 0 and max (exclusive);public static Expression randomExpression(final int max) {_        return randomExpression(0, max)__    };returns,a,random,number,between,0,and,max,exclusive;public,static,expression,random,expression,final,int,max,return,random,expression,0,max
ExpressionBuilder -> public static Expression randomExpression(final int max);1549911461;Returns a random number between 0 and max (exclusive);public static Expression randomExpression(final int max) {_        return randomExpression(0, max)__    };returns,a,random,number,between,0,and,max,exclusive;public,static,expression,random,expression,final,int,max,return,random,expression,0,max
ExpressionBuilder -> public static Expression randomExpression(final int max);1549967332;Returns a random number between 0 and max (exclusive);public static Expression randomExpression(final int max) {_        return randomExpression(0, max)__    };returns,a,random,number,between,0,and,max,exclusive;public,static,expression,random,expression,final,int,max,return,random,expression,0,max
ExpressionBuilder -> public static Expression randomExpression(final int max);1549967797;Returns a random number between 0 and max (exclusive);public static Expression randomExpression(final int max) {_        return randomExpression(0, max)__    };returns,a,random,number,between,0,and,max,exclusive;public,static,expression,random,expression,final,int,max,return,random,expression,0,max
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final String replacement);1549264559;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final String replacement) {_        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                if (text == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,string,replacement,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,if,text,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final String replacement);1549910857;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final String replacement) {_        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                if (text == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,string,replacement,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,if,text,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final String replacement);1549911461;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final String replacement) {_        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                if (text == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,string,replacement,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,if,text,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final String replacement);1549967332;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final String replacement) {_        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                if (text == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,string,replacement,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,if,text,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression regexReplaceAll(final Expression expression,                                              final String regex, final String replacement);1549967797;Transforms the expression into a String then performs the regex_replaceAll to transform the String and return the result;public static Expression regexReplaceAll(final Expression expression,_                                             final String regex, final String replacement) {_        final Pattern pattern = Pattern.compile(regex)__        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = expression.evaluate(exchange, String.class)__                if (text == null) {_                    return null__                }_                return pattern.matcher(text).replaceAll(replacement)__            }__            @Override_            public String toString() {_                return "regexReplaceAll(" + expression + ", " + pattern.pattern() + ")"__            }_        }__    };transforms,the,expression,into,a,string,then,performs,the,regex,replace,all,to,transform,the,string,and,return,the,result;public,static,expression,regex,replace,all,final,expression,expression,final,string,regex,final,string,replacement,final,pattern,pattern,pattern,compile,regex,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,expression,evaluate,exchange,string,class,if,text,null,return,null,return,pattern,matcher,text,replace,all,replacement,override,public,string,to,string,return,regex,replace,all,expression,pattern,pattern
ExpressionBuilder -> public static Expression camelContextPropertiesExpression();1549264559;Returns an expression for the properties of the camel context__@return an expression object which will return the properties;public static Expression camelContextPropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getGlobalOptions()__            }__            @Override_            public String toString() {_                return "camelContextProperties"__            }_        }__    };returns,an,expression,for,the,properties,of,the,camel,context,return,an,expression,object,which,will,return,the,properties;public,static,expression,camel,context,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,global,options,override,public,string,to,string,return,camel,context,properties
ExpressionBuilder -> public static Expression camelContextPropertiesExpression();1549910857;Returns an expression for the properties of the camel context__@return an expression object which will return the properties;public static Expression camelContextPropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getGlobalOptions()__            }__            @Override_            public String toString() {_                return "camelContextProperties"__            }_        }__    };returns,an,expression,for,the,properties,of,the,camel,context,return,an,expression,object,which,will,return,the,properties;public,static,expression,camel,context,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,global,options,override,public,string,to,string,return,camel,context,properties
ExpressionBuilder -> public static Expression camelContextPropertiesExpression();1549911461;Returns an expression for the properties of the camel context__@return an expression object which will return the properties;public static Expression camelContextPropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getGlobalOptions()__            }__            @Override_            public String toString() {_                return "camelContextProperties"__            }_        }__    };returns,an,expression,for,the,properties,of,the,camel,context,return,an,expression,object,which,will,return,the,properties;public,static,expression,camel,context,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,global,options,override,public,string,to,string,return,camel,context,properties
ExpressionBuilder -> public static Expression camelContextPropertiesExpression();1549967332;Returns an expression for the properties of the camel context__@return an expression object which will return the properties;public static Expression camelContextPropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getGlobalOptions()__            }__            @Override_            public String toString() {_                return "camelContextProperties"__            }_        }__    };returns,an,expression,for,the,properties,of,the,camel,context,return,an,expression,object,which,will,return,the,properties;public,static,expression,camel,context,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,global,options,override,public,string,to,string,return,camel,context,properties
ExpressionBuilder -> public static Expression camelContextPropertiesExpression();1549967797;Returns an expression for the properties of the camel context__@return an expression object which will return the properties;public static Expression camelContextPropertiesExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getContext().getGlobalOptions()__            }__            @Override_            public String toString() {_                return "camelContextProperties"__            }_        }__    };returns,an,expression,for,the,properties,of,the,camel,context,return,an,expression,object,which,will,return,the,properties;public,static,expression,camel,context,properties,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,context,get,global,options,override,public,string,to,string,return,camel,context,properties
ExpressionBuilder -> public static Expression camelContextPropertyExpression(final String propertyName);1549264559;Returns an expression for the property value of the camel context with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression camelContextPropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getContext().getGlobalOption(text)__            }__            @Override_            public String toString() {_                return "camelContextProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,the,camel,context,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,camel,context,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,context,get,global,option,text,override,public,string,to,string,return,camel,context,property,property,name
ExpressionBuilder -> public static Expression camelContextPropertyExpression(final String propertyName);1549910857;Returns an expression for the property value of the camel context with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression camelContextPropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getContext().getGlobalOption(text)__            }__            @Override_            public String toString() {_                return "camelContextProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,the,camel,context,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,camel,context,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,context,get,global,option,text,override,public,string,to,string,return,camel,context,property,property,name
ExpressionBuilder -> public static Expression camelContextPropertyExpression(final String propertyName);1549911461;Returns an expression for the property value of the camel context with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression camelContextPropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getContext().getGlobalOption(text)__            }__            @Override_            public String toString() {_                return "camelContextProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,the,camel,context,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,camel,context,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,context,get,global,option,text,override,public,string,to,string,return,camel,context,property,property,name
ExpressionBuilder -> public static Expression camelContextPropertyExpression(final String propertyName);1549967332;Returns an expression for the property value of the camel context with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression camelContextPropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getContext().getGlobalOption(text)__            }__            @Override_            public String toString() {_                return "camelContextProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,the,camel,context,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,camel,context,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,context,get,global,option,text,override,public,string,to,string,return,camel,context,property,property,name
ExpressionBuilder -> public static Expression camelContextPropertyExpression(final String propertyName);1549967797;Returns an expression for the property value of the camel context with the given name__@param propertyName the name of the property the expression will return_@return an expression object which will return the property value;public static Expression camelContextPropertyExpression(final String propertyName) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                String text = simpleExpression(propertyName).evaluate(exchange, String.class)__                return exchange.getContext().getGlobalOption(text)__            }__            @Override_            public String toString() {_                return "camelContextProperty(" + propertyName + ")"__            }_        }__    };returns,an,expression,for,the,property,value,of,the,camel,context,with,the,given,name,param,property,name,the,name,of,the,property,the,expression,will,return,return,an,expression,object,which,will,return,the,property,value;public,static,expression,camel,context,property,expression,final,string,property,name,return,new,expression,adapter,public,object,evaluate,exchange,exchange,string,text,simple,expression,property,name,evaluate,exchange,string,class,return,exchange,get,context,get,global,option,text,override,public,string,to,string,return,camel,context,property,property,name
ExpressionBuilder -> public static Expression exchangeIdExpression();1549264559;Returns an Expression for the exchange id;public static Expression exchangeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getExchangeId()__            }__            @Override_            public String toString() {_                return "exchangeId"__            }_        }__    };returns,an,expression,for,the,exchange,id;public,static,expression,exchange,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,exchange,id,override,public,string,to,string,return,exchange,id
ExpressionBuilder -> public static Expression exchangeIdExpression();1549910857;Returns an Expression for the exchange id;public static Expression exchangeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getExchangeId()__            }__            @Override_            public String toString() {_                return "exchangeId"__            }_        }__    };returns,an,expression,for,the,exchange,id;public,static,expression,exchange,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,exchange,id,override,public,string,to,string,return,exchange,id
ExpressionBuilder -> public static Expression exchangeIdExpression();1549911461;Returns an Expression for the exchange id;public static Expression exchangeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getExchangeId()__            }__            @Override_            public String toString() {_                return "exchangeId"__            }_        }__    };returns,an,expression,for,the,exchange,id;public,static,expression,exchange,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,exchange,id,override,public,string,to,string,return,exchange,id
ExpressionBuilder -> public static Expression exchangeIdExpression();1549967332;Returns an Expression for the exchange id;public static Expression exchangeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getExchangeId()__            }__            @Override_            public String toString() {_                return "exchangeId"__            }_        }__    };returns,an,expression,for,the,exchange,id;public,static,expression,exchange,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,exchange,id,override,public,string,to,string,return,exchange,id
ExpressionBuilder -> public static Expression exchangeIdExpression();1549967797;Returns an Expression for the exchange id;public static Expression exchangeIdExpression() {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                return exchange.getExchangeId()__            }__            @Override_            public String toString() {_                return "exchangeId"__            }_        }__    };returns,an,expression,for,the,exchange,id;public,static,expression,exchange,id,expression,return,new,expression,adapter,public,object,evaluate,exchange,exchange,return,exchange,get,exchange,id,override,public,string,to,string,return,exchange,id
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Class<?> type);1549264559;Returns an expression which converts the given expression to the given type;public static Expression convertToExpression(final Expression expression, final Class<?> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (type != null) {_                    return expression.evaluate(exchange, type)__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type;public,static,expression,convert,to,expression,final,expression,expression,final,class,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,type,null,return,expression,evaluate,exchange,type,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Class<?> type);1549910857;Returns an expression which converts the given expression to the given type;public static Expression convertToExpression(final Expression expression, final Class<?> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (type != null) {_                    return expression.evaluate(exchange, type)__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type;public,static,expression,convert,to,expression,final,expression,expression,final,class,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,type,null,return,expression,evaluate,exchange,type,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Class<?> type);1549911461;Returns an expression which converts the given expression to the given type;public static Expression convertToExpression(final Expression expression, final Class<?> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (type != null) {_                    return expression.evaluate(exchange, type)__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type;public,static,expression,convert,to,expression,final,expression,expression,final,class,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,type,null,return,expression,evaluate,exchange,type,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Class<?> type);1549967332;Returns an expression which converts the given expression to the given type;public static Expression convertToExpression(final Expression expression, final Class<?> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (type != null) {_                    return expression.evaluate(exchange, type)__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type;public,static,expression,convert,to,expression,final,expression,expression,final,class,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,type,null,return,expression,evaluate,exchange,type,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression convertToExpression(final Expression expression, final Class<?> type);1549967797;Returns an expression which converts the given expression to the given type;public static Expression convertToExpression(final Expression expression, final Class<?> type) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                if (type != null) {_                    return expression.evaluate(exchange, type)__                } else {_                    return expression__                }_            }__            @Override_            public String toString() {_                return "" + expression__            }_        }__    };returns,an,expression,which,converts,the,given,expression,to,the,given,type;public,static,expression,convert,to,expression,final,expression,expression,final,class,type,return,new,expression,adapter,public,object,evaluate,exchange,exchange,if,type,null,return,expression,evaluate,exchange,type,else,return,expression,override,public,string,to,string,return,expression
ExpressionBuilder -> public static Expression randomExpression(final String min, final String max);1549264559;Returns a random number between min and max (exclusive);public static Expression randomExpression(final String min, final String max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                int num1 = simpleExpression(min).evaluate(exchange, Integer.class)__                int num2 = simpleExpression(max).evaluate(exchange, Integer.class)__                Random random = new Random()__                int randomNum = random.nextInt(num2 - num1) + num1__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,string,min,final,string,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,int,num1,simple,expression,min,evaluate,exchange,integer,class,int,num2,simple,expression,max,evaluate,exchange,integer,class,random,random,new,random,int,random,num,random,next,int,num2,num1,num1,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final String min, final String max);1549910857;Returns a random number between min and max (exclusive);public static Expression randomExpression(final String min, final String max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                int num1 = simpleExpression(min).evaluate(exchange, Integer.class)__                int num2 = simpleExpression(max).evaluate(exchange, Integer.class)__                Random random = new Random()__                int randomNum = random.nextInt(num2 - num1) + num1__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,string,min,final,string,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,int,num1,simple,expression,min,evaluate,exchange,integer,class,int,num2,simple,expression,max,evaluate,exchange,integer,class,random,random,new,random,int,random,num,random,next,int,num2,num1,num1,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final String min, final String max);1549911461;Returns a random number between min and max (exclusive);public static Expression randomExpression(final String min, final String max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                int num1 = simpleExpression(min).evaluate(exchange, Integer.class)__                int num2 = simpleExpression(max).evaluate(exchange, Integer.class)__                Random random = new Random()__                int randomNum = random.nextInt(num2 - num1) + num1__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,string,min,final,string,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,int,num1,simple,expression,min,evaluate,exchange,integer,class,int,num2,simple,expression,max,evaluate,exchange,integer,class,random,random,new,random,int,random,num,random,next,int,num2,num1,num1,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final String min, final String max);1549967332;Returns a random number between min and max (exclusive);public static Expression randomExpression(final String min, final String max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                int num1 = simpleExpression(min).evaluate(exchange, Integer.class)__                int num2 = simpleExpression(max).evaluate(exchange, Integer.class)__                Random random = new Random()__                int randomNum = random.nextInt(num2 - num1) + num1__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,string,min,final,string,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,int,num1,simple,expression,min,evaluate,exchange,integer,class,int,num2,simple,expression,max,evaluate,exchange,integer,class,random,random,new,random,int,random,num,random,next,int,num2,num1,num1,return,random,num,override,public,string,to,string,return,random,min,max
ExpressionBuilder -> public static Expression randomExpression(final String min, final String max);1549967797;Returns a random number between min and max (exclusive);public static Expression randomExpression(final String min, final String max) {_        return new ExpressionAdapter() {_            public Object evaluate(Exchange exchange) {_                int num1 = simpleExpression(min).evaluate(exchange, Integer.class)__                int num2 = simpleExpression(max).evaluate(exchange, Integer.class)__                Random random = new Random()__                int randomNum = random.nextInt(num2 - num1) + num1__                return randomNum__            }__            @Override_            public String toString() {_                return "random(" + min + "," + max + ")"__            }_        }__    };returns,a,random,number,between,min,and,max,exclusive;public,static,expression,random,expression,final,string,min,final,string,max,return,new,expression,adapter,public,object,evaluate,exchange,exchange,int,num1,simple,expression,min,evaluate,exchange,integer,class,int,num2,simple,expression,max,evaluate,exchange,integer,class,random,random,new,random,int,random,num,random,next,int,num2,num1,num1,return,random,num,override,public,string,to,string,return,random,min,max
