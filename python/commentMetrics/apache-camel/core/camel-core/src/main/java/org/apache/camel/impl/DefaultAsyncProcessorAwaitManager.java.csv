# id;timestamp;commentText;codeText;commentWords;codeWords
DefaultAsyncProcessorAwaitManager -> public void process(final AsyncProcessor processor, final Exchange exchange);1549264559;Calls the async version of the processor's process method and waits_for it to complete before returning. This can be used by {@link AsyncProcessor}_objects to implement their sync version of the process method._<p/>_<b>Important:</b> This method is discouraged to be used, as its better to invoke the asynchronous_{@link AsyncProcessor#process(org.apache.camel.Exchange, org.apache.camel.AsyncCallback)} method, whenever possible.__@param processor the processor_@param exchange  the exchange_@throws Exception can be thrown if waiting is interrupted;public void process(final AsyncProcessor processor, final Exchange exchange) {_        CountDownLatch latch = new CountDownLatch(1)__        processor.process(exchange, doneSync -> countDown(exchange, latch))__        if (latch.getCount() > 0) {_            await(exchange, latch)__        }_    };calls,the,async,version,of,the,processor,s,process,method,and,waits,for,it,to,complete,before,returning,this,can,be,used,by,link,async,processor,objects,to,implement,their,sync,version,of,the,process,method,p,b,important,b,this,method,is,discouraged,to,be,used,as,its,better,to,invoke,the,asynchronous,link,async,processor,process,org,apache,camel,exchange,org,apache,camel,async,callback,method,whenever,possible,param,processor,the,processor,param,exchange,the,exchange,throws,exception,can,be,thrown,if,waiting,is,interrupted;public,void,process,final,async,processor,processor,final,exchange,exchange,count,down,latch,latch,new,count,down,latch,1,processor,process,exchange,done,sync,count,down,exchange,latch,if,latch,get,count,0,await,exchange,latch
DefaultAsyncProcessorAwaitManager -> public void process(final AsyncProcessor processor, final Exchange exchange);1549967332;Calls the async version of the processor's process method and waits_for it to complete before returning. This can be used by {@link AsyncProcessor}_objects to implement their sync version of the process method._<p/>_<b>Important:</b> This method is discouraged to be used, as its better to invoke the asynchronous_{@link AsyncProcessor#process(org.apache.camel.Exchange, org.apache.camel.AsyncCallback)} method, whenever possible.__@param processor the processor_@param exchange  the exchange_@throws Exception can be thrown if waiting is interrupted;public void process(final AsyncProcessor processor, final Exchange exchange) {_        CountDownLatch latch = new CountDownLatch(1)__        processor.process(exchange, doneSync -> countDown(exchange, latch))__        if (latch.getCount() > 0) {_            await(exchange, latch)__        }_    };calls,the,async,version,of,the,processor,s,process,method,and,waits,for,it,to,complete,before,returning,this,can,be,used,by,link,async,processor,objects,to,implement,their,sync,version,of,the,process,method,p,b,important,b,this,method,is,discouraged,to,be,used,as,its,better,to,invoke,the,asynchronous,link,async,processor,process,org,apache,camel,exchange,org,apache,camel,async,callback,method,whenever,possible,param,processor,the,processor,param,exchange,the,exchange,throws,exception,can,be,thrown,if,waiting,is,interrupted;public,void,process,final,async,processor,processor,final,exchange,exchange,count,down,latch,latch,new,count,down,latch,1,processor,process,exchange,done,sync,count,down,exchange,latch,if,latch,get,count,0,await,exchange,latch
DefaultAsyncProcessorAwaitManager -> public void process(final AsyncProcessor processor, final Exchange exchange);1549967797;Calls the async version of the processor's process method and waits_for it to complete before returning. This can be used by {@link AsyncProcessor}_objects to implement their sync version of the process method._<p/>_<b>Important:</b> This method is discouraged to be used, as its better to invoke the asynchronous_{@link AsyncProcessor#process(org.apache.camel.Exchange, org.apache.camel.AsyncCallback)} method, whenever possible.__@param processor the processor_@param exchange  the exchange_@throws Exception can be thrown if waiting is interrupted;public void process(final AsyncProcessor processor, final Exchange exchange) {_        CountDownLatch latch = new CountDownLatch(1)__        processor.process(exchange, doneSync -> countDown(exchange, latch))__        if (latch.getCount() > 0) {_            await(exchange, latch)__        }_    };calls,the,async,version,of,the,processor,s,process,method,and,waits,for,it,to,complete,before,returning,this,can,be,used,by,link,async,processor,objects,to,implement,their,sync,version,of,the,process,method,p,b,important,b,this,method,is,discouraged,to,be,used,as,its,better,to,invoke,the,asynchronous,link,async,processor,process,org,apache,camel,exchange,org,apache,camel,async,callback,method,whenever,possible,param,processor,the,processor,param,exchange,the,exchange,throws,exception,can,be,thrown,if,waiting,is,interrupted;public,void,process,final,async,processor,processor,final,exchange,exchange,count,down,latch,latch,new,count,down,latch,1,processor,process,exchange,done,sync,count,down,exchange,latch,if,latch,get,count,0,await,exchange,latch
