commented;modifiers;parameterAmount;loc;comment;code
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     if (delegate == null) {         throw new IllegalStateException("Not started").     }     delegate.process(exchange). }
false;public;2;22;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     if (delegate == null) {         exchange.setException(new IllegalStateException("Not started")).         callback.done(true).         return true.     }     if (delegate instanceof AsyncProcessor) {         return ((AsyncProcessor) delegate).process(exchange, callback).     }     // fallback to sync mode     try {         process(exchange).     } catch (Exception e) {         exchange.setException(e).     }     callback.done(true).     return true. }
false;public;1;6;;@Override public CompletableFuture<Exchange> processAsync(Exchange exchange) {     AsyncCallbackToCompletableFutureAdapter<Exchange> callback = new AsyncCallbackToCompletableFutureAdapter<>(exchange).     process(exchange, callback).     return callback.getFuture(). }
false;protected;0;8;;@Override protected void doStart() throws Exception {     // need to lookup endpoint again as it may be intercepted     Endpoint lookup = endpoint.getCamelContext().getEndpoint(endpoint.getEndpointUri()).     delegate = lookup.createProducer().     ServiceHelper.startService(delegate). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     ServiceHelper.stopService(delegate). }
false;public;0;9;;@Override public boolean isSingleton() {     if (delegate != null) {         return delegate.isSingleton().     } else {         // assume singleton by default         return true.     } }
false;public;0;8;;@Override public Endpoint getEndpoint() {     if (delegate != null) {         return delegate.getEndpoint().     } else {         return endpoint.     } }
false;public;0;8;;@Override public String toString() {     if (delegate != null) {         return delegate.toString().     } else {         return "DelegateProducer[" + endpoint + "]".     } }
