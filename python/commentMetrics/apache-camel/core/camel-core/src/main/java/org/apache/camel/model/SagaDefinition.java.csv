commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isAbstract() {     return true. }
false;public;0;4;;@Override public boolean isTopLevelOnly() {     return true. }
false;public;0;4;;@Override public boolean isWrappingEntireOutput() {     return true. }
false;public;0;9;;@Override public String getLabel() {     String desc = description().     if (ObjectHelper.isEmpty(desc)) {         return "saga".     } else {         return "saga[" + desc + "]".     } }
false;public;0;9;;@Override public String toString() {     String desc = description().     if (ObjectHelper.isEmpty(desc)) {         return "Saga -> [" + outputs + "]".     } else {         return "Saga[" + desc + "] -> [" + outputs + "]".     } }
false;public;0;3;;// Properties public SagaActionUriDefinition getCompensation() {     return compensation. }
true;public;1;3;/**  * The compensation endpoint URI that must be called to compensate all changes done in the route.  * The route corresponding to the compensation URI must perform compensation and complete without error.  *  * If errors occur during compensation, the saga service may call again the compensation URI to retry.  */ ;/**  * The compensation endpoint URI that must be called to compensate all changes done in the route.  * The route corresponding to the compensation URI must perform compensation and complete without error.  *  * If errors occur during compensation, the saga service may call again the compensation URI to retry.  */ public void setCompensation(SagaActionUriDefinition compensation) {     this.compensation = compensation. }
false;public;0;3;;public SagaActionUriDefinition getCompletion() {     return completion. }
true;public;1;3;/**  * The completion endpoint URI that will be called when the Saga is completed successfully.  * The route corresponding to the completion URI must perform completion tasks and terminate without error.  *  * If errors occur during completion, the saga service may call again the completion URI to retry.  */ ;/**  * The completion endpoint URI that will be called when the Saga is completed successfully.  * The route corresponding to the completion URI must perform completion tasks and terminate without error.  *  * If errors occur during completion, the saga service may call again the completion URI to retry.  */ public void setCompletion(SagaActionUriDefinition completion) {     this.completion = completion. }
false;public;0;3;;public SagaPropagation getPropagation() {     return propagation. }
true;public;1;3;/**  * Set the Saga propagation mode (REQUIRED, REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER).  */ ;/**  * Set the Saga propagation mode (REQUIRED, REQUIRES_NEW, MANDATORY, SUPPORTS, NOT_SUPPORTED, NEVER).  */ public void setPropagation(SagaPropagation propagation) {     this.propagation = propagation. }
false;public;0;3;;public SagaCompletionMode getCompletionMode() {     return completionMode. }
true;public;1;3;/**  * Determine how the saga should be considered complete. When set to AUTO, the saga is completed when the exchange that  * initiates the saga is processed successfully, or compensated when it completes exceptionally.  *  * When set to MANUAL, the user must complete or compensate the saga using the "saga:complete" or "saga:compensate" endpoints.  */ ;/**  * Determine how the saga should be considered complete. When set to AUTO, the saga is completed when the exchange that  * initiates the saga is processed successfully, or compensated when it completes exceptionally.  *  * When set to MANUAL, the user must complete or compensate the saga using the "saga:complete" or "saga:compensate" endpoints.  */ public void setCompletionMode(SagaCompletionMode completionMode) {     this.completionMode = completionMode. }
false;public;0;3;;public CamelSagaService getSagaService() {     return sagaService. }
false;public;1;3;;public void setSagaService(CamelSagaService sagaService) {     this.sagaService = sagaService. }
false;public;0;3;;public List<SagaOptionDefinition> getOptions() {     return options. }
true;public;1;3;/**  * Allows to save properties of the current exchange in order to re-use them in a compensation/completion callback route.  * Options are usually helpful e.g. to store and retrieve identifiers of objects that should be deleted in compensating actions.  *  * Option values will be transformed into input headers of the compensation/completion exchange.  */ ;/**  * Allows to save properties of the current exchange in order to re-use them in a compensation/completion callback route.  * Options are usually helpful e.g. to store and retrieve identifiers of objects that should be deleted in compensating actions.  *  * Option values will be transformed into input headers of the compensation/completion exchange.  */ public void setOptions(List<SagaOptionDefinition> options) {     this.options = options. }
false;public;0;3;;public Long getTimeoutInMilliseconds() {     return timeoutInMilliseconds. }
true;public;1;3;/**  * Set the maximum amount of time for the Saga. After the timeout is expired, the saga will be compensated  * automatically (unless a different decision has been taken in the meantime).  */ ;/**  * Set the maximum amount of time for the Saga. After the timeout is expired, the saga will be compensated  * automatically (unless a different decision has been taken in the meantime).  */ public void setTimeoutInMilliseconds(Long timeoutInMilliseconds) {     this.timeoutInMilliseconds = timeoutInMilliseconds. }
false;private;2;6;;private void addOption(String option, Expression expression) {     if (this.options == null) {         this.options = new ArrayList<>().     }     this.options.add(new SagaOptionDefinition(option, expression)). }
false;public;1;7;;// Builders public SagaDefinition compensation(String compensation) {     if (this.compensation != null) {         throw new IllegalStateException("Compensation has already been set").     }     this.compensation = new SagaActionUriDefinition(compensation).     return this. }
false;public;1;7;;public SagaDefinition completion(String completion) {     if (this.completion != null) {         throw new IllegalStateException("Completion has already been set").     }     this.completion = new SagaActionUriDefinition(completion).     return this. }
false;public;1;4;;public SagaDefinition propagation(SagaPropagation propagation) {     setPropagation(propagation).     return this. }
false;public;1;4;;public SagaDefinition sagaService(CamelSagaService sagaService) {     setSagaService(sagaService).     return this. }
false;public;1;4;;public SagaDefinition completionMode(SagaCompletionMode completionMode) {     setCompletionMode(completionMode).     return this. }
false;public;2;4;;public SagaDefinition option(String option, Expression expression) {     addOption(option, expression).     return this. }
false;public;2;4;;public SagaDefinition timeout(long timeout, TimeUnit unit) {     setTimeoutInMilliseconds(unit.toMillis(timeout)).     return this. }
false;protected;0;7;;// Utils protected String description() {     StringBuilder desc = new StringBuilder().     addField(desc, "compensation", compensation).     addField(desc, "completion", completion).     addField(desc, "propagation", propagation).     return desc.toString(). }
false;private;3;9;;private void addField(StringBuilder builder, String key, Object value) {     if (value == null) {         return.     }     if (builder.length() > 0) {         builder.append(',').     }     builder.append(key).append(':').append(value). }
