commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getId() {     return id. }
false;public;0;4;;@Override public String getName() {     return name. }
false;public;0;4;;@Override public String getHost() {     return host. }
false;public;0;4;;@Override public int getPort() {     return port. }
false;public;0;4;;@Override public ServiceHealth getHealth() {     return health. }
false;public;0;4;;@Override public Map<String, String> getMetadata() {     return this.meta. }
false;public;0;4;;@Override public String toString() {     return "DefaultServiceDefinition[" + id + "]". }
false;public;1;15;;@Override public boolean equals(Object o) {     if (this == o) {         return true.     }     if (o == null || getClass() != o.getClass()) {         return false.     }     DefaultServiceDefinition that = (DefaultServiceDefinition) o.     return getPort() == that.getPort() && Objects.equals(getId(), that.getId()) && Objects.equals(getName(), that.getName()) && Objects.equals(getHost(), that.getHost()). }
false;public;0;4;;@Override public int hashCode() {     return Objects.hash(getId(), getName(), getHost(), getPort()). }
false;public,static;1;28;;// *************************** // Builder // *************************** public static Stream<? extends ServiceDefinition> parse(String serverString) {     return Stream.of(serverString.split(",")).map(part -> {         String serviceId = null.         String serviceName = StringHelper.before(part, "@").         if (serviceName != null) {             serviceId = StringHelper.before(serviceName, "/").             serviceName = StringHelper.after(serviceName, "/").             if (serviceName == null) {                 serviceName = StringHelper.before(part, "@").             }             part = StringHelper.after(part, "@").         }         String serviceHost = StringHelper.before(part, ":").         String servicePort = StringHelper.after(part, ":").         if (ObjectHelper.isNotEmpty(serviceHost) && ObjectHelper.isNotEmpty(servicePort)) {             return new DefaultServiceDefinition(serviceId, serviceName, serviceHost, Integer.valueOf(servicePort)).         }         return null.     }).filter(Objects::nonNull). }
false;public,static;0;3;;public static Builder builder() {     return new Builder(). }
false;public;1;10;;public Builder from(ServiceDefinition source) {     withId(source.getId()).     withName(source.getName()).     withHost(source.getHost()).     withPort(source.getPort()).     withMeta(source.getMetadata()).     withHealth(source.getHealth()).     return this. }
false;public;1;16;;public Builder from(Map<String, String> properties) {     ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_ID), this::withId).     ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_NAME), this::withName).     ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_HOST), this::withHost).     ObjectHelper.ifNotEmpty(properties.get(ServiceDefinition.SERVICE_META_PORT), this::withPort).     for (Map.Entry<String, String> entry : properties.entrySet()) {         if (!entry.getKey().startsWith(ServiceDefinition.SERVICE_META_PREFIX)) {             continue.         }         addMeta(entry.getKey(), entry.getValue()).     }     return this. }
false;public;1;4;;public Builder withId(String id) {     this.id = id.     return this. }
false;public;0;3;;public String id() {     return id. }
false;public;1;4;;public Builder withName(String name) {     this.name = name.     return this. }
false;public;0;3;;public String name() {     return name. }
false;public;1;4;;public Builder withHost(String host) {     this.host = host.     return this. }
false;public;0;3;;public String host() {     return host. }
false;public;1;4;;public Builder withPort(Integer port) {     this.port = port.     return this. }
false;public;1;7;;public Builder withPort(String port) {     if (port != null) {         withPort(Integer.parseInt(port)).     }     return this. }
false;public;0;3;;public Integer port() {     return port. }
false;public;1;4;;public Builder withMeta(Map<String, String> meta) {     this.meta = new HashMap<>(meta).     return this. }
false;public;2;9;;public Builder addMeta(String key, String val) {     if (this.meta == null) {         this.meta = new HashMap<>().     }     this.meta.put(key, val).     return this. }
false;public;1;9;;public Builder addAllMeta(Map<String, String> meta) {     if (this.meta == null) {         this.meta = new HashMap<>().     }     this.meta.putAll(meta).     return this. }
false;public;0;3;;public Map<String, String> meta() {     return meta. }
false;public;1;5;;public Builder withHealth(ServiceHealth health) {     this.health = health.     return this. }
false;public;0;3;;public ServiceHealth health() {     return health. }
false;public;0;3;;public ServiceDefinition build() {     return new DefaultServiceDefinition(id, name, host, port != null ? port : -1, meta, health). }
