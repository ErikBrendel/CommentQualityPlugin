commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public int getMaxMessages() {     return maxMessages. }
true;public;1;3;/**  * Maximum number of messages to process before the action is triggered  */ ;/**  * Maximum number of messages to process before the action is triggered  */ public void setMaxMessages(int maxMessages) {     this.maxMessages = maxMessages. }
false;public;0;3;;public int getMaxSeconds() {     return maxSeconds. }
true;public;1;3;/**  * Maximum seconds Camel is running before the action is triggered  */ ;/**  * Maximum seconds Camel is running before the action is triggered  */ public void setMaxSeconds(int maxSeconds) {     this.maxSeconds = maxSeconds. }
false;public;0;3;;public Action getAction() {     return action. }
true;public;1;3;/**  * What action to perform when maximum is triggered.  */ ;/**  * What action to perform when maximum is triggered.  */ public void setAction(Action action) {     this.action = action. }
false;public;1;22;;@Override public void onInit(Route route) {     super.onInit(route).     ObjectHelper.notNull(camelContext, "camelContext", this).     if (maxMessages == 0 && maxSeconds == 0) {         throw new IllegalArgumentException("The options maxMessages or maxSeconds must be configured").     }     if (routeId == null) {         this.routeId = route.getId().     }     if (executorService == null) {         executorService = camelContext.getExecutorServiceManager().newSingleThreadScheduledExecutor(this, "DurationRoutePolicy[" + routeId + "]").     }     if (maxSeconds > 0) {         task = performMaxDurationAction().     } }
false;public;2;13;;@Override public void onExchangeDone(Route route, Exchange exchange) {     doneMessages++.     if (maxMessages > 0 && doneMessages >= maxMessages) {         if (actionDone.compareAndSet(false, true)) {             performMaxMessagesAction().             if (task != null && !task.isDone()) {                 task.cancel(false).             }         }     } }
false;protected;0;11;;@Override protected void doStop() throws Exception {     if (task != null && !task.isDone()) {         task.cancel(false).     }     if (executorService != null) {         getCamelContext().getExecutorServiceManager().shutdownNow(executorService).         executorService = null.     } }
false;protected;0;3;;protected void performMaxMessagesAction() {     executorService.submit(createTask(true)). }
false;protected;0;3;;protected ScheduledFuture performMaxDurationAction() {     return executorService.schedule(createTask(false), maxSeconds, TimeUnit.SECONDS). }
false;private;1;28;;private Runnable createTask(boolean maxMessagesHit) {     return () -> {         try {             String tail.             if (maxMessagesHit) {                 tail = " due max messages " + getMaxMessages() + " processed".             } else {                 tail = " due max seconds " + getMaxSeconds().             }             if (action == Action.STOP_CAMEL_CONTEXT) {                 log.info("Stopping CamelContext {}", tail).                 camelContext.stop().             } else if (action == Action.STOP_ROUTE) {                 log.info("Stopping route: {}{}", routeId, tail).                 camelContext.getRouteController().stopRoute(routeId).             } else if (action == Action.SUSPEND_ROUTE) {                 log.info("Suspending route: {}{}", routeId, tail).                 camelContext.getRouteController().suspendRoute(routeId).             } else if (action == Action.SUSPEND_ALL_ROUTES) {                 log.info("Suspending all routes {}", tail).                 camelContext.suspend().             }         } catch (Throwable e) {             log.warn("Error performing action: {}", action, e).         }     }. }
