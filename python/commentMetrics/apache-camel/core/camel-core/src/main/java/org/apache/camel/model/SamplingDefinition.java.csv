commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getShortName() {     return "sample". }
false;public;0;4;;@Override public String toString() {     return "Sample[" + description() + " -> " + getOutputs() + "]". }
false;protected;0;8;;protected String description() {     if (messageFrequency != null) {         return "1 Exchange per " + getMessageFrequency() + " messages received".     } else {         TimeUnit tu = getUnits() != null ? getUnits() : TimeUnit.SECONDS.         return "1 Exchange per " + getSamplePeriod() + " " + tu.toString().toLowerCase(Locale.ENGLISH).     } }
false;public;0;4;;@Override public String getLabel() {     return "sample[" + description() + "]". }
true;public;1;4;/**  * Sets the sample message count which only a single {@link org.apache.camel.Exchange} will pass through after this many received.  *  * @param messageFrequency  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Sets the sample message count which only a single {@link org.apache.camel.Exchange} will pass through after this many received.  *  * @param messageFrequency  * @return the builder  */ public SamplingDefinition sampleMessageFrequency(long messageFrequency) {     setMessageFrequency(messageFrequency).     return this. }
true;public;1;4;/**  * Sets the sample period during which only a single {@link org.apache.camel.Exchange} will pass through.  *  * @param samplePeriod the period  * @return the builder  */ ;/**  * Sets the sample period during which only a single {@link org.apache.camel.Exchange} will pass through.  *  * @param samplePeriod the period  * @return the builder  */ public SamplingDefinition samplePeriod(long samplePeriod) {     setSamplePeriod(samplePeriod).     return this. }
true;public;1;4;/**  * Sets the time units for the sample period, defaulting to seconds.  *  * @param units the time unit of the sample period.  * @return the builder  */ ;/**  * Sets the time units for the sample period, defaulting to seconds.  *  * @param units the time unit of the sample period.  * @return the builder  */ public SamplingDefinition timeUnits(TimeUnit units) {     setUnits(units).     return this. }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public Long getSamplePeriod() {     return samplePeriod. }
true;public;1;3;/**  * Sets the sample period during which only a single Exchange will pass through.  */ ;/**  * Sets the sample period during which only a single Exchange will pass through.  */ public void setSamplePeriod(Long samplePeriod) {     this.samplePeriod = samplePeriod. }
false;public;0;3;;public Long getMessageFrequency() {     return messageFrequency. }
true;public;1;3;/**  * Sets the sample message count which only a single Exchange will pass through after this many received.  */ ;/**  * Sets the sample message count which only a single Exchange will pass through after this many received.  */ public void setMessageFrequency(Long messageFrequency) {     this.messageFrequency = messageFrequency. }
true;public;1;3;/**  * Sets the time units for the sample period, defaulting to seconds.  */ ;/**  * Sets the time units for the sample period, defaulting to seconds.  */ public void setUnits(String units) {     this.units = TimeUnit.valueOf(units). }
true;public;1;3;/**  * Sets the time units for the sample period, defaulting to seconds.  */ ;/**  * Sets the time units for the sample period, defaulting to seconds.  */ public void setUnits(TimeUnit units) {     this.units = units. }
false;public;0;3;;public TimeUnit getUnits() {     return units. }
