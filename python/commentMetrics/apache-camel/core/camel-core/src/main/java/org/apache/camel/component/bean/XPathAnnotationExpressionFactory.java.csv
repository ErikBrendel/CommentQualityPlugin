commented;modifiers;parameterAmount;loc;comment;code
false;public;4;25;;@Override public Expression createExpression(CamelContext camelContext, Annotation annotation, LanguageAnnotation languageAnnotation, Class<?> expressionReturnType) {     String xpath = getExpressionFromAnnotation(annotation).     Class<?> resultType = getResultType(annotation).     if (resultType.equals(Object.class)) {         resultType = expressionReturnType.     }     XPathBuilder builder = XPathBuilder.xpath(xpath, resultType).     NamespacePrefix[] namespaces = getExpressionNameSpacePrefix(annotation).     if (namespaces != null) {         for (NamespacePrefix namespacePrefix : namespaces) {             builder = builder.namespace(namespacePrefix.prefix(), namespacePrefix.uri()).         }     }     // Set the header name that we want the XPathBuilder to apply the XPath expression to     String headerName = getHeaderName(annotation).     if (ObjectHelper.isNotEmpty(headerName)) {         builder.setHeaderName(headerName).     }     return builder. }
false;protected;1;3;;protected Class<?> getResultType(Annotation annotation) {     return (Class<?>) getAnnotationObjectValue(annotation, "resultType"). }
false;protected;1;3;;protected NamespacePrefix[] getExpressionNameSpacePrefix(Annotation annotation) {     return (NamespacePrefix[]) getAnnotationObjectValue(annotation, "namespaces"). }
true;protected;1;9;/**  * Extracts the value of the header method in the Annotation. For backwards  * compatibility this method will return null if the annotation's method is  * not found.  *  * @return If the annotation has the method 'header' then the name of the  *         header we want to apply the XPath expression to. Otherwise null  *         will be returned  */ ;/**  * Extracts the value of the header method in the Annotation. For backwards  * compatibility this method will return null if the annotation's method is  * not found.  *  * @return If the annotation has the method 'header' then the name of the  *         header we want to apply the XPath expression to. Otherwise null  *         will be returned  */ protected String getHeaderName(Annotation annotation) {     String headerValue = null.     try {         headerValue = (String) getAnnotationObjectValue(annotation, "headerName").     } catch (Exception e) {     // Do Nothing     }     return headerValue. }
