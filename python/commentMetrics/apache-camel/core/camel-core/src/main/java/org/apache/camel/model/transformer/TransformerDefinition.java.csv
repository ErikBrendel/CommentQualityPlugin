commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getScheme() {     return scheme. }
true;public;1;3;/**  * Set a scheme name supported by the transformer.  * If you specify 'csv', the transformer will be picked up for all of 'csv' from/to  * Java transformation. Note that the scheme matching is performed only when  * no exactly matched transformer exists.  *  * @param scheme scheme name  */ ;/**  * Set a scheme name supported by the transformer.  * If you specify 'csv', the transformer will be picked up for all of 'csv' from/to  * Java transformation. Note that the scheme matching is performed only when  * no exactly matched transformer exists.  *  * @param scheme scheme name  */ public void setScheme(String scheme) {     this.scheme = scheme. }
false;public;0;3;;public String getFromType() {     return fromType. }
true;public;1;3;/**  * Set the 'from' data type name.  * If you specify 'xml:XYZ', the transformer will be picked up if source type is  * 'xml:XYZ'. If you specify just 'xml', the transformer matches with all of  * 'xml' source type like 'xml:ABC' or 'xml:DEF'.  *  * @param from 'from' data type name  */ ;/**  * Set the 'from' data type name.  * If you specify 'xml:XYZ', the transformer will be picked up if source type is  * 'xml:XYZ'. If you specify just 'xml', the transformer matches with all of  * 'xml' source type like 'xml:ABC' or 'xml:DEF'.  *  * @param from 'from' data type name  */ public void setFromType(String from) {     this.fromType = from. }
true;public;1;3;/**  * Set the 'from' data type using Java class.  *  * @param clazz 'from' Java class  */ ;/**  * Set the 'from' data type using Java class.  *  * @param clazz 'from' Java class  */ public void setFromType(Class<?> clazz) {     this.fromType = new DataType(clazz).toString(). }
false;public;0;3;;public String getToType() {     return toType. }
true;public;1;3;/**  * Set the 'to' data type name.  * If you specify 'json:XYZ', the transformer will be picked up if destination type is  * 'json:XYZ'. If you specify just 'json', the transformer matches with all of  * 'json' destination type like 'json:ABC' or 'json:DEF'.  *  * @param to 'to' data type name  */ ;/**  * Set the 'to' data type name.  * If you specify 'json:XYZ', the transformer will be picked up if destination type is  * 'json:XYZ'. If you specify just 'json', the transformer matches with all of  * 'json' destination type like 'json:ABC' or 'json:DEF'.  *  * @param to 'to' data type name  */ public void setToType(String to) {     this.toType = to. }
true;public;1;3;/**  * Set the 'to' data type using Java class.  *  * @param clazz 'to' Java class  */ ;/**  * Set the 'to' data type using Java class.  *  * @param clazz 'to' Java class  */ public void setToType(Class<?> clazz) {     this.toType = new DataType(clazz).toString(). }
