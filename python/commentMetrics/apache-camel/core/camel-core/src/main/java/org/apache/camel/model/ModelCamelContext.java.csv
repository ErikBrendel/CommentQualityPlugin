commented;modifiers;parameterAmount;loc;comment;code
true;;0;1;/**  * Returns a list of the current route definitions  *  * @return list of the current route definitions  */ ;/**  * Returns a list of the current route definitions  *  * @return list of the current route definitions  */ List<RouteDefinition> getRouteDefinitions().
true;;1;1;/**  * Gets the route definition with the given id  *  * @param id id of the route  * @return the route definition or <tt>null</tt> if not found  */ ;/**  * Gets the route definition with the given id  *  * @param id id of the route  * @return the route definition or <tt>null</tt> if not found  */ RouteDefinition getRouteDefinition(String id).
true;;1;1;/**  * Loads a collection of route definitions from the given {@link java.io.InputStream}.  *  * @param is input stream with the route(s) definition to add  * @return the route definitions  * @throws Exception if the route definitions could not be loaded for whatever reason  */ ;/**  * Loads a collection of route definitions from the given {@link java.io.InputStream}.  *  * @param is input stream with the route(s) definition to add  * @return the route definitions  * @throws Exception if the route definitions could not be loaded for whatever reason  */ RoutesDefinition loadRoutesDefinition(InputStream is) throws Exception.
true;;1;1;/**  * Loads a collection of rest definitions from the given {@link java.io.InputStream}.  *  * @param is input stream with the rest(s) definition to add  * @return the rest definitions  * @throws Exception if the rest definitions could not be loaded for whatever reason  */ ;/**  * Loads a collection of rest definitions from the given {@link java.io.InputStream}.  *  * @param is input stream with the rest(s) definition to add  * @return the rest definitions  * @throws Exception if the rest definitions could not be loaded for whatever reason  */ RestsDefinition loadRestsDefinition(InputStream is) throws Exception.
true;;1;1;/**  * Adds a collection of route definitions to the context  * <p/>  * <b>Important: </b> Each route in the same {@link org.apache.camel.CamelContext} must have an <b>unique</b> route id.  * If you use the API from {@link org.apache.camel.CamelContext} or {@link org.apache.camel.model.ModelCamelContext} to add routes, then any  * new routes which has a route id that matches an old route, then the old route is replaced by the new route.  *  * @param routeDefinitions the route(s) definition to add  * @throws Exception if the route definitions could not be created for whatever reason  */ ;/**  * Adds a collection of route definitions to the context  * <p/>  * <b>Important: </b> Each route in the same {@link org.apache.camel.CamelContext} must have an <b>unique</b> route id.  * If you use the API from {@link org.apache.camel.CamelContext} or {@link org.apache.camel.model.ModelCamelContext} to add routes, then any  * new routes which has a route id that matches an old route, then the old route is replaced by the new route.  *  * @param routeDefinitions the route(s) definition to add  * @throws Exception if the route definitions could not be created for whatever reason  */ void addRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception.
true;;1;1;/**  * Add a route definition to the context  * <p/>  * <b>Important: </b> Each route in the same {@link org.apache.camel.CamelContext} must have an <b>unique</b> route id.  * If you use the API from {@link org.apache.camel.CamelContext} or {@link org.apache.camel.model.ModelCamelContext} to add routes, then any  * new routes which has a route id that matches an old route, then the old route is replaced by the new route.  *  * @param routeDefinition the route definition to add  * @throws Exception if the route definition could not be created for whatever reason  */ ;/**  * Add a route definition to the context  * <p/>  * <b>Important: </b> Each route in the same {@link org.apache.camel.CamelContext} must have an <b>unique</b> route id.  * If you use the API from {@link org.apache.camel.CamelContext} or {@link org.apache.camel.model.ModelCamelContext} to add routes, then any  * new routes which has a route id that matches an old route, then the old route is replaced by the new route.  *  * @param routeDefinition the route definition to add  * @throws Exception if the route definition could not be created for whatever reason  */ void addRouteDefinition(RouteDefinition routeDefinition) throws Exception.
true;;1;1;/**  * Removes a collection of route definitions from the context - stopping any previously running  * routes if any of them are actively running  *  * @param routeDefinitions route(s) definitions to remove  * @throws Exception if the route definitions could not be removed for whatever reason  */ ;/**  * Removes a collection of route definitions from the context - stopping any previously running  * routes if any of them are actively running  *  * @param routeDefinitions route(s) definitions to remove  * @throws Exception if the route definitions could not be removed for whatever reason  */ void removeRouteDefinitions(Collection<RouteDefinition> routeDefinitions) throws Exception.
true;;1;1;/**  * Removes a route definition from the context - stopping any previously running  * routes if any of them are actively running  *  * @param routeDefinition route definition to remove  * @throws Exception if the route definition could not be removed for whatever reason  */ ;/**  * Removes a route definition from the context - stopping any previously running  * routes if any of them are actively running  *  * @param routeDefinition route definition to remove  * @throws Exception if the route definition could not be removed for whatever reason  */ void removeRouteDefinition(RouteDefinition routeDefinition) throws Exception.
true;;0;1;/**  * Returns a list of the current REST definitions  *  * @return list of the current REST definitions  */ ;/**  * Returns a list of the current REST definitions  *  * @return list of the current REST definitions  */ List<RestDefinition> getRestDefinitions().
true;;1;1;/**  * Adds a collection of rest definitions to the context  *  * @param restDefinitions the rest(s) definition to add  * @throws Exception if the rest definitions could not be created for whatever reason  */ ;/**  * Adds a collection of rest definitions to the context  *  * @param restDefinitions the rest(s) definition to add  * @throws Exception if the rest definitions could not be created for whatever reason  */ void addRestDefinitions(Collection<RestDefinition> restDefinitions) throws Exception.
true;;1;1;/**  * Sets the data formats that can be referenced in the routes.  *  * @param dataFormats the data formats  */ ;/**  * Sets the data formats that can be referenced in the routes.  *  * @param dataFormats the data formats  */ void setDataFormats(Map<String, DataFormatDefinition> dataFormats).
true;;0;1;/**  * Gets the data formats that can be referenced in the routes.  *  * @return the data formats available  */ ;/**  * Gets the data formats that can be referenced in the routes.  *  * @return the data formats available  */ Map<String, DataFormatDefinition> getDataFormats().
true;;1;1;/**  * Resolve a data format definition given its name  *  * @param name the data format definition name or a reference to it in the {@link org.apache.camel.spi.Registry}  * @return the resolved data format definition, or <tt>null</tt> if not found  */ ;/**  * Resolve a data format definition given its name  *  * @param name the data format definition name or a reference to it in the {@link org.apache.camel.spi.Registry}  * @return the resolved data format definition, or <tt>null</tt> if not found  */ DataFormatDefinition resolveDataFormatDefinition(String name).
true;;1;1;/**  * Gets the processor definition from any of the routes which with the given id  *  * @param id id of the processor definition  * @return the processor definition or <tt>null</tt> if not found  */ ;/**  * Gets the processor definition from any of the routes which with the given id  *  * @param id id of the processor definition  * @return the processor definition or <tt>null</tt> if not found  */ ProcessorDefinition getProcessorDefinition(String id).
true;;2;1;/**  * Gets the processor definition from any of the routes which with the given id  *  * @param id id of the processor definition  * @param type the processor definition type  * @return the processor definition or <tt>null</tt> if not found  * @throws java.lang.ClassCastException is thrown if the type is not correct type  */ ;/**  * Gets the processor definition from any of the routes which with the given id  *  * @param id id of the processor definition  * @param type the processor definition type  * @return the processor definition or <tt>null</tt> if not found  * @throws java.lang.ClassCastException is thrown if the type is not correct type  */ <T extends ProcessorDefinition> T getProcessorDefinition(String id, Class<T> type).
true;;1;1;/**  * Sets the validators that can be referenced in the routes.  *  * @param validators the validators  */ ;/**  * Sets the validators that can be referenced in the routes.  *  * @param validators the validators  */ void setValidators(List<ValidatorDefinition> validators).
true;;1;1;/**  * Gets the Hystrix configuration by the given name. If no name is given  * the default configuration is returned, see <tt>setHystrixConfiguration</tt>  *  * @param id id of the configuration, or <tt>null</tt> to return the default configuration  * @return the configuration, or <tt>null</tt> if no configuration has been registered  */ ;/**  * Gets the Hystrix configuration by the given name. If no name is given  * the default configuration is returned, see <tt>setHystrixConfiguration</tt>  *  * @param id id of the configuration, or <tt>null</tt> to return the default configuration  * @return the configuration, or <tt>null</tt> if no configuration has been registered  */ HystrixConfigurationDefinition getHystrixConfiguration(String id).
true;;1;1;/**  * Sets the default Hystrix configuration  *  * @param configuration the configuration  */ ;/**  * Sets the default Hystrix configuration  *  * @param configuration the configuration  */ void setHystrixConfiguration(HystrixConfigurationDefinition configuration).
true;;1;1;/**  * Sets the Hystrix configurations  *  * @param configurations the configuration list  */ ;/**  * Sets the Hystrix configurations  *  * @param configurations the configuration list  */ void setHystrixConfigurations(List<HystrixConfigurationDefinition> configurations).
true;;2;1;/**  * Adds the Hystrix configuration  *  * @param id name of the configuration  * @param configuration the configuration  */ ;/**  * Adds the Hystrix configuration  *  * @param id name of the configuration  * @param configuration the configuration  */ void addHystrixConfiguration(String id, HystrixConfigurationDefinition configuration).
true;;0;1;/**  * Gets the validators that can be referenced in the routes.  *  * @return the validators available  */ ;/**  * Gets the validators that can be referenced in the routes.  *  * @return the validators available  */ List<ValidatorDefinition> getValidators().
true;;1;1;/**  * Sets the transformers that can be referenced in the routes.  *  * @param transformers the transformers  */ ;/**  * Sets the transformers that can be referenced in the routes.  *  * @param transformers the transformers  */ void setTransformers(List<TransformerDefinition> transformers).
true;;0;1;/**  * Gets the transformers that can be referenced in the routes.  *  * @return the transformers available  */ ;/**  * Gets the transformers that can be referenced in the routes.  *  * @return the transformers available  */ List<TransformerDefinition> getTransformers().
true;;1;1;/**  * Gets the service call configuration by the given name. If no name is given  * the default configuration is returned, see <tt>setServiceCallConfiguration</tt>  *  * @param serviceName name of service, or <tt>null</tt> to return the default configuration  * @return the configuration, or <tt>null</tt> if no configuration has been registered  */ ;/**  * Gets the service call configuration by the given name. If no name is given  * the default configuration is returned, see <tt>setServiceCallConfiguration</tt>  *  * @param serviceName name of service, or <tt>null</tt> to return the default configuration  * @return the configuration, or <tt>null</tt> if no configuration has been registered  */ ServiceCallConfigurationDefinition getServiceCallConfiguration(String serviceName).
true;;1;1;/**  * Sets the default service call configuration  *  * @param configuration the configuration  */ ;/**  * Sets the default service call configuration  *  * @param configuration the configuration  */ void setServiceCallConfiguration(ServiceCallConfigurationDefinition configuration).
true;;1;1;/**  * Sets the service call configurations  *  * @param configurations the configuration list  */ ;/**  * Sets the service call configurations  *  * @param configurations the configuration list  */ void setServiceCallConfigurations(List<ServiceCallConfigurationDefinition> configurations).
true;;2;1;/**  * Adds the service call configuration  *  * @param serviceName name of the service  * @param configuration the configuration  */ ;/**  * Adds the service call configuration  *  * @param serviceName name of the service  * @param configuration the configuration  */ void addServiceCallConfiguration(String serviceName, ServiceCallConfigurationDefinition configuration).
