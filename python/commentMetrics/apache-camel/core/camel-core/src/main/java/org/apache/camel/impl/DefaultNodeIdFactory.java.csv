commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public String createId(NamedNode definition) {     String key = definition.getShortName().     return key + getNodeCounter(key).incrementAndGet(). }
true;protected,static;1;3;/**  * Returns the counter for the given node key, lazily creating one if necessary  */ ;/**  * Returns the counter for the given node key, lazily creating one if necessary  */ protected static AtomicInteger getNodeCounter(String key) {     return nodeCounters.computeIfAbsent(key, k -> new AtomicInteger(0)). }
true;protected,static;0;5;/**  * Helper method for test purposes that allows tests to start clean (made protected  *  to ensure that it is not called accidentally)  */ ;/**  * Helper method for test purposes that allows tests to start clean (made protected  *  to ensure that it is not called accidentally)  */ protected static void resetAllCounters() {     for (AtomicInteger counter : nodeCounters.values()) {         counter.set(0).     } }
