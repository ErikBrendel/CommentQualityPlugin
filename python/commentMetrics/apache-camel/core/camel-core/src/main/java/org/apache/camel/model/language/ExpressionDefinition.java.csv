commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;7;;public static String getLabel(List<ExpressionDefinition> expressions) {     CollectionStringBuffer buffer = new CollectionStringBuffer().     for (ExpressionDefinition expression : expressions) {         buffer.append(expression.getLabel()).     }     return buffer.toString(). }
false;public;0;20;;@Override public String toString() {     StringBuilder sb = new StringBuilder().     if (getLanguage() != null) {         sb.append(getLanguage()).append("{").     }     if (getPredicate() != null) {         sb.append(getPredicate().toString()).     }     if (getExpressionValue() != null) {         sb.append(getExpressionValue().toString()).     }     if (getPredicate() == null && getExpressionValue() == null && getExpression() != null) {         sb.append(getExpression()).     }     if (getLanguage() != null) {         sb.append("}").     }     return sb.toString(). }
false;public;1;3;;public Object evaluate(Exchange exchange) {     return evaluate(exchange, Object.class). }
false;public;2;7;;public <T> T evaluate(Exchange exchange, Class<T> type) {     if (expressionValue == null) {         expressionValue = createExpression(exchange.getContext()).     }     ObjectHelper.notNull(expressionValue, "expressionValue").     return expressionValue.evaluate(exchange, type). }
false;public;2;5;;public void assertMatches(String text, Exchange exchange) throws AssertionError {     if (!matches(exchange)) {         throw new AssertionError(text + getExpression() + " for exchange: " + exchange).     } }
false;public;1;7;;public boolean matches(Exchange exchange) {     if (predicate == null) {         predicate = createPredicate(exchange.getContext()).     }     ObjectHelper.notNull(predicate, "predicate").     return predicate.matches(exchange). }
false;public;0;3;;public String getLanguage() {     return "". }
false;public,final;1;3;;public final Predicate createPredicate(RouteContext routeContext) {     return createPredicate(routeContext.getCamelContext()). }
false;public;1;32;;public Predicate createPredicate(CamelContext camelContext) {     if (predicate == null) {         if (getExpressionType() != null) {             predicate = getExpressionType().createPredicate(camelContext).         } else if (getExpressionValue() != null) {             predicate = new ExpressionToPredicateAdapter(getExpressionValue()).         } else if (getExpression() != null) {             ObjectHelper.notNull("language", getLanguage()).             Language language = camelContext.resolveLanguage(getLanguage()).             if (language == null) {                 throw new NoSuchLanguageException(getLanguage()).             }             String exp = getExpression().             // should be true by default             boolean isTrim = getTrim() == null || getTrim().             // trim if configured to trim             if (exp != null && isTrim) {                 exp = exp.trim().             }             // resolve the expression as it may be an external script from the classpath/file etc             exp = ScriptHelper.resolveOptionalExternalScript(camelContext, exp).             predicate = language.createPredicate(exp).             configurePredicate(camelContext, predicate).         }     }     // inject CamelContext if its aware     if (predicate instanceof CamelContextAware) {         ((CamelContextAware) predicate).setCamelContext(camelContext).     }     return predicate. }
false;public,final;1;3;;public final Expression createExpression(RouteContext routeContext) {     return createExpression(routeContext.getCamelContext()). }
false;public;1;30;;public Expression createExpression(CamelContext camelContext) {     if (getExpressionValue() == null) {         if (getExpressionType() != null) {             setExpressionValue(getExpressionType().createExpression(camelContext)).         } else if (getExpression() != null) {             ObjectHelper.notNull("language", getLanguage()).             Language language = camelContext.resolveLanguage(getLanguage()).             if (language == null) {                 throw new NoSuchLanguageException(getLanguage()).             }             String exp = getExpression().             // should be true by default             boolean isTrim = getTrim() == null || getTrim().             // trim if configured to trim             if (exp != null && isTrim) {                 exp = exp.trim().             }             // resolve the expression as it may be an external script from the classpath/file etc             exp = ScriptHelper.resolveOptionalExternalScript(camelContext, exp).             setExpressionValue(language.createExpression(exp)).             configureExpression(camelContext, getExpressionValue()).         }     }     // inject CamelContext if its aware     if (getExpressionValue() instanceof CamelContextAware) {         ((CamelContextAware) getExpressionValue()).setCamelContext(camelContext).     }     return getExpressionValue(). }
false;public;0;3;;public String getExpression() {     return expression. }
true;public;1;3;/**  * The expression value in your chosen language syntax  */ ;/**  * The expression value in your chosen language syntax  */ public void setExpression(String expression) {     this.expression = expression. }
false;public;0;3;;public String getId() {     return id. }
true;public;1;3;/**  * Sets the id of this node  */ ;/**  * Sets the id of this node  */ public void setId(String value) {     this.id = value. }
false;public;0;3;;public Predicate getPredicate() {     return predicate. }
false;public;0;3;;public Expression getExpressionValue() {     return expressionValue. }
false;protected;1;3;;protected void setExpressionValue(Expression expressionValue) {     this.expressionValue = expressionValue. }
false;public;0;3;;public ExpressionDefinition getExpressionType() {     return expressionType. }
false;public;0;3;;public Boolean getTrim() {     return trim. }
true;public;1;3;/**  * Whether to trim the value to remove leading and trailing whitespaces and line breaks  */ ;/**  * Whether to trim the value to remove leading and trailing whitespaces and line breaks  */ public void setTrim(Boolean trim) {     this.trim = trim. }
false;public;0;4;;@Override public Map<QName, Object> getOtherAttributes() {     return otherAttributes. }
false;public;1;4;;@Override public void setOtherAttributes(Map<QName, Object> otherAttributes) {     this.otherAttributes = otherAttributes. }
true;public;0;13;/**  * Returns some descriptive text to describe this node  */ ;/**  * Returns some descriptive text to describe this node  */ public String getLabel() {     Predicate predicate = getPredicate().     if (predicate != null) {         return predicate.toString().     }     Expression expressionValue = getExpressionValue().     if (expressionValue != null) {         return expressionValue.toString().     }     String exp = getExpression().     return exp != null ? exp : "". }
true;protected;1;3;/**  * Allows derived classes to set a lazily created expressionType instance  * such as if using the {@link org.apache.camel.builder.ExpressionClause}  */ ;/**  * Allows derived classes to set a lazily created expressionType instance  * such as if using the {@link org.apache.camel.builder.ExpressionClause}  */ protected void setExpressionType(ExpressionDefinition expressionType) {     this.expressionType = expressionType. }
false;protected;2;7;;protected void configurePredicate(CamelContext camelContext, Predicate predicate) {     // in the various camel components outside camel-core     if (predicate instanceof AfterPropertiesConfigured) {         ((AfterPropertiesConfigured) predicate).afterPropertiesConfigured(camelContext).     } }
false;protected;2;7;;protected void configureExpression(CamelContext camelContext, Expression expression) {     // in the various camel components outside camel-core     if (expression instanceof AfterPropertiesConfigured) {         ((AfterPropertiesConfigured) expression).afterPropertiesConfigured(camelContext).     } }
true;protected;3;8;/**  * Sets a named property on the object instance using introspection  */ ;/**  * Sets a named property on the object instance using introspection  */ protected void setProperty(Object bean, String name, Object value) {     try {         IntrospectionSupport.setProperty(bean, name, value).     } catch (Exception e) {         throw new IllegalArgumentException("Failed to set property " + name + " on " + bean + ". Reason: " + e, e).     } }
