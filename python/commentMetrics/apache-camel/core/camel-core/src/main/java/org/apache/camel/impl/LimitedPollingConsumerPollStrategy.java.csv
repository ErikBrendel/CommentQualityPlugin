commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int getLimit() {     return limit. }
true;public;1;3;/**  * Sets the limit for how many straight rollbacks causes this strategy to suspend the fault consumer.  * <p/>  * When the consumer has been suspended, it has to be manually resumed/started to be active again.  * The limit is by default 3.  *  * @param limit  the limit  */ ;/**  * Sets the limit for how many straight rollbacks causes this strategy to suspend the fault consumer.  * <p/>  * When the consumer has been suspended, it has to be manually resumed/started to be active again.  * The limit is by default 3.  *  * @param limit  the limit  */ public void setLimit(int limit) {     this.limit = limit. }
false;public;3;5;;@Override public void commit(Consumer consumer, Endpoint endpoint, int polledMessages) {     // we could commit so clear state     state.remove(consumer). }
false;public;4;24;;public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause) throws Exception {     // keep track how many times in a row we have rolled back     Integer times = state.get(consumer).     if (times == null) {         times = 1.     } else {         times += 1.     }     log.debug("Rollback occurred after {} times when consuming {}", times, endpoint).     boolean retry = false.     if (times >= limit) {         // clear state when we suspend so if its restarted manually we start all over again         state.remove(consumer).         onSuspend(consumer, endpoint).     } else {         // error occurred         state.put(consumer, times).         retry = onRollback(consumer, endpoint).     }     return retry. }
true;protected;2;5;/**  * The consumer is to be suspended because it exceeded the limit  *  * @param consumer the consumer  * @param endpoint the endpoint  * @throws Exception is thrown if error suspending the consumer  */ ;/**  * The consumer is to be suspended because it exceeded the limit  *  * @param consumer the consumer  * @param endpoint the endpoint  * @throws Exception is thrown if error suspending the consumer  */ protected void onSuspend(Consumer consumer, Endpoint endpoint) throws Exception {     log.warn("Suspending consumer " + consumer + " after " + limit + " attempts to consume from " + endpoint + ". You have to manually resume the consumer!").     ServiceHelper.suspendService(consumer). }
true;protected;2;4;/**  * Rollback occurred.  *  * @param consumer the consumer  * @param endpoint the endpoint  * @return whether or not to retry immediately, is default <tt>false</tt>  * @throws Exception can be thrown in case something goes wrong  */ ;/**  * Rollback occurred.  *  * @param consumer the consumer  * @param endpoint the endpoint  * @return whether or not to retry immediately, is default <tt>false</tt>  * @throws Exception can be thrown in case something goes wrong  */ protected boolean onRollback(Consumer consumer, Endpoint endpoint) throws Exception {     // do not retry by default     return false. }
false;public;0;3;;public void start() throws Exception { // noop }
false;public;0;3;;public void stop() throws Exception {     state.clear(). }
