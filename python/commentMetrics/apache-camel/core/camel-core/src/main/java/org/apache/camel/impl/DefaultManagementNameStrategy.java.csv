commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getNamePattern() {     return namePattern. }
false;public;1;4;;@Override public void setNamePattern(String namePattern) {     this.namePattern = namePattern. }
false;public;0;12;;@Override public String getName() {     if (name == null) {         String pattern = getNamePattern().         if (pattern == null) {             // fallback and use the default pattern which is the same name as the CamelContext has been given             pattern = defaultPattern != null ? defaultPattern : camelContext.getManagementStrategy().getManagementAgent().getManagementNamePattern().         }         name = resolveManagementName(pattern, camelContext.getName(), true).     }     return name. }
false;public;0;15;;@Override public String getNextName() {     if (isFixedName()) {         // use the fixed name         return getName().     } else {         // or resolve a new name         String pattern = getNamePattern().         if (pattern == null) {             // use a pattern that has a counter to ensure unique next name             pattern = nextPattern.         }         return resolveManagementName(pattern, camelContext.getName(), true).     } }
false;public;0;10;;@Override public boolean isFixedName() {     // the name will be fixed unless there is a counter token     String pattern = getNamePattern().     if (pattern == null) {         // we are not fixed by default         return false.     }     return !pattern.contains("#counter#"). }
true;public;3;28;/**  * Creates a new management name with the given pattern  *  * @param pattern the pattern  * @param name    the name  * @return the management name  * @throws IllegalArgumentException if the pattern or name is invalid or empty  */ ;/**  * Creates a new management name with the given pattern  *  * @param pattern the pattern  * @param name    the name  * @return the management name  * @throws IllegalArgumentException if the pattern or name is invalid or empty  */ public String resolveManagementName(String pattern, String name, boolean invalidCheck) {     StringHelper.notEmpty(pattern, "pattern").     StringHelper.notEmpty(name, "name").     // must quote the names to have it work as literal replacement     name = Matcher.quoteReplacement(name).     // replace tokens     String answer = pattern.     if (pattern.contains("#counter#")) {         // only increment the counter on-demand         answer = pattern.replaceFirst("#counter#", "" + nextNameCounter()).     }     // camelId and name is the same tokens     answer = answer.replaceFirst("#camelId#", name).     answer = answer.replaceFirst("#name#", name).     // allow custom name resolution as well. For example with camel-core-osgi we have a custom     // name strategy that supports OSGI specific tokens such as #bundleId# etc.     answer = customResolveManagementName(pattern, answer).     // are there any #word# combos left, if so they should be considered invalid tokens     if (invalidCheck && INVALID_PATTERN.matcher(answer).matches()) {         throw new IllegalArgumentException("Pattern is invalid: " + pattern).     }     return answer. }
true;protected;2;3;/**  * Strategy to do any custom resolution of the name  *  * @param pattern  the pattern  * @param answer   the current answer, which may have custom patterns still to be resolved  * @return the resolved name  */ ;/**  * Strategy to do any custom resolution of the name  *  * @param pattern  the pattern  * @param answer   the current answer, which may have custom patterns still to be resolved  * @return the resolved name  */ protected String customResolveManagementName(String pattern, String answer) {     return answer. }
false;private,static;0;4;;private static long nextNameCounter() {     // we want to be 1-based, so increment first     return NAME_COUNTER.incrementAndGet(). }
true;public,static;1;3;/**  * To reset the counter, should only be used for testing purposes.  *  * @param value the counter value  */ ;/**  * To reset the counter, should only be used for testing purposes.  *  * @param value the counter value  */ public static void setCounter(int value) {     NAME_COUNTER.set(value). }
