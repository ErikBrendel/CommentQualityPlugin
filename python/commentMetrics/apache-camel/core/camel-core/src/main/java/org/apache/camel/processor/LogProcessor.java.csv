commented;modifiers;parameterAmount;loc;comment;code
false;public;2;19;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     try {         if (logger.shouldLog()) {             String msg = expression.evaluate(exchange, String.class).             if (formatter != null) {                 msg = formatter.format(msg).             }             msg = fireListeners(exchange, msg).             logger.doLog(msg).         }     } catch (Exception e) {         exchange.setException(e).     } finally {         // callback must be invoked         callback.done(true).     }     return true. }
false;private;2;20;;private String fireListeners(Exchange exchange, String message) {     if (listeners == null) {         return message.     }     for (LogListener listener : listeners) {         if (listener == null) {             continue.         }         try {             String output = listener.onLog(exchange, logger, message).             message = output != null ? output : message.         } catch (Throwable t) {             log.warn("Ignoring an exception thrown by {}: {}", listener.getClass().getName(), t.getMessage()).             if (log.isDebugEnabled()) {                 log.debug("", t).             }         }     }     return message. }
false;public;0;4;;@Override public String toString() {     return "Log(" + logger.getLog().getName() + ")[" + expression + "]". }
false;public;0;3;;public String getTraceLabel() {     return "log[" + expression + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public Expression getExpression() {     return expression. }
false;public;0;3;;public CamelLogger getLogger() {     return logger. }
false;public;0;3;;public MaskingFormatter getLogFormatter() {     return formatter. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
