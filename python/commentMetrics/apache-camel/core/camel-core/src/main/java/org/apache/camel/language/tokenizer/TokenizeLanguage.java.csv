commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;3;;public static Expression tokenize(String token) {     return tokenize(token, false). }
false;public,static;2;6;;public static Expression tokenize(String token, boolean regex) {     TokenizeLanguage language = new TokenizeLanguage().     language.setToken(token).     language.setRegex(regex).     return language.createExpression(null). }
false;public,static;2;3;;public static Expression tokenize(String headerName, String token) {     return tokenize(headerName, token, false). }
false;public,static;3;7;;public static Expression tokenize(String headerName, String token, boolean regex) {     TokenizeLanguage language = new TokenizeLanguage().     language.setHeaderName(headerName).     language.setToken(token).     language.setRegex(regex).     return language.createExpression(null). }
false;public,static;3;7;;public static Expression tokenizePair(String startToken, String endToken, boolean includeTokens) {     TokenizeLanguage language = new TokenizeLanguage().     language.setToken(startToken).     language.setEndToken(endToken).     language.setIncludeTokens(includeTokens).     return language.createExpression(null). }
false;public,static;2;7;;public static Expression tokenizeXML(String tagName, String inheritNamespaceTagName) {     TokenizeLanguage language = new TokenizeLanguage().     language.setToken(tagName).     language.setInheritNamespaceTagName(inheritNamespaceTagName).     language.setXml(true).     return language.createExpression(null). }
false;public;1;3;;public Predicate createPredicate(String expression) {     return ExpressionToPredicateAdapter.toPredicate(createExpression(expression)). }
true;public;0;43;/**  * Creates a tokenize expression.  */ ;/**  * Creates a tokenize expression.  */ public Expression createExpression() {     ObjectHelper.notNull(token, "token").     // validate some invalid combinations     if (endToken != null && inheritNamespaceTagName != null) {         throw new IllegalArgumentException("Cannot have both xml and pair tokenizer enabled.").     }     if (isXml() && (endToken != null || includeTokens)) {         throw new IllegalArgumentException("Cannot have both xml and pair tokenizer enabled.").     }     Expression answer = null.     if (isXml()) {         answer = ExpressionBuilder.tokenizeXMLExpression(token, inheritNamespaceTagName).     } else if (endToken != null) {         answer = ExpressionBuilder.tokenizePairExpression(token, endToken, includeTokens).     }     if (answer == null) {         // use the regular tokenizer         Expression exp = headerName == null ? ExpressionBuilder.bodyExpression() : ExpressionBuilder.headerExpression(headerName).         if (regex) {             answer = ExpressionBuilder.regexTokenizeExpression(exp, token).         } else {             answer = ExpressionBuilder.tokenizeExpression(exp, token).         }         if (group == null && skipFirst) {             // wrap in skip first (if group then it has its own skip first logic)             answer = ExpressionBuilder.skipFirstExpression(answer).         }     }     // if group then wrap answer in group expression     if (group != null) {         if (isXml()) {             answer = ExpressionBuilder.groupXmlIteratorExpression(answer, group).         } else {             answer = ExpressionBuilder.groupIteratorExpression(answer, token, group, skipFirst).         }     }     return answer. }
false;public;1;6;;public Expression createExpression(String expression) {     if (ObjectHelper.isNotEmpty(expression)) {         this.token = expression.     }     return createExpression(). }
false;public;0;3;;public String getToken() {     return token. }
false;public;1;3;;public void setToken(String token) {     this.token = token. }
false;public;0;3;;public String getEndToken() {     return endToken. }
false;public;1;3;;public void setEndToken(String endToken) {     this.endToken = endToken. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
false;public;1;3;;public void setHeaderName(String headerName) {     this.headerName = headerName. }
false;public;0;3;;public boolean isRegex() {     return regex. }
false;public;1;3;;public void setRegex(boolean regex) {     this.regex = regex. }
false;public;0;3;;public String getInheritNamespaceTagName() {     return inheritNamespaceTagName. }
false;public;1;3;;public void setInheritNamespaceTagName(String inheritNamespaceTagName) {     this.inheritNamespaceTagName = inheritNamespaceTagName. }
false;public;0;3;;public boolean isXml() {     return xml. }
false;public;1;3;;public void setXml(boolean xml) {     this.xml = xml. }
false;public;0;3;;public boolean isIncludeTokens() {     return includeTokens. }
false;public;1;3;;public void setIncludeTokens(boolean includeTokens) {     this.includeTokens = includeTokens. }
false;public;0;3;;public String getGroup() {     return group. }
false;public;1;3;;public void setGroup(String group) {     this.group = group. }
false;public;0;3;;public boolean isSkipFirst() {     return skipFirst. }
false;public;1;3;;public void setSkipFirst(boolean skipFirst) {     this.skipFirst = skipFirst. }
false;public;0;3;;public boolean isSingleton() {     return false. }
