commented;modifiers;parameterAmount;loc;comment;code
false;public;2;41;;public Endpoint registerEndpoint(String uri, Endpoint endpoint) {     if (endpoint instanceof DefaultInterceptSendToEndpoint) {         // endpoint already decorated         return endpoint.     } else if (endpoint instanceof MockEndpoint) {         // we should not intercept mock endpoints         return endpoint.     } else if (matchPattern(uri, endpoint, pattern)) {         // if pattern is null then it mean to match all         // only proxy if the uri is matched decorate endpoint with our proxy         // should be false by default         DefaultInterceptSendToEndpoint proxy = new DefaultInterceptSendToEndpoint(endpoint, skip).         // create mock endpoint which we will use as interceptor         // replace :// from scheme to make it easy to lookup the mock endpoint without having double :// in uri         String key = "mock:" + endpoint.getEndpointKey().replaceFirst("://", ":").         // strip off parameters as well         if (key.contains("?")) {             key = StringHelper.before(key, "?").         }         LOG.info("Adviced endpoint [{}] with mock endpoint [{}]", uri, key).         MockEndpoint mock = endpoint.getCamelContext().getEndpoint(key, MockEndpoint.class).         Producer producer.         try {             producer = mock.createProducer().         } catch (Exception e) {             throw wrapRuntimeCamelException(e).         }         // allow custom logic         producer = onInterceptEndpoint(uri, endpoint, mock, producer).         proxy.setDetour(producer).         return proxy.     } else {         // no proxy so return regular endpoint         return endpoint.     } }
true;protected;3;3;/**  * Does the pattern match the endpoint?  *  * @param uri          the uri  * @param endpoint     the endpoint  * @param pattern      the pattern  * @return <tt>true</tt> to match and therefore intercept, <tt>false</tt> if not matched and should not intercept  */ ;/**  * Does the pattern match the endpoint?  *  * @param uri          the uri  * @param endpoint     the endpoint  * @param pattern      the pattern  * @return <tt>true</tt> to match and therefore intercept, <tt>false</tt> if not matched and should not intercept  */ protected boolean matchPattern(String uri, Endpoint endpoint, String pattern) {     return uri == null || pattern == null || EndpointHelper.matchEndpoint(endpoint.getCamelContext(), uri, pattern). }
true;protected;4;3;/**  * Callback when an endpoint was intercepted with the given mock endpoint  *  * @param uri          the uri  * @param endpoint     the endpoint  * @param mockEndpoint the mocked endpoint  * @param mockProducer the mock producer  * @return the mock producer  */ ;/**  * Callback when an endpoint was intercepted with the given mock endpoint  *  * @param uri          the uri  * @param endpoint     the endpoint  * @param mockEndpoint the mocked endpoint  * @param mockProducer the mock producer  * @return the mock producer  */ protected Producer onInterceptEndpoint(String uri, Endpoint endpoint, MockEndpoint mockEndpoint, Producer mockProducer) {     return mockProducer. }
false;public;0;4;;@Override public String toString() {     return "InterceptSendToMockEndpointStrategy". }
