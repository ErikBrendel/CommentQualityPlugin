commented;modifiers;parameterAmount;loc;comment;code
false;public;2;26;;public boolean process(Exchange exchange, AsyncCallback callback) {     Exception cause = exception.     try {         if (message != null && type != null) {             // create the message using simple language so it can be dynamic             String text = simple.evaluate(exchange, String.class).             // create a new exception of that type, and provide the message as             Constructor<?> constructor = type.getDeclaredConstructor(String.class).             cause = (Exception) constructor.newInstance(text).             exchange.setException(cause).         } else if (cause == null && type != null) {             // create a new exception of that type using its default constructor             Constructor<?> constructor = type.getDeclaredConstructor().             cause = (Exception) constructor.newInstance().             exchange.setException(cause).         } else {             exchange.setException(cause).         }     } catch (Throwable e) {         exchange.setException(new CamelExchangeException("Error creating new instance of " + exception.getClass(), exchange, e)).     }     callback.done(true).     return true. }
false;public;0;4;;public String getTraceLabel() {     String className = this.exception == null ? this.type.getSimpleName() : this.exception.getClass().getSimpleName().     return "throwException[" + className + "]". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public Exception getException() {     return exception. }
false;public;0;3;;public Class<? extends Exception> getType() {     return type. }
false;public;0;3;;public String getMessage() {     return message. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;0;3;;public String toString() {     return "ThrowException". }
false;protected;0;8;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "camelContext", this).     if (message != null) {         simple = camelContext.resolveLanguage("simple").createExpression(message).     } }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
