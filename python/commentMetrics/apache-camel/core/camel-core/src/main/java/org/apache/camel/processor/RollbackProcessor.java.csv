commented;modifiers;parameterAmount;loc;comment;code
false;public;2;26;;public boolean process(Exchange exchange, AsyncCallback callback) {     if (isMarkRollbackOnlyLast()) {         // only mark the last route (current) as rollback         // this is needed when you have multiple transactions in play         exchange.setProperty(Exchange.ROLLBACK_ONLY_LAST, Boolean.TRUE).     } else {         // default to mark the entire route as rollback         exchange.setProperty(Exchange.ROLLBACK_ONLY, Boolean.TRUE).     }     if (markRollbackOnly || markRollbackOnlyLast) {         // do not do anything more as we should only mark the rollback         callback.done(true).         return true.     }     // throw exception to rollback     if (message != null) {         exchange.setException(new RollbackExchangeException(message, exchange)).     } else {         exchange.setException(new RollbackExchangeException(exchange)).     }     callback.done(true).     return true. }
false;public;0;8;;@Override public String toString() {     if (message != null) {         return "Rollback[" + message + "]".     } else {         return "Rollback".     } }
false;public;0;3;;public String getTraceLabel() {     return "rollback". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public String getMessage() {     return message. }
false;public;0;3;;public boolean isMarkRollbackOnly() {     return markRollbackOnly. }
false;public;1;3;;public void setMarkRollbackOnly(boolean markRollbackOnly) {     this.markRollbackOnly = markRollbackOnly. }
false;public;0;3;;public boolean isMarkRollbackOnlyLast() {     return markRollbackOnlyLast. }
false;public;1;3;;public void setMarkRollbackOnlyLast(boolean markRollbackOnlyLast) {     this.markRollbackOnlyLast = markRollbackOnlyLast. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
