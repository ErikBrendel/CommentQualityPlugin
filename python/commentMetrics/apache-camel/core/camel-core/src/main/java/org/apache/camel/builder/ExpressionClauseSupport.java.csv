commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Specify an {@link org.apache.camel.Expression} instance  */ ;// Helper expressions // ------------------------------------------------------------------------- /**  * Specify an {@link org.apache.camel.Expression} instance  */ public T expression(Expression expression) {     setExpressionValue(expression).     return result. }
false;public;1;4;;public T expression(ExpressionDefinition expression) {     setExpressionType(expression).     return result. }
true;public;1;7;/**  * Specify the constant expression value.  *  * <b>Important:</b> this is a fixed constant value that is only set once during starting up the route,  * do not use this if you want dynamic values during routing.  */ ;/**  * Specify the constant expression value.  *  * <b>Important:</b> this is a fixed constant value that is only set once during starting up the route,  * do not use this if you want dynamic values during routing.  */ public T constant(Object value) {     if (value instanceof String) {         return expression(new ConstantExpression((String) value)).     } else {         return expression(ExpressionBuilder.constantExpression(value)).     } }
true;public;0;3;/**  * An expression of the exchange  */ ;/**  * An expression of the exchange  */ public T exchange() {     return expression(ExpressionBuilder.exchangeExpression()). }
true;public;0;3;/**  * An expression of an inbound message  */ ;/**  * An expression of an inbound message  */ public T inMessage() {     return expression(ExpressionBuilder.inMessageExpression()). }
true;public;0;3;/**  * An expression of an inbound message  */ ;/**  * An expression of an inbound message  */ public T outMessage() {     return expression(ExpressionBuilder.outMessageExpression()). }
true;public;0;4;/**  * An expression of an inbound message body  */ ;/**  * An expression of an inbound message body  */ public T body() {     // reuse simple as this allows the model to represent this as a known JAXB type     return expression(new SimpleExpression("${body}")). }
true;public;1;3;/**  * An expression of an inbound message body converted to the expected type  */ ;/**  * An expression of an inbound message body converted to the expected type  */ public T body(Class<?> expectedType) {     return expression(ExpressionBuilder.bodyExpression(expectedType)). }
true;public;0;3;/**  * An expression of an outbound message body  */ ;/**  * An expression of an outbound message body  */ public T outBody() {     return expression(ExpressionBuilder.outBodyExpression()). }
true;public;1;3;/**  * An expression of an outbound message body converted to the expected type  */ ;/**  * An expression of an outbound message body converted to the expected type  */ public T outBody(Class<?> expectedType) {     return expression(ExpressionBuilder.outBodyExpression(expectedType)). }
true;public;1;3;/**  * An expression of an inbound message header of the given name  */ ;/**  * An expression of an inbound message header of the given name  */ public T header(String name) {     return expression(new HeaderExpression(name)). }
true;public;0;3;/**  * An expression of the inbound headers  */ ;/**  * An expression of the inbound headers  */ public T headers() {     return expression(ExpressionBuilder.headersExpression()). }
true;public;1;3;/**  * An expression of an outbound message header of the given name  */ ;/**  * An expression of an outbound message header of the given name  */ public T outHeader(String name) {     return expression(ExpressionBuilder.outHeaderExpression(name)). }
true;public;0;3;/**  * An expression of the outbound headers  */ ;/**  * An expression of the outbound headers  */ public T outHeaders() {     return expression(ExpressionBuilder.outHeadersExpression()). }
true;public;0;3;/**  * An expression of the inbound message attachments  */ ;/**  * An expression of the inbound message attachments  */ public T attachments() {     return expression(ExpressionBuilder.attachmentObjectValuesExpression()). }
true;public;0;3;/**  * An expression of the exchange pattern  */ ;/**  * An expression of the exchange pattern  */ public T exchangePattern() {     return expression(ExpressionBuilder.exchangePatternExpression()). }
true;public;1;3;/**  * An expression of an exchange property of the given name  */ ;/**  * An expression of an exchange property of the given name  */ public T exchangeProperty(String name) {     return expression(new ExchangePropertyExpression(name)). }
true;public;0;3;/**  * An expression of the exchange properties  */ ;/**  * An expression of the exchange properties  */ public T exchangeProperties() {     return expression(ExpressionBuilder.exchangePropertiesExpression()). }
true;public;1;3;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param bean the name of the bean looked up the registry  * @return the builder to continue processing the DSL  */ ;// Languages // ------------------------------------------------------------------------- /**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param bean the name of the bean looked up the registry  * @return the builder to continue processing the DSL  */ public T method(String bean) {     return expression(new MethodCallExpression(bean)). }
true;public;1;3;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param instance the instance of the bean  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param instance the instance of the bean  * @return the builder to continue processing the DSL  */ public T method(Object instance) {     return expression(new MethodCallExpression(instance)). }
true;public;1;3;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param beanType the Class of the bean which we want to invoke  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param beanType the Class of the bean which we want to invoke  * @return the builder to continue processing the DSL  */ public T method(Class<?> beanType) {     return expression(new MethodCallExpression(beanType)). }
true;public;2;3;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param bean the name of the bean looked up the registry  * @param method the name of the method to invoke on the bean  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param bean the name of the bean looked up the registry  * @param method the name of the method to invoke on the bean  * @return the builder to continue processing the DSL  */ public T method(String bean, String method) {     return expression(new MethodCallExpression(bean, method)). }
true;public;2;3;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param instance the instance of the bean  * @param method the name of the method to invoke on the bean  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param instance the instance of the bean  * @param method the name of the method to invoke on the bean  * @return the builder to continue processing the DSL  */ public T method(Object instance, String method) {     return expression(new MethodCallExpression(instance, method)). }
true;public;2;3;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param beanType the Class of the bean which we want to invoke  * @param method the name of the method to invoke on the bean  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an expression using the <a  * href="http://camel.apache.org/bean-language.html>bean language</a>  * which basically means the bean is invoked to determine the expression  * value.  *  * @param beanType the Class of the bean which we want to invoke  * @param method the name of the method to invoke on the bean  * @return the builder to continue processing the DSL  */ public T method(Class<?> beanType, String method) {     return expression(new MethodCallExpression(beanType, method)). }
true;public;1;3;/**  * Evaluates a <a href="http://camel.apache.org/groovy.html">Groovy  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/groovy.html">Groovy  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T groovy(String text) {     return expression(new GroovyExpression(text)). }
true;public;1;4;/**  * Evaluates a <a  * href="http://camel.apache.org/java-script.html">JavaScript  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  * @deprecated JavaScript is deprecated in Java 11 onwards  */ ;/**  * Evaluates a <a  * href="http://camel.apache.org/java-script.html">JavaScript  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  * @deprecated JavaScript is deprecated in Java 11 onwards  */ @Deprecated public T javaScript(String text) {     return expression(new JavaScriptExpression(text)). }
true;public;1;3;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T jsonpath(String text) {     return jsonpath(text, false). }
true;public;2;5;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @return the builder to continue processing the DSL  */ public T jsonpath(String text, boolean suppressExceptions) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setSuppressExceptions(suppressExceptions).     return expression(expression). }
true;public;3;6;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @return the builder to continue processing the DSL  */ public T jsonpath(String text, boolean suppressExceptions, boolean allowSimple) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setSuppressExceptions(suppressExceptions).     expression.setAllowSimple(allowSimple).     return expression(expression). }
true;public;2;6;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ public T jsonpath(String text, Class<?> resultType) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setResultType(resultType).     setExpressionType(expression).     return result. }
true;public;3;7;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ public T jsonpath(String text, boolean suppressExceptions, Class<?> resultType) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setSuppressExceptions(suppressExceptions).     expression.setResultType(resultType).     setExpressionType(expression).     return result. }
true;public;4;8;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ public T jsonpath(String text, boolean suppressExceptions, boolean allowSimple, Class<?> resultType) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setSuppressExceptions(suppressExceptions).     expression.setAllowSimple(allowSimple).     expression.setResultType(resultType).     setExpressionType(expression).     return result. }
true;public;5;9;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @param resultType the return type expected by the expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a>  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @param resultType the return type expected by the expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T jsonpath(String text, boolean suppressExceptions, boolean allowSimple, Class<?> resultType, String headerName) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setSuppressExceptions(suppressExceptions).     expression.setAllowSimple(allowSimple).     expression.setResultType(resultType).     expression.setHeaderName(headerName).     setExpressionType(expression).     return result. }
true;public;1;3;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T jsonpathWriteAsString(String text) {     return jsonpathWriteAsString(text, false). }
true;public;2;6;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @return the builder to continue processing the DSL  */ public T jsonpathWriteAsString(String text, boolean suppressExceptions) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setWriteAsString(true).     expression.setSuppressExceptions(suppressExceptions).     return expression(expression). }
true;public;3;7;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @return the builder to continue processing the DSL  */ public T jsonpathWriteAsString(String text, boolean suppressExceptions, boolean allowSimple) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setWriteAsString(true).     expression.setSuppressExceptions(suppressExceptions).     expression.setAllowSimple(allowSimple).     return expression(expression). }
true;public;4;8;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/jsonpath.html">Json Path  * expression</a> with writeAsString enabled.  *  * @param text the expression to be evaluated  * @param suppressExceptions whether to suppress exceptions such as PathNotFoundException  * @param allowSimple whether to allow in inlined simple exceptions in the json path expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T jsonpathWriteAsString(String text, boolean suppressExceptions, boolean allowSimple, String headerName) {     JsonPathExpression expression = new JsonPathExpression(text).     expression.setWriteAsString(true).     expression.setSuppressExceptions(suppressExceptions).     expression.setAllowSimple(allowSimple).     expression.setHeaderName(headerName).     return expression(expression). }
true;public;1;3;/**  * Evaluates an <a href="http://camel.apache.org/ognl.html">OGNL  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/ognl.html">OGNL  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T ognl(String text) {     return expression(new OgnlExpression(text)). }
true;public;1;3;/**  * Evaluates a <a href="http://camel.apache.org/mvel.html">MVEL  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/mvel.html">MVEL  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T mvel(String text) {     return expression(new MvelExpression(text)). }
true;public;1;3;/**  * Evaluates a {@link Expression} by looking up existing {@link Expression}  * from the {@link org.apache.camel.spi.Registry}  *  * @param ref refers to the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a {@link Expression} by looking up existing {@link Expression}  * from the {@link org.apache.camel.spi.Registry}  *  * @param ref refers to the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T ref(String ref) {     return expression(new RefExpression(ref)). }
true;public;1;3;/**  * Evaluates an <a href="http://camel.apache.org/spel.html">SpEL  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/spel.html">SpEL  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T spel(String text) {     return expression(new SpELExpression(text)). }
true;public;1;3;/**  * Evaluates a <a href="http://camel.apache.org/simple.html">Simple  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/simple.html">Simple  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T simple(String text) {     return expression(new SimpleExpression(text)). }
true;public;2;6;/**  * Evaluates a <a href="http://camel.apache.org/simple.html">Simple  * expression</a>  *  * @param text the expression to be evaluated  * @param resultType the result type  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a <a href="http://camel.apache.org/simple.html">Simple  * expression</a>  *  * @param text the expression to be evaluated  * @param resultType the result type  * @return the builder to continue processing the DSL  */ public T simple(String text, Class<?> resultType) {     SimpleExpression expression = new SimpleExpression(text).     expression.setResultType(resultType).     setExpressionType(expression).     return result. }
true;public;1;3;/**  * Evaluates an <a href="http://camel.apache.org/hl7.html">HL7 Terser  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/hl7.html">HL7 Terser  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T hl7terser(String text) {     return expression(new Hl7TerserExpression(text)). }
true;public;1;3;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @return the builder to continue processing the DSL  */ public T tokenize(String token) {     return tokenize(token, null, false). }
true;public;2;3;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ public T tokenize(String token, int group) {     return tokenize(token, null, false, group). }
true;public;3;3;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param group to group by the given number  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param group to group by the given number  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ public T tokenize(String token, int group, boolean skipFirst) {     return tokenize(token, null, false, group, skipFirst). }
true;public;2;3;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param regex whether the token is a regular expression or not  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param regex whether the token is a regular expression or not  * @return the builder to continue processing the DSL  */ public T tokenize(String token, boolean regex) {     return tokenize(token, null, regex). }
true;public;3;3;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param regex whether the token is a regular expression or not  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the message body  *  * @param token the token  * @param regex whether the token is a regular expression or not  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ public T tokenize(String token, boolean regex, int group) {     return tokenize(token, null, regex, group). }
true;public;2;3;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @return the builder to continue processing the DSL  */ public T tokenize(String token, String headerName) {     return tokenize(token, headerName, false). }
true;public;3;8;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @return the builder to continue processing the DSL  */ public T tokenize(String token, String headerName, boolean regex) {     TokenizerExpression expression = new TokenizerExpression().     expression.setToken(token).     expression.setHeaderName(headerName).     expression.setRegex(regex).     setExpressionType(expression).     return result. }
true;public;4;3;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param group to group by number of parts  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param group to group by number of parts  * @return the builder to continue processing the DSL  */ public T tokenize(String token, String headerName, boolean regex, int group) {     return tokenize(token, headerName, regex, group, false). }
true;public;4;9;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ public T tokenize(String token, String headerName, boolean regex, boolean skipFirst) {     TokenizerExpression expression = new TokenizerExpression().     expression.setToken(token).     expression.setHeaderName(headerName).     expression.setRegex(regex).     expression.setSkipFirst(skipFirst).     setExpressionType(expression).     return result. }
true;public;5;3;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param group to group by number of parts  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param group to group by number of parts  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ public T tokenize(String token, String headerName, boolean regex, int group, boolean skipFirst) {     return tokenize(token, headerName, regex, "" + group, skipFirst). }
true;public;5;10;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param group to group by number of parts  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token expression on the given header  *  * @param token the token  * @param headerName name of header to tokenize  * @param regex whether the token is a regular expression or not  * @param group to group by number of parts  * @param skipFirst whether to skip the very first element  * @return the builder to continue processing the DSL  */ public T tokenize(String token, String headerName, boolean regex, String group, boolean skipFirst) {     TokenizerExpression expression = new TokenizerExpression().     expression.setToken(token).     expression.setHeaderName(headerName).     expression.setRegex(regex).     expression.setGroup(group).     expression.setSkipFirst(skipFirst).     setExpressionType(expression).     return result. }
true;public;3;8;/**  * Evaluates a token pair expression on the message body  *  * @param startToken the start token  * @param endToken   the end token  * @param includeTokens whether to include tokens  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token pair expression on the message body  *  * @param startToken the start token  * @param endToken   the end token  * @param includeTokens whether to include tokens  * @return the builder to continue processing the DSL  */ public T tokenizePair(String startToken, String endToken, boolean includeTokens) {     TokenizerExpression expression = new TokenizerExpression().     expression.setToken(startToken).     expression.setEndToken(endToken).     expression.setIncludeTokens(includeTokens).     setExpressionType(expression).     return result. }
true;public;3;3;/**  * Evaluates a token pair expression on the message body with XML content  *  * @param tagName the tag name of the child nodes to tokenize  * @param inheritNamespaceTagName  optional parent or root tag name that contains namespace(s) to inherit  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token pair expression on the message body with XML content  *  * @param tagName the tag name of the child nodes to tokenize  * @param inheritNamespaceTagName  optional parent or root tag name that contains namespace(s) to inherit  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ public T tokenizeXMLPair(String tagName, String inheritNamespaceTagName, int group) {     return tokenizeXMLPair(tagName, inheritNamespaceTagName, "" + group). }
true;public;3;9;/**  * Evaluates a token pair expression on the message body with XML content  *  * @param tagName the tag name of the child nodes to tokenize  * @param inheritNamespaceTagName  optional parent or root tag name that contains namespace(s) to inherit  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a token pair expression on the message body with XML content  *  * @param tagName the tag name of the child nodes to tokenize  * @param inheritNamespaceTagName  optional parent or root tag name that contains namespace(s) to inherit  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ public T tokenizeXMLPair(String tagName, String inheritNamespaceTagName, String group) {     TokenizerExpression expression = new TokenizerExpression().     expression.setToken(tagName).     expression.setInheritNamespaceTagName(inheritNamespaceTagName).     expression.setXml(true).     expression.setGroup(group).     setExpressionType(expression).     return result. }
true;public;4;11;/**  * Evaluates an XML token expression on the message body with XML content  *  * @param path the xpath like path notation specifying the child nodes to tokenize  * @param mode one of 'i', 'w', or 'u' to inject the namespaces to the token, to  *        wrap the token with its ancestor contet, or to unwrap to its element child  * @param namespaces the namespace map to the namespace bindings  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an XML token expression on the message body with XML content  *  * @param path the xpath like path notation specifying the child nodes to tokenize  * @param mode one of 'i', 'w', or 'u' to inject the namespaces to the token, to  *        wrap the token with its ancestor contet, or to unwrap to its element child  * @param namespaces the namespace map to the namespace bindings  * @param group to group by the given number  * @return the builder to continue processing the DSL  */ public T xtokenize(String path, char mode, Namespaces namespaces, int group) {     XMLTokenizerExpression expression = new XMLTokenizerExpression(path).     expression.setMode(Character.toString(mode)).     expression.setNamespaces(namespaces.getNamespaces()).     if (group > 0) {         expression.setGroup(group).     }     setExpressionType(expression).     return result. }
true;public;1;3;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T xpath(String text) {     return expression(new XPathExpression(text)). }
true;public;2;5;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> on the supplied header name's contents  *  * @param text the expression to be evaluated  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> on the supplied header name's contents  *  * @param text the expression to be evaluated  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T xpath(String text, String headerName) {     XPathExpression expression = new XPathExpression(text).     expression.setHeaderName(headerName).     return expression(expression). }
true;public;2;6;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ public T xpath(String text, Class<?> resultType) {     XPathExpression expression = new XPathExpression(text).     expression.setResultType(resultType).     setExpressionType(expression).     return result. }
true;public;3;6;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type on the supplied  * header name's contents  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type on the supplied  * header name's contents  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T xpath(String text, Class<?> resultType, String headerName) {     XPathExpression expression = new XPathExpression(text).     expression.setHeaderName(headerName).     setExpressionType(expression).     return result. }
true;public;3;3;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type and set of namespace  * prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type and set of namespace  * prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xpath(String text, Class<?> resultType, Namespaces namespaces) {     return xpath(text, resultType, namespaces.getNamespaces()). }
true;public;4;8;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type and set of namespace  * prefixes and URIs on the supplied header name's contents  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type and set of namespace  * prefixes and URIs on the supplied header name's contents  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T xpath(String text, Class<?> resultType, Namespaces namespaces, String headerName) {     XPathExpression expression = new XPathExpression(text).     expression.setResultType(resultType).     expression.setNamespaces(namespaces.getNamespaces()).     expression.setHeaderName(headerName).     setExpressionType(expression).     return result. }
true;public;3;7;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type and set of namespace  * prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified result type and set of namespace  * prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xpath(String text, Class<?> resultType, Map<String, String> namespaces) {     XPathExpression expression = new XPathExpression(text).     expression.setResultType(resultType).     expression.setNamespaces(namespaces).     setExpressionType(expression).     return result. }
true;public;2;3;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xpath(String text, Namespaces namespaces) {     return xpath(text, namespaces.getNamespaces()). }
true;public;2;6;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xpath.html">XPath  * expression</a> with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xpath(String text, Map<String, String> namespaces) {     XPathExpression expression = new XPathExpression(text).     expression.setNamespaces(namespaces).     setExpressionType(expression).     return result. }
true;public;1;3;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  *  * @param text the expression to be evaluated  * @return the builder to continue processing the DSL  */ public T xquery(String text) {     return expression(new XQueryExpression(text)). }
true;public;2;5;/**  * Evaluates an <a href="http://camel.apache.org/xquery.html">XQuery  * expression</a>  *  * @param text the expression to be evaluated  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a href="http://camel.apache.org/xquery.html">XQuery  * expression</a>  *  * @param text the expression to be evaluated  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T xquery(String text, String headerName) {     XQueryExpression expression = new XQueryExpression(text).     expression.setHeaderName(headerName).     return expression(expression). }
true;public;2;6;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @return the builder to continue processing the DSL  */ public T xquery(String text, Class<?> resultType) {     XQueryExpression expression = new XQueryExpression(text).     expression.setResultType(resultType).     setExpressionType(expression).     return result. }
true;public;3;6;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T xquery(String text, Class<?> resultType, String headerName) {     XQueryExpression expression = new XQueryExpression(text).     expression.setHeaderName(headerName).     setExpressionType(expression).     return result. }
true;public;3;3;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type and set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type and set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xquery(String text, Class<?> resultType, Namespaces namespaces) {     return xquery(text, resultType, namespaces.getNamespaces()). }
true;public;4;8;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type and set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type and set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @param headerName the name of the header to apply the expression to  * @return the builder to continue processing the DSL  */ public T xquery(String text, Class<?> resultType, Namespaces namespaces, String headerName) {     XQueryExpression expression = new XQueryExpression(text).     expression.setResultType(resultType).     expression.setNamespaces(namespaces.getNamespaces()).     expression.setHeaderName(headerName).     setExpressionType(expression).     return result. }
true;public;3;7;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type and set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified result type and set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param resultType the return type expected by the expression  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xquery(String text, Class<?> resultType, Map<String, String> namespaces) {     XQueryExpression expression = new XQueryExpression(text).     expression.setResultType(resultType).     expression.setNamespaces(namespaces).     setExpressionType(expression).     return result. }
true;public;2;3;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xquery(String text, Namespaces namespaces) {     return xquery(text, namespaces.getNamespaces()). }
true;public;2;6;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates an <a  * href="http://camel.apache.org/xquery.html">XQuery expression</a>  * with the specified set of namespace prefixes and URIs  *  * @param text the expression to be evaluated  * @param namespaces the namespace prefix and URIs to use  * @return the builder to continue processing the DSL  */ public T xquery(String text, Map<String, String> namespaces) {     XQueryExpression expression = new XQueryExpression(text).     expression.setNamespaces(namespaces).     setExpressionType(expression).     return result. }
true;public;2;5;/**  * Evaluates a given language name with the expression text  *  * @param language the name of the language  * @param expression the expression in the given language  * @return the builder to continue processing the DSL  */ ;/**  * Evaluates a given language name with the expression text  *  * @param language the name of the language  * @param expression the expression in the given language  * @return the builder to continue processing the DSL  */ public T language(String language, String expression) {     LanguageExpression exp = new LanguageExpression(language, expression).     setExpressionType(exp).     return result. }
false;public;0;3;;// Properties // ------------------------------------------------------------------------- public Expression getExpressionValue() {     return expressionValue. }
false;public;1;3;;public void setExpressionValue(Expression expressionValue) {     this.expressionValue = expressionValue. }
false;public;0;3;;public ExpressionDefinition getExpressionType() {     return expressionType. }
false;public;1;3;;public void setExpressionType(ExpressionDefinition expressionType) {     this.expressionType = expressionType. }
false;protected;1;10;;protected Expression createExpression(CamelContext camelContext) {     if (getExpressionValue() == null) {         if (getExpressionType() != null) {             setExpressionValue(getExpressionType().createExpression(camelContext)).         } else {             throw new IllegalStateException("No expression value configured").         }     }     return getExpressionValue(). }
false;protected;2;2;;protected void configureExpression(CamelContext camelContext, Expression expression) { }
