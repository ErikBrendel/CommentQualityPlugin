commented;modifiers;parameterAmount;loc;comment;code
false;public;2;11;;public void addErrorHandlers(RouteContext routeContext, OnExceptionDefinition exception) {     // only add if we not already have it     List<OnExceptionDefinition> list = onExceptions.get(routeContext).     if (list == null) {         list = new ArrayList<>().         onExceptions.put(routeContext, list).     }     if (!list.contains(exception)) {         list.add(exception).     } }
false;protected;1;7;;protected void cloneBuilder(ErrorHandlerBuilderSupport other) {     if (!onExceptions.isEmpty()) {         Map<RouteContext, List<OnExceptionDefinition>> copy = new HashMap<>(onExceptions).         other.onExceptions = copy.     }     other.exceptionPolicyStrategy = exceptionPolicyStrategy. }
false;public;2;19;;public void configure(RouteContext routeContext, ErrorHandler handler) {     if (handler instanceof ErrorHandlerSupport) {         ErrorHandlerSupport handlerSupport = (ErrorHandlerSupport) handler.         List<OnExceptionDefinition> list = onExceptions.get(routeContext).         if (list != null) {             for (OnExceptionDefinition exception : list) {                 handlerSupport.addExceptionPolicy(routeContext, exception).             }         }     }     if (handler instanceof RedeliveryErrorHandler) {         boolean original = ((RedeliveryErrorHandler) handler).isUseOriginalMessagePolicy().         if (original) {             // ensure allow original is turned on             routeContext.setAllowUseOriginalMessage(true).         }     } }
false;public;1;3;;public List<OnExceptionDefinition> getErrorHandlers(RouteContext routeContext) {     return onExceptions.get(routeContext). }
false;public;2;3;;public void setErrorHandlers(RouteContext routeContext, List<OnExceptionDefinition> exceptions) {     this.onExceptions.put(routeContext, exceptions). }
true;public;1;4;/**  * Sets the exception policy to use  */ ;/**  * Sets the exception policy to use  */ public ErrorHandlerBuilderSupport exceptionPolicyStrategy(ExceptionPolicyStrategy exceptionPolicyStrategy) {     setExceptionPolicyStrategy(exceptionPolicyStrategy).     return this. }
false;public;0;3;;public ExceptionPolicyStrategy getExceptionPolicyStrategy() {     return exceptionPolicyStrategy. }
false;public;1;4;;public void setExceptionPolicyStrategy(ExceptionPolicyStrategy exceptionPolicyStrategy) {     ObjectHelper.notNull(exceptionPolicyStrategy, "ExceptionPolicyStrategy").     this.exceptionPolicyStrategy = exceptionPolicyStrategy. }
true;public;1;9;/**  * Remove the OnExceptionList by look up the route id from the ErrorHandlerBuilder internal map  * @param id the route id  * @return true if the route context is found and removed  */ ;/**  * Remove the OnExceptionList by look up the route id from the ErrorHandlerBuilder internal map  * @param id the route id  * @return true if the route context is found and removed  */ public boolean removeOnExceptionList(String id) {     for (RouteContext routeContext : onExceptions.keySet()) {         if (getRouteId(routeContext).equals(id)) {             onExceptions.remove(routeContext).             return true.         }     }     return false. }
false;protected;1;9;;protected String getRouteId(RouteContext routeContext) {     CamelContext context = routeContext.getCamelContext().     if (context != null) {         RouteDefinition route = (RouteDefinition) routeContext.getRoute().         return route.idOrCreate(context.getNodeIdFactory()).     } else {         return routeContext.getRoute().getId().     } }
