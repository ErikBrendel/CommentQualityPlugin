commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Sets the original route to be adviced.  *  * @param originalRoute the original route.  */ ;/**  * Sets the original route to be adviced.  *  * @param originalRoute the original route.  */ public void setOriginalRoute(RouteDefinition originalRoute) {     this.originalRoute = originalRoute. }
true;public;0;3;/**  * Gets the original route to be adviced.  *  * @return the original route.  */ ;/**  * Gets the original route to be adviced.  *  * @return the original route.  */ public RouteDefinition getOriginalRoute() {     return originalRoute. }
true;public;0;3;/**  * Gets a list of additional tasks to execute after the {@link #configure()} method has been executed  * during the advice process.  *  * @return a list of additional {@link AdviceWithTask} tasks to be executed during the advice process.  */ ;/**  * Gets a list of additional tasks to execute after the {@link #configure()} method has been executed  * during the advice process.  *  * @return a list of additional {@link AdviceWithTask} tasks to be executed during the advice process.  */ public List<AdviceWithTask> getAdviceWithTasks() {     return adviceWithTasks. }
true;public;0;3;/**  * Mock all endpoints.  *  * @throws Exception can be thrown if error occurred  */ ;/**  * Mock all endpoints.  *  * @throws Exception can be thrown if error occurred  */ public void mockEndpoints() throws Exception {     getContext().addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(null)). }
true;public;1;5;/**  * Mock all endpoints matching the given pattern.  *  * @param pattern the pattern(s).  * @throws Exception can be thrown if error occurred  * @see EndpointHelper#matchEndpoint(org.apache.camel.CamelContext, String, String)  */ ;/**  * Mock all endpoints matching the given pattern.  *  * @param pattern the pattern(s).  * @throws Exception can be thrown if error occurred  * @see EndpointHelper#matchEndpoint(org.apache.camel.CamelContext, String, String)  */ public void mockEndpoints(String... pattern) throws Exception {     for (String s : pattern) {         getContext().addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(s)).     } }
true;public;1;5;/**  * Mock all endpoints matching the given pattern, and <b>skips</b> sending to the original endpoint (detour messages).  *  * @param pattern the pattern(s).  * @throws Exception can be thrown if error occurred  * @see EndpointHelper#matchEndpoint(org.apache.camel.CamelContext, String, String)  */ ;/**  * Mock all endpoints matching the given pattern, and <b>skips</b> sending to the original endpoint (detour messages).  *  * @param pattern the pattern(s).  * @throws Exception can be thrown if error occurred  * @see EndpointHelper#matchEndpoint(org.apache.camel.CamelContext, String, String)  */ public void mockEndpointsAndSkip(String... pattern) throws Exception {     for (String s : pattern) {         getContext().addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy(s, true)).     } }
true;public;1;4;/**  * Replaces the route from endpoint with a new uri  *  * @param uri uri of the new endpoint  */ ;/**  * Replaces the route from endpoint with a new uri  *  * @param uri uri of the new endpoint  */ public void replaceFromWith(String uri) {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     getAdviceWithTasks().add(AdviceWithTasks.replaceFromWith(originalRoute, uri)). }
true;public;1;4;/**  * Replaces the route from endpoint with a new endpoint  *  * @param endpoint the new endpoint  */ ;/**  * Replaces the route from endpoint with a new endpoint  *  * @param endpoint the new endpoint  */ public void replaceFromWith(Endpoint endpoint) {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     getAdviceWithTasks().add(AdviceWithTasks.replaceFrom(originalRoute, endpoint)). }
true;public;1;4;/**  * Weaves by matching id of the nodes in the route (incl onException etc).  * <p/>  * Uses the {@link PatternHelper#matchPattern(String, String)} matching algorithm.  *  * @param pattern the pattern  * @return the builder  * @see PatternHelper#matchPattern(String, String)  */ ;/**  * Weaves by matching id of the nodes in the route (incl onException etc).  * <p/>  * Uses the {@link PatternHelper#matchPattern(String, String)} matching algorithm.  *  * @param pattern the pattern  * @return the builder  * @see PatternHelper#matchPattern(String, String)  */ public <T extends ProcessorDefinition<?>> AdviceWithBuilder<T> weaveById(String pattern) {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     return new AdviceWithBuilder<>(this, pattern, null, null, null). }
true;public;1;4;/**  * Weaves by matching the to string representation of the nodes in the route (incl onException etc).  * <p/>  * Uses the {@link PatternHelper#matchPattern(String, String)} matching algorithm.  *  * @param pattern the pattern  * @return the builder  * @see PatternHelper#matchPattern(String, String)  */ ;/**  * Weaves by matching the to string representation of the nodes in the route (incl onException etc).  * <p/>  * Uses the {@link PatternHelper#matchPattern(String, String)} matching algorithm.  *  * @param pattern the pattern  * @return the builder  * @see PatternHelper#matchPattern(String, String)  */ public <T extends ProcessorDefinition<?>> AdviceWithBuilder<T> weaveByToString(String pattern) {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     return new AdviceWithBuilder<>(this, null, pattern, null, null). }
true;public;1;4;/**  * Weaves by matching sending to endpoints with the given uri of the nodes in the route (incl onException etc).  * <p/>  * Uses the {@link PatternHelper#matchPattern(String, String)} matching algorithm.  *  * @param pattern the pattern  * @return the builder  * @see PatternHelper#matchPattern(String, String)  */ ;/**  * Weaves by matching sending to endpoints with the given uri of the nodes in the route (incl onException etc).  * <p/>  * Uses the {@link PatternHelper#matchPattern(String, String)} matching algorithm.  *  * @param pattern the pattern  * @return the builder  * @see PatternHelper#matchPattern(String, String)  */ public <T extends ProcessorDefinition<?>> AdviceWithBuilder<T> weaveByToUri(String pattern) {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     return new AdviceWithBuilder<>(this, null, null, pattern, null). }
true;public;1;4;/**  * Weaves by matching type of the nodes in the route (incl onException etc).  *  * @param type the processor type  * @return the builder  */ ;/**  * Weaves by matching type of the nodes in the route (incl onException etc).  *  * @param type the processor type  * @return the builder  */ public <T extends ProcessorDefinition<?>> AdviceWithBuilder<T> weaveByType(Class<T> type) {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     return new AdviceWithBuilder<>(this, null, null, null, type). }
true;public;0;4;/**  * Weaves by adding the nodes to the start of the route (excl onException etc).  *  * @return the builder  */ ;/**  * Weaves by adding the nodes to the start of the route (excl onException etc).  *  * @return the builder  */ public <T extends ProcessorDefinition<?>> ProcessorDefinition<?> weaveAddFirst() {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     return new AdviceWithBuilder<T>(this, "*", null, null, null).selectFirst().before(). }
true;public;0;4;/**  * Weaves by adding the nodes to the end of the route (excl onException etc).  *  * @return the builder  */ ;/**  * Weaves by adding the nodes to the end of the route (excl onException etc).  *  * @return the builder  */ public <T extends ProcessorDefinition<?>> ProcessorDefinition<?> weaveAddLast() {     ObjectHelper.notNull(originalRoute, "originalRoute", this).     return new AdviceWithBuilder<T>(this, "*", null, null, null).maxDeep(1).selectLast().after(). }
