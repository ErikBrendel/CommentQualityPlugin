commented;modifiers;parameterAmount;loc;comment;code
false;public;1;33;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     boolean async = definition.getAsyncDelayed() != null && definition.getAsyncDelayed().     boolean shutdownThreadPool = ProcessorDefinitionHelper.willCreateNewThreadPool(routeContext, definition, true).     ScheduledExecutorService threadPool = ProcessorDefinitionHelper.getConfiguredScheduledExecutorService(routeContext, "Throttle", definition, true).     // should be default 1000 millis     long period = definition.getTimePeriodMillis() != null ? definition.getTimePeriodMillis() : 1000L.     // max requests per period is mandatory     Expression maxRequestsExpression = createMaxRequestsPerPeriodExpression(routeContext).     if (maxRequestsExpression == null) {         throw new IllegalArgumentException("MaxRequestsPerPeriod expression must be provided on " + this).     }     Expression correlation = null.     if (definition.getCorrelationExpression() != null) {         correlation = definition.getCorrelationExpression().createExpression(routeContext).     }     boolean reject = definition.getRejectExecution() != null && definition.getRejectExecution().     Throttler answer = new Throttler(routeContext.getCamelContext(), maxRequestsExpression, period, threadPool, shutdownThreadPool, reject, correlation).     answer.setAsyncDelayed(async).     if (definition.getCallerRunsWhenRejected() == null) {         // should be true by default         answer.setCallerRunsWhenRejected(true).     } else {         answer.setCallerRunsWhenRejected(definition.getCallerRunsWhenRejected()).     }     return answer. }
false;private;1;7;;private Expression createMaxRequestsPerPeriodExpression(RouteContext routeContext) {     ExpressionDefinition expr = definition.getExpression().     if (expr != null) {         return expr.createExpression(routeContext).     }     return null. }
