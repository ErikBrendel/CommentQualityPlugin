commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void run() {     log.trace("Continue routing exchange {}", exchange).     if (shutdown.get()) {         exchange.setException(new RejectedExecutionException("ThreadsProcessor is not running.")).     }     callback.done(done). }
false;public;0;10;;@Override public void reject() {     // reject should mark the exchange with an rejected exception and mark not to route anymore     exchange.setException(new RejectedExecutionException()).     log.trace("Rejected routing exchange {}", exchange).     if (shutdown.get()) {         exchange.setException(new RejectedExecutionException("ThreadsProcessor is not running.")).     }     callback.done(done). }
false;public;0;4;;@Override public String toString() {     return "ProcessCall[" + exchange + "]". }
false;public;2;34;;public boolean process(Exchange exchange, AsyncCallback callback) {     if (shutdown.get()) {         throw new IllegalStateException("ThreadsProcessor is not running.").     }     // using different threads in the same transaction     if (exchange.isTransacted()) {         log.trace("Transacted Exchange must be routed synchronously for exchangeId: {} -> {}", exchange.getExchangeId(), exchange).         callback.done(true).         return true.     }     try {         // process the call in asynchronous mode         ProcessCall call = new ProcessCall(exchange, callback, false).         log.trace("Submitting task {}", call).         executorService.submit(call).         // tell Camel routing engine we continue routing asynchronous         return false.     } catch (Throwable e) {         if (executorService instanceof ThreadPoolExecutor) {             ThreadPoolExecutor tpe = (ThreadPoolExecutor) executorService.             // process the call in synchronous mode             ProcessCall call = new ProcessCall(exchange, callback, true).             rejectedPolicy.asRejectedExecutionHandler().rejectedExecution(call, tpe).             return true.         } else {             exchange.setException(e).             callback.done(true).             return true.         }     } }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;0;3;;public String toString() {     return "Threads". }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;public;0;3;;public ThreadPoolRejectedPolicy getRejectedPolicy() {     return rejectedPolicy. }
false;protected;0;3;;protected void doStart() throws Exception {     shutdown.set(false). }
false;protected;0;3;;protected void doStop() throws Exception {     shutdown.set(true). }
false;protected;0;6;;protected void doShutdown() throws Exception {     if (shutdownExecutorService) {         camelContext.getExecutorServiceManager().shutdownNow(executorService).     }     super.doShutdown(). }
