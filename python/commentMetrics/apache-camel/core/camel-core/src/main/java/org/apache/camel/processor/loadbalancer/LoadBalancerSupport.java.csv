commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void addProcessor(AsyncProcessor processor) {     processors.updateAndGet(op -> doAdd(processor, op)). }
false;public;1;3;;public void removeProcessor(AsyncProcessor processor) {     processors.updateAndGet(op -> doRemove(processor, op)). }
false;private;2;6;;private AsyncProcessor[] doAdd(AsyncProcessor processor, AsyncProcessor[] op) {     int len = op.length.     AsyncProcessor[] np = Arrays.copyOf(op, len + 1, op.getClass()).     np[len] = processor.     return np. }
false;private;2;12;;private AsyncProcessor[] doRemove(AsyncProcessor processor, AsyncProcessor[] op) {     int len = op.length.     for (int index = 0. index < len. index++) {         if (op[index].equals(processor)) {             AsyncProcessor[] np = (AsyncProcessor[]) Array.newInstance(AsyncProcessor.class, len - 1).             System.arraycopy(op, 0, np, 0, index).             System.arraycopy(op, index + 1, np, index, len - index - 1).             return np.         }     }     return op. }
false;public;0;3;;public List<AsyncProcessor> getProcessors() {     return Arrays.asList(processors.get()). }
false;protected;0;3;;protected AsyncProcessor[] doGetProcessors() {     return processors.get(). }
false;public;0;7;;@SuppressWarnings("unchecked") public List<Processor> next() {     if (!hasNext()) {         return null.     }     return (List) getProcessors(). }
false;public;0;3;;public boolean hasNext() {     return doGetProcessors().length > 0. }
false;public;0;3;;public String getId() {     return id. }
false;public;1;3;;public void setId(String id) {     this.id = id. }
false;protected;0;3;;protected void doStart() throws Exception {     ServiceHelper.startService((Object[]) processors.get()). }
false;protected;0;3;;protected void doStop() throws Exception {     ServiceHelper.stopService((Object[]) processors.get()). }
false;protected;0;8;;@Override protected void doShutdown() throws Exception {     AsyncProcessor[] p = processors.get().     ServiceHelper.stopAndShutdownServices((Object[]) p).     for (AsyncProcessor processor : p) {         removeProcessor(processor).     } }
false;public;0;3;;public String toString() {     return getClass().getSimpleName() + Arrays.toString(doGetProcessors()). }
