commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String toString() {     return "Throttle[" + description() + "]". }
false;protected;0;3;;protected String description() {     return getExpression() + " request per " + getTimePeriodMillis() + " millis". }
false;public;0;4;;@Override public String getShortName() {     return "throttle". }
false;public;0;4;;@Override public String getLabel() {     return "throttle[" + description() + "]". }
true;public;1;4;/**  * Sets the time period during which the maximum request count is valid for  *  * @param timePeriodMillis  period in millis  * @return the builder  */ ;// Fluent API // ------------------------------------------------------------------------- /**  * Sets the time period during which the maximum request count is valid for  *  * @param timePeriodMillis  period in millis  * @return the builder  */ public ThrottleDefinition timePeriodMillis(long timePeriodMillis) {     setTimePeriodMillis(timePeriodMillis).     return this. }
true;public;1;4;/**  * Sets the time period during which the maximum request count per period  *  * @param maximumRequestsPerPeriod  the maximum request count number per time period  * @return the builder  */ ;/**  * Sets the time period during which the maximum request count per period  *  * @param maximumRequestsPerPeriod  the maximum request count number per time period  * @return the builder  */ public ThrottleDefinition maximumRequestsPerPeriod(long maximumRequestsPerPeriod) {     setExpression(ExpressionNodeHelper.toExpressionDefinition(ExpressionBuilder.constantExpression(maximumRequestsPerPeriod))).     return this. }
true;public;1;4;/**  * Whether or not the caller should run the task when it was rejected by the thread pool.  * <p/>  * Is by default <tt>true</tt>  *  * @param callerRunsWhenRejected whether or not the caller should run  * @return the builder  */ ;/**  * Whether or not the caller should run the task when it was rejected by the thread pool.  * <p/>  * Is by default <tt>true</tt>  *  * @param callerRunsWhenRejected whether or not the caller should run  * @return the builder  */ public ThrottleDefinition callerRunsWhenRejected(boolean callerRunsWhenRejected) {     setCallerRunsWhenRejected(callerRunsWhenRejected).     return this. }
true;public;0;4;/**  * Enables asynchronous delay which means the thread will <b>not</b> block while delaying.  *  * @return the builder  */ ;/**  * Enables asynchronous delay which means the thread will <b>not</b> block while delaying.  *  * @return the builder  */ public ThrottleDefinition asyncDelayed() {     setAsyncDelayed(true).     return this. }
true;public;1;4;/**  * Whether or not throttler throws the ThrottlerRejectedExecutionException when the exchange exceeds the request limit  * <p/>  * Is by default <tt>false</tt>  *  * @param rejectExecution throw the RejectExecutionException if the exchange exceeds the request limit  * @return the builder  */ ;/**  * Whether or not throttler throws the ThrottlerRejectedExecutionException when the exchange exceeds the request limit  * <p/>  * Is by default <tt>false</tt>  *  * @param rejectExecution throw the RejectExecutionException if the exchange exceeds the request limit  * @return the builder  */ public ThrottleDefinition rejectExecution(boolean rejectExecution) {     setRejectExecution(rejectExecution).     return this. }
true;public;1;4;/**  * To use a custom thread pool (ScheduledExecutorService) by the throttler.  *  * @param executorService  the custom thread pool (must be scheduled)  * @return the builder  */ ;/**  * To use a custom thread pool (ScheduledExecutorService) by the throttler.  *  * @param executorService  the custom thread pool (must be scheduled)  * @return the builder  */ public ThrottleDefinition executorService(ExecutorService executorService) {     setExecutorService(executorService).     return this. }
true;public;1;4;/**  * To use a custom thread pool (ScheduledExecutorService) by the throttler.  *  * @param executorServiceRef the reference id of the thread pool (must be scheduled)  * @return the builder  */ ;/**  * To use a custom thread pool (ScheduledExecutorService) by the throttler.  *  * @param executorServiceRef the reference id of the thread pool (must be scheduled)  * @return the builder  */ public ThrottleDefinition executorServiceRef(String executorServiceRef) {     setExecutorServiceRef(executorServiceRef).     return this. }
true;public;1;5;/**  * Expression to configure the maximum number of messages to throttle per request  */ ;// Properties // ------------------------------------------------------------------------- /**  * Expression to configure the maximum number of messages to throttle per request  */ @Override public void setExpression(ExpressionDefinition expression) {     // override to include javadoc what the expression is used for     super.setExpression(expression). }
false;public;0;3;;public Long getTimePeriodMillis() {     return timePeriodMillis. }
false;public;1;3;;public void setTimePeriodMillis(Long timePeriodMillis) {     this.timePeriodMillis = timePeriodMillis. }
false;public;0;3;;public Boolean getAsyncDelayed() {     return asyncDelayed. }
false;public;1;3;;public void setAsyncDelayed(Boolean asyncDelayed) {     this.asyncDelayed = asyncDelayed. }
false;public;0;3;;public Boolean getCallerRunsWhenRejected() {     return callerRunsWhenRejected. }
false;public;1;3;;public void setCallerRunsWhenRejected(Boolean callerRunsWhenRejected) {     this.callerRunsWhenRejected = callerRunsWhenRejected. }
false;public;0;3;;public ExecutorService getExecutorService() {     return executorService. }
false;public;1;3;;public void setExecutorService(ExecutorService executorService) {     this.executorService = executorService. }
false;public;0;3;;public String getExecutorServiceRef() {     return executorServiceRef. }
false;public;1;3;;public void setExecutorServiceRef(String executorServiceRef) {     this.executorServiceRef = executorServiceRef. }
false;public;0;3;;public Boolean getRejectExecution() {     return rejectExecution. }
false;public;1;3;;public void setRejectExecution(Boolean rejectExecution) {     this.rejectExecution = rejectExecution. }
true;public;1;3;/**  * The expression used to calculate the correlation key to use for throttle grouping.  * The Exchange which has the same correlation key is throttled together.  */ ;/**  * The expression used to calculate the correlation key to use for throttle grouping.  * The Exchange which has the same correlation key is throttled together.  */ public void setCorrelationExpression(ExpressionSubElementDefinition correlationExpression) {     this.correlationExpression = correlationExpression. }
false;public;0;3;;public ExpressionSubElementDefinition getCorrelationExpression() {     return correlationExpression. }
