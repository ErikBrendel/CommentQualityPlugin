commented;modifiers;parameterAmount;loc;comment;code
true;public,static;1;26;/**  * Determines which {@link ExpressionDefinition} describes the given expression best possible.  * <p/>  * This implementation will use types such as {@link SimpleExpression}, {@link XPathExpression} etc.  * if the given expression is detect as such a type.  *  * @param expression the expression  * @return a definition which describes the expression  */ ;/**  * Determines which {@link ExpressionDefinition} describes the given expression best possible.  * <p/>  * This implementation will use types such as {@link SimpleExpression}, {@link XPathExpression} etc.  * if the given expression is detect as such a type.  *  * @param expression the expression  * @return a definition which describes the expression  */ public static ExpressionDefinition toExpressionDefinition(Expression expression) {     if (expression instanceof SimpleBuilder) {         SimpleBuilder builder = (SimpleBuilder) expression.         // we keep the original expression by using the constructor that accepts an expression         SimpleExpression answer = new SimpleExpression(builder).         answer.setExpression(builder.getText()).         answer.setResultType(builder.getResultType()).         return answer.     } else if (expression instanceof XPathBuilder) {         XPathBuilder builder = (XPathBuilder) expression.         // we keep the original expression by using the constructor that accepts an expression         XPathExpression answer = new XPathExpression(builder).         answer.setExpression(builder.getText()).         answer.setResultType(builder.getResultType()).         return answer.     } else if (expression instanceof ValueBuilder) {         // ValueBuilder wraps the actual expression so unwrap         ValueBuilder builder = (ValueBuilder) expression.         expression = builder.getExpression().     }     if (expression instanceof ExpressionDefinition) {         return (ExpressionDefinition) expression.     }     return new ExpressionDefinition(expression). }
true;public,static;1;27;/**  * Determines which {@link ExpressionDefinition} describes the given predicate best possible.  * <p/>  * This implementation will use types such as {@link SimpleExpression}, {@link XPathExpression} etc.  * if the given predicate is detect as such a type.  *  * @param predicate the predicate  * @return a definition which describes the predicate  */ ;/**  * Determines which {@link ExpressionDefinition} describes the given predicate best possible.  * <p/>  * This implementation will use types such as {@link SimpleExpression}, {@link XPathExpression} etc.  * if the given predicate is detect as such a type.  *  * @param predicate the predicate  * @return a definition which describes the predicate  */ public static ExpressionDefinition toExpressionDefinition(Predicate predicate) {     if (predicate instanceof SimpleBuilder) {         SimpleBuilder builder = (SimpleBuilder) predicate.         // we keep the original expression by using the constructor that accepts an expression         SimpleExpression answer = new SimpleExpression(builder).         answer.setExpression(builder.getText()).         return answer.     } else if (predicate instanceof XPathBuilder) {         XPathBuilder builder = (XPathBuilder) predicate.         // we keep the original expression by using the constructor that accepts an expression         XPathExpression answer = new XPathExpression(builder).         answer.setExpression(builder.getText()).         return answer.     } else if (predicate instanceof ValueBuilder) {         // ValueBuilder wraps the actual predicate so unwrap         ValueBuilder builder = (ValueBuilder) predicate.         Expression expression = builder.getExpression().         if (expression instanceof Predicate) {             predicate = (Predicate) expression.         }     }     if (predicate instanceof ExpressionDefinition) {         return (ExpressionDefinition) predicate.     }     return new ExpressionDefinition(predicate). }
