commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getLanguage() {     return "xquery". }
false;public;0;3;;public String getType() {     return type. }
true;public;1;3;/**  * Sets the class name of the result type (type from output)  * <p/>  * The default result type is NodeSet  */ ;/**  * Sets the class name of the result type (type from output)  * <p/>  * The default result type is NodeSet  */ public void setType(String type) {     this.type = type. }
false;public;0;3;;public Class<?> getResultType() {     return resultType. }
true;public;1;3;/**  * Sets the class of the result type (type from output).  * <p/>  * The default result type is NodeSet  */ ;/**  * Sets the class of the result type (type from output).  * <p/>  * The default result type is NodeSet  */ public void setResultType(Class<?> resultType) {     this.resultType = resultType. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
true;public;1;3;/**  * Name of header to use as input, instead of the message body  */ ;/**  * Name of header to use as input, instead of the message body  */ public void setHeaderName(String headerName) {     this.headerName = headerName. }
false;public;1;12;;@Override public Expression createExpression(CamelContext camelContext) {     if (resultType == null && type != null) {         try {             resultType = camelContext.getClassResolver().resolveMandatoryClass(type).         } catch (ClassNotFoundException e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return super.createExpression(camelContext). }
false;protected;2;10;;@Override protected void configureExpression(CamelContext camelContext, Expression expression) {     if (resultType != null) {         setProperty(expression, "resultType", resultType).     }     if (ObjectHelper.isNotEmpty(getHeaderName())) {         setProperty(expression, "headerName", getHeaderName()).     }     super.configureExpression(camelContext, expression). }
false;protected;2;10;;@Override protected void configurePredicate(CamelContext camelContext, Predicate predicate) {     if (resultType != null) {         setProperty(predicate, "resultType", resultType).     }     if (ObjectHelper.isNotEmpty(getHeaderName())) {         setProperty(predicate, "headerName", getHeaderName()).     }     super.configurePredicate(camelContext, predicate). }
