commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;0;3;;public List<RouteContext> getRouteContexts() {     return routeContexts. }
false;public;0;3;;public RouteDefinition getRouteDefinition() {     return routeDefinition. }
false;public;0;3;;public Collection<Route> getRoutes() {     return routes. }
true;public;0;15;/**  * Gather all the endpoints this route service uses  * <p/>  * This implementation finds the endpoints by searching all the child services  * for {@link org.apache.camel.EndpointAware} processors which uses an endpoint.  */ ;/**  * Gather all the endpoints this route service uses  * <p/>  * This implementation finds the endpoints by searching all the child services  * for {@link org.apache.camel.EndpointAware} processors which uses an endpoint.  */ public Set<Endpoint> gatherEndpoints() {     Set<Endpoint> answer = new LinkedHashSet<>().     for (Route route : routes) {         Set<Service> services = gatherChildServices(route, true).         for (Service service : services) {             if (service instanceof EndpointAware) {                 Endpoint endpoint = ((EndpointAware) service).getEndpoint().                 if (endpoint != null) {                     answer.add(endpoint).                 }             }         }     }     return answer. }
true;public;0;3;/**  * Gets the inputs to the routes.  *  * @return list of {@link Consumer} as inputs for the routes  */ ;/**  * Gets the inputs to the routes.  *  * @return list of {@link Consumer} as inputs for the routes  */ public Map<Route, Consumer> getInputs() {     return inputs. }
false;public;0;3;;public boolean isRemovingRoutes() {     return removingRoutes. }
false;public;1;3;;public void setRemovingRoutes(boolean removingRoutes) {     this.removingRoutes = removingRoutes. }
false;public;0;7;;public void warmUp() throws Exception {     try {         doWarmUp().     } catch (Exception e) {         throw new FailedToCreateRouteException(routeDefinition.getId(), RouteDefinitionHelper.getRouteMessage(routeDefinition.toString()), e).     } }
false;protected,synchronized;0;66;;protected synchronized void doWarmUp() throws Exception {     if (endpointDone.compareAndSet(false, true)) {         // and whatnot, thus their lifecycle is to start once, and only to stop when Camel shutdown         for (Route route : routes) {             // ensure endpoint is started first (before the route services, such as the consumer)             ServiceHelper.startService(route.getEndpoint()).         }     }     if (warmUpDone.compareAndSet(false, true)) {         for (Route route : routes) {             try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {                 // warm up the route first                 route.warmUp().                 log.debug("Starting services on route: {}", route.getId()).                 List<Service> services = route.getServices().                 // callback that we are staring these services                 route.onStartingServices(services).                 // gather list of services to start as we need to start child services as well                 Set<Service> list = new LinkedHashSet<>().                 for (Service service : services) {                     list.addAll(ServiceHelper.getChildServices(service)).                 }                 // split into consumers and child services as we need to start the consumers                 // afterwards to avoid them being active while the others start                 List<Service> childServices = new ArrayList<>().                 for (Service service : list) {                     // inject the route                     if (service instanceof RouteAware) {                         ((RouteAware) service).setRoute(route).                     }                     if (service instanceof Consumer) {                         inputs.put(route, (Consumer) service).                     } else {                         childServices.add(service).                     }                 }                 startChildService(route, childServices).                 // fire event                 EventHelper.notifyRouteAdded(camelContext, route).             }         }         // ensure lifecycle strategy is invoked which among others enlist the route in JMX         for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {             strategy.onRoutesAdd(routes).         }         // add routes to camel context         camelContext.addRouteCollection(routes).         // add the routes to the inflight registry so they are pre-installed         for (Route route : routes) {             camelContext.getInflightRepository().addRoute(route.getId()).         }     } }
false;protected;0;20;;protected void doStart() throws Exception {     warmUp().     for (Route route : routes) {         try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {             // start the route itself             ServiceHelper.startService(route).             // invoke callbacks on route policy             if (route.getRouteContext().getRoutePolicyList() != null) {                 for (RoutePolicy routePolicy : route.getRouteContext().getRoutePolicyList()) {                     routePolicy.onStart(route).                 }             }             // fire event             EventHelper.notifyRouteStarted(camelContext, route).         }     } }
false;protected;0;45;;protected void doStop() throws Exception {     // if we are stopping CamelContext then we are shutting down     boolean isShutdownCamelContext = camelContext.isStopping().     if (isShutdownCamelContext || isRemovingRoutes()) {         // need to call onRoutesRemove when the CamelContext is shutting down or Route is shutdown         for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {             strategy.onRoutesRemove(routes).         }     }     for (Route route : routes) {         try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {             log.debug("Stopping services on route: {}", route.getId()).             // gather list of services to stop as we need to start child services as well             Set<Service> services = gatherChildServices(route, true).             // stop services             stopChildService(route, services, isShutdownCamelContext).             // stop the route itself             if (isShutdownCamelContext) {                 ServiceHelper.stopAndShutdownServices(route).             } else {                 ServiceHelper.stopService(route).             }             // invoke callbacks on route policy             if (route.getRouteContext().getRoutePolicyList() != null) {                 for (RoutePolicy routePolicy : route.getRouteContext().getRoutePolicyList()) {                     routePolicy.onStop(route).                 }             }             // fire event             EventHelper.notifyRouteStopped(camelContext, route).         }     }     if (isRemovingRoutes()) {         camelContext.removeRouteCollection(routes).     }     // need to warm up again     warmUpDone.set(false). }
false;protected;0;48;;@Override protected void doShutdown() throws Exception {     for (Route route : routes) {         try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {             log.debug("Shutting down services on route: {}", route.getId()).             // gather list of services to stop as we need to start child services as well             Set<Service> services = gatherChildServices(route, true).             // shutdown services             stopChildService(route, services, true).             // shutdown the route itself             ServiceHelper.stopAndShutdownServices(route).             // endpoints should only be stopped when Camel is shutting down             // see more details in the warmUp method             ServiceHelper.stopAndShutdownServices(route.getEndpoint()).             // invoke callbacks on route policy             if (route.getRouteContext().getRoutePolicyList() != null) {                 for (RoutePolicy routePolicy : route.getRouteContext().getRoutePolicyList()) {                     routePolicy.onRemove(route).                 }             }             // fire event             EventHelper.notifyRouteRemoved(camelContext, route).         }     }     // need to call onRoutesRemove when the CamelContext is shutting down or Route is shutdown     for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {         strategy.onRoutesRemove(routes).     }     // remove the routes from the inflight registry     for (Route route : routes) {         camelContext.getInflightRepository().removeRoute(route.getId()).     }     // remove the routes from the collections     camelContext.removeRouteCollection(routes).     // clear inputs on shutdown     inputs.clear().     warmUpDone.set(false).     endpointDone.set(false). }
false;protected;0;14;;@Override protected void doSuspend() throws Exception {     // to safely suspend and resume     for (Route route : routes) {         try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {             if (route.getRouteContext().getRoutePolicyList() != null) {                 for (RoutePolicy routePolicy : route.getRouteContext().getRoutePolicyList()) {                     routePolicy.onSuspend(route).                 }             }         }     } }
false;protected;0;14;;@Override protected void doResume() throws Exception {     // to safely suspend and resume     for (Route route : routes) {         try (MDCHelper mdcHelper = new MDCHelper(route.getId())) {             if (route.getRouteContext().getRoutePolicyList() != null) {                 for (RoutePolicy routePolicy : route.getRouteContext().getRoutePolicyList()) {                     routePolicy.onResume(route).                 }             }         }     } }
false;protected;2;10;;protected void startChildService(Route route, List<Service> services) throws Exception {     for (Service service : services) {         log.debug("Starting child service on route: {} -> {}", route.getId(), service).         for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {             strategy.onServiceAdd(camelContext, service, route).         }         ServiceHelper.startService(service).         addChildService(service).     } }
false;protected;3;22;;protected void stopChildService(Route route, Set<Service> services, boolean shutdown) throws Exception {     for (Service service : services) {         log.debug("{} child service on route: {} -> {}", shutdown ? "Shutting down" : "Stopping", route.getId(), service).         if (service instanceof ErrorHandler) {             // special for error handlers             for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {                 RouteDefinition definition = (RouteDefinition) route.getRouteContext().getRoute().                 strategy.onErrorHandlerRemove(route.getRouteContext(), (Processor) service, definition.getErrorHandlerBuilder()).             }         } else {             for (LifecycleStrategy strategy : camelContext.getLifecycleStrategies()) {                 strategy.onServiceRemove(camelContext, service, route).             }         }         if (shutdown) {             ServiceHelper.stopAndShutdownService(service).         } else {             ServiceHelper.stopService(service).         }         removeChildService(service).     } }
true;private;2;18;/**  * Gather all child services  */ ;/**  * Gather all child services  */ private Set<Service> gatherChildServices(Route route, boolean includeErrorHandler) {     // gather list of services to stop as we need to start child services as well     List<Service> services = new ArrayList<>().     services.addAll(route.getServices()).     // also get route scoped services     doGetRouteScopedServices(services, route).     Set<Service> list = new LinkedHashSet<>().     for (Service service : services) {         list.addAll(ServiceHelper.getChildServices(service)).     }     if (includeErrorHandler) {         // also get route scoped error handler (which must be done last)         doGetRouteScopedErrorHandler(list, route).     }     Set<Service> answer = new LinkedHashSet<>().     answer.addAll(list).     return answer. }
true;private;2;18;/**  * Gather the route scoped error handler from the given route  */ ;/**  * Gather the route scoped error handler from the given route  */ private void doGetRouteScopedErrorHandler(Set<Service> services, Route route) {     // only include error handlers if they are route scoped     boolean includeErrorHandler = !routeDefinition.isContextScopedErrorHandler(route.getRouteContext().getCamelContext()).     List<Service> extra = new ArrayList<>().     if (includeErrorHandler) {         for (Service service : services) {             if (service instanceof Channel) {                 Processor eh = ((Channel) service).getErrorHandler().                 if (eh instanceof Service) {                     extra.add((Service) eh).                 }             }         }     }     if (!extra.isEmpty()) {         services.addAll(extra).     } }
true;private;2;22;/**  * Gather all other kind of route scoped services from the given route, except error handler  */ ;/**  * Gather all other kind of route scoped services from the given route, except error handler  */ private void doGetRouteScopedServices(List<Service> services, Route route) {     RouteDefinition definition = (RouteDefinition) route.getRouteContext().getRoute().     for (ProcessorDefinition<?> output : definition.getOutputs()) {         if (output instanceof OnExceptionDefinition) {             OnExceptionDefinition onExceptionDefinition = (OnExceptionDefinition) output.             if (onExceptionDefinition.isRouteScoped()) {                 Processor errorHandler = onExceptionDefinition.getErrorHandler(route.getId()).                 if (errorHandler instanceof Service) {                     services.add((Service) errorHandler).                 }             }         } else if (output instanceof OnCompletionDefinition) {             OnCompletionDefinition onCompletionDefinition = (OnCompletionDefinition) output.             if (onCompletionDefinition.isRouteScoped()) {                 Processor onCompletionProcessor = onCompletionDefinition.getOnCompletion(route.getId()).                 if (onCompletionProcessor instanceof Service) {                     services.add((Service) onCompletionProcessor).                 }             }         }     } }
false;public;0;10;;@Override public void close() {     if (getCamelContext().isUseMDCLogging()) {         if (originalContextMap != null) {             MDC.setContextMap(originalContextMap).         } else {             MDC.clear().         }     } }
