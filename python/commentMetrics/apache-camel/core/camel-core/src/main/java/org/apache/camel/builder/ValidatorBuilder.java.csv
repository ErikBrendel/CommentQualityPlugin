commented;modifiers;parameterAmount;loc;comment;code
true;public;1;4;/**  * Set the data type name.  * If you specify 'xml:XYZ', the validator will be picked up if source type is  * 'xml:XYZ'. If you specify just 'xml', the validator matches with all of  * 'xml' source type like 'xml:ABC' or 'xml:DEF'.  *  * @param type 'from' data type name  */ ;/**  * Set the data type name.  * If you specify 'xml:XYZ', the validator will be picked up if source type is  * 'xml:XYZ'. If you specify just 'xml', the validator matches with all of  * 'xml' source type like 'xml:ABC' or 'xml:DEF'.  *  * @param type 'from' data type name  */ public ValidatorBuilder type(String type) {     this.type = type.     return this. }
true;public;1;4;/**  * Set the data type using Java class.  *  * @param type Java class represents data type  */ ;/**  * Set the data type using Java class.  *  * @param type Java class represents data type  */ public ValidatorBuilder type(Class<?> type) {     this.type = new DataType(type).toString().     return this. }
true;public;1;5;/**  * Set the URI to be used for the endpoint {@link Validator}.  * @see EndpointValidatorDefinition, ProcessorValidator  *  * @param uri endpoint URI  */ ;/**  * Set the URI to be used for the endpoint {@link Validator}.  * @see EndpointValidatorDefinition, ProcessorValidator  *  * @param uri endpoint URI  */ public ValidatorBuilder withUri(String uri) {     resetType().     this.uri = uri.     return this. }
true;public;1;5;/**  * Set the {@link Expression} to be used for the predicate {@link Validator}.  * @see PredicateValidatorDefinition, ProcessorValidator  *  * @param expression validation expression  */ ;/**  * Set the {@link Expression} to be used for the predicate {@link Validator}.  * @see PredicateValidatorDefinition, ProcessorValidator  *  * @param expression validation expression  */ public ValidatorBuilder withExpression(@AsPredicate Expression expression) {     resetType().     this.expression = new ExpressionDefinition(expression).     return this. }
true;public;1;5;/**  * Set the {@link Predicate} to be used for the predicate {@link Validator}.  * @see PredicateValidatorDefinition, ProcessorValidator  *  * @param predicate validation predicate  */ ;/**  * Set the {@link Predicate} to be used for the predicate {@link Validator}.  * @see PredicateValidatorDefinition, ProcessorValidator  *  * @param predicate validation predicate  */ public ValidatorBuilder withExpression(@AsPredicate Predicate predicate) {     resetType().     this.expression = new ExpressionDefinition(predicate).     return this. }
true;public;1;5;/**  * Set the Java {@code Class} represents a custom {@code Validator} implementation class.  * @see CustomValidatorDefinition  *  * @param clazz {@code Class} object represents custom validator implementation  */ ;/**  * Set the Java {@code Class} represents a custom {@code Validator} implementation class.  * @see CustomValidatorDefinition  *  * @param clazz {@code Class} object represents custom validator implementation  */ public ValidatorBuilder withJava(Class<? extends Validator> clazz) {     resetType().     this.clazz = clazz.     return this. }
true;public;1;5;/**  * Set the Java Bean name to be used for custom {@code Validator}.  * @see CustomValidatorDefinition  *  * @param ref bean name for the custom {@code Validator}  */ ;/**  * Set the Java Bean name to be used for custom {@code Validator}.  * @see CustomValidatorDefinition  *  * @param ref bean name for the custom {@code Validator}  */ public ValidatorBuilder withBean(String ref) {     resetType().     this.beanRef = ref.     return this. }
false;private;0;6;;private void resetType() {     this.uri = null.     this.expression = null.     this.clazz = null.     this.beanRef = null. }
true;public;1;25;/**  * Configures a new Validator according to the configurations built on this builder  * and register it into the given {@code CamelContext}.  *  * @param camelContext the given CamelContext  */ ;/**  * Configures a new Validator according to the configurations built on this builder  * and register it into the given {@code CamelContext}.  *  * @param camelContext the given CamelContext  */ public void configure(CamelContext camelContext) {     ValidatorDefinition validator.     if (uri != null) {         EndpointValidatorDefinition etd = new EndpointValidatorDefinition().         etd.setUri(uri).         validator = etd.     } else if (expression != null) {         PredicateValidatorDefinition dtd = new PredicateValidatorDefinition().         dtd.setExpression(expression).         validator = dtd.     } else if (clazz != null) {         CustomValidatorDefinition ctd = new CustomValidatorDefinition().         ctd.setClassName(clazz.getName()).         validator = ctd.     } else if (beanRef != null) {         CustomValidatorDefinition ctd = new CustomValidatorDefinition().         ctd.setRef(beanRef).         validator = ctd.     } else {         throw new IllegalArgumentException("No Validator type was specified").     }     validator.setType(type).     camelContext.adapt(ModelCamelContext.class).getValidators().add(validator). }
