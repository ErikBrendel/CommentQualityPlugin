commented;modifiers;parameterAmount;loc;comment;code
true;public,static;2;3;/**  * Returns true if the given namespaceURI is empty or if it matches the  * given expected namespace  */ ;/**  * Returns true if the given namespaceURI is empty or if it matches the  * given expected namespace  */ public static boolean isMatchingNamespaceOrEmptyNamespace(String namespaceURI, String expectedNamespace) {     return ObjectHelper.isEmpty(namespaceURI) || namespaceURI.equals(expectedNamespace). }
false;public;2;4;;public Namespaces add(String prefix, String uri) {     namespaces.put(prefix, uri).     return this. }
false;public;1;19;;public Namespaces add(Element element) {     // let's set the parent first in case we overload a prefix here     Node parentNode = element.getParentNode().     if (parentNode instanceof org.w3c.dom.Element) {         add((Element) parentNode).     }     NamedNodeMap attributes = element.getAttributes().     int size = attributes.getLength().     for (int i = 0. i < size. i++) {         Attr node = (Attr) attributes.item(i).         String name = node.getName().         if (name.startsWith("xmlns:")) {             String prefix = name.substring("xmlns:".length()).             String uri = node.getValue().             add(prefix, uri).         }     }     return this. }
false;public;0;3;;public Map<String, String> getNamespaces() {     return namespaces. }
true;public;1;3;/**  * Configures the namespace aware object  */ ;/**  * Configures the namespace aware object  */ public void configure(NamespaceAware namespaceAware) {     namespaceAware.setNamespaces(getNamespaces()). }
