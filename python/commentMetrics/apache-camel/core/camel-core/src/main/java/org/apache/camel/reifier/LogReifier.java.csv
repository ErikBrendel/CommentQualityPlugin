commented;modifiers;parameterAmount;loc;comment;code
false;public;1;48;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     StringHelper.notEmpty(definition.getMessage(), "message", this).     // use simple language for the message string to give it more power     Expression exp = routeContext.getCamelContext().resolveLanguage("simple").createExpression(definition.getMessage()).     // get logger explicitely set in the definition     Logger logger = definition.getLogger().     // get logger which may be set in XML definition     if (logger == null && ObjectHelper.isNotEmpty(definition.getLoggerRef())) {         logger = CamelContextHelper.mandatoryLookup(routeContext.getCamelContext(), definition.getLoggerRef(), Logger.class).     }     if (logger == null) {         // first - try to lookup single instance in the registry, just like LogComponent         Map<String, Logger> availableLoggers = routeContext.lookupByType(Logger.class).         if (availableLoggers.size() == 1) {             logger = availableLoggers.values().iterator().next().             log.debug("Using custom Logger: {}", logger).         } else if (availableLoggers.size() > 1) {             // we should log about this somewhere...             log.debug("More than one {} instance found in the registry. Falling back to create logger by name.", Logger.class.getName()).         }     }     if (logger == null) {         String name = definition.getLogName().         if (name == null) {             name = routeContext.getCamelContext().getGlobalOption(Exchange.LOG_EIP_NAME).             if (name != null) {                 log.debug("Using logName from CamelContext properties: {}", name).             }         }         if (name == null) {             name = routeContext.getRoute().getId().             log.debug("LogName is not configured, using route id as logName: {}", name).         }         logger = LoggerFactory.getLogger(name).     }     // should be INFO by default     LoggingLevel level = definition.getLoggingLevel() != null ? definition.getLoggingLevel() : LoggingLevel.INFO.     CamelLogger camelLogger = new CamelLogger(logger, level, definition.getMarker()).     return new LogProcessor(exp, camelLogger, getMaskingFormatter(routeContext), routeContext.getCamelContext().getLogListeners()). }
false;private;1;10;;private MaskingFormatter getMaskingFormatter(RouteContext routeContext) {     if (routeContext.isLogMask()) {         MaskingFormatter formatter = routeContext.getCamelContext().getRegistry().lookupByNameAndType(MaskingFormatter.CUSTOM_LOG_MASK_REF, MaskingFormatter.class).         if (formatter == null) {             formatter = new DefaultMaskingFormatter().         }         return formatter.     }     return null. }
