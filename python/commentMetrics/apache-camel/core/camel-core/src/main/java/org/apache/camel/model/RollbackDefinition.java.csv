commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public String toString() {     if (message != null) {         return "Rollback[" + message + "]".     } else {         return "Rollback".     } }
false;public;0;4;;@Override public String getShortName() {     return "rollback". }
false;public;0;4;;@Override public String getLabel() {     return "rollback". }
false;public;0;3;;public String getMessage() {     return message. }
true;public;1;3;/**  * Message to use in rollback exception  */ ;/**  * Message to use in rollback exception  */ public void setMessage(String message) {     this.message = message. }
false;public;0;3;;public Boolean getMarkRollbackOnly() {     return markRollbackOnly. }
true;public;1;3;/**  * Mark the transaction for rollback only (cannot be overruled to commit)  */ ;/**  * Mark the transaction for rollback only (cannot be overruled to commit)  */ public void setMarkRollbackOnly(Boolean markRollbackOnly) {     this.markRollbackOnly = markRollbackOnly. }
false;public;0;3;;public Boolean getMarkRollbackOnlyLast() {     return markRollbackOnlyLast. }
true;public;1;3;/**  * Mark only last sub transaction for rollback only.  * <p/>  * When using sub transactions (if the transaction manager support this)  */ ;/**  * Mark only last sub transaction for rollback only.  * <p/>  * When using sub transactions (if the transaction manager support this)  */ public void setMarkRollbackOnlyLast(Boolean markRollbackOnlyLast) {     this.markRollbackOnlyLast = markRollbackOnlyLast. }
