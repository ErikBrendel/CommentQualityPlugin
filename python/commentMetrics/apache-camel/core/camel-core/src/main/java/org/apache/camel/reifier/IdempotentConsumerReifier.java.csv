commented;modifiers;parameterAmount;loc;comment;code
false;public;1;19;;@Override public Processor createProcessor(RouteContext routeContext) throws Exception {     Processor childProcessor = this.createChildProcessor(routeContext, true).     IdempotentRepository idempotentRepository = resolveMessageIdRepository(routeContext).     ObjectHelper.notNull(idempotentRepository, "idempotentRepository", definition).     Expression expression = definition.getExpression().createExpression(routeContext).     // these boolean should be true by default     boolean eager = definition.getEager() == null || definition.getEager().     boolean duplicate = definition.getSkipDuplicate() == null || definition.getSkipDuplicate().     boolean remove = definition.getRemoveOnFailure() == null || definition.getRemoveOnFailure().     // these boolean should be false by default     boolean completionEager = definition.getCompletionEager() != null && definition.getCompletionEager().     return new IdempotentConsumer(expression, idempotentRepository, eager, completionEager, duplicate, remove, childProcessor). }
true;protected;1;6;/**  * Strategy method to resolve the {@link org.apache.camel.spi.IdempotentRepository} to use  *  * @param routeContext route context  * @return the repository  */ ;/**  * Strategy method to resolve the {@link org.apache.camel.spi.IdempotentRepository} to use  *  * @param routeContext route context  * @return the repository  */ protected <T> IdempotentRepository resolveMessageIdRepository(RouteContext routeContext) {     if (definition.getMessageIdRepositoryRef() != null) {         definition.setMessageIdRepository(routeContext.mandatoryLookup(definition.getMessageIdRepositoryRef(), IdempotentRepository.class)).     }     return definition.getMessageIdRepository(). }
