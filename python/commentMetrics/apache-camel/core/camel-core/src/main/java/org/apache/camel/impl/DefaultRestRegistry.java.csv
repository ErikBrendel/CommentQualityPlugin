commented;modifiers;parameterAmount;loc;comment;code
false;public;12;5;;public void addRestService(Consumer consumer, String url, String baseUrl, String basePath, String uriTemplate, String method, String consumes, String produces, String inType, String outType, String routeId, String description) {     RestServiceEntry entry = new RestServiceEntry(consumer, url, baseUrl, basePath, uriTemplate, method, consumes, produces, inType, outType, routeId, description).     registry.put(consumer, entry). }
false;public;1;3;;public void removeRestService(Consumer consumer) {     registry.remove(consumer). }
false;public;0;4;;@Override public List<RestRegistry.RestService> listAllRestServices() {     return new ArrayList<>(registry.values()). }
false;public;0;4;;@Override public int size() {     return registry.size(). }
false;public;0;55;;@Override public String apiDocAsJson() {     // see if there is a rest-api endpoint which would be the case if rest api-doc has been explicit enabled     if (apiProducer == null) {         Endpoint restApiEndpoint = null.         Endpoint restEndpoint = null.         for (Map.Entry<String, Endpoint> entry : camelContext.getEndpointMap().entrySet()) {             String uri = entry.getKey().             if (uri.startsWith("rest-api:")) {                 restApiEndpoint = entry.getValue().                 break.             } else if (restEndpoint == null && uri.startsWith("rest:")) {                 restEndpoint = entry.getValue().             }         }         if (restApiEndpoint == null && restEndpoint != null) {             // no rest-api has been explicit enabled, then we need to create it first             RestEndpoint rest = (RestEndpoint) restEndpoint.             String componentName = rest.getComponentName().             if (componentName != null) {                 RestConfiguration config = camelContext.getRestConfiguration(componentName, true).                 String apiComponent = config.getApiComponent() != null ? config.getApiComponent() : RestApiEndpoint.DEFAULT_API_COMPONENT_NAME.                 String path = config.getApiContextPath() != null ? config.getApiContextPath() : "api-doc".                 restApiEndpoint = camelContext.getEndpoint(String.format("rest-api:%s/%s?componentName=%s&apiComponentName=%s&contextIdPattern=#name#", path, camelContext.getName(), componentName, apiComponent)).             }         }         if (restApiEndpoint != null) {             // reuse the producer to avoid creating it             try {                 apiProducer = restApiEndpoint.createProducer().                 camelContext.addService(apiProducer, true).             } catch (Exception e) {                 throw RuntimeCamelException.wrapRuntimeCamelException(e).             }         }     }     if (apiProducer != null) {         try {             Exchange dummy = apiProducer.getEndpoint().createExchange().             apiProducer.process(dummy).             String json = dummy.hasOut() ? dummy.getOut().getBody(String.class) : dummy.getIn().getBody(String.class).             return json.         } catch (Exception e) {             throw RuntimeCamelException.wrapRuntimeCamelException(e).         }     }     return null. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "camelContext", this).     // add a lifecycle so we can keep track when consumers is being removed, so we can unregister them from our registry     camelContext.addLifecycleStrategy(new RemoveRestServiceLifecycleStrategy()). }
false;protected;0;4;;@Override protected void doStop() throws Exception {     registry.clear(). }
false;public;0;3;;public Consumer getConsumer() {     return consumer. }
false;public;0;3;;public String getUrl() {     return url. }
false;public;0;3;;public String getBaseUrl() {     return baseUrl. }
false;public;0;3;;public String getBasePath() {     return basePath. }
false;public;0;3;;public String getUriTemplate() {     return uriTemplate. }
false;public;0;3;;public String getMethod() {     return method. }
false;public;0;3;;public String getConsumes() {     return consumes. }
false;public;0;3;;public String getProduces() {     return produces. }
false;public;0;3;;public String getInType() {     return inType. }
false;public;0;3;;public String getOutType() {     return outType. }
false;public;0;12;;public String getState() {     // must use String type to be sure remote JMX can read the attribute without requiring Camel classes.     ServiceStatus status = null.     if (consumer instanceof StatefulService) {         status = ((StatefulService) consumer).getStatus().     }     // if no status exists then its stopped     if (status == null) {         status = ServiceStatus.Stopped.     }     return status.name(). }
false;public;0;3;;public String getRouteId() {     return routeId. }
false;public;0;3;;public String getDescription() {     return description. }
false;public;3;9;;@Override public void onServiceRemove(CamelContext context, Service service, Route route) {     super.onServiceRemove(context, service, route).     // if its a consumer then de-register it from the rest registry     if (service instanceof Consumer) {         removeRestService((Consumer) service).     } }
