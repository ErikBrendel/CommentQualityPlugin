commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void setRouteScoped(boolean routeScoped) {     this.routeScoped = routeScoped. }
false;public;0;4;;public boolean isRouteScoped() {     // is context scoped by default     return routeScoped != null ? routeScoped : false. }
false;public;0;3;;public Boolean getRouteScoped() {     return routeScoped. }
false;public;0;4;;@Override public String toString() {     return "OnException[" + description() + " -> " + getOutputs() + "]". }
false;protected;0;3;;protected String description() {     return getExceptionClasses() + (onWhen != null ? " " + onWhen : ""). }
false;public;0;4;;@Override public String getShortName() {     return "onException". }
false;public;0;4;;@Override public String getLabel() {     return "onException[" + description() + "]". }
false;public;0;4;;@Override public boolean isAbstract() {     return true. }
false;public;0;4;;@Override public boolean isTopLevelOnly() {     return true. }
false;public;0;30;;public void validateConfiguration() {     if (isInheritErrorHandler() != null && isInheritErrorHandler()) {         throw new IllegalArgumentException(this + " cannot have the inheritErrorHandler option set to true").     }     List<Class<? extends Throwable>> exceptions = getExceptionClasses().     if (exceptions == null || exceptions.isEmpty()) {         throw new IllegalArgumentException("At least one exception must be configured on " + this).     }     // only one of handled or continued is allowed     if (getHandledPolicy() != null && getContinuedPolicy() != null) {         throw new IllegalArgumentException("Only one of handled or continued is allowed to be configured on: " + this).     }     // validate that at least some option is set as you cannot just have onException(Exception.class).     if (outputs == null || getOutputs().isEmpty()) {         // no outputs so there should be some sort of configuration         ObjectHelper.firstNotNull(handledPolicy, continuedPolicy, retryWhilePolicy, redeliveryPolicyType, useOriginalMessagePolicy, onRedeliveryRef, onRedelivery, onExceptionOccurred).orElseThrow(() -> new IllegalArgumentException(this + " is not configured.")).     } }
false;public;1;5;;// Fluent API // ------------------------------------------------------------------------- @Override public OnExceptionDefinition onException(Class<? extends Throwable> exceptionType) {     getExceptionClasses().add(exceptionType).     return this. }
true;public;1;4;/**  * Sets whether the exchange should be marked as handled or not.  *  * @param handled handled or not  * @return the builder  */ ;/**  * Sets whether the exchange should be marked as handled or not.  *  * @param handled handled or not  * @return the builder  */ public OnExceptionDefinition handled(boolean handled) {     Expression expression = ExpressionBuilder.constantExpression(Boolean.toString(handled)).     return handled(expression). }
true;public;1;4;/**  * Sets whether the exchange should be marked as handled or not.  *  * @param handled predicate that determines true or false  * @return the builder  */ ;/**  * Sets whether the exchange should be marked as handled or not.  *  * @param handled predicate that determines true or false  * @return the builder  */ public OnExceptionDefinition handled(@AsPredicate Predicate handled) {     setHandledPolicy(handled).     return this. }
true;public;1;4;/**  * Sets whether the exchange should be marked as handled or not.  *  * @param handled expression that determines true or false  * @return the builder  */ ;/**  * Sets whether the exchange should be marked as handled or not.  *  * @param handled expression that determines true or false  * @return the builder  */ public OnExceptionDefinition handled(@AsPredicate Expression handled) {     setHandledPolicy(ExpressionToPredicateAdapter.toPredicate(handled)).     return this. }
true;public;1;4;/**  * Sets whether the exchange should handle and continue routing from the point of failure.  * <p/>  * If this option is enabled then its considered handled as well.  *  * @param continued continued or not  * @return the builder  */ ;/**  * Sets whether the exchange should handle and continue routing from the point of failure.  * <p/>  * If this option is enabled then its considered handled as well.  *  * @param continued continued or not  * @return the builder  */ public OnExceptionDefinition continued(boolean continued) {     Expression expression = ExpressionBuilder.constantExpression(Boolean.toString(continued)).     return continued(expression). }
true;public;1;4;/**  * Sets whether the exchange should be marked as handled or not.  * <p/>  * If this option is enabled then its considered handled as well.  *  * @param continued predicate that determines true or false  * @return the builder  */ ;/**  * Sets whether the exchange should be marked as handled or not.  * <p/>  * If this option is enabled then its considered handled as well.  *  * @param continued predicate that determines true or false  * @return the builder  */ public OnExceptionDefinition continued(@AsPredicate Predicate continued) {     setContinuedPolicy(continued).     return this. }
true;public;1;4;/**  * Sets whether the exchange should be marked as handled or not.  * <p/>  * If this option is enabled then its considered handled as well.  *  * @param continued expression that determines true or false  * @return the builder  */ ;/**  * Sets whether the exchange should be marked as handled or not.  * <p/>  * If this option is enabled then its considered handled as well.  *  * @param continued expression that determines true or false  * @return the builder  */ public OnExceptionDefinition continued(@AsPredicate Expression continued) {     setContinuedPolicy(ExpressionToPredicateAdapter.toPredicate(continued)).     return this. }
true;public;1;4;/**  * Sets an additional predicate that should be true before the onException is triggered.  * <p/>  * To be used for fine grained controlling whether a thrown exception should be intercepted  * by this exception type or not.  *  * @param predicate predicate that determines true or false  * @return the builder  */ ;/**  * Sets an additional predicate that should be true before the onException is triggered.  * <p/>  * To be used for fine grained controlling whether a thrown exception should be intercepted  * by this exception type or not.  *  * @param predicate predicate that determines true or false  * @return the builder  */ public OnExceptionDefinition onWhen(@AsPredicate Predicate predicate) {     setOnWhen(new WhenDefinition(predicate)).     return this. }
true;public;1;4;/**  * Sets the retry while predicate.  * <p/>  * Will continue retrying until predicate returns <tt>false</tt>.  *  * @param retryWhile predicate that determines when to stop retrying  * @return the builder  */ ;/**  * Sets the retry while predicate.  * <p/>  * Will continue retrying until predicate returns <tt>false</tt>.  *  * @param retryWhile predicate that determines when to stop retrying  * @return the builder  */ public OnExceptionDefinition retryWhile(@AsPredicate Predicate retryWhile) {     setRetryWhilePolicy(retryWhile).     return this. }
true;public;1;5;/**  * Sets the back off multiplier  *  * @param backOffMultiplier the back off multiplier  * @return the builder  */ ;/**  * Sets the back off multiplier  *  * @param backOffMultiplier the back off multiplier  * @return the builder  */ public OnExceptionDefinition backOffMultiplier(double backOffMultiplier) {     getOrCreateRedeliveryPolicy().useExponentialBackOff().     getOrCreateRedeliveryPolicy().backOffMultiplier(backOffMultiplier).     return this. }
true;public;1;5;/**  * Sets the back off multiplier (supports property placeholders)  *  * @param backOffMultiplier the back off multiplier  * @return the builder  */ ;/**  * Sets the back off multiplier (supports property placeholders)  *  * @param backOffMultiplier the back off multiplier  * @return the builder  */ public OnExceptionDefinition backOffMultiplier(String backOffMultiplier) {     getOrCreateRedeliveryPolicy().useExponentialBackOff().     getOrCreateRedeliveryPolicy().backOffMultiplier(backOffMultiplier).     return this. }
true;public;1;5;/**  * Sets the collision avoidance factor  *  * @param collisionAvoidanceFactor the factor  * @return the builder  */ ;/**  * Sets the collision avoidance factor  *  * @param collisionAvoidanceFactor the factor  * @return the builder  */ public OnExceptionDefinition collisionAvoidanceFactor(double collisionAvoidanceFactor) {     getOrCreateRedeliveryPolicy().useCollisionAvoidance().     getOrCreateRedeliveryPolicy().collisionAvoidanceFactor(collisionAvoidanceFactor).     return this. }
true;public;1;5;/**  * Sets the collision avoidance factor (supports property placeholders)  *  * @param collisionAvoidanceFactor the factor  * @return the builder  */ ;/**  * Sets the collision avoidance factor (supports property placeholders)  *  * @param collisionAvoidanceFactor the factor  * @return the builder  */ public OnExceptionDefinition collisionAvoidanceFactor(String collisionAvoidanceFactor) {     getOrCreateRedeliveryPolicy().useCollisionAvoidance().     getOrCreateRedeliveryPolicy().collisionAvoidanceFactor(collisionAvoidanceFactor).     return this. }
true;public;1;5;/**  * Sets the collision avoidance percentage  *  * @param collisionAvoidancePercent the percentage  * @return the builder  */ ;/**  * Sets the collision avoidance percentage  *  * @param collisionAvoidancePercent the percentage  * @return the builder  */ public OnExceptionDefinition collisionAvoidancePercent(double collisionAvoidancePercent) {     getOrCreateRedeliveryPolicy().useCollisionAvoidance().     getOrCreateRedeliveryPolicy().collisionAvoidancePercent(collisionAvoidancePercent).     return this. }
true;public;1;4;/**  * Sets the initial redelivery delay  *  * @param delay delay in millis  * @return the builder  */ ;/**  * Sets the initial redelivery delay  *  * @param delay delay in millis  * @return the builder  */ public OnExceptionDefinition redeliveryDelay(long delay) {     getOrCreateRedeliveryPolicy().redeliveryDelay(delay).     return this. }
true;public;1;4;/**  * Sets the initial redelivery delay (supports property placeholders)  *  * @param delay delay in millis  * @return the builder  */ ;/**  * Sets the initial redelivery delay (supports property placeholders)  *  * @param delay delay in millis  * @return the builder  */ public OnExceptionDefinition redeliveryDelay(String delay) {     getOrCreateRedeliveryPolicy().redeliveryDelay(delay).     return this. }
true;public;0;4;/**  * Allow synchronous delayed redelivery.  *  * @see org.apache.camel.processor.RedeliveryPolicy#setAsyncDelayedRedelivery(boolean)  * @return the builder  */ ;/**  * Allow synchronous delayed redelivery.  *  * @see org.apache.camel.processor.RedeliveryPolicy#setAsyncDelayedRedelivery(boolean)  * @return the builder  */ public OnExceptionDefinition asyncDelayedRedelivery() {     getOrCreateRedeliveryPolicy().asyncDelayedRedelivery().     return this. }
true;public;1;4;/**  * Sets the logging level to use when retries has exhausted  *  * @param retriesExhaustedLogLevel the logging level  * @return the builder  */ ;/**  * Sets the logging level to use when retries has exhausted  *  * @param retriesExhaustedLogLevel the logging level  * @return the builder  */ public OnExceptionDefinition retriesExhaustedLogLevel(LoggingLevel retriesExhaustedLogLevel) {     getOrCreateRedeliveryPolicy().retriesExhaustedLogLevel(retriesExhaustedLogLevel).     return this. }
true;public;1;4;/**  * Sets the logging level to use for logging retry attempts  *  * @param retryAttemptedLogLevel the logging level  * @return the builder  */ ;/**  * Sets the logging level to use for logging retry attempts  *  * @param retryAttemptedLogLevel the logging level  * @return the builder  */ public OnExceptionDefinition retryAttemptedLogLevel(LoggingLevel retryAttemptedLogLevel) {     getOrCreateRedeliveryPolicy().retryAttemptedLogLevel(retryAttemptedLogLevel).     return this. }
true;public;1;4;/**  * Sets whether to log stacktrace for failed messages.  */ ;/**  * Sets whether to log stacktrace for failed messages.  */ public OnExceptionDefinition logStackTrace(boolean logStackTrace) {     getOrCreateRedeliveryPolicy().logStackTrace(logStackTrace).     return this. }
true;public;1;4;/**  * Sets whether to log stacktrace for failed messages (supports property placeholders)  */ ;/**  * Sets whether to log stacktrace for failed messages (supports property placeholders)  */ public OnExceptionDefinition logStackTrace(String logStackTrace) {     getOrCreateRedeliveryPolicy().logStackTrace(logStackTrace).     return this. }
true;public;1;4;/**  * Sets whether to log stacktrace for failed redelivery attempts  */ ;/**  * Sets whether to log stacktrace for failed redelivery attempts  */ public OnExceptionDefinition logRetryStackTrace(boolean logRetryStackTrace) {     getOrCreateRedeliveryPolicy().logRetryStackTrace(logRetryStackTrace).     return this. }
true;public;1;4;/**  * Sets whether to log stacktrace for failed redelivery attempts (supports property placeholders)  */ ;/**  * Sets whether to log stacktrace for failed redelivery attempts (supports property placeholders)  */ public OnExceptionDefinition logRetryStackTrace(String logRetryStackTrace) {     getOrCreateRedeliveryPolicy().logRetryStackTrace(logRetryStackTrace).     return this. }
true;public;1;4;/**  * Sets whether to log errors even if its handled  */ ;/**  * Sets whether to log errors even if its handled  */ public OnExceptionDefinition logHandled(boolean logHandled) {     getOrCreateRedeliveryPolicy().logHandled(logHandled).     return this. }
true;public;1;4;/**  * Sets whether to log errors even if its handled (supports property placeholders)  */ ;/**  * Sets whether to log errors even if its handled (supports property placeholders)  */ public OnExceptionDefinition logHandled(String logHandled) {     getOrCreateRedeliveryPolicy().logHandled(logHandled).     return this. }
true;public;1;4;/**  * Sets whether new exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  */ ;/**  * Sets whether new exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  */ public OnExceptionDefinition logNewException(boolean logNewException) {     getOrCreateRedeliveryPolicy().logNewException(logNewException).     return this. }
true;public;1;4;/**  * Sets whether new exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  */ ;/**  * Sets whether new exceptions should be logged or not (supports property placeholders).  * Can be used to include or reduce verbose.  * <p/>  * A new exception is an exception that was thrown while handling a previous exception.  */ public OnExceptionDefinition logNewException(String logNewException) {     getOrCreateRedeliveryPolicy().logNewException(logNewException).     return this. }
true;public;1;4;/**  * Sets whether to log errors even if its continued  */ ;/**  * Sets whether to log errors even if its continued  */ public OnExceptionDefinition logContinued(boolean logContinued) {     getOrCreateRedeliveryPolicy().logContinued(logContinued).     return this. }
true;public;1;4;/**  * Sets whether to log errors even if its continued (supports property placeholders)  */ ;/**  * Sets whether to log errors even if its continued (supports property placeholders)  */ public OnExceptionDefinition logContinued(String logContinued) {     getOrCreateRedeliveryPolicy().logContinued(logContinued).     return this. }
true;public;1;4;/**  * Sets whether to log retry attempts  */ ;/**  * Sets whether to log retry attempts  */ public OnExceptionDefinition logRetryAttempted(boolean logRetryAttempted) {     getOrCreateRedeliveryPolicy().logRetryAttempted(logRetryAttempted).     return this. }
true;public;1;4;/**  * Sets whether to log retry attempts (supports property placeholders)  */ ;/**  * Sets whether to log retry attempts (supports property placeholders)  */ public OnExceptionDefinition logRetryAttempted(String logRetryAttempted) {     getOrCreateRedeliveryPolicy().logRetryAttempted(logRetryAttempted).     return this. }
true;public;1;4;/**  * Sets whether to log exhausted exceptions  */ ;/**  * Sets whether to log exhausted exceptions  */ public OnExceptionDefinition logExhausted(boolean logExhausted) {     getOrCreateRedeliveryPolicy().logExhausted(logExhausted).     return this. }
true;public;1;4;/**  * Sets whether to log exhausted exceptions (supports property placeholders)  */ ;/**  * Sets whether to log exhausted exceptions (supports property placeholders)  */ public OnExceptionDefinition logExhausted(String logExhausted) {     getOrCreateRedeliveryPolicy().logExhausted(logExhausted).     return this. }
true;public;1;4;/**  * Sets whether to log exhausted exceptions with message history  */ ;/**  * Sets whether to log exhausted exceptions with message history  */ public OnExceptionDefinition logExhaustedMessageHistory(boolean logExhaustedMessageHistory) {     getOrCreateRedeliveryPolicy().logExhaustedMessageHistory(logExhaustedMessageHistory).     return this. }
true;public;1;4;/**  * Sets whether to log exhausted exceptions with message history  */ ;/**  * Sets whether to log exhausted exceptions with message history  */ public OnExceptionDefinition logExhaustedMessageHistory(String logExhaustedMessageHistory) {     getOrCreateRedeliveryPolicy().logExhaustedMessageHistory(logExhaustedMessageHistory).     return this. }
true;public;1;4;/**  * Sets whether to log exhausted message body with message history.  * Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  */ ;/**  * Sets whether to log exhausted message body with message history.  * Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  */ public OnExceptionDefinition logExhaustedMessageBody(boolean logExhaustedMessageBody) {     getOrCreateRedeliveryPolicy().logExhaustedMessageBody(logExhaustedMessageBody).     return this. }
true;public;1;4;/**  * Sets whether to log exhausted message body with message history.  * Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  */ ;/**  * Sets whether to log exhausted message body with message history.  * Requires <tt>logExhaustedMessageHistory</tt> to be enabled.  */ public OnExceptionDefinition logExhaustedMessageBody(String logExhaustedMessageBody) {     getOrCreateRedeliveryPolicy().logExhaustedMessageBody(logExhaustedMessageBody).     return this. }
true;public;1;4;/**  * Sets the maximum redeliveries  * <ul>  * <li>5 = default value</li>  * <li>0 = no redeliveries</li>  * <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries the value  * @return the builder  */ ;/**  * Sets the maximum redeliveries  * <ul>  * <li>5 = default value</li>  * <li>0 = no redeliveries</li>  * <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries the value  * @return the builder  */ public OnExceptionDefinition maximumRedeliveries(int maximumRedeliveries) {     getOrCreateRedeliveryPolicy().maximumRedeliveries(maximumRedeliveries).     return this. }
true;public;1;4;/**  * Sets the maximum redeliveries (supports property placeholders)  * <ul>  * <li>5 = default value</li>  * <li>0 = no redeliveries</li>  * <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries the value  * @return the builder  */ ;/**  * Sets the maximum redeliveries (supports property placeholders)  * <ul>  * <li>5 = default value</li>  * <li>0 = no redeliveries</li>  * <li>-1 = redeliver forever</li>  * </ul>  *  * @param maximumRedeliveries the value  * @return the builder  */ public OnExceptionDefinition maximumRedeliveries(String maximumRedeliveries) {     getOrCreateRedeliveryPolicy().maximumRedeliveries(maximumRedeliveries).     return this. }
true;public;0;4;/**  * Turn on collision avoidance.  *  * @return the builder  */ ;/**  * Turn on collision avoidance.  *  * @return the builder  */ public OnExceptionDefinition useCollisionAvoidance() {     getOrCreateRedeliveryPolicy().useCollisionAvoidance().     return this. }
true;public;0;4;/**  * Turn on exponential back off  *  * @return the builder  */ ;/**  * Turn on exponential back off  *  * @return the builder  */ public OnExceptionDefinition useExponentialBackOff() {     getOrCreateRedeliveryPolicy().useExponentialBackOff().     return this. }
true;public;1;4;/**  * Sets the maximum delay between redelivery  *  * @param maximumRedeliveryDelay the delay in millis  * @return the builder  */ ;/**  * Sets the maximum delay between redelivery  *  * @param maximumRedeliveryDelay the delay in millis  * @return the builder  */ public OnExceptionDefinition maximumRedeliveryDelay(long maximumRedeliveryDelay) {     getOrCreateRedeliveryPolicy().maximumRedeliveryDelay(maximumRedeliveryDelay).     return this. }
true;public;1;4;/**  * Sets the maximum delay between redelivery (supports property placeholders)  *  * @param maximumRedeliveryDelay the delay in millis  * @return the builder  */ ;/**  * Sets the maximum delay between redelivery (supports property placeholders)  *  * @param maximumRedeliveryDelay the delay in millis  * @return the builder  */ public OnExceptionDefinition maximumRedeliveryDelay(String maximumRedeliveryDelay) {     getOrCreateRedeliveryPolicy().maximumRedeliveryDelay(maximumRedeliveryDelay).     return this. }
true;public;1;4;/**  * Sets a reference to a {@link org.apache.camel.processor.RedeliveryPolicy} to lookup in the {@link org.apache.camel.spi.Registry} to be used.  *  * @param redeliveryPolicyRef reference to use for lookup  * @return the builder  */ ;/**  * Sets a reference to a {@link org.apache.camel.processor.RedeliveryPolicy} to lookup in the {@link org.apache.camel.spi.Registry} to be used.  *  * @param redeliveryPolicyRef reference to use for lookup  * @return the builder  */ public OnExceptionDefinition redeliveryPolicyRef(String redeliveryPolicyRef) {     setRedeliveryPolicyRef(redeliveryPolicyRef).     return this. }
true;public;1;4;/**  * Sets the delay pattern with delay intervals.  *  * @param delayPattern the delay pattern  * @return the builder  */ ;/**  * Sets the delay pattern with delay intervals.  *  * @param delayPattern the delay pattern  * @return the builder  */ public OnExceptionDefinition delayPattern(String delayPattern) {     getOrCreateRedeliveryPolicy().setDelayPattern(delayPattern).     return this. }
true;public;0;4;/**  * Will use the original input message when an {@link org.apache.camel.Exchange} is moved to the dead letter queue.  * <p/>  * <b>Notice:</b> this only applies when all redeliveries attempt have failed and the {@link org.apache.camel.Exchange} is doomed for failure.  * <br/>  * Instead of using the current in-progress {@link org.apache.camel.Exchange} IN body we use the original IN body instead. This allows  * you to store the original input in the dead letter queue instead of the in-progress snapshot of the IN body.  * For instance if you route transform the IN body during routing and then failed. With the original exchange  * store in the dead letter queue it might be easier to manually re submit the {@link org.apache.camel.Exchange} again as the IN body  * is the same as when Camel received it. So you should be able to send the {@link org.apache.camel.Exchange} to the same input.  * <p/>  * By default this feature is off.  *  * @return the builder  */ ;/**  * Will use the original input message when an {@link org.apache.camel.Exchange} is moved to the dead letter queue.  * <p/>  * <b>Notice:</b> this only applies when all redeliveries attempt have failed and the {@link org.apache.camel.Exchange} is doomed for failure.  * <br/>  * Instead of using the current in-progress {@link org.apache.camel.Exchange} IN body we use the original IN body instead. This allows  * you to store the original input in the dead letter queue instead of the in-progress snapshot of the IN body.  * For instance if you route transform the IN body during routing and then failed. With the original exchange  * store in the dead letter queue it might be easier to manually re submit the {@link org.apache.camel.Exchange} again as the IN body  * is the same as when Camel received it. So you should be able to send the {@link org.apache.camel.Exchange} to the same input.  * <p/>  * By default this feature is off.  *  * @return the builder  */ public OnExceptionDefinition useOriginalMessage() {     setUseOriginalMessagePolicy(Boolean.TRUE).     return this. }
true;public;1;4;/**  * Sets a processor that should be processed <b>before</b> a redelivery attempt.  * <p/>  * Can be used to change the {@link org.apache.camel.Exchange} <b>before</b> its being redelivered.  */ ;/**  * Sets a processor that should be processed <b>before</b> a redelivery attempt.  * <p/>  * Can be used to change the {@link org.apache.camel.Exchange} <b>before</b> its being redelivered.  */ public OnExceptionDefinition onRedelivery(Processor processor) {     setOnRedelivery(processor).     return this. }
true;public;1;4;/**  * Sets a reference to a processor that should be processed <b>before</b> a redelivery attempt.  * <p/>  * Can be used to change the {@link org.apache.camel.Exchange} <b>before</b> its being redelivered.  *  * @param ref  reference to the processor  */ ;/**  * Sets a reference to a processor that should be processed <b>before</b> a redelivery attempt.  * <p/>  * Can be used to change the {@link org.apache.camel.Exchange} <b>before</b> its being redelivered.  *  * @param ref  reference to the processor  */ public OnExceptionDefinition onRedeliveryRef(String ref) {     setOnRedeliveryRef(ref).     return this. }
true;public;1;4;/**  * Sets a processor that should be processed <b>just after</b> an exception occurred.  * Can be used to perform custom logging about the occurred exception at the exact time it happened.  * <p/>  * Important: Any exception thrown from this processor will be ignored.  */ ;/**  * Sets a processor that should be processed <b>just after</b> an exception occurred.  * Can be used to perform custom logging about the occurred exception at the exact time it happened.  * <p/>  * Important: Any exception thrown from this processor will be ignored.  */ public OnExceptionDefinition onExceptionOccurred(Processor processor) {     setOnExceptionOccurred(processor).     return this. }
true;public;1;4;/**  * Sets a reference to a processor that should be processed <b>just after</b> an exception occurred.  * Can be used to perform custom logging about the occurred exception at the exact time it happened.  * <p/>  * Important: Any exception thrown from this processor will be ignored.  *  * @param ref  reference to the processor  */ ;/**  * Sets a reference to a processor that should be processed <b>just after</b> an exception occurred.  * Can be used to perform custom logging about the occurred exception at the exact time it happened.  * <p/>  * Important: Any exception thrown from this processor will be ignored.  *  * @param ref  reference to the processor  */ public OnExceptionDefinition onExceptionOccurredRef(String ref) {     setOnExceptionOccurredRef(ref).     return this. }
true;public;0;4;// ------------------------------------------------------------------------- ;// Properties // ------------------------------------------------------------------------- @Override public List<ProcessorDefinition<?>> getOutputs() {     return outputs. }
false;public;1;3;;public void setOutputs(List<ProcessorDefinition<?>> outputs) {     this.outputs = outputs. }
false;public;0;3;;public boolean isOutputSupported() {     return true. }
false;public;0;3;;public List<Class<? extends Throwable>> getExceptionClasses() {     return exceptionClasses. }
false;public;1;3;;public void setExceptionClasses(List<Class<? extends Throwable>> exceptionClasses) {     this.exceptionClasses = exceptionClasses. }
false;public;0;3;;public List<String> getExceptions() {     return exceptions. }
true;public;1;3;/**  * A set of exceptions to react upon.  */ ;/**  * A set of exceptions to react upon.  */ public void setExceptions(List<String> exceptions) {     this.exceptions = exceptions. }
false;public;1;3;;public Processor getErrorHandler(String routeId) {     return errorHandlers.get(routeId). }
false;public;0;3;;public Collection<Processor> getErrorHandlers() {     return errorHandlers.values(). }
false;public;2;3;;public void setErrorHandler(String routeId, Processor errorHandler) {     errorHandlers.put(routeId, errorHandler). }
false;public;0;3;;public RedeliveryPolicyDefinition getRedeliveryPolicyType() {     return redeliveryPolicyType. }
true;public;1;3;/**  * Used for configuring redelivery options  */ ;/**  * Used for configuring redelivery options  */ public void setRedeliveryPolicyType(RedeliveryPolicyDefinition redeliveryPolicyType) {     this.redeliveryPolicyType = redeliveryPolicyType. }
false;public;0;3;;public String getRedeliveryPolicyRef() {     return redeliveryPolicyRef. }
false;public;1;3;;public void setRedeliveryPolicyRef(String redeliveryPolicyRef) {     this.redeliveryPolicyRef = redeliveryPolicyRef. }
false;public;0;3;;public Predicate getHandledPolicy() {     return handledPolicy. }
false;public;1;3;;public void setHandled(ExpressionSubElementDefinition handled) {     this.handled = handled. }
false;public;0;3;;public ExpressionSubElementDefinition getContinued() {     return continued. }
false;public;1;3;;public void setContinued(ExpressionSubElementDefinition continued) {     this.continued = continued. }
false;public;0;3;;public ExpressionSubElementDefinition getHandled() {     return handled. }
false;public;1;3;;public void setHandledPolicy(Predicate handledPolicy) {     this.handledPolicy = handledPolicy. }
false;public;0;3;;public Predicate getContinuedPolicy() {     return continuedPolicy. }
false;public;1;3;;public void setContinuedPolicy(Predicate continuedPolicy) {     this.continuedPolicy = continuedPolicy. }
false;public;0;3;;public WhenDefinition getOnWhen() {     return onWhen. }
false;public;1;3;;public void setOnWhen(WhenDefinition onWhen) {     this.onWhen = onWhen. }
false;public;0;3;;public ExpressionSubElementDefinition getRetryWhile() {     return retryWhile. }
false;public;1;3;;public void setRetryWhile(ExpressionSubElementDefinition retryWhile) {     this.retryWhile = retryWhile. }
false;public;0;3;;public Predicate getRetryWhilePolicy() {     return retryWhilePolicy. }
false;public;1;3;;public void setRetryWhilePolicy(Predicate retryWhilePolicy) {     this.retryWhilePolicy = retryWhilePolicy. }
false;public;0;3;;public Processor getOnRedelivery() {     return onRedelivery. }
false;public;1;3;;public void setOnRedelivery(Processor onRedelivery) {     this.onRedelivery = onRedelivery. }
false;public;0;3;;public String getOnRedeliveryRef() {     return onRedeliveryRef. }
false;public;1;3;;public void setOnRedeliveryRef(String onRedeliveryRef) {     this.onRedeliveryRef = onRedeliveryRef. }
false;public;0;3;;public Processor getOnExceptionOccurred() {     return onExceptionOccurred. }
false;public;1;3;;public void setOnExceptionOccurred(Processor onExceptionOccurred) {     this.onExceptionOccurred = onExceptionOccurred. }
false;public;0;3;;public String getOnExceptionOccurredRef() {     return onExceptionOccurredRef. }
false;public;1;3;;public void setOnExceptionOccurredRef(String onExceptionOccurredRef) {     this.onExceptionOccurredRef = onExceptionOccurredRef. }
false;public;0;3;;public Boolean getUseOriginalMessagePolicy() {     return useOriginalMessagePolicy. }
false;public;1;3;;public void setUseOriginalMessagePolicy(Boolean useOriginalMessagePolicy) {     this.useOriginalMessagePolicy = useOriginalMessagePolicy. }
false;protected;0;6;;// Implementation methods // ------------------------------------------------------------------------- protected RedeliveryPolicyDefinition getOrCreateRedeliveryPolicy() {     if (redeliveryPolicyType == null) {         redeliveryPolicyType = new RedeliveryPolicyDefinition().     }     return redeliveryPolicyType. }
