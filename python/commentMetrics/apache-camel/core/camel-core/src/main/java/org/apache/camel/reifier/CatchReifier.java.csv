commented;modifiers;parameterAmount;loc;comment;code
false;public;1;27;;@Override public CatchProcessor createProcessor(RouteContext routeContext) throws Exception {     // create and load exceptions if not done     if (definition.getExceptionClasses() == null) {         definition.setExceptionClasses(createExceptionClasses(routeContext.getCamelContext())).     }     // must have at least one exception     if (definition.getExceptionClasses().isEmpty()) {         throw new IllegalArgumentException("At least one Exception must be configured to catch").     }     // parent must be a try     if (!(definition.getParent() instanceof TryDefinition)) {         throw new IllegalArgumentException("This doCatch should have a doTry as its parent on " + definition).     }     // do catch does not mandate a child processor     Processor childProcessor = this.createChildProcessor(routeContext, false).     Predicate when = null.     if (definition.getOnWhen() != null) {         when = definition.getOnWhen().getExpression().createPredicate(routeContext).     }     return new CatchProcessor(definition.getExceptionClasses(), childProcessor, when, null). }
false;protected;1;11;;protected List<Class<? extends Throwable>> createExceptionClasses(CamelContext context) throws ClassNotFoundException {     // must use the class resolver from CamelContext to load classes to ensure it can     // be loaded in all kind of environments such as JEE servers and OSGi etc.     List<String> list = definition.getExceptions().     List<Class<? extends Throwable>> answer = new ArrayList<>(list.size()).     for (String name : list) {         Class<Throwable> type = context.getClassResolver().resolveMandatoryClass(name, Throwable.class).         answer.add(type).     }     return answer. }
