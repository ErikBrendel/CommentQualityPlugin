commented;modifiers;parameterAmount;loc;comment;code
true;public;1;3;/**  * Package name where your JAXB classes are located.  */ ;/**  * Package name where your JAXB classes are located.  */ public void setContextPath(String contextPath) {     this.contextPath = contextPath. }
false;public;0;3;;public String getContextPath() {     return contextPath. }
true;public;1;3;/**  * To overrule and use a specific encoding  */ ;/**  * To overrule and use a specific encoding  */ public void setEncoding(String encoding) {     this.encoding = encoding. }
false;public;0;3;;public String getEncoding() {     return encoding. }
true;public;1;3;/**  * Refers to an element strategy to lookup from the registry.  * <p/>  * An element name strategy is used for two purposes. The first is to find a xml element name for a given object  * and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name.  * <p/>  * The following three element strategy class name is provided out of the box.  * QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported  * TypeNameStrategy - Uses the name and namespace from the @XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported  * ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault  * <p/>  * All three classes is located in the package name org.apache.camel.dataformat.soap.name  * <p/>  * If you have generated the web service stub code with cxf-codegen or a similar tool then you probably  * will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.  */ ;/**  * Refers to an element strategy to lookup from the registry.  * <p/>  * An element name strategy is used for two purposes. The first is to find a xml element name for a given object  * and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name.  * <p/>  * The following three element strategy class name is provided out of the box.  * QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported  * TypeNameStrategy - Uses the name and namespace from the @XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported  * ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault  * <p/>  * All three classes is located in the package name org.apache.camel.dataformat.soap.name  * <p/>  * If you have generated the web service stub code with cxf-codegen or a similar tool then you probably  * will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.  */ public void setElementNameStrategyRef(String elementNameStrategyRef) {     this.elementNameStrategyRef = elementNameStrategyRef. }
false;public;0;3;;public String getElementNameStrategyRef() {     return elementNameStrategyRef. }
false;public;0;3;;public String getVersion() {     return version. }
true;public;1;3;/**  * SOAP version should either be 1.1 or 1.2.  * <p/>  * Is by default 1.1  */ ;/**  * SOAP version should either be 1.1 or 1.2.  * <p/>  * Is by default 1.1  */ public void setVersion(String version) {     this.version = version. }
true;public;1;3;/**  * Sets an element strategy instance to use.  * <p/>  * An element name strategy is used for two purposes. The first is to find a xml element name for a given object  * and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name.  * <p/>  * The following three element strategy class name is provided out of the box.  * QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported  * TypeNameStrategy - Uses the name and namespace from the @XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported  * ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault  * <p/>  * All three classes is located in the package name org.apache.camel.dataformat.soap.name  * <p/>  * If you have generated the web service stub code with cxf-codegen or a similar tool then you probably  * will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.  */ ;/**  * Sets an element strategy instance to use.  * <p/>  * An element name strategy is used for two purposes. The first is to find a xml element name for a given object  * and soap action when marshaling the object into a SOAP message. The second is to find an Exception class for a given soap fault name.  * <p/>  * The following three element strategy class name is provided out of the box.  * QNameStrategy - Uses a fixed qName that is configured on instantiation. Exception lookup is not supported  * TypeNameStrategy - Uses the name and namespace from the @XMLType annotation of the given type. If no namespace is set then package-info is used. Exception lookup is not supported  * ServiceInterfaceStrategy - Uses information from a webservice interface to determine the type name and to find the exception class for a SOAP fault  * <p/>  * All three classes is located in the package name org.apache.camel.dataformat.soap.name  * <p/>  * If you have generated the web service stub code with cxf-codegen or a similar tool then you probably  * will want to use the ServiceInterfaceStrategy. In the case you have no annotated service interface you should use QNameStrategy or TypeNameStrategy.  */ public void setElementNameStrategy(Object elementNameStrategy) {     this.elementNameStrategy = elementNameStrategy. }
false;public;0;3;;public Object getElementNameStrategy() {     return elementNameStrategy. }
false;public;0;3;;public String getNamespacePrefixRef() {     return namespacePrefixRef. }
true;public;1;3;/**  * When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes,  * such as ns2, ns3, ns4 etc. To control this mapping, Camel allows you to refer to a map which contains the desired mapping.  */ ;/**  * When marshalling using JAXB or SOAP then the JAXB implementation will automatic assign namespace prefixes,  * such as ns2, ns3, ns4 etc. To control this mapping, Camel allows you to refer to a map which contains the desired mapping.  */ public void setNamespacePrefixRef(String namespacePrefixRef) {     this.namespacePrefixRef = namespacePrefixRef. }
false;public;0;3;;public String getSchema() {     return schema. }
true;public;1;3;/**  * To validate against an existing schema.  * Your can use the prefix classpath:, file:* or *http: to specify how the resource should by resolved.  * You can separate multiple schema files by using the ',' character.  */ ;/**  * To validate against an existing schema.  * Your can use the prefix classpath:, file:* or *http: to specify how the resource should by resolved.  * You can separate multiple schema files by using the ',' character.  */ public void setSchema(String schema) {     this.schema = schema. }
false;protected;2;22;;@Override protected void configureDataFormat(DataFormat dataFormat, CamelContext camelContext) {     if (elementNameStrategy != null) {         setProperty(camelContext, dataFormat, "elementNameStrategy", elementNameStrategy).     }     if (elementNameStrategyRef != null) {         setProperty(camelContext, dataFormat, "elementNameStrategyRef", elementNameStrategyRef).     }     if (encoding != null) {         setProperty(camelContext, dataFormat, "encoding", encoding).     }     if (version != null) {         setProperty(camelContext, dataFormat, "version", version).     }     if (namespacePrefixRef != null) {         setProperty(camelContext, dataFormat, "namespacePrefixRef", namespacePrefixRef).     }     if (schema != null) {         setProperty(camelContext, dataFormat, "schema", schema).     }     setProperty(camelContext, dataFormat, "contextPath", contextPath). }
