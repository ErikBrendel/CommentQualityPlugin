commented;modifiers;parameterAmount;loc;comment;code
true;public;1;10;/**  * Returns the immediate predecessor of the given element in this sequence  * or <code>null</code> if no predecessor exists.  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ ;/**  * Returns the immediate predecessor of the given element in this sequence  * or <code>null</code> if no predecessor exists.  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ public E predecessor(E e) {     E elem = lower(e).     if (elem == null) {         return null.     }     if (comparator.predecessor(elem, e)) {         return elem.     }     return null. }
true;public;1;10;/**  * Returns the immediate successor of the given element in this sequence  * or <code>null</code> if no successor exists.  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ ;/**  * Returns the immediate successor of the given element in this sequence  * or <code>null</code> if no successor exists.  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ public E successor(E e) {     E elem = higher(e).     if (elem == null) {         return null.     }     if (comparator.successor(elem, e)) {         return elem.     }     return null. }
true;public;0;3;/**  * Returns this sequence's comparator.  *  * @return this sequence's comparator.  */ ;/**  * Returns this sequence's comparator.  *  * @return this sequence's comparator.  */ public SequenceElementComparator<E> comparator() {     return comparator. }
true;public;1;12;/**  * Returns the next higher element in the sequence to the given element. If  * the given element doesn't exist or if it is the last element in the  * sequence <code>null</code> is returned. <strong>Please note that this  * method is provided for compatibility with Java 5 SE. On a Java 6 SE  * platform the same method implemented by the {@link TreeSet}  * class should be used for better performance.</strong>  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ ;/**  * Returns the next higher element in the sequence to the given element. If  * the given element doesn't exist or if it is the last element in the  * sequence <code>null</code> is returned. <strong>Please note that this  * method is provided for compatibility with Java 5 SE. On a Java 6 SE  * platform the same method implemented by the {@link TreeSet}  * class should be used for better performance.</strong>  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ public E higher(E e) {     boolean found = false.     for (E current : this) {         if (found) {             return current.         }         if (comparator.compare(e, current) == 0) {             found = true.         }     }     return null. }
true;public;1;10;/**  * Returns the next lower element in the sequence to the given element. If  * the given element doesn't exist or if it is the first element in the  * sequence <code>null</code> is returned. <strong>Please note that this  * method is provided for compatibility with Java 5 SE. On a Java 6 SE  * platform the same method implemented by the {@link TreeSet}  * class should be used for better performance.</strong>  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ ;/**  * Returns the next lower element in the sequence to the given element. If  * the given element doesn't exist or if it is the first element in the  * sequence <code>null</code> is returned. <strong>Please note that this  * method is provided for compatibility with Java 5 SE. On a Java 6 SE  * platform the same method implemented by the {@link TreeSet}  * class should be used for better performance.</strong>  *  * @param e an element which is compared to elements of this sequence.  * @return an element of this sequence or <code>null</code>.  */ public E lower(E e) {     E last = null.     for (E current : this) {         if (comparator.compare(e, current) == 0) {             return last.         }         last = current.     }     return last. }
