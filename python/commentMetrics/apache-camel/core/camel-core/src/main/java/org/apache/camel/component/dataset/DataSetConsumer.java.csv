commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void run() {     if (endpoint.getInitialDelay() > 0) {         try {             Thread.sleep(endpoint.getInitialDelay()).         } catch (InterruptedException e) {             Thread.currentThread().interrupt().             return.         }     }     sendMessages(preloadSize, dataSet.getSize()). }
false;protected;0;28;;@Override protected void doStart() throws Exception {     super.doStart().     if (reporter == null) {         reporter = createReporter().     }     final DataSet dataSet = endpoint.getDataSet().     final long preloadSize = endpoint.getPreloadSize().     sendMessages(0, preloadSize).     executorService = camelContext.getExecutorServiceManager().newSingleThreadExecutor(this, endpoint.getEndpointUri()).     executorService.execute(new Runnable() {          public void run() {             if (endpoint.getInitialDelay() > 0) {                 try {                     Thread.sleep(endpoint.getInitialDelay()).                 } catch (InterruptedException e) {                     Thread.currentThread().interrupt().                     return.                 }             }             sendMessages(preloadSize, dataSet.getSize()).         }     }). }
false;protected;0;9;;@Override protected void doStop() throws Exception {     super.doStop().     if (executorService != null) {         camelContext.getExecutorServiceManager().shutdown(executorService).         executorService = null.     } }
false;protected;2;23;;protected void sendMessages(long startIndex, long endIndex) {     try {         for (long i = startIndex. i < endIndex. i++) {             Exchange exchange = endpoint.createExchange(i).             getProcessor().process(exchange).             try {                 long delay = endpoint.getProduceDelay().                 if (delay > 0) {                     Thread.sleep(delay).                 }             } catch (InterruptedException e) {                 Thread.currentThread().interrupt().                 break.             }             if (reporter != null) {                 reporter.process(exchange).             }         }     } catch (Exception e) {         handleException(e).     } }
false;protected;0;8;;protected ThroughputLogger createReporter() {     // must sanitize uri to avoid logging sensitive information     String uri = URISupport.sanitizeUri(endpoint.getEndpointUri()).     CamelLogger logger = new CamelLogger(uri).     ThroughputLogger answer = new ThroughputLogger(logger, (int) endpoint.getDataSet().getReportCount()).     answer.setAction("Sent").     return answer. }
