commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public ServiceDiscovery getDelegate() {     return this.delegate. }
false;public;1;6;;public void setTimeout(long timeout) {     this.timeout = timeout.     this.cache = Caffeine.newBuilder().expireAfterAccess(timeout, TimeUnit.MILLISECONDS).build(delegate::getServices). }
false;public;2;3;;public void setTimeout(long timeout, TimeUnit unit) {     setTimeout(unit.toMillis(timeout)). }
false;public;0;3;;public long getTimeout() {     return timeout. }
false;public;1;4;;public CachingServiceDiscovery timeout(long timeout) {     setTimeout(timeout).     return this. }
false;public;2;4;;public CachingServiceDiscovery timeout(long timeout, TimeUnit unit) {     setTimeout(timeout, unit).     return this. }
false;public;1;4;;@Override public List<ServiceDefinition> getServices(String name) {     return cache.get(name). }
false;public,static;1;3;;// ********************** // Helpers // ********************** public static CachingServiceDiscovery wrap(ServiceDiscovery delegate) {     return new CachingServiceDiscovery(delegate). }
false;public,static;2;3;;public static CachingServiceDiscovery wrap(ServiceDiscovery delegate, long timeout) {     return new CachingServiceDiscovery(delegate).timeout(timeout). }
false;public,static;3;3;;public static CachingServiceDiscovery wrap(ServiceDiscovery delegate, long timeout, TimeUnit unit) {     return new CachingServiceDiscovery(delegate).timeout(timeout, unit). }
