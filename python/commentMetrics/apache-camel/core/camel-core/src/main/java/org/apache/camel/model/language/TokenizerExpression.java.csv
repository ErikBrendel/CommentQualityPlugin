commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public String getLanguage() {     return "tokenize". }
false;public;0;3;;public String getToken() {     return token. }
true;public;1;3;/**  * The (start) token to use as tokenizer, for example you can use the new line token.  * You can use simple language as the token to support dynamic tokens.  */ ;/**  * The (start) token to use as tokenizer, for example you can use the new line token.  * You can use simple language as the token to support dynamic tokens.  */ public void setToken(String token) {     this.token = token. }
false;public;0;3;;public String getEndToken() {     return endToken. }
true;public;1;3;/**  * The end token to use as tokenizer if using start/end token pairs.  * You can use simple language as the token to support dynamic tokens.  */ ;/**  * The end token to use as tokenizer if using start/end token pairs.  * You can use simple language as the token to support dynamic tokens.  */ public void setEndToken(String endToken) {     this.endToken = endToken. }
false;public;0;3;;public String getHeaderName() {     return headerName. }
true;public;1;3;/**  * Name of header to tokenize instead of using the message body.  */ ;/**  * Name of header to tokenize instead of using the message body.  */ public void setHeaderName(String headerName) {     this.headerName = headerName. }
true;public;1;3;/**  * If the token is a regular expression pattern.  * <p/>  * The default value is false  */ ;/**  * If the token is a regular expression pattern.  * <p/>  * The default value is false  */ public void setRegex(boolean regex) {     this.regex = regex. }
false;public;0;3;;public Boolean getRegex() {     return regex. }
false;public;0;3;;public String getInheritNamespaceTagName() {     return inheritNamespaceTagName. }
true;public;1;3;/**  * To inherit namespaces from a root/parent tag name when using XML  * You can use simple language as the tag name to support dynamic names.  */ ;/**  * To inherit namespaces from a root/parent tag name when using XML  * You can use simple language as the tag name to support dynamic names.  */ public void setInheritNamespaceTagName(String inheritNamespaceTagName) {     this.inheritNamespaceTagName = inheritNamespaceTagName. }
false;public;0;3;;public Boolean getXml() {     return xml. }
true;public;1;3;/**  * Whether the input is XML messages.  * This option must be set to true if working with XML payloads.  */ ;/**  * Whether the input is XML messages.  * This option must be set to true if working with XML payloads.  */ public void setXml(Boolean xml) {     this.xml = xml. }
false;public;0;3;;public Boolean getIncludeTokens() {     return includeTokens. }
true;public;1;3;/**  * Whether to include the tokens in the parts when using pairs  * <p/>  * The default value is false  */ ;/**  * Whether to include the tokens in the parts when using pairs  * <p/>  * The default value is false  */ public void setIncludeTokens(Boolean includeTokens) {     this.includeTokens = includeTokens. }
false;public;0;3;;public String getGroup() {     return group. }
true;public;1;3;/**  * To group N parts together, for example to split big files into chunks of 1000 lines.  * You can use simple language as the group to support dynamic group sizes.  */ ;/**  * To group N parts together, for example to split big files into chunks of 1000 lines.  * You can use simple language as the group to support dynamic group sizes.  */ public void setGroup(String group) {     this.group = group. }
false;public;0;3;;public Boolean getSkipFirst() {     return skipFirst. }
true;public;1;3;/**  * To skip the very first element  */ ;/**  * To skip the very first element  */ public void setSkipFirst(Boolean skipFirst) {     this.skipFirst = skipFirst. }
false;public;1;29;;@Override public Expression createExpression(CamelContext camelContext) {     // special for new line tokens, if defined from XML then its 2 characters, so we replace that back to a single char     if (token.startsWith("\\n")) {         token = '\n' + token.substring(2).     }     TokenizeLanguage language = new TokenizeLanguage().     language.setToken(token).     language.setEndToken(endToken).     language.setInheritNamespaceTagName(inheritNamespaceTagName).     language.setHeaderName(headerName).     if (regex != null) {         language.setRegex(regex).     }     if (xml != null) {         language.setXml(xml).     }     if (includeTokens != null) {         language.setIncludeTokens(includeTokens).     }     if (group != null && !"0".equals(group)) {         language.setGroup(group).     }     if (skipFirst != null) {         language.setSkipFirst(skipFirst).     }     return language.createExpression(). }
false;public;1;5;;@Override public Predicate createPredicate(CamelContext camelContext) {     Expression exp = createExpression(camelContext).     return ExpressionToPredicateAdapter.toPredicate(exp). }
false;public;0;8;;@Override public String toString() {     if (endToken != null) {         return "tokenize{body() using tokens: " + token + "..." + endToken + "}".     } else {         return "tokenize{" + (headerName != null ? "header: " + headerName : "body()") + " using token: " + token + "}".     } }
