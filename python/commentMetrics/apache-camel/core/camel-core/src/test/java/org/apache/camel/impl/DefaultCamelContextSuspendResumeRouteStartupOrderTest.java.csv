commented;modifiers;parameterAmount;loc;comment;code
false;public;0;36;;@Test public void testSuspendResume() throws Exception {     assertFalse(context.isSuspended()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("A").     template.sendBody("seda:foo", "A").     assertMockEndpointsSatisfied().     log.info("Suspending").     // now suspend and dont expect a message to be routed     resetMocks().     mock.expectedMessageCount(0).     context.suspend().     // need to give seda consumer thread time to idle     Thread.sleep(100).     template.sendBody("seda:foo", "B").     mock.assertIsSatisfied(1000).     assertTrue(context.isSuspended()).     log.info("Resuming").     // now resume and expect the previous message to be routed     resetMocks().     mock.expectedBodiesReceived("B").     context.resume().     assertMockEndpointsSatisfied().     assertFalse(context.isSuspended()). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo").routeId("C").startupOrder(3).to("log:foo").to("direct:bar").     from("direct:baz").routeId("A").startupOrder(1).to("log:baz").to("mock:result").     from("direct:bar").routeId("B").startupOrder(2).to("log:bar").to("direct:baz"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("C").startupOrder(3).to("log:foo").to("direct:bar").             from("direct:baz").routeId("A").startupOrder(1).to("log:baz").to("mock:result").             from("direct:bar").routeId("B").startupOrder(2).to("log:bar").to("direct:baz").         }     }. }
