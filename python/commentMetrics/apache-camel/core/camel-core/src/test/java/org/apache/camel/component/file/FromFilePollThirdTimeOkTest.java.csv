commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/deletefile").     super.setUp(). }
false;public;0;17;;@Test public void testPollFileAndShouldBeDeletedAtThirdPoll() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(3).create().     template.sendBodyAndHeader("file://target/data/deletefile", body, Exchange.FILE_NAME, "hello.txt").     context.getRouteController().startRoute("FromFilePollThirdTimeOkTest").     getMockEndpoint("mock:result").expectedBodiesReceived(body).     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     assertEquals(3, counter).     // assert the file is deleted     File file = new File("target/data/deletefile/hello.txt").     assertFalse("The file should have been deleted", file.exists()). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     counter++.     if (counter < 3) {         // file should exists         File file = new File("target/data/deletefile/hello.txt").         assertTrue("The file should NOT have been deleted", file.exists()).         throw new IllegalArgumentException("Forced by unittest").     } }
false;public;0;16;;public void configure() throws Exception {     from("file://target/data/deletefile?delete=true&initialDelay=0&delay=10").noAutoStartup().routeId("FromFilePollThirdTimeOkTest").process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             if (counter < 3) {                 // file should exists                 File file = new File("target/data/deletefile/hello.txt").                 assertTrue("The file should NOT have been deleted", file.exists()).                 throw new IllegalArgumentException("Forced by unittest").             }         }     }).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/deletefile?delete=true&initialDelay=0&delay=10").noAutoStartup().routeId("FromFilePollThirdTimeOkTest").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     if (counter < 3) {                         // file should exists                         File file = new File("target/data/deletefile/hello.txt").                         assertTrue("The file should NOT have been deleted", file.exists()).                         throw new IllegalArgumentException("Forced by unittest").                     }                 }             }).convertBodyTo(String.class).to("mock:result").         }     }. }
