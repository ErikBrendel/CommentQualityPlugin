commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void configure() throws Exception {     from("file://target/data/idempotent/?idempotent=true&idempotentKey=${file:onlyname}-${file:size}&move=done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/idempotent/?idempotent=true&idempotentKey=${file:onlyname}-${file:size}&move=done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
false;public;0;19;;@Test public void testIdempotentDiffSize() throws Exception {     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // reset mock and set new expectations     mock.reset().     mock.expectedBodiesReceived("Bye World").     // create new file which has different length     template.sendBodyAndHeader("file://target/data/idempotent", "Bye World", Exchange.FILE_NAME, "report.txt").     assertMockEndpointsSatisfied(). }
