commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.setTypeConverterStatisticsEnabled(true).     return context. }
false;public;0;38;;@Test public void testTypeConverterRegistry() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(2).     template.sendBody("direct:start", "3").     template.sendBody("direct:start", "7").     assertMockEndpointsSatisfied().     TypeConverterRegistry reg = context.getTypeConverterRegistry().     assertTrue("Should be enabled", reg.getStatistics().isStatisticsEnabled()).     Long failed = reg.getStatistics().getFailedCounter().     assertEquals(0, failed.intValue()).     Long miss = reg.getStatistics().getMissCounter().     assertEquals(0, miss.intValue()).     try {         template.sendBody("direct:start", "foo").         fail("Should have thrown exception").     } catch (Exception e) {     // expected     }     // should now have a failed     failed = reg.getStatistics().getFailedCounter().     assertEquals(1, failed.intValue()).     miss = reg.getStatistics().getMissCounter().     assertEquals(0, miss.intValue()).     // reset     reg.getStatistics().reset().     failed = reg.getStatistics().getFailedCounter().     assertEquals(0, failed.intValue()).     miss = reg.getStatistics().getMissCounter().     assertEquals(0, miss.intValue()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").convertBodyTo(int.class).to("mock:a"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").convertBodyTo(int.class).to("mock:a").         }     }. }
