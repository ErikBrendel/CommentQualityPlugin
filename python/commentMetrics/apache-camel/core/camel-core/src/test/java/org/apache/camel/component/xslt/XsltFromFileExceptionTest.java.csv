commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/xslt").     super.setUp(). }
false;public;0;17;;@Test public void testXsltFromFileExceptionOk() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(0).     template.sendBodyAndHeader("file:target/data/xslt", "<hello>world!</hello>", Exchange.FILE_NAME, "hello.xml").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     File file = new File("target/data/xslt/hello.xml").     assertFalse("File should not exists " + file, file.exists()).     file = new File("target/data/xslt/ok/hello.xml").     assertTrue("File should exists " + file, file.exists()). }
false;public;0;18;;@Test public void testXsltFromFileExceptionFail() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(1).     // the last tag is not ended properly     template.sendBodyAndHeader("file:target/data/xslt", "<hello>world!</hello", Exchange.FILE_NAME, "hello2.xml").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     File file = new File("target/data/xslt/hello2.xml").     assertFalse("File should not exists " + file, file.exists()).     file = new File("target/data/xslt/error/hello2.xml").     assertTrue("File should exists " + file, file.exists()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("file:target/data/xslt?moveFailed=error&move=ok&initialDelay=0&delay=10").onException(Exception.class).to("mock:error").end().to("xslt:org/apache/camel/component/xslt/example.xsl").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/xslt?moveFailed=error&move=ok&initialDelay=0&delay=10").onException(Exception.class).to("mock:error").end().to("xslt:org/apache/camel/component/xslt/example.xsl").to("mock:result").         }     }. }
