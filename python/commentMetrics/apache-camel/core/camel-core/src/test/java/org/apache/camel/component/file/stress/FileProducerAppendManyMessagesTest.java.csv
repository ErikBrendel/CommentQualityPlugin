commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Override @Before public void setUp() throws Exception {     if (!enabled) {         return.     }     deleteDirectory("target/data/big").     createDirectory("target/data/big").     // create a big file     File file = new File("target/data/big/data.txt").     FileOutputStream fos = new FileOutputStream(file).     for (int i = 0. i < 100000. i++) {         String s = "Hello World this is a long line with number " + i + LS.         fos.write(s.getBytes()).     }     fos.close().     super.setUp(). }
false;public;0;12;;@Test public void testBigFile() throws Exception {     if (!enabled) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:done").     mock.expectedMessageCount(1).     mock.setResultWaitTime(2 * 60000).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("file:target/data/big").split(body().tokenize(LS)).streaming().to("log:processing?groupSize=1000").to("file:target/data/out/also-big.txt?fileExist=Append").end().to("mock:done"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/big").split(body().tokenize(LS)).streaming().to("log:processing?groupSize=1000").to("file:target/data/out/also-big.txt?fileExist=Append").end().to("mock:done").         }     }. }
