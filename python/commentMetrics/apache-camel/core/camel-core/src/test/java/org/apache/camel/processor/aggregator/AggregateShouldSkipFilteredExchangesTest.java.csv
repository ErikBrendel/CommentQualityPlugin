commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAggregateWithFilter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World,Bye World").     MockEndpoint filtered = getMockEndpoint("mock:filtered").     filtered.expectedBodiesReceived("Hello World", "Bye World").     template.sendBodyAndHeader("direct:start", "Hello World", "id", 1).     template.sendBodyAndHeader("direct:start", "Hi there", "id", 1).     template.sendBodyAndHeader("direct:start", "Bye World", "id", 1).     template.sendBodyAndHeader("direct:start", "How do you do?", "id", 1).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     Predicate goodWord = body().contains("World").     from("direct:start").filter(goodWord).to("mock:filtered").aggregate(header("id"), new MyAggregationStrategy()).completionTimeout(1000).to("mock:result").end().end(). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             Predicate goodWord = body().contains("World").             from("direct:start").filter(goodWord).to("mock:filtered").aggregate(header("id"), new MyAggregationStrategy()).completionTimeout(1000).to("mock:result").end().end().         }     }. }
false;public;2;11;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String newBody = newExchange.getIn().getBody(String.class).     String body = oldExchange.getIn().getBody(String.class).     body = body + "," + newBody.     oldExchange.getIn().setBody(body).     return oldExchange. }
