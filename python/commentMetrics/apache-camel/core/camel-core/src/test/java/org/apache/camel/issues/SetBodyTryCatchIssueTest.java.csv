commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSetBody() throws Exception {     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("123").     Object out = template.requestBody("direct:start", "Hello World").     assertEquals("123", out).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").setHeader("foo", constant("123")).doTry().setHeader("bar", constant("456")).to("mock:bar").bean(SetBodyTryCatchIssueTest.class, "doSomething").doCatch(IllegalArgumentException.class).end().setBody(header("foo")).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("foo", constant("123")).doTry().setHeader("bar", constant("456")).to("mock:bar").bean(SetBodyTryCatchIssueTest.class, "doSomething").doCatch(IllegalArgumentException.class).end().setBody(header("foo")).to("mock:result").         }     }. }
false;public,static;1;12;;public static void doSomething(Exchange exchange) throws Exception {     Map<String, Object> headers = exchange.getIn().getHeaders().     exchange.getOut().setBody("Bye World").     // we copy the headers by mistake by setting it as a reference from the IN     // but we should ideally do as below instead     // but we want to let Camel handle this situation as well, otherwise headers may appear as lost     // exchange.getOut().getHeaders().putAll(headers).     exchange.getOut().setHeaders(headers).     throw new IllegalArgumentException("Forced"). }
