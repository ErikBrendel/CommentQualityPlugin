commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new RuntimeException("TEST EXCEPTION"). }
false;public;0;15;;@Test public void testFailure() throws Exception {     getMockEndpoint("mock:handleFailure").whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new RuntimeException("TEST EXCEPTION").         }     }).     getMockEndpoint("mock:exceptionFailure").expectedMessageCount(1).     sendBody("direct:startFailure", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new RuntimeException("TEST EXCEPTION"). }
false;public;0;15;;@Test public void testSuccess() throws Exception {     getMockEndpoint("mock:handleSuccess").whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new RuntimeException("TEST EXCEPTION").         }     }).     getMockEndpoint("mock:exceptionSuccess").expectedMessageCount(1).     sendBody("direct:startSuccess", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;25;;@Override public void configure() throws Exception {     from("direct:startFailure").onException(Throwable.class).to("mock:exceptionFailure").end().to("direct:handleFailure").to("mock:resultFailure").     from("direct:handleFailure").errorHandler(noErrorHandler()).log("FAULTY log").to("mock:handleFailure").     from("direct:startSuccess").onException(Throwable.class).to("mock:exceptionSuccess").end().to("direct:handleSuccess").to("mock:resultSuccess").     from("direct:handleSuccess").errorHandler(noErrorHandler()).to("mock:handleSuccess"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:startFailure").onException(Throwable.class).to("mock:exceptionFailure").end().to("direct:handleFailure").to("mock:resultFailure").             from("direct:handleFailure").errorHandler(noErrorHandler()).log("FAULTY log").to("mock:handleFailure").             from("direct:startSuccess").onException(Throwable.class).to("mock:exceptionSuccess").end().to("direct:handleSuccess").to("mock:resultSuccess").             from("direct:handleSuccess").errorHandler(noErrorHandler()).to("mock:handleSuccess").         }     }. }
