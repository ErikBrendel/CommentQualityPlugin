commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testCamel() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:camel").     mock.expectedBodiesReceived("Hello Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").filter(language("simple", "${body} contains 'Camel'")).to("mock:camel"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").filter(language("simple", "${body} contains 'Camel'")).to("mock:camel").         }     }. }
