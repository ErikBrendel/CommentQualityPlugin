commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testFireAndForgetUsingExpressions() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     MockEndpoint tap = getMockEndpoint("mock:tap").     tap.expectedBodiesReceived("Bye World").     tap.expectedHeaderReceived("id", 123).     String today = new SimpleDateFormat("yyyyMMdd").format(new Date()).     tap.expectedHeaderReceived("date", today).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;20;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").wireTap("direct:tap").newExchangeBody(constant("Bye World")).newExchangeHeader("id", constant(123)).newExchangeHeader("date", simple("${date:now:yyyyMMdd}")).end().to("mock:result").     // this is the tapped route     from("direct:tap").to("mock:tap"). // END SNIPPET: e1 }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").wireTap("direct:tap").newExchangeBody(constant("Bye World")).newExchangeHeader("id", constant(123)).newExchangeHeader("date", simple("${date:now:yyyyMMdd}")).end().to("mock:result").             // this is the tapped route             from("direct:tap").to("mock:tap").         // END SNIPPET: e1         }     }. }
