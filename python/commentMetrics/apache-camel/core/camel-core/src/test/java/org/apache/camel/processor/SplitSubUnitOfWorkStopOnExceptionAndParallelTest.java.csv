commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testOK() throws Exception {     counter = 0.     getMockEndpoint("mock:dead").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedBodiesReceived("Tiger,Camel").     getMockEndpoint("mock:b").expectedBodiesReceivedInAnyOrder("Tiger", "Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Tiger,Camel").     getMockEndpoint("mock:line").expectedBodiesReceivedInAnyOrder("Tiger", "Camel").     template.sendBody("direct:start", "Tiger,Camel").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testError() throws Exception {     counter = 0.     getMockEndpoint("mock:dead").expectedBodiesReceived("Tiger,Donkey,Camel").     getMockEndpoint("mock:a").expectedMessageCount(1).     // b should get between 1 or 3 depending when we stop (we run parallel)     getMockEndpoint("mock:b").expectedMinimumMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     // line should get between 0 or 2 depending when we stop (we run parallel)     getMockEndpoint("mock:line").expectedMinimumMessageCount(0).     template.sendBody("direct:start", "Tiger,Donkey,Camel").     assertMockEndpointsSatisfied().     // 1 first + 3 redeliveries     assertEquals(4, counter). }
false;public;0;19;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0)).     from("direct:start").to("mock:a").split(body().tokenize(",")).shareUnitOfWork().stopOnException().parallelProcessing().to("mock:b").to("direct:line").end().to("mock:result").     from("direct:line").to("log:line").process(new MyProcessor()).to("mock:line"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0)).             from("direct:start").to("mock:a").split(body().tokenize(",")).shareUnitOfWork().stopOnException().parallelProcessing().to("mock:b").to("direct:line").end().to("mock:result").             from("direct:line").to("log:line").process(new MyProcessor()).to("mock:line").         }     }. }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body.contains("Donkey")) {         counter++.         throw new IllegalArgumentException("Donkey not allowed").     } }
