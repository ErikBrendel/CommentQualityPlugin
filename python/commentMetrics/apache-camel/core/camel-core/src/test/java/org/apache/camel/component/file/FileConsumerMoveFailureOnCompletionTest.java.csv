commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/failed").     super.setUp(). }
false;public;0;12;;@Test public void testMoveFailedRollbackOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     mock.expectedFileExists("target/data/failed/error/bye-error.txt", "Kabom").     getMockEndpoint("mock:failed").expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/failed", "Kabom", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testMoveFailedCommitAndFailure() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedFileExists("target/data/failed/.camel/hello.txt", "Hello World").     mock.expectedFileExists("target/data/failed/error/bye-error.txt", "Kabom").     getMockEndpoint("mock:failed").expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/failed", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/failed", "Kabom", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kabom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
false;public;0;13;;@Override public void configure() throws Exception {     from("file://target/data/failed?initialDelay=0&delay=10&moveFailed=error/${file:name.noext}-error.txt").onCompletion().onFailureOnly().to("mock:failed").end().process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Kabom".equals(body)) {                 throw new IllegalArgumentException("Forced").             }         }     }).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/failed?initialDelay=0&delay=10&moveFailed=error/${file:name.noext}-error.txt").onCompletion().onFailureOnly().to("mock:failed").end().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Kabom".equals(body)) {                         throw new IllegalArgumentException("Forced").                     }                 }             }).convertBodyTo(String.class).to("mock:result").         }     }. }
