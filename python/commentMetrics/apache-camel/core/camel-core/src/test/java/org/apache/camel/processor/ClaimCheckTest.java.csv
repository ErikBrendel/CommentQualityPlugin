commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testClaimCheck() throws Exception {     String body = "<order custId=\"123\"><lotsOfContent/></order>".     // check to make sure the message body gets added back in properly     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).body().isEqualTo(body).     // check to make sure the claim check is added to the message and     // the body is removed     MockEndpoint testCheckpointEndpoint = getMockEndpoint("mock:testCheckpoint").     testCheckpointEndpoint.expectedMessageCount(1).     testCheckpointEndpoint.expectedHeaderReceived("claimCheck", "123").     testCheckpointEndpoint.message(0).body().isNull().     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("checkLuggage", new CheckLuggageBean()).     jndi.bind("dataEnricher", new DataEnricherBean()).     return jndi. }
false;public;0;5;;public void configure() {     // START SNIPPET: e1     from("direct:start").to("bean:checkLuggage", "mock:testCheckpoint", "bean:dataEnricher", "mock:result"). // END SNIPPET: e1 }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").to("bean:checkLuggage", "mock:testCheckpoint", "bean:dataEnricher", "mock:result").         // END SNIPPET: e1         }     }. }
false;public;3;8;;public void checkLuggage(Exchange exchange, @Body String body, @XPath("/order/@custId") String custId) {     // store the message body into the data store, using the custId as the claim check     dataStore.put(custId, body).     // add the claim check as a header     exchange.getIn().setHeader("claimCheck", custId).     // remove the body from the message     exchange.getIn().setBody(null). }
false;public;2;9;;public void addDataBackIn(Exchange exchange, @Header("claimCheck") String claimCheck) {     // query the data store using the claim check as the key and add the data     // back into the message body     exchange.getIn().setBody(dataStore.get(claimCheck)).     // remove the message data from the data store     dataStore.remove(claimCheck).     // remove the claim check header     exchange.getIn().removeHeader("claimCheck"). }
