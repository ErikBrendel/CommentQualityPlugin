commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSplitABC() throws Exception {     getMockEndpoint("mock:split").expectedMessageCount(3).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitABCStreaming() throws Exception {     getMockEndpoint("mock:split").expectedMessageCount(3).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:streaming", "A,B,C").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitEmptyList() throws Exception {     getMockEndpoint("mock:split").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     List<?> list = new ArrayList<>().     template.sendBody("direct:start", list).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitEmptyListStreaming() throws Exception {     getMockEndpoint("mock:split").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     List<?> list = new ArrayList<>().     template.sendBody("direct:streaming", list).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitNullBody() throws Exception {     getMockEndpoint("mock:split").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSplitNullBodyStreaming() throws Exception {     getMockEndpoint("mock:split").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:streaming", null).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").split(body()).to("mock:split").end().to("mock:result").     from("direct:streaming").split(body()).streaming().to("mock:split").end().to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body()).to("mock:split").end().to("mock:result").             from("direct:streaming").split(body()).streaming().to("mock:split").end().to("mock:result").         }     }. }
