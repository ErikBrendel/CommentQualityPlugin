commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testWireTapOnPrepare() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:a").message(0).body(String.class).isEqualTo("1 Tony the Tiger").     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:b").message(0).body(String.class).isEqualTo("1 Tiger").     final Animal original = new Animal(1, "Tiger").     template.sendBody("direct:start", original).     assertMockEndpointsSatisfied().     final Animal aAnimal = getMockEndpoint("mock:a").getExchanges().get(0).getIn().getBody(Animal.class).     final Animal bAnimal = getMockEndpoint("mock:b").getExchanges().get(0).getIn().getBody(Animal.class).     assertSame("Original instance should stay in main route", original, bAnimal).     assertNotSame("Copy should go to Wire Tap Endpoint", original, aAnimal). }
false;public;0;11;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").wireTap("direct:a").copy().newExchange(new AnimalDeepClonePrepare()).to("direct:b").     // END SNIPPET: e1     from("direct:a").process(new ProcessorA()).to("mock:a").     from("direct:b").delay(1000).process(new ProcessorB()).to("mock:b"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").wireTap("direct:a").copy().newExchange(new AnimalDeepClonePrepare()).to("direct:b").             // END SNIPPET: e1             from("direct:a").process(new ProcessorA()).to("mock:a").             from("direct:b").delay(1000).process(new ProcessorB()).to("mock:b").         }     }. }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()).     // adjust the name     body.setName("Tony the Tiger"). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()). }
