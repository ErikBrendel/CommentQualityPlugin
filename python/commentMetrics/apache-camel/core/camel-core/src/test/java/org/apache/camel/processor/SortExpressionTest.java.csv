commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSortBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hadrian,William,Claus").     assertMockEndpointsSatisfied().     List<?> list = mock.getExchanges().get(0).getIn().getBody(List.class).     assertEquals("Claus", list.get(0)).     assertEquals("Hadrian", list.get(1)).     assertEquals("William", list.get(2)). }
false;public;0;14;;@Test public void testSortReverse() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:reverse", "Hadrian,William,Claus").     assertMockEndpointsSatisfied().     List<?> list = mock.getExchanges().get(0).getIn().getBody(List.class).     assertEquals("William", list.get(0)).     assertEquals("Hadrian", list.get(1)).     assertEquals("Claus", list.get(2)). }
false;public;0;9;;public void configure() {     // START SNIPPET: e1     from("direct:start").sort(body().tokenize(",")).to("mock:result").     // END SNIPPET: e1     // START SNIPPET: e2     from("direct:reverse").sort(body().tokenize(","), new MyReverseComparator()).to("mock:result"). // END SNIPPET: e2 }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").sort(body().tokenize(",")).to("mock:result").             // END SNIPPET: e1             // START SNIPPET: e2             from("direct:reverse").sort(body().tokenize(","), new MyReverseComparator()).to("mock:result").         // END SNIPPET: e2         }     }. }
false;public;2;4;;public int compare(Object o1, Object o2) {     // just reverse it for unit testing     return ObjectHelper.compare(o1, o2) * -1. }
