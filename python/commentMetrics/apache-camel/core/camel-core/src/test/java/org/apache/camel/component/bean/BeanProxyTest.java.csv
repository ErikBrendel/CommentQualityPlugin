commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testBeanProxyStringReturnString() throws Exception {     // START SNIPPET: e2     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     String reply = service.submitOrderStringReturnString("<order type=\"book\">Camel in action</order>").     assertEquals("<order id=\"123\">OK</order>", reply). // END SNIPPET: e2 }
false;public;0;10;;@Test public void testBeanProxyStringReturnDocument() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     Document reply = service.submitOrderStringReturnDocument("<order type=\"book\">Camel in action</order>").     assertNotNull(reply).     String s = context.getTypeConverter().convertTo(String.class, reply).     assertEquals("<order id=\"123\">OK</order>", s). }
false;public;0;10;;@Test public void testBeanProxyDocumentReturnString() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     Document doc = context.getTypeConverter().convertTo(Document.class, "<order type=\"book\">Camel in action</order>").     String reply = service.submitOrderDocumentReturnString(doc).     assertEquals("<order id=\"123\">OK</order>", reply). }
false;public;0;14;;@Test public void testBeanProxyDocumentReturnDocument() throws Exception {     // START SNIPPET: e3     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     Document doc = context.getTypeConverter().convertTo(Document.class, "<order type=\"book\">Camel in action</order>").     Document reply = service.submitOrderDocumentReturnDocument(doc).     assertNotNull(reply).     String s = context.getTypeConverter().convertTo(String.class, reply).     assertEquals("<order id=\"123\">OK</order>", s). // END SNIPPET: e3 }
false;public;0;8;;@Test public void testBeanProxyFailure() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     String reply = service.submitOrderStringReturnString("<order type=\"beer\">Carlsberg</order>").     assertEquals("<order>FAIL</order>", reply). }
false;public;0;12;;@Test public void testBeanProxyFailureNotXMLBody() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     try {         service.submitOrderStringReturnString("Hello World").         fail("Should have thrown exception").     } catch (Exception e) {     // expected     } }
false;public;0;7;;@Test public void testBeanProxyVoidReturnType() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     service.doNothing("<order>ping</order>"). }
false;public;0;14;;@Test public void testBeanProxyFailureInvalidReturnType() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:start").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     try {         service.invalidReturnType("<order type=\"beer\">Carlsberg</order>").         fail("Should have thrown exception").     } catch (Exception e) {         // expected         InvalidPayloadException cause = assertIsInstanceOf(InvalidPayloadException.class, e.getCause()).         assertEquals(Integer.class, cause.getType()).     } }
false;public;0;8;;@Test public void testBeanProxyCallAnotherBean() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:bean").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     String reply = service.submitOrderStringReturnString("World").     assertEquals("Hello World", reply). }
true;public;0;8;// START SNIPPET: e4 ;// START SNIPPET: e4 @Test public void testProxyBuilderProxyCallAnotherBean() throws Exception {     // use ProxyBuilder to easily create the proxy     OrderService service = new ProxyBuilder(context).endpoint("direct:bean").build(OrderService.class).     String reply = service.submitOrderStringReturnString("World").     assertEquals("Hello World", reply). }
false;public;0;8;;// END SNIPPET: e4 @Test public void testBeanProxyCallAnotherBeanWithNoArgs() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:bean").     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     String reply = service.doAbsolutelyNothing().     assertEquals("Hi nobody", reply). }
false;public;0;8;;@Test public void testProxyBuilderProxyCallAnotherBeanWithNoArgs() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:bean").     OrderService service = new ProxyBuilder(context).endpoint(endpoint).build(OrderService.class).     String reply = service.doAbsolutelyNothing().     assertEquals("Hi nobody", reply). }
false;public;0;12;;@Test public void testBeanProxyVoidAsInOut() throws Exception {     Endpoint endpoint = context.getEndpoint("seda:delay").     // will by default let all exchanges be InOut     OrderService service = ProxyHelper.createProxy(endpoint, OrderService.class).     getMockEndpoint("mock:delay").expectedBodiesReceived("Hello World", "Bye World").     service.doNothing("Hello World").     template.sendBody("mock:delay", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testProxyBuilderVoidAsInOut() throws Exception {     // will by default let all exchanges be InOut     OrderService service = new ProxyBuilder(context).endpoint("seda:delay").build(OrderService.class).     getMockEndpoint("mock:delay").expectedBodiesReceived("Hello World", "Bye World").     service.doNothing("Hello World").     template.sendBody("mock:delay", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").choice().when(xpath("/order/@type = 'book'")).to("direct:book").otherwise().to("direct:other").end().     from("direct:book").transform(constant("<order id=\"123\">OK</order>")).     from("direct:other").transform(constant("<order>FAIL</order>")).     // END SNIPPET: e1     from("direct:bean").bean(MyFooBean.class, "hello").     from("seda:delay").delay(1000).to("mock:delay"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").choice().when(xpath("/order/@type = 'book'")).to("direct:book").otherwise().to("direct:other").end().             from("direct:book").transform(constant("<order id=\"123\">OK</order>")).             from("direct:other").transform(constant("<order>FAIL</order>")).             // END SNIPPET: e1             from("direct:bean").bean(MyFooBean.class, "hello").             from("seda:delay").delay(1000).to("mock:delay").         }     }. }
false;public;1;7;;public String hello(String name) {     if (name != null) {         return "Hello " + name.     } else {         return "Hi nobody".     } }
