commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testCounterLoop() throws Exception {     performLoopTest("direct:a", 8). }
false;public;0;4;;@Test public void testExpressionLoop() throws Exception {     performLoopTest("direct:b", 6). }
false;public;0;4;;@Test public void testExpressionClauseLoop() throws Exception {     performLoopTest("direct:c", 4). }
false;public;0;7;;@Test public void testLoopAsBlock() throws Exception {     MockEndpoint lastEndpoint = resolveMandatoryEndpoint("mock:last", MockEndpoint.class).     lastEndpoint.expectedMessageCount(1).     performLoopTest("direct:d", 2).     lastEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testLoopWithInvalidExpression() throws Exception {     try {         performLoopTest("direct:b", 4, "invalid").         fail("Exception expected for invalid expression").     } catch (RuntimeCamelException e) {     // expected     } }
false;public;0;4;;@Test public void testLoopProperties() throws Exception {     performLoopTest("direct:e", 10). }
false;private;3;5;;private void performLoopTest(String endpointUri, int expectedIterations, String header) throws InterruptedException {     resultEndpoint.expectedMessageCount(expectedIterations).     template.sendBodyAndHeader(endpointUri, "<hello times='4'>world!</hello>", "loop", header).     resultEndpoint.assertIsSatisfied(). }
false;private;2;3;;private void performLoopTest(String endpointUri, int expectedIterations) throws InterruptedException {     performLoopTest(endpointUri, expectedIterations, "6"). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.reset(). }
false;public;0;17;;public void configure() {     // START SNIPPET: ex1     from("direct:a").loop(8).to("mock:result").     // END SNIPPET: ex1     // START SNIPPET: ex2     from("direct:b").loop(header("loop")).to("mock:result").     // END SNIPPET: ex2     // START SNIPPET: ex3     from("direct:c").loop().xpath("/hello/@times").to("mock:result").     // END SNIPPET: ex3     // START SNIPPET: ex4     from("direct:d").loop(2).to("mock:result").end().to("mock:last").     // END SNIPPET: ex4     // START SNIPPET: ex5     from("direct:e").loop(10).process(loopTest).to("mock:result"). // END SNIPPET: ex5 }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() {     final Processor loopTest = new LoopTestProcessor(10).     return new RouteBuilder() {          public void configure() {             // START SNIPPET: ex1             from("direct:a").loop(8).to("mock:result").             // END SNIPPET: ex1             // START SNIPPET: ex2             from("direct:b").loop(header("loop")).to("mock:result").             // END SNIPPET: ex2             // START SNIPPET: ex3             from("direct:c").loop().xpath("/hello/@times").to("mock:result").             // END SNIPPET: ex3             // START SNIPPET: ex4             from("direct:d").loop(2).to("mock:result").end().to("mock:last").             // END SNIPPET: ex4             // START SNIPPET: ex5             from("direct:e").loop(10).process(loopTest).to("mock:result").         // END SNIPPET: ex5         }     }. }
