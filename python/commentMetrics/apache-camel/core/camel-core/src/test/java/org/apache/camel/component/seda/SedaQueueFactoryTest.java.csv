commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getRegistry().bind("arrayQueueFactory", arrayQueueFactory).     return context. }
false;public;0;8;;@Test public void testArrayBlockingQueueFactory() throws Exception {     SedaEndpoint endpoint = resolveMandatoryEndpoint("seda:arrayQueue?queueFactory=#arrayQueueFactory", SedaEndpoint.class).     BlockingQueue<Exchange> queue = endpoint.getQueue().     ArrayBlockingQueue<Exchange> blockingQueue = assertIsInstanceOf(ArrayBlockingQueue.class, queue).     assertEquals("remainingCapacity - default", SedaConstants.QUEUE_SIZE, blockingQueue.remainingCapacity()). }
false;public;0;9;;@SuppressWarnings("unchecked") @Test public void testArrayBlockingQueueFactoryAndSize() throws Exception {     SedaEndpoint endpoint = resolveMandatoryEndpoint("seda:arrayQueue100?queueFactory=#arrayQueueFactory&size=100", SedaEndpoint.class).     BlockingQueue<Exchange> queue = endpoint.getQueue().     ArrayBlockingQueue<Exchange> blockingQueue = assertIsInstanceOf(ArrayBlockingQueue.class, queue).     assertEquals("remainingCapacity - custom", 100, blockingQueue.remainingCapacity()). }
false;public;0;6;;@Test public void testDefaultBlockingQueueFactory() throws Exception {     SedaEndpoint endpoint = resolveMandatoryEndpoint("seda:linkedQueue", SedaEndpoint.class).     BlockingQueue<Exchange> queue = endpoint.getQueue().     assertIsInstanceOf(LinkedBlockingQueue.class, queue). }
