commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBridgedMethod() throws Exception {     BeanInfo beanInfo = new BeanInfo(context, MyService.class).     DefaultExchange exchange = new DefaultExchange(context).     exchange.getIn().setBody(new Request(1)).     try {         MyService myService = new MyService().         MethodInvocation mi = beanInfo.createInvocation(null, exchange).         assertEquals("MyService", mi.getMethod().getDeclaringClass().getSimpleName()).         assertEquals(2, mi.getMethod().invoke(myService, new Request(1))).     } catch (AmbiguousMethodCallException e) {         fail("This should not be ambiguous!").     } }
false;public;0;16;;@Test public void testPackagePrivate() throws Exception {     BeanInfo beanInfo = new BeanInfo(context, MyPackagePrivateService.class).     DefaultExchange exchange = new DefaultExchange(context).     exchange.getIn().setBody(new Request(1)).     try {         MyPackagePrivateService myService = new MyPackagePrivateService().         MethodInvocation mi = beanInfo.createInvocation(null, exchange).         assertEquals("Service", mi.getMethod().getDeclaringClass().getSimpleName()).         assertEquals(4, mi.getMethod().invoke(myService, new Request(2))).     } catch (AmbiguousMethodCallException e) {         fail("This should not be ambiguous!").     } }
false;;1;1;;int process(R request).
false;public;1;3;;public int process(Request request) {     return request.x + 1. }
false;public;1;3;;public int process(Request request) {     return request.x + 2. }
