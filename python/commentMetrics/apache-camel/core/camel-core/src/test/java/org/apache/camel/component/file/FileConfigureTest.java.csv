commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception { // Do nothing here }
false;public;0;14;;@Test public void testUriConfigurations() throws Exception {     assertFileEndpoint("file://target/data/foo/bar", EXPECT_PATH, false).     assertFileEndpoint("file://target/data/foo/bar?delete=true", EXPECT_PATH, false).     assertFileEndpoint("file:target/data/foo/bar?delete=true", EXPECT_PATH, false).     assertFileEndpoint("file:target/data/foo/bar", EXPECT_PATH, false).     assertFileEndpoint("file://target/data/foo/bar/", EXPECT_PATH, false).     assertFileEndpoint("file://target/data/foo/bar/?delete=true", EXPECT_PATH, false).     assertFileEndpoint("file:target/data/foo/bar/?delete=true", EXPECT_PATH, false).     assertFileEndpoint("file:target/data/foo/bar/", EXPECT_PATH, false).     assertFileEndpoint("file:/target/data/foo/bar/", File.separator + EXPECT_PATH + File.separator + EXPECT_FILE, true).     assertFileEndpoint("file:/", File.separator, true).     assertFileEndpoint("file:///", File.separator, true). }
false;public;0;24;;@Test public void testUriWithParameters() throws Exception {     FileEndpoint endpoint = resolveMandatoryEndpoint("file:///C:/camel/temp?delay=10&useFixedDelay=true&initialDelay=10&consumer.bridgeErrorHandler=true" + "&autoCreate=false&startingDirectoryMustExist=true&directoryMustExist=true&readLock=changed", FileEndpoint.class).     assertNotNull("Could not find file endpoint", endpoint).     assertEquals("Get a wrong option of StartingDirectoryMustExist", true, endpoint.isStartingDirectoryMustExist()).     endpoint = resolveMandatoryEndpoint("file:///C:/camel/temp?delay=10&useFixedDelay=true&initialDelay=10&startingDirectoryMustExist=true" + "&consumer.bridgeErrorHandler=true&autoCreate=false&directoryMustExist=true&readLock=changed", FileEndpoint.class).     assertNotNull("Could not find file endpoint", endpoint).     assertEquals("Get a wrong option of StartingDirectoryMustExist", true, endpoint.isStartingDirectoryMustExist()).     endpoint = resolveMandatoryEndpoint("file:///C:/camel/temp?delay=10&startingDirectoryMustExist=true&useFixedDelay=true&initialDelay=10" + "&consumer.bridgeErrorHandler=true&autoCreate=false&directoryMustExist=true&readLock=changed", FileEndpoint.class).     assertNotNull("Could not find file endpoint", endpoint).     assertEquals("Get a wrong option of StartingDirectoryMustExist", true, endpoint.isStartingDirectoryMustExist()).     endpoint = resolveMandatoryEndpoint("file:///C:/camel/temp?delay=10&useFixedDelay=true&initialDelay=10", FileEndpoint.class).     assertNotNull("Could not find file endpoint", endpoint).     assertEquals("Get a wrong option of StartingDirectoryMustExist", false, endpoint.isStartingDirectoryMustExist()). }
false;public;0;14;;@Test public void testUriWithCharset() throws Exception {     FileEndpoint endpoint = resolveMandatoryEndpoint("file://target/data/foo/bar?charset=UTF-8", FileEndpoint.class).     assertNotNull("Could not find endpoint: file://target/data/foo/bar?charset=UTF-8", endpoint).     assertEquals("Get a wrong charset", "UTF-8", endpoint.getCharset()).     try {         resolveMandatoryEndpoint("file://target/data/foo/bar?charset=ASSI", FileEndpoint.class).         // The charset is wrong         fail("Expect a configure exception here").     } catch (Exception ex) {         assertTrue("Get the wrong exception type here", ex instanceof ResolveEndpointFailedException).     } }
false;public;0;11;;@Test public void testConsumerConfigurations() throws Exception {     FileConsumer consumer = createFileConsumer("file://target/data/foo/bar?recursive=true").     assertNotNull(consumer).     try {         createFileConsumer("file://target/data/foo/bar?recursiv=true").         fail("Expect a configure exception here").     } catch (Exception ex) {         assertTrue("Get the wrong exception type here", ex instanceof ResolveEndpointFailedException).     } }
false;public;0;7;;@Override @After public void tearDown() throws Exception {     super.tearDown().     // one of the above tests created a /target folder in the root we want to get rid of when testing     deleteDirectory("/target"). }
false;private;1;4;;private FileConsumer createFileConsumer(String endpointUri) throws Exception {     FileEndpoint endpoint = resolveMandatoryEndpoint(endpointUri, FileEndpoint.class).     return endpoint.createConsumer(DUMMY_PROCESSOR). }
false;private;3;15;;private void assertFileEndpoint(String endpointUri, String expectedPath, boolean absolute) throws IOException {     FileEndpoint endpoint = resolveMandatoryEndpoint(endpointUri, FileEndpoint.class).     assertNotNull("Could not find endpoint: " + endpointUri, endpoint).     if (!absolute) {         File file = endpoint.getFile().         String path = file.getPath().         assertDirectoryEquals("For uri: " + endpointUri + " the file is not equal", expectedPath, path).         file = new File(expectedPath + (expectedPath.endsWith(File.separator) ? "" : File.separator) + EXPECT_FILE).         GenericFile<File> consumedFile = FileConsumer.asGenericFile(endpoint.getFile().getPath(), file, null, false).         assertEquals(EXPECT_FILE, consumedFile.getRelativeFilePath()).     } }
