commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filename-consumer").     super.setUp(). }
false;public;0;21;;@Test public void testValidFilenameOnExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     // should have file name header set     mock.allMessages().header(Exchange.FILE_NAME).isNotNull().     // the file name is also starting with target/data/filename-consumer     template.sendBodyAndHeader("file:target/data/filename-consumer", "Hello World", Exchange.FILE_NAME, "target/data/filename-consumer-hello.txt").     template.sendBodyAndHeader("file:target/data/filename-consumer", "Bye World", Exchange.FILE_NAME, "target/data/filename-consumer-bye.txt").     context.getRouteController().startAllRoutes().     assertMockEndpointsSatisfied().     // and expect name to contain target/data/filename-consumer-XXX.txt     assertDirectoryEquals("target/data/filename-consumer-bye.txt", mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_NAME, String.class)).     assertDirectoryEquals("target/data/filename-consumer-hello.txt", mock.getReceivedExchanges().get(1).getIn().getHeader(Exchange.FILE_NAME, String.class)). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:target/data/filename-consumer?initialDelay=0&delay=10&recursive=true&sortBy=file:name").noAutoStartup().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/filename-consumer?initialDelay=0&delay=10&recursive=true&sortBy=file:name").noAutoStartup().to("mock:result").         }     }. }
