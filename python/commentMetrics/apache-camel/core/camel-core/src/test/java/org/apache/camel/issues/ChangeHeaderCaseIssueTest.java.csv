commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testChangeHeaderCaseIssue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("SoapAction", "cool").     template.sendBodyAndHeader("direct:start", "Hello World", "SOAPAction", "cool").     assertMockEndpointsSatisfied().     // only the changed case header should exist     Map<String, Object> headers = new HashMap<>(mock.getReceivedExchanges().get(0).getIn().getHeaders()).     assertEquals("cool", headers.get("SoapAction")).     assertEquals(null, headers.get("SOAPAction")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // change the case of the header     Object value = exchange.getIn().removeHeader("SOAPAction").     exchange.getIn().setHeader("SoapAction", value). }
false;public;0;12;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:result").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // change the case of the header             Object value = exchange.getIn().removeHeader("SOAPAction").             exchange.getIn().setHeader("SoapAction", value).         }     }).     from("direct:start").to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:result").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // change the case of the header                     Object value = exchange.getIn().removeHeader("SOAPAction").                     exchange.getIn().setHeader("SoapAction", value).                 }             }).             from("direct:start").to("mock:result").         }     }. }
