commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("logFormatter", new TraceExchangeFormatter()).     return jndi. }
false;public;0;18;;@Test public void testLogBodyStreamStringSourceDisabled() throws Exception {     context.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_STREAMS, "false").     StringSource body = new StringSource("<?xml version=\"1.0\"?><person><name>Claus</name></person>").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should be logged anyway     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: <?xml version=\"1.0\"?><person><name>Claus</name></person>]")). }
false;public;0;18;;@Test public void testLogBodyStreamStringSourceDisabledByDefault() throws Exception {     context.getGlobalOptions().remove(Exchange.LOG_DEBUG_BODY_STREAMS).     StringSource body = new StringSource("<?xml version=\"1.0\"?><person><name>Claus</name></person>").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should be logged anyway     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: <?xml version=\"1.0\"?><person><name>Claus</name></person>]")). }
false;public;0;18;;@Test public void testLogBodyStreamStringSourceEnabled() throws Exception {     context.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_STREAMS, "true").     StringSource body = new StringSource("<?xml version=\"1.0\"?><person><name>Claus</name></person>").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should be logged anyway     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: <?xml version=\"1.0\"?><person><name>Claus</name></person>]")). }
false;public;0;18;;@Test public void testLogBodyStreamDisabled() throws Exception {     context.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_STREAMS, "false").     InputStream body = new ByteArrayInputStream("Hello World".getBytes()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should NOT be logged     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: [Body is instance of java.io.InputStream]]")). }
false;public;0;18;;@Test public void testLogBodyStreamDisabledByDefault() throws Exception {     context.getGlobalOptions().remove(Exchange.LOG_DEBUG_BODY_STREAMS).     InputStream body = new ByteArrayInputStream("Hello World".getBytes()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should NOT be logged     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: [Body is instance of java.io.InputStream]]")). }
false;public;0;19;;@Test public void testLogBodyStreamEnabled() throws Exception {     context.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_STREAMS, "true").     InputStream body = new ByteArrayInputStream("Hello World".getBytes()).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should be logged     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: [Body is instance of java.io.InputStream]]")).     assertIsInstanceOf(InputStream.class, mock.getReceivedExchanges().get(0).getIn().getBody()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").         }     }. }
