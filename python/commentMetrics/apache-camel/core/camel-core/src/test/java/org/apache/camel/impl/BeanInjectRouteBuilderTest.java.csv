commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new FooBar()).     return jndi. }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     // manual post process us as ContextTestSupport in camel-core doesn't do that out of the box     DefaultCamelBeanPostProcessor post = new DefaultCamelBeanPostProcessor(context).     post.postProcessBeforeInitialization(this, "MyRoute").     post.postProcessAfterInitialization(this, "MyRoute").     return context. }
false;public;0;8;;@Test public void testBeanInject() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String out = foo.hello(exchange.getIn().getBody(String.class)).     exchange.getIn().setBody(out). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String out = foo.hello(exchange.getIn().getBody(String.class)).             exchange.getIn().setBody(out).         }     }).to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String out = foo.hello(exchange.getIn().getBody(String.class)).                     exchange.getIn().setBody(out).                 }             }).to("mock:result").         }     }. }
