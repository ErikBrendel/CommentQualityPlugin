commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;public void process(Exchange exchange) throws CamelException {     if (count++ == 0) {         exchange.getOut().setFault(true).         exchange.getOut().setBody(new CamelException("Failed the first time")).     } }
false;public;0;10;;@Test public void testSuccessfulRetry() throws Exception {     a.expectedBodiesReceived("in").     b.expectedBodiesReceived("in").     error.expectedMessageCount(0).     template.sendBody("direct:start", "in").     MockEndpoint.assertIsSatisfied(a, b, error). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     a = resolveMandatoryEndpoint("mock:a", MockEndpoint.class).     b = resolveMandatoryEndpoint("mock:b", MockEndpoint.class).     error = resolveMandatoryEndpoint("mock:error", MockEndpoint.class). }
false;public;0;14;;@Override public void configure() {     getContext().addInterceptStrategy(new HandleFault()).     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(4).loggingLevel(LoggingLevel.DEBUG)).     from("direct:start").to("mock:a").process(successOnRetryProcessor).to("mock:b"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             getContext().addInterceptStrategy(new HandleFault()).             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(4).loggingLevel(LoggingLevel.DEBUG)).             from("direct:start").to("mock:a").process(successOnRetryProcessor).to("mock:b").         }     }. }
