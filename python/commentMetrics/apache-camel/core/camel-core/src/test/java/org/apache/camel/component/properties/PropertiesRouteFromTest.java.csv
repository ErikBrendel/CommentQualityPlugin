commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testPropertiesRouteFrom() throws Exception {     ProcessorDefinition out = context.getRouteDefinition("foo").getOutputs().get(0).     assertEquals("{{cool.end}}", ((SendDefinition) out).getUri()).     String uri = context.getRouteDefinition("foo").getInputs().get(0).getUri().     assertEquals("{{cool.start}}", uri).     // use a routes definition to dump the routes     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("foo")).     assertTrue(xml.contains("<from uri=\"{{cool.start}}\"/>")).     assertTrue(xml.contains("<to id=\"to1\" uri=\"{{cool.end}}\"/>")). }
false;public;0;5;;@Override public void configure() throws Exception {     from("{{cool.start}}").routeId("foo").to("{{cool.end}}"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("{{cool.start}}").routeId("foo").to("{{cool.end}}").         }     }. }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("classpath:org/apache/camel/component/properties/myproperties.properties")).     return context. }
