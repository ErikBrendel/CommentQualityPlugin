commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testPeople() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:people").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "username", "donald").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testAnimals() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:animals").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "username", "pluto").     assertMockEndpointsSatisfied(). }
false;public;0;9;;public void configure() {     // START SNIPPET: e1     from("direct:start").choice().when(not(header("username").regex("goofy|pluto"))).to("mock:people").otherwise().to("mock:animals").end(). // END SNIPPET: e1 }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").choice().when(not(header("username").regex("goofy|pluto"))).to("mock:people").otherwise().to("mock:animals").end().         // END SNIPPET: e1         }     }. }
