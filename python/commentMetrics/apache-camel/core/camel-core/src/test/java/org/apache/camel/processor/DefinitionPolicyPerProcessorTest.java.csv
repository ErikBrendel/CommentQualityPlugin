commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testDefintionAugmentationPolicy() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:foo").expectedBodyReceived().constant("body was altered").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     MyPolicy foo = context.getRegistry().lookupByNameAndType("foo", MyPolicy.class).     assertEquals("Should only be invoked 1 time", 1, foo.getInvoked()). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyPolicy("foo")).     return jndi. }
false;public;0;7;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").policy("foo").setBody().constant("body not altered").to("mock:foo").end(). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").policy("foo").setBody().constant("body not altered").to("mock:foo").end().         }     }. }
false;public;0;3;;public int getInvoked() {     return invoked. }
false;public;2;4;;public void beforeWrap(RouteContext routeContext, NamedNode definition) {     SetBodyDefinition bodyDef = (SetBodyDefinition) ((ProcessorDefinition<?>) definition).getOutputs().get(0).     bodyDef.setExpression(new ConstantExpression("body was altered")). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     invoked++.     exchange.getIn().setHeader(name, "was wrapped").     processor.process(exchange). }
false;public;2;9;;public Processor wrap(final RouteContext routeContext, final Processor processor) {     return new Processor() {          public void process(Exchange exchange) throws Exception {             invoked++.             exchange.getIn().setHeader(name, "was wrapped").             processor.process(exchange).         }     }. }
