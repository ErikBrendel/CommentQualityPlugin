commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDirectNoConsumerOneMessage() throws Exception {     getMockEndpoint("mock:error").expectedMinimumMessageCount(1).     getMockEndpoint("mock:foo").expectedMinimumMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo.direct:foo").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testDirectNoConsumerTwoMessages() throws Exception {     getMockEndpoint("mock:error").expectedMinimumMessageCount(1).     getMockEndpoint("mock:foo").expectedMinimumMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo").     template.sendBodyAndHeader("direct:start", "Bye World", "foo", "direct:foo").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testDirectNoConsumerOneMessageBar() throws Exception {     getMockEndpoint("mock:error").expectedMinimumMessageCount(1).     getMockEndpoint("mock:foo").expectedMinimumMessageCount(1).     template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "mock:foo.direct:foo").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     context.getComponent("direct", DirectComponent.class).setBlock(false).     onException(Exception.class).handled(true).to("mock:error").     from("direct:start").recipientList().header("foo").delimiter(".").     from("direct:bar").recipientList(".").header("bar"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getComponent("direct", DirectComponent.class).setBlock(false).             onException(Exception.class).handled(true).to("mock:error").             from("direct:start").recipientList().header("foo").delimiter(".").             from("direct:bar").recipientList(".").header("bar").         }     }. }
