commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void notify(CamelEvent event) throws Exception {     counter++. }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeSentEvent. }
false;public;0;3;;public int getCounter() {     return counter. }
false;public;0;3;;public void reset() {     counter = 0. }
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().addEventNotifier(notifier).     return context. }
false;public;0;9;;@Test public void testExchangeSentNotifier() throws Exception {     notifier.reset().     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("I was here", out).     assertEquals(2, notifier.getCounter()). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;14;;@Test public void testExchangeSentNotifierExchange() throws Exception {     notifier.reset().     Exchange out = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertEquals("I was here", out.getIn().getBody()).     assertEquals(2, notifier.getCounter()). }
false;public;0;12;;@Test public void testExchangeSentNotifierManualExchange() throws Exception {     notifier.reset().     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     template.send("direct:start", exchange).     assertEquals("I was here", exchange.getIn().getBody()).     assertEquals(2, notifier.getCounter()). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("I was here"). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("I was here").         }     }).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("I was here").                 }             }).to("mock:result").         }     }. }
