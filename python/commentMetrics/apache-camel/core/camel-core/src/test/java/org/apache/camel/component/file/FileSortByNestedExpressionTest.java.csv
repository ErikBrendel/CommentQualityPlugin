commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filesorter").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;private;1;13;;private void prepareFolder(String folder) {     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello Paris", Exchange.FILE_NAME, "paris.txt").     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello London", Exchange.FILE_NAME, "london.txt").     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello Copenhagen", Exchange.FILE_NAME, "copenhagen.xml").     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello Dublin", Exchange.FILE_NAME, "dublin.txt"). }
false;public;0;5;;@Override public void configure() throws Exception {     from(fileUrl + "a/?initialDelay=0&delay=10&sortBy=file:ext.file:name").convertBodyTo(String.class).to("mock:result"). }
false;public;0;18;;@Test public void testSortNestedFiles() throws Exception {     prepareFolder("a").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fileUrl + "a/?initialDelay=0&delay=10&sortBy=file:ext.file:name").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Dublin", "Hello London", "Hello Paris", "Hello Copenhagen").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(fileUrl + "b/?initialDelay=0&delay=10&sortBy=file:ext.reverse:file:name").convertBodyTo(String.class).to("mock:reverse"). }
false;public;0;18;;@Test public void testSortNestedFilesReverse() throws Exception {     prepareFolder("b").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fileUrl + "b/?initialDelay=0&delay=10&sortBy=file:ext.reverse:file:name").convertBodyTo(String.class).to("mock:reverse").         }     }).     context.start().     MockEndpoint reverse = getMockEndpoint("mock:reverse").     reverse.expectedBodiesReceived("Hello Paris", "Hello London", "Hello Dublin", "Hello Copenhagen").     assertMockEndpointsSatisfied(). }
