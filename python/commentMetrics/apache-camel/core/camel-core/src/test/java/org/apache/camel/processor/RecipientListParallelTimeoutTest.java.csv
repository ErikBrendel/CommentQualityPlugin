commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testRecipientListParallelTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // A will timeout so we only get B and/or C     mock.message(0).body().not(body().contains("A")).     template.sendBodyAndHeader("direct:start", "Hello", "slip", "direct:a,direct:b,direct:c").     assertMockEndpointsSatisfied(). }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
false;public;0;24;;@Override public void configure() throws Exception {     from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String body = oldExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).             return oldExchange.         }     }).parallelProcessing().timeout(500).to("mock:result").     from("direct:a").delay(1000).setBody(constant("A")).     from("direct:b").setBody(constant("B")).     from("direct:c").delay(100).setBody(constant("C")). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").recipientList(header("slip")).aggregationStrategy(new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String body = oldExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).                     return oldExchange.                 }             }).parallelProcessing().timeout(500).to("mock:result").             from("direct:a").delay(1000).setBody(constant("A")).             from("direct:b").setBody(constant("B")).             from("direct:c").delay(100).setBody(constant("C")).         }     }. }
