commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testXsltOutputFile() throws Exception {     createDirectory("target/data/xslt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     mock.expectedFileExists("target/data/xslt/xsltme.xml").     mock.message(0).body().isInstanceOf(File.class).     template.sendBodyAndHeader("direct:start", "<hello>world!</hello>", Exchange.XSLT_FILE_NAME, "target/data/xslt/xsltme.xml").     mock.assertIsSatisfied(). }
false;public;0;10;;@Test public void testXsltOutputFileMissingHeader() throws Exception {     try {         template.sendBody("direct:start", "<hello>world!</hello>").         fail("Should thrown exception").     } catch (CamelExecutionException e) {         NoSuchHeaderException nshe = assertIsInstanceOf(NoSuchHeaderException.class, e.getCause()).         assertEquals(Exchange.XSLT_FILE_NAME, nshe.getHeaderName()).     } }
false;public;0;6;;public void configure() throws Exception {     URL styleSheet = getClass().getResource("example.xsl").     // output xslt as a file     from("direct:start").process(xslt(styleSheet).outputFile()).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() throws Exception {             URL styleSheet = getClass().getResource("example.xsl").             // output xslt as a file             from("direct:start").process(xslt(styleSheet).outputFile()).to("mock:result").         }     }. }
