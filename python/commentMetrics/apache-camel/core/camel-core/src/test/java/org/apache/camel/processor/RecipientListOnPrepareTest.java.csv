commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testRecipientListOnPrepare() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:a").message(0).body(String.class).isEqualTo("1 Tony the Tiger").     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:b").message(0).body(String.class).isEqualTo("1 Tiger").     template.sendBodyAndHeader("direct:start", new Animal(1, "Tiger"), "foo", "direct:a,direct:b").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").recipientList(header("foo")).onPrepare(new AnimalDeepClonePrepare()).     from("direct:a").process(new ProcessorA()).to("mock:a").     from("direct:b").process(new ProcessorB()).to("mock:b"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").recipientList(header("foo")).onPrepare(new AnimalDeepClonePrepare()).             from("direct:a").process(new ProcessorA()).to("mock:a").             from("direct:b").process(new ProcessorB()).to("mock:b").         }     }. }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()).     // adjust the name     body.setName("Tony the Tiger"). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()). }
