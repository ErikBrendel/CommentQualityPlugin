commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testOK() throws Exception {     counter = 0.     getMockEndpoint("mock:dead").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedBodiesReceived("Tiger", "Camel").     getMockEndpoint("mock:c").expectedBodiesReceived("Elephant", "Lion").     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:line").expectedBodiesReceived("Tiger", "Camel", "Elephant", "Lion").     MyBody body = new MyBody("Tiger,Camel", "Elephant,Lion").     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;public;0;22;;@Test public void testError() throws Exception {     counter = 0.     getMockEndpoint("mock:dead").expectedMessageCount(1).     getMockEndpoint("mock:dead").message(0).body().isInstanceOf(MyBody.class).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedBodiesReceived("Tiger", "Camel").     getMockEndpoint("mock:c").expectedBodiesReceived("Elephant", "Donkey").     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:line").expectedBodiesReceived("Tiger", "Camel", "Elephant").     MyBody body = new MyBody("Tiger,Camel", "Elephant,Donkey").     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // 1 first + 3 redeliveries     assertEquals(4, counter).     MyBody dead = getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getIn().getBody(MyBody.class).     assertSame("Should be original message in DLC", body, dead). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body.contains("Donkey")) {         counter++.         throw new IllegalArgumentException("Donkey not allowed").     } }
false;public;0;31;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0)).     from("direct:start").to("mock:a").split(simple("${body.foo}")).shareUnitOfWork().to("mock:b").to("direct:line").end().split(simple("${body.bar}")).shareUnitOfWork().to("mock:c").to("direct:line").end().to("mock:result").     from("direct:line").to("log:line").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if (body.contains("Donkey")) {                 counter++.                 throw new IllegalArgumentException("Donkey not allowed").             }         }     }).to("mock:line"). }
false;protected;0;36;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0)).             from("direct:start").to("mock:a").split(simple("${body.foo}")).shareUnitOfWork().to("mock:b").to("direct:line").end().split(simple("${body.bar}")).shareUnitOfWork().to("mock:c").to("direct:line").end().to("mock:result").             from("direct:line").to("log:line").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if (body.contains("Donkey")) {                         counter++.                         throw new IllegalArgumentException("Donkey not allowed").                     }                 }             }).to("mock:line").         }     }. }
false;public;0;3;;public String getFoo() {     return foo. }
false;public;0;3;;public String getBar() {     return bar. }
