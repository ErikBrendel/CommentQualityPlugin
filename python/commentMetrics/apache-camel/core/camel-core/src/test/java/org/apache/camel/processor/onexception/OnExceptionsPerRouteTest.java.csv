commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testOnExceptionsPerRouteDamn() throws Exception {     getMockEndpoint("mock:error").expectedBodiesReceived("Damn").     template.sendBody("direct:start", "Damn").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testOnExceptionsPerRouteConnect() throws Exception {     getMockEndpoint("mock:error").expectedBodiesReceived("Connect").     template.sendBody("direct:start", "Connect").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override @SuppressWarnings("unchecked") public void configure() throws Exception {     from("direct:start").onException(IllegalArgumentException.class, IOException.class).handled(true).to("mock:error").end().choice().when(body().contains("Damn")).throwException(new IllegalArgumentException("Damn")).when(body().contains("Connect")).throwException(new ConnectException("Cannot connect")).end(). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         @SuppressWarnings("unchecked")         public void configure() throws Exception {             from("direct:start").onException(IllegalArgumentException.class, IOException.class).handled(true).to("mock:error").end().choice().when(body().contains("Damn")).throwException(new IllegalArgumentException("Damn")).when(body().contains("Connect")).throwException(new ConnectException("Cannot connect")).end().         }     }. }
