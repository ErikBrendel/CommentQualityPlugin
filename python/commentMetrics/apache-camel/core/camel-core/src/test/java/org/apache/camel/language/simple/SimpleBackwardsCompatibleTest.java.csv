commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getLanguageName() {     return "simple". }
false;public;0;6;;@Test public void testSimpleBody() throws Exception {     assertExpression(exchange, "${body}", "<hello id='m123'>world!</hello>").     assertPredicate("${body}", true). }
false;public;0;9;;@Test public void testSimpleHeader() throws Exception {     exchange.getIn().setHeader("foo", 123).     assertExpression(exchange, "${header.foo}", 123).     assertPredicate("${header.foo}", true).     assertPredicate("${header.unknown}", false). }
false;public;0;11;;@Test public void testSimpleLogicalAnd() throws Exception {     exchange.getIn().setBody("Hello").     exchange.getIn().setHeader("high", true).     exchange.getIn().setHeader("foo", 123).     SimplePredicateParser parser = new SimplePredicateParser("${header.high} == true && ${header.foo} == 123", true, null).     Predicate pre = parser.parsePredicate().     assertTrue("Should match", pre.matches(exchange)). }
false;public;0;11;;@Test public void testSimpleLogicalOr() throws Exception {     exchange.getIn().setBody("Hello").     exchange.getIn().setHeader("high", true).     exchange.getIn().setHeader("foo", 123).     SimplePredicateParser parser = new SimplePredicateParser("${header.high} == false || ${header.foo} == 123", true, null).     Predicate pre = parser.parsePredicate().     assertTrue("Should match", pre.matches(exchange)). }
