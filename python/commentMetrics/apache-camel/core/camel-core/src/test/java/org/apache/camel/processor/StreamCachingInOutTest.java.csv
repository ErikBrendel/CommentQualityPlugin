commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testStreamCachingPerRoute() throws Exception {     MockEndpoint c = getMockEndpoint("mock:c").     c.expectedMessageCount(1).     InputStream message = getTestFileStream().     template.sendBody("direct:c", message).     assertMockEndpointsSatisfied().     assertEquals(c.assertExchangeReceived(0).getIn().getBody(String.class), "James,Guillaume,Hiram,Rob,Roman"). }
false;public;0;11;;@Test public void testStreamCachingPerRouteWithDirecVM() throws Exception {     MockEndpoint e = getMockEndpoint("mock:e").     e.expectedMessageCount(1).     InputStream message = getTestFileStream().     template.sendBody("direct:e", message).     assertMockEndpointsSatisfied().     assertEquals(e.assertExchangeReceived(0).getIn().getBody(String.class), "James,Guillaume,Hiram,Rob,Roman"). }
false;public;0;8;;@Override public void configure() throws Exception {     context.getStreamCachingStrategy().setSpoolThreshold(1).     from("direct:c").noStreamCaching().to("direct:d").convertBodyTo(String.class).to("mock:c").     from("direct:d").streamCaching().process(new TestProcessor()).     from("direct:e").noStreamCaching().to("direct-vm:f").convertBodyTo(String.class).to("mock:e").     from("direct-vm:f").streamCaching().process(new TestProcessor()). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getStreamCachingStrategy().setSpoolThreshold(1).             from("direct:c").noStreamCaching().to("direct:d").convertBodyTo(String.class).to("mock:c").             from("direct:d").streamCaching().process(new TestProcessor()).             from("direct:e").noStreamCaching().to("direct-vm:f").convertBodyTo(String.class).to("mock:e").             from("direct-vm:f").streamCaching().process(new TestProcessor()).         }     }. }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     InputStream is = exchange.getIn().getMandatoryBody(InputStream.class).     while (is.available() > 0) {         is.read().     }     is.close(). }
true;private;0;5;// InputStreams from a file ;// there is some special handling for ByteArrayInputStream so we read // InputStreams from a file private InputStream getTestFileStream() {     InputStream answer = getClass().getClassLoader().getResourceAsStream(TEST_FILE).     assertNotNull("Should have found the file: " + TEST_FILE + " on the classpath", answer).     return answer. }
