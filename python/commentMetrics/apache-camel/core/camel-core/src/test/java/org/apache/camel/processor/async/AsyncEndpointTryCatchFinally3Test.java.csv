commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:catch").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye Camel", reply).     assertMockEndpointsSatisfied().     Set<String> names = new HashSet<>().     names.add(beforeThreadName).     names.add(middleThreadName).     names.add(afterThreadName).     names.add(resultThreadName).     assertEquals("Should use 4 different threads", 4, names.size()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     resultThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     middleThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;41;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("mock:before").to("log:before").doTry().process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("async:bye:camel?failFirstAttempts=1").doCatch(Exception.class).to("log:catch").to("mock:catch").process(new Processor() {          public void process(Exchange exchange) throws Exception {             middleThreadName = Thread.currentThread().getName().         }     }).to("async:bye:world").doFinally().process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:after").to("async:bye:camel").end().process(new Processor() {          public void process(Exchange exchange) throws Exception {             resultThreadName = Thread.currentThread().getName().         }     }).to("log:result").to("mock:result"). }
false;protected;0;46;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("mock:before").to("log:before").doTry().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:camel?failFirstAttempts=1").doCatch(Exception.class).to("log:catch").to("mock:catch").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     middleThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:world").doFinally().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:after").to("async:bye:camel").end().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     resultThreadName = Thread.currentThread().getName().                 }             }).to("log:result").to("mock:result").         }     }. }
