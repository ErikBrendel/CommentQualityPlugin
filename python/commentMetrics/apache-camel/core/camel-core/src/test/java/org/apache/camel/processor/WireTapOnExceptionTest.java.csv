commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testWireTapOnException() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     MyProducerFailEndpoint my = new MyProducerFailEndpoint("myEndpoint://foo", getContext()).     context.addEndpoint("myEndpoint://foo", my).     onException(IllegalArgumentException.class).to("mock:error").     from("direct:start").wireTap("myEndpoint:foo").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             MyProducerFailEndpoint my = new MyProducerFailEndpoint("myEndpoint://foo", getContext()).             context.addEndpoint("myEndpoint://foo", my).             onException(IllegalArgumentException.class).to("mock:error").             from("direct:start").wireTap("myEndpoint:foo").to("mock:result").         }     }. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Forced"). }
false;public;0;9;;@Override public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          @Override         public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Forced").         }     }. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
