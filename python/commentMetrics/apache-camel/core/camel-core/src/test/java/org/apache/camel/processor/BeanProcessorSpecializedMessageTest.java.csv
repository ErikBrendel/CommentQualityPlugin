commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;public boolean matches(Exchange exchange) {     // this time we should have the specialized message     return exchange.getIn() instanceof MyMessage. }
false;public;1;4;;public boolean matches(Exchange exchange) {     // this time we should have lost the specialized message     return !(exchange.getIn() instanceof MyMessage). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     MyMessage my = new MyMessage(exchange.getContext()).     my.setBody("Hello World").     my.setHeader("foo", 123).     exchange.setIn(my). }
false;public;0;33;;@Test public void testBeanSpecializedMessage() throws Exception {     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("Hello World").     foo.expectedHeaderReceived("foo", 123).     foo.message(0).predicate(new Predicate() {          public boolean matches(Exchange exchange) {             // this time we should have the specialized message             return exchange.getIn() instanceof MyMessage.         }     }).     MockEndpoint result = getMockEndpoint("mock:result").     result.message(0).body().isNull().     result.expectedHeaderReceived("foo", 123).     result.message(0).predicate(new Predicate() {          public boolean matches(Exchange exchange) {             // this time we should have lost the specialized message             return !(exchange.getIn() instanceof MyMessage).         }     }).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             MyMessage my = new MyMessage(exchange.getContext()).             my.setBody("Hello World").             my.setHeader("foo", 123).             exchange.setIn(my).         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").bean(MyBean.class, "empty").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").bean(MyBean.class, "empty").to("mock:result").         }     }. }
false;public;0;4;;@Override public MyMessage newInstance() {     return new MyMessage(getCamelContext()). }
false;public,static;1;4;;public static String empty(String body) {     // set null as body     return null. }
