commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("{{p:message}}").to("mock:{{p:mockend}}"). }
false;public;0;20;;@Test public void testDisableDefaultValueResolution() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("{{p:message}}").to("mock:{{p:mockend}}").         }     }).     getMockEndpoint("mock:end").expectedMessageCount(1).     getMockEndpoint("mock:end").expectedBodiesReceived("my message").     context.start().     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;protected;0;15;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     Properties props = new Properties().     props.put("p:mockend", "end").     props.put("p:message", "my message").     PropertiesComponent component = new PropertiesComponent().     component.setDefaultFallbackEnabled(false).     component.setInitialProperties(props).     context.addComponent("properties", component).     return context. }
