commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testAsyncEndpointEventNotifier() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye Camel", reply).     assertMockEndpointsSatisfied().     assertTrue("Should count down", latch.await(10, TimeUnit.SECONDS)).     long delta = time.get().     log.info("ExchangeEventSent took ms: " + delta).     assertTrue("Should take about 250 millis sec, was: " + delta, delta > 200). }
false;public;1;8;;public void notify(CamelEvent event) throws Exception {     try {         ExchangeSentEvent sent = (ExchangeSentEvent) event.         time.set(sent.getTimeTaken()).     } finally {         latch.countDown().     } }
false;public;1;8;;public boolean isEnabled(CamelEvent event) {     // we only want the async endpoint     if (event instanceof ExchangeSentEvent) {         ExchangeSentEvent sent = (ExchangeSentEvent) event.         return sent.getEndpoint().getEndpointUri().startsWith("async").     }     return false. }
false;protected;0;24;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             try {                 ExchangeSentEvent sent = (ExchangeSentEvent) event.                 time.set(sent.getTimeTaken()).             } finally {                 latch.countDown().             }         }          public boolean isEnabled(CamelEvent event) {             // we only want the async endpoint             if (event instanceof ExchangeSentEvent) {                 ExchangeSentEvent sent = (ExchangeSentEvent) event.                 return sent.getEndpoint().getEndpointUri().startsWith("async").             }             return false.         }     }).     return context. }
false;public;0;9;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("mock:before").to("async:bye:camel?delay=250").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("mock:before").to("async:bye:camel?delay=250").to("mock:result").         }     }. }
