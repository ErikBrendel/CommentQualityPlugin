commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testNavigateRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     Navigate<Processor> nav = context.getRoutes().get(0).navigate().     navigateRoute(nav).     assertEquals("There should be 6 processors to navigate", 6, processors.size()). }
false;private;1;28;;@SuppressWarnings("unchecked") private void navigateRoute(Navigate<Processor> nav) {     if (!nav.hasNext()) {         return.     }     if (nav.getClass().getName().endsWith("ProcessorToReactiveProcessorBridge")) {         nav = (Navigate) ((Navigate) nav).next().get(0).     }     for (Processor child : nav.next()) {         processors.add(child).         if (child instanceof SendProcessor) {             SendProcessor send = (SendProcessor) child.             assertEquals("mock://result", send.getDestination().getEndpointUri()).         }         if (child instanceof ConvertBodyProcessor) {             ConvertBodyProcessor convert = (ConvertBodyProcessor) child.             assertEquals(String.class, convert.getType()).         }         // navigate children         if (child instanceof Navigate) {             navigateRoute((Navigate<Processor>) child).         }     } }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").convertBodyTo(String.class).split(body().tokenize(" ")).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").convertBodyTo(String.class).split(body().tokenize(" ")).to("mock:result").         }     }. }
