commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     // make SEDA testing faster     System.setProperty("CamelSedaPollTimeout", "10"). }
false;public;0;4;;@After public void tearDown() throws Exception {     System.clearProperty("CamelSedaPollTimeout"). }
false;public;0;7;;public void configure() {     // use logging error handler     errorHandler(deadLetterChannel("log:com.mycompany.foo")).     // here is our regular route     from("seda:a").to("seda:b"). }
false;public;0;29;;@Test public void testOverloadingTheDefaultErrorHandler() throws Exception {     // START SNIPPET: e1     RouteBuilder builder = new RouteBuilder() {          public void configure() {             // use logging error handler             errorHandler(deadLetterChannel("log:com.mycompany.foo")).             // here is our regular route             from("seda:a").to("seda:b").         }     }.     // END SNIPPET: e1     List<Route> list = getRouteList(builder).     assertEquals("Number routes created" + list, 1, list.size()).     for (Route route : list) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "seda://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumerRoute.getProcessor()).         assertIsInstanceOf(DeadLetterChannel.class, channel.getErrorHandler()).         Processor processor = unwrap(channel.getNextProcessor()).         assertIsInstanceOf(SendProcessor.class, processor).     } }
false;public;0;11;;public void configure() {     // this route is using a nested logging error handler     from("seda:a").errorHandler(deadLetterChannel("log:com.mycompany.foo")).to("seda:b").     // this route will use the default error handler (DeadLetterChannel)     from("seda:b").to("seda:c"). }
false;public;0;22;;@Test public void testOverloadingTheHandlerOnASingleRoute() throws Exception {     // START SNIPPET: e2     RouteBuilder builder = new RouteBuilder() {          public void configure() {             // this route is using a nested logging error handler             from("seda:a").errorHandler(deadLetterChannel("log:com.mycompany.foo")).to("seda:b").             // this route will use the default error handler (DeadLetterChannel)             from("seda:b").to("seda:c").         }     }.     // END SNIPPET: e2     List<Route> list = getRouteList(builder).     assertEquals("Number routes created" + list, 2, list.size()). }
false;public;0;7;;public void configure() {     // using dead letter channel with a seda queue for errors     errorHandler(deadLetterChannel("seda:errors")).     // here is our route     from("seda:a").to("seda:b"). }
false;public;0;26;;@Test public void testConfigureDeadLetterChannel() throws Exception {     // START SNIPPET: e3     RouteBuilder builder = new RouteBuilder() {          public void configure() {             // using dead letter channel with a seda queue for errors             errorHandler(deadLetterChannel("seda:errors")).             // here is our route             from("seda:a").to("seda:b").         }     }.     // END SNIPPET: e3     List<Route> list = getRouteList(builder).     assertEquals("Number routes created" + list, 1, list.size()).     for (Route route : list) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "seda://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumerRoute.getProcessor()).         assertIsInstanceOf(SendProcessor.class, channel.getNextProcessor()).     } }
false;public;0;8;;public void configure() {     // configures dead letter channel to use seda queue for errors and use at most 2 redelveries     // and exponential backoff     errorHandler(deadLetterChannel("seda:errors").maximumRedeliveries(2).useExponentialBackOff()).     // here is our route     from("seda:a").to("seda:b"). }
false;public;0;32;;@Test public void testConfigureDeadLetterChannelWithCustomRedeliveryPolicy() throws Exception {     // START SNIPPET: e4     RouteBuilder builder = new RouteBuilder() {          public void configure() {             // configures dead letter channel to use seda queue for errors and use at most 2 redelveries             // and exponential backoff             errorHandler(deadLetterChannel("seda:errors").maximumRedeliveries(2).useExponentialBackOff()).             // here is our route             from("seda:a").to("seda:b").         }     }.     // END SNIPPET: e4     List<Route> list = getRouteList(builder).     assertEquals("Number routes created" + list, 1, list.size()).     for (Route route : list) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "seda://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Processor processor = consumerRoute.getProcessor().         Channel channel = unwrapChannel(processor).         DeadLetterChannel deadLetterChannel = assertIsInstanceOf(DeadLetterChannel.class, channel.getErrorHandler()).         RedeliveryPolicy redeliveryPolicy = deadLetterChannel.getRedeliveryPolicy().         assertEquals("getMaximumRedeliveries()", 2, redeliveryPolicy.getMaximumRedeliveries()).         assertEquals("isUseExponentialBackOff()", true, redeliveryPolicy.isUseExponentialBackOff()).     } }
false;public;0;3;;public void configure() {     from("seda:a").errorHandler(deadLetterChannel("log:FOO.BAR")).filter(body().isInstanceOf(String.class)).to("seda:b"). }
false;public;0;23;;@Test public void testLoggingErrorHandler() throws Exception {     // START SNIPPET: e5     RouteBuilder builder = new RouteBuilder() {          public void configure() {             from("seda:a").errorHandler(deadLetterChannel("log:FOO.BAR")).filter(body().isInstanceOf(String.class)).to("seda:b").         }     }.     // END SNIPPET: e5     List<Route> routes = getRouteList(builder).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "seda://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumerRoute.getProcessor()).         assertIsInstanceOf(DeadLetterChannel.class, channel.getErrorHandler()).         assertIsInstanceOf(FilterProcessor.class, channel.getNextProcessor()).     } }
