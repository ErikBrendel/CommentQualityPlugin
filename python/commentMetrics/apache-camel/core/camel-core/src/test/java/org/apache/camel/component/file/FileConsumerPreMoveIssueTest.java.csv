commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/premove").     super.setUp(). }
false;public;0;9;;@Test public void testPreMove() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/premove", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/premove?preMove=before/${file:name.noext}-moved.${file:ext}&initialDelay=0&delay=10").process(new MyPreMoveCheckerProcessor()).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/premove?preMove=before/${file:name.noext}-moved.${file:ext}&initialDelay=0&delay=10").process(new MyPreMoveCheckerProcessor()).to("mock:result").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     File pre = new File("target/data/premove/before/hello-moved.txt").     assertTrue("Pre move file should exist", pre.exists()). }
