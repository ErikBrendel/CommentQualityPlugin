commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSimpleExpressions() throws Exception {     assertExpression("foo.echo('e::o')", "e::o").     assertExpression("foo.echo('e.o')", "e.o").     assertExpression("my.company.MyClass::echo('a')", "a").     assertExpression("my.company.MyClass::echo('a.b')", "a.b").     assertExpression("my.company.MyClass::echo('a::b')", "a::b").     assertExpression("foo.cheese", "abc").     assertExpression("foo?method=cheese", "abc").     assertExpression("my.company.MyClass::cheese", "abc").     assertExpression("foo?method=echo('e::o')", "e::o"). }
false;public;0;6;;@Test public void testPredicates() throws Exception {     assertPredicate("foo.isFooHeaderAbc").     assertPredicate("foo?method=isFooHeaderAbc").     assertPredicate("my.company.MyClass::isFooHeaderAbc"). }
false;public;0;5;;@Test public void testDoubleColon() throws Exception {     assertPredicate("foo::isFooHeaderAbc").     assertPredicateFails("foo:isFooHeaderAbc"). }
false;public;0;8;;@Test public void testBeanTypeExpression() throws Exception {     Expression exp = BeanLanguage.bean(MyUser.class, null).     Exchange exchange = createExchangeWithBody("Claus").     Object result = exp.evaluate(exchange, Object.class).     assertEquals("Hello Claus", result). }
false;public;0;8;;@Test public void testBeanTypeAndMethodExpression() throws Exception {     Expression exp = BeanLanguage.bean(MyUser.class, "hello").     Exchange exchange = createExchangeWithBody("Claus").     Object result = exp.evaluate(exchange, Object.class).     assertEquals("Hello Claus", result). }
false;public;0;9;;@Test public void testBeanInstanceAndMethodExpression() throws Exception {     MyUser user = new MyUser().     Expression exp = BeanLanguage.bean(user, "hello").     Exchange exchange = createExchangeWithBody("Claus").     Object result = exp.evaluate(exchange, Object.class).     assertEquals("Hello Claus", result). }
false;public;0;13;;@Test public void testNoMethod() throws Exception {     MyUser user = new MyUser().     Expression exp = BeanLanguage.bean(user, "unknown").     Exchange exchange = createExchangeWithBody("Claus").     Object result = exp.evaluate(exchange, Object.class).     assertNull(result).     assertNotNull(exchange.getException()).     MethodNotFoundException e = assertIsInstanceOf(MethodNotFoundException.class, exchange.getException()).     assertSame(user, e.getBean()).     assertEquals("unknown", e.getMethodName()). }
false;public;0;12;;@Test public void testNoMethodBeanLookup() throws Exception {     Expression exp = BeanLanguage.bean("foo.cake").     Exchange exchange = createExchangeWithBody("Claus").     Object result = exp.evaluate(exchange, Object.class).     assertNull(result).     assertNotNull(exchange.getException()).     MethodNotFoundException e = assertIsInstanceOf(MethodNotFoundException.class, exchange.getException()).     assertSame(context.getRegistry().lookupByName("foo"), e.getBean()).     assertEquals("cake", e.getMethodName()). }
false;protected;0;3;;protected String getLanguageName() {     return "bean". }
false;protected;0;7;;@Override protected Context createJndiContext() throws Exception {     Context context = super.createJndiContext().     context.bind("foo", new MyBean()).     context.bind("my.company.MyClass", new MyBean()).     return context. }
false;public;1;4;;public Object cheese(Exchange exchange) {     Message in = exchange.getIn().     return in.getHeader("foo"). }
false;public;1;3;;public String echo(String echo) {     return echo. }
false;public;1;3;;public boolean isFooHeaderAbc(@Header("foo") String foo) {     return "abc".equals(foo). }
false;public;1;3;;public String hello(String name) {     return "Hello " + name. }
