commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testHandledException() throws Exception {     MockEndpoint result = getMockEndpoint(RESULT_QUEUE).     result.expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint(ERROR_QUEUE).     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(MESSAGE_INFO, "Handled exchange with NullPointerException").     template.sendBody("direct:a", "Hello NPE").     MockEndpoint.assertIsSatisfied(result, mock). }
false;public;0;11;;@Test public void testHandledExceptionWithExpression() throws Exception {     MockEndpoint result = getMockEndpoint(RESULT_QUEUE).     result.expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint(ERROR_QUEUE).     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(MESSAGE_INFO, "Handled exchange with IOException").     template.sendBodyAndHeader("direct:a", "Hello IOE", "foo", "bar").     MockEndpoint.assertIsSatisfied(result, mock). }
false;public;0;18;;@Test public void testUnhandledException() throws Exception {     MockEndpoint result = getMockEndpoint(RESULT_QUEUE).     result.expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint(ERROR_QUEUE).     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(MESSAGE_INFO, "Handled exchange with IOException").     try {         template.sendBodyAndHeader("direct:a", "Hello IOE", "foo", "something that does not match").         fail("Should have thrown a IOException").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof IOException).     // expected, failure is not handled because predicate doesn't match     }     MockEndpoint.assertIsSatisfied(result, mock). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     String s = exchange.getIn().getBody(String.class).     if ("Hello NPE".equals(s)) {         throw new NullPointerException().     } else if ("Hello IOE".equals(s)) {         // specialized IOException         throw new ConnectException("Forced for testing - cannot connect to remote server").     }     exchange.getOut().setBody("Hello World"). }
false;public;0;30;;public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     // START SNIPPET: exceptionBuilder1     onException(NullPointerException.class).maximumRedeliveries(0).handled(true).setHeader(MESSAGE_INFO, constant("Handled exchange with NullPointerException")).to(ERROR_QUEUE).     onException(IOException.class).maximumRedeliveries(0).handled(header("foo").isEqualTo("bar")).setHeader(MESSAGE_INFO, constant("Handled exchange with IOException")).to(ERROR_QUEUE).     // END SNIPPET: exceptionBuilder1     from("direct:a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String s = exchange.getIn().getBody(String.class).             if ("Hello NPE".equals(s)) {                 throw new NullPointerException().             } else if ("Hello IOE".equals(s)) {                 // specialized IOException                 throw new ConnectException("Forced for testing - cannot connect to remote server").             }             exchange.getOut().setBody("Hello World").         }     }).to("mock:result"). }
false;protected;0;34;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             // START SNIPPET: exceptionBuilder1             onException(NullPointerException.class).maximumRedeliveries(0).handled(true).setHeader(MESSAGE_INFO, constant("Handled exchange with NullPointerException")).to(ERROR_QUEUE).             onException(IOException.class).maximumRedeliveries(0).handled(header("foo").isEqualTo("bar")).setHeader(MESSAGE_INFO, constant("Handled exchange with IOException")).to(ERROR_QUEUE).             // END SNIPPET: exceptionBuilder1             from("direct:a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String s = exchange.getIn().getBody(String.class).                     if ("Hello NPE".equals(s)) {                         throw new NullPointerException().                     } else if ("Hello IOE".equals(s)) {                         // specialized IOException                         throw new ConnectException("Forced for testing - cannot connect to remote server").                     }                     exchange.getOut().setBody("Hello World").                 }             }).to("mock:result").         }     }. }
