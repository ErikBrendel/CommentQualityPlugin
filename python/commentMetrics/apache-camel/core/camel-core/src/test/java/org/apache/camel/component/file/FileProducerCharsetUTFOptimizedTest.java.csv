commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Override @Before public void setUp() throws Exception {     // use utf-8 as original payload with 00e6 which is a danish ae letter     utf = "ABC\u00e6".getBytes("utf-8").     deleteDirectory("target/data/charset").     createDirectory("target/data/charset/input").     log.debug("utf: {}", new String(utf, Charset.forName("utf-8"))).     for (byte b : utf) {         log.debug("utf byte: {}", b).     }     // write the byte array to a file using plain API     OutputStream fos = Files.newOutputStream(Paths.get("target/data/charset/input/input.txt")).     fos.write(utf).     fos.close().     super.setUp(). }
false;public;0;24;;@Test public void testFileProducerCharsetUTFOptimized() throws Exception {     oneExchangeDone.matchesMockWaitTime().     File file = new File("target/data/charset/output.txt").     assertTrue("File should exist", file.exists()).     InputStream fis = Files.newInputStream(Paths.get(file.getAbsolutePath())).     byte[] buffer = new byte[100].     int len = fis.read(buffer).     assertTrue("Should read data: " + len, len != -1).     byte[] data = new byte[len].     System.arraycopy(buffer, 0, data, 0, len).     fis.close().     // data should be in utf, where the danish ae is -61 -90     assertEquals(5, data.length).     assertEquals(65, data[0]).     assertEquals(66, data[1]).     assertEquals(67, data[2]).     assertEquals(-61, data[3]).     assertEquals(-90, data[4]). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:target/data/charset/input?initialDelay=0&delay=10&noop=true").to("file:target/data/charset/?fileName=output.txt"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/charset/input?initialDelay=0&delay=10&noop=true").to("file:target/data/charset/?fileName=output.txt").         }     }. }
