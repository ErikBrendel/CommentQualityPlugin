commented;modifiers;parameterAmount;loc;comment;code
false;public;2;3;;public boolean begin(Consumer consumer, Endpoint endpoint) {     return true. }
false;public;3;2;;public void commit(Consumer consumer, Endpoint endpoint, int polledMessages) { }
false;public;4;6;;public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {     if (e == expectedException) {         rollback = true.     }     return false. }
false;public;0;41;;@Test public void testExceptionOnPollAndCanStartAgain() throws Exception {     final Exception expectedException = new Exception("Hello, I should be thrown on shutdown only!").     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(new PollingConsumerPollStrategy() {          public boolean begin(Consumer consumer, Endpoint endpoint) {             return true.         }          public void commit(Consumer consumer, Endpoint endpoint, int polledMessages) {         }          public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {             if (e == expectedException) {                 rollback = true.             }             return false.         }     }).     consumer.start().     // poll that throws an exception     consumer.run().     consumer.stop().     assertEquals("Should have rollback", true, rollback).     // prepare for 2nd run but this time it should not thrown an exception on poll     rollback = false.     consumer.setExceptionToThrowOnPoll(null).     // start it again and we should be able to run     consumer.start().     consumer.run().     // should be able to stop with no problem     consumer.stop().     assertEquals("Should not have rollback", false, rollback). }
false;public;2;3;;public boolean begin(Consumer consumer, Endpoint endpoint) {     return true. }
false;public;3;3;;public void commit(Consumer consumer, Endpoint endpoint, int polledMessages) {     event += "commit". }
false;public;4;8;;public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {     event += "rollback".     counter++.     if (retryCounter < 3) {         return true.     }     return false. }
false;public;0;39;;@Test public void testRetryAtMostThreeTimes() throws Exception {     counter = 0.     event = "".     final Exception expectedException = new Exception("Hello, I should be thrown on shutdown only!").     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(new PollingConsumerPollStrategy() {          public boolean begin(Consumer consumer, Endpoint endpoint) {             return true.         }          public void commit(Consumer consumer, Endpoint endpoint, int polledMessages) {             event += "commit".         }          public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception e) throws Exception {             event += "rollback".             counter++.             if (retryCounter < 3) {                 return true.             }             return false.         }     }).     consumer.setUseFixedDelay(true).     consumer.setDelay(60000).     consumer.start().     // poll that throws an exception     consumer.run().     consumer.stop().     // 3 retries + 1 last failed attempt when we give up     assertEquals(4, counter).     assertEquals("rollbackrollbackrollbackrollback", event). }
false;public;0;8;;@Test public void testNoExceptionOnPoll() throws Exception {     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, null).     consumer.start().     consumer.run().     consumer.stop(). }
