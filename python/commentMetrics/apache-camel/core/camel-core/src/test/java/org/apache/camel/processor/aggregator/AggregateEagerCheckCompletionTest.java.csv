commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionPredicate(body().isEqualTo("END")).eagerCheckCompletion().to("mock:result"). }
false;public;0;21;;@Test public void testAggregateEagerCheckCompletion() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionPredicate(body().isEqualTo("END")).eagerCheckCompletion().to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("A+B+END").     template.sendBodyAndHeader("direct:start", "A", "id", 1).     template.sendBodyAndHeader("direct:start", "B", "id", 1).     template.sendBodyAndHeader("direct:start", "END", "id", 1).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionPredicate(body().isEqualTo("A+B+END")).to("mock:result"). }
false;public;0;21;;@Test public void testAggregateNotEagerCheckCompletion() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionPredicate(body().isEqualTo("A+B+END")).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("A+B+END").     template.sendBodyAndHeader("direct:start", "A", "id", 1).     template.sendBodyAndHeader("direct:start", "B", "id", 1).     template.sendBodyAndHeader("direct:start", "END", "id", 1).     assertMockEndpointsSatisfied(). }
