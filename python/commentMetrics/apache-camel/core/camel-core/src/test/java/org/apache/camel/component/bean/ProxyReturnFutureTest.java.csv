commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;// START SNIPPET: e2 ;// START SNIPPET: e2 @Test public void testFutureEcho() throws Exception {     Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class).     Future<String> future = service.asText(4).     log.info("Got future").     log.info("Waiting for future to be done ...").     String reply = future.get(5, TimeUnit.SECONDS).     assertEquals("Four", reply). }
false;public;0;16;;// END SNIPPET: e2 @Test public void testFutureEchoCallTwoTimes() throws Exception {     Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class).     Future<String> future = service.asText(4).     log.info("Got future").     log.info("Waiting for future to be done ...").     assertEquals("Four", future.get(5, TimeUnit.SECONDS)).     future = service.asText(5).     log.info("Got future").     log.info("Waiting for future to be done ...").     assertEquals("Four", future.get(5, TimeUnit.SECONDS)). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:echo").delay(250).transform().constant("Four"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:echo").delay(250).transform().constant("Four").         }     }. }
true;;1;1;// returning a Future indicate asynchronous invocation ;// returning a Future indicate asynchronous invocation Future<String> asText(int number).
