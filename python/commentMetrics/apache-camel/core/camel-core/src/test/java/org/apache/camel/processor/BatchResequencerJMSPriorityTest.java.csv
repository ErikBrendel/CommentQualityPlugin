commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBatchResequencerJMSPriority() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("G", "A", "B", "E", "H", "C", "D", "F").     template.sendBodyAndHeader("direct:start", "A", "JMSPriority", 6).     template.sendBodyAndHeader("direct:start", "B", "JMSPriority", 6).     template.sendBodyAndHeader("direct:start", "C", "JMSPriority", 4).     template.sendBodyAndHeader("direct:start", "D", "JMSPriority", 4).     template.sendBodyAndHeader("direct:start", "E", "JMSPriority", 6).     template.sendBodyAndHeader("direct:start", "F", "JMSPriority", 4).     template.sendBodyAndHeader("direct:start", "G", "JMSPriority", 8).     template.sendBodyAndHeader("direct:start", "H", "JMSPriority", 6).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").resequence(header("JMSPriority")).allowDuplicates().reverse().to("mock:result"). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").resequence(header("JMSPriority")).allowDuplicates().reverse().to("mock:result").         // END SNIPPET: e1         }     }. }
