commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result"). }
false;public;0;23;;@Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("mock:result").         }     }).     context.start().     resultEndpoint.expectedBodiesReceived("one", "two", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     IdempotentRepository repo = MemoryIdempotentRepository.memoryIdempotentRepository(200).     from("direct:start").idempotentConsumer(header("messageId")).messageIdRepository(repo).skipDuplicate(false).to("mock:result"). }
false;public;0;31;;@Test public void testNotSkiDuplicate() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             IdempotentRepository repo = MemoryIdempotentRepository.memoryIdempotentRepository(200).             from("direct:start").idempotentConsumer(header("messageId")).messageIdRepository(repo).skipDuplicate(false).to("mock:result").         }     }).     context.start().     resultEndpoint.expectedBodiesReceived("one", "two", "one", "two", "one", "three").     resultEndpoint.message(0).exchangeProperty(Exchange.DUPLICATE_MESSAGE).isNull().     resultEndpoint.message(1).exchangeProperty(Exchange.DUPLICATE_MESSAGE).isNull().     resultEndpoint.message(2).exchangeProperty(Exchange.DUPLICATE_MESSAGE).isEqualTo(Boolean.TRUE).     resultEndpoint.message(3).exchangeProperty(Exchange.DUPLICATE_MESSAGE).isEqualTo(Boolean.TRUE).     resultEndpoint.message(4).exchangeProperty(Exchange.DUPLICATE_MESSAGE).isEqualTo(Boolean.TRUE).     resultEndpoint.message(5).exchangeProperty(Exchange.DUPLICATE_MESSAGE).isNull().     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     IdempotentRepository repo = MemoryIdempotentRepository.memoryIdempotentRepository(200).     // START SNIPPET: e1     from("direct:start").idempotentConsumer(header("messageId")).messageIdRepository(repo).skipDuplicate(false).filter(exchangeProperty(Exchange.DUPLICATE_MESSAGE).isEqualTo(true)).to("mock:duplicate").stop().end().to("mock:result"). // END SNIPPET: e1 }
false;public;0;37;;@Test public void testNotSkiDuplicateWithFilter() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             IdempotentRepository repo = MemoryIdempotentRepository.memoryIdempotentRepository(200).             // START SNIPPET: e1             from("direct:start").idempotentConsumer(header("messageId")).messageIdRepository(repo).skipDuplicate(false).filter(exchangeProperty(Exchange.DUPLICATE_MESSAGE).isEqualTo(true)).to("mock:duplicate").stop().end().to("mock:result").         // END SNIPPET: e1         }     }).     context.start().     resultEndpoint.expectedBodiesReceived("one", "two", "three").     getMockEndpoint("mock:duplicate").expectedBodiesReceived("one", "two", "one").     getMockEndpoint("mock:duplicate").allMessages().exchangeProperty(Exchange.DUPLICATE_MESSAGE).isEqualTo(Boolean.TRUE).     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damm I cannot handle id 2").     } }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damm I cannot handle id 2").             }         }     }).to("mock:result"). }
false;public;0;34;;@Test public void testFailedExchangesNotAddedDeadLetterChannel() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damm I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }).     context.start().     // we send in 2 messages with id 2 that fails     getMockEndpoint("mock:error").expectedMessageCount(2).     resultEndpoint.expectedBodiesReceived("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damm I cannot handle id 2").     } }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damm I cannot handle id 2").             }         }     }).to("mock:result"). }
false;public;0;34;;@Test public void testFailedExchangesNotAddedDeadLetterChannelNotHandled() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damm I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }).     context.start().     // we send in 2 messages with id 2 that fails     getMockEndpoint("mock:error").expectedMessageCount(2).     resultEndpoint.expectedBodiesReceived("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damm I cannot handle id 2").     } }
false;public;0;16;;@Override public void configure() throws Exception {     // use default error handler     errorHandler(defaultErrorHandler()).     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damm I cannot handle id 2").             }         }     }).to("mock:result"). }
false;public;0;33;;@Test public void testFailedExchangesNotAdded() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // use default error handler             errorHandler(defaultErrorHandler()).             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damm I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }).     context.start().     resultEndpoint.expectedBodiesReceived("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
