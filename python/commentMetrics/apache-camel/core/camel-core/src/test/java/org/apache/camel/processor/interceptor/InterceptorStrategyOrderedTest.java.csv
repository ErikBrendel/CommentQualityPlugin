commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testInterceptorStrategyOrdered() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedHeaderReceived("order", "12").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     // interceptors should be invoked according to how they are ordered     context.addInterceptStrategy(new BarInterceptStrategy()).     context.addInterceptStrategy(new FooInterceptStrategy()).     from("direct:start").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // interceptors should be invoked according to how they are ordered             context.addInterceptStrategy(new BarInterceptStrategy()).             context.addInterceptStrategy(new FooInterceptStrategy()).             from("direct:start").to("mock:result").         }     }. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String order = exchange.getIn().getHeader("order", "", String.class).     order = order + getOrder().     exchange.getIn().setHeader("order", order).     target.process(exchange). }
false;public;4;12;;public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, final Processor target, Processor nextTarget) throws Exception {     Processor answer = new Processor() {          public void process(Exchange exchange) throws Exception {             String order = exchange.getIn().getHeader("order", "", String.class).             order = order + getOrder().             exchange.getIn().setHeader("order", order).             target.process(exchange).         }     }.     return answer. }
false;public;0;3;;public int getOrder() {     return 1. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String order = exchange.getIn().getHeader("order", "", String.class).     order = order + getOrder().     exchange.getIn().setHeader("order", order).     target.process(exchange). }
false;public;4;12;;public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, final Processor target, Processor nextTarget) throws Exception {     Processor answer = new Processor() {          public void process(Exchange exchange) throws Exception {             String order = exchange.getIn().getHeader("order", "", String.class).             order = order + getOrder().             exchange.getIn().setHeader("order", order).             target.process(exchange).         }     }.     return answer. }
false;public;0;3;;public int getOrder() {     return 2. }
