commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testAggregateDiscardOnTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     // wait 0.25 seconds     Thread.sleep(250).     mock.assertIsSatisfied().     // now send 3 which does not timeout     mock.reset().     mock.expectedBodiesReceived("C+D+E").     template.sendBodyAndHeader("direct:start", "C", "id", 456).     template.sendBodyAndHeader("direct:start", "D", "id", 456).     template.sendBodyAndHeader("direct:start", "E", "id", 456).     // should complete before timeout     assertTrue(mock.await(1000, TimeUnit.MILLISECONDS)). }
false;public;0;15;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(3).completionTimeout(200).completionTimeoutCheckerInterval(10).discardOnCompletionTimeout().to("mock:aggregated"). // END SNIPPET: e1 }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(3).completionTimeout(200).completionTimeoutCheckerInterval(10).discardOnCompletionTimeout().to("mock:aggregated").         // END SNIPPET: e1         }     }. }
