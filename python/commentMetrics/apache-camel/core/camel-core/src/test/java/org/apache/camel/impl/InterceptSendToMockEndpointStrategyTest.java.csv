commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").to("log:foo").to("mock:result").     from("direct:foo").transform(constant("Bye World")). }
false;public;0;32;;@Test public void testAdvisedMockEndpoints() throws Exception {     context.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").to("log:foo").to("mock:result").             from("direct:foo").transform(constant("Bye World")).         }     }).     context.start().     getMockEndpoint("mock:direct:start").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:direct:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:log:foo").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // additional test to ensure correct endpoints in registry     assertNotNull(context.hasEndpoint("direct:start")).     assertNotNull(context.hasEndpoint("direct:foo")).     assertNotNull(context.hasEndpoint("log:foo")).     assertNotNull(context.hasEndpoint("mock:result")).     // all the endpoints was mocked     assertNotNull(context.hasEndpoint("mock:direct:start")).     assertNotNull(context.hasEndpoint("mock:direct:foo")).     assertNotNull(context.hasEndpoint("mock:log:foo")). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").to("log:foo").to("mock:result").     from("direct:foo").transform(constant("Bye World")). }
false;public;0;32;;@Test public void testAdvisedMockEndpointsWithPattern() throws Exception {     context.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy("log*")).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").to("log:foo").to("mock:result").             from("direct:foo").transform(constant("Bye World")).         }     }).     context.start().     // now we can refer to log:foo as a mock and set our expectations     getMockEndpoint("mock:log:foo").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // additional test to ensure correct endpoints in registry     assertNotNull(context.hasEndpoint("direct:start")).     assertNotNull(context.hasEndpoint("direct:foo")).     assertNotNull(context.hasEndpoint("log:foo")).     assertNotNull(context.hasEndpoint("mock:result")).     // only the log:foo endpoint was mocked     assertNotNull(context.hasEndpoint("mock:log:foo")).     assertNull(context.hasEndpoint("mock:direct:start")).     assertNull(context.hasEndpoint("mock:direct:foo")). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
