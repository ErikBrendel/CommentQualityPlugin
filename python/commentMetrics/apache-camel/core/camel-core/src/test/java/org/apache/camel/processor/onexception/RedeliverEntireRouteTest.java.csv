commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testRedeliverEntireRoute() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedMessageCount(3 + 1).     try {         template.sendBody("direct:start", "Hello World").         fail("Should fail").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).maximumRedeliveries(3).redeliveryDelay(0).     from("direct:start").to("mock:a").to("direct:foo").to("mock:result").     // this route has no error handler, so any exception will not be redelivered     from("direct:foo").errorHandler(noErrorHandler()).log("Calling foo route redelivery count: ${header.CamelRedeliveryCounter}").to("mock:b").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).maximumRedeliveries(3).redeliveryDelay(0).             from("direct:start").to("mock:a").to("direct:foo").to("mock:result").             // this route has no error handler, so any exception will not be redelivered             from("direct:foo").errorHandler(noErrorHandler()).log("Calling foo route redelivery count: ${header.CamelRedeliveryCounter}").to("mock:b").throwException(new IllegalArgumentException("Forced")).         }     }. }
