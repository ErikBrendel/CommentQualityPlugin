commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void done(final boolean doneSync) {     LOGGER.info("I'm done").     doneCount++.     callback.done(doneSync). }
false;public;2;11;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     LOGGER.info("I'm doing someting").     return super.process(exchange, new AsyncCallback() {          public void done(final boolean doneSync) {             LOGGER.info("I'm done").             doneCount++.             callback.done(doneSync).         }     }). }
false;public;4;22;;public Processor wrapProcessorInInterceptors(final CamelContext context, final NamedNode definition, final Processor target, final Processor nextTarget) throws Exception {     if (definition instanceof SplitDefinition) {         final DelegateAsyncProcessor delegateAsyncProcessor = new DelegateAsyncProcessor() {              @Override             public boolean process(final Exchange exchange, final AsyncCallback callback) {                 LOGGER.info("I'm doing someting").                 return super.process(exchange, new AsyncCallback() {                      public void done(final boolean doneSync) {                         LOGGER.info("I'm done").                         doneCount++.                         callback.done(doneSync).                     }                 }).             }         }.         delegateAsyncProcessor.setProcessor(target).         return delegateAsyncProcessor.     }     return new DelegateAsyncProcessor(target). }
false;public;0;3;;public void reset() {     doneCount = 0. }
false;public;0;12;;@Test public void testSplitOne() throws Exception {     interceptStrategy.reset().     getMockEndpoint("mock:line").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Done method shall be called only once", 1, MyInterceptStrategy.doneCount). }
false;public;0;12;;@Test public void testSplitTwo() throws Exception {     interceptStrategy.reset().     getMockEndpoint("mock:line").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World,Bye World").     assertMockEndpointsSatisfied().     assertEquals("Done method shall be called only once", 1, MyInterceptStrategy.doneCount). }
false;public;0;11;;@Override public void configure() {     context.addInterceptStrategy(interceptStrategy).     from("direct:start").split(body().tokenize(",")).to("log:line").to("mock:line").end().to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() {             context.addInterceptStrategy(interceptStrategy).             from("direct:start").split(body().tokenize(",")).to("log:line").to("mock:line").end().to("mock:result").         }     }. }
