commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testWireTapShutdown() throws Exception {     final MyTapBean tapBean = (MyTapBean) context.getRegistry().lookupByName("tap").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     EXCHANGER.exchange(null).     // shutdown Camel which should let the inlfight wire-tap message route to completion     context.stop().     // should allow to shutdown nicely     await().atMost(10, TimeUnit.SECONDS).untilAsserted(() -> {         assertEquals("Hello World", tapBean.getTapped()).     }). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("tap", new MyTapBean()).     return jndi. }
false;public;0;8;;public void configure() {     from("direct:start").routeId("foo").wireTap("direct:tap").to("mock:result").     from("direct:tap").routeId("bar").to("bean:tap"). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").routeId("foo").wireTap("direct:tap").to("mock:result").             from("direct:tap").routeId("bar").to("bean:tap").         }     }. }
false;public;1;10;;public void tapSomething(String body) throws Exception {     try {         EXCHANGER.exchange(null).         Thread.sleep(100).     } catch (Exception e) {         fail("Should not be interrupted").     }     LOG.info("Wire tapping: {}", body).     tapped = body. }
false;public;0;3;;public String getTapped() {     return tapped. }
