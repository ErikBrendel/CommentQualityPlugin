commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myHandler", new MyExceptionHandler()).     return jndi. }
false;public;0;12;;@Test public void testDeadLetterChannelAlwaysHandled() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied().     assertTrue("Should have been called", LATCH.await(5, TimeUnit.SECONDS)). }
false;public;0;12;;@Override public void configure() throws Exception {     from("seda:foo?synchronous=true&consumer.exceptionHandler=#myHandler").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").onException(IllegalArgumentException.class).maximumRedeliveries(3).redeliveryDelay(0).end().to("mock:bar").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo?synchronous=true&consumer.exceptionHandler=#myHandler").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").onException(IllegalArgumentException.class).maximumRedeliveries(3).redeliveryDelay(0).end().to("mock:bar").throwException(new IllegalArgumentException("Forced")).         }     }. }
false;public;1;4;;@Override public void handleException(Throwable exception) {     LATCH.countDown(). }
false;public;2;4;;@Override public void handleException(String message, Throwable exception) {     LATCH.countDown(). }
false;public;3;4;;@Override public void handleException(String message, Exchange exchange, Throwable exception) {     LATCH.countDown(). }
