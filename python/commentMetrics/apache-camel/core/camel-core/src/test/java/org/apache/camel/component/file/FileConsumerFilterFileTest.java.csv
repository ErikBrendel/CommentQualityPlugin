commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filefilter").     super.setUp(). }
false;public;0;10;;@Test public void testFilterFiles() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     template.sendBodyAndHeader("file:target/data/filefilter/", "This is a file to be filtered", Exchange.FILE_NAME, "skipme.txt").     mock.setResultWaitTime(100).     mock.assertIsSatisfied(). }
false;public;0;11;;@Test public void testFilterFilesWithARegularFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file:target/data/filefilter/", "This is a file to be filtered", Exchange.FILE_NAME, "skipme2.txt").     template.sendBodyAndHeader("file:target/data/filefilter/", "Hello World", Exchange.FILE_NAME, "hello.txt").     mock.assertIsSatisfied(). }
false;public;0;9;;@Test public void testFilterFilesWithDate() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result2").     mock.expectedBodiesReceived("Something else").     template.sendBodyAndHeader("file:target/data/filefilter/", "Something else", Exchange.FILE_NAME, "hello2.txt").     mock.assertIsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result").     from(fileUrl2).convertBodyTo(String.class).to("mock:result2"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").             from(fileUrl2).convertBodyTo(String.class).to("mock:result2").         }     }. }
