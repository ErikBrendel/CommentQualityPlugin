commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDeadLetterChannelOnPrepare() throws Exception {     getMockEndpoint("mock:dead").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:dead").expectedHeaderReceived("FailedBecause", "Forced").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").onPrepareFailure(new MyPrepareProcessor())).     from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").onPrepareFailure(new MyPrepareProcessor())).             from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")).         }     }. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     Exception cause = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     exchange.getIn().setHeader("FailedBecause", cause.getMessage()). }
