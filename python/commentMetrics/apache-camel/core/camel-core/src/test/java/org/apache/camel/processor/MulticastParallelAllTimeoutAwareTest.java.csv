commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testMulticastParallelAllTimeoutAware() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // ABC will timeout so we only get our canned response     mock.expectedBodiesReceived("AllTimeout").     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied().     assertNotNull(receivedExchange).     // Just make sure the MyAggregationStrategy is called for all the exchange     assertEquals(2, receivedIndex).     assertEquals(3, receivedTotal).     assertEquals(500, receivedTimeout). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(500).to("direct:a", "direct:b", "direct:c").end().to("mock:result").     from("direct:a").delay(1000).setBody(constant("A")).     from("direct:b").delay(2000).setBody(constant("B")).     from("direct:c").delay(1500).setBody(constant("C")). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast(new MyAggregationStrategy()).parallelProcessing().timeout(500).to("direct:a", "direct:b", "direct:c").end().to("mock:result").             from("direct:a").delay(1000).setBody(constant("A")).             from("direct:b").delay(2000).setBody(constant("B")).             from("direct:c").delay(1500).setBody(constant("C")).         }     }. }
false;public;4;13;;public void timeout(Exchange oldExchange, int index, int total, long timeout) {     // we can't assert on the expected values here as the contract of this method doesn't     // allow to throw any Throwable (including AssertionError) so that we assert     // about the expected values directly inside the test method itself. other than that     // asserting inside a thread other than the main thread dosen't make much sense as     // junit would not realize the failed assertion!     receivedExchange = oldExchange.     receivedIndex = index.     receivedTotal = total.     receivedTimeout = timeout.     oldExchange.getIn().setBody("AllTimeout"). }
false;public;2;4;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     // noop     return oldExchange. }
