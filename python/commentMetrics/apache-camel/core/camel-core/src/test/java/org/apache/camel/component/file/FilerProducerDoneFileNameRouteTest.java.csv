commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/done").     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myProp", myProp).     return jndi. }
false;public;0;16;;@Test public void testProducerPlaceholderPrefixDoneFileName() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     assertTrue(oneExchangeDone.matches(5, TimeUnit.SECONDS)).     File file = new File("target/data/done/hello.txt").     assertEquals("File should exists", true, file.exists()).     File done = new File("target/data/done/done-hello.txt").     assertEquals("Done file should exists", true, done.exists()). }
false;public;0;11;;@Override public void configure() throws Exception {     myProp.put("myDir", "target/data/done").     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setLocation("ref:myProp").     from("direct:start").to("file:{{myDir}}?doneFileName=done-${file:name}").to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             myProp.put("myDir", "target/data/done").             PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).             pc.setLocation("ref:myProp").             from("direct:start").to("file:{{myDir}}?doneFileName=done-${file:name}").to("mock:result").         }     }. }
