commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testLoopDoWhileSimple() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("AAAAAA").     getMockEndpoint("mock:loop").expectedBodiesReceived("A", "AA", "AAA", "AAAA", "AAAAA").     template.sendBody("direct:simple", "A").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testLoopDoWhileFunctional() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("AAAAAA").     getMockEndpoint("mock:loop").expectedBodiesReceived("A", "AA", "AAA", "AAAA", "AAAAA").     template.sendBody("direct:functional", "A").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:simple").loopDoWhile(simple("${body.length} <= 5")).to("mock:loop").transform(body().append("A")).end().to("mock:result").     from("direct:functional").loopDoWhile().body(String.class, b -> b.length() <= 5).to("mock:loop").transform().body(String.class, b -> b += "A").end().to("mock:result"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:simple").loopDoWhile(simple("${body.length} <= 5")).to("mock:loop").transform(body().append("A")).end().to("mock:result").             from("direct:functional").loopDoWhile().body(String.class, b -> b.length() <= 5).to("mock:loop").transform().body(String.class, b -> b += "A").end().to("mock:result").         }     }. }
