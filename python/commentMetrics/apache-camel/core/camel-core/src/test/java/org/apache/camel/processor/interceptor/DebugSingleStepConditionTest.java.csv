commented;modifiers;parameterAmount;loc;comment;code
false;public;3;4;;public void beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {     String body = exchange.getIn().getBody(String.class).     logs.add("Single stepping at " + definition.getLabel() + " with body: " + body). }
false;public;3;3;;public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {     return "beer".equals(exchange.getFromRouteId()). }
false;public;0;18;;@Override @Before public void setUp() throws Exception {     super.setUp().     breakpoint = new BreakpointSupport() {          public void beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {             String body = exchange.getIn().getBody(String.class).             logs.add("Single stepping at " + definition.getLabel() + " with body: " + body).         }     }.     beerCondition = new ConditionSupport() {          public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {             return "beer".equals(exchange.getFromRouteId()).         }     }. }
false;public;0;16;;@Test public void testDebug() throws Exception {     // we only want to single step the beer route     context.getDebugger().addSingleStepBreakpoint(breakpoint, beerCondition).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Carlsberg").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:beer", "Carlsberg").     assertMockEndpointsSatisfied().     assertEquals(2, logs.size()).     assertEquals("Single stepping at log:beer with body: Carlsberg", logs.get(0)).     assertEquals("Single stepping at mock:result with body: Carlsberg", logs.get(1)). }
false;public;0;9;;@Override public void configure() throws Exception {     // use debugger     context.setDebugger(new DefaultDebugger()).     from("direct:start").routeId("foo").to("log:foo").to("log:bar").to("mock:result").     from("direct:beer").routeId("beer").to("log:beer").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use debugger             context.setDebugger(new DefaultDebugger()).             from("direct:start").routeId("foo").to("log:foo").to("log:bar").to("mock:result").             from("direct:beer").routeId("beer").to("log:beer").to("mock:result").         }     }. }
