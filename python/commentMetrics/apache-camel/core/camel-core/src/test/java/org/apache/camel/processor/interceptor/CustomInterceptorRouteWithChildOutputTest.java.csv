commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testCustomInterceptor() throws Exception {     getMockEndpoint("mock:child").expectedMessageCount(3).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied().     assertEquals(4, myInterceptor.getDefs().size()).     assertIsInstanceOf(LogDefinition.class, myInterceptor.getDefs().get(0)).     assertIsInstanceOf(ToDefinition.class, myInterceptor.getDefs().get(1)).     assertEquals("mock:child", myInterceptor.getDefs().get(1).getLabel()).     assertIsInstanceOf(SplitDefinition.class, myInterceptor.getDefs().get(2)).     assertIsInstanceOf(ToDefinition.class, myInterceptor.getDefs().get(3)).     assertEquals("mock:result", myInterceptor.getDefs().get(3).getLabel()). }
false;public;0;12;;@Override public void configure() throws Exception {     // add our custom interceptor     context.addInterceptStrategy(myInterceptor).     from("direct:start").split(body().tokenize(",")).log("Spltted ${body}").to("mock:child").end().to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // add our custom interceptor             context.addInterceptStrategy(myInterceptor).             from("direct:start").split(body().tokenize(",")).log("Spltted ${body}").to("mock:child").end().to("mock:result").         }     }. }
false;public;4;6;;@Override public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, Processor target, Processor nextTarget) throws Exception {     defs.add((ProcessorDefinition<?>) definition).     return target. }
false;public;0;3;;public List<ProcessorDefinition> getDefs() {     return defs. }
