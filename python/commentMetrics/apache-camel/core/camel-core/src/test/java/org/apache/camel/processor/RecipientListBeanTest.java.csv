commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyBean()).     return jndi. }
false;public;0;10;;@Test public void testRecipientListWithBean() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello c").     String out = template.requestBody("direct:start", "direct:a,direct:b,direct:c", String.class).     assertEquals("Hello c", out).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testRecipientListWithParams() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello b").     Map<String, Object> headers = new HashMap<>().     headers.put("one", 21).     headers.put("two", "direct:a,direct:b,direct:c").     String out = template.requestBodyAndHeaders("direct:params", "Hello World", headers, String.class).     assertEquals("Hello b", out).     assertMockEndpointsSatisfied(). }
false;public;0;8;;public void configure() {     from("direct:start").recipientList(method("myBean", "foo")).to("mock:result").     from("direct:params").recipientList(method("myBean", "bar(${header.one}, ${header.two})"), ",").to("mock:result").     from("direct:a").transform(constant("Hello a")).     from("direct:b").transform(constant("Hello b")).     from("direct:c").transform(constant("Hello c")). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").recipientList(method("myBean", "foo")).to("mock:result").             from("direct:params").recipientList(method("myBean", "bar(${header.one}, ${header.two})"), ",").to("mock:result").             from("direct:a").transform(constant("Hello a")).             from("direct:b").transform(constant("Hello b")).             from("direct:c").transform(constant("Hello c")).         }     }. }
false;public;1;3;;public String[] foo(String body) {     return body.split(","). }
false;public;2;5;;public String bar(int one, String two) {     assertEquals(21, one).     assertEquals("direct:a,direct:b,direct:c", two).     return "direct:c,direct:b". }
