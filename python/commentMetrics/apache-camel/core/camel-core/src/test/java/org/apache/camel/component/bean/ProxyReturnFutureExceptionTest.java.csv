commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testFutureEchoException() throws Exception {     Echo service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Echo.class).     Future<String> future = service.asText(4).     log.info("Got future").     log.info("Waiting for future to be done ...").     try {         assertEquals("Four", future.get(5, TimeUnit.SECONDS)).         fail("Should have thrown exception").     } catch (ExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced", cause.getMessage()).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:echo").delay(250).throwException(new IllegalArgumentException("Forced")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:echo").delay(250).throwException(new IllegalArgumentException("Forced")).         }     }. }
false;;1;1;;Future<String> asText(int number).
