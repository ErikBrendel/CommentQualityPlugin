commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyPolicy("foo")).     return jndi. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;29;;@Test public void testLoadRouteFromXmlWitPolicy() throws Exception {     InputStream is = getClass().getResourceAsStream("barPolicyRoute.xml").     RoutesDefinition routes = context.loadRoutesDefinition(is).     context.addRouteDefinitions(routes.getRoutes()).     context.start().     assertNotNull("Loaded foo route should be there", context.getRoute("foo")).     assertNotNull("Loaded bar route should be there", context.getRoute("bar")).     assertEquals(2, context.getRoutes().size()).     // test that loaded route works     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:response").expectedMessageCount(1).     getMockEndpoint("mock:response").expectedHeaderReceived("foo", "policy finished execution").     template.sendBody("direct:send", "Hello World").     assertMockEndpointsSatisfied().     MyPolicy foo = context.getRegistry().lookupByNameAndType("foo", MyPolicy.class).     assertEquals("Should only be invoked 1 time", 1, foo.getInvoked()). }
false;public;2;4;;public void beforeWrap(RouteContext routeContext, NamedNode definition) { // no need to modify the route }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     invoked++.     // let the original processor continue routing     exchange.getIn().setHeader(name, "was wrapped").     processor.process(exchange).     exchange.getIn().setHeader(name, "policy finished execution"). }
false;public;2;11;;public Processor wrap(RouteContext routeContext, final Processor processor) {     return new Processor() {          public void process(Exchange exchange) throws Exception {             invoked++.             // let the original processor continue routing             exchange.getIn().setHeader(name, "was wrapped").             processor.process(exchange).             exchange.getIn().setHeader(name, "policy finished execution").         }     }. }
false;public;0;3;;public int getInvoked() {     return invoked. }
