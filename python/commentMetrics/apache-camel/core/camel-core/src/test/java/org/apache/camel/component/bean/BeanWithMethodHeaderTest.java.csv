commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testEcho() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("echo Hello World").     template.sendBody("direct:echo", "Hello World").     assertMockEndpointsSatisfied().     assertNull("There should no Bean_METHOD_NAME header", mock.getExchanges().get(0).getIn().getHeader(Exchange.BEAN_METHOD_NAME)). }
false;public;0;12;;@Test public void testEchoWithMethodHeaderHi() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("hi Hello World").     // header should be removed after usage     mock.message(0).header(Exchange.BEAN_METHOD_NAME).isNull().     // header overrule endpoint configuration, so we should invoke the hi method     template.sendBodyAndHeader("direct:echo", ExchangePattern.InOut, "Hello World", Exchange.BEAN_METHOD_NAME, "hi").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testMixedBeanEndpoints() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("hi hi Hello World").     // header should be removed after usage     mock.message(0).header(Exchange.BEAN_METHOD_NAME).isNull().     // header overrule endpoint configuration, so we should invoke the hi method     template.sendBodyAndHeader("direct:mixed", ExchangePattern.InOut, "Hello World", Exchange.BEAN_METHOD_NAME, "hi").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testHi() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("hi Hello World").     template.sendBody("direct:hi", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testFail() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should throw an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(AmbiguousMethodCallException.class, e.getCause()).         AmbiguousMethodCallException ace = (AmbiguousMethodCallException) e.getCause().         assertEquals(2, ace.getMethods().size()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:typo").bean("myBean", "ups").to("mock:result"). }
false;public;0;16;;@Test public void testMethodNotExists() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:typo").bean("myBean", "ups").to("mock:result").             }         }).         fail("Should throw an exception").     } catch (FailedToCreateRouteException e) {         MethodNotFoundException mnfe = assertIsInstanceOf(MethodNotFoundException.class, e.getCause().getCause()).         assertEquals("ups", mnfe.getMethodName()).         assertSame(bean, mnfe.getBean()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:typo").bean(myBean, "ups").to("mock:result"). }
false;public;0;17;;@Test public void testMethodNotExistsOnInstance() throws Exception {     final MyBean myBean = new MyBean().     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:typo").bean(myBean, "ups").to("mock:result").             }         }).         fail("Should throw an exception").     } catch (FailedToCreateRouteException e) {         MethodNotFoundException mnfe = assertIsInstanceOf(MethodNotFoundException.class, e.getCause().getCause()).         assertEquals("ups", mnfe.getMethodName()).         assertSame(myBean, mnfe.getBean()).     } }
false;protected;0;6;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     bean = new MyBean().     answer.bind("myBean", bean).     return answer. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:echo").bean("myBean", "echo").to("mock:result").     from("direct:hi").bean("myBean", "hi").to("mock:result").     from("direct:mixed").bean("myBean", "echo").bean("myBean", "hi").to("mock:result").     from("direct:fail").bean("myBean").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:echo").bean("myBean", "echo").to("mock:result").             from("direct:hi").bean("myBean", "hi").to("mock:result").             from("direct:mixed").bean("myBean", "echo").bean("myBean", "hi").to("mock:result").             from("direct:fail").bean("myBean").to("mock:result").         }     }. }
false;public;1;3;;public String hi(String s) {     return "hi " + s. }
false;public;1;3;;public String echo(String s) {     return "echo " + s. }
