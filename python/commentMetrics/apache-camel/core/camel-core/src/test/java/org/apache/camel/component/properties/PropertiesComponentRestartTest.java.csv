commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testPropertiesComponentCacheClearedOnStop() throws Exception {     context.start().     context.resolvePropertyPlaceholders("{{cool.end}}").     context.resolvePropertyPlaceholders("{{cool.end}}").     context.resolvePropertyPlaceholders("{{cool.end}}").     // one cache miss     assertEquals(1, resolvedCount).     context.stop().     context.start().     context.resolvePropertyPlaceholders("{{cool.end}}").     context.resolvePropertyPlaceholders("{{cool.end}}").     context.resolvePropertyPlaceholders("{{cool.end}}").     // one more cache miss -- stop() cleared the cache     assertEquals(2, resolvedCount). }
false;public;3;4;;public Properties resolveProperties(CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations) throws Exception {     resolvedCount++.     return new DefaultPropertiesResolver(pc).resolveProperties(context, ignoreMissingLocation, locations). }
false;protected;0;16;;@Override protected CamelContext createCamelContext() throws Exception {     final PropertiesComponent pc = new PropertiesComponent("classpath:org/apache/camel/component/properties/myproperties.properties").     pc.setPropertiesResolver(new PropertiesResolver() {          public Properties resolveProperties(CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations) throws Exception {             resolvedCount++.             return new DefaultPropertiesResolver(pc).resolveProperties(context, ignoreMissingLocation, locations).         }     }).     // put the properties component into the registry so that it survives restarts     CamelContext context = new DefaultCamelContext().     context.getRegistry().bind("properties", pc).     return context. }
