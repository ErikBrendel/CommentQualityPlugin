commented;modifiers;parameterAmount;loc;comment;code
true;public;0;34;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testStopRouteFromRoute() throws Exception {     // create camel, add routes, and start camel     CamelContext context = new DefaultCamelContext().     context.addRoutes(createMyRoutes()).     context.start().     assertTrue("Route myRoute should be started", context.getRouteController().getRouteStatus("myRoute").isStarted()).     assertTrue("Route bar should be started", context.getRouteController().getRouteStatus("bar").isStarted()).     // setup mock expectations for unit test     MockEndpoint start = context.getEndpoint("mock:start", MockEndpoint.class).     start.expectedMessageCount(1).     MockEndpoint done = context.getEndpoint("mock:done", MockEndpoint.class).     done.expectedMessageCount(1).     // send a message to the route     ProducerTemplate template = context.createProducerTemplate().     template.sendBody("direct:start", "Hello Camel").     // just wait a bit for the thread to stop the route     latch.await(5, TimeUnit.SECONDS).     // the route should now be stopped     assertTrue("Route myRoute should be stopped", context.getRouteController().getRouteStatus("myRoute").isStopped()).     assertTrue("Route bar should be started", context.getRouteController().getRouteStatus("bar").isStarted()).     // stop camel     context.stop().     // unit test assertions     start.assertIsSatisfied().     done.assertIsSatisfied(). }
false;public;0;11;;@Override public void run() {     try {         exchange.getContext().getRouteController().stopRoute("myRoute").     } catch (Exception e) {     // ignore     } finally {         // signal we stopped the route         latch.countDown().     } }
false;public;1;23;;@Override public void process(final Exchange exchange) throws Exception {     // this route gracefully while we are still running     if (stop == null) {         stop = new Thread() {              @Override             public void run() {                 try {                     exchange.getContext().getRouteController().stopRoute("myRoute").                 } catch (Exception e) {                 // ignore                 } finally {                     // signal we stopped the route                     latch.countDown().                 }             }         }.     }     // start the thread that stops this route     stop.start(). }
false;public;0;35;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").to("mock:start").process(new Processor() {          Thread stop.          @Override         public void process(final Exchange exchange) throws Exception {             // this route gracefully while we are still running             if (stop == null) {                 stop = new Thread() {                      @Override                     public void run() {                         try {                             exchange.getContext().getRouteController().stopRoute("myRoute").                         } catch (Exception e) {                         // ignore                         } finally {                             // signal we stopped the route                             latch.countDown().                         }                     }                 }.             }             // start the thread that stops this route             stop.start().         }     }).to("mock:done").     from("direct:bar").routeId("bar").to("mock:bar"). }
true;public;0;39;// START SNIPPET: e2 ;// END SNIPPET: e1 // START SNIPPET: e2 public RouteBuilder createMyRoutes() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").to("mock:start").process(new Processor() {                  Thread stop.                  @Override                 public void process(final Exchange exchange) throws Exception {                     // this route gracefully while we are still running                     if (stop == null) {                         stop = new Thread() {                              @Override                             public void run() {                                 try {                                     exchange.getContext().getRouteController().stopRoute("myRoute").                                 } catch (Exception e) {                                 // ignore                                 } finally {                                     // signal we stopped the route                                     latch.countDown().                                 }                             }                         }.                     }                     // start the thread that stops this route                     stop.start().                 }             }).to("mock:done").             from("direct:bar").routeId("bar").to("mock:bar").         }     }. }
