commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNoAdvised() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     // intercept sending to mock:foo and do something else     interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised"). }
true;public;0;22;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testAdvised() throws Exception {     // advice the first route using the inlined route builder     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new RouteBuilder() {          @Override         public void configure() throws Exception {             // intercept sending to mock:foo and do something else             interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:advised").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:bar").to("mock:bar").     interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised"). }
false;public;0;19;;// END SNIPPET: e1 @Test public void testAdvisedNoNewRoutesAllowed() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:bar").to("mock:bar").                 interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised").             }         }).         fail("Should have thrown exception").     } catch (IllegalArgumentException e) {     // expected     } }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:foo").to("mock:advised").throwException(new IllegalArgumentException("Damn")). }
false;public;0;25;;@Test public void testAdvisedThrowException() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:foo").to("mock:advised").throwException(new IllegalArgumentException("Damn")).         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:advised").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Damn", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").to("mock:result").         }     }. }
