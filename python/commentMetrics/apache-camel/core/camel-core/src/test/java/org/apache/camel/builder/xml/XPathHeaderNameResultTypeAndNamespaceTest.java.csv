commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testXPathWithNamespace() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:55").     mock.expectedBodiesReceived("body").     mock.expectedHeaderReceived("cheeseDetails", "<number xmlns=\"http://acme.com/cheese\">55</number>").     template.sendBodyAndHeader("direct:in", "body", "cheeseDetails", "<number xmlns=\"http://acme.com/cheese\">55</number>").     mock.assertIsSatisfied(). }
false;public;0;10;;public void configure() throws Exception {     Namespaces ns = new Namespaces("c", "http://acme.com/cheese").     from("direct:in").choice().when().xpath("/c:number = 55", Integer.class, ns, "cheeseDetails").to("mock:55").otherwise().to("mock:other").end(). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             Namespaces ns = new Namespaces("c", "http://acme.com/cheese").             from("direct:in").choice().when().xpath("/c:number = 55", Integer.class, ns, "cheeseDetails").to("mock:55").otherwise().to("mock:other").end().         }     }. }
