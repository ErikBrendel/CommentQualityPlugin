commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;4;;@BeforeClass public static void createCamelCatalog() {     catalog = new DefaultRuntimeCamelCatalog(new DefaultCamelContext()). }
false;public;0;5;;@Test public void testFromCamelContext() throws Exception {     String schema = new DefaultCamelContext().getExtension(RuntimeCamelCatalog.class).modelJSonSchema("choice").     assertNotNull(schema). }
false;public;0;11;;@Test public void testJsonSchema() throws Exception {     String schema = catalog.modelJSonSchema("aggregate").     assertNotNull(schema).     // lets make it possible to find bean/method using both names     schema = catalog.modelJSonSchema("method").     assertNotNull(schema).     schema = catalog.modelJSonSchema("bean").     assertNotNull(schema). }
false;public;0;13;;@Test public void testAsEndpointUriMapFile() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("directoryName", "src/data/inbox").     map.put("noop", "true").     map.put("delay", "5000").     String uri = catalog.asEndpointUri("file", map, true).     assertEquals("file:src/data/inbox?delay=5000&noop=true", uri).     String uri2 = catalog.asEndpointUriXml("file", map, true).     assertEquals("file:src/data/inbox?delay=5000&amp.noop=true", uri2). }
false;public;0;9;;@Test public void testAsEndpointUriTimer() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("timerName", "foo").     map.put("period", "5000").     String uri = catalog.asEndpointUri("timer", map, true).     assertEquals("timer:foo?period=5000", uri). }
false;public;0;13;;@Test public void testAsEndpointUriPropertiesPlaceholders() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("timerName", "foo").     map.put("period", "{{howoften}}").     map.put("repeatCount", "5").     String uri = catalog.asEndpointUri("timer", map, true).     assertEquals("timer:foo?period=%7B%7Bhowoften%7D%7D&repeatCount=5", uri).     uri = catalog.asEndpointUri("timer", map, false).     assertEquals("timer:foo?period={{howoften}}&repeatCount=5", uri). }
false;public;0;12;;@Test public void testAsEndpointUriBeanLookup() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("resourceUri", "foo.xslt").     map.put("converter", "#myConverter").     String uri = catalog.asEndpointUri("xslt", map, true).     assertEquals("xslt:foo.xslt?converter=%23myConverter", uri).     uri = catalog.asEndpointUri("xslt", map, false).     assertEquals("xslt:foo.xslt?converter=#myConverter", uri). }
false;public;0;10;;@Test public void testEndpointPropertiesPlaceholders() throws Exception {     Map<String, String> map = catalog.endpointProperties("timer:foo?period={{howoften}}&repeatCount=5").     assertNotNull(map).     assertEquals(3, map.size()).     assertEquals("foo", map.get("timerName")).     assertEquals("{{howoften}}", map.get("period")).     assertEquals("5", map.get("repeatCount")). }
false;public;0;14;;@Test public void testAsEndpointUriLog() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("loggerName", "foo").     map.put("loggerLevel", "WARN").     map.put("multiline", "true").     map.put("showAll", "true").     map.put("showBody", "false").     map.put("showBodyType", "false").     map.put("showExchangePattern", "false").     map.put("style", "Tab").     assertEquals("log:foo?loggerLevel=WARN&multiline=true&showAll=true&style=Tab", catalog.asEndpointUri("log", map, false)). }
false;public;0;8;;@Test public void testAsEndpointUriLogShort() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("loggerName", "foo").     map.put("loggerLevel", "DEBUG").     assertEquals("log:foo?loggerLevel=DEBUG", catalog.asEndpointUri("log", map, false)). }
false;public;0;7;;@Test public void testAsEndpointUriWithplaceholder() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("name", "foo").     map.put("blockWhenFull", "{{block}}").     assertEquals("seda:foo?blockWhenFull={{block}}", catalog.asEndpointUri("seda", map, false)). }
false;public;0;15;;@Test public void testEndpointPropertiesSedaRequired() throws Exception {     Map<String, String> map = catalog.endpointProperties("seda:foo").     assertNotNull(map).     assertEquals(1, map.size()).     assertEquals("foo", map.get("name")).     map = catalog.endpointProperties("seda:foo?blockWhenFull=true").     assertNotNull(map).     assertEquals(2, map.size()).     assertEquals("foo", map.get("name")).     assertEquals("true", map.get("blockWhenFull")). }
false;public;0;85;;@Test public void validateProperties() throws Exception {     // valid     EndpointValidationResult result = catalog.validateEndpointProperties("log:mylog").     assertTrue(result.isSuccess()).     // unknown     result = catalog.validateEndpointProperties("log:mylog?level=WARN&foo=bar").     assertFalse(result.isSuccess()).     assertTrue(result.getUnknown().contains("foo")).     assertEquals(1, result.getNumberOfErrors()).     // enum     result = catalog.validateEndpointProperties("seda:foo?waitForTaskToComplete=blah").     assertFalse(result.isSuccess()).     assertEquals("blah", result.getInvalidEnum().get("waitForTaskToComplete")).     assertEquals(1, result.getNumberOfErrors()).     // reference okay     result = catalog.validateEndpointProperties("seda:foo?queue=#queue").     assertTrue(result.isSuccess()).     assertEquals(0, result.getNumberOfErrors()).     // unknown component     result = catalog.validateEndpointProperties("foo:bar?me=you").     assertFalse(result.isSuccess()).     assertTrue(result.getUnknownComponent().equals("foo")).     assertEquals(1, result.getNumberOfErrors()).     // invalid boolean but default value     result = catalog.validateEndpointProperties("log:output?showAll=ggg").     assertFalse(result.isSuccess()).     assertEquals("ggg", result.getInvalidBoolean().get("showAll")).     assertEquals(1, result.getNumberOfErrors()).     // dataset     result = catalog.validateEndpointProperties("dataset:foo?minRate=50").     assertTrue(result.isSuccess()).     // time pattern     result = catalog.validateEndpointProperties("timer://foo?fixedRate=true&delay=0&period=2s").     assertTrue(result.isSuccess()).     // reference lookup     result = catalog.validateEndpointProperties("timer://foo?fixedRate=#fixed&delay=#myDelay").     assertTrue(result.isSuccess()).     // optional consumer. prefix     result = catalog.validateEndpointProperties("file:inbox?consumer.delay=5000&consumer.greedy=true").     assertTrue(result.isSuccess()).     // optional without consumer. prefix     result = catalog.validateEndpointProperties("file:inbox?delay=5000&greedy=true").     assertTrue(result.isSuccess()).     // mixed optional without consumer. prefix     result = catalog.validateEndpointProperties("file:inbox?delay=5000&consumer.greedy=true").     assertTrue(result.isSuccess()).     // prefix     result = catalog.validateEndpointProperties("file:inbox?delay=5000&scheduler.foo=123&scheduler.bar=456").     assertTrue(result.isSuccess()).     // stub     result = catalog.validateEndpointProperties("stub:foo?me=123&you=456").     assertTrue(result.isSuccess()).     // lenient on     result = catalog.validateEndpointProperties("dataformat:string:marshal?foo=bar").     assertTrue(result.isSuccess()).     // lenient off     result = catalog.validateEndpointProperties("dataformat:string:marshal?foo=bar", true).     assertFalse(result.isSuccess()).     assertTrue(result.getUnknown().contains("foo")).     // data format     result = catalog.validateEndpointProperties("dataformat:string:marshal?charset=utf-8", true).     assertTrue(result.isSuccess()).     // incapable to parse     result = catalog.validateEndpointProperties("{{getFtpUrl}}?recursive=true").     assertFalse(result.isSuccess()).     assertTrue(result.getIncapable() != null). }
false;public;0;12;;@Test public void validatePropertiesSummary() throws Exception {     EndpointValidationResult result = catalog.validateEndpointProperties("yammer:MESSAGES?blah=yada&accessToken=aaa&consumerKey=&useJson=no&initialDelay=five&pollStrategy=myStrategy").     assertFalse(result.isSuccess()).     String reason = result.summaryErrorMessage(true).     LOG.info(reason).     result = catalog.validateEndpointProperties("jms:unknown:myqueue").     assertFalse(result.isSuccess()).     reason = result.summaryErrorMessage(false).     LOG.info(reason). }
false;public;0;20;;@Test public void validateTimePattern() throws Exception {     assertTrue(catalog.validateTimePattern("0")).     assertTrue(catalog.validateTimePattern("500")).     assertTrue(catalog.validateTimePattern("10000")).     assertTrue(catalog.validateTimePattern("5s")).     assertTrue(catalog.validateTimePattern("5sec")).     assertTrue(catalog.validateTimePattern("5secs")).     assertTrue(catalog.validateTimePattern("3m")).     assertTrue(catalog.validateTimePattern("3min")).     assertTrue(catalog.validateTimePattern("3minutes")).     assertTrue(catalog.validateTimePattern("5m15s")).     assertTrue(catalog.validateTimePattern("1h")).     assertTrue(catalog.validateTimePattern("1hour")).     assertTrue(catalog.validateTimePattern("2hours")).     assertFalse(catalog.validateTimePattern("bla")).     assertFalse(catalog.validateTimePattern("2year")).     assertFalse(catalog.validateTimePattern("60darn")). }
false;public;0;5;;@Test public void testEndpointComponentName() throws Exception {     String name = catalog.endpointComponentName("jms:queue:foo").     assertEquals("jms", name). }
false;public;0;14;;@Test public void testSimpleExpression() throws Exception {     LanguageValidationResult result = catalog.validateLanguageExpression(null, "simple", "${body}").     assertTrue(result.isSuccess()).     assertEquals("${body}", result.getText()).     result = catalog.validateLanguageExpression(null, "simple", "${body").     assertFalse(result.isSuccess()).     assertEquals("${body", result.getText()).     LOG.info(result.getError()).     assertTrue(result.getError().startsWith("expected symbol functionEnd but was eol at location 5")).     assertEquals("expected symbol functionEnd but was eol", result.getShortError()).     assertEquals(5, result.getIndex()). }
false;public;0;14;;@Test public void testSimplePredicate() throws Exception {     LanguageValidationResult result = catalog.validateLanguagePredicate(null, "simple", "${body} == 'abc'").     assertTrue(result.isSuccess()).     assertEquals("${body} == 'abc'", result.getText()).     result = catalog.validateLanguagePredicate(null, "simple", "${body} > ${header.size").     assertFalse(result.isSuccess()).     assertEquals("${body} > ${header.size", result.getText()).     LOG.info(result.getError()).     assertTrue(result.getError().startsWith("expected symbol functionEnd but was eol at location 22")).     assertEquals("expected symbol functionEnd but was eol", result.getShortError()).     assertEquals(22, result.getIndex()). }
false;public;0;15;;@Test public void testSimplePredicatePlaceholder() throws Exception {     LanguageValidationResult result = catalog.validateLanguagePredicate(null, "simple", "${body} contains '{{danger}}'").     assertTrue(result.isSuccess()).     assertEquals("${body} contains '{{danger}}'", result.getText()).     result = catalog.validateLanguagePredicate(null, "simple", "${bdy} contains '{{danger}}'").     assertFalse(result.isSuccess()).     assertEquals("${bdy} contains '{{danger}}'", result.getText()).     LOG.info(result.getError()).     assertTrue(result.getError().startsWith("Unknown function: bdy at location 0")).     assertTrue(result.getError().contains("'{{danger}}'")).     assertEquals("Unknown function: bdy", result.getShortError()).     assertEquals(0, result.getIndex()). }
false;public;0;22;;@Test public void testValidateLanguage() throws Exception {     LanguageValidationResult result = catalog.validateLanguageExpression(null, "simple", "${body}").     assertTrue(result.isSuccess()).     assertEquals("${body}", result.getText()).     result = catalog.validateLanguageExpression(null, "header", "foo").     assertTrue(result.isSuccess()).     assertEquals("foo", result.getText()).     result = catalog.validateLanguagePredicate(null, "simple", "${body} > 10").     assertTrue(result.isSuccess()).     assertEquals("${body} > 10", result.getText()).     result = catalog.validateLanguagePredicate(null, "header", "bar").     assertTrue(result.isSuccess()).     assertEquals("bar", result.getText()).     result = catalog.validateLanguagePredicate(null, "foobar", "bar").     assertFalse(result.isSuccess()).     assertEquals("Unknown language foobar", result.getError()). }
false;public;0;12;;@Test public void testValidateEndpointConsumerOnly() throws Exception {     String uri = "file:inbox?bufferSize=4096&readLock=changed&delete=true".     EndpointValidationResult result = catalog.validateEndpointProperties(uri, false, true, false).     assertTrue(result.isSuccess()).     uri = "file:inbox?bufferSize=4096&readLock=changed&delete=true&fileExist=Append".     result = catalog.validateEndpointProperties(uri, false, true, false).     assertFalse(result.isSuccess()).     assertEquals("fileExist", result.getNotConsumerOnly().iterator().next()). }
false;public;0;12;;@Test public void testValidateEndpointProducerOnly() throws Exception {     String uri = "file:outbox?bufferSize=4096&fileExist=Append".     EndpointValidationResult result = catalog.validateEndpointProperties(uri, false, false, true).     assertTrue(result.isSuccess()).     uri = "file:outbox?bufferSize=4096&fileExist=Append&delete=true".     result = catalog.validateEndpointProperties(uri, false, false, true).     assertFalse(result.isSuccess()).     assertEquals("delete", result.getNotProducerOnly().iterator().next()). }
