commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testRedeliverToSubRoute() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("Hello World", "Hello World", "Hello World").     getMockEndpoint("mock:c").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;22;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // in case of io exception then try to redeliver up till 2 times     // (do not use any delay due faster unit testing)     onException(IOException.class).maximumRedeliveries(2).redeliveryDelay(0).     from("direct:start").to("mock:a").to("direct:sub").to("mock:c").     from("direct:sub").errorHandler(noErrorHandler()).to("mock:b").process(new MyProcessor()). // END SNIPPET: e1 }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // in case of io exception then try to redeliver up till 2 times             // (do not use any delay due faster unit testing)             onException(IOException.class).maximumRedeliveries(2).redeliveryDelay(0).             from("direct:start").to("mock:a").to("direct:sub").to("mock:c").             from("direct:sub").errorHandler(noErrorHandler()).to("mock:b").process(new MyProcessor()).         // END SNIPPET: e1         }     }. }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     // use a processor to simulate error in the first 2 calls     if (counter++ < 2) {         throw new IOException("Forced").     }     exchange.getIn().setBody("Bye World"). }
