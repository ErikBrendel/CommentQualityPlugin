commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testBadFirstMessage() throws Exception {     // bad messages is ignored     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBody("direct:start", "A").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testBadSecondMessage() throws Exception {     // bad messages is ignored     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBody("direct:start", "A").     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testBadThirdMessage() throws Exception {     // bad messages is ignored     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBody("direct:start", "A").     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testBadForthMessage() throws Exception {     // bad messages is ignored     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     template.sendBody("direct:start", "A").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").resequence(header("seqno")).stream().timeout(50).deliveryAttemptInterval(10).ignoreInvalidExchanges().to("mock:result"). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").resequence(header("seqno")).stream().timeout(50).deliveryAttemptInterval(10).ignoreInvalidExchanges().to("mock:result").         // END SNIPPET: e1         }     }. }
