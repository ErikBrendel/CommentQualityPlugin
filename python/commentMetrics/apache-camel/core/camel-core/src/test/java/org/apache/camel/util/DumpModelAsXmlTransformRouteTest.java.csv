commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testDumpModelAsXml() throws Exception {     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("myRoute")).     assertNotNull(xml).     log.info(xml).     Document doc = new XmlConverter().toDOMDocument(xml, null).     NodeList nodes = doc.getElementsByTagName("simple").     assertEquals(1, nodes.getLength()).     Element node = (Element) nodes.item(0).     assertNotNull("Node <simple> expected to be instanceof Element", node).     assertEquals("Hello ${body}", node.getTextContent()).     nodes = doc.getElementsByTagName("to").     assertEquals(1, nodes.getLength()).     node = (Element) nodes.item(0).     assertNotNull("Node <to> expected to be instanceof Element", node).     assertEquals("mock:result", node.getAttribute("uri")).     assertEquals("myMock", node.getAttribute("id")).     assertEquals("true", node.getAttribute("customId")). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").transform().simple("Hello ${body}").to("mock:result").id("myMock"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").transform().simple("Hello ${body}").to("mock:result").id("myMock").         }     }. }
