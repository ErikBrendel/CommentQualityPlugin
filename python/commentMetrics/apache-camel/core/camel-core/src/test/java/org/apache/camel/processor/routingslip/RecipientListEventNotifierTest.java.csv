commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().addEventNotifier(notifier).     return context. }
false;public;0;14;;@Test public void testRecipientListEventNotifier() throws Exception {     getMockEndpoint("mock:x").expectedMessageCount(1).     getMockEndpoint("mock:y").expectedMessageCount(1).     getMockEndpoint("mock:z").expectedMessageCount(1).     getMockEndpoint("mock:end").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "myHeader", "mock:x,mock:y,mock:z").     assertMockEndpointsSatisfied().     assertEquals("Should have 5 sending events", 5, notifier.getSending()).     assertEquals("Should have 5 sent events", 5, notifier.getSent()). }
false;public;0;3;;public void configure() {     from("direct:start").recipientList(header("myHeader")).to("mock:end"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").recipientList(header("myHeader")).to("mock:end").         }     }. }
false;public;1;8;;@Override public void notify(CamelEvent event) throws Exception {     if (event instanceof ExchangeSendingEvent) {         sending++.     } else {         sent++.     } }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent. }
false;public;0;3;;public int getSending() {     return sending. }
false;public;0;3;;public int getSent() {     return sent. }
