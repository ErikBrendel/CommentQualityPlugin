commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testDynamicRouter() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(1).     template.sendBody("direct:start-1", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start-1").dynamicRouter().exchange(DynamicRouter4Test::slip). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start-1").dynamicRouter().exchange(DynamicRouter4Test::slip).         }     }. }
false;public,static;1;11;;public static String slip(Exchange exchange) {     String previous = ExchangeHelper.getHeaderOrProperty(exchange, Exchange.SLIP_ENDPOINT, String.class).     if (previous == null) {         return "mock:a,mock:b".     } else if ("mock://b".equals(previous)) {         return "mock:c".     }     // no more so return null     return null. }
