commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testPurgeWhenStopping() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     for (int i = 0. i < 100. i++) {         template.sendBody("seda:foo", "Message " + i).     }     context.getRouteController().startRoute("myRoute").     latch.await(2, TimeUnit.SECONDS).     context.getRouteController().stopRoute("myRoute").     latch2.countDown().     mock.setAssertPeriod(500).     mock.assertIsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     latch.countDown().     latch2.await(2, TimeUnit.SECONDS). }
false;public;0;12;;@Override public void configure() throws Exception {     from("seda:foo?purgeWhenStopping=true").routeId("myRoute").noAutoStartup().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             latch.countDown().             latch2.await(2, TimeUnit.SECONDS).         }     }).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo?purgeWhenStopping=true").routeId("myRoute").noAutoStartup().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     latch.countDown().                     latch2.await(2, TimeUnit.SECONDS).                 }             }).to("mock:result").         }     }. }
