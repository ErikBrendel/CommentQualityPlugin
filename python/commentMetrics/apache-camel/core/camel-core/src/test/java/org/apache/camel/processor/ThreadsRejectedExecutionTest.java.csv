commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;14;;@Override public void configure() throws Exception {     // use a custom pool which rejects any new tasks while currently in progress     // this should force the ThreadsProcessor to run the tasks itself     ExecutorService pool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()).     from("seda:start").to("log:before").threads().executorService(pool).delay(200).to("log:after").to("mock:result"). }
false;public;0;28;;@Test public void testThreadsRejectedExecution() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // use a custom pool which rejects any new tasks while currently in progress             // this should force the ThreadsProcessor to run the tasks itself             ExecutorService pool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()).             from("seda:start").to("log:before").threads().executorService(pool).delay(200).to("log:after").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(3).     template.sendBody("seda:start", "Hello World").     template.sendBody("seda:start", "Hi World").     template.sendBody("seda:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     // use a custom pool which rejects any new tasks while currently in progress     // this should force the ThreadsProcessor to run the tasks itself     ExecutorService pool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()).     from("seda:start").to("log:before").threads().executorService(pool).callerRunsWhenRejected(false).delay(200).syncDelayed().to("log:after").to("mock:result"). }
false;public;0;35;;@Test public void testThreadsRejectedExecutionCallerNotRuns() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // use a custom pool which rejects any new tasks while currently in progress             // this should force the ThreadsProcessor to run the tasks itself             ExecutorService pool = new ThreadPoolExecutor(1, 1, 0, TimeUnit.SECONDS, new SynchronousQueue<Runnable>()).             from("seda:start").to("log:before").threads().executorService(pool).callerRunsWhenRejected(false).delay(200).syncDelayed().to("log:after").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     // wait at most 2 seconds     mock.setResultWaitTime(2000).     template.sendBody("seda:start", "Hello World").     template.sendBody("seda:start", "Hi World").     template.sendBody("seda:start", "Bye World").     // should not be possible to route all 3     mock.assertIsNotSatisfied().     // only 1 should arrive     assertEquals(1, mock.getReceivedCounter()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Discard).delay(100).to("log:after").to("mock:result"). }
false;public;0;28;;@Test public void testThreadsRejectedDiscard() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Discard).delay(100).to("log:after").to("mock:result").         }     }).     context.start().     NotifyBuilder notify = new NotifyBuilder(context).whenDone(10).create().     getMockEndpoint("mock:result").expectedMinimumMessageCount(2).     for (int i = 0. i < 10. i++) {         template.sendBody("seda:start", "Message " + i).     }     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     int inflight = context.getInflightRepository().size().     assertEquals(0, inflight). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.DiscardOldest).delay(100).to("log:after").to("mock:result"). }
false;public;0;28;;@Test public void testThreadsRejectedDiscardOldest() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.DiscardOldest).delay(100).to("log:after").to("mock:result").         }     }).     context.start().     NotifyBuilder notify = new NotifyBuilder(context).whenDone(10).create().     getMockEndpoint("mock:result").expectedMinimumMessageCount(2).     for (int i = 0. i < 10. i++) {         template.sendBody("seda:start", "Message " + i).     }     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     int inflight = context.getInflightRepository().size().     assertEquals(0, inflight). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).delay(100).to("log:after").to("mock:result"). }
false;public;0;28;;@Test public void testThreadsRejectedAbort() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).delay(100).to("log:after").to("mock:result").         }     }).     context.start().     NotifyBuilder notify = new NotifyBuilder(context).whenDone(10).create().     getMockEndpoint("mock:result").expectedMinimumMessageCount(2).     for (int i = 0. i < 10. i++) {         template.sendBody("seda:start", "Message " + i).     }     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     int inflight = context.getInflightRepository().size().     assertEquals(0, inflight). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.CallerRuns).delay(100).to("log:after").to("mock:result"). }
false;public;0;28;;@Test public void testThreadsRejectedCallerRuns() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.CallerRuns).delay(100).to("log:after").to("mock:result").         }     }).     context.start().     NotifyBuilder notify = new NotifyBuilder(context).whenDone(10).create().     getMockEndpoint("mock:result").expectedMessageCount(10).     for (int i = 0. i < 10. i++) {         template.sendBody("seda:start", "Message " + i).     }     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     int inflight = context.getInflightRepository().size().     assertEquals(0, inflight). }
false;public;0;11;;@Override public void configure() throws Exception {     onException(Exception.class).redeliveryDelay(250).maximumRedeliveries(3).handled(true).to("mock:error").     from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).delay(250).to("log:after").to("mock:result"). }
false;public;0;33;;@Test public void testThreadsRejectedAbortNoRedelivery() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).redeliveryDelay(250).maximumRedeliveries(3).handled(true).to("mock:error").             from("seda:start").to("log:before").threads(1, 1).maxPoolSize(1).maxQueueSize(2).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).delay(250).to("log:after").to("mock:result").         }     }).     context.start().     NotifyBuilder notify = new NotifyBuilder(context).whenDone(10).create().     // there should be error handling for aborted tasks (eg no redeliveries and no error handling)     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMinimumMessageCount(2).     for (int i = 0. i < 10. i++) {         template.sendBody("seda:start", "Message " + i).     }     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     int inflight = context.getInflightRepository().size().     assertEquals(0, inflight). }
