commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testCustomExceptionHandler() throws Exception {     myExceptionHandler.setTemplate(context.createProducerTemplate()).     getMockEndpoint("mock:result").expectedMessageCount(2).     getMockEndpoint("mock:error").expectedBodiesReceived("Error Forced to simulate no space on device").     template.sendBodyAndHeader("file:target/data/nospace", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/nospace", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied().     assertEquals("Should pickup bye.txt file 2 times", 2, myReadLockStrategy.getCounter()). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myExceptionHandler", myExceptionHandler).     jndi.bind("myReadLockStrategy", myReadLockStrategy).     return jndi. }
false;public;0;23;;@Override public void configure() throws Exception {     // to handle any IOException being thrown     onException(IOException.class).handled(true).log("IOException occurred due: ${exception.message}").to("direct:file-error").     // special route that handles file errors     from("direct:file-error").log("File error route triggered to deal with exception ${exception?.class}").transform().simple("Error ${exception.message}").to("mock:error").     // this is the file route that pickup files, notice how we use our custom exception handler on the consumer     // the exclusiveReadLockStrategy is only configured because this is from an unit test, so we use that to simulate exceptions     from("file:target/data/nospace?exclusiveReadLockStrategy=#myReadLockStrategy&consumer.exceptionHandler=#myExceptionHandler&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
true;protected;0;28;// START SNIPPET: e2 ;// START SNIPPET: e2 @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // to handle any IOException being thrown             onException(IOException.class).handled(true).log("IOException occurred due: ${exception.message}").to("direct:file-error").             // special route that handles file errors             from("direct:file-error").log("File error route triggered to deal with exception ${exception?.class}").transform().simple("Error ${exception.message}").to("mock:error").             // this is the file route that pickup files, notice how we use our custom exception handler on the consumer             // the exclusiveReadLockStrategy is only configured because this is from an unit test, so we use that to simulate exceptions             from("file:target/data/nospace?exclusiveReadLockStrategy=#myReadLockStrategy&consumer.exceptionHandler=#myExceptionHandler&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
true;public;1;3;/**  * We use a producer template to send a message to the Camel route  */ ;/**  * We use a producer template to send a message to the Camel route  */ public void setTemplate(ProducerTemplate template) {     this.template = template. }
false;public;1;4;;@Override public void handleException(Throwable exception) {     handleException(exception.getMessage(), exception). }
false;public;2;4;;@Override public void handleException(String message, Throwable exception) {     handleException(exception.getMessage(), null, exception). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     // set an exception on the message from the start so the error handling is triggered     exchange.setException(exception).     exchange.getIn().setBody(message). }
false;public;3;13;;@Override public void handleException(final String message, final Exchange originalExchange, final Throwable exception) {     // send the message to the special direct:file-error endpoint, which will trigger exception handling     //      template.send("direct:file-error", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // set an exception on the message from the start so the error handling is triggered             exchange.setException(exception).             exchange.getIn().setBody(message).         }     }). }
false;public;2;4;;@Override public void prepareOnStartup(GenericFileOperations<File> operations, GenericFileEndpoint<File> endpoint) throws Exception { // noop }
false;public;3;11;;@Override public boolean acquireExclusiveReadLock(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception {     if (file.getFileNameOnly().equals("bye.txt")) {         if (counter++ == 0) {             // force an exception on acquire attempt for the bye.txt file, on the first attempt             throw new IOException("Forced to simulate no space on device").         }     }     return true. }
false;public;3;4;;@Override public void releaseExclusiveReadLockOnAbort(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception { // noop }
false;public;3;4;;@Override public void releaseExclusiveReadLockOnRollback(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception { // noop }
false;public;3;4;;@Override public void releaseExclusiveReadLockOnCommit(GenericFileOperations<File> operations, GenericFile<File> file, Exchange exchange) throws Exception { // noop }
false;public;1;4;;@Override public void setTimeout(long timeout) { // noop }
false;public;1;4;;@Override public void setCheckInterval(long checkInterval) { // noop }
false;public;1;4;;@Override public void setReadLockLoggingLevel(LoggingLevel readLockLoggingLevel) { // noop }
false;public;1;4;;@Override public void setMarkerFiler(boolean markerFile) { // noop }
false;public;1;4;;@Override public void setDeleteOrphanLockFiles(boolean deleteOrphanLockFiles) { // noop }
false;public;0;3;;public int getCounter() {     return counter. }
