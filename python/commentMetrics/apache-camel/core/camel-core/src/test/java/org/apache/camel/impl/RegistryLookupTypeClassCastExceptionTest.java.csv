commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testLookupOk() throws Exception {     Registry registry = new DefaultRegistry().     MyClass my = new MyClass().     registry.bind("my", my).     assertEquals(my, registry.lookupByName("my")).     assertEquals(my, registry.lookupByNameAndType("my", MyClass.class)).     assertNull(registry.lookupByName("foo")).     assertNull(registry.lookupByNameAndType("foo", MyClass.class)). }
false;public;0;13;;@Test public void testCamelContextLookupOk() throws Exception {     CamelContext context = new DefaultCamelContext().     MyClass my = new MyClass().     context.getRegistry().bind("my", my).     assertEquals(my, context.getRegistry().lookupByName("my")).     assertEquals(my, context.getRegistry().lookupByNameAndType("my", MyClass.class)).     assertNull(context.getRegistry().lookupByName("foo")).     assertNull(context.getRegistry().lookupByNameAndType("foo", MyClass.class)). }
false;public;0;15;;@Test public void testLookupClassCast() throws Exception {     Registry registry = new DefaultRegistry().     MyClass my = new MyClass().     registry.bind("my", my).     try {         registry.lookupByNameAndType("my", String.class).         fail("Should have thrown exception").     } catch (NoSuchBeanException e) {         assertEquals("my", e.getName()).         assertTrue(e.getMessage().endsWith("expected type was: class java.lang.String")).     } }
false;public;0;15;;@Test public void testCamelContextLookupClassCast() throws Exception {     CamelContext context = new DefaultCamelContext().     MyClass my = new MyClass().     context.getRegistry().bind("my", my).     try {         context.getRegistry().lookupByNameAndType("my", String.class).         fail("Should have thrown exception").     } catch (NoSuchBeanException e) {         assertEquals("my", e.getName()).         assertTrue(e.getMessage().endsWith("expected type was: class java.lang.String")).     } }
