commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testIOException() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(1).     getMockEndpoint("mock:catchCamel").expectedMessageCount(0).     getMockEndpoint("mock:finally").expectedMessageCount(1).     template.sendBody("direct:start", "Damn IO").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testIllegalStateException() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(1).     getMockEndpoint("mock:catchCamel").expectedMessageCount(0).     getMockEndpoint("mock:finally").expectedMessageCount(1).     template.sendBody("direct:start", "Damn State").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testCamelException() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(0).     getMockEndpoint("mock:catchCamel").expectedMessageCount(1).     getMockEndpoint("mock:finally").expectedMessageCount(1).     template.sendBody("direct:start", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testOtherBug() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(0).     getMockEndpoint("mock:catchCamel").expectedMessageCount(0).     getMockEndpoint("mock:finally").expectedMessageCount(1).     try {         template.sendBody("direct:start", "Other Bug").         fail("Should have thrown a RuntimeCamelException").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(IllegalStateException.class, e.getCause()).         assertEquals("Other Bug", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testOk() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:catch").expectedMessageCount(0).     getMockEndpoint("mock:finally").expectedMessageCount(1).     sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;24;;public void configure() {     // START SNIPPET: e1     from("direct:start").doTry().process(new ProcessorFail()).to("mock:result").doCatch(IOException.class, IllegalStateException.class).onWhen(exceptionMessage().contains("Damn")).to("mock:catch").doCatch(CamelExchangeException.class).to("mock:catchCamel").doFinally().to("mock:finally").end(). // END SNIPPET: e1 }
false;protected;0;30;;@Override @SuppressWarnings("unchecked") protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").doTry().process(new ProcessorFail()).to("mock:result").doCatch(IOException.class, IllegalStateException.class).onWhen(exceptionMessage().contains("Damn")).to("mock:catch").doCatch(CamelExchangeException.class).to("mock:catchCamel").doFinally().to("mock:finally").end().         // END SNIPPET: e1         }     }. }
false;public;1;12;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Damn IO".equals(body)) {         throw new IOException("Damn IO").     } else if ("Damn State".equals(body)) {         throw new IllegalStateException("Damn State").     } else if ("Other Bug".equals(body)) {         throw new IllegalStateException("Other Bug").     } else if ("Camel".equals(body)) {         throw new CamelExchangeException("Sorry old Camel", exchange).     } }
