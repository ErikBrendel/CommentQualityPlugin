commented;modifiers;parameterAmount;loc;comment;code
false;public;0;42;;@SuppressWarnings("unchecked") @Test public void testGrouped() throws Exception {     // START SNIPPET: e2     MockEndpoint result = getMockEndpoint("mock:result").     // we expect 2 messages since we group using A or B keys     result.expectedMessageCount(2).     // then we sent all the message at once     template.sendBodyAndHeader("direct:start", "100", "foo", "A").     template.sendBodyAndHeader("direct:start", "130", "foo", "B").     template.sendBodyAndHeader("direct:start", "150", "foo", "A").     template.sendBodyAndHeader("direct:start", "200", "foo", "B").     template.sendBodyAndHeader("direct:start", "180", "foo", "B").     // to force B to timeout first as A is added last     Thread.sleep(250).     template.sendBodyAndHeader("direct:start", "120", "foo", "A").     assertMockEndpointsSatisfied().     Exchange out = result.getExchanges().get(0).     List<Exchange> grouped = out.getIn().getBody(List.class).     assertEquals(3, grouped.size()).     // B timeout first     assertEquals("130", grouped.get(0).getIn().getBody(String.class)).     assertEquals("200", grouped.get(1).getIn().getBody(String.class)).     assertEquals("180", grouped.get(2).getIn().getBody(String.class)).     out = result.getExchanges().get(1).     grouped = out.getIn().getBody(List.class).     assertEquals(3, grouped.size()).     assertEquals("100", grouped.get(0).getIn().getBody(String.class)).     assertEquals("150", grouped.get(1).getIn().getBody(String.class)).     assertEquals("120", grouped.get(2).getIn().getBody(String.class)). // END SNIPPET: e2 }
false;public;0;11;;public void configure() throws Exception {     // START SNIPPET: e1     // our route is aggregating from the direct queue and sending the response to the mock     from("direct:start").aggregate(header("foo"), new GroupedExchangeAggregationStrategy()).completionTimeout(1000L).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // our route is aggregating from the direct queue and sending the response to the mock             from("direct:start").aggregate(header("foo"), new GroupedExchangeAggregationStrategy()).completionTimeout(1000L).to("mock:result").         // END SNIPPET: e1         }     }. }
