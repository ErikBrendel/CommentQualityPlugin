commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/xpath").     super.setUp(). }
false;public;0;21;;@Test public void testXPathToFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     String xml = "<foo><person id=\"1\">Claus<country>SE</country></person>" + "<person id=\"2\">Jonathan<country>CA</country></person></foo>".     Document doc = context.getTypeConverter().convertTo(Document.class, xml).     template.sendBody("direct:start", doc).     assertMockEndpointsSatisfied().     File first = new File("target/data/xpath/xpath-0.xml").     assertTrue("File xpath-0.xml should exists", first.exists()).     assertEquals("<person id=\"1\">Claus<country>SE</country></person>", context.getTypeConverter().convertTo(String.class, first)).     File second = new File("target/data/xpath/xpath-1.xml").     assertTrue("File xpath-1.xml should exists", second.exists()).     assertEquals("<person id=\"2\">Jonathan<country>CA</country></person>", context.getTypeConverter().convertTo(String.class, second)). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").split(xpath("/foo/person")).log("${bodyAs(String)}").to("file://target/data/xpath?fileName=xpath-${exchangeProperty.CamelSplitIndex}.xml").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(xpath("/foo/person")).log("${bodyAs(String)}").to("file://target/data/xpath?fileName=xpath-${exchangeProperty.CamelSplitIndex}.xml").to("mock:result").         }     }. }
