commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSedaFromRouteId() throws Exception {     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedMessageCount(1).     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMessageCount(1).     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("foo", foo.getReceivedExchanges().get(0).getFromRouteId()).     assertEquals("seda://foo", foo.getReceivedExchanges().get(0).getFromEndpoint().getEndpointUri()).     assertEquals("bar", bar.getReceivedExchanges().get(0).getFromRouteId()).     assertEquals("seda://bar", bar.getReceivedExchanges().get(0).getFromEndpoint().getEndpointUri()). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo").routeId("foo").to("mock:foo").to("seda:bar").     from("seda:bar").routeId("bar").to("mock:bar"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("foo").to("mock:foo").to("seda:bar").             from("seda:bar").routeId("bar").to("mock:bar").         }     }. }
