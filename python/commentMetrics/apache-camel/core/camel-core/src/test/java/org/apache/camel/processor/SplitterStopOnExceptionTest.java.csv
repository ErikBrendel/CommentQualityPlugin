commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSplitStopOnExceptionOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Hello World", "Bye World").     template.sendBody("direct:start", "Hello World,Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testSplitStopOnExceptionStop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     // we do stop so we stop splitting when the exception occurs and thus we only receive 1 message     mock.expectedBodiesReceived("Hello World").     try {         template.sendBody("direct:start", "Hello World,Kaboom,Bye World").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         CamelExchangeException cause = assertIsInstanceOf(CamelExchangeException.class, e.getCause()).         assertTrue(cause.getMessage().startsWith("Multicast processing failed for number 1.")).         assertEquals("Forced", cause.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).stopOnException().process(new MyProcessor()).to("mock:split"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).stopOnException().process(new MyProcessor()).to("mock:split").         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
