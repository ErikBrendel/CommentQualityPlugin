commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.setPattern(ExchangePattern.InOut).     exchange.setProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.IfReplyExpected). }
false;public;0;15;;@Test public void testInOut() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     Exchange out = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.setPattern(ExchangePattern.InOut).             exchange.setProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.IfReplyExpected).         }     }).     assertEquals("Bye World", out.getOut().getBody()).     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.setPattern(ExchangePattern.InOnly).     exchange.setProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.IfReplyExpected). }
false;public;0;17;;@Test public void testInOnly() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     Exchange out = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.setPattern(ExchangePattern.InOnly).             exchange.setProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.IfReplyExpected).         }     }).     // we do not expecy a reply and thus do no wait so we just get our own input back     assertEquals("Hello World", out.getIn().getBody()).     assertEquals(null, out.getOut().getBody()).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("seda:foo").     from("seda:foo").transform(constant("Bye World")).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("seda:foo").             from("seda:foo").transform(constant("Bye World")).to("mock:result").         }     }. }
