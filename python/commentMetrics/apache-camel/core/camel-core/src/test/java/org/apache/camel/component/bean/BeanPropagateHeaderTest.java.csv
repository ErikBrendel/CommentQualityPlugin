commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testBeanInOnlyPropagateHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Order OK for id: 123").     mock.expectedHeaderReceived("foo", "bar").     String out = template.requestBody("direct:start", "123", String.class).     assertEquals("OK", out).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("order", new MyOrderService()).     return jndi. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").setHeader("foo", constant("bar")).convertBodyTo(Integer.class).to("bean:order").inOnly("seda:foo").transform(constant("OK")).     from("seda:foo").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("foo", constant("bar")).convertBodyTo(Integer.class).to("bean:order").inOnly("seda:foo").transform(constant("OK")).             from("seda:foo").to("mock:result").         }     }. }
false;public;1;3;;public String confirmOrder(int id) {     return "Order OK for id: " + id. }
