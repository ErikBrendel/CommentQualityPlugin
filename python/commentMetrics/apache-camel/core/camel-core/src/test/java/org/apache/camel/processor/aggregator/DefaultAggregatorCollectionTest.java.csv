commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testDefaultAggregateCollection() throws Exception {     // START SNIPPET: e2     MockEndpoint result = getMockEndpoint("mock:result").     // we expect 4 messages grouped by the latest message only     result.expectedMessageCount(4).     result.expectedBodiesReceivedInAnyOrder("Message 1d", "Message 2b", "Message 3c", "Message 4").     // then we sent all the message at once     template.sendBodyAndHeader("direct:start", "Message 1a", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 2a", "id", "2").     template.sendBodyAndHeader("direct:start", "Message 3a", "id", "3").     template.sendBodyAndHeader("direct:start", "Message 1b", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 3b", "id", "3").     template.sendBodyAndHeader("direct:start", "Message 1c", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 3c", "id", "3").     template.sendBodyAndHeader("direct:start", "Message 2b", "id", "2").     template.sendBodyAndHeader("direct:start", "Message 1d", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 4", "id", "4").     assertMockEndpointsSatisfied(). // END SNIPPET: e2 }
false;public;0;13;;public void configure() throws Exception {     // START SNIPPET: e1     // our route is aggregating from the direct queue and sending the response to the mock     from("direct:start").aggregate(header("id")).aggregationStrategy(new UseLatestAggregationStrategy()).completionTimeout(500L).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // our route is aggregating from the direct queue and sending the response to the mock             from("direct:start").aggregate(header("id")).aggregationStrategy(new UseLatestAggregationStrategy()).completionTimeout(500L).to("mock:result").         // END SNIPPET: e1         }     }. }
