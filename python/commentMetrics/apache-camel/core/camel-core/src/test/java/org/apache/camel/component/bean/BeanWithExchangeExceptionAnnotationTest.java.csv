commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testBeanWithAnnotationAndExchangeTest() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     MockEndpoint error = getMockEndpoint("mock:error").     result.expectedMessageCount(0).     error.expectedMessageCount(1).     error.expectedBodiesReceived("The Body").     template.requestBody("direct:start", "The Body").     result.assertIsSatisfied().     error.assertIsSatisfied(). }
false;protected;0;5;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", new MyBean()).     return answer. }
false;public;0;13;;public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error")).     onException(MyCustomException.class).maximumRedeliveries(0).handled(true).bean("myBean", "handleException").to("mock:error").     from("direct:start").bean("myBean", "throwException").to("mock:result"). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error")).             onException(MyCustomException.class).maximumRedeliveries(0).handled(true).bean("myBean", "handleException").to("mock:error").             from("direct:start").bean("myBean", "throwException").to("mock:result").         }     }. }
false;public;0;3;;public void throwException() throws MyCustomException {     throw new MyCustomException("I'm being thrown!!"). }
false;public;1;4;;public void handleException(@ExchangeException Exception exception) {     assertNotNull(exception).     assertEquals("I'm being thrown!!", exception.getMessage()). }
