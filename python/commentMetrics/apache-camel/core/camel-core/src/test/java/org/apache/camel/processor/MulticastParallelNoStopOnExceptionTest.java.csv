commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     // use a pool with 2 concurrent tasks so we cannot run too fast     service = Executors.newFixedThreadPool(2).     super.setUp(). }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     service.shutdownNow(). }
false;public;0;11;;@Test public void testMulticastParallelNoStopOnExceptionOk() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello").     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello").     getMockEndpoint("mock:baz").expectedBodiesReceived("Hello").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello").     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testMulticastParalllelNoStopOnExceptionStop() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Kaboom").     getMockEndpoint("mock:bar").expectedMessageCount(0).     // we do NOT stop so baz should also receive a message     getMockEndpoint("mock:baz").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Kaboom").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
false;public;0;25;;@Override public void configure() throws Exception {     from("direct:start").multicast().parallelProcessing().executorService(service).to("direct:foo", "direct:bar", "direct:baz").end().to("mock:result").     // need a little delay to slow these okays down so we better can test stop when parallel     from("direct:foo").delay(1000).to("mock:foo").     from("direct:bar").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Kaboom".equals(body)) {                 throw new IllegalArgumentException("Forced").             }         }     }).to("mock:bar").     // need a little delay to slow these okays down so we better can test stop when parallel     from("direct:baz").delay(1000).to("mock:baz"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().parallelProcessing().executorService(service).to("direct:foo", "direct:bar", "direct:baz").end().to("mock:result").             // need a little delay to slow these okays down so we better can test stop when parallel             from("direct:foo").delay(1000).to("mock:foo").             from("direct:bar").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Kaboom".equals(body)) {                         throw new IllegalArgumentException("Forced").                     }                 }             }).to("mock:bar").             // need a little delay to slow these okays down so we better can test stop when parallel             from("direct:baz").delay(1000).to("mock:baz").         }     }. }
