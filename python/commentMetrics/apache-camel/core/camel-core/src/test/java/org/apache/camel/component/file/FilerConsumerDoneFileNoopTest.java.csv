commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/done").     super.setUp(). }
false;public;0;28;;@Test public void testDoneFile() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     // wait a bit and it should not pickup the written file as there are no done file     getMockEndpoint("mock:result").setResultMinimumWaitTime(50).     template.sendBodyAndHeader("file:target/data/done", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     resetMocks().     oneExchangeDone.reset().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     // write the done file     template.sendBodyAndHeader("file:target/data/done", "", Exchange.FILE_NAME, "done").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // done file should be kept now     File file = new File("target/data/done/done").     assertTrue("Done file should be not be deleted: " + file, file.exists()).     // as well the original file should be kept due noop     file = new File("target/data/done/hello.txt").     assertTrue("Original file should be kept: " + file, file.exists()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file:target/data/done?initialDelay=0&delay=10&doneFileName=done&noop=true").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/done?initialDelay=0&delay=10&doneFileName=done&noop=true").to("mock:result").         }     }. }
