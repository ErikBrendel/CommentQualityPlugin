commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.requestBody("direct:start", "ok").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testRollback() throws Exception {     try {         template.requestBody("direct:start", "bad").         fail("Should have thrown a RollbackExchangeException").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof RollbackExchangeException).     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("bad"). }
false;public;0;11;;@Test public void testRollbackWithExchange() throws Exception {     Exchange out = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("bad").         }     }).     assertNotNull(out.getException()).     assertIsInstanceOf(RollbackExchangeException.class, out.getException()).     assertEquals("Should be marked as rollback", true, out.isRollbackOnly()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     assertFalse("Rollback flag should have been cleared on redelivery", exchange.isRollbackOnly()). }
false;public;0;16;;@Override public void configure() throws Exception {     from("direct:start").choice().when(body().isNotEqualTo("ok")).process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertFalse("Rollback flag should have been cleared on redelivery", exchange.isRollbackOnly()).         }     }).to("mock:rollback").rollback("That do not work").otherwise().to("mock:result").end(). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when(body().isNotEqualTo("ok")).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertFalse("Rollback flag should have been cleared on redelivery", exchange.isRollbackOnly()).                 }             }).to("mock:rollback").rollback("That do not work").otherwise().to("mock:result").end().         }     }. }
