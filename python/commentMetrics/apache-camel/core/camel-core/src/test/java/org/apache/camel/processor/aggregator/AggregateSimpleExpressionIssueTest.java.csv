commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/files").     super.setUp(). }
false;public;0;4;;@Test public void testDummy() throws Exception { // noop }
true;public;0;29;// Enable me for manual unit testing ;// Enable me for manual unit testing public void xxxtestAggregateSimpleExpression() throws Exception {     // 10 files + 10 files * 100 batches     int files = 10.     int rows = 100000.     int batches = rows / 1000.     int total = files + (files * rows) + (files * batches).     LOG.info("There are " + total + " exchanges").     NotifyBuilder notify = new NotifyBuilder(context).whenDone(total).create().     LOG.info("Writing 10 files with 100000 rows in each file").     // write 10 files of 100k rows     for (int i = 0. i < files. i++) {         Writer out = IOHelper.buffered(new FileWriter(new File("target/data/files", "data" + i))).         for (int j = 0. j < rows. j++) {             out.write(DATA).         }         out.close().     }     // start the route     StopWatch watch = new StopWatch().     context.getRouteController().startRoute("foo").     LOG.info("Waiting to process all the files").     boolean matches = notify.matches(3, TimeUnit.MINUTES).     LOG.info("Should process all files " + matches).     LOG.info("Time taken " + watch.taken() + " ms"). }
false;public;0;11;;@Override public void configure() throws Exception {     from("file:target/data/files").routeId("foo").noAutoStartup().log("Picked up ${file:name}").split().tokenize("\n").streaming().aggregate(constant(true), aggStrategy).completionSize(simple("1000")).completionTimeout(simple("500")).bean(myBean).end().end(). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/files").routeId("foo").noAutoStartup().log("Picked up ${file:name}").split().tokenize("\n").streaming().aggregate(constant(true), aggStrategy).completionSize(simple("1000")).completionTimeout(simple("500")).bean(myBean).end().end().         }     }. }
false;public;1;3;;public void invoke(final List<String> strList) {     LOG.info("Batch " + (++cnt)). }
false;public;2;16;;@SuppressWarnings("unchecked") public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     String str = newExchange.getIn().getBody(String.class).     if (oldExchange == null) {         List<String> list = new ArrayList<>(batchSize).         list.add(str).         newExchange.getIn().setBody(list).         return newExchange.     }     List<String> list = oldExchange.getIn().getBody(List.class).     list.add(str).     return oldExchange. }
