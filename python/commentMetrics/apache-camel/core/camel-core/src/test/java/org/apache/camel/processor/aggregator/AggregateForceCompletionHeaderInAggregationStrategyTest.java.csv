commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testCompletePreviousOnNewGroup() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("AAA", "BB").     template.sendBody("direct:start", "A,A,A,B,B").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").split(body()).to("log:input?showAll=true").aggregate(simple("${body}"), new MyAggregationStrategy()).completionPredicate(exchangeProperty(Exchange.SPLIT_COMPLETE)).to("log:aggregated", "mock:aggregated"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body()).to("log:input?showAll=true").aggregate(simple("${body}"), new MyAggregationStrategy()).completionPredicate(exchangeProperty(Exchange.SPLIT_COMPLETE)).to("log:aggregated", "mock:aggregated").         }     }. }
false;public;2;15;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         // we start a new correlation group, so complete all previous groups         newExchange.setProperty(Exchange.AGGREGATION_COMPLETE_ALL_GROUPS, true).         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     // copy over flag to know when splitting is done on the old exchange     oldExchange.setProperty(Exchange.SPLIT_COMPLETE, newExchange.getProperty(Exchange.SPLIT_COMPLETE)).     return oldExchange. }
