commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testControlBusStartStop() throws Exception {     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     // store a pending message     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     // start the route using control bus     template.sendBody("controlbus:route?routeId=foo&action=start", null).     assertMockEndpointsSatisfied().     // now stop the route, using a header     template.sendBody("controlbus:route?routeId=foo&action=stop", null).     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()). }
false;public;0;23;;@Test public void testControlBusSuspendResume() throws Exception {     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     // store a pending message     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     // start the route using control bus     template.sendBody("controlbus:route?routeId=foo&action=start", null).     assertMockEndpointsSatisfied().     // now suspend the route, using a header     template.sendBody("controlbus:route?routeId=foo&action=suspend", null).     assertEquals("Suspended", context.getRouteController().getRouteStatus("foo").name()).     // now resume the route, using a header     template.sendBody("controlbus:route?routeId=foo&action=resume", null).     assertEquals("Started", context.getRouteController().getRouteStatus("foo").name()). }
false;public;0;12;;@Test public void testControlBusStatus() throws Exception {     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     String status = template.requestBody("controlbus:route?routeId=foo&action=status", null, String.class).     assertEquals("Stopped", status).     context.getRouteController().startRoute("foo").     status = template.requestBody("controlbus:route?routeId=foo&action=status", null, String.class).     assertEquals("Started", status). }
false;public;0;12;;@Test public void testControlBusCurrentRouteStatus() throws Exception {     assertTrue(context.getRouteController().getRouteStatus("current").isStarted()).     MockEndpoint mock = getMockEndpoint("mock:current").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(ServiceStatus.Started.name()).     sendBody("seda:current", null).     mock.assertIsSatisfied(). }
false;public;0;12;;@Test public void testControlBusStatusLevelWarn() throws Exception {     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     String status = template.requestBody("controlbus:route?routeId=foo&action=status&loggingLevel=WARN", null, String.class).     assertEquals("Stopped", status).     context.getRouteController().startRoute("foo").     status = template.requestBody("controlbus:route?routeId=foo&action=status&loggingLevel=WARN", null, String.class).     assertEquals("Started", status). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo").routeId("foo").noAutoStartup().to("mock:foo").     from("seda:current").routeId("current").to("controlbus:route?routeId=current&action=status&loggingLevel=WARN").to("mock:current"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("foo").noAutoStartup().to("mock:foo").             from("seda:current").routeId("current").to("controlbus:route?routeId=current&action=status&loggingLevel=WARN").to("mock:current").         }     }. }
