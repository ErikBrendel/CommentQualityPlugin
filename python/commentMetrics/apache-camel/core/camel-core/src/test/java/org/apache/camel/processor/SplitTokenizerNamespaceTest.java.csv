commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSplitTokenizerWithImplicitNamespaces() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     // we expect to receive results that have namespace definitions on each token     // we could receive nodes from multiple namespaces since we did not specify a namespace prefix,     mock.expectedBodiesReceived("<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Claus</ns1:person>", "<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">James</ns1:person>", "<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Willem</ns1:person>", "<ns2:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Rich</ns2:person>").     template.sendBody("direct:noPrefix", getXmlBody()).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testSplitTokenizerWithExplicitNamespaces() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     // we expect to receive results that have namespace definitions on each token     // we provided an explicit namespace prefix value in the route, so we will only receive nodes that have a matching prefix value     mock.expectedBodiesReceived("<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Claus</ns1:person>", "<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">James</ns1:person>", "<ns1:person xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">Willem</ns1:person>").     template.sendBody("direct:explicitPrefix", getXmlBody()).     assertMockEndpointsSatisfied(). }
false;protected;0;10;;protected String getXmlBody() {     StringBuilder sb = new StringBuilder("<?xml version=\"1.0\"?>\n").     sb.append("<ns1:persons xmlns:ns1=\"urn:org.apache.camel\" xmlns:ns2=\"urn:org.apache.cameltoo\">\n").     sb.append("  <ns1:person>Claus</ns1:person>\n").     sb.append("  <ns1:person>James</ns1:person>\n").     sb.append("  <ns1:person>Willem</ns1:person>\n").     sb.append("  <ns2:person>Rich</ns2:person>\n").     sb.append("</ns1:persons>").     return sb.toString(). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:noPrefix").split().tokenizeXML("person", "persons").to("mock:split").     from("direct:explicitPrefix").split().tokenizeXML("ns1:person", "ns1:persons").to("mock:split"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:noPrefix").split().tokenizeXML("person", "persons").to("mock:split").             from("direct:explicitPrefix").split().tokenizeXML("ns1:person", "ns1:persons").to("mock:split").         }     }. }
