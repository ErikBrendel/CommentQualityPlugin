commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;12;;@Override public void configure() throws Exception {     onCompletion().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").     from("direct:start").process(new MyProcessor()).to("mock:result"). }
false;public;0;30;;@Test public void testAsyncComplete() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").             from("direct:start").process(new MyProcessor()).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:before").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:before").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     getMockEndpoint("mock:after").expectedBodiesReceived("OnComplete:Bye World").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     onCompletion().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").     from("direct:start").process(new MyProcessor()).to("mock:result"). }
false;public;0;34;;@Test public void testAsyncFailure() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").             from("direct:start").process(new MyProcessor()).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:before").expectedBodiesReceived("Kabom").     getMockEndpoint("mock:before").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     getMockEndpoint("mock:after").expectedBodiesReceived("OnComplete:Kabom").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.requestBody("direct:start", "Kabom").         fail("Should throw exception").     } catch (CamelExecutionException e) {         assertEquals("Kabom", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     onCompletion().useOriginalBody().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").     from("direct:start").process(new MyProcessor()).to("mock:result"). }
false;public;0;30;;@Test public void testAsyncCompleteUseOriginalBody() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().useOriginalBody().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").             from("direct:start").process(new MyProcessor()).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:before").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:before").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     getMockEndpoint("mock:after").expectedBodiesReceived("OnComplete:Hello World").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     onCompletion().useOriginalBody().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").     from("direct:start").transform(body().prepend("Before:${body}")).process(new MyProcessor()).to("mock:result"). }
false;public;0;35;;@Test public void testAsyncFailureUseOriginalBody() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().useOriginalBody().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).to("mock:after").             from("direct:start").transform(body().prepend("Before:${body}")).process(new MyProcessor()).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:before").expectedBodiesReceived("Kabom").     getMockEndpoint("mock:before").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     getMockEndpoint("mock:after").expectedBodiesReceived("OnComplete:Kabom").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.requestBody("direct:start", "Kabom").         fail("Should throw exception").     } catch (CamelExecutionException e) {         assertEquals("Kabom", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     onCompletion().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).throwException(new IllegalAccessException("From onComplete")).to("mock:after").     from("direct:start").process(new MyProcessor()).to("mock:result"). }
false;public;0;32;;@Test public void testAsyncCompleteOnCompleteFail() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().parallelProcessing().to("mock:before").delay(250).setBody(simple("OnComplete:${body}")).throwException(new IllegalAccessException("From onComplete")).to("mock:after").             from("direct:start").process(new MyProcessor()).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:before").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:before").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     getMockEndpoint("mock:after").expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     if (exchange.getIn().getBody(String.class).contains("Kabom")) {         throw new IllegalArgumentException("Kabom").     }     exchange.getIn().setBody("Bye World"). }
