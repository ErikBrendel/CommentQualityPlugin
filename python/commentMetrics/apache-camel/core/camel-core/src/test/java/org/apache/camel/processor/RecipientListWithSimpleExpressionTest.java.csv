commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").recipientList(simple("mock:${in.header.queue}")). }
false;public;0;10;;public void run() {     for (int i = 0. i < 10. i++) {         template.sendBodyAndHeader("direct:start", "Hello " + i, "queue", i).         try {             Thread.sleep(5).         } catch (Exception e) {         // ignore         }     } }
false;public;0;35;;@Test public void testRecipientList() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").recipientList(simple("mock:${in.header.queue}")).         }     }).     context.start().     for (int i = 0. i < 10. i++) {         getMockEndpoint("mock:" + i).expectedMessageCount(50).     }     // use concurrent producers to send a lot of messages     ExecutorService executors = Executors.newFixedThreadPool(10).     for (int i = 0. i < 50. i++) {         executors.execute(new Runnable() {              public void run() {                 for (int i = 0. i < 10. i++) {                     template.sendBodyAndHeader("direct:start", "Hello " + i, "queue", i).                     try {                         Thread.sleep(5).                     } catch (Exception e) {                     // ignore                     }                 }             }         }).     }     assertMockEndpointsSatisfied().     executors.shutdownNow(). }
false;public;1;4;;@org.apache.camel.RecipientList public String route(@Header("queue") String queue) {     return "mock:" + queue. }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:0").to("mock:0").     from("direct:1").to("mock:1").     from("direct:2").to("mock:2").     from("direct:3").to("mock:3").     from("direct:4").to("mock:4").     from("direct:5").to("mock:5").     from("direct:6").to("mock:6").     from("direct:7").to("mock:7").     from("direct:8").to("mock:8").     from("direct:9").to("mock:9"). }
false;public;0;10;;public void run() {     for (int i = 0. i < 10. i++) {         template.sendBodyAndHeader("direct:" + i, "Hello " + i, "queue", i).         try {             Thread.sleep(5).         } catch (Exception e) {         // ignore         }     } }
false;public;0;43;;@Test public void testStatic() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:0").to("mock:0").             from("direct:1").to("mock:1").             from("direct:2").to("mock:2").             from("direct:3").to("mock:3").             from("direct:4").to("mock:4").             from("direct:5").to("mock:5").             from("direct:6").to("mock:6").             from("direct:7").to("mock:7").             from("direct:8").to("mock:8").             from("direct:9").to("mock:9").         }     }).     context.start().     for (int i = 0. i < 10. i++) {         getMockEndpoint("mock:" + i).expectedMessageCount(50).     }     // use concurrent producers to send a lot of messages     ExecutorService executors = Executors.newFixedThreadPool(10).     for (int i = 0. i < 50. i++) {         executors.execute(new Runnable() {              public void run() {                 for (int i = 0. i < 10. i++) {                     template.sendBodyAndHeader("direct:" + i, "Hello " + i, "queue", i).                     try {                         Thread.sleep(5).                     } catch (Exception e) {                     // ignore                     }                 }             }         }).     }     assertMockEndpointsSatisfied().     executors.shutdownNow(). }
