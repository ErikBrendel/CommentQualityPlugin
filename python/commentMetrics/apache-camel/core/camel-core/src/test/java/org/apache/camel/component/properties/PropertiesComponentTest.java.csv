commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{cool.end}}"). }
false;public;0;16;;@Test public void testPropertiesComponent() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{cool.end}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{cool.end}}"). }
false;public;0;17;;@Test public void testPropertiesComponentTwo() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{cool.end}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:[[cool.end]]"). }
false;public;0;29;;@Test public void testPropertiesComponentCustomTokens() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPrefixToken("[[").     pc.setSuffixToken("]]").     assertEquals("[[", pc.getPrefixToken()).     assertEquals("]]", pc.getSuffixToken()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:[[cool.end]]").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     pc.setPrefixToken(null).     pc.setSuffixToken(null).     assertEquals(PropertiesComponent.DEFAULT_PREFIX_TOKEN, pc.getPrefixToken()).     assertEquals(PropertiesComponent.DEFAULT_SUFFIX_TOKEN, pc.getSuffixToken()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:cool").to("mock:result"). }
false;public;0;17;;@Test public void testPropertiesComponentTemplate() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:cool").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("{{cool.start}}", "Hello World").     template.sendBody("{{cool.start}}", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:mock:{{cool.result}}"). }
false;public;0;16;;@Test public void testPropertiesComponentResult() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{cool.mock}}:{{cool.mock}}"). }
false;public;0;16;;@Test public void testPropertiesComponentMockMock() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{cool.mock}}:{{cool.mock}}").         }     }).     context.start().     getMockEndpoint("mock:mock").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.concat"). }
false;public;0;16;;@Test public void testPropertiesComponentConcat() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.concat").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{bar.end}}?locations=org/apache/camel/component/properties/bar.properties"). }
false;public;0;16;;@Test public void testPropertiesComponentLocationOverride() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{bar.end}}?locations=org/apache/camel/component/properties/bar.properties").         }     }).     context.start().     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("properties:bar.end?locations=org/apache/camel/component/properties/bar.properties").     from("direct:cheese").to("properties:cheese.end?locations=org/apache/camel/component/properties/bar.properties," + "classpath:org/apache/camel/component/properties/cheese.properties"). }
false;public;0;20;;@Test public void testPropertiesComponentLocationsOverride() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:bar.end?locations=org/apache/camel/component/properties/bar.properties").             from("direct:cheese").to("properties:cheese.end?locations=org/apache/camel/component/properties/bar.properties," + "classpath:org/apache/camel/component/properties/cheese.properties").         }     }).     context.start().     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:cheese").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:cheese", "Hello Cheese").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{foo.unknown}}"). }
false;public;0;17;;@Test public void testPropertiesComponentInvalidKey() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{foo.unknown}}").         }     }).     try {         context.start().         fail("Should throw exception").     } catch (FailedToCreateRouteException e) {         ResolveEndpointFailedException cause = assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause()).         assertEquals("Property with key [foo.unknown] not found in properties from text: {{foo.unknown}}", iae.getMessage()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.a"). }
false;public;0;17;;@Test public void testPropertiesComponentCircularReference() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.a").         }     }).     try {         context.start().         fail("Should throw exception").     } catch (FailedToCreateRouteException e) {         ResolveEndpointFailedException cause = assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause()).         assertEquals("Circular reference detected with key [cool.a] from text: {{cool.a}}", iae.getMessage()).     } }
false;public;0;6;;@Override public void configure() throws Exception {     // properties component can also have {{ }} around but its not needed     from("direct:start").to("properties:{{cool.end}}").     from("direct:foo").to("properties:mock:{{cool.result}}"). }
false;public;0;19;;@Test public void testPropertiesComponentCacheDefault() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // properties component can also have {{ }} around but its not needed             from("direct:start").to("properties:{{cool.end}}").             from("direct:foo").to("properties:mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.end").     from("direct:foo").to("properties:mock:{{cool.result}}"). }
false;public;0;21;;@Test public void testPropertiesComponentCacheDisabled() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setCache(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.end").             from("direct:foo").to("properties:mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("properties:end").     from("direct:foo").to("properties:mock:{{result}}"). }
false;public;0;21;;@Test public void testPropertiesComponentPropertyPrefix() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertyPrefix("cool.").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:end").             from("direct:foo").to("properties:mock:{{result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("properties:end").     from("direct:foo").to("properties:mock:{{result}}"). }
false;public;0;25;;@Test public void testPropertiesComponentParameterizedPropertyPrefix() throws Exception {     System.setProperty("myPrefix", "cool").     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertyPrefix("${myPrefix}.").     pc.setPropertySuffix(".xx").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:end").             from("direct:foo").to("properties:mock:{{result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied().     System.clearProperty("myPrefix"). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.end").     from("direct:foo").to("properties:mock:{{result}}"). }
false;public;0;21;;@Test public void testPropertiesComponentPropertyPrefixFallbackDefault() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertyPrefix("cool.").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.end").             from("direct:foo").to("properties:mock:{{result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:doesnotexist"). }
false;public;0;22;;@Test public void testPropertiesComponentPropertyPrefixFallbackDefaultNotFound() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertyPrefix("cool.").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:doesnotexist").         }     }).     try {         context.start().         fail("Should throw exception").     } catch (FailedToCreateRouteException e) {         ResolveEndpointFailedException cause = assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause()).         assertEquals("Property with key [cool.doesnotexist] (and original key [doesnotexist]) not found in properties from text: {{doesnotexist}}", iae.getMessage()).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.end").     from("direct:foo").to("properties:mock:{{result}}"). }
false;public;0;24;;@Test public void testPropertiesComponentPropertyPrefixFallbackFalse() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertyPrefix("cool.").     pc.setFallbackToUnaugmentedProperty(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.end").             from("direct:foo").to("properties:mock:{{result}}").         }     }).     try {         context.start().         fail("Should throw exception").     } catch (FailedToCreateRouteException e) {         ResolveEndpointFailedException cause = assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause()).         assertEquals("Property with key [cool.cool.end] not found in properties from text: {{cool.end}}", iae.getMessage()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool"). }
false;public;0;19;;@Test public void testPropertiesComponentPropertySuffix() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertySuffix(".end").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.end"). }
false;public;0;19;;@Test public void testPropertiesComponentPropertySuffixFallbackDefault() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertySuffix(".end").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.end").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.end"). }
false;public;0;23;;@Test public void testPropertiesComponentPropertySuffixFallbackFalse() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setPropertySuffix(".end").     pc.setFallbackToUnaugmentedProperty(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.end").         }     }).     try {         context.start().         fail("Should throw exception").     } catch (FailedToCreateRouteException e) {         ResolveEndpointFailedException cause = assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, cause.getCause()).         assertEquals("Property with key [cool.end.end] not found in properties from text: {{cool.end}}", iae.getMessage()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:xxx?locations=foo/${xxx}"). }
false;public;0;16;;@Test public void testJvmSystemPropertyNotFound() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").to("properties:xxx?locations=foo/${xxx}").             }         }).         context.start().         fail("Should thrown an exception").     } catch (FailedToCreateRouteException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("Cannot find JVM system property with key: xxx", cause.getMessage()).     } }
false;public;0;11;;@Test public void testCache() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     assertTrue(pc.isCache()).     assertNotNull(pc).     for (int i = 0. i < 2000. i++) {         String uri = pc.parseUri("{{cool.mock}}:" + i).         assertEquals("mock:" + i, uri).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").setBody(simple("${properties:cool.mock}${body}")).to("mock:result"). }
false;public;0;20;;@Test public void testCacheRoute() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setBody(simple("${properties:cool.mock}${body}")).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2000).     for (int i = 0. i < 2000. i++) {         template.sendBody("direct:start", i).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testQuotedPrefix() throws Exception {     assertEquals("mock", context.resolvePropertyPlaceholders("{{cool.mock}}")).     assertEquals("'{{' + something + '}}'", context.resolvePropertyPlaceholders("'{{' + something + '}}'")).     assertEquals("\"{{\" + something + \"}}\"", context.resolvePropertyPlaceholders("\"{{\" + something + \"}}\"")).     assertEquals("mock'", context.resolvePropertyPlaceholders("{{cool.mock}}'")).     assertEquals("mock\"", context.resolvePropertyPlaceholders("{{cool.mock}}\"")).     assertEquals("'mock", context.resolvePropertyPlaceholders("'{{cool.mock}}")).     assertEquals("\"mock", context.resolvePropertyPlaceholders("\"{{cool.mock}}")). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{cool.result}}"). }
false;public;0;23;;@Test public void testPropertiesComponentOverride() throws Exception {     System.setProperty("cool.result", "bar").     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setSystemPropertiesMode(PropertiesComponent.SYSTEM_PROPERTIES_MODE_OVERRIDE).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied().     System.clearProperty("cool.result"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{beer}}").to("mock:{{cool.result}}"). }
false;public;0;26;;@Test public void testPropertiesComponentFallback() throws Exception {     System.setProperty("cool.result", "bar").     System.setProperty("beer", "Carlsberg").     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setSystemPropertiesMode(PropertiesComponent.SYSTEM_PROPERTIES_MODE_FALLBACK).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{beer}}").to("mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:Carlsberg").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied().     System.clearProperty("cool.result").     System.clearProperty("beer"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{beer}}").to("mock:{{cool.result}}"). }
false;public;0;23;;@Test public void testPropertiesComponentNever() throws Exception {     System.setProperty("cool.result", "bar").     System.setProperty("beer", "Carlsberg").     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setSystemPropertiesMode(PropertiesComponent.SYSTEM_PROPERTIES_MODE_NEVER).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{beer}}").to("mock:{{cool.result}}").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (FailedToCreateRouteException e) {         assertEquals("Property with key [beer] not found in properties from text: mock:{{beer}}", e.getCause().getMessage()).     }     System.clearProperty("cool.result").     System.clearProperty("beer"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{FOO_SERVICE_HOST}}"). }
false;public;0;21;;@Test public void testPropertiesComponentEnvOverride() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setEnvironmentVariableMode(PropertiesComponent.ENVIRONMENT_VARIABLES_MODE_OVERRIDE).     pc.setLocation("org/apache/camel/component/properties/env.properties").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{FOO_SERVICE_HOST}}").         }     }).     context.start().     getMockEndpoint("mock:hello").expectedMessageCount(0).     getMockEndpoint("mock:myserver").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{FOO_SERVICE_PORT}}"). }
false;public;0;22;;@Test public void testPropertiesComponentEnvFallback() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setEnvironmentVariableMode(PropertiesComponent.ENVIRONMENT_VARIABLES_MODE_FALLBACK).     pc.setLocation("org/apache/camel/component/properties/env.properties").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{FOO_SERVICE_PORT}}").         }     }).     context.start().     getMockEndpoint("mock:8081").expectedMessageCount(1).     getMockEndpoint("mock:hello").expectedMessageCount(0).     getMockEndpoint("mock:myserver").expectedMessageCount(0).     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{UNKNOWN}}"). }
false;public;0;19;;@Test public void testPropertiesComponentEnvNever() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setEnvironmentVariableMode(PropertiesComponent.ENVIRONMENT_VARIABLES_MODE_NEVER).     pc.setLocation("org/apache/camel/component/properties/env.properties").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{UNKNOWN}}").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (FailedToCreateRouteException e) {         assertEquals("Property with key [UNKNOWN] not found in properties from text: mock:{{UNKNOWN}}", e.getCause().getMessage()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:{{FOO_SERVICE_PORT}}"). }
false;public;0;27;;@Test public void testPropertiesComponentEnvFallbackJvmOverride() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setEnvironmentVariableMode(PropertiesComponent.ENVIRONMENT_VARIABLES_MODE_FALLBACK).     pc.setLocation("org/apache/camel/component/properties/env.properties").     // lets override the OS environment variable by setting a JVM system property     System.setProperty("FOO_SERVICE_PORT", "hello").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").to("mock:{{FOO_SERVICE_PORT}}").         }     }).     context.start().     getMockEndpoint("mock:8081").expectedMessageCount(0).     getMockEndpoint("mock:hello").expectedMessageCount(1).     getMockEndpoint("mock:myserver").expectedMessageCount(0).     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied().     System.clearProperty("FOO_SERVICE_PORT"). }
false;public;0;10;;@Test public void testCamelProperties() throws Exception {     context.getGlobalOptions().put("foo", "Hello {{cool.name}}").     context.getGlobalOptions().put("bar", "cool.name").     context.start().     assertEquals("Hello Camel", context.getGlobalOptions().get("foo")).     assertEquals("cool.name", context.getGlobalOptions().get("bar")). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("classpath:org/apache/camel/component/properties/myproperties.properties")).     return context. }
