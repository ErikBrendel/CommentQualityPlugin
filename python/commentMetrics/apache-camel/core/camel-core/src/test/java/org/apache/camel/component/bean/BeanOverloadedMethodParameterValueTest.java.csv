commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "hello(${body})").to("mock:result"). }
false;public;0;19;;@Test public void testHelloOverloadedString() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "hello(${body})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Claus").     template.sendBodyAndHeader("direct:start", "Claus", "country", "Denmark").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "hello(*)").to("mock:result"). }
false;public;0;19;;@Test public void testHelloOverloadedWildcard() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "hello(*)").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Claus").     template.sendBodyAndHeader("direct:start", "Claus", "country", "Denmark").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     // START SNIPPET: e2     from("direct:start").bean(MyBean.class, "hello(${body}, ${header.country})").to("mock:result"). // END SNIPPET: e2 }
false;public;0;20;;@Test public void testHelloOverloadedStringString() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e2             from("direct:start").bean(MyBean.class, "hello(${body}, ${header.country})").to("mock:result").         // END SNIPPET: e2         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Claus you are from Denmark").     template.sendBodyAndHeader("direct:start", "Claus", "country", "Denmark").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "hello(*, ${header.country})").to("mock:result"). }
false;public;0;19;;@Test public void testHelloOverloadedWildcardString() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "hello(*, ${header.country})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Claus you are from Denmark").     template.sendBodyAndHeader("direct:start", "Claus", "country", "Denmark").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "times(${body},3)").to("mock:result"). }
false;public;0;19;;@Test public void testTimesOverloadedStringInt() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "times(${body},3)").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("AAA").     template.sendBody("direct:start", "A").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "times(${body},${header.times})").to("mock:result"). }
false;public;0;19;;@Test public void testTimesOverloadedStringIntHeader() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "times(${body},${header.times})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("AAA").     template.sendBodyAndHeader("direct:start", "A", "times", 3).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "times(byte[], ${header.times})").to("mock:result"). }
false;public;0;19;;@Test public void testTimesOverloadedBytesInt() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "times(byte[], ${header.times})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("ABC,ABC,ABC").     template.sendBodyAndHeader("direct:start", "ABC".getBytes(), "times", "3").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MyBean.class, "times(byte[],${header.times})").to("mock:result"). }
false;public;0;19;;@Test public void testTimesOverloadedBytesIntLanguageTokens() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyBean.class, "times(byte[],${header.times})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("ABC,ABC,ABC").     template.sendBodyAndHeader("direct:start", "ABC".getBytes(), "times", "3").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public String hello(String name) {     return "Hello " + name. }
false;public;2;3;;public String hello(String name, String country) {     return "Hello " + name + " you are from " + country. }
false;public;2;7;;public String times(String name, int times) {     StringBuilder sb = new StringBuilder().     for (int i = 0. i < times. i++) {         sb.append(name).     }     return sb.toString(). }
false;public;2;11;;public String times(byte[] data, int times) {     String s = new String(data).     StringBuilder sb = new StringBuilder().     for (int i = 0. i < times. i++) {         sb.append(s).         if (i < times - 1) {             sb.append(",").         }     }     return sb.toString(). }
false;public;3;10;;public String times(String name, int times, char separator) {     StringBuilder sb = new StringBuilder().     for (int i = 0. i < times. i++) {         sb.append(name).         if (i < times - 1) {             sb.append(separator).         }     }     return sb.toString(). }
