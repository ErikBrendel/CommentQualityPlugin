commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSendMatchingMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).exchangeProperty(Exchange.FILTER_MATCHED).isEqualTo(true).     getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isNotNull().     getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isEqualTo(true).     template.sendBodyAndHeader("direct:start", "<matched/>", "foo", "bar").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testSendNotMatchingMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isNotNull().     getMockEndpoint("mock:end").message(0).exchangeProperty(Exchange.FILTER_MATCHED).isEqualTo(false).     template.sendBodyAndHeader("direct:start", "<notMatched/>", "foo", "notMatchedHeaderValue").     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() {     from("direct:start").filter(header("foo").isEqualTo("bar")).to("mock:result").end().to("mock:end"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").filter(header("foo").isEqualTo("bar")).to("mock:result").end().to("mock:end").         }     }. }
