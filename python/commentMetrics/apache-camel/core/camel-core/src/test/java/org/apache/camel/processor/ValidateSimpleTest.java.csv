commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start", Endpoint.class).     resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class). }
false;public;0;8;;@Test public void testSendMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(1).     template.sendBody(startEndpoint, "Hello Camel").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testSendNotMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(0).     try {         template.sendBody(startEndpoint, "Bye World").         fail("CamelExecutionException expected").     } catch (CamelExecutionException e) {         // expected         assertIsInstanceOf(PredicateValidationException.class, e.getCause()).         String s = "Validation failed for Predicate[Simple: ${body} contains 'Camel'].".         assertTrue(e.getCause().getMessage().startsWith(s)).     }     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() {     from("direct:start").validate().simple("${body} contains 'Camel'").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").validate().simple("${body} contains 'Camel'").to("mock:result").         }     }. }
