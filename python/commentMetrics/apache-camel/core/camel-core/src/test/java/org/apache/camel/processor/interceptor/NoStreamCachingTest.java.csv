commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     a = getMockEndpoint("mock:a").     b = getMockEndpoint("mock:b"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:a").noStreamCaching().to("mock:a"). }
false;public;0;19;;@Test public void testNoStreamCache() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").noStreamCaching().to("mock:a").         }     }).     context.start().     a.expectedMessageCount(1).     InputStream message = new ByteArrayInputStream(MESSAGE.getBytes()).     template.sendBody("direct:a", message).     assertMockEndpointsSatisfied().     assertTrue(a.assertExchangeReceived(0).getIn().getBody() instanceof ByteArrayInputStream).     assertEquals(a.assertExchangeReceived(0).getIn().getBody(String.class), MESSAGE). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:a").to("mock:a"). }
false;public;0;19;;@Test public void testNoStreamCacheIsDefault() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").to("mock:a").         }     }).     context.start().     a.expectedMessageCount(1).     InputStream message = new ByteArrayInputStream(MESSAGE.getBytes()).     template.sendBody("direct:a", message).     assertMockEndpointsSatisfied().     assertTrue(a.assertExchangeReceived(0).getIn().getBody() instanceof ByteArrayInputStream).     assertEquals(a.assertExchangeReceived(0).getIn().getBody(String.class), MESSAGE). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:a").to("mock:a").     from("direct:b").streamCaching().to("mock:b"). }
false;public;0;29;;@Test public void testMixed() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").to("mock:a").             from("direct:b").streamCaching().to("mock:b").         }     }).     context.start().     a.expectedMessageCount(1).     b.expectedMessageCount(1).     InputStream message = new ByteArrayInputStream(MESSAGE.getBytes()).     template.sendBody("direct:a", message).     InputStream message2 = new ByteArrayInputStream(MESSAGE.getBytes()).     template.sendBody("direct:b", message2).     assertMockEndpointsSatisfied().     assertTrue(a.assertExchangeReceived(0).getIn().getBody() instanceof ByteArrayInputStream).     assertEquals(a.assertExchangeReceived(0).getIn().getBody(String.class), MESSAGE).     assertTrue(b.assertExchangeReceived(0).getIn().getBody() instanceof StreamCache).     assertEquals(b.assertExchangeReceived(0).getIn().getBody(String.class), MESSAGE). }
