commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testStopStart() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("A").     template.sendBody("seda:foo", "A").     assertMockEndpointsSatisfied().     log.info("Stopping").     // now suspend and dont expect a message to be routed     resetMocks().     mock.expectedMessageCount(0).     context.getRouteController().stopRoute("foo").     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     Route route = context.getRoute("foo").     if (route instanceof StatefulService) {         assertEquals("Stopped", ((StatefulService) route).getStatus().name()).     }     template.sendBody("seda:foo", "B").     mock.assertIsSatisfied(1000).     log.info("Starting").     // now resume and expect the previous message to be routed     resetMocks().     mock.expectedBodiesReceived("B").     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     assertEquals("Started", context.getRouteController().getRouteStatus("foo").name()).     route = context.getRoute("foo").     if (route instanceof StatefulService) {         assertEquals("Started", ((StatefulService) route).getStatus().name()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("seda:foo").routeId("foo").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("foo").to("log:foo").to("mock:result").         }     }. }
