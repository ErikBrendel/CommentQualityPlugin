commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testXsltTerminate() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(1).     assertMockEndpointsSatisfied().     Exchange out = getMockEndpoint("mock:dead").getReceivedExchanges().get(0).     assertNotNull(out).     // this exception is just a generic xslt error     Exception cause = out.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertNotNull(cause).     // we have the xsl termination message as a warning property on the exchange     Exception warning = out.getProperty(Exchange.XSLT_WARNING, Exception.class).     assertNotNull(warning).     assertEquals("Error: DOB is an empty string!", warning.getMessage()). }
false;public;0;9;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")).     from("file:src/test/data/?fileName=terminate.xml&noop=true&initialDelay=0&delay=10").to("xslt:org/apache/camel/component/xslt/terminate.xsl").to("log:foo").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead")).             from("file:src/test/data/?fileName=terminate.xml&noop=true&initialDelay=0&delay=10").to("xslt:org/apache/camel/component/xslt/terminate.xsl").to("log:foo").to("mock:result").         }     }. }
