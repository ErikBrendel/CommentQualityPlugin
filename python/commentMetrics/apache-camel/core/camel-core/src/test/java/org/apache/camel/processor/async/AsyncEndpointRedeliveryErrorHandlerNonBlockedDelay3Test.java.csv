commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testRedelivery() throws Exception {     MockEndpoint before = getMockEndpoint("mock:result").     before.expectedBodiesReceived("Hello World").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Bye Camel").     template.sendBody("seda:start", "Hello World").     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;23;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery()).     from("seda:start").to("log:before").to("mock:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("async:bye:camel?failFirstAttempts=2").to("log:after").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("mock:result"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(100).asyncDelayedRedelivery()).             from("seda:start").to("log:before").to("mock:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:camel?failFirstAttempts=2").to("log:after").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("mock:result").         }     }. }
