commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testSetHeaderMidRouteThenRemove() throws Exception {     mid.expectedMessageCount(1).     end.expectedMessageCount(1).     template.sendBody("direct:start", "<blah/>").     // make sure we got the message     assertMockEndpointsSatisfied().     List<Exchange> midExchanges = mid.getExchanges().     Exchange midExchange = midExchanges.get(0).     String actualHeaderValue = midExchange.getIn().getHeader(headerName, String.class).     assertEquals(expectedHeaderValue, actualHeaderValue).     List<Exchange> endExchanges = end.getExchanges().     Exchange endExchange = endExchanges.get(0).     // header should be removed     assertNull(endExchange.getIn().getHeader(headerName, String.class)). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     end = getMockEndpoint("mock:end").     mid = getMockEndpoint("mock:mid"). }
false;public;0;5;;public void configure() {     from("direct:start").setHeader(headerName).constant(expectedHeaderValue).to("mock:mid").removeHeader(headerName).to("mock:end"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").setHeader(headerName).constant(expectedHeaderValue).to("mock:mid").removeHeader(headerName).to("mock:end").         }     }. }
