commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testTokenXMLPair() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedMessageCount(3).     mock.message(0).body().isEqualTo("<order id=\"1\" xmlns=\"http:acme.com\" xmlns:foo=\"http:foo.com\">Camel in Action</order>").     mock.message(1).body().isEqualTo("<order id=\"2\" xmlns=\"http:acme.com\" xmlns:foo=\"http:foo.com\">ActiveMQ in Action</order>").     mock.message(2).body().isEqualTo("<order id=\"3\" xmlns=\"http:acme.com\" xmlns:foo=\"http:foo.com\">DSL in Action</order>").     String body = createBody().     template.sendBodyAndHeader("file:target/data/pair", body, Exchange.FILE_NAME, "orders.xml").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Test public void testTokenXMLPair2() throws Exception { // noop }
false;protected;0;12;;@Override protected String createBody() {     // multiple namespaces on parent on multiple lines     StringBuilder sb = new StringBuilder("<?xml version=\"1.0\"?>\n").     sb.append("<orders xmlns=\"http:acme.com\"\n").     sb.append("        xmlns:foo=\"http:foo.com\">\n").     sb.append("  <order id=\"1\">Camel in Action</order>\n").     sb.append("  <order id=\"2\">ActiveMQ in Action</order>\n").     sb.append("  <order id=\"3\">DSL in Action</order>\n").     sb.append("</orders>").     return sb.toString(). }
