commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSplitNoAggregationStrategy() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Hello World", "Bye World", "Hi World").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World,Bye World,Hi World").     template.sendBody("direct:start", "Hello World,Bye World,Hi World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testSplitNoAggregationStrategyException() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Hello World", "Bye World", "Hi World").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World,Kaboom,Bye World,Hi World").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).process(new MyProcessor()).to("mock:split").end().to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).process(new MyProcessor()).to("mock:split").end().to("mock:result").         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
