commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testSendMessagesInWrongOrderButReceiveThemInCorrectOrder() throws Exception {     resultEndpoint.expectedBodiesReceived("Guillaume", "Hiram", "James", "Rob").     sendBodies("direct:start", "Rob", "Hiram", "Guillaume", "James").     resultEndpoint.assertIsSatisfied(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;5;;@Override @After public void tearDown() throws Exception {     super.tearDown(). }
false;protected;0;4;;protected boolean useJmx() {     // use jmx only when running the following test(s)     return getName().equals("testBatchResequencerTypeWithJmx"). }
false;public;0;7;;public void configure() {     // START SNIPPET: example     from("direct:start").resequence().body().timeout(50).to("mock:result"). // END SNIPPET: example }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:start").resequence().body().timeout(50).to("mock:result").         // END SNIPPET: example         }     }. }
false;public;0;4;;@Test public void testBatchResequencerTypeWithJmx() throws Exception {     testBatchResequencerTypeWithoutJmx(). }
false;public;0;14;;@Test public void testBatchResequencerTypeWithoutJmx() throws Exception {     List<Route> list = getRouteList(createRouteBuilder()).     assertEquals("Number of routes created: " + list, 1, list.size()).     Route route = list.get(0).     EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).     DefaultChannel channel = assertIsInstanceOf(DefaultChannel.class, unwrapChannel(consumerRoute.getProcessor())).     assertIsInstanceOf(DefaultErrorHandler.class, channel.getErrorHandler()).     assertIsInstanceOf(Resequencer.class, channel.getNextProcessor()). }
