commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/a").     super.setUp(). }
false;public;0;14;;@Override public void configure() throws Exception {     String[] destinations = new String[numFiles].     for (int i = 0. i < numFiles. i++) {         destinations[i] = "direct:file" + i.         from("direct:file" + i).setHeader(Exchange.FILE_NAME, constant("file" + i + ".txt")).to("file://" + path + "/?fileExist=Override&noop=true", "mock:result").     }     from("seda:testFileCreatedAsDir").to(destinations). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String[] destinations = new String[numFiles].             for (int i = 0. i < numFiles. i++) {                 destinations[i] = "direct:file" + i.                 from("direct:file" + i).setHeader(Exchange.FILE_NAME, constant("file" + i + ".txt")).to("file://" + path + "/?fileExist=Override&noop=true", "mock:result").             }             from("seda:testFileCreatedAsDir").to(destinations).         }     }. }
false;public;1;4;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setBody("Contents of test file"). }
false;public;0;19;;@Test public void testFileCreatedAsDir() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(numFiles).     template.send("seda:testFileCreatedAsDir", new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setBody("Contents of test file").         }     }).     assertMockEndpointsSatisfied().     // wait a little while for the files to settle down     Thread.sleep(50).     for (int i = 0. i < numFiles. i++) {         assertTrue((new File(path + "/file" + i + ".txt")).isFile()).     } }
