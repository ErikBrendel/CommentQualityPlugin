commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testAggregateCompletionAware() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C", "X+Y+ZZZZ").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "X", "id", 123).     template.sendBodyAndHeader("direct:start", "Y", "id", 123).     template.sendBodyAndHeader("direct:start", "ZZZZ", "id", 123).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyCompletionStrategy()).to("mock:aggregated"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyCompletionStrategy()).to("mock:aggregated").         }     }. }
false;public;2;11;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String oldBody = oldExchange.getIn().getBody(String.class).     String newBody = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(oldBody + "+" + newBody).     return oldExchange. }
false;public;1;4;;@Override public boolean matches(Exchange exchange) {     return exchange.getIn().getBody(String.class).length() >= 5. }
