commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSendToFirstWhen() throws Exception {     String body = "<one/>".     x.expectedBodiesReceived(body).     end.expectedBodiesReceived(body).     // The SpringChoiceTest.java can't setup the header by Spring configure file     // x.expectedHeaderReceived("name", "a").     expectsMessageCount(0, y, z).     sendMessage("bar", body).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSendToSecondWhen() throws Exception {     String body = "<two/>".     y.expectedBodiesReceived(body).     end.expectedBodiesReceived(body).     expectsMessageCount(0, x, z).     sendMessage("cheese", body).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSendToOtherwiseClause() throws Exception {     String body = "<three/>".     z.expectedBodiesReceived(body).     end.expectedBodiesReceived(body).     expectsMessageCount(0, x, y).     sendMessage("somethingUndefined", body).     assertMockEndpointsSatisfied(). }
false;protected;2;3;;protected void sendMessage(final Object headerValue, final Object body) throws Exception {     template.sendBodyAndHeader("direct:start", body, "foo", headerValue). }
false;public;0;10;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z").     end = getMockEndpoint("mock:end"). }
false;public;0;7;;public void configure() {     from("direct:start").choice().when().xpath("$foo = 'bar'").delay(10).asyncDelayed().to("mock:x").endChoice().when().xpath("$foo = 'cheese'").delay(10).asyncDelayed().to("mock:y").endChoice().otherwise().delay(10).asyncDelayed().to("mock:z").endChoice().end().to("mock:end"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").choice().when().xpath("$foo = 'bar'").delay(10).asyncDelayed().to("mock:x").endChoice().when().xpath("$foo = 'cheese'").delay(10).asyncDelayed().to("mock:y").endChoice().otherwise().delay(10).asyncDelayed().to("mock:z").endChoice().end().to("mock:end").         }     }. }
