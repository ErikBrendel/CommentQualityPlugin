commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     events.clear().     super.setUp(). }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;protected;0;15;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.addService(new MyService("A", false)).     context.addService(new MyService("B", true)).     context.addService(new MyService("C", false)).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }     }).     return context. }
false;public;0;19;;@Test public void testStopWithFailure() throws Exception {     stopOrder = "".     context.stop().     assertEquals("CBA", stopOrder).     assertEquals(5, events.size()).     assertIsInstanceOf(CamelContextStartingEvent.class, events.get(0)).     assertIsInstanceOf(CamelContextStartedEvent.class, events.get(1)).     assertIsInstanceOf(CamelContextStoppingEvent.class, events.get(2)).     ServiceStopFailureEvent event = assertIsInstanceOf(ServiceStopFailureEvent.class, events.get(3)).     assertIsInstanceOf(CamelContextStoppedEvent.class, events.get(4)).     assertEquals("Fail B", event.getCause().getMessage()).     assertEquals("Failure to stop service: B due to Fail B", event.toString()). }
false;public;0;2;;public void start() throws Exception { }
false;public;0;7;;public void stop() throws Exception {     stopOrder = stopOrder + name.     if (fail) {         throw new IllegalArgumentException("Fail " + name).     } }
false;public;0;4;;@Override public String toString() {     return name. }
