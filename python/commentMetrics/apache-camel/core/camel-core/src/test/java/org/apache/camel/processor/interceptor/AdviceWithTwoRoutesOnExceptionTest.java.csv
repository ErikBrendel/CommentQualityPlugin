commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")). }
false;public;0;20;;@Test public void testAdviceWithA() throws Exception {     RouteDefinition route = context.getRouteDefinition("a").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")).         }     }).     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")). }
false;public;0;20;;@Test public void testAdviceWithB() throws Exception {     RouteDefinition route = context.getRouteDefinition("b").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")).         }     }).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     template.sendBody("direct:b", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")). }
false;public;0;33;;@Test public void testAdviceWithAB() throws Exception {     RouteDefinition route = context.getRouteDefinition("a").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")).         }     }).     route = context.getRouteDefinition("b").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")).         }     }).     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(2).     getMockEndpoint("mock:error").message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     getMockEndpoint("mock:error").message(1).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     template.sendBody("direct:a", "Hello World").     template.sendBody("direct:b", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:a").routeId("a").onException(Exception.class).handled(true).to("mock:error").end().to("log:a").to("mock:a").     from("direct:b").routeId("b").onException(Exception.class).handled(true).to("mock:error").end().to("log:b").to("mock:b"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").routeId("a").onException(Exception.class).handled(true).to("mock:error").end().to("log:a").to("mock:a").             from("direct:b").routeId("b").onException(Exception.class).handled(true).to("mock:error").end().to("log:b").to("mock:b").         }     }. }
