commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;11;;@Test public void testMarshalMandatoryConversionFailed() throws Exception {     DataFormat dataFormat = new ZipDataFormat().     try {         dataFormat.marshal(new DefaultExchange(new DefaultCamelContext()), new Object(), new ByteArrayOutputStream()).         fail("Should have thrown an exception").     } catch (NoTypeConversionAvailableException e) {     // expected     } }
false;public;0;5;;public void configure() {     from("direct:start").marshal().zip(Deflater.BEST_COMPRESSION).process(new ZippedMessageProcessor()). }
false;public;0;13;;@Test public void testMarshalTextToZipBestCompression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().zip(Deflater.BEST_COMPRESSION).process(new ZippedMessageProcessor()).         }     }).     context.start().     sendText(). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().zip(Deflater.BEST_SPEED).process(new ZippedMessageProcessor()). }
false;public;0;14;;@Test public void testMarshalTextToZipBestSpeed() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().zip(Deflater.BEST_SPEED).process(new ZippedMessageProcessor()).         }     }).     context.start().     sendText(). }
false;public;0;5;;public void configure() {     from("direct:start").marshal().zip(Deflater.DEFAULT_COMPRESSION).process(new ZippedMessageProcessor()). }
false;public;0;13;;@Test public void testMarshalTextToZipDefaultCompression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().zip(Deflater.DEFAULT_COMPRESSION).process(new ZippedMessageProcessor()).         }     }).     context.start().     sendText(). }
false;public;0;6;;public void configure() {     from("direct:start").marshal().zip().unmarshal().zip().to("mock:result"). }
false;public;0;19;;@Test public void testUnMarshalTextToZip() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().zip().unmarshal().zip().to("mock:result").         }     }).     context.start().     MockEndpoint result = context.getEndpoint("mock:result", MockEndpoint.class).     result.expectedBodiesReceived(TEXT).     sendText().     result.assertIsSatisfied().     List<Exchange> exchangeList = result.getExchanges().     assertTrue(exchangeList.get(0).getIn().getBody() instanceof byte[]). }
false;public;0;7;;public void configure() {     from("direct:start").streamCaching().marshal().zip().unmarshal().zip().to("mock:result"). }
false;public;0;20;;@Test public void testStreamCacheUnzip() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").streamCaching().marshal().zip().unmarshal().zip().to("mock:result").         }     }).     context.start().     MockEndpoint result = context.getEndpoint("mock:result", MockEndpoint.class).     result.expectedBodiesReceived(TEXT).     sendText().     result.assertIsSatisfied().     List<Exchange> exchangeList = result.getExchanges().     assertTrue(exchangeList.get(0).getIn().getBody() instanceof InputStreamCache). }
false;private;0;3;;private void sendText() throws Exception {     template.sendBodyAndProperty("direct:start", TEXT, Exchange.CHARSET_NAME, "UTF-8"). }
false;public;1;21;;public void process(Exchange exchange) throws Exception {     byte[] body = exchange.getIn().getBody(byte[].class).     Inflater inflater = new Inflater().     inflater.setInput(body).     // Create an expandable byte array to hold the inflated data     ByteArrayOutputStream bos = new ByteArrayOutputStream(body.length).     // Inflate the compressed data     byte[] buf = new byte[1024].     while (!inflater.finished()) {         int count = inflater.inflate(buf).         bos.write(buf, 0, count).     }     String result = new String(bos.toByteArray(), "UTF-8").     // does the testing     assertEquals(TEXT, result). }
