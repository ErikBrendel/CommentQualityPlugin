commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(header("messageId"), repo).to("mock:result"). }
false;public;0;33;;@Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     assertEquals(0, repo.getExchange().size()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(header("messageId"), repo).to("mock:result").         }     }).     context.start().     resultEndpoint.expectedBodiesReceived("one", "two", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied().     // we used 6 different exchanges     assertEquals(6, repo.getExchange().size()).     for (Exchange exchange : resultEndpoint.getExchanges()) {         // should be in repo list         assertTrue("Should contain the exchange", repo.getExchange().contains(exchange.getExchangeId())).     } }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;2;5;;@Override public boolean add(Exchange exchange, String key) {     exchanges.add(exchange.getExchangeId()).     return delegate.add(key). }
false;public;2;5;;@Override public boolean contains(Exchange exchange, String key) {     exchanges.add(exchange.getExchangeId()).     return delegate.contains(key). }
false;public;2;5;;@Override public boolean remove(Exchange exchange, String key) {     exchanges.add(exchange.getExchangeId()).     return delegate.remove(key). }
false;public;2;5;;@Override public boolean confirm(Exchange exchange, String key) {     exchanges.add(exchange.getExchangeId()).     return delegate.confirm(key). }
false;public;0;4;;@Override public void clear() {     delegate.clear(). }
false;public;1;4;;@Override public boolean add(String key) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;1;4;;@Override public boolean contains(String key) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;1;4;;@Override public boolean remove(String key) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;1;4;;@Override public boolean confirm(String key) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public Set<String> getExchange() {     return exchanges. }
false;public;0;4;;@Override public void start() throws Exception { // noop }
false;public;0;4;;@Override public void stop() throws Exception { // noop }
