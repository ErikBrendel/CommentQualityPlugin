commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).eagerCheckCompletion().completionPredicate(body().isEqualTo("END")).parallelProcessing().to("log:result", "mock:result"). }
false;public;0;25;;@Test public void testAggregateParallelProcessing() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).eagerCheckCompletion().completionPredicate(body().isEqualTo("END")).parallelProcessing().to("log:result", "mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("A+Donkey+END", "B+Camel+END").     template.sendBodyAndHeader("direct:start", "A", "id", 1).     template.sendBodyAndHeader("direct:start", "Donkey", "id", 1).     template.sendBodyAndHeader("direct:start", "END", "id", 1).     template.sendBodyAndHeader("direct:start", "B", "id", 2).     template.sendBodyAndHeader("direct:start", "Camel", "id", 2).     template.sendBodyAndHeader("direct:start", "END", "id", 2).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).eagerCheckCompletion().completionPredicate(body().isEqualTo("END")).to("log:result", "mock:result"). }
false;public;0;25;;@Test public void testAggregateNotParallelProcessing() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).eagerCheckCompletion().completionPredicate(body().isEqualTo("END")).to("log:result", "mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("A+Donkey+END", "B+Camel+END").     template.sendBodyAndHeader("direct:start", "A", "id", 1).     template.sendBodyAndHeader("direct:start", "Donkey", "id", 1).     template.sendBodyAndHeader("direct:start", "END", "id", 1).     template.sendBodyAndHeader("direct:start", "B", "id", 2).     template.sendBodyAndHeader("direct:start", "Camel", "id", 2).     template.sendBodyAndHeader("direct:start", "END", "id", 2).     assertMockEndpointsSatisfied(). }
