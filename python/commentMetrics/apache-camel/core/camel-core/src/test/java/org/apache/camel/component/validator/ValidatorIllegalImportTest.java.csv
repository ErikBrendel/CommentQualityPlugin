commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:test").to("validator:org/apache/camel/component/validator/BroadcastMonitorFixed.xsd").to("mock:result"). }
false;public;0;16;;@Test public void testOk() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").to("validator:org/apache/camel/component/validator/BroadcastMonitorFixed.xsd").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:test", broadCastEvent).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:test").to("validator:org/apache/camel/component/validator/BroadcastMonitor.xsd").to("mock:result"). }
false;public;0;18;;@Test public void testIllegalImport() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").to("validator:org/apache/camel/component/validator/BroadcastMonitor.xsd").to("mock:result").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (FailedToCreateRouteException e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertTrue(iae.getMessage().startsWith("Resource: org/apache/camel/component/validator/BroadcastMonitor.xsd refers an invalid resource without SystemId.")).     } }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
