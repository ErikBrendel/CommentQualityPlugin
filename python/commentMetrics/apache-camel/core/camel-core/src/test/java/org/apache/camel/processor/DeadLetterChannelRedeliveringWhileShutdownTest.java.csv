commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testDLCRedelivery() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     // send a message that causes redeliveries     template.sendBody("seda:damm", "Damn World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     context.stop(). // will shutdown while redelivery is in progress }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Damn"). }
false;public;0;12;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3).redeliveryDelay(100)).     from("direct:start").to("mock:result").     from("seda:damm").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Damn").         }     }). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3).redeliveryDelay(100)).             from("direct:start").to("mock:result").             from("seda:damm").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("Damn").                 }             }).         }     }. }
