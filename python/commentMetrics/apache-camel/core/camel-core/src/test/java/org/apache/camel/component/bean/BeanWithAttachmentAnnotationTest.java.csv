commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message m = exchange.getIn().     m.addAttachmentObject("attachment", new DefaultAttachment(new FileDataSource("src/test/org/apache/camel/component/bean/BeanWithAttachmentAnnotationTest.java"))). }
false;public;0;17;;@Test public void testBeanWithOldAnnotationAndExchangeTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("attachment").     template.send("direct:inOld", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message m = exchange.getIn().             m.addAttachmentObject("attachment", new DefaultAttachment(new FileDataSource("src/test/org/apache/camel/component/bean/BeanWithAttachmentAnnotationTest.java"))).         }     }).     mock.assertIsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.setPattern(ExchangePattern.InOut).     Message m = exchange.getIn().     m.addAttachmentObject("attachment", new DefaultAttachment(new FileDataSource("src/test/org/apache/camel/component/bean/BeanWithAttachmentAnnotationTest.java"))). }
false;public;0;17;;@Test public void testBeanWithAnnotationAndExchangeTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("attachment").     template.send("direct:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setPattern(ExchangePattern.InOut).             Message m = exchange.getIn().             m.addAttachmentObject("attachment", new DefaultAttachment(new FileDataSource("src/test/org/apache/camel/component/bean/BeanWithAttachmentAnnotationTest.java"))).         }     }).     mock.assertIsSatisfied(). }
false;protected;0;6;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("processorOld", new AttachmentProcessorOld()).     answer.bind("processor", new AttachmentProcessor()).     return answer. }
false;public;0;4;;public void configure() throws Exception {     from("direct:in").to("bean:processor").to("mock:result").     from("direct:inOld").to("bean:processorOld").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").to("bean:processor").to("mock:result").             from("direct:inOld").to("bean:processorOld").to("mock:result").         }     }. }
true;public;1;11;// START SNIPPET: e1 ;// START SNIPPET: e1 public String doSomething(@Attachments Map<String, DataHandler> attachments) {     assertNotNull(attachments).     assertEquals("The attache size is wrong", 1, attachments.size()).     String key = attachments.keySet().iterator().next().     assertNotNull(key).     assertNotNull(attachments.get(key)).     DataHandler handler = attachments.get(key).     assertNotNull(handler).     assertTrue("The data source should be a instance of FileDataSource", handler.getDataSource() instanceof FileDataSource).     return key. }
true;public;1;13;// START SNIPPET: e2 ;// START SNIPPET: e2 public String doSomething(@AttachmentObjects Map<String, Attachment> attachments) {     assertNotNull(attachments).     assertEquals("The attache size is wrong", 1, attachments.size()).     String key = attachments.keySet().iterator().next().     assertNotNull(key).     assertNotNull(attachments.get(key)).     Attachment attachment = attachments.get(key).     assertNotNull(attachment).     DataHandler handler = attachment.getDataHandler().     assertNotNull(handler).     assertTrue("The data source should be a instance of FileDataSource", handler.getDataSource() instanceof FileDataSource).     return key. }
