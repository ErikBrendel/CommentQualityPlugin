commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testUseOriginalBody() throws Exception {     MockEndpoint dead = getMockEndpoint("mock:a").     dead.expectedBodiesReceived("Hello").     template.sendBody("direct:a", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testDoNotUseOriginalBody() throws Exception {     MockEndpoint dead = getMockEndpoint("mock:dead").     dead.expectedBodiesReceived("Hello World").     template.sendBody("direct:b", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     // will not use original exchange     errorHandler(deadLetterChannel("mock:dead").disableRedelivery().logStackTrace(false).redeliveryDelay(0)).     onException(IllegalArgumentException.class).maximumRedeliveries(2).useOriginalMessage().handled(true).to("mock:a").     from("direct:a").setBody(body().append(" World")).process(new MyThrowProcessor(false)).     from("direct:b").setBody(body().append(" World")).process(new MyThrowProcessor(true)). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // will not use original exchange             errorHandler(deadLetterChannel("mock:dead").disableRedelivery().logStackTrace(false).redeliveryDelay(0)).             onException(IllegalArgumentException.class).maximumRedeliveries(2).useOriginalMessage().handled(true).to("mock:a").             from("direct:a").setBody(body().append(" World")).process(new MyThrowProcessor(false)).             from("direct:b").setBody(body().append(" World")).process(new MyThrowProcessor(true)).         }     }. }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     assertEquals("Hello World", exchange.getIn().getBody(String.class)).     if (camelException) {         throw new CamelExchangeException("I cannot do it", exchange).     } else {         throw new IllegalArgumentException("Forced").     } }
false;public;0;3;;public boolean isCamelException() {     return camelException. }
false;public;1;3;;public void setCamelException(boolean camelException) {     this.camelException = camelException. }
