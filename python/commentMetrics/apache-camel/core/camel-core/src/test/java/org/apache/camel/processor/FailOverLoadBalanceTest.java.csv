commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new MyException(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new MyAnotherException(). }
false;public;0;15;;public void configure() {     from("direct:exception").loadBalance().failover().to("direct:x", "direct:y", "direct:z").     from("direct:customerException").loadBalance().failover(MyException.class).to("direct:x", "direct:y", "direct:z").     from("direct:x").process(new MyExceptionProcessor()).to("mock:x").     from("direct:y").process(new MyAnotherExceptionProcessor()).to("mock:y").     from("direct:z").to("mock:z"). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:exception").loadBalance().failover().to("direct:x", "direct:y", "direct:z").             from("direct:customerException").loadBalance().failover(MyException.class).to("direct:x", "direct:y", "direct:z").             from("direct:x").process(new MyExceptionProcessor()).to("mock:x").             from("direct:y").process(new MyAnotherExceptionProcessor()).to("mock:y").             from("direct:z").to("mock:z").         }     }. }
false;public;0;8;;@Test public void testThrowable() throws Exception {     String body = "<one/>".     expectsMessageCount(0, x, y).     z.expectedBodiesReceived(body).     sendMessage("direct:exception", "bar", body).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testMyException() throws Exception {     String body = "<two/>".     expectsMessageCount(0, x, y, z).     try {         sendMessage("direct:customerException", "bar", body).         fail("There should get the MyAnotherException").     } catch (RuntimeCamelException ex) {         // expect the exception here         assertTrue("The cause should be MyAnotherException", ex.getCause() instanceof MyAnotherException).     }     assertMockEndpointsSatisfied(). }
false;protected;3;3;;protected void sendMessage(final String endpoint, final Object headerValue, final Object body) throws Exception {     template.sendBodyAndHeader(endpoint, body, "foo", headerValue). }
