commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").routeId("route-id").routeProperty("key1", "val1").routeProperty("key2", "val2").to("mock:output"). }
false;public;0;25;;@Test public void testRouteProperties() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("route-id").routeProperty("key1", "val1").routeProperty("key2", "val2").to("mock:output").         }     }).     context.start().     RouteDefinition definition = context.getRouteDefinition("route-id").     Route route = context.getRoute("route-id").     assertNotNull(definition.getRouteProperties()).     assertEquals(2, definition.getRouteProperties().size()).     assertNotNull(route.getProperties()).     assertEquals("val1", route.getProperties().get("key1")).     assertEquals("val2", route.getProperties().get("key2")). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").routeId("route-id").routeProperty(Route.ID_PROPERTY, "the id").to("mock:output"). }
false;public;0;19;;@Test public void testRoutePropertiesFailuer() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").routeId("route-id").routeProperty(Route.ID_PROPERTY, "the id").to("mock:output").             }         }).         context.start().         fail("").     } catch (FailedToCreateRouteException e) {     } }
