commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/concurrent").     super.setUp(). }
false;public;0;35;;@Test public void testConcurrentAppend() throws Exception {     // create file with many lines     StringBuilder sb = new StringBuilder().     for (int i = 0. i < size. i++) {         sb.append("Line " + i + LS).     }     template.sendBodyAndHeader("file:target/data/concurrent", sb.toString(), Exchange.FILE_NAME, "input.txt").     // start route     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(size).     mock.expectsNoDuplicates(body()).     mock.setResultWaitTime(30000).     // we need to wait a bit for our slow CI server to make sure the entire file is written on disc     Thread.sleep(500).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     // check the file has correct number of lines     String txt = context.getTypeConverter().convertTo(String.class, new File("target/data/concurrent/outbox/result.txt")).     assertNotNull(txt).     String[] lines = txt.split(LS).     assertEquals("Should be " + size + " lines", size, lines.length).     // should be unique     Set<String> rows = new LinkedHashSet<>(Arrays.asList(lines)).     assertEquals("Should be " + size + " unique lines", size, rows.size()).     log.info(txt). }
false;public;0;9;;@Override public void configure() throws Exception {     from("file:target/data/concurrent?initialDelay=0&delay=10").routeId("foo").noAutoStartup().split(body().tokenize(LS)).parallelProcessing().streaming().setBody(body().append(":Status=OK").append(LS)).to("file:target/data/concurrent/outbox?fileExist=Append&fileName=result.txt").to("mock:result").end(). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/concurrent?initialDelay=0&delay=10").routeId("foo").noAutoStartup().split(body().tokenize(LS)).parallelProcessing().streaming().setBody(body().append(":Status=OK").append(LS)).to("file:target/data/concurrent/outbox?fileExist=Append&fileName=result.txt").to("mock:result").end().         }     }. }
