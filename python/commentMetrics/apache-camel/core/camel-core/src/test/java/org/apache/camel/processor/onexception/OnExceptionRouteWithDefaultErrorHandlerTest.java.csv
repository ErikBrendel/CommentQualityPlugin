commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNoError() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "<order><type>myType</type><user>James</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testFunctionalError() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     template.sendBody("direct:start", "<order><type>myType</type><user>Func</user></order>").     assertMockEndpointsSatisfied().     assertEquals("<order><type>myType</type><user>Func</user></order>", myOwnHandlerBean.getPayload()). }
false;public;0;11;;@Test public void testTechnicalError() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     template.sendBody("direct:start", "<order><type>myType</type><user>Tech</user></order>").     assertMockEndpointsSatisfied().     // should not handle it     assertNull(myOwnHandlerBean.getPayload()). }
false;public;0;16;;@Test public void testErrorWhileHandlingException() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:start", "<order><type>myType</type><user>FuncError</user></order>").         fail("Should throw a RuntimeCamelException").     } catch (RuntimeCamelException e) {         assertEquals("Damn something did not work", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // should not handle it     assertNull(myOwnHandlerBean.getPayload()). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     myOwnHandlerBean = new MyOwnHandlerBean().     myServiceBean = new MyServiceBean().     super.setUp(). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myOwnHandler", myOwnHandlerBean).     jndi.bind("myServiceBean", myServiceBean).     return jndi. }
false;public;0;13;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().maximumRedeliveries(5)).     onException(MyTechnicalException.class).maximumRedeliveries(0).handled(true).     onException(MyFunctionalException.class).maximumRedeliveries(0).handled(true).to("bean:myOwnHandler").     from("direct:start").choice().when().xpath("//type = 'myType'").to("bean:myServiceBean").end().to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().maximumRedeliveries(5)).             onException(MyTechnicalException.class).maximumRedeliveries(0).handled(true).             onException(MyFunctionalException.class).maximumRedeliveries(0).handled(true).to("bean:myOwnHandler").             from("direct:start").choice().when().xpath("//type = 'myType'").to("bean:myServiceBean").end().to("mock:result").         }     }. }
