commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSend() throws Exception {     // hello must come first, as we have delay on the tapped route     result.expectedBodiesReceived("Hello World", "Tapped").     tap.expectedBodiesReceived("Tapped").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWireTapId() throws Exception {     MockEndpoint a = getMockEndpoint("mock:a").     MockEndpoint b = getMockEndpoint("mock:b").     a.expectedBodiesReceived("Hello").     b.expectedBodiesReceived("Hello").     template.sendBody("direct:test", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     tap = getMockEndpoint("mock:tap").     result = getMockEndpoint("mock:result"). }
false;public;0;15;;public void configure() {     // START SNIPPET: e1     from("direct:start").to("log:foo").wireTap("direct:tap").to("mock:result").     // END SNIPPET: e1     from("direct:tap").delay(1000).setBody().constant("Tapped").to("mock:result", "mock:tap").     from("direct:test").wireTap("direct:a").id("wiretap_1").to("mock:a").     from("direct:a").to("mock:b"). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").to("log:foo").wireTap("direct:tap").to("mock:result").             // END SNIPPET: e1             from("direct:tap").delay(1000).setBody().constant("Tapped").to("mock:result", "mock:tap").             from("direct:test").wireTap("direct:a").id("wiretap_1").to("mock:a").             from("direct:a").to("mock:b").         }     }. }
