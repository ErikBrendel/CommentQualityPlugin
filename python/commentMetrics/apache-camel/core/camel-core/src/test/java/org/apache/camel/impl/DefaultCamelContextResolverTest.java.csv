commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;27;;@BeforeClass public static void createContext() throws Exception {     context = new DefaultCamelContext().     // Add a component using its fallback name     context.getRegistry().bind("green-component", new SampleComponent(true)).     // Add a data format using its fallback name     context.getRegistry().bind("green-dataformat", new SampleDataFormat(true)).     // Add a language using its fallback name     context.getRegistry().bind("green-language", new SampleLanguage(true)).     // Add a component using both names     context.getRegistry().bind("yellow", new SampleComponent(false)).     context.getRegistry().bind("yellow-component", new SampleComponent(true)).     // Add a data format using both names     context.getRegistry().bind("red", new SampleDataFormat(false)).     context.getRegistry().bind("red-dataformat", new SampleDataFormat(true)).     // Add a language using both names     context.getRegistry().bind("blue", new SampleLanguage(false)).     context.getRegistry().bind("blue-language", new SampleLanguage(true)).     context.start(). }
false;public,static;0;5;;@AfterClass public static void destroyContext() throws Exception {     context.stop().     context = null. }
false;public;0;7;;@Test public void testComponentWithFallbackNames() throws Exception {     Component component = context.getComponent("green").     assertNotNull("Component not found in registry", component).     assertTrue("Wrong instance type of the Component", component instanceof SampleComponent).     assertTrue("Here we should have the fallback Component", ((SampleComponent) component).isFallback()). }
false;public;0;7;;@Test public void testComponentWithBothNames() throws Exception {     Component component = context.getComponent("yellow").     assertNotNull("Component not found in registry", component).     assertTrue("Wrong instance type of the Component", component instanceof SampleComponent).     assertFalse("Here we should NOT have the fallback Component", ((SampleComponent) component).isFallback()). }
false;public;0;7;;@Test public void testDataFormatWithFallbackNames() throws Exception {     DataFormat dataFormat = context.resolveDataFormat("green").     assertNotNull("DataFormat not found in registry", dataFormat).     assertTrue("Wrong instance type of the DataFormat", dataFormat instanceof SampleDataFormat).     assertTrue("Here we should have the fallback DataFormat", ((SampleDataFormat) dataFormat).isFallback()). }
false;public;0;7;;@Test public void testDataformatWithBothNames() throws Exception {     DataFormat dataFormat = context.resolveDataFormat("red").     assertNotNull("DataFormat not found in registry", dataFormat).     assertTrue("Wrong instance type of the DataFormat", dataFormat instanceof SampleDataFormat).     assertFalse("Here we should NOT have the fallback DataFormat", ((SampleDataFormat) dataFormat).isFallback()). }
false;public;0;7;;@Test public void testLanguageWithFallbackNames() throws Exception {     Language language = context.resolveLanguage("green").     assertNotNull("Language not found in registry", language).     assertTrue("Wrong instance type of the Language", language instanceof SampleLanguage).     assertTrue("Here we should have the fallback Language", ((SampleLanguage) language).isFallback()). }
false;public;0;7;;@Test public void testLanguageWithBothNames() throws Exception {     Language language = context.resolveLanguage("blue").     assertNotNull("Language not found in registry", language).     assertTrue("Wrong instance type of the Language", language instanceof SampleLanguage).     assertFalse("Here we should NOT have the fallback Language", ((SampleLanguage) language).isFallback()). }
false;public;0;5;;@Test public void testNullLookupComponent() throws Exception {     Component component = context.getComponent("xxxxxxxxx").     assertNull("Non-existent Component should be null", component). }
false;public;0;5;;@Test public void testNullLookupDataFormat() throws Exception {     DataFormat dataFormat = context.resolveDataFormat("xxxxxxxxx").     assertNull("Non-existent DataFormat should be null", dataFormat). }
false;public;0;4;;@Test(expected = NoSuchLanguageException.class) public void testNullLookupLanguage() throws Exception {     context.resolveLanguage("xxxxxxxxx"). }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public boolean isFallback() {     return fallback. }
false;public;1;3;;public void setFallback(boolean fallback) {     this.fallback = fallback. }
false;public;3;4;;@Override public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;2;4;;@Override public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public boolean isFallback() {     return fallback. }
false;public;1;3;;public void setFallback(boolean fallback) {     this.fallback = fallback. }
false;public;1;4;;@Override public Predicate createPredicate(String expression) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;1;4;;@Override public Expression createExpression(String expression) {     throw new UnsupportedOperationException("Should not be called"). }
false;public;0;3;;public boolean isFallback() {     return fallback. }
false;public;1;3;;public void setFallback(boolean fallback) {     this.fallback = fallback. }
