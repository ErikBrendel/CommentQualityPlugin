commented;modifiers;parameterAmount;loc;comment;code
false;public;3;4;;@Override public Properties resolveProperties(CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations) {     return properties. }
false;protected;0;17;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     final Properties properties = new Properties().     properties.put("foo", "bar").     PropertiesComponent pc = camelContext.getComponent("properties", PropertiesComponent.class).     pc.setLocations(new String[0]).     pc.setPropertiesResolver(new PropertiesResolver() {          @Override         public Properties resolveProperties(CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations) {             return properties.         }     }).     return camelContext. }
false;public;0;13;;@Test public void testPropertiesInPredicates() throws Exception {     getMockEndpoint("mock:header-ok").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:choice-ok").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:direct-ok").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:ko").expectedMessageCount(0).     template.sendBody("direct:header-start", "Hello Camel").     template.sendBody("direct:choice-start", "Hello Camel").     template.sendBody("direct:direct-start", "Hello Camel").     assertMockEndpointsSatisfied(). }
false;public;0;23;;@Override public void configure() throws Exception {     // Properties in headers     from("direct:header-start").setHeader("foo", simple("{{foo}}")).choice().when(simple("${header.foo} == 'bar'")).to("mock:header-ok").otherwise().to("mock:ko").     // Properties in choices     from("direct:choice-start").choice().when(simple("'{{foo}}' == 'bar'")).to("mock:choice-ok").otherwise().to("mock:ko").     // Properties in URI     from("direct:direct-start").to("direct:direct-{{foo}}").     from("direct:direct-bar").to("mock:direct-ok"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // Properties in headers             from("direct:header-start").setHeader("foo", simple("{{foo}}")).choice().when(simple("${header.foo} == 'bar'")).to("mock:header-ok").otherwise().to("mock:ko").             // Properties in choices             from("direct:choice-start").choice().when(simple("'{{foo}}' == 'bar'")).to("mock:choice-ok").otherwise().to("mock:ko").             // Properties in URI             from("direct:direct-start").to("direct:direct-{{foo}}").             from("direct:direct-bar").to("mock:direct-ok").         }     }. }
