commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testMulticastParallelTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // A will timeout so we only get B and/or C     mock.message(0).body().not(body().contains("A")).     getMockEndpoint("mock:A").expectedMessageCount(0).     getMockEndpoint("mock:B").expectedMessageCount(1).     getMockEndpoint("mock:C").expectedMessageCount(1).     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
false;public;0;27;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").multicast(new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String body = oldExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).             return oldExchange.         }     }).parallelProcessing().timeout(250).to("direct:a", "direct:b", "direct:c").end().to("mock:result").     from("direct:a").delay(1000).to("mock:A").setBody(constant("A")).     from("direct:b").to("mock:B").setBody(constant("B")).     from("direct:c").to("mock:C").setBody(constant("C")). // END SNIPPET: e1 }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").multicast(new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String body = oldExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).                     return oldExchange.                 }             }).parallelProcessing().timeout(250).to("direct:a", "direct:b", "direct:c").end().to("mock:result").             from("direct:a").delay(1000).to("mock:A").setBody(constant("A")).             from("direct:b").to("mock:B").setBody(constant("B")).             from("direct:c").to("mock:C").setBody(constant("C")).         // END SNIPPET: e1         }     }. }
