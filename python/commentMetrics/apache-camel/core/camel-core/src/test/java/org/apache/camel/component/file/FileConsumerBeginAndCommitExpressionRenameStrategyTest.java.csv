commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/inprogress").     deleteDirectory("target/data/done").     deleteDirectory("target/data/reports").     super.setUp(). }
false;public;0;11;;@Test public void testRenameSuccess() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:report").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello Paris").     mock.expectedFileExists("target/data/done/paris.bak", "Hello Paris").     template.sendBodyAndHeader("file:target/data/reports", "Hello Paris", Exchange.FILE_NAME, "paris.txt").     mock.assertIsSatisfied(). }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
false;public;0;12;;@Test public void testIllegalOptions() throws Exception {     try {         context.getEndpoint("file://target/data?move=../done/${file:name}&delete=true").createConsumer(new Processor() {              public void process(Exchange exchange) throws Exception {             }         }).         fail("Should have thrown an exception").     } catch (IllegalArgumentException e) {     // ok     } }
false;public;1;6;;@SuppressWarnings("unchecked") public void process(Exchange exchange) throws Exception {     GenericFile<File> file = (GenericFile<File>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     assertNotNull(file).     assertTrue(file.getRelativeFilePath().indexOf("inprogress") > -1). }
false;public;0;12;;public void configure() throws Exception {     from("file://target/data/reports?preMove=../inprogress/${file:name.noext}.bak&move=../done/${file:name}&initialDelay=0&delay=10").process(new Processor() {          @SuppressWarnings("unchecked")         public void process(Exchange exchange) throws Exception {             GenericFile<File> file = (GenericFile<File>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).             assertNotNull(file).             assertTrue(file.getRelativeFilePath().indexOf("inprogress") > -1).         }     }).to("mock:report"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/reports?preMove=../inprogress/${file:name.noext}.bak&move=../done/${file:name}&initialDelay=0&delay=10").process(new Processor() {                  @SuppressWarnings("unchecked")                 public void process(Exchange exchange) throws Exception {                     GenericFile<File> file = (GenericFile<File>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).                     assertNotNull(file).                     assertTrue(file.getRelativeFilePath().indexOf("inprogress") > -1).                 }             }).to("mock:report").         }     }. }
