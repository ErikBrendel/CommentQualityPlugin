commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSplitterSkip() throws Exception {     getMockEndpoint("mock:line").expectedBodiesReceived("C", "D", "E").     List<Object> data = new ArrayList<>().     data.add("A").     data.add("B").     data.add("C").     data.add("D").     data.add("E").     template.sendBody("direct:start", data).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSplitterEmpty() throws Exception {     getMockEndpoint("mock:line").expectedMessageCount(0).     List<Object> data = new ArrayList<>().     data.add("A").     data.add("B").     template.sendBody("direct:start", data).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitterEmptyAgain() throws Exception {     getMockEndpoint("mock:line").expectedMessageCount(0).     List<Object> data = new ArrayList<>().     data.add("A").     template.sendBody("direct:start", data).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").split(simple("${skip(2)}")).to("mock:line"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(simple("${skip(2)}")).to("mock:line").         }     }. }
