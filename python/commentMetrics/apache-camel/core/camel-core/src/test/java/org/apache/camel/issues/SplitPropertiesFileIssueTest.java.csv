commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/file/splitprop").     super.setUp(). }
false;public;0;15;;@Test public void testSplitPropertiesFileAndRoute() throws Exception {     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("[foo=1, foo=4]").     // after the file is routed it should be moved to done     foo.expectedFileExists("target/data/file/splitprop/done/myprop.txt", body).     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedBodiesReceived("[bar=2, bar=3]").     template.sendBodyAndHeader("file://target/data/file/splitprop", body, Exchange.FILE_NAME, "myprop.txt").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/file/splitprop?initialDelay=0&delay=10&move=done").convertBodyTo(String.class).split(new MyCustomExpression()).recipientList(header("myCustomDestination")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/file/splitprop?initialDelay=0&delay=10&move=done").convertBodyTo(String.class).split(new MyCustomExpression()).recipientList(header("myCustomDestination")).         }     }. }
false;public;2;41;;@SuppressWarnings("unchecked") public <T> T evaluate(Exchange exchange, Class<T> type) {     // must copy from the original exchange as Camel holds information about the file in progress     Message msg1 = exchange.getIn().copy().     Message msg2 = exchange.getIn().copy().     // now we use our own expressions to split the file as we like it     // what we return is just the list of the two Camel Message objects     // which contains the splitted data (our way)     List<Message> answer = new ArrayList<>().     answer.add(msg1).     answer.add(msg2).     // split the original body into two data lists     // can be done a bit prettier than this code     // but its just for show and tell how to use Expressions     List<String> data1 = new ArrayList<>().     List<String> data2 = new ArrayList<>().     String body = exchange.getIn().getBody(String.class).     String[] lines = body.split(LS).     for (String line : lines) {         if (line.startsWith("foo")) {             data1.add(line).         } else {             data2.add(line).         }     }     // as we use the recipientList afterwards we set the destination     // as well on our message where we want to route it     // as we are an unit test then just store the list using toString so its easier to test     msg1.setBody(data1.toString()).     msg1.setHeader("myCustomDestination", "mock:foo").     msg2.setBody(data2.toString()).     msg2.setHeader("myCustomDestination", "mock:bar").     // just cast it to T as its safe as its Object anyway for custom expressions     return (T) answer. }
