commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;private;0;3;;private byte[] sendText() throws Exception {     return (byte[]) template.requestBody("direct:start", TEXT.getBytes("UTF-8")). }
false;public;0;3;;public void configure() {     from("direct:start").marshal().gzip(). }
false;public;0;15;;@Test public void testMarshalTextToGZip() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().gzip().         }     }).     context.start().     byte[] output = sendText().     GZIPInputStream stream = new GZIPInputStream(new ByteArrayInputStream(output)).     String result = IOConverter.toString(stream, null).     assertEquals("Uncompressed something different than compressed", TEXT, result). }
false;public;0;3;;public void configure() {     from("direct:start").marshal().gzip().unmarshal().gzip().to("mock:result"). }
false;public;0;14;;@Test public void testUnMarshalTextToGzip() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().gzip().unmarshal().gzip().to("mock:result").         }     }).     context.start().     MockEndpoint result = context.getEndpoint("mock:result", MockEndpoint.class).     result.expectedBodiesReceived(TEXT.getBytes("UTF-8")).     sendText().     result.assertIsSatisfied(). }
