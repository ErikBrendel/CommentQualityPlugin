commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.setProperty("p1", "abc").     exchange.setProperty("p2", 123).     Message in = exchange.getIn().     in.setHeader("h1", "xyz").     in.setHeader("h2", 456). }
false;public;0;24;;@Test public void testSendMessage() throws Exception {     template.send("direct:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setProperty("p1", "abc").             exchange.setProperty("p2", 123).             Message in = exchange.getIn().             in.setHeader("h1", "xyz").             in.setHeader("h2", 456).         }     }).     Map<?, ?> foo = myBean.foo.     Map<?, ?> bar = myBean.bar.     assertNotNull("myBean.foo", foo).     assertNotNull("myBean.bar", bar).     assertEquals("foo.p1", "abc", foo.get("p1")).     assertEquals("foo.p2", 123, foo.get("p2")).     assertEquals("bar.h1", "xyz", bar.get("h1")).     assertEquals("bar.h2", 456, bar.get("h2")). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     return answer. }
false;public;0;3;;public void configure() {     from("direct:in").bean("myBean"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:in").bean("myBean").         }     }. }
false;public;0;4;;@Override public String toString() {     return "MyBean[foo: " + foo + " bar: " + bar + "]". }
false;public;2;5;;public void myMethod(@ExchangeProperties Map<?, ?> foo, @Headers Map<?, ?> bar) {     this.foo = foo.     this.bar = bar.     LOG.info("myMethod() method called on " + this). }
