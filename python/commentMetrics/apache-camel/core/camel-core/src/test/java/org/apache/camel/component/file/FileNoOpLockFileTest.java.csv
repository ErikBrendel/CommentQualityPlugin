commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @After public void tearDown() throws Exception {     deleteDirectory("target/data/reports").     super.tearDown(). }
false;public;0;16;;@Test public void testLocked() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:report").     mock.expectedBodiesReceived("Hello Locked").     template.sendBodyAndHeader("file:target/data/reports/locked", "Hello Locked", Exchange.FILE_NAME, "report.txt").     mock.assertIsSatisfied().     // sleep to let file consumer do its unlocking     await().atMost(1, TimeUnit.SECONDS).until(() -> existsLockFile(false)).     // should be deleted after processing     checkLockFile(false). }
false;public;0;16;;@Test public void testNotLocked() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:report").     mock.expectedBodiesReceived("Hello Not Locked").     template.sendBodyAndHeader("file:target/data/reports/notlocked", "Hello Not Locked", Exchange.FILE_NAME, "report.txt").     mock.assertIsSatisfied().     // sleep to let file consumer do its unlocking     await().atMost(1, TimeUnit.SECONDS).until(() -> existsLockFile(false)).     // no lock files should exists after processing     checkLockFile(false). }
false;private,static;1;8;;private static boolean existsLockFile(boolean expected) {     String filename = "target/data/reports/".     filename += expected ? "locked/" : "notlocked/".     filename += "report.txt" + FileComponent.DEFAULT_LOCK_FILE_POSTFIX.     File file = new File(filename).     return expected == file.exists(). }
false;private,static;1;8;;private static void checkLockFile(boolean expected) {     String filename = "target/data/reports/".     filename += expected ? "locked/" : "notlocked/".     filename += "report.txt" + FileComponent.DEFAULT_LOCK_FILE_POSTFIX.     File file = new File(filename).     assertEquals("Lock file should " + (expected ? "exists" : "not exists"), expected, file.exists()). }
false;public;0;9;;public void configure() throws Exception {     // for locks     from("file://target/data/reports/locked/?initialDelay=0&delay=10&noop=true&readLock=markerFile").process(new MyNoopProcessor()).to("mock:report").     // for no locks     from("file://target/data/reports/notlocked/?initialDelay=0&delay=10&noop=true&readLock=none").process(new MyNoopProcessor()).to("mock:report"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // for locks             from("file://target/data/reports/locked/?initialDelay=0&delay=10&noop=true&readLock=markerFile").process(new MyNoopProcessor()).to("mock:report").             // for no locks             from("file://target/data/reports/notlocked/?initialDelay=0&delay=10&noop=true&readLock=none").process(new MyNoopProcessor()).to("mock:report").         }     }. }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     boolean locked = "Hello Locked".equals(body).     checkLockFile(locked). }
