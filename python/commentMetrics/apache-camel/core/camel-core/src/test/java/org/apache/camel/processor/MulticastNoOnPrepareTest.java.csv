commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testMulticastNoOnPrepare() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:a").message(0).body(String.class).isEqualTo("1 Tony the Tiger").     getMockEndpoint("mock:b").expectedMessageCount(1).     // adjustment of processor a causes effects in processor b as its not a deep clone     getMockEndpoint("mock:b").message(0).body(String.class).isEqualTo("1 Tony the Tiger").     template.sendBody("direct:start", new Animal(1, "Tiger")).     assertMockEndpointsSatisfied(). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()).     // adjust the name     body.setName("Tony the Tiger"). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tony the Tiger", body.getName()). }
false;public;0;26;;@Override public void configure() throws Exception {     from("direct:start").multicast().to("direct:a").to("direct:b").     from("direct:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Animal body = exchange.getIn().getBody(Animal.class).             assertEquals(1, body.getId()).             assertEquals("Tiger", body.getName()).             // adjust the name             body.setName("Tony the Tiger").         }     }).to("mock:a").     from("direct:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Animal body = exchange.getIn().getBody(Animal.class).             assertEquals(1, body.getId()).             assertEquals("Tony the Tiger", body.getName()).         }     }).to("mock:b"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().to("direct:a").to("direct:b").             from("direct:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Animal body = exchange.getIn().getBody(Animal.class).                     assertEquals(1, body.getId()).                     assertEquals("Tiger", body.getName()).                     // adjust the name                     body.setName("Tony the Tiger").                 }             }).to("mock:a").             from("direct:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Animal body = exchange.getIn().getBody(Animal.class).                     assertEquals(1, body.getId()).                     assertEquals("Tony the Tiger", body.getName()).                 }             }).to("mock:b").         }     }. }
