commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testNoOverrule() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.FILE_NAME, "hello.txt").     mock.expectedFileExists("target/data/write/copy-of-hello.txt", "Hello World").     template.sendBodyAndHeader("direct:start", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testOverrule() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.FILE_NAME, "hello.txt").     mock.message(0).header(Exchange.OVERRULE_FILE_NAME).isNull().     mock.expectedFileExists("target/data/write/copy-of-overruled.txt", "Hello World").     Map<String, Object> map = new HashMap<>().     map.put(Exchange.FILE_NAME, "hello.txt").     // this header should overrule the endpoint configuration     map.put(Exchange.OVERRULE_FILE_NAME, "overruled.txt").     template.sendBodyAndHeaders("direct:start", "Hello World", map).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/write").     super.setUp(). }
false;public;0;4;;public void configure() {     from("direct:start").to("file://target/data/write?fileName=copy-of-${file:name}", "mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("file://target/data/write?fileName=copy-of-${file:name}", "mock:result").         }     }. }
