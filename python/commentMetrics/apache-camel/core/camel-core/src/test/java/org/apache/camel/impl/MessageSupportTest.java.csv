commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSetBodyType() throws Exception {     Exchange exchange = new DefaultExchange(context).     Message in = exchange.getIn().     in.setBody("123", Integer.class).     assertIsInstanceOf(Integer.class, in.getBody()). }
false;public;0;16;;@Test public void testGetMandatoryBody() throws Exception {     Exchange exchange = new DefaultExchange(context).     Message in = exchange.getIn().     try {         in.getMandatoryBody().         fail("Should have thrown an exception").     } catch (InvalidPayloadException e) {     // expected     }     in.setBody("Hello World").     assertEquals("Hello World", in.getMandatoryBody()). }
false;public;0;8;;@Test public void testGetMessageId() {     context.setUuidGenerator(new SimpleUuidGenerator()).     Exchange exchange = new DefaultExchange(context).     Message in = exchange.getIn().     assertEquals("1", in.getMessageId()). }
false;public;0;6;;@Test public void testGetMessageIdWithoutAnExchange() {     Message in = new DefaultMessage(context).     assertNotNull(in.getMessageId()). }
false;public;0;18;;@Test public void testCopyFromSameHeadersInstance() {     Exchange exchange = new DefaultExchange(context).     Message in = exchange.getIn().     Map<String, Object> headers = in.getHeaders().     headers.put("foo", 123).     Message out = new DefaultMessage(context).     out.setBody("Bye World").     out.setHeaders(headers).     out.copyFrom(in).     assertEquals(123, headers.get("foo")).     assertEquals(123, in.getHeader("foo")).     assertEquals(123, out.getHeader("foo")). }
false;public;0;13;;@Test public void testCopyOverExchange() throws Exception {     Exchange exchange = new DefaultExchange(context).     Message in = exchange.getIn().     in.setBody("Bye World").     Message two = in.copy().     assertSame(exchange, two.getExchange()).     Message three = new DefaultMessage(context).     three.copyFrom(two).     assertSame(exchange, three.getExchange()). }
