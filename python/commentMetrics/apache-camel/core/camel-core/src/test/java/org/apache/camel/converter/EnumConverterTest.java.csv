commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testMandatoryConvertEnum() throws Exception {     LoggingLevel level = context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, "DEBUG").     assertEquals(LoggingLevel.DEBUG, level). }
false;public;0;6;;@Test public void testMandatoryConvertWithExchangeEnum() throws Exception {     Exchange exchange = new DefaultExchange(context).     LoggingLevel level = context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, exchange, "WARN").     assertEquals(LoggingLevel.WARN, level). }
false;public;0;15;;@Test public void testCaseInsensitive() throws Exception {     Exchange exchange = new DefaultExchange(context).     LoggingLevel level = context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, exchange, "Warn").     assertEquals(LoggingLevel.WARN, level).     level = context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, exchange, "warn").     assertEquals(LoggingLevel.WARN, level).     level = context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, exchange, "wARn").     assertEquals(LoggingLevel.WARN, level).     level = context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, exchange, "inFO").     assertEquals(LoggingLevel.INFO, level). }
false;public;0;9;;@Test public void testMandatoryConvertFailed() throws Exception {     try {         context.getTypeConverter().mandatoryConvertTo(LoggingLevel.class, "XXX").         fail("Should have thrown an exception").     } catch (TypeConversionException e) {     // expected     } }
