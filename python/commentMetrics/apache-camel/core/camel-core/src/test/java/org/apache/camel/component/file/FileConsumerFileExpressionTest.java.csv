commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filelanguage").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("counter", new MyGuidGenerator()).     return jndi. }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/filelanguage/bean/" + "?initialDelay=0&delay=10&fileName=${bean:counter.next}.txt&delete=true").to("mock:result"). }
false;public;0;22;;@Test public void testConsumeFileBasedOnBeanName() throws Exception {     template.sendBodyAndHeader("file://target/data/filelanguage/bean", "Hello World", Exchange.FILE_NAME, "122.txt").     template.sendBodyAndHeader("file://target/data/filelanguage/bean", "Goodday World", Exchange.FILE_NAME, "123.txt").     template.sendBodyAndHeader("file://target/data/filelanguage/bean", "Bye World", Exchange.FILE_NAME, "124.txt").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filelanguage/bean/" + "?initialDelay=0&delay=10&fileName=${bean:counter.next}.txt&delete=true").to("mock:result").         }     }).     // we should only get one as we only poll a single file using the file expression     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Goodday World").     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("file://target/data/filelanguage/date/" + "?initialDelay=0&delay=10&fileName=myfile-${date:now:yyyyMMdd}.txt").convertBodyTo(String.class).to("mock:result"). // END SNIPPET: e1 }
false;public;0;24;;@Test public void testConsumeFileBasedOnDatePattern() throws Exception {     template.sendBodyAndHeader("file://target/data/filelanguage/date", "Bye World", Exchange.FILE_NAME, "myfile-20081128.txt").     template.sendBodyAndHeader("file://target/data/filelanguage/date", "Hello World", Exchange.FILE_NAME, "myfile-20081129.txt").     template.sendBodyAndHeader("file://target/data/filelanguage/date", "Goodday World", Exchange.FILE_NAME, simple("myfile-${date:now:yyyyMMdd}.txt")).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("file://target/data/filelanguage/date/" + "?initialDelay=0&delay=10&fileName=myfile-${date:now:yyyyMMdd}.txt").convertBodyTo(String.class).to("mock:result").         // END SNIPPET: e1         }     }).     // we should only get one as we only poll a single file using the file expression     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Goodday World").     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;3;;public String next() {     return "123". }
