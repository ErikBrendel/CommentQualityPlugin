commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testXsltOutput() throws Exception {     createDirectory("target/data/xslt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     mock.expectedFileExists("target/data/xslt/xsltme.xml").     mock.message(0).body().isInstanceOf(File.class).     template.sendBodyAndHeader("direct:start", "<hello>world!</hello>", Exchange.XSLT_FILE_NAME, "target/data/xslt/xsltme.xml").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testXsltOutputFileMissingHeader() throws Exception {     try {         template.sendBody("direct:start", "<hello>world!</hello>").         fail("Should thrown exception").     } catch (CamelExecutionException e) {         NoSuchHeaderException nshe = assertIsInstanceOf(NoSuchHeaderException.class, e.getCause()).         assertEquals(Exchange.XSLT_FILE_NAME, nshe.getHeaderName()).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("xslt:org/apache/camel/component/xslt/example.xsl?output=file").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xslt:org/apache/camel/component/xslt/example.xsl?output=file").to("mock:result").         }     }. }
