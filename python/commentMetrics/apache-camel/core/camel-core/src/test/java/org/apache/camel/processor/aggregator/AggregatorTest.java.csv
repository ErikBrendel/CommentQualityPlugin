commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSendingLotsOfMessagesGetAggregatedToTheLatestMessage() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedBodiesReceived("message:" + messageCount).     // lets send a large batch of messages     for (int i = 1. i <= messageCount. i++) {         String body = "message:" + i.         template.sendBodyAndHeader("direct:start", body, "cheese", 123).     }     resultEndpoint.assertIsSatisfied(). }
false;public;0;13;;@Test public void testOneMessage() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     Map<String, Object> headers = new HashMap<>().     headers.put("cheese", 123).     headers.put("bar", "viper bar").     template.sendBodyAndHeaders("direct:predicate", "test", headers).     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testBatchTimeoutExpiry() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "message:1", "cheese", 123).     resultEndpoint.assertIsSatisfied(). }
false;public;0;10;;@Test public void testAggregatorNotAtStart() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).header("visited").isNotNull().     template.sendBodyAndHeader("seda:header", "message:1", "cheese", 123).     resultEndpoint.assertIsSatisfied(). }
false;public;0;18;;public void configure() {     // START SNIPPET: ex     // in this route we aggregate all from direct:state based on the header id cheese     from("direct:start").aggregate(header("cheese"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result").     from("seda:header").setHeader("visited", constant(true)).aggregate(header("cheese"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result").     // in this sample we aggregate with a completion predicate     from("direct:predicate").aggregate(header("cheese"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).completionPredicate(header("cheese").isEqualTo(123)).to("mock:result"). // END SNIPPET: ex }
false;protected;0;22;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: ex             // in this route we aggregate all from direct:state based on the header id cheese             from("direct:start").aggregate(header("cheese"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result").             from("seda:header").setHeader("visited", constant(true)).aggregate(header("cheese"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result").             // in this sample we aggregate with a completion predicate             from("direct:predicate").aggregate(header("cheese"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).completionPredicate(header("cheese").isEqualTo(123)).to("mock:result").         // END SNIPPET: ex         }     }. }
