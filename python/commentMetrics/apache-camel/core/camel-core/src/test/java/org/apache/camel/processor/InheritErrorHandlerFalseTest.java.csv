commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testInheritErrorHandlerFalse() throws Exception {     counter = 0.     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should throw exception").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Damn", iae.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals(1, counter). }
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(2)).     from("direct:start").process(new MyProcessor()).inheritErrorHandler(false).to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(2)).             from("direct:start").process(new MyProcessor()).inheritErrorHandler(false).to("mock:result").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     exchange.setException(new IllegalArgumentException("Damn")). }
