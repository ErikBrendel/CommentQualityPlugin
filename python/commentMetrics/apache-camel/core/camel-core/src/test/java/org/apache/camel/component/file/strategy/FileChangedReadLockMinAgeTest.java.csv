commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/changed/").     createDirectory("target/data/changed/in").     super.setUp(). }
false;public;0;18;;@Test public void testChangedReadLockMinAge() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/changed/out/slowfile.dat").     mock.expectedMessagesMatches(exchangeProperty(Exchange.RECEIVED_TIMESTAMP).convertTo(long.class).isGreaterThan(new Date().getTime() + 500)).     writeSlowFile().     assertMockEndpointsSatisfied().     String content = context.getTypeConverter().convertTo(String.class, new File("target/data/changed/out/slowfile.dat")).     String[] lines = content.split(LS).     assertEquals("There should be 20 lines in the file", 20, lines.length).     for (int i = 0. i < 20. i++) {         assertEquals("Line " + i, lines[i]).     } }
false;private;0;14;;private void writeSlowFile() throws Exception {     LOG.debug("Writing slow file...").     FileOutputStream fos = new FileOutputStream("target/data/changed/in/slowfile.dat").     for (int i = 0. i < 20. i++) {         fos.write(("Line " + i + LS).getBytes()).         LOG.debug("Writing line " + i).         Thread.sleep(50).     }     fos.flush().     fos.close().     LOG.debug("Writing slow file DONE..."). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file:target/data/changed/in?initialDelay=0&delay=10&readLock=changed&readLockCheckInterval=100&readLockMinAge=1000&readLockTimeout=1500").to("file:target/data/changed/out", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/changed/in?initialDelay=0&delay=10&readLock=changed&readLockCheckInterval=100&readLockMinAge=1000&readLockTimeout=1500").to("file:target/data/changed/out", "mock:result").         }     }. }
