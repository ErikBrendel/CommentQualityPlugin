commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testInflight() throws Exception {     assertEquals(0, context.getInflightRepository().browse().size()).     template.sendBody("direct:start", "Hello World").     assertEquals(0, context.getInflightRepository().browse().size()). }
false;public;1;13;;@Override public void process(Exchange exchange) throws Exception {     Collection<InflightRepository.InflightExchange> list = context.getInflightRepository().browse("foo").     assertEquals(1, list.size()).     InflightRepository.InflightExchange inflight = list.iterator().next().     assertNotNull(inflight).     assertEquals(exchange, inflight.getExchange()).     assertEquals("foo", inflight.getFromRouteId()).     assertEquals("bar", inflight.getAtRouteId()).     assertEquals("myProcessor", inflight.getNodeId()). }
false;public;0;26;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").to("mock:a").to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Collection<InflightRepository.InflightExchange> list = context.getInflightRepository().browse("foo").             assertEquals(1, list.size()).             InflightRepository.InflightExchange inflight = list.iterator().next().             assertNotNull(inflight).             assertEquals(exchange, inflight.getExchange()).             assertEquals("foo", inflight.getFromRouteId()).             assertEquals("bar", inflight.getAtRouteId()).             assertEquals("myProcessor", inflight.getNodeId()).         }     }).id("myProcessor"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").to("mock:a").to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Collection<InflightRepository.InflightExchange> list = context.getInflightRepository().browse("foo").                     assertEquals(1, list.size()).                     InflightRepository.InflightExchange inflight = list.iterator().next().                     assertNotNull(inflight).                     assertEquals(exchange, inflight.getExchange()).                     assertEquals("foo", inflight.getFromRouteId()).                     assertEquals("bar", inflight.getAtRouteId()).                     assertEquals("myProcessor", inflight.getNodeId()).                 }             }).id("myProcessor").         }     }. }
