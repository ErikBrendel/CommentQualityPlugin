commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testRecipientList() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     x.expectedBodiesReceived("answer").     x.expectedHeaderReceived("OnPrepare", true).     MockEndpoint y = getMockEndpoint("mock:y").     y.expectedBodiesReceived("answer").     y.expectedHeaderReceived("OnPrepare", true).     MockEndpoint z = getMockEndpoint("mock:z").     z.expectedBodiesReceived("answer").     z.expectedHeaderReceived("OnPrepare", true).     template.sendBodyAndHeader("direct:a", "answer", "Endpoints", "mock:x,mock:y,mock:z").     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() {     from("direct:a").recipientList().message(m -> m.getHeader("Endpoints", String.class).split(",")).onPrepare().message(m -> m.setHeader("OnPrepare", true)). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:a").recipientList().message(m -> m.getHeader("Endpoints", String.class).split(",")).onPrepare().message(m -> m.setHeader("OnPrepare", true)).         }     }. }
