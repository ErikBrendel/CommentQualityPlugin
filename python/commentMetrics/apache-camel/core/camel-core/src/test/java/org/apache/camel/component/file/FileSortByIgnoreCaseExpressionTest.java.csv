commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filesorter").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;private;1;10;;private void prepareFolder(String folder) {     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello Paris", Exchange.FILE_NAME, "report-3.dat").     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello London", Exchange.FILE_NAME, "REPORT-2.txt").     template.sendBodyAndHeader("file:target/data/filesorter/" + folder, "Hello Copenhagen", Exchange.FILE_NAME, "Report-1.xml"). }
false;public;0;5;;@Override public void configure() throws Exception {     from(fileUrl + "a/?sortBy=file:name&initialDelay=250&delay=1000").convertBodyTo(String.class).to("mock:result"). }
false;public;0;18;;@Test public void testSortFilesByNameWithCase() throws Exception {     prepareFolder("a").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fileUrl + "a/?sortBy=file:name&initialDelay=250&delay=1000").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello London", "Hello Copenhagen", "Hello Paris").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(fileUrl + "b/?initialDelay=0&delay=10&sortBy=ignoreCase:file:name").convertBodyTo(String.class).to("mock:nocase"). }
false;public;0;18;;@Test public void testSortFilesByNameNoCase() throws Exception {     prepareFolder("b").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fileUrl + "b/?initialDelay=0&delay=10&sortBy=ignoreCase:file:name").convertBodyTo(String.class).to("mock:nocase").         }     }).     context.start().     MockEndpoint nocase = getMockEndpoint("mock:nocase").     nocase.expectedBodiesReceived("Hello Copenhagen", "Hello London", "Hello Paris").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(fileUrl + "c/?initialDelay=0&delay=10&sortBy=reverse:ignoreCase:file:name").convertBodyTo(String.class).to("mock:nocasereverse"). }
false;public;0;18;;@Test public void testSortFilesByNameNoCaseReverse() throws Exception {     prepareFolder("c").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fileUrl + "c/?initialDelay=0&delay=10&sortBy=reverse:ignoreCase:file:name").convertBodyTo(String.class).to("mock:nocasereverse").         }     }).     context.start().     MockEndpoint nocasereverse = getMockEndpoint("mock:nocasereverse").     nocasereverse.expectedBodiesReceived("Hello Paris", "Hello London", "Hello Copenhagen").     assertMockEndpointsSatisfied(). }
