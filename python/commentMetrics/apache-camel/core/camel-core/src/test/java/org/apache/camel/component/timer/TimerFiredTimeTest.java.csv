commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testFired() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     assertEquals("hello", exchange.getProperty(Exchange.TIMER_NAME)).     assertNotNull(exchange.getProperty(Exchange.TIMER_FIRED_TIME)).     assertNotNull(exchange.getIn().getHeader("firedTime")).     assertEquals(Long.valueOf(1), exchange.getProperty(Exchange.TIMER_COUNTER)). }
false;public;0;3;;public void configure() throws Exception {     from("timer://hello?period=10&delay=10").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("timer://hello?period=10&delay=10").to("mock:result").         }     }. }
