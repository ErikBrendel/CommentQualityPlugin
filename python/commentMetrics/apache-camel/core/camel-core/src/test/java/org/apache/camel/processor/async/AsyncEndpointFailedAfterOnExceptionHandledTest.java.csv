commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:error").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:result").expectedMessageCount(0).     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("FAIL", reply).     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;25;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     onException(IllegalArgumentException.class).handled(true).to("mock:error").transform(constant("FAIL")).     from("direct:start").to("mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("async:bye:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:after").throwException(new IllegalArgumentException("Damn")).to("mock:result"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             onException(IllegalArgumentException.class).handled(true).to("mock:error").transform(constant("FAIL")).             from("direct:start").to("mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:after").throwException(new IllegalArgumentException("Damn")).to("mock:result").         }     }. }
