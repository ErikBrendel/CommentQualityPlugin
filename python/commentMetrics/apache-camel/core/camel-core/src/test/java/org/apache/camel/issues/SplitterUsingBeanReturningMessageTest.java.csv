commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("mySplitter", new MyOtherSplitterBean()).     return jndi. }
false;public;1;16;;public List<?> split(Exchange exchange) {     Message in = exchange.getIn().     assertNotNull(in.toString()).     List<Message> msgs = new LinkedList<>().     Message copy = in.copy().     assertNotNull(copy.toString()).     copy.setBody("not empty").     copy.setHeader("type", "TYPE1").     msgs.add(copy).     return msgs. }
false;public;0;11;;@Test public void testSplitWithMessage() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isEqualTo("not empty").     mock.message(0).header("type").isEqualTo("TYPE1").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").split().method("mySplitter").to("log:foo", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split().method("mySplitter").to("log:foo", "mock:result").         }     }. }
