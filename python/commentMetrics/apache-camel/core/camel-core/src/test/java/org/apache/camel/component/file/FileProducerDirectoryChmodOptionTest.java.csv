commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory(TEST_DIRECTORY).     super.setUp(). }
false;private;0;4;;private boolean canTest() {     // can not run on windows     return !isPlatform("windows"). }
false;public;0;8;;@Test public void testWriteValidNoDir() throws Exception {     if (!canTest()) {         return.     }     runChmodCheck("NoDir", null, "rwxr-xr-x"). }
false;public;0;8;;@Test public void testWriteValidChmod0755() throws Exception {     if (!canTest()) {         return.     }     runChmodCheck("0755", "rwxrwxrwx", "rwxr-xr-x"). }
false;public;0;8;;@Test public void testWriteValidChmod666() throws Exception {     if (!canTest()) {         return.     }     runChmodCheck("666", "rwxrwxrwx", "rw-rw-rw-"). }
false;private;3;26;;private void runChmodCheck(String routeSuffix, String expectedDirectoryPermissions, String expectedPermissions) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:chmod" + routeSuffix).     mock.expectedMessageCount(1).     String testFileName = "chmod" + routeSuffix + ".txt".     String fullTestFileName = TEST_DIRECTORY + testFileName.     String testFileContent = "Writing file with chmod " + routeSuffix + " option at " + new Date().     mock.expectedFileExists(fullTestFileName, testFileContent).     template.sendBodyAndHeader("direct:write" + routeSuffix, testFileContent, Exchange.FILE_NAME, testFileName).     if (expectedDirectoryPermissions != null) {         File d = new File(TEST_DIRECTORY).         Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(d.toPath(), LinkOption.NOFOLLOW_LINKS).         assertEquals(expectedDirectoryPermissions, PosixFilePermissions.toString(permissions)).         assertEquals(expectedDirectoryPermissions.replace("-", "").length(), permissions.size()).     }     if (expectedPermissions != null) {         File f = new File(fullTestFileName).         Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(f.toPath(), LinkOption.NOFOLLOW_LINKS).         assertEquals(expectedPermissions, PosixFilePermissions.toString(permissions)).         assertEquals(expectedPermissions.replace("-", "").length(), permissions.size()).     }     assertMockEndpointsSatisfied(). }
false;public;0;15;;public void configure() {     // Valid chmod values     from("direct:write666").to("file://" + TEST_DIRECTORY + "?chmodDirectory=777&chmod=666").to("mock:chmod666").     from("direct:write0755").to("file://" + TEST_DIRECTORY + "?chmodDirectory=777&chmod=0755").to("mock:chmod0755").     from("direct:writeNoDir").to("file://" + TEST_DIRECTORY + "?chmod=0755").to("mock:chmodNoDir"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Valid chmod values             from("direct:write666").to("file://" + TEST_DIRECTORY + "?chmodDirectory=777&chmod=666").to("mock:chmod666").             from("direct:write0755").to("file://" + TEST_DIRECTORY + "?chmodDirectory=777&chmod=0755").to("mock:chmod0755").             from("direct:writeNoDir").to("file://" + TEST_DIRECTORY + "?chmod=0755").to("mock:chmodNoDir").         }     }. }
