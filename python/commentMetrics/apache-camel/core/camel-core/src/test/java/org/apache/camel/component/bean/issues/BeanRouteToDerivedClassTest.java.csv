commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("bean:derived?method=process"). }
false;public;0;15;;@Test public void testDerivedClassCalled() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:derived?method=process").         }     }).     context.start().     template.sendBody("direct:start", "Hello World").     assertEquals("Derived class should have been invoked", "Hello World", derived.getAndClearBody()). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").to("bean:derived?method=process").     from("direct:other").to("bean:derived"). }
false;public;0;28;;@Test public void testDerivedClassCalledWithNoCustomProcessor() throws Exception {     context.getTypeConverterRegistry().addTypeConverter(Processor.class, MyMessageListener.class, new MyMessageToProcessorConverter()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:derived?method=process").             from("direct:other").to("bean:derived").         }     }).     context.start().     Object out = template.requestBody("direct:start", "Hello World").     assertEquals("Derived class should have been invoked", "Hello World", derived.getAndClearBody()).     assertEquals("Hello World", out.toString()).     out = template.requestBody("direct:other", new MyMessage("Hello World")).     assertEquals("Derived class should NOT have been invoked", null, derived.getAndClearBody()).     assertEquals("Bye World", out.toString()).     out = template.requestBody("direct:other", new MyMessage("Hello Again")).     assertEquals("Derived class should NOT have been invoked", null, derived.getAndClearBody()).     assertEquals("Bye World", out.toString()). }
false;public;0;10;;@Override public void configure() throws Exception {     // Explicit method name given so always call this     from("direct:start").to("bean:derived?method=process").     // no explicit method name then a custom processor can kick in     from("direct:other").to("bean:derived"). }
false;public;0;30;;@Test public void testDerivedClassCalledWithCustomProcessor() throws Exception {     context.getTypeConverterRegistry().addTypeConverter(Processor.class, MyMessageListener.class, new MyMessageToProcessorConverter()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // Explicit method name given so always call this             from("direct:start").to("bean:derived?method=process").             // no explicit method name then a custom processor can kick in             from("direct:other").to("bean:derived").         }     }).     context.start().     Object out = template.requestBody("direct:start", new MyMessage("Hello World")).     assertEquals("Derived class should have been invoked", "Hello World", derived.getAndClearBody()).     assertEquals("Hello World", out.toString()).     out = template.requestBody("direct:other", new MyMessage("Hello World")).     assertEquals("Derived class should NOT have been invoked", null, derived.getAndClearBody()).     assertEquals("Bye World", out.toString()).     out = template.requestBody("direct:other", new MyMessage("Hello Again")).     assertEquals("Derived class should NOT have been invoked", null, derived.getAndClearBody()).     assertEquals("Bye World", out.toString()). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("derived", derived).     return jndi. }
