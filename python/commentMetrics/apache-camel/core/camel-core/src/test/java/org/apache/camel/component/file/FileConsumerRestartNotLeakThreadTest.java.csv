commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/leak").     super.setUp(). }
false;public;0;24;;@Test public void testLeak() throws Exception {     int before = Thread.activeCount().     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/leak", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     for (int i = 0. i < 50. i++) {         context.getRouteController().stopRoute("foo").         context.getRouteController().startRoute("foo").     }     resetMocks().     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/leak", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied().     int active = Thread.activeCount() - before.     log.info("Active threads after restarts: {}", active).     assertTrue("There should not be so many active threads, was " + active, active < 10). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file:target/data/leak").routeId("foo").to("mock:foo"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/leak").routeId("foo").to("mock:foo").         }     }. }
