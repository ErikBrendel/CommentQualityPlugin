commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testBeanParameterValue() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testBeanParameterValueBodyOgnl() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Tony").     Animal tiger = new Animal("Tony", 13).     template.sendBody("direct:start2", tiger).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testBeanParameterValueHeaderOgnl() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Kong").     Animal kong = new Animal("Kong", 34).     Animal tiger = new Animal("Tony", 13).     tiger.setFriend(kong).     template.sendBodyAndHeader("direct:start3", "Hello World", "animal", tiger).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyBean()).     return jndi. }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").to("bean:foo?method=bar(${body},true)").to("mock:result").     from("direct:start2").to("bean:foo?method=bar(${body.name}, true)").to("mock:result").     from("direct:start3").to("bean:foo?method=bar(${header.animal?.friend.name}, true)").to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:foo?method=bar(${body},true)").to("mock:result").             from("direct:start2").to("bean:foo?method=bar(${body.name}, true)").to("mock:result").             from("direct:start3").to("bean:foo?method=bar(${header.animal?.friend.name}, true)").to("mock:result").         }     }. }
false;public;2;7;;public String bar(String body, boolean hello) {     if (hello) {         return "Hello " + body.     } else {         return body.     } }
false;public;2;11;;public String echo(String body, int times) {     if (times > 0) {         StringBuilder sb = new StringBuilder().         for (int i = 0. i < times. i++) {             sb.append(body).         }         return sb.toString().     }     return body. }
false;public;0;3;;public String getName() {     return name. }
false;public;0;3;;public int getAge() {     return age. }
false;public;0;3;;public Animal getFriend() {     return friend. }
false;public;1;3;;public void setFriend(Animal friend) {     this.friend = friend. }
false;public;0;3;;public boolean isDangerous() {     return name.contains("Tiger"). }
false;public;0;4;;@Override public String toString() {     return name. }
