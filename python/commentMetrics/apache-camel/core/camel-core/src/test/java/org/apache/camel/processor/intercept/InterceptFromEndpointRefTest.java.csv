commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testIntercept() throws Exception {     getMockEndpoint("mock:intercepted").expectedMessageCount(1).     getMockEndpoint("mock:first").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() throws Exception {     context.getRegistry().bind("start", context.getEndpoint("direct:start")).     context.getRegistry().bind("bar", context.getEndpoint("seda:bar")).     // ref:start -> direct:start so we should intercept that as well     interceptFrom("direct*").to("mock:intercepted").     from("ref:start").to("mock:first").to("ref:bar").     from("ref:bar").to("mock:result"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             context.getRegistry().bind("start", context.getEndpoint("direct:start")).             context.getRegistry().bind("bar", context.getEndpoint("seda:bar")).             // ref:start -> direct:start so we should intercept that as well             interceptFrom("direct*").to("mock:intercepted").             from("ref:start").to("mock:first").to("ref:bar").             from("ref:bar").to("mock:result").         }     }. }
