commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.init().     context.getManagementStrategy().addEventNotifier(notifier).     return context. }
false;public;0;18;;@Test public void testUseOriginalNotPropgateException() throws Exception {     assertEquals(0, notifier.getErrors()).     getMockEndpoint("mock:line").expectedBodiesReceived("Hello", "World").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello,Kaboom,World").     try {         template.sendBody("direct:start", "Hello,Kaboom,World").     } catch (Exception e) {         fail("Should not fail").     }     assertMockEndpointsSatisfied().     // there should only be 1 error as we do not propagate errors to the parent     assertEquals(1, notifier.getErrors()). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").split(body()).aggregationStrategy(AggregationStrategies.useOriginal(false)).filter(simple("${body} == 'Kaboom'")).throwException(new IllegalArgumentException("Forced error")).end().to("mock:line").end().to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body()).aggregationStrategy(AggregationStrategies.useOriginal(false)).filter(simple("${body} == 'Kaboom'")).throwException(new IllegalArgumentException("Forced error")).end().to("mock:line").end().to("mock:result").         }     }. }
false;public;1;4;;@Override public void notify(CamelEvent event) throws Exception {     errors++. }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeFailedEvent. }
false;public;0;3;;public int getErrors() {     return errors. }
