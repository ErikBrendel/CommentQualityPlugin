commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDelayPatternTest() throws Exception {     counter = 0.     MockEndpoint mock = getMockEndpoint("mock:error").     mock.expectedMessageCount(1).     long start = System.currentTimeMillis().     template.sendBody("direct:start", "Hello World").     long delta = System.currentTimeMillis() - start.     assertTrue("Should be slower", delta > 1000).     assertMockEndpointsSatisfied().     assertEquals(3, counter). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     counter++. }
false;public;0;10;;public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").delayPattern("0:250.2:500").maximumRedeliveries(3).onRedelivery(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.         }     })).     from("direct:start").throwException(new Exception("Forced exception by unit test")). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").delayPattern("0:250.2:500").maximumRedeliveries(3).onRedelivery(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                 }             })).             from("direct:start").throwException(new Exception("Forced exception by unit test")).         }     }. }
