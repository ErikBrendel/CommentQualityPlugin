commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testCompleteAllOnStop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedBodiesReceived("A+B", "C").     // we only send 3, but we get 2 exchanges completed when stopping     // as we tell it to complete all on stop     template.sendBodyAndHeader("seda:start", "A", "id", "foo").     template.sendBodyAndHeader("seda:start", "B", "id", "foo").     template.sendBodyAndHeader("seda:start", "C", "id", "foo").     context.getRouteController().stopRoute("foo").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("seda:start").routeId("foo").aggregate(header("id"), new BodyInAggregatingStrategy()).aggregationRepository(new MemoryAggregationRepository()).completionSize(2).completionTimeout(100).completeAllOnStop().completionTimeoutCheckerInterval(10).to("mock:aggregated"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").routeId("foo").aggregate(header("id"), new BodyInAggregatingStrategy()).aggregationRepository(new MemoryAggregationRepository()).completionSize(2).completionTimeout(100).completeAllOnStop().completionTimeoutCheckerInterval(10).to("mock:aggregated").         }     }. }
