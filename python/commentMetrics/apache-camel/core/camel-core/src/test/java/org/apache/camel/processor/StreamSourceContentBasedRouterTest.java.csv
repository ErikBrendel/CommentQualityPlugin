commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendStreamSource() throws Exception {     x.expectedMessageCount(1).     y.expectedMessageCount(1).     sendBody("direct:start", new StreamSource(new StringReader("<message>xx</message>"))).     sendBody("direct:start", new StreamSource(new StringReader("<message>yy</message>"))).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSendStringSource() throws Exception {     x.expectedMessageCount(1).     y.expectedMessageCount(1).     sendBody("direct:start", new StringSource("<message>xx</message>")).     sendBody("direct:start", new StringSource("<message>yy</message>")).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y"). }
false;public;0;9;;public void configure() {     // should work with default error handler as the stream cache     // is enabled and make sure the predicates can be evaluated     // multiple times     from("direct:start").streamCaching().choice().when().xpath("/message/text() = 'xx'").to("mock:x").when().xpath("/message/text() = 'yy'").to("mock:y"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // should work with default error handler as the stream cache             // is enabled and make sure the predicates can be evaluated             // multiple times             from("direct:start").streamCaching().choice().when().xpath("/message/text() = 'xx'").to("mock:x").when().xpath("/message/text() = 'yy'").to("mock:y").         }     }. }
