commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Before public void setUp() throws Exception {     setUseRouteBuilder(false).     super.setUp().     RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy().     redeliveryPolicy.maximumRedeliveries(1).     redeliveryPolicy.setUseExponentialBackOff(true).     DeadLetterChannelBuilder deadLetterChannelBuilder = new DeadLetterChannelBuilder("mock:error").     deadLetterChannelBuilder.setRedeliveryPolicy(redeliveryPolicy).     context.setErrorHandlerFactory(deadLetterChannelBuilder). }
false;protected;0;3;;protected void startCamelContext() throws Exception { // do nothing here }
false;protected;0;3;;protected void stopCamelContext() throws Exception { // do nothing here }
false;protected;1;7;;protected List<Route> getRouteListWithCurrentContext(RouteBuilder builder) throws Exception {     context.addRoutes(builder).     context.start().     List<Route> answer = context.getRoutes().     context.stop().     return answer. }
false;public;0;4;;public void configure() {     errorHandler(deadLetterChannel("log:FOO.BAR")).     from("seda:a").to("seda:b"). }
false;public;0;25;;@Test public void testOverloadingTheDefaultErrorHandler() throws Exception {     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("log:FOO.BAR")).             from("seda:a").to("seda:b").         }     }.     List<Route> list = getRouteListWithCurrentContext(builder).     assertEquals("Number routes created" + list, 1, list.size()).     for (Route route : list) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "seda://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Processor processor = consumerRoute.getProcessor().         Channel channel = unwrapChannel(processor).         assertIsInstanceOf(DeadLetterChannel.class, channel.getErrorHandler()).         SendProcessor sendProcessor = assertIsInstanceOf(SendProcessor.class, channel.getNextProcessor()).         log.debug("Found sendProcessor: " + sendProcessor).     } }
false;public;0;4;;public void configure() {     from("seda:a").to("seda:b").     from("direct:c").to("direct:d"). }
false;public;0;26;;@Test public void testGetTheDefaultErrorHandlerFromContext() throws Exception {     RouteBuilder builder = new RouteBuilder() {          public void configure() {             from("seda:a").to("seda:b").             from("direct:c").to("direct:d").         }     }.     List<Route> list = getRouteListWithCurrentContext(builder).     assertEquals("Number routes created" + list, 2, list.size()).     for (Route route : list) {         EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Processor processor = consumerRoute.getProcessor().         Channel channel = unwrapChannel(processor).         DeadLetterChannel deadLetterChannel = assertIsInstanceOf(DeadLetterChannel.class, channel.getErrorHandler()).         RedeliveryPolicy redeliveryPolicy = deadLetterChannel.getRedeliveryPolicy().         assertEquals("getMaximumRedeliveries()", 1, redeliveryPolicy.getMaximumRedeliveries()).         assertEquals("isUseExponentialBackOff()", true, redeliveryPolicy.isUseExponentialBackOff()).     } }
