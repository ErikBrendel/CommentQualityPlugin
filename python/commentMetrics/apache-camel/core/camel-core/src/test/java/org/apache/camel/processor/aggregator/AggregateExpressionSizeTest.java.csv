commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testAggregateExpressionSize() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C").     Map<String, Object> headers = new HashMap<>().     headers.put("id", 123).     headers.put("mySize", 3).     template.sendBodyAndHeaders("direct:start", "A", headers).     template.sendBodyAndHeaders("direct:start", "B", headers).     template.sendBodyAndHeaders("direct:start", "C", headers).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(header("mySize")).to("mock:aggregated"). // END SNIPPET: e1 }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(header("mySize")).to("mock:aggregated").         // END SNIPPET: e1         }     }. }
