commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from(te).to("mock:result"). }
false;public;0;22;;@Test public void testTimerEndpoint() throws Exception {     final TimerEndpoint te = new TimerEndpoint().     te.setCamelContext(context).     te.setTimer(new Timer(true)).     te.setEndpointUriIfNotSpecified("timer://foo").     te.setPeriod(10).     te.setDelay(10).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(te).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(te).to("mock:result"). }
false;public;0;20;;@Test public void testTimerEndpointYetAgain() throws Exception {     final TimerEndpoint te = new TimerEndpoint("timer://foo", context.getComponent("timer"), "foo").     te.setTimer(new Timer(true)).     te.setPeriod(10).     te.setDelay(10).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(te).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testTimerEndpointNoProducer() throws Exception {     Endpoint te = context.getEndpoint("timer://foo").     try {         te.createProducer().         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {     // expected     } }
