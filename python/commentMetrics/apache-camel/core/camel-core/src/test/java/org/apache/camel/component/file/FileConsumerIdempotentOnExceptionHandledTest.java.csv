commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/messages/input").     super.setUp(). }
false;public;0;14;;@Test public void testIdempotent() throws Exception {     getMockEndpoint("mock:invalid").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/messages/input/", "Hello World", Exchange.FILE_NAME, "hello.txt").     oneExchangeDone.matchesMockWaitTime().     assertMockEndpointsSatisfied().     // the error is handled and the file is regarded as success and therefore moved to .camel     assertFileNotExists("target/data/messages/input/hello.txt").     assertFileExists("target/data/messages/input/.camel/hello.txt"). }
false;public;0;8;;public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:invalid").     // our route logic to process files from the input folder     from("file:target/data/messages/input/?initialDelay=0&delay=10&idempotent=true").to("mock:input").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;12;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:invalid").             // our route logic to process files from the input folder             from("file:target/data/messages/input/?initialDelay=0&delay=10&idempotent=true").to("mock:input").throwException(new IllegalArgumentException("Forced")).         }     }. }
