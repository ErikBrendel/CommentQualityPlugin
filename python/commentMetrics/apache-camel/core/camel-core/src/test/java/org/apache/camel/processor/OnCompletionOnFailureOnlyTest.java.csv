commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSynchronizeComplete() throws Exception {     // do not expect a message since we only do onFailureOnly     getMockEndpoint("mock:sync").expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").onCompletion().onFailureOnly().to("log:sync").to("mock:sync").end().process(new MyProcessor()).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").onCompletion().onFailureOnly().to("log:sync").to("mock:sync").end().process(new MyProcessor()).to("mock:result").         // END SNIPPET: e1         }     }. }
