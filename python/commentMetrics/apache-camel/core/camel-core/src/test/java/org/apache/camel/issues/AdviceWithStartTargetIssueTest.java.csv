commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised"). }
false;public;0;20;;@Test public void testAdvised() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:advised").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     getContext().addInterceptStrategy(new ContainerWideInterceptor()).     from("direct:start").to("mock:foo").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().addInterceptStrategy(new ContainerWideInterceptor()).             from("direct:start").to("mock:foo").to("mock:result").         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // we just count number of interceptions     count++.     LOG.info("I am the container wide interceptor. Intercepted total count: " + count).     target.process(exchange). }
false;public;0;4;;@Override public String toString() {     return "ContainerWideInterceptor[" + target + "]". }
false;public;4;18;;public Processor wrapProcessorInInterceptors(final CamelContext context, final NamedNode definition, final Processor target, final Processor nextTarget) throws Exception {     return new DelegateAsyncProcessor(new Processor() {          public void process(Exchange exchange) throws Exception {             // we just count number of interceptions             count++.             LOG.info("I am the container wide interceptor. Intercepted total count: " + count).             target.process(exchange).         }          @Override         public String toString() {             return "ContainerWideInterceptor[" + target + "]".         }     }). }
false;public;0;3;;public int getCount() {     return count. }
