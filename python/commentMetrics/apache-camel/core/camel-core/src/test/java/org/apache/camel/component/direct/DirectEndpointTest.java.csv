commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from(de).to("mock:result"). }
false;public;0;21;;@Test public void testDirectEndpoint() throws Exception {     final DirectEndpoint de = new DirectEndpoint().     de.setCamelContext(context).     de.setEndpointUriIfNotSpecified("direct://foo").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(de).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody(de, "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(de).to("mock:result"). }
false;public;0;19;;@Test public void testDirectEndpointAgain() throws Exception {     final DirectEndpoint de = new DirectEndpoint("direct://foo", context.getComponent("direct")).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(de).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody(de, "Hello World").     assertMockEndpointsSatisfied(). }
