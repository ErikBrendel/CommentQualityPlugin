commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;13;;@Test public void testDefaultErrorHandlerOnPrepare() throws Exception {     Exchange out = template.request("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertNotNull(out).     assertTrue("Should be failed", out.isFailed()).     assertIsInstanceOf(IllegalArgumentException.class, out.getException()).     assertEquals("Forced", out.getIn().getHeader("FailedBecause")). }
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().onPrepareFailure(new MyPrepareProcessor())).     from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().onPrepareFailure(new MyPrepareProcessor())).             from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")).         }     }. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     Exception cause = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     exchange.getIn().setHeader("FailedBecause", cause.getMessage()). }
