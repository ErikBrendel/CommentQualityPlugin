commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").multicast().stopOnException().to("mock:foo", "async:bye:camel", "mock:bar"). }
false;public;0;25;;@Test public void testAsyncEndpointOK() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").multicast().stopOnException().to("mock:foo", "async:bye:camel", "mock:bar").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").multicast().stopOnException().to("mock:foo", "async:bye:camel").throwException(new IllegalArgumentException("Damn")).to("mock:bar"). }
false;public;0;30;;@Test public void testAsyncEndpointERROR() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").multicast().stopOnException().to("mock:foo", "async:bye:camel").throwException(new IllegalArgumentException("Damn")).to("mock:bar").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should throw exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
