commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testConsumePropertyExplicit() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeBean my = new MyConsumeBean().     my.setFoo("seda:foo").     Method method = my.getClass().getMethod("consumeSomething", String.class).     helper.consumerInjection(method, my, "foo").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testConsumePropertyImplicit() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeBean my = new MyConsumeBean().     my.setFoo("seda:foo").     Method method = my.getClass().getMethod("foo", String.class).     helper.consumerInjection(method, my, "foo").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testConsumePropertyOnImplicit() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeBean my = new MyConsumeBean().     my.setFoo("seda:foo").     Method method = my.getClass().getMethod("onFoo", String.class).     helper.consumerInjection(method, my, "foo").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testConsumePropertyEndpointImplicit() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeBean my = new MyConsumeBean().     my.setBarEndpoint("seda:bar").     Method method = my.getClass().getMethod("bar", String.class).     helper.consumerInjection(method, my, "bar").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:bar", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Test public void testConsumePropertyOnEndpointImplicit() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeBean my = new MyConsumeBean().     my.setBarEndpoint("seda:bar").     Method method = my.getClass().getMethod("onBar", String.class).     helper.consumerInjection(method, my, "bar").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:bar", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public String getFoo() {     return foo. }
false;public;1;3;;public void setFoo(String foo) {     this.foo = foo. }
false;public;0;3;;public String getBarEndpoint() {     return barEndpoint. }
false;public;1;3;;public void setBarEndpoint(String barEndpoint) {     this.barEndpoint = barEndpoint. }
false;public;1;5;;@Consume(property = "foo") public void consumeSomething(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;1;5;;@Consume() public void foo(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;1;5;;@Consume() public void onFoo(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;1;5;;@Consume() public void bar(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;1;5;;@Consume() public void onBar(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
