commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testOk() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:rollback").expectedMessageCount(0).     template.requestBody("direct:start", "ok").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testRollback() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:rollback").expectedMessageCount(1).     try {         template.requestBody("direct:start", "bad").         fail("Should have thrown a RollbackExchangeException").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof RollbackExchangeException).     }     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("bad"). }
false;public;0;19;;@Test public void testRollbackWithExchange() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:rollback").expectedMessageCount(1).     Exchange out = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("bad").         }     }).     assertMockEndpointsSatisfied().     assertNotNull(out.getException()).     assertIsInstanceOf(RollbackExchangeException.class, out.getException()).     assertEquals("Should be marked as rollback", true, out.isRollbackOnly()).     // should not try to redeliver if exchange was marked as rollback only     assertEquals(0, out.getIn().getHeader(Exchange.REDELIVERY_COUNTER)).     assertEquals(false, out.getIn().getHeader(Exchange.REDELIVERED)). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").choice().when(body().isNotEqualTo("ok")).to("mock:rollback").rollback("That do not work").otherwise().to("mock:result").end(). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when(body().isNotEqualTo("ok")).to("mock:rollback").rollback("That do not work").otherwise().to("mock:result").end().         }     }. }
