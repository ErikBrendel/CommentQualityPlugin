commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testEnrichTrueOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testEnrichTrueKaboom() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("I cannot do this").     template.sendBody("direct:start", "Kaboom").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testEnrichFalseOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start2", "World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testEnrichFalseKaboom() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:start2", "Kaboom").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("I cannot do this", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").enrich("direct:foo", new MyAggregationStrategy(), true).to("mock:result").     from("direct:start2").enrich("direct:foo", new MyAggregationStrategy(), false).to("mock:result").     from("direct:foo").process(new MyProcessor()). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").enrich("direct:foo", new MyAggregationStrategy(), true).to("mock:result").             from("direct:start2").enrich("direct:foo", new MyAggregationStrategy(), false).to("mock:result").             from("direct:foo").process(new MyProcessor()).         }     }. }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body.startsWith("Kaboom")) {         throw new IllegalArgumentException("I cannot do this").     }     exchange.getIn().setBody("Hello " + body). }
false;public;2;11;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (newExchange.getException() != null) {         oldExchange.getIn().setBody(newExchange.getException().getMessage()).         return oldExchange.     }     // replace body     oldExchange.getIn().setBody(newExchange.getIn().getBody()).     return oldExchange. }
