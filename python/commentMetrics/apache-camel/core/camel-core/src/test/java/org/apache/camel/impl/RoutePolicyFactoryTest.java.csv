commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testRoutePolicyFactory() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedHeaderReceived("RoutePolicy", "foo-route").     getMockEndpoint("mock:bar").expectedHeaderReceived("RoutePolicy", "bar-route").     template.sendBody("direct:foo", "Hello Foo").     template.sendBody("direct:bar", "Hello Bar").     assertMockEndpointsSatisfied(). }
false;public;3;4;;@Override public RoutePolicy createRoutePolicy(CamelContext camelContext, String routeId, NamedNode route) {     return new MyRoutePolicy(routeId). }
false;public;0;3;;public String getRouteId() {     return routeId. }
false;public;2;4;;@Override public void onExchangeBegin(Route route, Exchange exchange) {     exchange.getIn().setHeader("RoutePolicy", routeId). }
false;public;0;10;;@Override public void configure() throws Exception {     context.addRoutePolicyFactory(new MyRoutePolicyFactory()).     from("direct:foo").routeId("foo-route").to("mock:foo").     from("direct:bar").routeId("bar-route").to("mock:bar"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addRoutePolicyFactory(new MyRoutePolicyFactory()).             from("direct:foo").routeId("foo-route").to("mock:foo").             from("direct:bar").routeId("bar-route").to("mock:bar").         }     }. }
