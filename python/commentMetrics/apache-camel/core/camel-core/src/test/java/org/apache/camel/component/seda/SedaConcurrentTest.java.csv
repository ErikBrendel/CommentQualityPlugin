commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSedaConcurrentInOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     // should at least take 0.5 sec     mock.setResultMinimumWaitTime(500).     for (int i = 0. i < 20. i++) {         template.sendBody("seda:foo", "Message " + i).     }     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testSedaConcurrentInOnlyWithAsync() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     // should at least take 0.5 sec     mock.setResultMinimumWaitTime(500).     for (int i = 0. i < 20. i++) {         template.asyncSendBody("seda:foo", "Message " + i).     }     assertMockEndpointsSatisfied(). }
false;public;0;3;;public Object call() throws Exception {     return template.requestBody("seda:bar", "Message " + num). }
false;public;0;26;;@Test public void testSedaConcurrentInOut() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     mock.allMessages().body().startsWith("Bye").     // should at least take 0.5 sec     mock.setResultMinimumWaitTime(500).     ExecutorService executors = Executors.newFixedThreadPool(10).     List<Object> replies = new ArrayList<>(20).     for (int i = 0. i < 20. i++) {         final int num = i.         Object out = executors.submit(new Callable<Object>() {              public Object call() throws Exception {                 return template.requestBody("seda:bar", "Message " + num).             }         }).         replies.add(out).     }     assertMockEndpointsSatisfied().     assertEquals(20, replies.size()).     executors.shutdownNow(). }
false;public;0;31;;@Test public void testSedaConcurrentInOutWithAsync() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     mock.allMessages().body().startsWith("Bye").     // should at least take 0.5 sec     mock.setResultMinimumWaitTime(500).     // use our own template that has a higher thread pool than default camel that uses 5     ExecutorService executor = Executors.newFixedThreadPool(10).     ProducerTemplate pt = new DefaultProducerTemplate(context, executor).     // must start the template     pt.start().     List<Future<Object>> replies = new ArrayList<>(20).     for (int i = 0. i < 20. i++) {         Future<Object> out = pt.asyncRequestBody("seda:bar", "Message " + i).         replies.add(out).     }     assertMockEndpointsSatisfied().     assertEquals(20, replies.size()).     for (int i = 0. i < 20. i++) {         String out = (String) replies.get(i).get().         assertTrue(out.startsWith("Bye")).     }     pt.stop().     executor.shutdownNow(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo?concurrentConsumers=10").to("mock:before").delay(500).to("mock:result").     from("seda:bar?concurrentConsumers=10").to("mock:before").delay(500).transform(body().prepend("Bye ")).to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo?concurrentConsumers=10").to("mock:before").delay(500).to("mock:result").             from("seda:bar?concurrentConsumers=10").to("mock:before").delay(500).transform(body().prepend("Bye ")).to("mock:result").         }     }. }
