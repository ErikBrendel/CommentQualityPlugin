commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testRouteSuspendResumeWarmUpTest() throws Exception {     assertEquals("start", service.getState()).     context.getRouteController().resumeRoute("foo").     // should keep this state as we are only suspending the consumer     assertEquals("start", service.getState()).     context.getRouteController().resumeRoute("foo").     // should keep this state as we are only suspending the consumer     assertEquals("start", service.getState()).     context.stop().     // now its stopped     assertEquals("stop", service.getState()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").routeId("foo").process(service).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").routeId("foo").process(service).to("mock:result").         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;protected;0;3;;protected void doStart() throws Exception {     state = "start". }
false;protected;0;3;;protected void doStop() throws Exception {     state = "stop". }
false;public;0;3;;public String getState() {     return state. }
