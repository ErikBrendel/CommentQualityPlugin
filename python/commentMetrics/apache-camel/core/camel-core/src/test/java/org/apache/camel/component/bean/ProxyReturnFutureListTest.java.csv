commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testFutureList() throws Exception {     Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class).     Future<List<String>> future = service.getUsers(true).     log.info("Got future").     assertFalse("Should not be done", future.isDone()).     log.info("Waiting for future to be done ...").     List<String> users = future.get(2, TimeUnit.SECONDS).     assertEquals("Claus", users.get(0)).     assertEquals("Jonathan", users.get(1)). }
false;public;0;22;;@Test public void testFutureListCallTwoTimes() throws Exception {     Users service = ProxyHelper.createProxy(context.getEndpoint("direct:echo"), Users.class).     Future<List<String>> future = service.getUsers(true).     log.info("Got future").     assertFalse("Should not be done", future.isDone()).     log.info("Waiting for future to be done ...").     List<String> users = future.get(2, TimeUnit.SECONDS).     assertEquals("Claus", users.get(0)).     assertEquals("Jonathan", users.get(1)).     future = service.getUsers(true).     log.info("Got future").     assertFalse("Should not be done", future.isDone()).     log.info("Waiting for future to be done ...").     users = future.get(2, TimeUnit.SECONDS).     assertEquals("Claus", users.get(0)).     assertEquals("Jonathan", users.get(1)). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     List<String> users = new ArrayList<>().     users.add("Claus").     users.add("Jonathan").     exchange.getIn().setBody(users). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:echo").delay(50).process(new Processor() {          public void process(Exchange exchange) throws Exception {             List<String> users = new ArrayList<>().             users.add("Claus").             users.add("Jonathan").             exchange.getIn().setBody(users).         }     }). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:echo").delay(50).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     List<String> users = new ArrayList<>().                     users.add("Claus").                     users.add("Jonathan").                     exchange.getIn().setBody(users).                 }             }).         }     }. }
false;;1;1;;Future<List<String>> getUsers(boolean gold).
