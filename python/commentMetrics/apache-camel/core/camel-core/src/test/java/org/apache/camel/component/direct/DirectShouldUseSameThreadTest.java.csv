commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testUseSameThread() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     local.set("Hello").     id = Thread.currentThread().getId(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("Hello", local.get()).     assertEquals(id, Thread.currentThread().getId()). }
false;public;0;17;;public void configure() throws Exception {     final ThreadLocal<String> local = new ThreadLocal<>().     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             local.set("Hello").             id = Thread.currentThread().getId().         }     }).to("direct:foo").     from("direct:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("Hello", local.get()).             assertEquals(id, Thread.currentThread().getId()).         }     }).to("mock:result"). }
false;protected;0;21;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             final ThreadLocal<String> local = new ThreadLocal<>().             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     local.set("Hello").                     id = Thread.currentThread().getId().                 }             }).to("direct:foo").             from("direct:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("Hello", local.get()).                     assertEquals(id, Thread.currentThread().getId()).                 }             }).to("mock:result").         }     }. }
