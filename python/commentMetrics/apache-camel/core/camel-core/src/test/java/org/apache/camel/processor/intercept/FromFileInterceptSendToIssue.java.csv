commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testInterceptSendTo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, "seda://foo").     template.sendBodyAndHeader("file://target/intercept", "Hello World", Exchange.FILE_NAME, "input.txt").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getReceivedExchanges().get(0).     assertTrue(exchange.getFromEndpoint().getEndpointUri().startsWith("file://target/intercept")). }
false;public;0;8;;@Override public void configure() throws Exception {     interceptSendToEndpoint("seda:foo").to("mock:foo").     from("file://target/intercept?initialDelay=0&delay=10").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("seda:foo"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("seda:foo").to("mock:foo").             from("file://target/intercept?initialDelay=0&delay=10").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("seda:foo").         }     }. }
