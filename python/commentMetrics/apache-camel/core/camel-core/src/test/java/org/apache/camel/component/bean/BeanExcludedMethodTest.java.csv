commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testExcludedMethod() throws Exception {     BeanInfo info = new BeanInfo(context, MyDummyBean.class).     Exchange exchange = new DefaultExchange(context).     MyDummyBean pojo = new MyDummyBean().     MethodInvocation mi = info.createInvocation(pojo, exchange).     assertNull("Should not be possible to find a suitable method", mi). }
false;public;0;10;;@Test public void testNotExcludedMethod() throws Exception {     BeanInfo info = new BeanInfo(context, MyOtherDummyBean.class).     Exchange exchange = new DefaultExchange(context).     MyOtherDummyBean pojo = new MyOtherDummyBean().     MethodInvocation mi = info.createInvocation(pojo, exchange).     assertNotNull(mi).     assertEquals("hello", mi.getMethod().getName()). }
false;public;1;5;;@Override public boolean equals(Object obj) {     fail("Should not call equals").     return true. }
false;public;0;4;;@Override public int hashCode() {     return super.hashCode(). }
false;public;1;5;;@Override public boolean equals(Object obj) {     fail("Should not call equals").     return true. }
false;public;0;4;;@Override public int hashCode() {     return super.hashCode(). }
false;public;0;4;;@Override public String toString() {     return "dummy". }
false;public;1;3;;public String hello(String hi) {     return "Hello " + hi. }
