commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     Context context = super.createJndiContext().     context.bind(dataSetName, dataSet).     return context. }
false;public;0;5;;@Override public void configure() throws Exception {     from(dataSetUri).to(resultUri). }
true;public;0;21;/**  * Ensure the expected message count for a consumer-only endpoint defaults to zero  */ ;/**  * Ensure the expected message count for a consumer-only endpoint defaults to zero  */ @Test public void testConsumerOnlyEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(dataSetUri).to(resultUri).         }     }).     assertEquals("expectedMessageCount should be unset(i.e. -1) for a consumer-only endpoint", -1, getMockEndpoint(dataSetUri).getExpectedCount()).     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) dataSet.getSize()).     result.assertMessagesAscending(header(Exchange.DATASET_INDEX)).     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from(dataSetUri).to(dataSetUri).to(resultUri). }
true;public;0;21;/**  * Ensure the expected message count for a consumer-producer endpoint defaults to the size of the dataset  */ ;/**  * Ensure the expected message count for a consumer-producer endpoint defaults to the size of the dataset  */ @Test public void testConsumerWithProducer() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(dataSetUri).to(dataSetUri).to(resultUri).         }     }).     assertEquals("expectedMessageCount should be the same as the DataSet size for a consumer-producer endpoint", dataSet.getSize(), getMockEndpoint(dataSetUri).getExpectedCount()).     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) dataSet.getSize()).     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(dataSetUri).to(resultUri). }
false;public;0;19;;@Test public void testWithDataSetIndexUriParameterUnset() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(dataSetUri).to(resultUri).         }     }).     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) dataSet.getSize()).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(dataSetUriWithDataSetIndexSetToOff).to(resultUri). }
false;public;0;18;;@Test public void testWithDataSetIndexUriParameterSetToOff() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(dataSetUriWithDataSetIndexSetToOff).to(resultUri).         }     }).     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) dataSet.getSize()).     result.allMessages().header(Exchange.DATASET_INDEX).isNull().     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(dataSetUriWithDataSetIndexSetToLenient).to(resultUri). }
false;public;0;19;;@Test public void testWithDataSetIndexUriParameterSetToLenient() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(dataSetUriWithDataSetIndexSetToLenient).to(resultUri).         }     }).     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) dataSet.getSize()).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(dataSetUriWithDataSetIndexSetToStrict).to(resultUri). }
false;public;0;19;;@Test public void testWithDataSetIndexUriParameterSetToStrict() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(dataSetUriWithDataSetIndexSetToStrict).to(resultUri).         }     }).     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) dataSet.getSize()).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     context.start().     assertMockEndpointsSatisfied(). }
