commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     super.setUp().     this.setUseRouteBuilder(true).     result = getMockEndpoint("mock:result").     context.getShutdownStrategy().setTimeout(1). }
false;public;0;11;;@Test public void testThrottlingRoutePolicyClosed() throws Exception {     result.expectedMinimumMessageCount(size).     for (int i = 0. i < size. i++) {         template.sendBody(url, "Message " + i).         Thread.sleep(3).     }     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String msg = exchange.getIn().getBody(String.class).     exchange.setException(new ThrottlingException(msg)). }
false;public;0;35;;@Test public void testOpenCircuitToPreventMessageThree() throws Exception {     result.reset().     result.expectedMessageCount(2).     List<String> bodies = Arrays.asList("Message One", "Message Two").     result.expectedBodiesReceivedInAnyOrder(bodies).     result.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String msg = exchange.getIn().getBody(String.class).             exchange.setException(new ThrottlingException(msg)).         }     }).     // send two messages which will fail     template.sendBody(url, "Message One").     template.sendBody(url, "Message Two").     final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer().     // wait long enough to have the consumer suspended     await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended).     // send more messages     // but never should get there     // due to open circuit     log.debug("sending message three").     template.sendBody(url, "Message Three").     // wait a little bit     result.setResultMinimumWaitTime(500).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     int threshold = 2.     long failureWindow = 30.     long halfOpenAfter = 1000.     ThrottlingExceptionRoutePolicy policy = new ThrottlingExceptionRoutePolicy(threshold, failureWindow, halfOpenAfter, null).     policy.setHalfOpenHandler(new NeverCloseHandler()).     from(url).routeId("foo").routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             int threshold = 2.             long failureWindow = 30.             long halfOpenAfter = 1000.             ThrottlingExceptionRoutePolicy policy = new ThrottlingExceptionRoutePolicy(threshold, failureWindow, halfOpenAfter, null).             policy.setHalfOpenHandler(new NeverCloseHandler()).             from(url).routeId("foo").routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result").         }     }. }
false;public;0;4;;@Override public boolean isReadyToBeClosed() {     return false. }
