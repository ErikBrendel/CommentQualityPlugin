commented;modifiers;parameterAmount;loc;comment;code
false;private;0;6;;private Set<Class<?>> discoverJaxbClasses() throws Exception {     DefaultPackageScanClassResolver resolver = new DefaultPackageScanClassResolver().     resolver.start().     String[] packages = Constants.JAXB_CONTEXT_PACKAGES.split(":").     return resolver.findAnnotated(XmlAccessorType.class, packages). }
false;public;0;64;;@Test public void testSanity() throws Exception {     Set<Class<?>> classes = discoverJaxbClasses().     assertNotNull(classes).     assertTrue("There should be > 140 classes, was: " + classes.size(), classes.size() > 140).     // check each class is okay     for (Class<?> clazz : classes) {         // skip ProcessorDefinition as its special         if (clazz == ProcessorDefinition.class) {             continue.         }         // skip RouteDefinition as its special         if (clazz == RouteDefinition.class) {             continue.         }         // check each declared field in the class         for (Field field : clazz.getDeclaredFields()) {             LOG.debug("Class {} has field {}", clazz.getName(), field.getName()).             // does the field have a jaxb annotation?             boolean attribute = field.getAnnotation(XmlAttribute.class) != null.             boolean element = field.getAnnotation(XmlElement.class) != null.             boolean elementRef = field.getAnnotation(XmlElementRef.class) != null.             // only one of those 3 is allowed, so check that we don't have 2+ of them             if ((attribute && element) || (attribute && elementRef) || (element && elementRef)) {                 fail("Class " + clazz.getName() + " has field " + field.getName() + " which has 2+ annotations that are not allowed together.").             }             // check getter/setter             if (attribute || element || elementRef) {                 // check for getter/setter                 Method getter = IntrospectionSupport.getPropertyGetter(clazz, field.getName()).                 Method setter = IntrospectionSupport.getPropertySetter(clazz, field.getName()).                 assertNotNull("Getter " + field.getName() + " on class " + clazz.getName() + " is missing", getter).                 assertNotNull("Setter " + field.getName() + " on class " + clazz.getName() + " is missing", setter).             }         }         // we do not expect any JAXB annotations on methods         for (Method method : clazz.getDeclaredMethods()) {             LOG.debug("Class {} has method {}", clazz.getName(), method.getName()).             // special for OptionalIdentifiedDefinition as it has setter, so we should skip it             if (clazz.getCanonicalName().equals(OptionalIdentifiedDefinition.class.getCanonicalName())) {                 continue.             }             // does the method have a jaxb annotation?             boolean attribute = method.getAnnotation(XmlAttribute.class) != null.             boolean element = method.getAnnotation(XmlElement.class) != null.             boolean elementRef = method.getAnnotation(XmlElementRef.class) != null.             assertFalse("Class " + clazz.getName() + " has method " + method.getName() + " should not have @XmlAttribute annotation", attribute).             assertFalse("Class " + clazz.getName() + " has method " + method.getName() + " should not have @XmlElement annotation", element).             assertFalse("Class " + clazz.getName() + " has method " + method.getName() + " should not have @XmlElementRef annotation", elementRef).         }     } }
