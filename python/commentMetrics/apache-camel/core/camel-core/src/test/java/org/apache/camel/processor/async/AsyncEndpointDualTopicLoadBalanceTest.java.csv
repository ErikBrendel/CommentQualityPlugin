commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Camel").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("mock:before").to("log:before").loadBalance().topic().to("async:bye:camel", "async:bye:world").end().to("log:after").to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("mock:before").to("log:before").loadBalance().topic().to("async:bye:camel", "async:bye:world").end().to("log:after").to("mock:result").         }     }. }
