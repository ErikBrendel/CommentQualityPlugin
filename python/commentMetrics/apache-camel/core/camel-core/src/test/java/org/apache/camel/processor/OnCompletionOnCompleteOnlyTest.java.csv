commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testSynchronizeFailure() throws Exception {     // do not expect a message since we only do onCompleteOnly     getMockEndpoint("mock:sync").expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:start", "Kabom").         fail("Should throw exception").     } catch (CamelExecutionException e) {         assertEquals("Kabom", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").onCompletion().onCompleteOnly().to("log:sync").to("mock:sync").end().process(new MyProcessor()).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").onCompletion().onCompleteOnly().to("log:sync").to("mock:sync").end().process(new MyProcessor()).to("mock:result").         // END SNIPPET: e1         }     }. }
