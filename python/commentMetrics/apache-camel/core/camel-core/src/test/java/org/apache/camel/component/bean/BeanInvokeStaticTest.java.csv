commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:a").bean(MyStaticClass.class, "changeSomething").to("mock:a"). }
false;public;0;17;;@Test public void testA() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").bean(MyStaticClass.class, "changeSomething").to("mock:a").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:a").     mock.expectedBodiesReceived("Bye World").     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:a").bean(MyStaticClass.class, "doSomething").to("mock:a"). }
false;public;0;17;;@Test public void testB() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").bean(MyStaticClass.class, "doSomething").to("mock:a").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (FailedToCreateRouteException e) {         assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         assertIsInstanceOf(MethodNotFoundException.class, e.getCause().getCause()).         assertEquals("Static method with name: doSomething not found on class: org.apache.camel.component.bean.MyStaticClass", e.getCause().getCause().getMessage()).     } }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
