commented;modifiers;parameterAmount;loc;comment;code
false;public;2;5;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     logged = exchange.     return super.process(exchange, callback). }
false;public;0;4;;@Override public String toString() {     return "myLogger". }
false;public;0;11;;@Test public void testLogEndpoint() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start1", "Hello World").     assertMockEndpointsSatisfied().     assertNotNull(logged). }
false;public;0;10;;@Test public void testLogEndpointGroupSize() throws InterruptedException {     MockEndpoint out = getMockEndpoint("mock:result").     int expectedCount = 50.     out.expectedMessageCount(expectedCount).     for (int i = 0. i < expectedCount. i++) {         template.sendBody("direct:start2", "blub").     }     out.assertIsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     LogEndpoint end = new LogEndpoint().     end.setCamelContext(context).     end.setLogger(new MyLogger()).     LogEndpoint endpoint = new LogEndpoint().     endpoint.setLoggerName("loggerSetter").     endpoint.setGroupSize(10).     endpoint.setCamelContext(context).     endpoint.start().     assertEquals("log:myLogger", end.getEndpointUri()).     from("direct:start1").to(end).to("mock:result").     from("direct:start2").to(endpoint).to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             LogEndpoint end = new LogEndpoint().             end.setCamelContext(context).             end.setLogger(new MyLogger()).             LogEndpoint endpoint = new LogEndpoint().             endpoint.setLoggerName("loggerSetter").             endpoint.setGroupSize(10).             endpoint.setCamelContext(context).             endpoint.start().             assertEquals("log:myLogger", end.getEndpointUri()).             from("direct:start1").to(end).to("mock:result").             from("direct:start2").to(endpoint).to("mock:result").         }     }. }
