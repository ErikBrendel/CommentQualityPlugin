commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     this.exchange = new DefaultExchange(context). }
false;public;0;10;;@Test public void testConvertToStreamCache() throws Exception {     context.start().     ByteArrayInputStream inputStream = new ByteArrayInputStream(MESSAGE.getBytes()).     StreamCache streamCache = StreamCacheConverter.convertToStreamCache(new SAXSource(new InputSource(inputStream)), exchange).     String message = exchange.getContext().getTypeConverter().convertTo(String.class, streamCache).     assertNotNull(message).     assertEquals("The converted message is wrong", MESSAGE, message). }
false;public;0;12;;@Test public void testConvertToStreamCacheStreamSource() throws Exception {     context.start().     StreamSource source = new StreamSource(getTestFileStream()).     StreamCache cache = StreamCacheConverter.convertToStreamCache(source, exchange).     // assert re-readability of the cached StreamSource     XmlConverter converter = new XmlConverter().     assertNotNull(converter.toString((Source) cache, null)).     cache.reset().     assertNotNull(converter.toString((Source) cache, null)). }
false;public;0;12;;@Test public void testConvertToStreamCacheInputStream() throws Exception {     context.start().     InputStream is = getTestFileStream().     InputStream cache = (InputStream) StreamCacheConverter.convertToStreamCache(is, exchange).     // assert re-readability of the cached InputStream     String data = IOConverter.toString(cache, null).     cache.reset().     String data2 = IOConverter.toString(cache, null).     assertEquals(data, data2). }
false;public;0;19;;@Test public void testConvertToStreamCacheInputStreamWithFileCache() throws Exception {     exchange.getContext().getStreamCachingStrategy().setSpoolThreshold(1).     context.start().     InputStream is = getTestFileStream().     InputStream cache = (InputStream) StreamCacheConverter.convertToStreamCache(is, exchange).     assertNotNull(IOConverter.toString(cache, null)).     try {         // since the stream is closed you delete the temp file         // reset will not work any more         cache.reset().         exchange.getUnitOfWork().done(exchange).         fail("except the exception here").     } catch (Exception exception) {     // do nothing     } }
false;public;0;9;;@Test public void testConvertToSerializable() throws Exception {     context.start().     InputStream is = getTestFileStream().     StreamCache cache = StreamCacheConverter.convertToStreamCache(is, exchange).     Serializable ser = StreamCacheConverter.convertToSerializable(cache, exchange).     assertNotNull(ser). }
false;public;0;9;;@Test public void testConvertToByteArray() throws Exception {     context.start().     InputStream is = getTestFileStream().     StreamCache cache = StreamCacheConverter.convertToStreamCache(is, exchange).     byte[] bytes = StreamCacheConverter.convertToByteArray(cache, exchange).     assertNotNull(bytes). }
false;protected;0;5;;protected InputStream getTestFileStream() {     InputStream answer = getClass().getClassLoader().getResourceAsStream(TEST_FILE).     assertNotNull("Should have found the file: " + TEST_FILE + " on the classpath", answer).     return answer. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
