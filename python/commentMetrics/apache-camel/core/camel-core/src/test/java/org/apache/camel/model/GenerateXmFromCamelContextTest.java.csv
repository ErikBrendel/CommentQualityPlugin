commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testCreateRouteFromCamelContext() throws Exception {     List<RouteDefinition> list = context.getRouteDefinitions().     assertEquals("Size of list " + list, 1, list.size()).     RouteDefinition routeType = list.get(0).     log.info("Found route: " + routeType).     // now lets marshall it!     dump(routeType). }
false;protected;1;11;;protected void dump(Object object) throws Exception {     JAXBContext jaxbContext = XmlTestSupport.createJaxbContext().     Marshaller marshaller = jaxbContext.createMarshaller().     marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE).     StringWriter buffer = new StringWriter().     marshaller.marshal(object, buffer).     log.info("Created: " + buffer).     assertNotNull(buffer).     String out = buffer.toString().     assertTrue("Should contain the description", out.indexOf("<from uri=\"direct:start\"/>") > 0). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").filter().xpath("/foo/bar = 'abc'").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").filter().xpath("/foo/bar = 'abc'").to("mock:result").         }     }. }
