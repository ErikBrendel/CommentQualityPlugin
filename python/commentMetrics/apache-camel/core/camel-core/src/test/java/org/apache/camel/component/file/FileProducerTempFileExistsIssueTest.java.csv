commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/tempprefix").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;16;;@Test public void testIllegalConfiguration() throws Exception {     try {         context.getEndpoint("file://target/data/tempprefix?fileExist=Append&tempPrefix=foo").createProducer().         fail("Should have thrown exception").     } catch (IllegalArgumentException e) {         assertEquals("You cannot set both fileExist=Append and tempPrefix/tempFileName options", e.getMessage()).     }     try {         context.getEndpoint("file://target/data/tempprefix?fileExist=Append&tempFileName=foo").createProducer().         fail("Should have thrown exception").     } catch (IllegalArgumentException e) {         assertEquals("You cannot set both fileExist=Append and tempPrefix/tempFileName options", e.getMessage()).     } }
false;public;0;9;;@Test public void testWriteUsingTempPrefixButFileExist() throws Exception {     template.sendBodyAndHeader("file://target/data/tempprefix", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/tempprefix?tempPrefix=foo", "Bye World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/tempprefix/hello.txt").     assertEquals(true, file.exists()).     assertEquals("Bye World", context.getTypeConverter().convertTo(String.class, file)). }
false;public;0;10;;@Test public void testWriteUsingTempPrefixButBothFileExist() throws Exception {     template.sendBodyAndHeader("file://target/data/tempprefix", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/tempprefix", "Hello World", Exchange.FILE_NAME, "foohello.txt").     template.sendBodyAndHeader("file://target/data/tempprefix?tempPrefix=foo", "Bye World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/tempprefix/hello.txt").     assertEquals(true, file.exists()).     assertEquals("Bye World", context.getTypeConverter().convertTo(String.class, file)). }
false;public;0;9;;@Test public void testWriteUsingTempPrefixButFileExistOverride() throws Exception {     template.sendBodyAndHeader("file://target/data/tempprefix", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/tempprefix?tempPrefix=foo&fileExist=Override", "Bye World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/tempprefix/hello.txt").     assertEquals(true, file.exists()).     assertEquals("Bye World", context.getTypeConverter().convertTo(String.class, file)). }
false;public;0;10;;@Test public void testWriteUsingTempPrefixButFileExistIgnore() throws Exception {     template.sendBodyAndHeader("file://target/data/tempprefix", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/tempprefix?tempPrefix=foo&fileExist=Ignore", "Bye World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/tempprefix/hello.txt").     assertEquals(true, file.exists()).     // should not write new file as we should ignore     assertEquals("Hello World", context.getTypeConverter().convertTo(String.class, file)). }
false;public;0;17;;@Test public void testWriteUsingTempPrefixButFileExistFail() throws Exception {     template.sendBodyAndHeader("file://target/data/tempprefix", "Hello World", Exchange.FILE_NAME, "hello.txt").     try {         template.sendBodyAndHeader("file://target/data/tempprefix?tempPrefix=foo&fileExist=Fail", "Bye World", Exchange.FILE_NAME, "hello.txt").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         GenericFileOperationFailedException cause = assertIsInstanceOf(GenericFileOperationFailedException.class, e.getCause()).         assertTrue(cause.getMessage().startsWith("File already exist")).     }     File file = new File("target/data/tempprefix/hello.txt").     assertEquals(true, file.exists()).     // should not write new file as we should fail     assertEquals("Hello World", context.getTypeConverter().convertTo(String.class, file)). }
