commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:{{cool.result}}"). }
false;public;0;16;;@Test public void testPropertiesComponentEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("{{cool.start}}").to("log:{{cool.start}}?showBodyType=false&showExchangeId={{cool.showid}}").to("mock:{{cool.result}}"). }
false;public;0;18;;@Test public void testPropertiesComponentEndpoints() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("{{cool.start}}").to("log:{{cool.start}}?showBodyType=false&showExchangeId={{cool.showid}}").to("mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:{{cool.result}}").expectedMessageCount(1).     template.sendBody("{{cool.start}}", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("{{cool.start}}").to("log:{{cool.start}}?showBodyType=false&showExchangeId={{cool.showid}}").to("mock:{{cool.result}}"). }
false;public;0;20;;@Test public void testPropertiesComponentMandatory() throws Exception {     context.removeComponent("properties").     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("{{cool.start}}").to("log:{{cool.start}}?showBodyType=false&showExchangeId={{cool.showid}}").to("mock:{{cool.result}}").             }         }).         context.start().         fail("Should throw exception").     } catch (RuntimeCamelException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         String msg = "PropertiesComponent with name properties must be defined in CamelContext to support property placeholders.".         assertTrue(cause.getMessage().startsWith(msg)).     } }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("classpath:org/apache/camel/component/properties/myproperties.properties").     context.addComponent("properties", pc).     return context. }
