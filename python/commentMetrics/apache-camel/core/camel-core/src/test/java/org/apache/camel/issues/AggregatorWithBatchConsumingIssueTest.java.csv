commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testAggregateLostGroupIssue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(4).     mock.message(0).body().isEqualTo("0+1+2").     mock.message(1).body().isEqualTo("3+4+5").     mock.message(2).body().isEqualTo("6+7+8").     mock.message(3).body().isEqualTo("9+10+11").     for (int i = 0. i < 12. i++) {         sendMessage(i).     }     assertMockEndpointsSatisfied(). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody(index).     exchange.getIn().setHeader("aggregateGroup", "group1").     // simulate Batch as in JpaConsumer     exchange.setProperty(Exchange.BATCH_SIZE, 3).     exchange.setProperty(Exchange.BATCH_INDEX, index % 3).     exchange.setProperty(Exchange.BATCH_COMPLETE, (index % 3) == 3 - 1). }
false;private;1;13;;private void sendMessage(final int index) {     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody(index).             exchange.getIn().setHeader("aggregateGroup", "group1").             // simulate Batch as in JpaConsumer             exchange.setProperty(Exchange.BATCH_SIZE, 3).             exchange.setProperty(Exchange.BATCH_INDEX, index % 3).             exchange.setProperty(Exchange.BATCH_COMPLETE, (index % 3) == 3 - 1).         }     }). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("aggregateGroup"), new BodyInAggregatingStrategy()).completionFromBatchConsumer().to("log:aggregated").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("aggregateGroup"), new BodyInAggregatingStrategy()).completionFromBatchConsumer().to("log:aggregated").to("mock:result").         }     }. }
