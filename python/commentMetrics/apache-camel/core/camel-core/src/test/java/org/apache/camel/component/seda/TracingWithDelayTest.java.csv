commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testTracingWithDelay() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     LOG.info("This is the processor being invoked between mock:a and mock:b"). }
false;public;0;14;;@Override public void configure() throws Exception {     getContext().setTracing(true).     from("direct:start").delay(10).to("mock:a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             LOG.info("This is the processor being invoked between mock:a and mock:b").         }     }).to("mock:b").to("direct:c").     from("direct:c").transform(constant("Bye World")).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().setTracing(true).             from("direct:start").delay(10).to("mock:a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     LOG.info("This is the processor being invoked between mock:a and mock:b").                 }             }).to("mock:b").to("direct:c").             from("direct:c").transform(constant("Bye World")).to("mock:result").         }     }. }
