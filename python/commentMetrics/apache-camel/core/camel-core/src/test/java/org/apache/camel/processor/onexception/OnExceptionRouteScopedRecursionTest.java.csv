commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:test").onException(Throwable.class).to("mock:c").log("onException").throwException(new NullPointerException("A NPE error here")).end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b"). }
false;public;0;35;;@Test public void testRecursion() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").onException(Throwable.class).to("mock:c").log("onException").throwException(new NullPointerException("A NPE error here")).end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").         }     }).     context.start().     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).         IllegalStateException ise = assertIsInstanceOf(IllegalStateException.class, npe.getSuppressed()[0]).         assertEquals("Bad state", ise.getMessage()).     } }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:test").onException(Throwable.class).handled(true).log("onException").throwException(new NullPointerException("A NPE error here")).end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b"). }
false;public;0;35;;@Test public void testRecursionHandled() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").onException(Throwable.class).handled(true).log("onException").throwException(new NullPointerException("A NPE error here")).end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").         }     }).     context.start().     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).         IllegalStateException ise = assertIsInstanceOf(IllegalStateException.class, npe.getSuppressed()[0]).         assertEquals("Bad state", ise.getMessage()).     } }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:test").onException(Throwable.class).to("mock:c").log("onException").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").     // need to turn off error handler when linked with direct, in case you want the same as inlined     from("direct:error").errorHandler(noErrorHandler()).to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")). }
false;public;0;41;;@Test public void testRecursionDirectNoErrorHandler() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").onException(Throwable.class).to("mock:c").log("onException").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").             // need to turn off error handler when linked with direct, in case you want the same as inlined             from("direct:error").errorHandler(noErrorHandler()).to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")).         }     }).     context.start().     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).         IllegalStateException ise = assertIsInstanceOf(IllegalStateException.class, npe.getSuppressed()[0]).         assertEquals("Bad state", ise.getMessage()).     } }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:test").onException(Throwable.class).handled(true).to("mock:c").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").     // need to turn off error handler when linked with direct, in case you want the same as inlined     from("direct:error").errorHandler(noErrorHandler()).to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")). }
false;public;0;41;;@Test public void testRecursionHandledDirectNoErrorHandler() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").onException(Throwable.class).handled(true).to("mock:c").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").             // need to turn off error handler when linked with direct, in case you want the same as inlined             from("direct:error").errorHandler(noErrorHandler()).to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")).         }     }).     context.start().     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).         IllegalStateException ise = assertIsInstanceOf(IllegalStateException.class, npe.getSuppressed()[0]).         assertEquals("Bad state", ise.getMessage()).     } }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:test").onException(Throwable.class).to("mock:c").log("onException").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").     from("direct:error").to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")). }
false;public;0;38;;@Test public void testRecursionDirect() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").onException(Throwable.class).to("mock:c").log("onException").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").             from("direct:error").to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")).         }     }).     context.start().     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).     // we can only see the NPE from the direct route     } }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:test").onException(Throwable.class).handled(true).to("mock:c").log("onException").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").     from("direct:error").to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")). }
false;public;0;39;;@Test public void testRecursionHandledDirect() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test").onException(Throwable.class).handled(true).to("mock:c").log("onException").to("direct:error").end().to("mock:a").log("test").throwException(new IllegalStateException("Bad state")).to("log:test").to("mock:b").             from("direct:error").to("mock:d").log("error").throwException(new NullPointerException("A NPE error here")).         }     }).     context.start().     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).     // we can only see the NPE from the direct route     } }
