commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testMDC() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Good Afternoon World").     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testMDCTwoMessages() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Good Afternoon World", "Good Afternoon World").     template.sendBody("direct:a", "Hello World").     template.sendBody("direct:a", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("route-a", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     // use a producer template to send to b, instead of in the route DSL     body = template.requestBody("direct:b", body, String.class).     exchange.getOut().setBody(body). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("route-a", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     assertEquals("route-b", MDC.get("camel.routeId")).     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).     exchange.getOut().setBody("Good Afternoon World"). }
false;public;0;40;;@Override public void configure() throws Exception {     // enable MDC     context.setUseMDCLogging(true).     from("direct:a").routeId("route-a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-a", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).         }     }).to("log:foo").to("direct:b").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             // use a producer template to send to b, instead of in the route DSL             body = template.requestBody("direct:b", body, String.class).             exchange.getOut().setBody(body).         }     }).process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-a", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).         }     }).to("log:result").to("mock:result").     from("direct:b").routeId("route-b").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertEquals("route-b", MDC.get("camel.routeId")).             assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).             exchange.getOut().setBody("Good Afternoon World").         }     }).to("log:bar"). }
false;protected;0;45;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable MDC             context.setUseMDCLogging(true).             from("direct:a").routeId("route-a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-a", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                 }             }).to("log:foo").to("direct:b").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     // use a producer template to send to b, instead of in the route DSL                     body = template.requestBody("direct:b", body, String.class).                     exchange.getOut().setBody(body).                 }             }).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-a", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                 }             }).to("log:result").to("mock:result").             from("direct:b").routeId("route-b").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertEquals("route-b", MDC.get("camel.routeId")).                     assertEquals(exchange.getExchangeId(), MDC.get("camel.exchangeId")).                     exchange.getOut().setBody("Good Afternoon World").                 }             }).to("log:bar").         }     }. }
