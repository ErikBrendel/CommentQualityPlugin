commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/poll").     super.setUp(). }
false;public;0;17;;@Test public void testMaxMessagesPerPoll() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // we should poll at most 2     mock.expectedMinimumMessageCount(2).     mock.message(0).exchangeProperty(Exchange.BATCH_SIZE).isEqualTo(2).     mock.message(1).exchangeProperty(Exchange.BATCH_SIZE).isEqualTo(2).     template.sendBodyAndHeader(fileUrl, "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader(fileUrl, "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader(fileUrl, "Godday World", Exchange.FILE_NAME, "godday.txt").     // start route     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result").         }     }. }
