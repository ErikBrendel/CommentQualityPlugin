commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filelanguage").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("counter", new MyGuidGenerator()).     jndi.bind("myPoll", new MyPollStrategy()).     return jndi. }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/filelanguage/bean/" + "?pollStrategy=#myPoll&initialDelay=0&delay=10&fileName=${bean:counter?method=doNotExistMethod}.txt&delete=true").to("mock:result"). // specify a method name that does not exists }
false;public;0;26;;@Test public void testConsumeExpressionThrowException() throws Exception {     template.sendBodyAndHeader("file://target/data/filelanguage/bean", "Bye World", Exchange.FILE_NAME, "123.txt").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filelanguage/bean/" + "?pollStrategy=#myPoll&initialDelay=0&delay=10&fileName=${bean:counter?method=doNotExistMethod}.txt&delete=true").to("mock:result").         // specify a method name that does not exists         }     }).     context.start().     await().atMost(2, TimeUnit.SECONDS).until(() -> LATCH.getCount() == 0).     // and we should rollback X number of times     assertTrue(event.startsWith("rollback")).     assertNotNull(rollbackCause).     MethodNotFoundException e = assertIsInstanceOf(MethodNotFoundException.class, rollbackCause.getCause()).     assertNotNull(e).     assertEquals("doNotExistMethod", e.getMethodName()). }
false;public;0;3;;public String next() {     return "123". }
false;public;2;3;;public boolean begin(Consumer consumer, Endpoint endpoint) {     return true. }
false;public;3;3;;public void commit(Consumer consumer, Endpoint endpoint, int polledMessages) {     event += "commit". }
false;public;4;6;;public boolean rollback(Consumer consumer, Endpoint endpoint, int retryCounter, Exception cause) throws Exception {     event += "rollback".     rollbackCause = cause.     LATCH.countDown().     return false. }
