commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSplitOk() throws Exception {     getMockEndpoint("mock:done").expectedBodiesReceived("Hello World,Bye World").     getMockEndpoint("mock:split").expectedBodiesReceived("Hello World", "Bye World").     template.sendBody("direct:start", "Hello World,Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testSplitException() throws Exception {     getMockEndpoint("mock:done").expectedBodiesReceived("Hello World,Kaboom,Bye World").     getMockEndpoint("mock:split").expectedBodiesReceived("Hello World", "Bye World").     try {         template.sendBody("direct:start", "Hello World,Kaboom,Bye World").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced", iae.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     onCompletion().to("log:done", "mock:done").     from("direct:start").split(body().tokenize(",")).process(new MyProcessor()).to("mock:split"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().to("log:done", "mock:done").             from("direct:start").split(body().tokenize(",")).process(new MyProcessor()).to("mock:split").         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
