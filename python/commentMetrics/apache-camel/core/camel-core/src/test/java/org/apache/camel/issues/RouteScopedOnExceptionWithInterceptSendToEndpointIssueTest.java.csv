commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().throwException(new ConnectException("Forced")). }
false;public;0;27;;@Test public void testIssue() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().throwException(new ConnectException("Forced")).         }     }).     getMockEndpoint("mock:global").expectedMessageCount(0).     getMockEndpoint("mock:seda").expectedMessageCount(0).     // we fail all redeliveries so after that we send to mock:exhausted     getMockEndpoint("mock:exhausted").expectedMessageCount(1).     try {         template.sendBody("direct:start", "Hello World").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         ConnectException cause = assertIsInstanceOf(ConnectException.class, e.getCause()).         assertEquals("Forced", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:global").maximumRedeliveries(2).redeliveryDelay(5000)).     from("direct:start").onException(ConnectException.class).maximumRedeliveries(5).redeliveryDelay(0).logRetryAttempted(true).retryAttemptedLogLevel(LoggingLevel.WARN).to("mock:exhausted").end().to("seda:foo"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:global").maximumRedeliveries(2).redeliveryDelay(5000)).             from("direct:start").onException(ConnectException.class).maximumRedeliveries(5).redeliveryDelay(0).logRetryAttempted(true).retryAttemptedLogLevel(LoggingLevel.WARN).to("mock:exhausted").end().to("seda:foo").         }     }. }
