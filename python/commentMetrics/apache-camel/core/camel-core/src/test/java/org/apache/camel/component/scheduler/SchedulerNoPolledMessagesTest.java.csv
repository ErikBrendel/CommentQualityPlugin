commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSchedulerNoPolledMessages() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(3).     // the first 2 is fast     mock.message(0).arrives().between(0, 500).millis().beforeNext().     mock.message(1).arrives().between(0, 500).millis().beforeNext().     // the last message should be slower as the backoff idle has kicked in     mock.message(2).arrives().between(500, 1500).millis().afterPrevious().     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     // force no messages to be polled which should affect the scheduler to think its idle     exchange.setProperty(Exchange.SCHEDULER_POLLED_MESSAGES, false). }
false;public;0;12;;public void configure() {     from("scheduler://foo?delay=100&backoffMultiplier=10&backoffIdleThreshold=2").log("Fired scheduler").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // force no messages to be polled which should affect the scheduler to think its idle             exchange.setProperty(Exchange.SCHEDULER_POLLED_MESSAGES, false).         }     }).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("scheduler://foo?delay=100&backoffMultiplier=10&backoffIdleThreshold=2").log("Fired scheduler").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // force no messages to be polled which should affect the scheduler to think its idle                     exchange.setProperty(Exchange.SCHEDULER_POLLED_MESSAGES, false).                 }             }).to("mock:result").         }     }. }
