commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testAggregateExpressionSize() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     // A+A+A gets completed by size, the others by consumer     result.expectedBodiesReceived("A+A+A", "A", "B+B", "Z").     result.message(0).exchangeProperty(Exchange.AGGREGATED_COMPLETED_BY).isEqualTo("size").     result.message(1).exchangeProperty(Exchange.AGGREGATED_COMPLETED_BY).isEqualTo("consumer").     result.message(2).exchangeProperty(Exchange.AGGREGATED_COMPLETED_BY).isEqualTo("consumer").     result.message(3).exchangeProperty(Exchange.AGGREGATED_COMPLETED_BY).isEqualTo("consumer").     template.sendBody("direct:start", "A").     template.sendBody("direct:start", "A").     template.sendBody("direct:start", "B").     template.sendBody("direct:start", "A").     template.sendBody("direct:start", "B").     template.sendBody("direct:start", "A").     // send the last one with the batch size property     template.sendBodyAndProperty("direct:start", "Z", Exchange.BATCH_SIZE, 7).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").aggregate(body(), new BodyInAggregatingStrategy()).completionSize(3).completionFromBatchConsumer().to("log:result", "mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(body(), new BodyInAggregatingStrategy()).completionSize(3).completionFromBatchConsumer().to("log:result", "mock:result").         }     }. }
