commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testOk() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "mySlip", "mock:a,mock:b").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testThrowExceptionAtA() throws Exception {     counter = 0.     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     try {         template.sendBodyAndHeader("direct:start", "Hello World", "mySlip", "mock:a,direct:a,mock:b").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // first call + 3 redeliveries     assertEquals(1 + 3, counter). }
false;public;0;19;;@Test public void testThrowExceptionAtB() throws Exception {     counter = 0.     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(0).     try {         template.sendBodyAndHeader("direct:start", "Hello World", "mySlip", "mock:a,mock:b,direct:b,mock:c").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // first call + 3 redeliveries     assertEquals(1 + 3, counter). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     // should be same input body     assertEquals("Hello World", exchange.getIn().getBody()).     assertFalse("Should not have OUT", exchange.hasOut()).     assertNull(exchange.getException()).     counter++.     throw new IllegalArgumentException("Forced"). }
false;public;1;13;;@Override public void process(Exchange exchange) throws Exception {     // should be same input body     assertEquals("Hello World", exchange.getIn().getBody()).     assertFalse("Should not have OUT", exchange.hasOut()).     assertNull(exchange.getException()).     // mutate IN body     exchange.getIn().setBody("Bye World").     counter++.     throw new IllegalArgumentException("Forced"). }
false;public;0;41;;@Override public void configure() throws Exception {     // try to redeliver up till 3 times     errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0)).     from("direct:start").routingSlip(header("mySlip")).     from("direct:a").to("log:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // should be same input body             assertEquals("Hello World", exchange.getIn().getBody()).             assertFalse("Should not have OUT", exchange.hasOut()).             assertNull(exchange.getException()).             counter++.             throw new IllegalArgumentException("Forced").         }     }).     from("direct:b").to("log:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // should be same input body             assertEquals("Hello World", exchange.getIn().getBody()).             assertFalse("Should not have OUT", exchange.hasOut()).             assertNull(exchange.getException()).             // mutate IN body             exchange.getIn().setBody("Bye World").             counter++.             throw new IllegalArgumentException("Forced").         }     }). }
false;protected;0;46;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // try to redeliver up till 3 times             errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0)).             from("direct:start").routingSlip(header("mySlip")).             from("direct:a").to("log:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // should be same input body                     assertEquals("Hello World", exchange.getIn().getBody()).                     assertFalse("Should not have OUT", exchange.hasOut()).                     assertNull(exchange.getException()).                     counter++.                     throw new IllegalArgumentException("Forced").                 }             }).             from("direct:b").to("log:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // should be same input body                     assertEquals("Hello World", exchange.getIn().getBody()).                     assertFalse("Should not have OUT", exchange.hasOut()).                     assertNull(exchange.getException()).                     // mutate IN body                     exchange.getIn().setBody("Bye World").                     counter++.                     throw new IllegalArgumentException("Forced").                 }             }).         }     }. }
