commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testConfigurationOnEndpoint() throws Exception {     // ensure that validator from test method "testConfigurationOnComponent"     // is unbind     registry.getContext().unbind("validator").     String directStart = "direct:start".     String endpointUri = "validator:org/apache/camel/component/validator/xsds/person.xsd?resourceResolverFactory=#resourceResolverFactory".     execute(directStart, endpointUri). }
false;public;0;12;;@Test public void testConfigurationOnComponent() throws Exception {     // set resource resolver factory on component     ValidatorComponent validatorComponent = new ValidatorComponent().     validatorComponent.setResourceResolverFactory(new ResourceResolverFactoryImpl()).     registry.bind("validator", validatorComponent).     String directStart = "direct:startComponent".     String endpointUri = "validator:org/apache/camel/component/validator/xsds/person.xsd".     execute(directStart, endpointUri). }
false;;2;36;;void execute(String directStart, String endpointUri) throws InterruptedException {     MockEndpoint endEndpoint = resolveMandatoryEndpoint("mock:end", MockEndpoint.class).     endEndpoint.expectedMessageCount(1).     final String body = //      "<p:person user=\"james\" xmlns:p=\"org.person\" xmlns:h=\"org.health.check.person\" xmlns:c=\"org.health.check.common\">\n" + //      "  <p:firstName>James</p:firstName>\n" + //      "  <p:lastName>Strachan</p:lastName>\n" + //      "  <p:city>London</p:city>\n" + //      "  <h:health>\n" + //      "      <h:lastCheck>2011-12-23</h:lastCheck>\n" + //      "      <h:status>OK</h:status>\n" + //      "      <c:commonElement>" + //      "          <c:element1/>" + //      "          <c:element2/>" + //      "      </c:commonElement>" + //      "  </h:health>\n" + "</p:person>".     template.sendBody(directStart, body).     // wait until endpoint is resolved     await().atMost(1, TimeUnit.SECONDS).until(() -> resolveMandatoryEndpoint(endpointUri, ValidatorEndpoint.class) != null).     MockEndpoint.assertIsSatisfied(endEndpoint).     ValidatorEndpoint validatorEndpoint = resolveMandatoryEndpoint(endpointUri, ValidatorEndpoint.class).     Assert.assertNotNull(validatorEndpoint).     CustomResourceResolver resolver = (CustomResourceResolver) validatorEndpoint.getResourceResolver().     Set<String> uris = resolver.getResolvedResourceUris().     checkResourceUri(uris, "../type2.xsd").     checkResourceUri(uris, "health/health.xsd").     checkResourceUri(uris, "type1.xsd").     checkResourceUri(uris, "common/common.xsd"). }
false;;2;3;;void checkResourceUri(Set<String> uris, String resourceUri) {     Assert.assertTrue("Missing resource uri " + resourceUri + " in resolved resource URI set", uris.contains(resourceUri)). }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     registry = super.createRegistry().     registry.bind("resourceResolverFactory", new ResourceResolverFactoryImpl()).     return registry. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").setHeader("xsd_file", new ConstantExpression("org/apache/camel/component/validator/xsds/person.xsd")).recipientList(new SimpleExpression("validator:${header.xsd_file}?resourceResolverFactory=#resourceResolverFactory")).to("mock:end"). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:startComponent").setHeader("xsd_file", new ConstantExpression("org/apache/camel/component/validator/xsds/person.xsd")).recipientList(new SimpleExpression("validator:${header.xsd_file}")).to("mock:end"). }
false;protected;0;19;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     return new RouteBuilder[] { new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("xsd_file", new ConstantExpression("org/apache/camel/component/validator/xsds/person.xsd")).recipientList(new SimpleExpression("validator:${header.xsd_file}?resourceResolverFactory=#resourceResolverFactory")).to("mock:end").         }     }, new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:startComponent").setHeader("xsd_file", new ConstantExpression("org/apache/camel/component/validator/xsds/person.xsd")).recipientList(new SimpleExpression("validator:${header.xsd_file}")).to("mock:end").         }     } }. }
false;public;2;4;;@Override public LSResourceResolver createResourceResolver(CamelContext camelContext, String rootResourceUri) {     return new CustomResourceResolver(camelContext, rootResourceUri). }
false;public;0;3;;public Set<String> getResolvedResourceUris() {     return resolvedRsourceUris. }
false;public;5;6;;@Override public LSInput resolveResource(String type, String namespaceURI, String publicId, String systemId, String baseURI) {     LSInput result = super.resolveResource(type, namespaceURI, publicId, systemId, baseURI).     resolvedRsourceUris.add(systemId).     return result. }
