commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;12;;@Override public void configure() throws Exception {     MyEndpoint my = new MyEndpoint().     my.setCamelContext(context).     my.setEndpointUriIfNotSpecified("my:endpoint").     from(my).to("mock:a").     from("direct:start").to("mock:result").     from(my).to("mock:b"). }
false;public;0;23;;@Test public void testNotMultipleConsumersSupport() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             MyEndpoint my = new MyEndpoint().             my.setCamelContext(context).             my.setEndpointUriIfNotSpecified("my:endpoint").             from(my).to("mock:a").             from("direct:start").to("mock:result").             from(my).to("mock:b").         }     }).     try {         context.start().         fail("Should have thrown exception").     } catch (FailedToStartRouteException e) {         assertTrue(e.getMessage().endsWith("Multiple consumers for the same endpoint is not allowed: my:endpoint")).     } }
false;public;0;8;;@Override public void configure() throws Exception {     MyOtherEndpoint my = new MyOtherEndpoint().     my.setCamelContext(context).     from(my).to("mock:a").     from(my).to("mock:b"). }
false;public;0;16;;@Test public void testYesMultipleConsumersSupport() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             MyOtherEndpoint my = new MyOtherEndpoint().             my.setCamelContext(context).             from(my).to("mock:a").             from(my).to("mock:b").         }     }).     // this one is allowing multiple consumers on the same endpoint so no problem starting     context.start().     context.stop(). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public boolean isMultipleConsumersSupported() {     return false. }
false;public;0;3;;public Producer createProducer() throws Exception {     return null. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return new DefaultConsumer(this, processor). }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "MyEndpoint". }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public boolean isMultipleConsumersSupported() {     return true. }
false;public;0;3;;public Producer createProducer() throws Exception {     return null. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return new DefaultConsumer(this, processor). }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "MyOtherEndpoint". }
