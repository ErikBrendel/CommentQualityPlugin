commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSendClosedTagMessageToTokenize() throws Exception {     String message = "<?xml version='1.0' encoding='UTF-8' ?><parent><child anotherAttr='' some_attr=''></child></parent>".     // the result is formated     String expectedMessage = "<child anotherAttr=\"\" some_attr=\"\"/>".     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedBodiesReceived(expectedMessage).     template.sendBody("direct:start", message).     resultEndpoint.assertIsSatisfied(). }
false;public;0;13;;@Test public void testSendSelfClosingTagMessageToTokenize() throws Exception {     String message = "<?xml version='1.0' encoding='UTF-8' ?><parent xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'><child some_attr='' anotherAttr='' /></parent>".     // the result is formated     String expectedMessage = "<child anotherAttr=\"\" some_attr=\"\"/>".     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedBodiesReceived(expectedMessage).     template.sendBody("direct:start", message).     resultEndpoint.assertIsSatisfied(). }
false;public;0;3;;public void configure() {     from("direct:start").split().xpath("//child").to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").split().xpath("//child").to("mock:result").         }     }. }
