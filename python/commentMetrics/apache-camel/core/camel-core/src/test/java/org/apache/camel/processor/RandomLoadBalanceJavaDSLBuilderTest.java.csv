commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testNavigateRouteAsJavaDSLWithNavigate() throws Exception {     // this one navigate using the runtime route using the Navigate<Processor>     StringBuilder sb = new StringBuilder().     Route route = context.getRoutes().get(0).     // the start of the route     sb.append("from(\"" + route.getEndpoint().getEndpointUri() + "\")").     // navigate the route and add Java DSL to the sb     Navigate<Processor> nav = route.navigate().     navigateRoute(nav, sb).     // output the Java DSL     assertEquals("from(\"direct://start\").loadBalance().random().to(\"mock://x\").to(\"mock://y\").to(\"mock://z\")", sb.toString()). }
false;public;0;17;;@Test public void testNavigateRouteAsJavaDSL() throws Exception {     // this one navigate using the route definition     StringBuilder sb = new StringBuilder().     RouteDefinition route = context.getRouteDefinitions().get(0).     // the start of the route     sb.append("from(\"" + route.getInputs().get(0).getUri() + "\")").     // navigate the route and add Java DSL to the sb     navigateDefinition(route, sb).     // output the Java DSL     assertEquals("from(\"direct://start\").loadBalance().random().to(\"mock://x\").to(\"mock://y\").to(\"mock://z\")", sb.toString()). }
false;private;2;11;;private void navigateRoute(Navigate<Processor> nav, StringBuilder sb) {     if (!nav.hasNext()) {         return.     }     if (nav instanceof DefaultChannel) {         DefaultChannel channel = (DefaultChannel) nav.         ProcessorDefinition<?> def = channel.getProcessorDefinition().         navigateDefinition(def, sb).     } }
false;private;2;29;;private void navigateDefinition(ProcessorDefinition<?> def, StringBuilder sb) {     // must do this ugly cast to avoid compiler error on HP-UX     ProcessorDefinition<?> defn = (ProcessorDefinition<?>) def.     if (defn instanceof LoadBalanceDefinition) {         sb.append(".loadBalance()").         LoadBalanceDefinition lbd = (LoadBalanceDefinition) defn.         LoadBalancer balancer = lbd.getLoadBalancerType().getLoadBalancer().         if (balancer instanceof RandomLoadBalancer) {             sb.append(".random()").         }     }     if (defn instanceof SendDefinition) {         SendDefinition<?> send = (SendDefinition<?>) defn.         sb.append(".to(\"" + send.getUri() + "\")").     }     List<ProcessorDefinition<?>> children = defn.getOutputs().     if (children == null || children.isEmpty()) {         return.     }     for (ProcessorDefinition<?> child : children) {         navigateDefinition(child, sb).     } }
