commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getLanguageName() {     return "simple". }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     SimpleLanguage.changeFunctionStartToken("[[").     SimpleLanguage.changeFunctionEndToken("]]"). }
false;public;0;9;;@Override @After public void tearDown() throws Exception {     super.tearDown().     // replace old tokens     SimpleLanguage.changeFunctionStartToken("${", "$simple{").     SimpleLanguage.changeFunctionEndToken("}"). }
false;public;0;7;;@Test public void testSimpleBody() throws Exception {     assertExpression(exchange, "[[body]]", "<hello id='m123'>world!</hello>").     // old tokens do no longer work     assertExpression(exchange, "${body}", "${body}"). }
false;public;0;9;;@Test public void testSimpleConstantAndBody() throws Exception {     exchange.getIn().setBody("Camel").     assertExpression(exchange, "Hi [[body]] how are you", "Hi Camel how are you").     assertExpression(exchange, "'Hi '[[body]]' how are you'", "'Hi 'Camel' how are you'").     // old tokens do no longer work     assertExpression(exchange, "Hi ${body} how are you", "Hi ${body} how are you"). }
false;public;0;6;;@Test public void testSimpleConstantAndBodyAndHeader() throws Exception {     exchange.getIn().setBody("Camel").     exchange.getIn().setHeader("foo", "Tiger").     assertExpression(exchange, "Hi [[body]] how are [[header.foo]]", "Hi Camel how are Tiger"). }
false;public;0;8;;@Test public void testSimpleEqOperator() throws Exception {     exchange.getIn().setBody("Camel").     assertPredicate(exchange, "[[body]] == 'Tiger'", false).     assertPredicate(exchange, "[[body]] == 'Camel'", true).     assertPredicate(exchange, "[[body]] == \"Tiger\"", false).     assertPredicate(exchange, "[[body]] == \"Camel\"", true). }
