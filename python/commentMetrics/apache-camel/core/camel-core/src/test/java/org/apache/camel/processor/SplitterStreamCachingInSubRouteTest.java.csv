commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Override public void configure() throws Exception {     context.setStreamCaching(true).     context.getStreamCachingStrategy().setEnabled(true).     context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache").     context.getStreamCachingStrategy().setSpoolThreshold(1L).     from("direct:startIterable").split(body().tokenize(",")).streaming().aggregationStrategy(new InternalAggregationStrategy()).stopOnException().parallelProcessing().to("direct:sub").end().to("mock:result").     from("direct:start").split(body().tokenize(",")).aggregationStrategy(new InternalAggregationStrategy()).stopOnException().parallelProcessing().to("direct:sub").end().to("mock:result").     from("direct:sub").process(new InputProcessorWithStreamCache(22)).to("mock:resultsub").     from("direct:startNested").split(body().tokenize(",")).aggregationStrategy(new InternalAggregationStrategy()).stopOnException().parallelProcessing().to("direct:start").end().to("mock:resultNested"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setStreamCaching(true).             context.getStreamCachingStrategy().setEnabled(true).             context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache").             context.getStreamCachingStrategy().setSpoolThreshold(1L).             from("direct:startIterable").split(body().tokenize(",")).streaming().aggregationStrategy(new InternalAggregationStrategy()).stopOnException().parallelProcessing().to("direct:sub").end().to("mock:result").             from("direct:start").split(body().tokenize(",")).aggregationStrategy(new InternalAggregationStrategy()).stopOnException().parallelProcessing().to("direct:sub").end().to("mock:result").             from("direct:sub").process(new InputProcessorWithStreamCache(22)).to("mock:resultsub").             from("direct:startNested").split(body().tokenize(",")).aggregationStrategy(new InternalAggregationStrategy()).stopOnException().parallelProcessing().to("direct:start").end().to("mock:resultNested").         }     }. }
false;public;0;8;;@Test public void testWithAggregationStategyAndStreamCacheInSubRoute() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Test Message 22").     template.sendBody("direct:start", "<start></start>").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testStreamCacheIterableSplitter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Test Message 22").     template.sendBody("direct:startIterable", "<start></start>").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testNested() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:resultNested").     mock.expectedBodiesReceived("Test Message 22").     template.sendBody("direct:startNested", "<start></start>").     assertMockEndpointsSatisfied(). }
false;public;1;11;;@Override public void process(Exchange exchange) throws Exception {     CachedOutputStream cos = new CachedOutputStream(exchange).     String s = "Test Message " + number.     cos.write(s.getBytes(Charset.forName("UTF-8"))).     cos.close().     InputStream is = (InputStream) cos.newStreamCache().     exchange.getOut().setBody(is). }
false;public;2;19;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     try {         String oldBody = oldExchange.getIn().getBody(String.class).         String newBody = newExchange.getIn().getBody(String.class).         String merged = oldBody + newBody.         // also do stream caching in the aggregation strategy         CachedOutputStream cos = new CachedOutputStream(newExchange).         cos.write(merged.getBytes("UTF-8")).         cos.close().         oldExchange.getIn().setBody(cos.newStreamCache()).         return oldExchange.     } catch (IOException e) {         throw new IllegalStateException(e).     } }
