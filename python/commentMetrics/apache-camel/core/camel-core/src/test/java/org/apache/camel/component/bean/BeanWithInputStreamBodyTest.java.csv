commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyCoolBean()).     return jndi. }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").bean(MyCoolBean.class).to("mock:result"). }
false;public;0;20;;@Test public void testBeanWithInputStreamBody() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyCoolBean.class).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes").     InputStream bais = new ByteArrayInputStream("Hello World".getBytes()).     template.sendBody("direct:start", bais).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").bean(MyCoolBean.class, "doSomething").to("mock:result"). }
false;public;0;20;;@Test public void testBeanWithInputStreamBodyMethod() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MyCoolBean.class, "doSomething").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes").     InputStream bais = new ByteArrayInputStream("Hello World".getBytes()).     template.sendBody("direct:start", bais).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("bean:myBean").to("mock:result"). }
false;public;0;20;;@Test public void testToBeanWithInputStreamBody() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:myBean").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes").     InputStream bais = new ByteArrayInputStream("Hello World".getBytes()).     template.sendBody("direct:start", bais).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("bean:myBean?method=doSomething").to("mock:result"). }
false;public;0;20;;@Test public void testToBeanWithInputStreamBodyMethod() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:myBean?method=doSomething").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes").     InputStream bais = new ByteArrayInputStream("Hello World".getBytes()).     template.sendBody("direct:start", bais).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("bean:myBean?method=doSomething(${body})").to("mock:result"). }
false;public;0;20;;@Test public void testToBeanWithInputStreamBodyMethodOGNL() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:myBean?method=doSomething(${body})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("There is 11 bytes").     InputStream bais = new ByteArrayInputStream("Hello World".getBytes()).     template.sendBody("direct:start", bais).     assertMockEndpointsSatisfied(). }
false;public,static;1;7;;public static String doSomething(InputStream is) throws IOException {     int byteCount = 0.     while ((is.read()) != -1) {         byteCount++.     }     return "There is " + byteCount + " bytes". }
