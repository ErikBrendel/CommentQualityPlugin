commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAggregate() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", new User("Claus")).     template.sendBody("direct:start", new User("James")).     template.sendBody("direct:start", new User("Jonathan")).     assertMockEndpointsSatisfied().     List<?> names = getMockEndpoint("mock:result").getReceivedExchanges().get(0).getIn().getBody(List.class).     assertEquals("Claus", names.get(0)).     assertEquals("James", names.get(1)).     assertEquals("Jonathan", names.get(2)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(constant(true), AggregationStrategies.beanAllowNull(appender, "addUsers")).completionSize(3).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(constant(true), AggregationStrategies.beanAllowNull(appender, "addUsers")).completionSize(3).to("mock:result").         }     }. }
false;public;2;7;;public List<String> addUsers(List<String> names, User user) {     if (names == null) {         names = new ArrayList<>().     }     names.add(user.getName()).     return names. }
false;public;0;3;;public String getName() {     return name. }
