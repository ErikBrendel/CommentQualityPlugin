commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/done").     super.setUp(). }
false;public;0;18;;@Test public void testDoneFile() throws Exception {     getMockEndpoint("mock:input").expectedMessageCount(2).     getMockEndpoint("mock:input").expectedFileExists("target/data/done/.camel/hello.txt").     template.sendBodyAndHeader("file:target/data/done", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/done", "", Exchange.FILE_NAME, "done").     assertMockEndpointsSatisfied().     // done file should be deleted now     File file = new File("target/data/done/done").     assertFalse("Done file should be deleted: " + file, file.exists()).     // as well the original file should be moved to .camel     file = new File("target/data/done/.camel/hello.txt").     assertTrue("Original file should be moved: " + file, file.exists()). }
false;public;1;10;;@Override public void process(Exchange exchange) throws Exception {     if (index++ == 0) {         // done file should still exists         File file = new File("target/data/done/done").         assertTrue("Done file should exists: " + file, file.exists()).         throw new IllegalArgumentException("Forced").     } }
false;public;0;18;;@Override public void configure() throws Exception {     from("file:target/data/done?doneFileName=done&initialDelay=0&delay=10").to("mock:input").process(new Processor() {          int index.          @Override         public void process(Exchange exchange) throws Exception {             if (index++ == 0) {                 // done file should still exists                 File file = new File("target/data/done/done").                 assertTrue("Done file should exists: " + file, file.exists()).                 throw new IllegalArgumentException("Forced").             }         }     }). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/done?doneFileName=done&initialDelay=0&delay=10").to("mock:input").process(new Processor() {                  int index.                  @Override                 public void process(Exchange exchange) throws Exception {                     if (index++ == 0) {                         // done file should still exists                         File file = new File("target/data/done/done").                         assertTrue("Done file should exists: " + file, file.exists()).                         throw new IllegalArgumentException("Forced").                     }                 }             }).         }     }. }
