commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCallBean() throws Exception {     validEndpoint.expectedMessageCount(1).     invalidEndpoint.expectedMessageCount(0).     template.sendBody("direct:rootPath", "<report xmlns='http://foo.com/report' xmlns:rb='http://foo.com/report-base'><author><rb:name>Knuth</rb:name></author><content><rb:chapter><rb:subject></rb:subject>" + "<rb:abstract></rb:abstract><rb:body></rb:body></rb:chapter></content></report>").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     validEndpoint = resolveMandatoryEndpoint("mock:valid", MockEndpoint.class).     invalidEndpoint = resolveMandatoryEndpoint("mock:invalid", MockEndpoint.class). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyValidatorBean()).     return jndi. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:rootPath").to("validator:bean:myBean.loadFile").to("mock:valid"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:rootPath").to("validator:bean:myBean.loadFile").to("mock:valid").         }     }. }
false;public;0;3;;public InputStream loadFile() throws Exception {     return Files.newInputStream(Paths.get("src/test/resources/report.xsd")). }
