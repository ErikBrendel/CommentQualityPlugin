commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testForkAndJoin() throws InterruptedException { // enable the other test method for manual testing }
false;public;0;17;;public void xxxTestForkAndJoin() throws InterruptedException {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(NUMBER_OF_MESSAGES).     ProducerTemplate template = context.createProducerTemplate().     for (int i = 0. i < NUMBER_OF_MESSAGES. i++) {         template.sendBodyAndHeader("seda:fork", "Test Message: " + i, "seqnum", new Long(i)).     }     long expectedTime = NUMBER_OF_MESSAGES * (RandomSleepProcessor.MAX_PROCESS_TIME + RandomSleepProcessor.MIN_PROCESS_TIME) / 2 / CONCURRENCY + TIMEOUT.     Thread.sleep(expectedTime).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     Processor myProcessor = new RandomSleepProcessor().     from("seda:fork?concurrentConsumers=" + CONCURRENCY).process(myProcessor).to("seda:join").     from("seda:join").resequence(header("seqnum")).stream().capacity(CAPACITY).timeout(TIMEOUT).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             Processor myProcessor = new RandomSleepProcessor().             from("seda:fork?concurrentConsumers=" + CONCURRENCY).process(myProcessor).to("seda:join").             from("seda:join").resequence(header("seqnum")).stream().capacity(CAPACITY).timeout(TIMEOUT).to("mock:result").         }     }. }
false;public;1;6;;@Override public void process(Exchange arg0) throws Exception {     long processTime = (long) (MIN_PROCESS_TIME + Math.random() * (MAX_PROCESS_TIME - MIN_PROCESS_TIME)).     Thread.sleep(processTime). }
