commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/splitter").     super.setUp(). }
false;public;0;9;;@Test public void testSplitterUoWIssue() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("A", "B", "C", "D", "E").     getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E").     template.sendBodyAndHeader("file:target/data/splitter", "A,B,C,D,E", Exchange.FILE_NAME, "splitme.txt").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSplitterTwoFilesUoWIssue() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("A", "B", "C", "D", "E", "F", "G", "H", "I").     getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E", "F,G,H,I").     template.sendBodyAndHeader("file:target/data/splitter", "A,B,C,D,E", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/splitter", "F,G,H,I", Exchange.FILE_NAME, "b.txt").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     from("file:target/data/splitter?initialDelay=0&delay=10&delete=true&sortBy=file:name").split(body().tokenize(",")).to("seda:queue").end().log("End of file ${file:name}").to("mock:result").     from("seda:queue").log("Token: ${body}").to("mock:foo"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/splitter?initialDelay=0&delay=10&delete=true&sortBy=file:name").split(body().tokenize(",")).to("seda:queue").end().log("End of file ${file:name}").to("mock:result").             from("seda:queue").log("Token: ${body}").to("mock:foo").         }     }. }
