commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     context.addComponent("my", new MyQueueComponent()). }
false;public;0;51;;@Test public void testQueueSize() throws Exception {     // must start context as we do not use route builder that auto-start     context.start().     PollingConsumer consumer = context.getEndpoint(uri).createPollingConsumer().     consumer.start().     assertNotNull(consumer).     EventDrivenPollingConsumer edpc = assertIsInstanceOf(EventDrivenPollingConsumer.class, consumer).     assertEquals(0, edpc.getQueueSize()).     assertEquals(10, edpc.getQueueCapacity()).     assertFalse(edpc.isBlockWhenFull()).     for (int i = 0. i < 10. i++) {         template.sendBody(uri, "Message " + i).     }     assertEquals(10, edpc.getQueueSize()).     try {         template.sendBody(uri, "Message 10").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         // queue should be full         assertIsInstanceOf(IllegalStateException.class, e.getCause()).     }     Exchange out = consumer.receive(5000).     assertNotNull(out).     assertEquals("Message 0", out.getIn().getBody()).     assertEquals(9, edpc.getQueueSize()).     assertEquals(10, edpc.getQueueCapacity()).     // now there is room     template.sendBody(uri, "Message 10").     assertEquals(10, edpc.getQueueSize()).     assertEquals(10, edpc.getQueueCapacity()).     ServiceHelper.stopService(consumer).     // not cleared if we stop     assertEquals(10, edpc.getQueueSize()).     assertEquals(10, edpc.getQueueCapacity()).     ServiceHelper.stopAndShutdownService(consumer).     // now its cleared as we shutdown     assertEquals(0, edpc.getQueueSize()).     assertEquals(10, edpc.getQueueCapacity()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyQueueEndpoint(uri, this). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     consumer.process(exchange). }
false;public;0;9;;@Override public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          @Override         public void process(Exchange exchange) throws Exception {             consumer.process(exchange).         }     }. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return consumer. }
false;public;0;4;;@Override public PollingConsumer createPollingConsumer() throws Exception {     return consumer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     consumer = (EventDrivenPollingConsumer) super.createPollingConsumer().     super.doStart(). }
