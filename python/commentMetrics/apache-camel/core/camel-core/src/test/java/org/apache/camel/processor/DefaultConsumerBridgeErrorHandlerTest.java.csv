commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testDefaultConsumerBridgeErrorHandler() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello World").     getMockEndpoint("mock:dead").expectedBodiesReceived("Cannot process").     latch.countDown().     assertMockEndpointsSatisfied().     Exception cause = getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertNotNull(cause).     assertEquals("Simulated", cause.getMessage()). }
false;public;0;15;;@Override public void configure() throws Exception {     // register our custom component     getContext().addComponent("my", new MyComponent()).     // configure error handler     errorHandler(deadLetterChannel("mock:dead")).     // configure the consumer to bridge with the Camel error handler,     // so the above error handler will trigger if exceptions also     // occurs inside the consumer     from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     // START SNIPPET: e1     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // register our custom component             getContext().addComponent("my", new MyComponent()).             // configure error handler             errorHandler(deadLetterChannel("mock:dead")).             // configure the consumer to bridge with the Camel error handler,             // so the above error handler will trigger if exceptions also             // occurs inside the consumer             from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result").         }     }. // END SNIPPET: e1 }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyEndpoint(uri, this). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return null. }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     Consumer answer = new MyConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;14;;public void doSomething() throws Exception {     try {         if (invoked++ == 0) {             throw new IllegalArgumentException("Simulated").         }         Exchange exchange = getEndpoint().createExchange().         exchange.getIn().setBody("Hello World").         getProcessor().process(exchange).     } catch (Exception e) {         getExceptionHandler().handleException("Cannot process", e).     } }
false;public;0;12;;@Override public void run() {     try {         // do not start before the mocks has been setup and is ready         latch.await(5, TimeUnit.SECONDS).         doSomething().         doSomething().         doSomething().     } catch (Exception e) {     // ignore     } }
false;protected;0;20;;@Override protected void doStart() throws Exception {     super.doStart().     Thread thread = new Thread() {          @Override         public void run() {             try {                 // do not start before the mocks has been setup and is ready                 latch.await(5, TimeUnit.SECONDS).                 doSomething().                 doSomething().                 doSomething().             } catch (Exception e) {             // ignore             }         }     }.     thread.start(). }
