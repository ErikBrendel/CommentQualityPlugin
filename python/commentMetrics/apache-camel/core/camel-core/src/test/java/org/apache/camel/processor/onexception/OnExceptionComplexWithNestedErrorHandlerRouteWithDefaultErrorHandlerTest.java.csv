commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testFunctionalError() throws Exception {     // override as we dont support redelivery with DefaultErrorHandler     // then mock error should not receive any messages     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "<order><type>myType</type><user>Func</user></order>").         fail("Should have thrown a MyFunctionalException").     } catch (RuntimeCamelException e) {         assertIsInstanceOf(MyFunctionalException.class, e.getCause()).     }     assertMockEndpointsSatisfied(). }
false;public;0;32;;@Override public void configure() throws Exception {     // shared for both routes     onException(MyTechnicalException.class).handled(true).to("mock:tech.error").     from("direct:start").onException(MyFunctionalException.class).handled(false).end().to("bean:myServiceBean").to("mock:result").     from("direct:start2").onException(MyFunctionalException.class).handled(true).to("mock:handled").end().to("bean:myServiceBean").to("mock:result").     // START SNIPPET: e1     from("direct:start3").errorHandler(deadLetterChannel("mock:error3").maximumRedeliveries(0)).onException(MyFunctionalException.class).handled(true).end().to("bean:myServiceBean").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;37;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // shared for both routes             onException(MyTechnicalException.class).handled(true).to("mock:tech.error").             from("direct:start").onException(MyFunctionalException.class).handled(false).end().to("bean:myServiceBean").to("mock:result").             from("direct:start2").onException(MyFunctionalException.class).handled(true).to("mock:handled").end().to("bean:myServiceBean").to("mock:result").             // START SNIPPET: e1             from("direct:start3").errorHandler(deadLetterChannel("mock:error3").maximumRedeliveries(0)).onException(MyFunctionalException.class).handled(true).end().to("bean:myServiceBean").to("mock:result").         // END SNIPPET: e1         }     }. }
