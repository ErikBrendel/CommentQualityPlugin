commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected boolean useJmx() {     return true. }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     events.clear().     events2.clear().     super.setUp(). }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events2.add(event). }
false;protected;0;6;;@Override protected void doStart() throws Exception {     setIgnoreCamelContextEvents(true).     setIgnoreServiceEvents(true).     setIgnoreRouteEvents(true). }
false;protected;0;22;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }     }).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events2.add(event).         }          @Override         protected void doStart() throws Exception {             setIgnoreCamelContextEvents(true).             setIgnoreServiceEvents(true).             setIgnoreRouteEvents(true).         }     }).     return context. }
false;public;0;46;;@Test public void testExchangeDone() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(14, events.size()).     assertIsInstanceOf(CamelContextStartingEvent.class, events.get(0)).     assertIsInstanceOf(RouteAddedEvent.class, events.get(1)).     assertIsInstanceOf(RouteAddedEvent.class, events.get(2)).     assertIsInstanceOf(RouteStartedEvent.class, events.get(3)).     assertIsInstanceOf(RouteStartedEvent.class, events.get(4)).     assertIsInstanceOf(CamelContextStartedEvent.class, events.get(5)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(6)).     assertIsInstanceOf(ExchangeCreatedEvent.class, events.get(7)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(8)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(9)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(10)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(11)).     assertIsInstanceOf(ExchangeCompletedEvent.class, events.get(12)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(13)).     assertEquals(8, events2.size()).     assertIsInstanceOf(ExchangeSendingEvent.class, events2.get(0)).     assertIsInstanceOf(ExchangeCreatedEvent.class, events2.get(1)).     assertIsInstanceOf(ExchangeSendingEvent.class, events2.get(2)).     assertIsInstanceOf(ExchangeSentEvent.class, events2.get(3)).     assertIsInstanceOf(ExchangeSendingEvent.class, events2.get(4)).     assertIsInstanceOf(ExchangeSentEvent.class, events2.get(5)).     assertIsInstanceOf(ExchangeCompletedEvent.class, events2.get(6)).     assertIsInstanceOf(ExchangeSentEvent.class, events2.get(7)).     context.stop().     assertEquals(20, events.size()).     assertIsInstanceOf(CamelContextStoppingEvent.class, events.get(14)).     assertIsInstanceOf(RouteStoppedEvent.class, events.get(15)).     assertIsInstanceOf(RouteRemovedEvent.class, events.get(16)).     assertIsInstanceOf(RouteStoppedEvent.class, events.get(17)).     assertIsInstanceOf(RouteRemovedEvent.class, events.get(18)).     assertIsInstanceOf(CamelContextStoppedEvent.class, events.get(19)).     assertEquals(8, events2.size()). }
false;public;0;40;;@Test public void testExchangeFailed() throws Exception {     try {         template.sendBody("direct:fail", "Hello World").         fail("Should have thrown an exception").     } catch (Exception e) {         // expected         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).     }     assertEquals(10, events.size()).     assertIsInstanceOf(CamelContextStartingEvent.class, events.get(0)).     assertIsInstanceOf(RouteAddedEvent.class, events.get(1)).     assertIsInstanceOf(RouteAddedEvent.class, events.get(2)).     assertIsInstanceOf(RouteStartedEvent.class, events.get(3)).     assertIsInstanceOf(RouteStartedEvent.class, events.get(4)).     assertIsInstanceOf(CamelContextStartedEvent.class, events.get(5)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(6)).     assertIsInstanceOf(ExchangeCreatedEvent.class, events.get(7)).     assertIsInstanceOf(ExchangeFailedEvent.class, events.get(8)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(9)).     assertEquals(4, events2.size()).     context.stop().     assertIsInstanceOf(ExchangeSendingEvent.class, events2.get(0)).     assertIsInstanceOf(ExchangeCreatedEvent.class, events2.get(1)).     assertIsInstanceOf(ExchangeFailedEvent.class, events2.get(2)).     assertIsInstanceOf(ExchangeSentEvent.class, events2.get(3)).     assertEquals(16, events.size()).     assertIsInstanceOf(CamelContextStoppingEvent.class, events.get(10)).     assertIsInstanceOf(RouteStoppedEvent.class, events.get(11)).     assertIsInstanceOf(RouteRemovedEvent.class, events.get(12)).     assertIsInstanceOf(RouteStoppedEvent.class, events.get(13)).     assertIsInstanceOf(RouteRemovedEvent.class, events.get(14)).     assertIsInstanceOf(CamelContextStoppedEvent.class, events.get(15)).     assertEquals(4, events2.size()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result").     from("direct:fail").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").             from("direct:fail").throwException(new IllegalArgumentException("Damn")).         }     }. }
