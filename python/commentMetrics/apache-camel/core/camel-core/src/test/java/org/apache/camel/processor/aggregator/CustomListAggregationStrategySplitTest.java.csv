commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@SuppressWarnings("unchecked") @Test public void testCustomAggregationStrategy() throws Exception {     getMockEndpoint("mock:line").expectedBodiesReceived(100, 150, 130).     // the strategy will combine the data into a list of numbers     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.message(0).body().isInstanceOf(List.class).     List<String> body = new ArrayList<>().     body.add("100").     body.add("150").     body.add("130").     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // the list will be stored as the message body by default     List<Integer> numbers = result.getExchanges().get(0).getIn().getBody(List.class).     assertNotNull(numbers).     assertEquals(Integer.valueOf("100"), numbers.get(0)).     assertEquals(Integer.valueOf("150"), numbers.get(1)).     assertEquals(Integer.valueOf("130"), numbers.get(2)). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").split(body(), new MyListOfNumbersStrategy()).to("mock:line").end().to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body(), new MyListOfNumbersStrategy()).to("mock:line").end().to("mock:result").         }     }. }
false;public;1;5;;@Override public Integer getValue(Exchange exchange) {     String s = exchange.getIn().getBody(String.class).     return Integer.valueOf(s). }
