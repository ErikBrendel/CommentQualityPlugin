commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testAppendText() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/test-file-append/hello.txt", "Hello World").     template.sendBody("direct:start", " World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/test-file-append").     super.setUp().     template.sendBodyAndHeader("file://target/data/test-file-append", "Hello", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/test-file-append", " World", Exchange.FILE_NAME, "world.txt"). }
false;public;0;5;;public void configure() {     from("direct:start").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("file://target/data/test-file-append?fileExist=Append", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("file://target/data/test-file-append?fileExist=Append", "mock:result").         }     }. }
