commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;14;;@Override public void configure() throws Exception {     onException(Exception.class).log("Error due ${exception.message}").     from("direct:start").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").to("mock:bar").throwException(new IllegalArgumentException("Forced bar error")). }
false;public;0;33;;@Test public void testContextScopedOnExceptionLogRouteBarFail() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).log("Error due ${exception.message}").             from("direct:start").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").to("mock:bar").throwException(new IllegalArgumentException("Forced bar error")).         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (Exception e) {     // ignore     }     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     onException(Exception.class).log("Error due ${exception.message}").     from("direct:start").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced foo error")).to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").to("mock:bar").     from("direct:killer").routeId("killer").to("mock:killer"). }
false;public;0;36;;@Test public void testContextScopedOnExceptionLogRouteFooFail() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).log("Error due ${exception.message}").             from("direct:start").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced foo error")).to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").to("mock:bar").             from("direct:killer").routeId("killer").to("mock:killer").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
