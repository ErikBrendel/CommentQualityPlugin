commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testUnmarshalUTF8() throws Exception {     // NOTE: Here we can use a MockEndpoint as we unmarshal the inputstream to String     // include a UTF-8 char in the text \u0E08 is a Thai elephant     final String title = "Hello Thai Elephant \u0E08".     byte[] bytes = title.getBytes("UTF-8").     InputStream in = new ByteArrayInputStream(bytes).     template.sendBody("direct:start", in).     MockEndpoint mock = context.getEndpoint("mock:unmarshal", MockEndpoint.class).     mock.setExpectedMessageCount(1).     mock.expectedBodiesReceived(title). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("dataformat:string:unmarshal?charset=UTF-8").to("mock:unmarshal"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("dataformat:string:unmarshal?charset=UTF-8").to("mock:unmarshal").         }     }. }
