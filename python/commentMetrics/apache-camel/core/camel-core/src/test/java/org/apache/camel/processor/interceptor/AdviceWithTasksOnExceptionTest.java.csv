commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     // weave the node in the route which has id = bar     // and insert the following route path before the adviced node     weaveById("bar").before().to("mock:a").transform(constant("Bye World")). }
false;public;0;20;;@Test public void testBeforeWithOnException() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the node in the route which has id = bar             // and insert the following route path before the adviced node             weaveById("bar").before().to("mock:a").transform(constant("Bye World")).         }     }).     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).handled(true).to("mock:error").end().to("mock:foo").to("mock:bar").id("bar").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).handled(true).to("mock:error").end().to("mock:foo").to("mock:bar").id("bar").to("mock:result").         }     }. }
