commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testShutdownGraceful() throws Exception {     // timeout after 2 seconds     context.getShutdownStrategy().setTimeout(2).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("seda:foo", "A").     template.sendBody("seda:foo", "B").     template.sendBody("seda:foo", "C").     template.sendBody("seda:foo", "D").     template.sendBody("seda:foo", "E").     assertMockEndpointsSatisfied().     // now stop the route before its complete     foo = foo + "stop".     context.stop().     // should not be able to complete all messages as timeout occurred     assertNotSame("Should not able able to complete all pending messages", "stopABCDE", foo). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     foo = foo + exchange.getIn().getBody(String.class). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo").to("mock:foo").delay(1000).process(new Processor() {          public void process(Exchange exchange) throws Exception {             foo = foo + exchange.getIn().getBody(String.class).         }     }). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").to("mock:foo").delay(1000).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     foo = foo + exchange.getIn().getBody(String.class).                 }             }).         }     }. }
