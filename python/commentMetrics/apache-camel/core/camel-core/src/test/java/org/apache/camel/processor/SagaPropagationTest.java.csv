commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testPropagationRequired() throws Exception {     context.createFluentProducerTemplate().to("direct:required").request().     assertListSize(sagaIds, 3).     assertUniqueNonNullSagaIds(1). }
false;public;0;7;;@Test public void testPropagationRequiresNew() throws Exception {     context.createFluentProducerTemplate().to("direct:requiresNew").request().     assertListSize(sagaIds, 3).     assertUniqueNonNullSagaIds(3). }
false;public;0;7;;@Test public void testPropagationNotSupported() throws Exception {     context.createFluentProducerTemplate().to("direct:notSupported").request().     assertListSize(sagaIds, 4).     assertNonNullSagaIds(1). }
false;public;0;7;;@Test public void testPropagationSupports() throws Exception {     context.createFluentProducerTemplate().to("direct:supports").request().     assertListSize(sagaIds, 2).     assertNonNullSagaIds(1). }
false;public;0;9;;@Test public void testPropagationMandatory() throws Exception {     try {         context.createFluentProducerTemplate().to("direct:mandatory").request().         Assert.fail("Exception not thrown").     } catch (CamelExecutionException ex) {     // fine     } }
false;public;0;9;;@Test public void testPropagationNever() throws Exception {     try {         context.createFluentProducerTemplate().to("direct:never").request().         Assert.fail("Exception not thrown").     } catch (CamelExecutionException ex) {     // fine     } }
false;public;0;84;;@Override public void configure() throws Exception {     CamelSagaService sagaService = new InMemorySagaService().     context.addService(sagaService).     // REQUIRED     from("direct:required").saga().process(addSagaIdToList()).to("direct:required2").     from("direct:required2").saga().propagation(SagaPropagation.REQUIRED).process(addSagaIdToList()).to("direct:required3").     from("direct:required3").saga().process(addSagaIdToList()).     // REQUIRES_NEW     from("direct:requiresNew").saga().propagation(SagaPropagation.REQUIRES_NEW).process(addSagaIdToList()).to("direct:requiresNew2").to("direct:requiresNew2").     from("direct:requiresNew2").saga().propagation(SagaPropagation.REQUIRES_NEW).process(addSagaIdToList()).     // NOT_SUPPORTED     from("direct:notSupported").process(addSagaIdToList()).to("direct:notSupported2").to("direct:notSupported3").     from("direct:notSupported2").saga().process(addSagaIdToList()).to("direct:notSupported3").     from("direct:notSupported3").saga().propagation(SagaPropagation.NOT_SUPPORTED).process(addSagaIdToList()).     // SUPPORTS     from("direct:supports").to("direct:supports2").to("direct:supports3").     from("direct:supports2").saga().to("direct:supports3").     from("direct:supports3").saga().propagation(SagaPropagation.SUPPORTS).process(addSagaIdToList()).     // MANDATORY     from("direct:mandatory").to("direct:mandatory2").     from("direct:mandatory2").saga().propagation(SagaPropagation.MANDATORY).process(addSagaIdToList()).     // NEVER     from("direct:never").saga().to("direct:never2").     from("direct:never2").saga().propagation(SagaPropagation.NEVER).process(addSagaIdToList()). }
false;protected;0;92;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     this.sagaIds = new LinkedList<>().     return new RouteBuilder() {          @Override         public void configure() throws Exception {             CamelSagaService sagaService = new InMemorySagaService().             context.addService(sagaService).             // REQUIRED             from("direct:required").saga().process(addSagaIdToList()).to("direct:required2").             from("direct:required2").saga().propagation(SagaPropagation.REQUIRED).process(addSagaIdToList()).to("direct:required3").             from("direct:required3").saga().process(addSagaIdToList()).             // REQUIRES_NEW             from("direct:requiresNew").saga().propagation(SagaPropagation.REQUIRES_NEW).process(addSagaIdToList()).to("direct:requiresNew2").to("direct:requiresNew2").             from("direct:requiresNew2").saga().propagation(SagaPropagation.REQUIRES_NEW).process(addSagaIdToList()).             // NOT_SUPPORTED             from("direct:notSupported").process(addSagaIdToList()).to("direct:notSupported2").to("direct:notSupported3").             from("direct:notSupported2").saga().process(addSagaIdToList()).to("direct:notSupported3").             from("direct:notSupported3").saga().propagation(SagaPropagation.NOT_SUPPORTED).process(addSagaIdToList()).             // SUPPORTS             from("direct:supports").to("direct:supports2").to("direct:supports3").             from("direct:supports2").saga().to("direct:supports3").             from("direct:supports3").saga().propagation(SagaPropagation.SUPPORTS).process(addSagaIdToList()).             // MANDATORY             from("direct:mandatory").to("direct:mandatory2").             from("direct:mandatory2").saga().propagation(SagaPropagation.MANDATORY).process(addSagaIdToList()).             // NEVER             from("direct:never").saga().to("direct:never2").             from("direct:never2").saga().propagation(SagaPropagation.NEVER).process(addSagaIdToList()).         }     }. }
false;private;0;3;;private Processor addSagaIdToList() {     return ex -> sagaIds.add(ex.getIn().getHeader(Exchange.SAGA_LONG_RUNNING_ACTION, String.class)). }
false;private;1;6;;private void assertUniqueNonNullSagaIds(int num) {     Set<String> uniqueNonNull = this.sagaIds.stream().filter(Objects::nonNull).collect(Collectors.toSet()).     if (uniqueNonNull.size() != num) {         Assert.fail("Expeced size " + num + ", actual " + uniqueNonNull.size()).     } }
false;private;1;6;;private void assertNonNullSagaIds(int num) {     List<String> nonNull = this.sagaIds.stream().filter(Objects::nonNull).collect(Collectors.toList()).     if (nonNull.size() != num) {         Assert.fail("Expeced size " + num + ", actual " + nonNull.size()).     } }
