commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testRecipientListStopOnException() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedMessageCount(1).     // we run parallel so the tasks could haven been processed so we get 0 or more messages     getMockEndpoint("mock:a").expectedMinimumMessageCount(0).     getMockEndpoint("mock:c").expectedMinimumMessageCount(0).     String out = template.requestBodyAndHeader("direct:start", "Hello World", "foo", "direct:a,direct:b,direct:c", String.class).     assertEquals("Damn Forced", out).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}")).     from("direct:start").recipientList(header("foo")).stopOnException().parallelProcessing().to("mock:result").     from("direct:a").to("mock:a").     from("direct:b").to("mock:b").throwException(new IllegalArgumentException("Forced")).     from("direct:c").to("mock:c"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}")).             from("direct:start").recipientList(header("foo")).stopOnException().parallelProcessing().to("mock:result").             from("direct:a").to("mock:a").             from("direct:b").to("mock:b").throwException(new IllegalArgumentException("Forced")).             from("direct:c").to("mock:c").         }     }. }
