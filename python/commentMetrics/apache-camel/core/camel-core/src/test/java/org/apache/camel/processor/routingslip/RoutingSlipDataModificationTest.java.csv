commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testModificationOfDataAlongRoute() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     x.expectedBodiesReceived(ANSWER).     y.expectedBodiesReceived(ANSWER + ANSWER).     sendBody().     assertMockEndpointsSatisfied(). }
false;protected;0;4;;protected void sendBody() {     template.sendBodyAndHeader("direct:a", ANSWER, ROUTING_SLIP_HEADER, "mock:x , bean:myBean?method=modifyData"). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     Object lookedUpBean = context.getRegistry().lookupByName("myBean").     assertSame("Lookup of 'myBean' should return same object!", myBean, lookedUpBean). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     return answer. }
false;public;0;5;;public void configure() {     // START SNIPPET: example     from("direct:a").routingSlip(header(ROUTING_SLIP_HEADER)).to("mock:y"). // END SNIPPET: example }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:a").routingSlip(header(ROUTING_SLIP_HEADER)).to("mock:y").         // END SNIPPET: example         }     }. }
false;public;1;3;;public String modifyData(@Body String body) {     return body + body. }
