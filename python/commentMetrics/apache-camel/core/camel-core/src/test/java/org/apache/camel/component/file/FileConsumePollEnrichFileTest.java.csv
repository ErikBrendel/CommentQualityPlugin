commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/enrich").     deleteDirectory("target/data/enrichdata").     super.setUp(). }
false;public;0;18;;@Test public void testPollEnrich() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Start").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Big file").     mock.expectedFileExists("target/data/enrich/.done/AAA.fin").     mock.expectedFileExists("target/data/enrichdata/.done/AAA.dat").     template.sendBodyAndHeader("file://target/data/enrich", "Start", Exchange.FILE_NAME, "AAA.fin").     log.info("Sleeping for 1/4 sec before writing enrichdata file").     Thread.sleep(250).     template.sendBodyAndHeader("file://target/data/enrichdata", "Big file", Exchange.FILE_NAME, "AAA.dat").     log.info("... write done").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/enrich?initialDelay=0&delay=10&move=.done").to("mock:start").pollEnrich("file://target/data/enrichdata?initialDelay=0&delay=10&move=.done", 1000).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/enrich?initialDelay=0&delay=10&move=.done").to("mock:start").pollEnrich("file://target/data/enrichdata?initialDelay=0&delay=10&move=.done", 1000).to("mock:result").         }     }. }
