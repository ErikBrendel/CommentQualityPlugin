commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSendStreamSource() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(numMessages).     for (int c = 0. c < numMessages. c++) {         template.sendBody("seda:parallel", new StreamSource(getTestFileStream())).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;public void configure() {     // ensure stream is spooled to disk     context.getStreamCachingStrategy().setSpoolDirectory("target/tmp").     context.getStreamCachingStrategy().setSpoolThreshold(-1).     from("seda:parallel?concurrentConsumers=5").streamCaching().split(XPathBuilder.xpath("//person/city")).to("mock:result"). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // ensure stream is spooled to disk             context.getStreamCachingStrategy().setSpoolDirectory("target/tmp").             context.getStreamCachingStrategy().setSpoolThreshold(-1).             from("seda:parallel?concurrentConsumers=5").streamCaching().split(XPathBuilder.xpath("//person/city")).to("mock:result").         }     }. }
false;protected;0;5;;protected InputStream getTestFileStream() {     InputStream answer = getClass().getClassLoader().getResourceAsStream(TEST_FILE).     assertNotNull("Should have found the file: " + TEST_FILE + " on the classpath", answer).     return answer. }
