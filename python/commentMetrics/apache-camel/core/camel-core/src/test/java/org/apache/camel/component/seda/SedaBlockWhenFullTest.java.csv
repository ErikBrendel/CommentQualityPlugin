commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void configure() throws Exception {     from(BLOCK_WHEN_FULL_URI).delay(DELAY_LONG).syncDelayed().to(MOCK_URI).     // use same delay as above on purpose     from(DEFAULT_URI).delay(DELAY).syncDelayed().to("mock:whatever"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(BLOCK_WHEN_FULL_URI).delay(DELAY_LONG).syncDelayed().to(MOCK_URI).             // use same delay as above on purpose             from(DEFAULT_URI).delay(DELAY).syncDelayed().to("mock:whatever").         }     }. }
false;public;0;14;;@Test public void testSedaOfferTimeoutWhenFull() throws Exception {     try {         SedaEndpoint seda = context.getEndpoint(SEDA_WITH_OFFER_TIMEOUT_URI, SedaEndpoint.class).         assertEquals(QUEUE_SIZE, seda.getQueue().remainingCapacity()).         sendTwoOverCapacity(SEDA_WITH_OFFER_TIMEOUT_URI, QUEUE_SIZE).         fail("Failed to insert element into queue, " + "after timeout of " + seda.getOfferTimeout() + " milliseconds").     } catch (Exception e) {         assertIsInstanceOf(IllegalStateException.class, e.getCause()).     } }
false;public;0;13;;@Test public void testSedaDefaultWhenFull() throws Exception {     try {         SedaEndpoint seda = context.getEndpoint(DEFAULT_URI, SedaEndpoint.class).         assertFalse("Seda Endpoint is not setting the correct default (should be false) for \"blockWhenFull\"", seda.isBlockWhenFull()).         sendTwoOverCapacity(DEFAULT_URI, QUEUE_SIZE).         fail("The route didn't fill the queue beyond capacity: test class isn't working as intended").     } catch (Exception e) {         assertIsInstanceOf(IllegalStateException.class, e.getCause()).     } }
false;public;0;9;;@Test public void testSedaBlockingWhenFull() throws Exception {     getMockEndpoint(MOCK_URI).setExpectedMessageCount(QUEUE_SIZE + 2).     SedaEndpoint seda = context.getEndpoint(BLOCK_WHEN_FULL_URI, SedaEndpoint.class).     assertEquals(QUEUE_SIZE, seda.getQueue().remainingCapacity()).     sendTwoOverCapacity(BLOCK_WHEN_FULL_URI, QUEUE_SIZE).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testAsyncSedaBlockingWhenFull() throws Exception {     getMockEndpoint(MOCK_URI).setExpectedMessageCount(QUEUE_SIZE + 1).     getMockEndpoint(MOCK_URI).setResultWaitTime(DELAY_LONG * 3).     SedaEndpoint seda = context.getEndpoint(BLOCK_WHEN_FULL_URI, SedaEndpoint.class).     assertEquals(QUEUE_SIZE, seda.getQueue().remainingCapacity()).     asyncSendTwoOverCapacity(BLOCK_WHEN_FULL_URI, QUEUE_SIZE + 4).     assertMockEndpointsSatisfied(). }
true;private;2;5;/**  * This method make sure that we hit the limit by sending two msg over the  * given capacity which allows the delayer to kick in, leaving the 2nd msg  * in the queue, blocking/throwing on the third one.  */ ;/**  * This method make sure that we hit the limit by sending two msg over the  * given capacity which allows the delayer to kick in, leaving the 2nd msg  * in the queue, blocking/throwing on the third one.  */ private void sendTwoOverCapacity(String uri, int capacity) {     for (int i = 0. i < (capacity + 2). i++) {         template.sendBody(uri, "Message " + i).     } }
false;private;2;5;;private void asyncSendTwoOverCapacity(String uri, int capacity) {     for (int i = 0. i < (capacity + 2). i++) {         template.asyncSendBody(uri, "Message " + i).     } }
