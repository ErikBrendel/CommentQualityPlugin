commented;modifiers;parameterAmount;loc;comment;code
true;public;0;10;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testToFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/test-reports/report.txt").     template.sendBody("direct:reports", "This is a great report").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected JndiRegistry createRegistry() throws Exception {     // bind our processor in the registry with the given id     JndiRegistry reg = super.createRegistry().     reg.bind("processReport", new ProcessReport()).     return reg. }
false;public;0;5;;public void configure() throws Exception {     // the reports from the seda queue is processed by our processor     // before they are written to files in the target/data/reports directory     from("direct:reports").process("processReport").to("file://target/data/test-reports", "mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // the reports from the seda queue is processed by our processor             // before they are written to files in the target/data/reports directory             from("direct:reports").process("processReport").to("file://target/data/test-reports", "mock:result").         }     }. }
false;public;1;11;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     // do some business logic here     // set the output to the file     exchange.getOut().setBody(body).     // set the output filename using java code logic, notice that this is done by setting     // a special header property of the out exchange     exchange.getOut().setHeader(Exchange.FILE_NAME, "report.txt"). }
