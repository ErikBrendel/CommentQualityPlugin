commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNoIntercept() throws Exception {     getMockEndpoint("mock:intercept").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testInterceptFoo() throws Exception {     getMockEndpoint("mock:intercept").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testInterceptBar() throws Exception {     getMockEndpoint("mock:intercept").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("seda:bar", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testInterceptCheese() throws Exception {     getMockEndpoint("mock:intercept").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("seda:cheese", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;public void configure() throws Exception {     // START SNIPPET: e1     // only trigger when incoming from either seda:bar or seda:foo as we use regex     interceptFrom("seda:(bar|foo)").to("mock:intercept").     from("direct:start").to("mock:result").     from("seda:bar").to("mock:result").     from("seda:foo").to("mock:result").     from("seda:cheese").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // only trigger when incoming from either seda:bar or seda:foo as we use regex             interceptFrom("seda:(bar|foo)").to("mock:intercept").             from("direct:start").to("mock:result").             from("seda:bar").to("mock:result").             from("seda:foo").to("mock:result").             from("seda:cheese").to("mock:result").         // END SNIPPET: e1         }     }. }
