commented;modifiers;parameterAmount;loc;comment;code
false;public;0;28;;@Test public void testSetExchangePropertiesMidRouteThenRemoveWithPatternAndExclusion() throws Exception {     mid.expectedMessageCount(1).     end.expectedMessageCount(1).     template.sendBody("direct:start", "message").     // make sure we got the message     assertMockEndpointsSatisfied().     List<Exchange> midExchanges = mid.getExchanges().     Exchange midExchange = midExchanges.get(0).     String actualPropertyValue = midExchange.getProperty(propertyName, String.class).     String actualPropertyValue1 = midExchange.getProperty(propertyName1, String.class).     String actualPropertyValue2 = midExchange.getProperty(propertyName2, String.class).     assertEquals(expectedPropertyValue, actualPropertyValue).     assertEquals(expectedPropertyValue1, actualPropertyValue1).     assertEquals(expectedPropertyValue2, actualPropertyValue2).     List<Exchange> endExchanges = end.getExchanges().     Exchange endExchange = endExchanges.get(0).     // properties should be removed but the last still have to be in the exchange     assertNull(endExchange.getProperty(propertyName, String.class)).     assertNull(endExchange.getProperty(propertyName1, String.class)).     assertEquals(expectedPropertyValue2, endExchange.getProperty(propertyName2, String.class)). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     end = getMockEndpoint("mock:end").     mid = getMockEndpoint("mock:mid"). }
false;public;0;7;;public void configure() {     from("direct:start").setProperty(propertyName).constant(expectedPropertyValue).setProperty(propertyName1).constant(expectedPropertyValue1).setProperty(propertyName2).constant(expectedPropertyValue2).to("mock:mid").removeProperties(pattern, exclusion).to("mock:end"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").setProperty(propertyName).constant(expectedPropertyValue).setProperty(propertyName1).constant(expectedPropertyValue1).setProperty(propertyName2).constant(expectedPropertyValue2).to("mock:mid").removeProperties(pattern, exclusion).to("mock:end").         }     }. }
