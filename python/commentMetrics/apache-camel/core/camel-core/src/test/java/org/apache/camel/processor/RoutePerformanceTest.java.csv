commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testPerformance() throws Exception {     StopWatch watch = new StopWatch().     MockEndpoint endpoint = getMockEndpoint(uri).     endpoint.expectedMessageCount((int) dataSet.getSize()).     endpoint.expectedHeaderReceived("foo", 123).     // wait 30 sec for slow servers     MockEndpoint.assertIsSatisfied(context, 30, TimeUnit.SECONDS).     log.info("RoutePerformanceTest: Sent: {} Took: {} ms", size, watch.taken()). }
false;protected;0;6;;@Override protected boolean canRunOnThisPlatform() {     String os = System.getProperty("os.name").     // HP-UX is just to slow to run this test     return !os.toLowerCase(Locale.ENGLISH).contains("hp-ux"). }
false;protected;0;10;;@Override protected Context createJndiContext() throws Exception {     Map<String, Object> headers = new HashMap<>().     headers.put("foo", 123).     dataSet.setDefaultHeaders(headers).     Context context = super.createJndiContext().     context.bind("foo", dataSet).     return context. }
false;public;0;11;;@Override public void configure() throws Exception {     from("dataset:foo").to("direct:start").     from("direct:start").to("log:a?level=OFF", "log:b?level=OFF", "direct:c").     from("direct:c").choice().when().header("foo").to(uri, "dataset:foo").otherwise().to(uri, "dataset:foo").end(). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("dataset:foo").to("direct:start").             from("direct:start").to("log:a?level=OFF", "log:b?level=OFF", "direct:c").             from("direct:c").choice().when().header("foo").to(uri, "dataset:foo").otherwise().to(uri, "dataset:foo").end().         }     }. }
