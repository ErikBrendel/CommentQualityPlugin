commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Before public void setUp() throws Exception {     // Remove the repository file if needed     Files.deleteIfExists(repositoryStore.toPath()). }
false;public;0;10;;@Test(expected = IllegalArgumentException.class) public void shouldPreventUsingDelimiterInKey() throws Exception {     // Given a FileStateRepository     FileStateRepository repository = fileStateRepository(repositoryStore).     // When trying to use the key delimiter in a key     repository.setState("=", "value"). // Then an exception is thrown }
false;public;0;10;;@Test(expected = IllegalArgumentException.class) public void shouldPreventUsingNewLineInKey() throws Exception {     // Given a FileStateRepository     FileStateRepository repository = createRepository().     // When trying to use new line in a key     repository.setState("\n", "value"). // Then an exception is thrown }
false;public;0;10;;@Test(expected = IllegalArgumentException.class) public void shouldPreventUsingNewLineInValue() throws Exception {     // Given a FileStateRepository     FileStateRepository repository = createRepository().     // When trying to use new line in a key     repository.setState("key", "\n"). // Then an exception is thrown }
false;public;0;11;;@Test public void shouldSaveState() throws Exception {     // Given an empty FileStateRepository     FileStateRepository repository = createRepository().     // When saving a state     repository.setState("key", "value").     // Then it should be retrieved afterwards     assertEquals("value", repository.getState("key")). }
false;public;0;12;;@Test public void shouldUpdateState() throws Exception {     // Given a FileStateRepository with a state in it     FileStateRepository repository = createRepository().     repository.setState("key", "value").     // When updating the state     repository.setState("key", "value2").     // Then the new value should be retrieved afterwards     assertEquals("value2", repository.getState("key")). }
false;public;0;16;;@Test public void shouldSynchronizeInFile() throws Exception {     // Given a FileStateRepository with some content     FileStateRepository repository = createRepository().     repository.setState("key1", "value1").     repository.setState("key2", "value2").     repository.setState("key3", "value3").     // When creating a new FileStateRepository with same file     FileStateRepository newRepository = createRepository().     // Then the new one should have the same content     assertEquals("value1", newRepository.getState("key1")).     assertEquals("value2", newRepository.getState("key2")).     assertEquals("value3", newRepository.getState("key3")). }
false;public;0;18;;@Test public void shouldPreventRepositoryFileFromGrowingInfinitely() throws Exception {     // Given a FileStateRepository with a maximum size of 100 bytes     FileStateRepository repository = createRepository().     repository.setMaxFileStoreSize(100).     // And content just to this limit (10x10 bytes)     for (int i = 0. i < 10. i++) {         repository.setState("key", "xxxxx".replace('x', (char) ('0' + i))).     }     long previousSize = repositoryStore.length().     // When updating the state     repository.setState("key", "value").     // Then it should be truncated     assertTrue(repositoryStore.length() < previousSize). }
false;private;0;5;;private FileStateRepository createRepository() throws Exception {     FileStateRepository repository = fileStateRepository(repositoryStore).     repository.start().     return repository. }
