commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testByteArray() throws Exception {     doTest(new byte[] { (byte) 0xde, (byte) 0xed, (byte) 0xbe, (byte) 0xef }). }
false;public;0;4;;@Test public void testIntArray() throws Exception {     doTest(new int[] { 121, 122, 123 }). }
false;public;0;4;;@Test public void testCharArray() throws Exception {     doTest("forbar".toCharArray()). }
false;public;0;4;;@Test public void testStringArray() throws Exception {     doTest(new String[] { "this", "is", "an", "array" }). }
false;public;1;9;;public void doTest(final Object anArray) throws Exception {     final MockEndpoint mock = getMockEndpoint("mock:reverse").     mock.message(0).body().isEqualTo(anArray).     mock.expectedMessageCount(1).     template.sendBody("direct:start", anArray).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").marshal().serialization().unmarshal().serialization().to("mock:reverse"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").marshal().serialization().unmarshal().serialization().to("mock:reverse").         }     }. }
