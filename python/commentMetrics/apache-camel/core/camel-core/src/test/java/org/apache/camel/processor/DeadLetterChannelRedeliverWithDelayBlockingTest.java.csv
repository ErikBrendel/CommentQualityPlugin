commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void run() {     template.sendBody("direct:start", "Message 1"). }
false;public;0;3;;public void run() {     template.sendBody("direct:start", "Message 2"). }
false;public;0;35;;@Test public void testRedeliverWithDelay() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // we expect message 2 to arrive before 1 as message 1 is in trouble     // and must be redelivered 2 times before succeed     mock.expectedMinimumMessageCount(2).     mock.expectedBodiesReceived("Message 2", "Message 1").     mock.expectedHeaderReceived("foo", "bar").     // the first is not redelivered     mock.message(0).header(Exchange.REDELIVERED).isNull().     // but the 2nd is     mock.message(1).header(Exchange.REDELIVERED).isEqualTo(true).     // use executors to simulate two different clients sending     // a request to Camel     Callable<?> task1 = Executors.callable(new Runnable() {          public void run() {             template.sendBody("direct:start", "Message 1").         }     }).     Callable<?> task2 = Executors.callable(new Runnable() {          public void run() {             template.sendBody("direct:start", "Message 2").         }     }).     Executors.newCachedThreadPool().submit(task1).     // give task 1 a head start, even though it comes last     Thread.sleep(100).     Executors.newCachedThreadPool().submit(task2).     assertMockEndpointsSatisfied(). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Message 1".equals(body) && counter++ < 2) {         throw new IllegalArgumentException("Damn").     }     exchange.getIn().setHeader("foo", "bar"). }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").redeliveryDelay(250).maximumRedeliveries(3).logStackTrace(false)).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Message 1".equals(body) && counter++ < 2) {                 throw new IllegalArgumentException("Damn").             }             exchange.getIn().setHeader("foo", "bar").         }     }).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").redeliveryDelay(250).maximumRedeliveries(3).logStackTrace(false)).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Message 1".equals(body) && counter++ < 2) {                         throw new IllegalArgumentException("Damn").                     }                     exchange.getIn().setHeader("foo", "bar").                 }             }).to("mock:result").         }     }. }
