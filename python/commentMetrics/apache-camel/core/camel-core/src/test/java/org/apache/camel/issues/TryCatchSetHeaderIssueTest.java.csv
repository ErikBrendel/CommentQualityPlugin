commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").doTry().setHeader("foo", constant("try")).throwException(new IllegalArgumentException("Damn")).doCatch(Exception.class).setHeader("foo", constant("error")).end().to("mock:end"). }
false;public;0;24;;@Test public void testTryCatchSetHeaderIssue() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().setHeader("foo", constant("try")).throwException(new IllegalArgumentException("Damn")).doCatch(Exception.class).setHeader("foo", constant("error")).end().to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:end").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:end").expectedHeaderReceived("foo", "error").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").doTry().setHeader("foo", constant("try")).throwException(new IllegalArgumentException("Damn")).doCatch(IllegalArgumentException.class).setHeader("foo", constant("error")).doCatch(Exception.class).setHeader("foo", constant("damn")).end().to("mock:end"). }
false;public;0;26;;@Test public void testTryCatchTwoSetHeaderIssue() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().setHeader("foo", constant("try")).throwException(new IllegalArgumentException("Damn")).doCatch(IllegalArgumentException.class).setHeader("foo", constant("error")).doCatch(Exception.class).setHeader("foo", constant("damn")).end().to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:end").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:end").expectedHeaderReceived("foo", "error").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;3;;@Override public void configure() throws Exception { }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {         }     }. }
