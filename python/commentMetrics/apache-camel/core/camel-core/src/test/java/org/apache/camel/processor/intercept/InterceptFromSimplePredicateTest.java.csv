commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNoIntercept() throws Exception {     getMockEndpoint("mock:intercepted").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testIntercepted() throws Exception {     getMockEndpoint("mock:intercepted").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedBodiesReceived("This is a test body").     template.sendBodyAndHeader("direct:start", "Hello World", "usertype", "test").     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() throws Exception {     // START SNIPPET: e1     interceptFrom().when(header("usertype").isEqualTo("test")).process(new MyTestServiceProcessor()).to("mock:intercepted").     // and here is our route     from("direct:start").to("seda:bar").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             interceptFrom().when(header("usertype").isEqualTo("test")).process(new MyTestServiceProcessor()).to("mock:intercepted").             // and here is our route             from("direct:start").to("seda:bar").to("mock:result").         // END SNIPPET: e1         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("This is a test body"). }
