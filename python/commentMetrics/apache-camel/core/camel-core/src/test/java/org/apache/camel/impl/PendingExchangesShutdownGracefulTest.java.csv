commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testShutdownGraceful() throws Exception {     getMockEndpoint("mock:foo").expectedMinimumMessageCount(1).     template.sendBody("seda:foo", "A").     template.sendBody("seda:foo", "B").     template.sendBody("seda:foo", "C").     template.sendBody("seda:foo", "D").     template.sendBody("seda:foo", "E").     assertMockEndpointsSatisfied().     // now stop the route before its complete     assertTrue(latch.await(10, TimeUnit.SECONDS)).     context.stop().     // it should wait as there was 1 inflight exchange and 4 pending messages left     assertEquals("Should graceful shutdown", "ABCDE", foo). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     foo = foo + exchange.getIn().getBody(String.class).     latch.countDown(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:foo").to("mock:foo").delay(500).syncDelayed().process(new Processor() {          public void process(Exchange exchange) throws Exception {             foo = foo + exchange.getIn().getBody(String.class).             latch.countDown().         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").to("mock:foo").delay(500).syncDelayed().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     foo = foo + exchange.getIn().getBody(String.class).                     latch.countDown().                 }             }).         }     }. }
