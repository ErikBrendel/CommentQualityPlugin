commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testSimpleResultTypeFoo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.expectedMessageCount(1).     // cool header is a boolean     mock.message(0).header("cool").isInstanceOf(Boolean.class).     mock.message(0).header("cool").isEqualTo(true).     // fail header is not a boolean     mock.message(0).header("fail").isInstanceOf(String.class).     mock.message(0).header("fail").isEqualTo("true").     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testSimpleResultTypeBar() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:bar").     mock.expectedMessageCount(1).     // cool header is a boolean     mock.message(0).header("cool").isInstanceOf(Boolean.class).     mock.message(0).header("cool").isEqualTo(true).     // fail header is not a boolean     mock.message(0).header("fail").isInstanceOf(String.class).     mock.message(0).header("fail").isEqualTo("true").     template.sendBody("direct:bar", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:foo").setHeader("cool", simple("true", Boolean.class)).setHeader("fail", simple("true")).to("mock:foo").     from("direct:bar").setHeader("cool").simple("true", Boolean.class).setHeader("fail", simple("true")).to("mock:bar"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").setHeader("cool", simple("true", Boolean.class)).setHeader("fail", simple("true")).to("mock:foo").             from("direct:bar").setHeader("cool").simple("true", Boolean.class).setHeader("fail", simple("true")).to("mock:bar").         }     }. }
