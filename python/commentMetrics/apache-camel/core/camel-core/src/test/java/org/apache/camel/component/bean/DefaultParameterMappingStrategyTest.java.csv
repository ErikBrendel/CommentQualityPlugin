commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyFooBean()).     return jndi. }
false;public;0;6;;@Test public void testExchange() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Exchange").     template.sendBody("direct:a", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testMessage() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Message").     template.sendBody("direct:b", "Hello").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello").     exchange.setException(new IllegalArgumentException("Forced by unit test")). }
false;public;0;11;;@Test public void testException() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Exception").     template.send("direct:c", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello").             exchange.setException(new IllegalArgumentException("Forced by unit test")).         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testTypeConverter() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("TypeConverter").     template.sendBody("direct:d", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testRegistry() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Registry").     template.sendBody("direct:e", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testCamelContext() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("CamelContext").     template.sendBody("direct:f", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").logStackTrace(false).disableRedelivery()).     onException(Exception.class).handled(true).bean("foo", "withException").to("mock:result").     from("direct:a").bean("foo", "withExchange").to("mock:result").     from("direct:b").bean("foo", "withMessage").to("mock:result").     from("direct:c").to("mock:foo").     from("direct:d").bean("foo", "withTypeConverter").to("mock:result").     from("direct:e").bean("foo", "withRegistry").to("mock:result").     from("direct:f").bean("foo", "withCamelContext").to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").logStackTrace(false).disableRedelivery()).             onException(Exception.class).handled(true).bean("foo", "withException").to("mock:result").             from("direct:a").bean("foo", "withExchange").to("mock:result").             from("direct:b").bean("foo", "withMessage").to("mock:result").             from("direct:c").to("mock:foo").             from("direct:d").bean("foo", "withTypeConverter").to("mock:result").             from("direct:e").bean("foo", "withRegistry").to("mock:result").             from("direct:f").bean("foo", "withCamelContext").to("mock:result").         }     }. }
false;public;1;5;;public String withExchange(Exchange exchange) {     assertNotNull(exchange).     assertEquals("Hello", exchange.getIn().getBody(String.class)).     return "Exchange". }
false;public;1;5;;public String withMessage(Message message) {     assertNotNull(message).     assertEquals("Hello", message.getBody(String.class)).     return "Message". }
false;public;2;6;;public String withException(Message in, Exception cause) {     assertNotNull(in).     assertNotNull(cause).     assertEquals("Hello", in.getBody(String.class)).     return "Exception". }
false;public;2;7;;public String withTypeConverter(String body, TypeConverter converter) {     assertNotNull(body).     assertNotNull(converter).     assertEquals("Hello", body).     assertEquals(new Integer(123), converter.convertTo(Integer.class, "123")).     return "TypeConverter". }
false;public;2;7;;public String withRegistry(String body, Registry registry) {     assertNotNull(body).     assertNotNull(registry).     assertNotNull(registry.lookupByName("foo")).     assertEquals("Hello", body).     return "Registry". }
false;public;2;7;;public String withCamelContext(String body, CamelContext camel) {     assertNotNull(body).     assertNotNull(camel).     assertNotNull(camel.getRegistry().lookupByName("foo")).     assertEquals("Hello", body).     return "CamelContext". }
