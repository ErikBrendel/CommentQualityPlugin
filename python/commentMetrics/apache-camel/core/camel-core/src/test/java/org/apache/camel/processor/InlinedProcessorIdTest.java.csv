commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader("foo", 123). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").routeId("foo").to("log:foo").id("log").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader("foo", 123).         }     }).id("inlined").to("mock:result").id("result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("foo").to("log:foo").id("log").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader("foo", 123).                 }             }).id("inlined").to("mock:result").id("result").         }     }. }
false;public;0;17;;@Test public void testInlinedProcessorId() throws Exception {     getMockEndpoint("mock:result").expectedHeaderReceived("foo", 123).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // check ids     RouteDefinition route = context.getRouteDefinition("foo").     assertEquals("foo", route.getId()).     assertEquals(3, route.getOutputs().size()).     assertEquals("log", route.getOutputs().get(0).getId()).     assertEquals("inlined", route.getOutputs().get(1).getId()).     assertEquals("result", route.getOutputs().get(2).getId()). }
