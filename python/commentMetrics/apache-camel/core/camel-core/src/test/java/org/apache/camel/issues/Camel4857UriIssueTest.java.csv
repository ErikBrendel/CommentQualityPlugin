commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     throw new UnsupportedOperationException("Not supported yet."). }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     throw new UnsupportedOperationException("Not supported yet."). }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public String getUri() {     return uri. }
false;protected;3;4;;@Override protected Endpoint createEndpoint(final String uri, final String remaining, final Map<String, Object> parameters) throws Exception {     return new MyEndpoint(uri, remaining). }
false;public;0;5;;@Override public boolean useRawUri() {     // we want the raw uri, so our component can understand the endpoint configuration as it was typed     return true. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     context.addComponent("my", new MyComponent()). }
false;public;0;7;;@Test public void testExclamationInUri() {     // %3F is not an ?, it's part of tube name.     MyEndpoint endpoint = context.getEndpoint("my:host:11303/tube1+tube%2B+tube%3F", MyEndpoint.class).     assertNotNull("endpoint", endpoint).     assertEquals("my:host:11303/tube1+tube%2B+tube%3F", endpoint.getUri()). }
false;public;0;7;;@Test public void testPath() {     // Here a tube name is "tube+" and written in URI as "tube%2B", but it gets     // normalized, so that an endpoint sees "tube1+tube+"     MyEndpoint endpoint = context.getEndpoint("my:host:11303/tube1+tube%2B", MyEndpoint.class).     assertEquals("Path contains several tube names, every tube name may have + or ? characters", "host:11303/tube1+tube%2B", endpoint.remaining). }
