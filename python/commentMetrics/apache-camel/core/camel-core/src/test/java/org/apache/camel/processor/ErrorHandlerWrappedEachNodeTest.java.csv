commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testKabom() throws Exception {     kabom = 0.     hi = 0.     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hi Kabom").     getMockEndpoint("mock:error").expectedMessageCount(0).     template.sendBody("direct:start", "Kabom").     assertMockEndpointsSatisfied().     // we invoke kabom 3 times     assertEquals(3, kabom).     // but hi is only invoke 1 time     assertEquals(1, hi). }
false;public;0;8;;@Override public void configure() throws Exception {     // use dead letter channel that supports redeliveries     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3).redeliveryDelay(0).logStackTrace(false)).     from("direct:start").pipeline("bean:foo?method=hi", "bean:foo?method=kabom").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use dead letter channel that supports redeliveries             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(3).redeliveryDelay(0).logStackTrace(false)).             from("direct:start").pipeline("bean:foo?method=hi", "bean:foo?method=kabom").to("mock:result").         }     }. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyFooBean()).     return jndi. }
false;public;0;5;;public void kabom() throws Exception {     if (kabom++ < 2) {         throw new IllegalArgumentException("Kabom").     } }
false;public;1;4;;public String hi(String payload) throws Exception {     hi++.     return "Hi " + payload. }
