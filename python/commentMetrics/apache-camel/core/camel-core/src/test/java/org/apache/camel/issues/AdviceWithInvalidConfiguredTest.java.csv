commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler()).     interceptSendToEndpoint("direct:bar").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")). }
false;public;0;18;;@Test public void testNoErrorHandler() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinition("route-a"), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 errorHandler(defaultErrorHandler()).                 interceptSendToEndpoint("direct:bar").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")).             }         }).         fail("Should have thrown an exception").     } catch (IllegalArgumentException e) {         assertEquals("You can not advice with error handlers. Remove the error handlers from the route builder.", e.getMessage()).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:foo").to("mock:foo"). }
false;public;0;15;;@Test public void testNoExtraRoutes() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinition("route-a"), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:foo").to("mock:foo").             }         }).         fail("Should have thrown an exception").     } catch (IllegalArgumentException e) {         assertEquals("You can only advice from a RouteBuilder which has no existing routes. Remove all routes from the route builder.", e.getMessage()).     } }
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error")).     from("direct:start").routeId("route-a").to("direct:bar").     from("direct:bar").routeId("route-b").to("mock:bar"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error")).             from("direct:start").routeId("route-a").to("direct:bar").             from("direct:bar").routeId("route-b").to("mock:bar").         }     }. }
