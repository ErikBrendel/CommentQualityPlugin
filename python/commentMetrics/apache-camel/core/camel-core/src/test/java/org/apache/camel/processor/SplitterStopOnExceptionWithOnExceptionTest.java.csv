commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSplitStopOnExceptionOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Hello World", "Bye World").     getMockEndpoint("mock:handled").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World,Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSplitStopOnExceptionStop1() throws Exception {     // we do stop so we stop splitting when the exception occurs and thus we wont receive any message     getMockEndpoint("mock:split").expectedMessageCount(0).     getMockEndpoint("mock:handled").expectedMessageCount(1).     String out = template.requestBody("direct:start", "Kaboom,Hello World,Bye World", String.class).     assertEquals("Damn Forced", out).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testSplitStopOnExceptionStop2() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     // we do stop so we stop splitting when the exception occurs and thus we only receive 1 message     mock.expectedBodiesReceived("Hello World").     getMockEndpoint("mock:handled").expectedMessageCount(1).     String out = template.requestBody("direct:start", "Hello World,Kaboom,Bye World", String.class).     assertEquals("Damn Forced", out).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testSplitStopOnExceptionStop3() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     // we do stop so we stop splitting when the exception occurs and thus we only receive 2 message     mock.expectedBodiesReceived("Hello World", "Bye World").     getMockEndpoint("mock:handled").expectedMessageCount(1).     String out = template.requestBody("direct:start", "Hello World,Bye World,Kaboom", String.class).     assertEquals("Damn Forced", out).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}")).     from("direct:start").split(body().tokenize(",")).stopOnException().process(new MyProcessor()).to("mock:split"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}")).             from("direct:start").split(body().tokenize(",")).stopOnException().process(new MyProcessor()).to("mock:split").         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
