commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testMdcPreservedAfterAsyncEndpoint() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:end").     mock.expectedMessageCount(1).     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     // enable MDC and breadcrumb     context.setUseMDCLogging(true).     context.setUseBreadcrumb(true).     MdcCheckerProcessor checker = new MdcCheckerProcessor().     from("direct:a").routeId("route-async").process(checker).to("log:foo").process(new MyAsyncProcessor()).process(checker).to("mock:end"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // enable MDC and breadcrumb             context.setUseMDCLogging(true).             context.setUseBreadcrumb(true).             MdcCheckerProcessor checker = new MdcCheckerProcessor().             from("direct:a").routeId("route-async").process(checker).to("log:foo").process(new MyAsyncProcessor()).process(checker).to("mock:end").         }     }. }
false;public;0;4;;@Override public void run() { // do nothing }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new RuntimeCamelException("This processor does not support the sync pattern."). }
false;public;1;6;;@Override public CompletableFuture<Exchange> processAsync(Exchange exchange) {     AsyncCallbackToCompletableFutureAdapter<Exchange> callback = new AsyncCallbackToCompletableFutureAdapter<>(exchange).     process(exchange, callback).     return callback.getFuture(). }
false;public;2;5;;@Override public boolean process(Exchange exchange, final AsyncCallback callback) {     EXECUTOR.submit(() -> callback.done(false)).     return false. }
false;public;1;41;;@Override public void process(Exchange exchange) throws Exception {     if (threadId != null) {         assertNotEquals(threadId, Long.valueOf(Thread.currentThread().getId())).     } else {         threadId = Long.valueOf(Thread.currentThread().getId()).     }     if (routeId != null) {         assertEquals(routeId, MDC.get("camel.routeId")).     }     if (exchangeId != null) {         assertEquals(exchangeId, MDC.get("camel.exchangeId")).     } else {         exchangeId = MDC.get("camel.exchangeId").         assertTrue(exchangeId != null && exchangeId.length() > 0).     }     if (messageId != null) {         assertEquals(messageId, MDC.get("camel.messageId")).     } else {         messageId = MDC.get("camel.messageId").         assertTrue(messageId != null && messageId.length() > 0).     }     if (breadcrumbId != null) {         assertEquals(breadcrumbId, MDC.get("camel.breadcrumbId")).     } else {         breadcrumbId = MDC.get("camel.breadcrumbId").         assertTrue(breadcrumbId != null && breadcrumbId.length() > 0).     }     if (contextId != null) {         assertEquals(contextId, MDC.get("camel.contextId")).     } else {         contextId = MDC.get("camel.contextId").         assertTrue(contextId != null && contextId.length() > 0).     } }
