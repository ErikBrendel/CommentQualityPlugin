commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testDumpModelAsXml() throws Exception {     assertEquals("Gouda", context.getRoutes().get(0).getId()).     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("Gouda")).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<route xmlns=\"http://camel.apache.org/schema/spring\" customId=\"true\" id=\"Gouda\">")).     assertTrue(xml.contains("<from uri=\"direct:start-{{cheese.type}}\"/>")).     assertTrue(xml.contains("<to customId=\"true\" id=\"log\" uri=\"direct:end-{{cheese.type}}\"/>")). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start-{{cheese.type}}").routeId("{{cheese.type}}").to("direct:end-{{cheese.type}}").id("log"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start-{{cheese.type}}").routeId("{{cheese.type}}").to("direct:end-{{cheese.type}}").id("log").         }     }. }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent component = new PropertiesComponent().     component.setLocation("classpath:org/apache/camel/component/properties/cheese.properties").     context.addComponent("properties", component).     return context. }
