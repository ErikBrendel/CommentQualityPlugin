commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testPolicy() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("foo", "was wrapped").     getMockEndpoint("mock:response").expectedMessageCount(1).     getMockEndpoint("mock:response").expectedHeaderReceived("foo", "policy finished execution").     template.sendBody("direct:send", "Hello World").     assertMockEndpointsSatisfied().     MyPolicy foo = context.getRegistry().lookupByNameAndType("foo", MyPolicy.class).     assertEquals("Should only be invoked 1 time", 1, foo.getInvoked()). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyPolicy("foo")).     return jndi. }
false;public;0;15;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").policy("foo").to("mock:foo").to("mock:bar").to("mock:result").     // END SNIPPET: e1     from("direct:send").to("direct:start").to("mock:response"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").policy("foo").to("mock:foo").to("mock:bar").to("mock:result").             // END SNIPPET: e1             from("direct:send").to("direct:start").to("mock:response").         }     }. }
false;public;2;4;;public void beforeWrap(RouteContext routeContext, NamedNode definition) { // no need to modify the route }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     invoked++.     // let the original processor continue routing     exchange.getIn().setHeader(name, "was wrapped").     processor.process(exchange).     exchange.getIn().setHeader(name, "policy finished execution"). }
false;public;2;11;;public Processor wrap(RouteContext routeContext, final Processor processor) {     return new Processor() {          public void process(Exchange exchange) throws Exception {             invoked++.             // let the original processor continue routing             exchange.getIn().setHeader(name, "was wrapped").             processor.process(exchange).             exchange.getIn().setHeader(name, "policy finished execution").         }     }. }
false;public;0;3;;public int getInvoked() {     return invoked. }
