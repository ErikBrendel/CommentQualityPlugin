commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSingleMulticastParallel() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("AB").     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // they should all be AB even though A is slower than B     assertEquals("AB", exchange.getIn().getBody(String.class)). }
false;public;0;17;;@Test public void testMulticastParallel() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     mock.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             // they should all be AB even though A is slower than B             assertEquals("AB", exchange.getIn().getBody(String.class)).         }     }).     for (int i = 0. i < 20. i++) {         template.sendBody("direct:start", "Hello").     }     assertMockEndpointsSatisfied(). }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
false;public;0;23;;@Override public void configure() throws Exception {     from("direct:start").multicast(new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String body = oldExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).             return oldExchange.         }     }).parallelProcessing().to("direct:a", "direct:b").end().to("mock:result").     from("direct:a").delay(100).setBody(constant("A")).     from("direct:b").setBody(constant("B")). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast(new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String body = oldExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).                     return oldExchange.                 }             }).parallelProcessing().to("direct:a", "direct:b").end().to("mock:result").             from("direct:a").delay(100).setBody(constant("A")).             from("direct:b").setBody(constant("B")).         }     }. }
