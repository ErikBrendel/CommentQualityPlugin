commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("mySorter", new MyFileSorter<>()).     return jndi. }
false;public;0;15;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filesorter").     super.setUp().     template.sendBodyAndHeader("file:target/data/filesorter/", "Hello Paris", Exchange.FILE_NAME, "paris.txt").     template.sendBodyAndHeader("file:target/data/filesorter/", "Hello London", Exchange.FILE_NAME, "london.txt").     template.sendBodyAndHeader("file:target/data/filesorter/", "Hello Copenhagen", Exchange.FILE_NAME, "copenhagen.txt"). }
false;public;0;4;;@Override public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result"). }
false;public;0;14;;@Test public void testSortFiles() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Copenhagen", "Hello London", "Hello Paris").     assertMockEndpointsSatisfied(). }
false;public;2;3;;public int compare(GenericFile<T> o1, GenericFile<T> o2) {     return o1.getFileName().compareToIgnoreCase(o2.getFileName()). }
