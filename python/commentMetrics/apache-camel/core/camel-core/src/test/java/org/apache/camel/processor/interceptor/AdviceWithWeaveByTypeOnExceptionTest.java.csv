commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     weaveByType(OnExceptionDefinition.class).after().to("mock:error"). }
false;public;0;16;;@Test public void testWeaveOnException() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByType(OnExceptionDefinition.class).after().to("mock:error").         }     }).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).handled(true).to("log:error").end().throwException(new IllegalArgumentException("Forced")).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).handled(true).to("log:error").end().throwException(new IllegalArgumentException("Forced")).to("mock:result").         }     }. }
