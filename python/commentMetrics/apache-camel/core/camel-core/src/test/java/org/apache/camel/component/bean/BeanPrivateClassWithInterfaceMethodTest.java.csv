commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testPackagePrivateClassBinding() throws InterruptedException {     MockEndpoint mockResult = getMockEndpoint("mock:packagePrivateClassResult").     mockResult.setExpectedMessageCount(1).     mockResult.message(0).body().isEqualTo(EXPECTED_OUTPUT).     template.sendBody("direct:testPackagePrivateClass", INPUT_BODY).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testPrivateClassBinding() throws InterruptedException {     MockEndpoint mockResult = getMockEndpoint("mock:privateClassResult").     mockResult.setExpectedMessageCount(1).     mockResult.message(0).body().isEqualTo(EXPECTED_OUTPUT).     template.sendBody("direct:testPrivateClass", INPUT_BODY).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:testPackagePrivateClass").bean(packagePrivateImpl, METHOD_NAME).to("mock:packagePrivateClassResult").     from("direct:testPrivateClass").bean(privateImpl, METHOD_NAME).to("mock:privateClassResult"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:testPackagePrivateClass").bean(packagePrivateImpl, METHOD_NAME).to("mock:packagePrivateClassResult").             from("direct:testPrivateClass").bean(privateImpl, METHOD_NAME).to("mock:privateClassResult").         }     }. }
