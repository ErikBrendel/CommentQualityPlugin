commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void toGZIPInputStreamShouldReturnTheSameInputStream() throws IOException {     InputStream inputStream = GZIPHelper.uncompressGzip("text", new ByteArrayInputStream(sampleBytes)).     byte[] bytes = new byte[6].     inputStream.read(bytes).     assertEquals(-1, inputStream.read()).     assertArrayEquals(sampleBytes, bytes). }
false;public;0;7;;@Test public void toGZIPInputStreamShouldReturnAByteArrayInputStream() throws IOException {     InputStream inputStream = GZIPHelper.compressGzip("text", sampleBytes).     byte[] bytes = IOConverter.toBytes(inputStream).     assertArrayEquals(sampleBytes, bytes). }
false;public;0;9;;@Test public void testCompressAndUnCompressData() throws IOException {     InputStream inputStream = GZIPHelper.compressGzip("gzip", new ByteArrayInputStream(sampleString.getBytes())).     assertNotNull("The inputStream should not be null.", inputStream).     inputStream = GZIPHelper.uncompressGzip("gzip", inputStream).     String result = IOConverter.toString(inputStream, null).     assertEquals("The result is wrong.", sampleString, result). }
false;public;0;8;;@Test public void testIsGzipMessage() {     assertTrue(GZIPHelper.isGzip(createMessageWithContentEncodingHeader("gzip"))).     assertTrue(GZIPHelper.isGzip(createMessageWithContentEncodingHeader("GZip"))).     assertFalse(GZIPHelper.isGzip(createMessageWithContentEncodingHeader(null))).     assertFalse(GZIPHelper.isGzip(createMessageWithContentEncodingHeader("zip"))). }
false;public;0;8;;@Test public void isGzipString() {     assertTrue(GZIPHelper.isGzip("gzip")).     assertTrue(GZIPHelper.isGzip("GZip")).     assertFalse(GZIPHelper.isGzip((String) null)).     assertFalse(GZIPHelper.isGzip("zip")). }
false;private;1;6;;private Message createMessageWithContentEncodingHeader(String contentEncoding) {     Message msg = new DefaultMessage(new DefaultCamelContext()).     msg.setHeader("Content-Encoding", contentEncoding).     return msg. }
