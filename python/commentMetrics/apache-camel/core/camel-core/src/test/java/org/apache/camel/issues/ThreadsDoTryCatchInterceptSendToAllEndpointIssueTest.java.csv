commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testThreadsTryCatch() throws Exception {     getMockEndpoint("mock:log:try").expectedMessageCount(1).     getMockEndpoint("mock:log:catch").expectedMessageCount(1).     getMockEndpoint("mock:log:world").expectedMessageCount(1).     getMockEndpoint("mock:log:other").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:start").threads().doTry().to("log:try").throwException(new IllegalArgumentException("Forced")).doCatch(Exception.class).to("log:catch").choice().when(body().contains("World")).to("log:world").stop().otherwise().to("log:other").stop().end().end(). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     // mock all endpoints     context.addRegisterEndpointCallback(new InterceptSendToMockEndpointStrategy("*")).     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").threads().doTry().to("log:try").throwException(new IllegalArgumentException("Forced")).doCatch(Exception.class).to("log:catch").choice().when(body().contains("World")).to("log:world").stop().otherwise().to("log:other").stop().end().end().         }     }. }
