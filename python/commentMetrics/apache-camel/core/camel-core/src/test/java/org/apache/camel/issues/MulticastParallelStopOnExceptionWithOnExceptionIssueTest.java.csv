commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new RuntimeException("Simulated Exception"). }
false;public;0;19;;@Test public void testEnd1FailureTest() throws Exception {     MockEndpoint end1 = getMockEndpoint("mock:end1").     end1.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new RuntimeException("Simulated Exception").         }     }).     // we run in parallel so the task could have been submitted so we either get 0 or 1 messages at mock:end2     getMockEndpoint("mock:end2").expectedMinimumMessageCount(0).     getMockEndpoint("mock:end3").expectedMessageCount(0).     getMockEndpoint("mock:end4").expectedMessageCount(1).     String result = template.requestBody("direct:start", "Hello World!", String.class).     assertEquals("Stop!", result).     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new RuntimeException("Simulated Exception"). }
false;public;0;19;;@Test public void testEnd2FailureTest() throws Exception {     MockEndpoint end2 = getMockEndpoint("mock:end2").     end2.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new RuntimeException("Simulated Exception").         }     }).     // we run in parallel so the task could have been submitted so we either get 0 or 1 messages at mock:end1     getMockEndpoint("mock:end1").expectedMinimumMessageCount(0).     getMockEndpoint("mock:end3").expectedMessageCount(0).     getMockEndpoint("mock:end4").expectedMessageCount(1).     String result = template.requestBody("direct:start", "Hello World!", String.class).     assertEquals("Stop!", result).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("log:onException").to("mock:end4").transform(constant("Stop!")).     from("direct:start").multicast().parallelProcessing().stopOnException().to("mock:end1", "mock:end2").end().to("mock:end3").transform(constant("Hello to you too!")). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("log:onException").to("mock:end4").transform(constant("Stop!")).             from("direct:start").multicast().parallelProcessing().stopOnException().to("mock:end1", "mock:end2").end().to("mock:end3").transform(constant("Hello to you too!")).         }     }. }
