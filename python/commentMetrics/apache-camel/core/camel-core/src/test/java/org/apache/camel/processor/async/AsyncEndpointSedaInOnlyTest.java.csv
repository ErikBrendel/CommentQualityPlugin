commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     route = "". }
false;public;0;18;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     template.sendBody("direct:start", "Hello Camel").     // we should run before the async processor that sets B     route += "A".     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)).     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(sedaThreadName)).     assertFalse("Should use different threads", afterThreadName.equalsIgnoreCase(sedaThreadName)).     assertEquals("AB", route). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     route += "B".     sedaThreadName = Thread.currentThread().getName(). }
false;public;0;31;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("mock:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("async:bye:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("seda:foo").     from("seda:foo").to("mock:after").to("log:after").delay(1000).process(new Processor() {          public void process(Exchange exchange) throws Exception {             route += "B".             sedaThreadName = Thread.currentThread().getName().         }     }).to("mock:result"). }
false;protected;0;36;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("mock:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("seda:foo").             from("seda:foo").to("mock:after").to("log:after").delay(1000).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     route += "B".                     sedaThreadName = Thread.currentThread().getName().                 }             }).to("mock:result").         }     }. }
