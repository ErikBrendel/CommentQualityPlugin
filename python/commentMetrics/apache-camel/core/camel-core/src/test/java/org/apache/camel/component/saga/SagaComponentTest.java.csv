commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testManualCompletion() throws InterruptedException {     MockEndpoint completed = getMockEndpoint("mock:completed").     completed.expectedMessageCount(1).     template.sendBody("direct:manual-workflow", "manual-complete").     completed.assertIsSatisfied(). }
false;public;0;10;;@Test public void testManualCompletionIsNotTriggeredAutomatically() throws InterruptedException {     MockEndpoint completed = getMockEndpoint("mock:completed").     completed.expectedMessageCount(1).     completed.setResultWaitTime(1000).     template.sendBody("direct:manual-workflow", "do-not-complete").     completed.assertIsNotSatisfied(). }
false;public;0;14;;@Test public void testManualCompensationIsTriggeredOnly() throws InterruptedException {     MockEndpoint completed = getMockEndpoint("mock:completed").     completed.expectedMessageCount(1).     completed.setResultWaitTime(1000).     MockEndpoint compensated = getMockEndpoint("mock:compensated").     compensated.expectedMessageCount(1).     template.sendBody("direct:manual-workflow", "manual-compensate").     completed.assertIsNotSatisfied().     compensated.assertIsSatisfied(). }
false;public;0;9;;@Test public void testAutoCompletion() throws InterruptedException {     MockEndpoint completed = getMockEndpoint("mock:completed").     completed.expectedMessageCount(1).     template.sendBody("direct:auto-workflow", "auto-complete").     completed.assertIsSatisfied(). }
false;public;0;19;;@Test public void testAutoCompensationIsTriggeredOnly() throws InterruptedException {     MockEndpoint completed = getMockEndpoint("mock:completed").     completed.expectedMessageCount(1).     completed.setResultWaitTime(1000).     MockEndpoint compensated = getMockEndpoint("mock:compensated").     compensated.expectedMessageCount(1).     try {         template.sendBody("direct:auto-workflow", "auto-compensate").         Assert.fail("Should throw an exception").     } catch (Exception ex) {     // OK     }     completed.assertIsNotSatisfied().     compensated.assertIsSatisfied(). }
false;public;0;35;;@Override public void configure() throws Exception {     context.addService(new InMemorySagaService()).     // Manual complete/compensate     from("direct:manual-workflow").saga().compensation("mock:compensated").completion("mock:completed").completionMode(SagaCompletionMode.MANUAL).to("seda:async").     from("seda:async").choice().when(body().isEqualTo(constant("manual-complete"))).to("saga:complete").when(body().isEqualTo(constant("manual-compensate"))).to("saga:compensate").end().     // Auto complete/compensate     from("direct:auto-workflow").saga().completion("mock:completed").compensation("mock:compensated").choice().when(body().isEqualTo(constant("auto-compensate"))).process(x -> {         throw new RuntimeException("mock exception").     }).end().to("seda:async"). }
false;protected;0;40;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addService(new InMemorySagaService()).             // Manual complete/compensate             from("direct:manual-workflow").saga().compensation("mock:compensated").completion("mock:completed").completionMode(SagaCompletionMode.MANUAL).to("seda:async").             from("seda:async").choice().when(body().isEqualTo(constant("manual-complete"))).to("saga:complete").when(body().isEqualTo(constant("manual-compensate"))).to("saga:compensate").end().             // Auto complete/compensate             from("direct:auto-workflow").saga().completion("mock:completed").compensation("mock:compensated").choice().when(body().isEqualTo(constant("auto-compensate"))).process(x -> {                 throw new RuntimeException("mock exception").             }).end().to("seda:async").         }     }. }
