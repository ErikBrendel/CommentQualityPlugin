commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testPropertyPlaceholder() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Camel").     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("seda:foo").policy(new MyDummyPolicy()).setBody().constant("{{cool.name}}").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").policy(new MyDummyPolicy()).setBody().constant("{{cool.name}}").to("mock:result").         }     }. }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("classpath:org/apache/camel/component/properties/myproperties.properties").     context.addComponent("properties", pc).     return context. }
false;public;2;4;;@Override public void beforeWrap(RouteContext routeContext, NamedNode definition) { // noop }
false;public;2;4;;@Override public Processor wrap(RouteContext routeContext, Processor processor) {     return processor. }
