commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;2;;protected void doStart() throws Exception { }
false;protected;0;2;;protected void doStop() throws Exception { }
false;public;0;17;;@Test public void testServiceSupport() throws Exception {     MyService service = new MyService().     service.start().     assertEquals(true, service.isStarted()).     assertEquals(false, service.isStarting()).     assertEquals(false, service.isStopped()).     assertEquals(false, service.isStopping()).     service.stop().     assertEquals(true, service.isStopped()).     assertEquals(false, service.isStopping()).     assertEquals(false, service.isStarted()).     assertEquals(false, service.isStarting()). }
false;public;0;20;;@Test public void testServiceSupportIsRunAllowed() throws Exception {     MyService service = new MyService().     assertEquals(false, service.isRunAllowed()).     service.start().     assertEquals(true, service.isRunAllowed()).     // we are allowed to run while suspending/suspended     service.suspend().     assertEquals(true, service.isRunAllowed()).     service.resume().     assertEquals(true, service.isRunAllowed()).     // but if we are stopped then we are not     service.stop().     assertEquals(false, service.isRunAllowed()).     service.shutdown().     assertEquals(false, service.isRunAllowed()). }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
false;protected;0;4;;@Override protected void doShutdown() throws Exception {     shutdown = true. }
false;public;0;3;;public boolean isShutdown() {     return shutdown. }
false;public;0;20;;@Test public void testServiceSupportShutdown() throws Exception {     MyShutdownService service = new MyShutdownService().     service.start().     assertEquals(true, service.isStarted()).     assertEquals(false, service.isStarting()).     assertEquals(false, service.isStopped()).     assertEquals(false, service.isStopping()).     assertEquals(false, service.isShutdown()).     service.shutdown().     assertEquals(true, service.isStopped()).     assertEquals(false, service.isStopping()).     assertEquals(false, service.isStarted()).     assertEquals(false, service.isStarting()).     assertEquals(true, service.isShutdown()). }
false;public;0;15;;@Test public void testExceptionOnStart() throws Exception {     ServiceSupportTestExOnStart service = new ServiceSupportTestExOnStart().     // forced not being stopped at start     assertEquals(false, service.isStopped()).     try {         service.start().         fail("RuntimeException expected").     } catch (RuntimeException e) {         assertEquals(true, service.isStopped()).         assertEquals(false, service.isStopping()).         assertEquals(false, service.isStarted()).         assertEquals(false, service.isStarting()).     } }
false;protected;0;4;;@Override protected void doStart() throws Exception {     throw new RuntimeException("This service throws an exception when starting"). }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
