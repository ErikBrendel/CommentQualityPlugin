commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testFailureRouteId() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint dead = getMockEndpoint("mock:dead").     dead.expectedMessageCount(1).     dead.expectedPropertyReceived(Exchange.FAILURE_ROUTE_ID, "bar").     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("direct:dead")).     from("direct:foo").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").to("mock:bar").throwException(new IllegalArgumentException("Forced")).     from("direct:dead").log("Failed at route ${exchangeProperty.CamelFailureRouteId}").to("mock:dead"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("direct:dead")).             from("direct:foo").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").to("mock:bar").throwException(new IllegalArgumentException("Forced")).             from("direct:dead").log("Failed at route ${exchangeProperty.CamelFailureRouteId}").to("mock:dead").         }     }. }
