commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testContinued() throws Exception {     getMockEndpoint("mock:start").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     // and we should keep the exception so we know what caused the failure     mock.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).continued(true).logContinued(true).     from("direct:start").to("mock:start").to("direct:b").to("direct:d").to("mock:result").     from("direct:b").to("mock:b").throwException(new IllegalArgumentException("Forced")).to("direct:c").     from("direct:c").to("mock:c").     from("direct:d").to("mock:d"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).continued(true).logContinued(true).             from("direct:start").to("mock:start").to("direct:b").to("direct:d").to("mock:result").             from("direct:b").to("mock:b").throwException(new IllegalArgumentException("Forced")).to("direct:c").             from("direct:c").to("mock:c").             from("direct:d").to("mock:d").         }     }. }
