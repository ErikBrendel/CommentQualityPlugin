commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testShutdownGraceful() throws Exception {     getMockEndpoint("mock:foo").expectedMinimumMessageCount(1).     getMockEndpoint("mock:bar").expectedMinimumMessageCount(1).     template.sendBody("seda:foo", "A").     template.sendBody("seda:foo", "B").     template.sendBody("seda:foo", "C").     template.sendBody("seda:foo", "D").     template.sendBody("seda:foo", "E").     template.sendBody("seda:bar", "A").     template.sendBody("seda:bar", "B").     template.sendBody("seda:bar", "C").     template.sendBody("seda:bar", "D").     template.sendBody("seda:bar", "E").     assertMockEndpointsSatisfied().     assertTrue(latch.await(10, TimeUnit.SECONDS)).     context.stop().     // it should wait as there were 2 inflight exchanges and 8 pending messages left     assertEquals("Should graceful shutdown", "ABCDE", foo).     assertEquals("Should graceful shutdown", "ABCDE", bar). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     foo = foo + exchange.getIn().getBody(String.class).     latch.countDown(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     bar = bar + exchange.getIn().getBody(String.class).     latch.countDown(). }
false;public;0;16;;@Override public void configure() throws Exception {     from("seda:foo").to("mock:foo").delay(100).syncDelayed().process(new Processor() {          public void process(Exchange exchange) throws Exception {             foo = foo + exchange.getIn().getBody(String.class).             latch.countDown().         }     }).     from("seda:bar").to("mock:bar").delay(50).syncDelayed().process(new Processor() {          public void process(Exchange exchange) throws Exception {             bar = bar + exchange.getIn().getBody(String.class).             latch.countDown().         }     }). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").to("mock:foo").delay(100).syncDelayed().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     foo = foo + exchange.getIn().getBody(String.class).                     latch.countDown().                 }             }).             from("seda:bar").to("mock:bar").delay(50).syncDelayed().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     bar = bar + exchange.getIn().getBody(String.class).                     latch.countDown().                 }             }).         }     }. }
