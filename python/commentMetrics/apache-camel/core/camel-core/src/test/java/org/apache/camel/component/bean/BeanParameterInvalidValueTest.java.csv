commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBeanParameterInvalidValueA() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:a", "World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         TypeConversionException cause = assertIsInstanceOf(TypeConversionException.class, e.getCause().getCause()).         assertEquals(String.class, cause.getFromType()).         assertEquals(int.class, cause.getToType()).         assertEquals("A", cause.getValue()).     }     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testBeanParameterInvalidValueB() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:b", "World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         TypeConversionException cause = assertIsInstanceOf(TypeConversionException.class, e.getCause().getCause()).         assertEquals(String.class, cause.getFromType()).         assertEquals(int.class, cause.getToType()).         assertEquals("true", cause.getValue()).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testBeanParameterNullC() throws Exception {     // should be an empty string     getMockEndpoint("mock:result").expectedBodiesReceived("").     template.sendBody("direct:c", "World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testBeanParameterInvalidValueD() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:d", "World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         ExpressionEvaluationException cause = assertIsInstanceOf(ExpressionEvaluationException.class, e.getCause()).         assertTrue(cause.getCause().getMessage().startsWith("Unknown function: xxx at location 0")).     }     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyBean()).     return jndi. }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:a").to("bean:foo?method=echo(*, 'A')").to("mock:result").     from("direct:b").to("bean:foo?method=echo(*, true)").to("mock:result").     from("direct:c").to("bean:foo?method=echo(null, 2)").to("mock:result").     from("direct:d").to("bean:foo?method=echo(${xxx}, 2)").to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").to("bean:foo?method=echo(*, 'A')").to("mock:result").             from("direct:b").to("bean:foo?method=echo(*, true)").to("mock:result").             from("direct:c").to("bean:foo?method=echo(null, 2)").to("mock:result").             from("direct:d").to("bean:foo?method=echo(${xxx}, 2)").to("mock:result").         }     }. }
false;public;2;16;;public String echo(String body, int times) {     if (body == null) {         // use an empty string for no body         return "".     }     if (times > 0) {         StringBuilder sb = new StringBuilder().         for (int i = 0. i < times. i++) {             sb.append(body).         }         return sb.toString().     }     return body. }
false;public;2;3;;public String heads(String body, Map<?, ?> headers) {     return headers.get("hello") + " " + body. }
