commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testAsyncEnricher() throws Exception {     template.sendBody("direct:start1", "test").     assertEquals("Get a wrong sending event number", 3, en.exchangeSendingEvent.get()).     assertEquals("Get a wrong sent event number", 3, en.exchangeSentEvent.get()). }
false;public;0;6;;@Test public void testSyncEnricher() throws Exception {     template.sendBody("direct:start2", "test").     assertEquals("Get a wrong sending event number", 3, en.exchangeSendingEvent.get()).     assertEquals("Get a wrong sent event number", 3, en.exchangeSentEvent.get()). }
false;protected;0;17;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.init().     ShutdownStrategy shutdownStrategy = camelContext.getShutdownStrategy().     camelContext.addComponent("async", new MyAsyncComponent()).     shutdownStrategy.setTimeout(1000).     shutdownStrategy.setTimeUnit(TimeUnit.MILLISECONDS).     shutdownStrategy.setShutdownNowOnTimeout(true).     ManagementStrategy managementStrategy = new DefaultManagementStrategy().     managementStrategy.addEventNotifier(en).     camelContext.setManagementStrategy(managementStrategy).     return camelContext. }
false;public;0;12;;public void configure() throws Exception {     from("direct:start1").enrich("async:out?reply=Reply").to("mock:result").     from("direct:start2").enrich("direct:result").to("mock:result").     from("direct:result").setBody(constant("result")). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start1").enrich("async:out?reply=Reply").to("mock:result").             from("direct:start2").enrich("direct:result").to("mock:result").             from("direct:result").setBody(constant("result")).         }     }. }
false;public;1;9;;@Override public void notify(CamelEvent event) throws Exception {     if (event instanceof ExchangeSendingEvent) {         exchangeSendingEvent.incrementAndGet().     } else if (event instanceof ExchangeSentEvent) {         exchangeSentEvent.incrementAndGet().     } }
