commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public Producer createProducer() throws Exception {     return null. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;28;;@Test public void testCacheEndpoints() throws Exception {     // test that we cache at most 1000 endpoints in camel context to avoid it eating to much memory     for (int i = 0. i < 1234. i++) {         String uri = "my:endpoint?id=" + i.         DefaultEndpoint e = new DefaultEndpoint() {              public Producer createProducer() throws Exception {                 return null.             }              public Consumer createConsumer(Processor processor) throws Exception {                 return null.             }              public boolean isSingleton() {                 return true.             }         }.         e.setCamelContext(context).         e.setEndpointUri(uri).         context.addEndpoint(uri, e).     }     // the eviction is async so force cleanup     context.getEndpointRegistry().cleanUp().     Collection<Endpoint> col = context.getEndpoints().     assertEquals("Size should be 1000", 1000, col.size()). }
