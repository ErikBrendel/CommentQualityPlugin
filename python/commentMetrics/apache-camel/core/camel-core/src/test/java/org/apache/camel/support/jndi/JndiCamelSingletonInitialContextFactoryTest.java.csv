commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     // use the singleton context factory     env.put(Context.INITIAL_CONTEXT_FACTORY, CamelSingletonInitialContextFactory.class.getName()).     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = new JndiRegistry(new InitialContext(env)).     jndi.bind("jdbc/myDataSource", FAKE).     return jndi. }
false;public;0;9;;@Test public void testSingletonJndiContext() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived(FAKE).     template.sendBody("direct:simple", "Dummy").     mock.assertIsSatisfied(). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     // calling this should get us the existing context     Context context = new InitialContext(env).     exchange.getIn().setBody(context.lookup("jdbc/myDataSource").toString()). }
false;public;0;13;;@Override public void configure() {     from("direct:simple").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // calling this should get us the existing context             Context context = new InitialContext(env).             exchange.getIn().setBody(context.lookup("jdbc/myDataSource").toString()).         }     }).to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() {             from("direct:simple").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // calling this should get us the existing context                     Context context = new InitialContext(env).                     exchange.getIn().setBody(context.lookup("jdbc/myDataSource").toString()).                 }             }).to("mock:result").         }     }. }
