commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/singledirectoryonly").     super.setUp(). }
false;public;0;11;;@Test public void testConsumeFileOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     template.sendBodyAndHeader("file://target/data/singledirectoryonly/2008", "2008 Report", Exchange.FILE_NAME, "report2008.txt").     template.sendBodyAndHeader("file://target/data/singledirectoryonly", "Hello World", Exchange.FILE_NAME, "report.txt").     template.sendBodyAndHeader("file://target/data/singledirectoryonly", "Bye World", Exchange.FILE_NAME, "report2.txt").     assertMockEndpointsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     from("file://target/data/singledirectoryonly/?recursive=false&delete=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/singledirectoryonly/?recursive=false&delete=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
