commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void run() {     int start = threadCount * group.     for (int i = 0. i < group. i++) {         try {             // do some random sleep to simulate spread in user activity             Thread.sleep(new Random().nextInt(10)).         } catch (InterruptedException e) {         // ignore         }         template.sendBody(uri, "" + (start + i)).     } }
false;public;0;30;;@Test public void testConcurrentPipeline() throws Exception {     int total = 200.     final int group = total / 20.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(total).     ExecutorService executor = Executors.newFixedThreadPool(20).     for (int i = 0. i < 20. i++) {         final int threadCount = i.         executor.execute(new Runnable() {              public void run() {                 int start = threadCount * group.                 for (int i = 0. i < group. i++) {                     try {                         // do some random sleep to simulate spread in user activity                         Thread.sleep(new Random().nextInt(10)).                     } catch (InterruptedException e) {                     // ignore                     }                     template.sendBody(uri, "" + (start + i)).                 }             }         }).     }     mock.assertIsSatisfied().     mock.expectsNoDuplicates(body()).     executor.shutdown(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getOut().setBody("Bye " + body). }
false;public;0;15;;public void configure() throws Exception {     // to force any exceptions coming forward immediately     errorHandler(noErrorHandler()).     from(uri).pipeline("direct:do", "mock:result").     from("direct:do").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getOut().setBody("Bye " + body).         }     }). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // to force any exceptions coming forward immediately             errorHandler(noErrorHandler()).             from(uri).pipeline("direct:do", "mock:result").             from("direct:do").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     exchange.getOut().setBody("Bye " + body).                 }             }).         }     }. }
