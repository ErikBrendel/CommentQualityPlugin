commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testDiscard() throws Exception {     SedaEndpoint bar = getMandatoryEndpoint("seda:bar", SedaEndpoint.class).     assertEquals(0, bar.getCurrentQueueSize()).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(0, bar.getCurrentQueueSize()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.addOnCompletion(myCompletion). }
false;public;0;23;;@Test public void testDiscardUoW() throws Exception {     SedaEndpoint bar = getMandatoryEndpoint("seda:bar", SedaEndpoint.class).     assertEquals(0, bar.getCurrentQueueSize()).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     final MyCompletion myCompletion = new MyCompletion().     template.send("direct:start", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.addOnCompletion(myCompletion).         }     }).     assertMockEndpointsSatisfied().     assertEquals(0, bar.getCurrentQueueSize()).     assertEquals(true, myCompletion.isCalled()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("seda:bar?discardIfNoConsumers=true").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("seda:bar?discardIfNoConsumers=true").to("mock:result").         }     }. }
false;public;1;4;;@Override public void onDone(Exchange exchange) {     called = true. }
false;public;0;3;;public boolean isCalled() {     return called. }
