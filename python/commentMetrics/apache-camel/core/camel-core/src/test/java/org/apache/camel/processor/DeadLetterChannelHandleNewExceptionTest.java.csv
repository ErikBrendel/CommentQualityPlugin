commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// should not log any exceptions in the log as they are all handled @Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;9;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").deadLetterHandleNewException(true)).     from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")). }
false;public;0;21;;@Test public void testDeadLetterChannelHandleNewException() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").deadLetterHandleNewException(true)).             from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")).         }     }).     context.start().     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").deadLetterHandleNewException(false)).     from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")). }
false;public;0;21;;@Test public void testDeadLetterChannelNotHandleNewException() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").deadLetterHandleNewException(false)).             from("direct:start").log("Incoming ${body}").throwException(new IllegalArgumentException("Forced")).         }     }).     context.start().     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
