commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     order.add("START:1").     super.process(exchange).     order.add("END:1"). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     order.add("START:2").     super.process(exchange).     order.add("END:2"). }
false;public;1;3;;public void process(Exchange exchange) {     order.add("INVOKED"). }
false;public;1;3;;public void process(Exchange exchange) {     order.add("INVOKED2"). }
false;public;1;3;;public void process(Exchange exchange) {     order.add("INVOKED3"). }
false;public;1;3;;public void process(Exchange exchange) {     order.add("TO"). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     order.add("VALIDATE").     Object value = exchange.getIn().getHeader("foo").     if (value == null) {         throw new IllegalArgumentException("The foo header is not present.").     } else if (!value.equals("bar")) {         throw new ValidationException(exchange, "The foo header does not equal bar! Was: " + value).     } }
false;protected;2;3;;protected void runTest(RouteBuilder builder, List<String> expected) throws Exception {     runTest(builder, expected, null). }
false;protected;3;23;;protected void runTest(RouteBuilder builder, List<String> expected, String header) throws Exception {     order.clear().     DefaultCamelContext container = new DefaultCamelContext(false).     container.disableJMX().     container.init().     container.addRoutes(builder).     container.start().     Endpoint endpoint = container.getEndpoint("direct:a").     Exchange exchange = endpoint.createExchange().     if (header != null) {         exchange.getIn().setHeader("foo", header).     }     Producer producer = endpoint.createProducer().     producer.process(exchange).     log.debug("Invocation order:" + order).     assertEquals(expected, order).     container.stop(). }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     from("direct:a").filter(header("foo").isEqualTo("bar")).process(orderProcessor).end().process(toProcessor). }
false;public;0;14;;@Test public void testRouteWithFilterEnd() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("TO").     runTest(new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             from("direct:a").filter(header("foo").isEqualTo("bar")).process(orderProcessor).end().process(toProcessor).         }     }, expected, "banana"). }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     from("direct:a").filter(header("foo").isEqualTo("bar")).process(orderProcessor).process(toProcessor). }
false;public;0;13;;@Test public void testRouteWithFilterNoEnd() throws Exception {     List<String> expected = new ArrayList<>().     runTest(new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             from("direct:a").filter(header("foo").isEqualTo("bar")).process(orderProcessor).process(toProcessor).         }     }, expected, "banana"). }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).end().process(toProcessor). }
false;protected;0;11;;protected RouteBuilder createChoiceBuilder() {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).end().process(toProcessor).         }     }. }
false;public;0;8;;@Test public void testRouteWithChoice1() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED").     expected.add("TO").     runTest(createChoiceBuilder(), expected, "bar"). }
false;public;0;8;;@Test public void testRouteWithChoice2() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED2").     expected.add("TO").     runTest(createChoiceBuilder(), expected, "cheese"). }
false;public;0;7;;@Test public void testRouteWithChoice3() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("TO").     runTest(createChoiceBuilder(), expected, "banana"). }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).process(// continuation of the second when clause     toProcessor). }
false;public;0;14;;@Test public void testRouteWithChoiceNoEnd() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED").     runTest(new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).process(// continuation of the second when clause             toProcessor).         }     }, expected, "bar"). }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).otherwise().process(orderProcessor3).end().process(toProcessor). }
false;protected;0;11;;protected RouteBuilder createChoiceWithOtherwiseBuilder() {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).otherwise().process(orderProcessor3).end().process(toProcessor).         }     }. }
false;public;0;8;;@Test public void testRouteWithChoiceOtherwise1() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED").     expected.add("TO").     runTest(createChoiceWithOtherwiseBuilder(), expected, "bar"). }
false;public;0;8;;@Test public void testRouteWithChoiceOtherwise2() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED2").     expected.add("TO").     runTest(createChoiceWithOtherwiseBuilder(), expected, "cheese"). }
false;public;0;7;;@Test public void testRouteWithChoiceOtherwise3() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED3").     expected.add("TO").     runTest(createChoiceWithOtherwiseBuilder(), expected, "banana"). }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).otherwise().process(orderProcessor3).process(// continuation of the otherwise clause     toProcessor). }
false;public;0;15;;@Test public void testRouteWithChoiceOtherwiseNoEnd() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("INVOKED").     runTest(new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             from("direct:a").choice().when(header("foo").isEqualTo("bar")).process(orderProcessor).when(header("foo").isEqualTo("cheese")).process(orderProcessor2).otherwise().process(orderProcessor3).process(// continuation of the otherwise clause             toProcessor).         }     }, expected, "bar"). }
false;public;0;10;;public void configure() {     from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).process(orderProcessor3).end(). }
false;protected;0;14;;protected RouteBuilder createTryCatchNoEnd() {     return new RouteBuilder() {          public void configure() {             from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).process(orderProcessor3).end().         }     }. }
false;public;0;8;;@Test public void testRouteWithTryCatchNoEndNoException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("TO").     runTest(createTryCatchNoEnd(), expected, "bar"). }
false;public;0;9;;@Test public void testRouteWithTryCatchNoEndWithCaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("INVOKED").     expected.add("INVOKED3").     runTest(createTryCatchNoEnd(), expected, "banana"). }
false;public;0;7;;@Test public void testRouteWithTryCatchNoEndWithUncaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     runTest(createTryCatchNoEnd(), expected). }
false;public;0;4;;public void configure() {     from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).end().process(orderProcessor3). }
false;protected;0;8;;protected RouteBuilder createTryCatchEnd() {     return new RouteBuilder() {          public void configure() {             from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).end().process(orderProcessor3).         }     }. }
false;public;0;9;;@Test public void testRouteWithTryCatchEndNoException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("TO").     expected.add("INVOKED3").     runTest(createTryCatchEnd(), expected, "bar"). }
false;public;0;9;;@Test public void testRouteWithTryCatchEndWithCaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("INVOKED").     expected.add("INVOKED3").     runTest(createTryCatchEnd(), expected, "banana"). }
false;public;0;7;;@Test public void testRouteWithTryCatchEndWithUncaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     runTest(createTryCatchEnd(), expected). }
false;public;0;5;;public void configure() {     from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).doFinally().process(orderProcessor2).process(// continuation of the finallyBlock clause     orderProcessor3). }
false;protected;0;9;;protected RouteBuilder createTryCatchFinallyNoEnd() {     return new RouteBuilder() {          public void configure() {             from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).doFinally().process(orderProcessor2).process(// continuation of the finallyBlock clause             orderProcessor3).         }     }. }
false;public;0;10;;@Test public void testRouteWithTryCatchFinallyNoEndNoException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("TO").     expected.add("INVOKED2").     expected.add("INVOKED3").     runTest(createTryCatchFinallyNoEnd(), expected, "bar"). }
false;public;0;10;;@Test public void testRouteWithTryCatchFinallyNoEndWithCaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("INVOKED").     expected.add("INVOKED2").     expected.add("INVOKED3").     runTest(createTryCatchFinallyNoEnd(), expected, "banana"). }
false;public;0;9;;@Test public void testRouteWithTryCatchFinallyNoEndWithUncaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("INVOKED2").     expected.add("INVOKED3").     runTest(createTryCatchFinallyNoEnd(), expected). }
false;public;0;5;;public void configure() {     from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).doFinally().process(orderProcessor2).end().process(orderProcessor3). }
false;protected;0;9;;protected RouteBuilder createTryCatchFinallyEnd() {     return new RouteBuilder() {          public void configure() {             from("direct:a").doTry().process(validator).process(toProcessor).doCatch(ValidationException.class).process(orderProcessor).doFinally().process(orderProcessor2).end().process(orderProcessor3).         }     }. }
false;public;0;10;;@Test public void testRouteWithTryCatchFinallyEndNoException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("TO").     expected.add("INVOKED2").     expected.add("INVOKED3").     runTest(createTryCatchFinallyEnd(), expected, "bar"). }
false;public;0;10;;@Test public void testRouteWithTryCatchFinallyEndWithCaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("INVOKED").     expected.add("INVOKED2").     expected.add("INVOKED3").     runTest(createTryCatchFinallyEnd(), expected, "banana"). }
false;public;0;8;;@Test public void testRouteWithTryCatchFinallyEndWithUncaughtException() throws Exception {     List<String> expected = new ArrayList<>().     expected.add("VALIDATE").     expected.add("INVOKED2").     runTest(createTryCatchFinallyEnd(), expected). }
