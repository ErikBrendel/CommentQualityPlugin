commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised"). }
false;public;0;20;;@Test public void testAdvised() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("myRoute"), context, new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:foo").skipSendToOriginalEndpoint().to("log:foo").to("mock:advised").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:advised").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").to("mock:foo").to("mock:result").     from("direct:bar").to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").to("mock:foo").to("mock:result").             from("direct:bar").to("mock:bar").         }     }. }
