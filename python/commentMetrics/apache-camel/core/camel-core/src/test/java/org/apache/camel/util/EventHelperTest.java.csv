commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void configure() throws Exception {     from("direct:start").routeId("route-1").to("mock:end"). }
false;public;0;28;;@Test public void testStartStopEventsReceived() throws Exception {     MyEventNotifier en1 = new MyEventNotifier().     MyEventNotifier en2 = new MyEventNotifier().     CamelContext camelContext = new DefaultCamelContext().     camelContext.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").routeId("route-1").to("mock:end").         }     }).     camelContext.getManagementStrategy().addEventNotifier(en1).     camelContext.getManagementStrategy().addEventNotifier(en2).     camelContext.start().     camelContext.stop().     assertEquals(1, en1.routeStartedEvent.get()).     assertEquals(1, en1.routeStoppedEvent.get()).     assertEquals(1, en1.camelContextStoppingEvent.get()).     assertEquals(1, en2.routeStartedEvent.get()).     assertEquals(1, en2.routeStoppedEvent.get()).     assertEquals(1, en2.camelContextStoppingEvent.get()). }
false;public;0;4;;public void configure() throws Exception {     from("direct:start").routeId("route-1").to("mock:end"). }
false;public;0;30;;@Test public void testStartStopEventsReceivedWhenTheFirstOneIgnoreTheseEvents() throws Exception {     MyEventNotifier en1 = new MyEventNotifier().     en1.setIgnoreRouteEvents(true).     en1.setIgnoreCamelContextEvents(true).     MyEventNotifier en2 = new MyEventNotifier().     CamelContext camelContext = new DefaultCamelContext().     camelContext.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").routeId("route-1").to("mock:end").         }     }).     camelContext.getManagementStrategy().addEventNotifier(en1).     camelContext.getManagementStrategy().addEventNotifier(en2).     camelContext.start().     camelContext.stop().     assertEquals(0, en1.routeStartedEvent.get()).     assertEquals(0, en1.routeStoppedEvent.get()).     assertEquals(0, en1.camelContextStoppingEvent.get()).     assertEquals(1, en2.routeStartedEvent.get()).     assertEquals(1, en2.routeStoppedEvent.get()).     assertEquals(1, en2.camelContextStoppingEvent.get()). }
false;public;0;4;;public void configure() throws Exception {     from("direct:start").routeId("route-1").to("mock:end"). }
false;public;0;30;;@Test public void testStartStopEventsReceivedWhenTheSecondOneIgnoreTheseEvents() throws Exception {     MyEventNotifier en1 = new MyEventNotifier().     MyEventNotifier en2 = new MyEventNotifier().     en2.setIgnoreRouteEvents(true).     en2.setIgnoreCamelContextEvents(true).     CamelContext camelContext = new DefaultCamelContext().     camelContext.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").routeId("route-1").to("mock:end").         }     }).     camelContext.getManagementStrategy().addEventNotifier(en1).     camelContext.getManagementStrategy().addEventNotifier(en2).     camelContext.start().     camelContext.stop().     assertEquals(1, en1.routeStartedEvent.get()).     assertEquals(1, en1.routeStoppedEvent.get()).     assertEquals(1, en1.camelContextStoppingEvent.get()).     assertEquals(0, en2.routeStartedEvent.get()).     assertEquals(0, en2.routeStoppedEvent.get()).     assertEquals(0, en2.camelContextStoppingEvent.get()). }
false;public;1;10;;@Override public void notify(CamelEvent event) throws Exception {     if (event.getType() == Type.RouteStarted) {         routeStartedEvent.incrementAndGet().     } else if (event.getType() == Type.RouteStopped) {         routeStoppedEvent.incrementAndGet().     } else if (event.getType() == Type.CamelContextStopping) {         camelContextStoppingEvent.incrementAndGet().     } }
false;public;1;4;;@Override public boolean isEnabled(CamelEvent event) {     return true. }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
