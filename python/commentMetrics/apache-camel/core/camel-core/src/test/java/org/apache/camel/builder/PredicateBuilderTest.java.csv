commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testRegexPredicates() throws Exception {     assertMatches(header("location").regex("[a-zA-Z]+,London,UK")).     assertDoesNotMatch(header("location").regex("[a-zA-Z]+,Westminster,[a-zA-Z]+")). }
false;public;0;8;;@Test public void testPredicates() throws Exception {     assertMatches(header("name").isEqualTo(constant("James"))).     assertMatches(not(header("name").isEqualTo(constant("Claus")))).     assertMatches(header("size").isEqualTo(10)).     assertMatches(header("size").isEqualTo("10")). }
false;public;0;6;;@Test public void testFailingPredicates() throws Exception {     assertDoesNotMatch(header("name").isEqualTo(constant("Hiram"))).     assertDoesNotMatch(header("size").isGreaterThan(constant(100))).     assertDoesNotMatch(not(header("size").isLessThan(constant(100)))). }
false;public;0;8;;@Test public void testCompoundOrPredicates() throws Exception {     Predicate p1 = header("name").isEqualTo(constant("Hiram")).     Predicate p2 = header("size").isGreaterThanOrEqualTo(constant(10)).     Predicate or = PredicateBuilder.or(p1, p2).     assertMatches(or). }
false;public;0;8;;@Test public void testCompoundAndPredicates() throws Exception {     Predicate p1 = header("name").isEqualTo(constant("James")).     Predicate p2 = header("size").isGreaterThanOrEqualTo(constant(10)).     Predicate and = PredicateBuilder.and(p1, p2).     assertMatches(and). }
false;public;0;9;;@Test public void testCompoundAndPredicatesVarargs() throws Exception {     Predicate p1 = header("name").isEqualTo(constant("James")).     Predicate p2 = header("size").isGreaterThanOrEqualTo(constant(10)).     Predicate p3 = header("location").contains(constant("London")).     Predicate and = PredicateBuilder.and(p1, p2, p3).     assertMatches(and). }
false;public;0;18;;@Test public void testOrSignatures() throws Exception {     Predicate p1 = header("name").isEqualTo(constant("does-not-apply")).     Predicate p2 = header("size").isGreaterThanOrEqualTo(constant(10)).     Predicate p3 = header("location").contains(constant("does-not-apply")).     // check method signature with two parameters     assertMatches(PredicateBuilder.or(p1, p2)).     assertMatches(PredicateBuilder.or(p2, p3)).     // check method signature with varargs     assertMatches(PredicateBuilder.in(p1, p2, p3)).     assertMatches(PredicateBuilder.or(p1, p2, p3)).     // maybe a list of predicates?     assertMatches(PredicateBuilder.in(Arrays.asList(p1, p2, p3))).     assertMatches(PredicateBuilder.or(Arrays.asList(p1, p2, p3))). }
false;public;0;10;;@Test public void testCompoundAndOrPredicates() throws Exception {     Predicate p1 = header("name").isEqualTo(constant("Hiram")).     Predicate p2 = header("size").isGreaterThan(constant(100)).     Predicate p3 = header("location").contains("London").     Predicate and = PredicateBuilder.and(p1, p2).     Predicate andor = PredicateBuilder.or(and, p3).     assertMatches(andor). }
false;public;0;4;;@Test public void testPredicateIn() throws Exception {     assertMatches(in(header("name").isEqualTo("Hiram"), header("name").isEqualTo("James"))). }
false;public;0;4;;@Test public void testValueIn() throws Exception {     assertMatches(header("name").in("Hiram", "Jonathan", "James", "Claus")). }
false;public;0;5;;@Test public void testEmptyHeaderValueIn() throws Exception {     // there is no header with xxx     assertDoesNotMatch(header("xxx").in("Hiram", "Jonathan", "James", "Claus")). }
false;public;0;16;;@Test public void testStartsWith() throws Exception {     assertMatches(header("name").startsWith("J")).     assertMatches(header("name").startsWith("James")).     assertDoesNotMatch(header("name").startsWith("C")).     assertMatches(header("size").startsWith("1")).     assertMatches(header("size").startsWith("10")).     assertDoesNotMatch(header("size").startsWith("99")).     assertDoesNotMatch(header("size").startsWith("9")).     assertMatches(header("size").startsWith(1)).     assertMatches(header("size").startsWith(10)).     assertDoesNotMatch(header("size").startsWith(99)).     assertDoesNotMatch(header("size").startsWith(9)). }
false;public;0;16;;@Test public void testEndsWith() throws Exception {     assertMatches(header("name").endsWith("mes")).     assertMatches(header("name").endsWith("James")).     assertDoesNotMatch(header("name").endsWith("world")).     assertMatches(header("size").endsWith("0")).     assertMatches(header("size").endsWith("10")).     assertDoesNotMatch(header("size").endsWith("99")).     assertDoesNotMatch(header("size").endsWith("9")).     assertMatches(header("size").endsWith(0)).     assertMatches(header("size").endsWith(10)).     assertDoesNotMatch(header("size").endsWith(99)).     assertDoesNotMatch(header("size").endsWith(9)). }
false;public;0;13;;@Test public void testNot() throws Exception {     assertMatches(body().not().isInstanceOf(Integer.class)).     assertMatches(header("name").not().isEqualTo("Claus")).     assertMatches(header("size").not().isLessThan(7)).     try {         assertMatches(header("name").not().isEqualTo("James")).         fail("Should fail").     } catch (AssertionError e) {     // expected     } }
false;public;0;10;;@Override @Before public void setUp() throws Exception {     super.setUp().     Message in = exchange.getIn().     in.setBody("Hello there!").     in.setHeader("name", "James").     in.setHeader("location", "Islington,London,UK").     in.setHeader("size", 10). }
false;protected;1;3;;protected void assertMatches(Predicate predicate) {     assertPredicateMatches(predicate, exchange). }
false;protected;1;3;;protected void assertDoesNotMatch(Predicate predicate) {     assertPredicateDoesNotMatch(predicate, exchange). }
