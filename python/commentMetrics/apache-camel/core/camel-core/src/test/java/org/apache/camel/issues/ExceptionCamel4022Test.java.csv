commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testExceptionWithFatalException() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:intermediate").expectedMessageCount(0).     getMockEndpoint("mock:onexception").expectedMessageCount(0).     getMockEndpoint("mock:dlc").expectedMessageCount(0).     try {         template.sendBody("direct:start", "<body/>").         fail("Should throw an exception").     } catch (Exception e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Damn Again", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException(msg). }
false;public;0;23;;public void configure() {     // DLC     errorHandler(deadLetterChannel("mock:dlc").redeliveryDelay(0).maximumRedeliveries(3)).     // onException that does NOT handle the exception     onException(Exception.class).logStackTrace(false).process(new MyExceptionThrower("Damn Again")).to("mock:onexception").     // route     from("direct:start").to("mock:a").to("direct:intermediate").to("mock:result2").     // 2nd route     from("direct:intermediate").to("mock:b").setBody(constant("<some-value/>")).process(new MyExceptionThrower("Damn")).to("mock:intermediate"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // DLC             errorHandler(deadLetterChannel("mock:dlc").redeliveryDelay(0).maximumRedeliveries(3)).             // onException that does NOT handle the exception             onException(Exception.class).logStackTrace(false).process(new MyExceptionThrower("Damn Again")).to("mock:onexception").             // route             from("direct:start").to("mock:a").to("direct:intermediate").to("mock:result2").             // 2nd route             from("direct:intermediate").to("mock:b").setBody(constant("<some-value/>")).process(new MyExceptionThrower("Damn")).to("mock:intermediate").         }     }. }
