commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("foo", new MyBean("foo")).     answer.bind("bar", new MyBean("bar")).     return answer. }
false;public;0;4;;@Test public void testReceivesFooResponse() throws Exception {     assertRespondsWith("foo", "Bye said foo"). }
false;public;0;4;;@Test public void testReceivesBarResponse() throws Exception {     assertRespondsWith("bar", "Bye said bar"). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Message in = exchange.getIn().     in.setBody("answer").     in.setHeader("cheese", value). }
false;protected;2;15;;protected void assertRespondsWith(final String value, String containedText) throws InvalidPayloadException {     Exchange response = template.request("direct:a", new Processor() {          public void process(Exchange exchange) throws Exception {             Message in = exchange.getIn().             in.setBody("answer").             in.setHeader("cheese", value).         }     }).     assertNotNull("Should receive a response!", response).     String text = response.getOut().getMandatoryBody(String.class).     assertStringContains(text, containedText). }
false;public;0;6;;public void configure() {     // START SNIPPET: example     from("direct:a").recipientList(simple("bean:${in.header.cheese}")). // END SNIPPET: example }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:a").recipientList(simple("bean:${in.header.cheese}")).         // END SNIPPET: example         }     }. }
false;public;1;3;;public String doSomething(String in) {     return "Bye said " + value. }
