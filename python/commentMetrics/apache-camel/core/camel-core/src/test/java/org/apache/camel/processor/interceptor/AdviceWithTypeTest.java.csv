commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     weaveByType(SplitDefinition.class).replace().to("mock:xxx"). }
false;public;0;14;;@Test public void testUnknownType() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 weaveByType(SplitDefinition.class).replace().to("mock:xxx").             }         }).         fail("Should hve thrown exception").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage(), e.getMessage().startsWith("There are no outputs which matches: SplitDefinition in the route")).     } }
false;public;0;6;;@Override public void configure() throws Exception {     // weave by type in the route     // and replace it with the following route path     weaveByType(LogDefinition.class).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testReplace() throws Exception {     // START SNIPPET: e1     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave by type in the route             // and replace it with the following route path             weaveByType(LogDefinition.class).replace().multicast().to("mock:a").to("mock:b").         }     }).     // END SNIPPET: e1     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // weave the type in the route and remove it     weaveByType(TransformDefinition.class).remove(). }
false;public;0;18;;@Test public void testRemove() throws Exception {     // START SNIPPET: e2     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the type in the route and remove it             weaveByType(TransformDefinition.class).remove().         }     }).     // END SNIPPET: e2     getMockEndpoint("mock:result").expectedBodiesReceived("World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     // weave the type in the route and remove it     // and insert the following route path before the adviced node     weaveByType(ToDefinition.class).before().transform(constant("Bye World")). }
false;public;0;19;;@Test public void testBefore() throws Exception {     // START SNIPPET: e3     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the type in the route and remove it             // and insert the following route path before the adviced node             weaveByType(ToDefinition.class).before().transform(constant("Bye World")).         }     }).     // END SNIPPET: e3     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     // weave the type in the route and remove it     // and insert the following route path after the adviced node     weaveByType(ToDefinition.class).after().transform(constant("Bye World")). }
false;public;0;20;;@Test public void testAfter() throws Exception {     // START SNIPPET: e4     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the type in the route and remove it             // and insert the following route path after the adviced node             weaveByType(ToDefinition.class).after().transform(constant("Bye World")).         }     }).     // END SNIPPET: e4     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     Object out = template.requestBody("direct:start", "World").     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e5     from("direct:start").transform(simple("Hello ${body}")).log("Got ${body}").to("mock:result"). // END SNIPPET: e5 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e5             from("direct:start").transform(simple("Hello ${body}")).log("Got ${body}").to("mock:result").         // END SNIPPET: e5         }     }. }
