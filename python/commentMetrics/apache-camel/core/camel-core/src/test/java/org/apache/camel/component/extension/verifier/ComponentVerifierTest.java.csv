commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testGetErrorDetails() {     VerificationError error = ResultErrorBuilder.withCodeAndDescription(VerificationError.asCode("test_code"), "test error desc").detail(VerificationError.asAttribute("test_attr_1"), "test_detail_1").detail(VerificationError.HttpAttribute.HTTP_CODE, "test_detail_2").build().     Assert.assertEquals("test_detail_1", error.getDetail(VerificationError.asAttribute("test_attr_1"))).     Assert.assertEquals("test_detail_1", error.getDetail("test_attr_1")).     Assert.assertEquals("test_detail_2", error.getDetail(VerificationError.HttpAttribute.HTTP_CODE)).     Assert.assertNull(error.getDetail(VerificationError.HttpAttribute.HTTP_TEXT)).     Assert.assertNull(error.getDetail(VerificationError.asAttribute("test_attr_non_existant"))). }
false;public;0;9;;@Test public void testNullCode() {     try {         VerificationError.asCode(null).         fail("Code must not be null").     } catch (IllegalArgumentException exp) {         Assert.assertTrue(exp.getMessage().contains("null")).     } }
false;public;0;9;;@Test public void testNullAttribute() {     try {         VerificationError.asAttribute(null).         fail("Attribute must not be null").     } catch (IllegalArgumentException exp) {         Assert.assertTrue(exp.getMessage().contains("null")).     } }
false;public;0;10;;@Test public void testScopeFromString() {     Assert.assertEquals(ComponentVerifierExtension.Scope.PARAMETERS, ComponentVerifierExtension.Scope.fromString("PaRaMeTeRS")).     try {         ComponentVerifierExtension.Scope.fromString("unknown").         fail().     } catch (IllegalArgumentException exp) {     } }
