commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory(TARGET_DIR_NAME).     super.setUp(). }
false;public;0;14;;@Test public void testSimpleDynamicDoneFileNameContainingTwoDots() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(1).create().     getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("input-body").     template.sendBodyAndHeader("file:" + TARGET_DIR_NAME, "input-body", Exchange.FILE_NAME, "test.twodot.txt").     template.sendBodyAndHeader("file:" + TARGET_DIR_NAME, "done-body", Exchange.FILE_NAME, "test.twodot.done").     assertMockEndpointsSatisfied().     assertTrue(notify.matchesMockWaitTime()).     assertFalse("Input file should be deleted", new File(TARGET_DIR_NAME, "test.twodot.txt").exists()).     assertFalse("Done file should be deleted", new File(TARGET_DIR_NAME, "test.twodot.done").exists()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file:" + TARGET_DIR_NAME + "?doneFileName=$simple{file:name.noext}.done&initialDelay=0").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:" + TARGET_DIR_NAME + "?doneFileName=$simple{file:name.noext}.done&initialDelay=0").to("mock:result").         }     }. }
