commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testLimitedPollingConsumerPollStrategy() throws Exception {     Exception expectedException = new Exception("Hello").     strategy = new LimitedPollingConsumerPollStrategy().     strategy.setLimit(3).     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(strategy).     consumer.start().     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should be suspended", consumer.isSuspended()).     consumer.stop(). }
false;public;0;20;;@Test public void testLimitAtTwoLimitedPollingConsumerPollStrategy() throws Exception {     Exception expectedException = new Exception("Hello").     strategy = new LimitedPollingConsumerPollStrategy().     strategy.setLimit(2).     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(strategy).     consumer.start().     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should be suspended", consumer.isSuspended()).     consumer.stop(). }
false;public;0;27;;@Test public void testLimitedPollingConsumerPollStrategySuccess() throws Exception {     Exception expectedException = new Exception("Hello").     strategy = new LimitedPollingConsumerPollStrategy().     strategy.setLimit(3).     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(strategy).     consumer.start().     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     // now force success     consumer.setExceptionToThrowOnPoll(null).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.stop(). }
false;public;0;37;;@Test public void testLimitedPollingConsumerPollStrategySuccessThenFail() throws Exception {     Exception expectedException = new Exception("Hello").     strategy = new LimitedPollingConsumerPollStrategy().     strategy.setLimit(3).     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(strategy).     consumer.start().     // fail 2 times     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     // now force success 2 times     consumer.setExceptionToThrowOnPoll(null).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     // now fail again, after hitting limit at 3     consumer.setExceptionToThrowOnPoll(expectedException).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should be suspended", consumer.isSuspended()).     consumer.stop(). }
false;public;0;33;;@Test public void testTwoConsumersLimitedPollingConsumerPollStrategy() throws Exception {     Exception expectedException = new Exception("Hello").     strategy = new LimitedPollingConsumerPollStrategy().     strategy.setLimit(3).     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(strategy).     MockScheduledPollConsumer consumer2 = new MockScheduledPollConsumer(endpoint, null).     consumer2.setPollStrategy(strategy).     consumer.start().     consumer2.start().     consumer.run().     consumer2.run().     assertTrue("Should still be started", consumer.isStarted()).     assertTrue("Should still be started", consumer2.isStarted()).     consumer.run().     consumer2.run().     assertTrue("Should still be started", consumer.isStarted()).     assertTrue("Should still be started", consumer2.isStarted()).     consumer.run().     consumer2.run().     assertTrue("Should be suspended", consumer.isSuspended()).     assertTrue("Should still be started", consumer2.isStarted()).     consumer.stop().     consumer2.stop(). }
false;public;0;45;;@Test public void testRestartManuallyLimitedPollingConsumerPollStrategy() throws Exception {     Exception expectedException = new Exception("Hello").     strategy = new LimitedPollingConsumerPollStrategy().     strategy.setLimit(3).     final Endpoint endpoint = getMockEndpoint("mock:foo").     MockScheduledPollConsumer consumer = new MockScheduledPollConsumer(endpoint, expectedException).     consumer.setPollStrategy(strategy).     consumer.start().     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should be suspended", consumer.isSuspended()).     // now start the consumer again     ServiceHelper.resumeService(consumer).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should be suspended", consumer.isSuspended()).     // now start the consumer again     ServiceHelper.resumeService(consumer).     // and let it succeed     consumer.setExceptionToThrowOnPoll(null).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.run().     assertTrue("Should still be started", consumer.isStarted()).     consumer.stop(). }
