commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/input").     super.setUp(). }
false;public;0;9;;@Test public void testMove() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedFileExists("target/data/input/target/data/input.bak/somedate/hello.txt").     template.sendBodyAndHeader("file:target/data/input", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testMoveFailed() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedFileExists("target/data/input/target/data/input.err/somedate/bomb.txt").     template.sendBodyAndHeader("file:target/data/input", "Kaboom", Exchange.FILE_NAME, "bomb.txt").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("file:./target/data/input?move=${file:parent}.bak/somedate/${file:onlyname}&moveFailed=${file:parent}.err/somedate/${file:onlyname}&initialDelay=0&delay=10").convertBodyTo(String.class).filter(body().contains("Kaboom")).throwException(new IllegalArgumentException("Forced")).end().to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:./target/data/input?move=${file:parent}.bak/somedate/${file:onlyname}&moveFailed=${file:parent}.err/somedate/${file:onlyname}&initialDelay=0&delay=10").convertBodyTo(String.class).filter(body().contains("Kaboom")).throwException(new IllegalArgumentException("Forced")).end().to("mock:result").         }     }. }
