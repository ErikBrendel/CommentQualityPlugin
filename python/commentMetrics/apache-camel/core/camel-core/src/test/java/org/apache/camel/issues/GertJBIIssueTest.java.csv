commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;10;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dlc").maximumRedeliveries(0)).     from("direct:start").threads(2).to("mock:done").throwException(new IllegalArgumentException("Forced")). }
false;public;0;23;;@Test public void testSimulateJBIEndpointFail() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dlc").maximumRedeliveries(0)).             from("direct:start").threads(2).to("mock:done").throwException(new IllegalArgumentException("Forced")).         }     }).     context.start().     getMockEndpoint("mock:done").expectedMessageCount(1).     getMockEndpoint("mock:dlc").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").threads(2).to("mock:done").throwException(new IllegalArgumentException("Forced")). }
false;public;1;5;;@Override public void onDone(Exchange exchange) {     cause = exchange.getException().     latch.countDown(). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     exchange.addOnCompletion(new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             cause = exchange.getException().             latch.countDown().         }     }). }
false;public;0;37;;@Test public void testSimulateJBIEndpointNotExistOnCompletion() throws Exception {     cause = null.     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").threads(2).to("mock:done").throwException(new IllegalArgumentException("Forced")).         }     }).     context.start().     getMockEndpoint("mock:done").expectedMessageCount(1).     final CountDownLatch latch = new CountDownLatch(1).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.addOnCompletion(new SynchronizationAdapter() {                  @Override                 public void onDone(Exchange exchange) {                     cause = exchange.getException().                     latch.countDown().                 }             }).         }     }).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     assertNotNull("Should have failed", cause).     assertIsInstanceOf(IllegalArgumentException.class, cause).     assertEquals("Forced", cause.getMessage()). }
