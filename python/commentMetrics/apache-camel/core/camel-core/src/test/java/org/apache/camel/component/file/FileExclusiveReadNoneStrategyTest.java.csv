commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/exclusiveread").     createDirectory("target/data/exclusiveread/slowfile").     super.setUp(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("seda:start").process(new MySlowFileProcessor()).     from(fileUrl + "&readLockTimeout=500").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").process(new MySlowFileProcessor()).             from(fileUrl + "&readLockTimeout=500").to("mock:result").         }     }. }
false;public;0;14;;@Test public void testPollFileWhileSlowFileIsBeingWritten() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // send a message to seda:start to trigger the creating of the slowfile to poll     template.sendBody("seda:start", "Create the slow file").     mock.assertIsSatisfied().     String body = mock.getReceivedExchanges().get(0).getIn().getBody(String.class).     LOG.debug("Body is: " + body).     assertFalse("Should not wait and read the entire file", body.endsWith("Bye World")). }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     LOG.info("Creating a slow file with no locks...").     File file = new File("target/data/exclusiveread/slowfile/hello.txt").     FileOutputStream fos = new FileOutputStream(file).     fos.write("Hello World".getBytes()).     for (int i = 0. i < 3. i++) {         Thread.sleep(100).         fos.write(("Line #" + i).getBytes()).         LOG.info("Appending to slowfile").     }     fos.write("Bye World".getBytes()).     fos.close().     LOG.info("... done creating slowfile"). }
