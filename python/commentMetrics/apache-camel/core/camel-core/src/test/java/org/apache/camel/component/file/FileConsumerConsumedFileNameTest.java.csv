commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/consumedfilename").     super.setUp(). }
false;public;0;12;;@Test public void testValidFilenameOnExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(Exchange.FILE_NAME).isEqualTo("hello.txt").     mock.message(0).header(Exchange.FILE_NAME_CONSUMED).isEqualTo("hello.txt").     // the file name is also starting with target/data/consumedfilename     template.sendBodyAndHeader("file:target/data/consumedfilename", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file:target/data/consumedfilename?initialDelay=0&delay=10").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/consumedfilename?initialDelay=0&delay=10").to("mock:result").         }     }. }
