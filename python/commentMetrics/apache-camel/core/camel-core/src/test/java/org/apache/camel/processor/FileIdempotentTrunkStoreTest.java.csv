commented;modifiers;parameterAmount;loc;comment;code
false;public;0;34;;@Test public void testTrunkFileStore() throws Exception {     resultEndpoint.expectedBodiesReceived("A", "B", "C", "D", "E").     sendMessage("AAAAAAAAAA", "A").     sendMessage("BBBBBBBBBB", "B").     sendMessage("CCCCCCCCCC", "C").     sendMessage("AAAAAAAAAA", "A").     sendMessage("DDDDDDDDDD", "D").     sendMessage("BBBBBBBBBB", "B").     sendMessage("EEEEEEEEEE", "E").     resultEndpoint.assertIsSatisfied().     resultEndpoint.reset().     resultEndpoint.expectedBodiesReceived("Z", "X").     // should trunk the file store     sendMessage("ZZZZZZZZZZ", "Z").     sendMessage("XXXXXXXXXX", "X").     resultEndpoint.assertIsSatisfied().     assertTrue(repo.contains("XXXXXXXXXX")).     // check the file should only have the last 2 entries as it was trunked     Stream<String> fileContent = Files.lines(store.toPath()).     List<String> fileEntries = fileContent.collect(Collectors.toList()).     fileContent.close().     // expected order     Assert.assertThat(fileEntries, IsIterableContainingInOrder.contains("ZZZZZZZZZZ", "XXXXXXXXXX")). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;public;0;16;;@Override @Before public void setUp() throws Exception {     // delete file store before testing     if (store.exists()) {         store.delete().     }     // 5 elements in cache, and 50 bytes as max size limit for when trunking should start     repo = FileIdempotentRepository.fileIdempotentRepository(store, 5, 50).     repo.start().     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;5;;public void configure() {     from("direct:start").idempotentConsumer(header("messageId"), repo).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").idempotentConsumer(header("messageId"), repo).to("mock:result").         }     }. }
