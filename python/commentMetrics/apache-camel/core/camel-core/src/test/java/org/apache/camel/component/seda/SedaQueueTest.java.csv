commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testQueue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Bye World", "Goodday World", "Bar").     template.sendBody("seda:foo", "Hello World").     template.sendBody("seda:foo?size=20", "Bye World").     template.sendBody("seda:foo?concurrentConsumers=5", "Goodday World").     template.sendBody("seda:bar", "Bar"). }
false;public;0;11;;@Test public void testQueueRef() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:array?queue=#arrayQueue", "Hello World").     SedaEndpoint sedaEndpoint = resolveMandatoryEndpoint("seda:array?queue=#arrayQueue", SedaEndpoint.class).     assertTrue(sedaEndpoint.getQueue() instanceof ArrayBlockingQueue). }
false;public;0;10;;@Override public void configure() throws Exception {     context.getRegistry().bind("arrayQueue", new ArrayBlockingQueue<Exchange>(10)).     from("seda:foo?size=20&concurrentConsumers=2").to("mock:result").     from("seda:bar").to("mock:result").     from("seda:array?queue=#arrayQueue").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getRegistry().bind("arrayQueue", new ArrayBlockingQueue<Exchange>(10)).             from("seda:foo?size=20&concurrentConsumers=2").to("mock:result").             from("seda:bar").to("mock:result").             from("seda:array?queue=#arrayQueue").to("mock:result").         }     }. }
