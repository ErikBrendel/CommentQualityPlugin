commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testMulticastParallel() throws Exception {     Exchange result = runTest("direct:run").     assertNotNull(result).     assertEquals("direct://a", result.getProperty(Exchange.FAILURE_ENDPOINT)). }
false;public;0;11;;@Test public void testMulticastParallelWithTryCatch() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     Exchange result = runTest("direct:start").     // try..catch block should clear handled exceptions     assertNotNull(result).     assertEquals(null, result.getProperty(Exchange.FAILURE_ENDPOINT)). }
false;public;1;15;;public Exchange runTest(String uri) throws Exception {     MockEndpoint mr = getMockEndpoint("mock:run").     MockEndpoint ma = getMockEndpoint("mock:a").     MockEndpoint mb = getMockEndpoint("mock:b").     mr.expectedMessageCount(0).     ma.expectedMessageCount(0).     mb.expectedMessageCount(1).     Exchange request = new DefaultExchange(context, ExchangePattern.InOut).     request.getIn().setBody("Hello World").     Exchange result = template.send(uri, request).     assertMockEndpointsSatisfied().     return result. }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:start").doTry().to("direct:run").doCatch(IllegalArgumentException.class).end().to("mock:result").     from("direct:run").multicast().parallelProcessing().to("direct:a", "direct:b").end().to("mock:run").     from("direct:a").throwException(new IllegalArgumentException("Oops...")).to("mock:a").     from("direct:b").setBody(constant("Bye World")).to("mock:b"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().to("direct:run").doCatch(IllegalArgumentException.class).end().to("mock:result").             from("direct:run").multicast().parallelProcessing().to("direct:a", "direct:b").end().to("mock:run").             from("direct:a").throwException(new IllegalArgumentException("Oops...")).to("mock:a").             from("direct:b").setBody(constant("Bye World")).to("mock:b").         }     }. }
