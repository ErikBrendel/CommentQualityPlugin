commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body} do you think ${properties:cheese.quote}?"). }
false;public;0;14;;@Test public void testPropertiesComponentSimpleLanguage() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body} do you think ${properties:cheese.quote}?").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus do you think Camel rocks?", reply). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body} do you think ${properties:cheese.quote}? And do you like ${properties:cheese.type} cheese?"). }
false;public;0;14;;@Test public void testPropertiesComponentDualSimpleLanguage() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body} do you think ${properties:cheese.quote}? And do you like ${properties:cheese.type} cheese?").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus do you think Camel rocks? And do you like Gouda cheese?", reply). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties:bar.quote}."). }
false;public;0;14;;@Test public void testPropertiesComponentSimpleLanguageWithLocations() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties:bar.quote}.").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus. Beer taste good.", reply). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties:bar.quote}."). }
false;public;0;15;;@Test public void testNoExistingPropertiesComponentWithLocation() throws Exception {     context.removeComponent("properties").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties:bar.quote}.").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus. Beer taste good.", reply). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties," + "org/apache/camel/component/properties/cheese.properties:cheese.quote}."). }
false;public;0;16;;@Test public void testNoExistingPropertiesComponentWithLocations() throws Exception {     context.removeComponent("properties").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body}. ${properties-location:org/apache/camel/component/properties/bar.properties," + "org/apache/camel/component/properties/cheese.properties:cheese.quote}.").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus. Camel rocks.", reply). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body} do you think ${properties:cheese.quote}?"). }
false;public;0;21;;@Test public void testNoExistingPropertiesComponentWithoutLocation() throws Exception {     context.removeComponent("properties").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body} do you think ${properties:cheese.quote}?").         }     }).     context.start().     try {         template.requestBody("direct:start", "Claus", String.class).         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         RuntimeCamelException rce = assertIsInstanceOf(RuntimeCamelException.class, e.getCause()).         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, rce.getCause()).         assertEquals("PropertiesComponent with name properties must be defined in CamelContext to support property placeholders in expressions", iae.getMessage()).     } }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("classpath:org/apache/camel/component/properties/cheese.properties").     context.addComponent("properties", pc).     return context. }
