commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testNoMessageHistory() throws Exception {     startAsyncProcess().     AsyncProcessorAwaitManager.AwaitThread awaitThread = defaultAsyncProcessorAwaitManager.browse().iterator().next().     assertThat(awaitThread.getRouteId(), is(nullValue())).     assertThat(awaitThread.getNodeId(), is(nullValue())).     waitForEndOfAsyncProcess(). }
false;public;0;9;;@Test public void testMessageHistoryWithEmptyList() throws Exception {     startAsyncProcess().     exchange.setProperty(Exchange.MESSAGE_HISTORY, new LinkedList<MessageHistory>()).     AsyncProcessorAwaitManager.AwaitThread awaitThread = defaultAsyncProcessorAwaitManager.browse().iterator().next().     assertThat(awaitThread.getRouteId(), is(nullValue())).     assertThat(awaitThread.getNodeId(), is(nullValue())).     waitForEndOfAsyncProcess(). }
false;public;0;11;;@Test public void testMessageHistoryWithNullMessageHistory() throws Exception {     startAsyncProcess().     LinkedList<MessageHistory> messageHistories = new LinkedList<>().     messageHistories.add(null).     exchange.setProperty(Exchange.MESSAGE_HISTORY, messageHistories).     AsyncProcessorAwaitManager.AwaitThread awaitThread = defaultAsyncProcessorAwaitManager.browse().iterator().next().     assertThat(awaitThread.getRouteId(), is(nullValue())).     assertThat(awaitThread.getNodeId(), is(nullValue())).     waitForEndOfAsyncProcess(). }
false;public;0;13;;@Test public void testMessageHistoryWithNullElements() throws Exception {     startAsyncProcess().     LinkedList<MessageHistory> messageHistories = new LinkedList<>().     messageHistories.add(MESSAGE_HISTORY_FACTORY.newMessageHistory(null, new MockNamedNode().withId(null), 0)).     exchange.setProperty(Exchange.MESSAGE_HISTORY, messageHistories).     AsyncProcessorAwaitManager.AwaitThread awaitThread = defaultAsyncProcessorAwaitManager.browse().iterator().next().     assertThat(awaitThread.getRouteId(), is(nullValue())).     assertThat(awaitThread.getNodeId(), is(nullValue())).     waitForEndOfAsyncProcess(). }
false;public;0;13;;@Test public void testMessageHistoryWithNotNullElements() throws Exception {     startAsyncProcess().     LinkedList<MessageHistory> messageHistories = new LinkedList<>().     messageHistories.add(MESSAGE_HISTORY_FACTORY.newMessageHistory("routeId", new MockNamedNode().withId("nodeId"), 0)).     exchange.setProperty(Exchange.MESSAGE_HISTORY, messageHistories).     AsyncProcessorAwaitManager.AwaitThread awaitThread = defaultAsyncProcessorAwaitManager.browse().iterator().next().     assertThat(awaitThread.getRouteId(), is("routeId")).     assertThat(awaitThread.getNodeId(), is("nodeId")).     waitForEndOfAsyncProcess(). }
false;private;0;5;;private void waitForEndOfAsyncProcess() {     latch.countDown().     while (thread.isAlive()) {     } }
false;private;0;9;;private void startAsyncProcess() throws InterruptedException {     defaultAsyncProcessorAwaitManager = new DefaultAsyncProcessorAwaitManager().     latch = new CountDownLatch(1).     BackgroundAwait backgroundAwait = new BackgroundAwait().     exchange = new DefaultExchange(new DefaultCamelContext()).     thread = new Thread(backgroundAwait).     thread.start().     Thread.sleep(100). }
false;public;0;4;;@Override public void run() {     defaultAsyncProcessorAwaitManager.await(exchange, latch). }
false;public;0;4;;@Override public String getId() {     return id. }
false;public;0;4;;@Override public String getShortName() {     return this.getClass().getSimpleName(). }
false;public;0;4;;@Override public String getLabel() {     return this.getClass().getName(). }
false;public;0;4;;@Override public String getDescriptionText() {     return this.getClass().getCanonicalName(). }
false;public;1;4;;public MockNamedNode withId(String id) {     this.id = id.     return this. }
