commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSchedulerInvokesBeanMethod() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     assertMockEndpointsSatisfied().     assertTrue("Should have fired 2 or more times was: " + bean.counter.get(), bean.counter.get() >= 2). }
false;public;0;5;;public void configure() {     from("scheduler://foo?delay=100").log("Fired scheduler").to("bean:myBean", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             from("scheduler://foo?delay=100").log("Fired scheduler").to("bean:myBean", "mock:result").         }     }. }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", bean).     return answer. }
false;public;0;4;;public void someMethod() {     LOG.debug("Invoked someMethod()").     counter.incrementAndGet(). }
