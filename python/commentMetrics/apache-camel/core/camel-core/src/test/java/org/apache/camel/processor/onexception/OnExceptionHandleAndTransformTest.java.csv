commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new MyFunctionalException("Sorry you cannot do this"). }
false;public;0;18;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0)).     // START SNIPPET: e1     // we catch MyFunctionalException and want to mark it as handled (= no failure returned to client)     // but we want to return a fixed text response, so we transform OUT body as Sorry.     onException(MyFunctionalException.class).handled(true).transform().constant("Sorry").     // END SNIPPET: e1     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new MyFunctionalException("Sorry you cannot do this").         }     }). }
false;public;0;26;;@Test public void testOnExceptionTransformConstant() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0)).             // START SNIPPET: e1             // we catch MyFunctionalException and want to mark it as handled (= no failure returned to client)             // but we want to return a fixed text response, so we transform OUT body as Sorry.             onException(MyFunctionalException.class).handled(true).transform().constant("Sorry").             // END SNIPPET: e1             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new MyFunctionalException("Sorry you cannot do this").                 }             }).         }     }).     Object out = template.requestBody("direct:start", "Hello World").     assertEquals("Sorry", out). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new MyFunctionalException("Sorry you cannot do this again to me"). }
false;public;0;18;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0)).     // START SNIPPET: e2     // we catch MyFunctionalException and want to mark it as handled (= no failure returned to client)     // but we want to return a fixed text response, so we transform OUT body and return the exception message     onException(MyFunctionalException.class).handled(true).transform(exceptionMessage()).     // END SNIPPET: e2     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new MyFunctionalException("Sorry you cannot do this again to me").         }     }). }
false;public;0;26;;@Test public void testOnExceptionTransformExceptionMessage() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0)).             // START SNIPPET: e2             // we catch MyFunctionalException and want to mark it as handled (= no failure returned to client)             // but we want to return a fixed text response, so we transform OUT body and return the exception message             onException(MyFunctionalException.class).handled(true).transform(exceptionMessage()).             // END SNIPPET: e2             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new MyFunctionalException("Sorry you cannot do this again to me").                 }             }).         }     }).     Object out = template.requestBody("direct:start", "Hello World").     assertEquals("Sorry you cannot do this again to me", out). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new MyFunctionalException("Out of order"). }
false;public;0;19;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0)).     // START SNIPPET: e3     // we catch MyFunctionalException and want to mark it as handled (= no failure returned to client)     // but we want to return a fixed text response, so we transform OUT body and return a nice message     // using the simple language where we want insert the exception message     onException(MyFunctionalException.class).handled(true).transform().simple("Error reported: ${exception.message} - cannot process this message.").     // END SNIPPET: e3     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new MyFunctionalException("Out of order").         }     }). }
false;public;0;27;;@Test public void testOnExceptionSimpleLangaugeExceptionMessage() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0)).             // START SNIPPET: e3             // we catch MyFunctionalException and want to mark it as handled (= no failure returned to client)             // but we want to return a fixed text response, so we transform OUT body and return a nice message             // using the simple language where we want insert the exception message             onException(MyFunctionalException.class).handled(true).transform().simple("Error reported: ${exception.message} - cannot process this message.").             // END SNIPPET: e3             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new MyFunctionalException("Out of order").                 }             }).         }     }).     Object out = template.requestBody("direct:start", "Hello World").     assertEquals("Error reported: Out of order - cannot process this message.", out). }
