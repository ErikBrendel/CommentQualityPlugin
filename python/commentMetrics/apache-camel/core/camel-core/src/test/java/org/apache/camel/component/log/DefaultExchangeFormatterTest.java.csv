commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSendMessageToLogDefault() throws Exception {     template.sendBody("log:org.apache.camel.TEST", "Hello World"). }
false;public;0;4;;@Test public void testSendMessageToLogAllOff() throws Exception {     template.sendBody("log:org.apache.camel.TEST?showBody=false&showBodyType=false&showExchangePattern=false", "Hello World"). }
false;public;0;3;;public String call() throws Exception {     return "foo". }
false;public;0;3;;public String call() throws Exception {     return "bar". }
false;public;0;26;;@Test public void testSendMessageToLogSingleOptions() throws Exception {     template.sendBody("log:org.apache.camel.TEST?showExchangeId=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showExchangePattern=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showExchangePattern=false", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showProperties=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showHeaders=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showBodyType=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showBody=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showOut=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showOut=true&showHeaders=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showOut=true&showBodyType=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showOut=true&showBody=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showAll=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showFuture=true", new MyFuture(new Callable<String>() {          public String call() throws Exception {             return "foo".         }     })).     template.sendBody("log:org.apache.camel.TEST?showFuture=false", new MyFuture(new Callable<String>() {          public String call() throws Exception {             return "bar".         }     })). }
false;public;0;5;;@Test public void testSendMessageToLogMultiOptions() throws Exception {     template.sendBody("log:org.apache.camel.TEST?showHeaders=true&showOut=true", "Hello World").     template.sendBody("log:org.apache.camel.TEST?showProperties=true&showHeaders=true&showOut=true", "Hello World"). }
false;public;0;4;;@Test public void testSendMessageToLogShowFalse() throws Exception {     template.sendBody("log:org.apache.camel.TEST?showBodyType=false", "Hello World"). }
false;public;0;4;;@Test public void testSendMessageToLogMultiLine() throws Exception {     template.sendBody("log:org.apache.camel.TEST?multiline=true", "Hello World"). }
false;public;0;4;;@Test public void testSendByteArrayMessageToLogDefault() throws Exception {     template.sendBody("log:org.apache.camel.TEST", "Hello World".getBytes()). }
false;public;0;11;;@Test public void testSendMessageToLogMaxChars() throws Exception {     template.sendBody("log:org.apache.camel.TEST", "Hello World this is a very long string that is NOT going to be chopped by maxchars").     template.sendBody("log:org.apache.camel.TEST?maxChars=50", "Hello World this is a very long string that is going to be chopped by maxchars").     template.sendBody("log:org.apache.camel.TEST?maxChars=50&showAll=true&multiline=true", "Hello World this is a very long string that is going to be chopped by maxchars"). }
false;public;0;12;;@Test public void testSendExchangeWithOut() throws Exception {     Endpoint endpoint = resolveMandatoryEndpoint("log:org.apache.camel.TEST?showAll=true&multiline=true").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.getOut().setBody(22).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;12;;@Test public void testSendExchangeWithException() throws Exception {     Endpoint endpoint = resolveMandatoryEndpoint("log:org.apache.camel.TEST?showException=true").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.setException(new IllegalArgumentException("Damn")).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;12;;@Test public void testSendCaughtExchangeWithException() throws Exception {     Endpoint endpoint = resolveMandatoryEndpoint("log:org.apache.camel.TEST?showCaughtException=true").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.setProperty(Exchange.EXCEPTION_CAUGHT, new IllegalArgumentException("I am caught")).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;12;;@Test public void testSendCaughtExchangeWithExceptionAndMultiline() throws Exception {     Endpoint endpoint = resolveMandatoryEndpoint("log:org.apache.camel.TEST?showCaughtException=true&multiline=true").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.setProperty(Exchange.EXCEPTION_CAUGHT, new IllegalArgumentException("I am caught")).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;12;;@Test public void testSendExchangeWithExceptionAndStackTrace() throws Exception {     Endpoint endpoint = resolveMandatoryEndpoint("log:org.apache.camel.TEST?showException=true&showStackTrace=true").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.setException(new IllegalArgumentException("Damn")).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;12;;@Test public void testSendCaughtExchangeWithExceptionAndStackTrace() throws Exception {     Endpoint endpoint = resolveMandatoryEndpoint("log:org.apache.camel.TEST?showCaughtException=true&showStackTrace=true").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("Hello World").     exchange.setProperty(Exchange.EXCEPTION_CAUGHT, new IllegalArgumentException("I am caught")).     Producer producer = endpoint.createProducer().     producer.start().     producer.process(exchange).     producer.stop(). }
false;public;0;17;;@Test public void testConfiguration() {     DefaultExchangeFormatter formatter = new DefaultExchangeFormatter().     assertFalse(formatter.isShowExchangeId()).     assertFalse(formatter.isShowProperties()).     assertFalse(formatter.isShowHeaders()).     assertTrue(formatter.isShowBodyType()).     assertTrue(formatter.isShowBody()).     assertFalse(formatter.isShowOut()).     assertFalse(formatter.isShowException()).     assertFalse(formatter.isShowCaughtException()).     assertFalse(formatter.isShowStackTrace()).     assertFalse(formatter.isShowAll()).     assertFalse(formatter.isMultiline()).     assertEquals(10000, formatter.getMaxChars()). }
false;public;0;4;;@Override public boolean isDone() {     return true. }
false;public;0;4;;@Override public String get() throws InterruptedException, ExecutionException {     return "foo". }
false;public;0;4;;@Override public String toString() {     return "ThisIsMyFuture". }
