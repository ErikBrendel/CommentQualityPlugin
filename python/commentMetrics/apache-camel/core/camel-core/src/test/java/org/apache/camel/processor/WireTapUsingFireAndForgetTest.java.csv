commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;13;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").wireTap("direct:foo").copy(false).newExchange(exchange -> {         exchange.getIn().setBody("Bye World").         exchange.getIn().setHeader("foo", "bar").     }).to("mock:result").     from("direct:foo").to("mock:foo"). // END SNIPPET: e1 }
false;public;0;39;;@Test public void testFireAndForgetUsingProcessor() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").wireTap("direct:foo").copy(false).newExchange(exchange -> {                 exchange.getIn().setBody("Bye World").                 exchange.getIn().setHeader("foo", "bar").             }).to("mock:result").             from("direct:foo").to("mock:foo").         // END SNIPPET: e1         }     }).     context.start().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("Bye World").     foo.expectedHeaderReceived("foo", "bar").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be different exchange instances     Exchange e1 = result.getReceivedExchanges().get(0).     Exchange e2 = foo.getReceivedExchanges().get(0).     assertNotSame("Should not be same Exchange", e1, e2).     // should have same from endpoint     assertEquals("direct://start", e1.getFromEndpoint().getEndpointUri()).     assertEquals("direct://start", e2.getFromEndpoint().getEndpointUri()). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e2     from("direct:start").wireTap("direct:foo").copy(false).newExchangeBody(constant("Bye World")).to("mock:result").     from("direct:foo").to("mock:foo"). // END SNIPPET: e2 }
false;public;0;35;;@Test public void testFireAndForgetUsingExpression() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e2             from("direct:start").wireTap("direct:foo").copy(false).newExchangeBody(constant("Bye World")).to("mock:result").             from("direct:foo").to("mock:foo").         // END SNIPPET: e2         }     }).     context.start().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello World").     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // should be different exchange instances     Exchange e1 = result.getReceivedExchanges().get(0).     Exchange e2 = foo.getReceivedExchanges().get(0).     assertNotSame("Should not be same Exchange", e1, e2).     // should have same from endpoint     assertEquals("direct://start", e1.getFromEndpoint().getEndpointUri()).     assertEquals("direct://start", e2.getFromEndpoint().getEndpointUri()). }
