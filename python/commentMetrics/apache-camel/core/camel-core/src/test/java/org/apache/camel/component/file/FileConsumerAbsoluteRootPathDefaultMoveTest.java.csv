commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testDummy() { // noop }
false;public;0;13;;public void xxxTestConsumeFromAbsolutePath() throws Exception {     deleteDirectory(base).     context.getRouteController().startRoute("foo").     MockEndpoint mock = getMockEndpoint("mock:report").     mock.expectedBodiesReceived("Hello Paris").     mock.expectedFileExists(base + "/.camel/paris.txt").     template.sendBodyAndHeader("file:" + base, "Hello Paris", Exchange.FILE_NAME, "paris.txt").     mock.assertIsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     from("file:" + base + "?initialDelay=0&delay=10").routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:report"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file:" + base + "?initialDelay=0&delay=10").routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:report").         }     }. }
