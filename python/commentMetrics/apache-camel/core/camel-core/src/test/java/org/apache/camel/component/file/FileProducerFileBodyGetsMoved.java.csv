commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before @Override public void setUp() throws Exception {     deleteDirectory("target/data/filemove").     super.setUp(). }
false;public;0;12;;@Test public void testStoreFileExchangeBodyIsFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedFileExists("target/data/filemove/testStoreFile").     mock.expectedMessageCount(1).     File temporaryFile = File.createTempFile("camel", "test").     template.requestBodyAndHeader("direct:in", temporaryFile, Exchange.FILE_LOCAL_WORK_PATH, temporaryFile).     mock.assertIsSatisfied().     assertFalse("Temporary body file should have been moved, not copied", temporaryFile.exists()). }
false;public;0;14;;@Test public void testStoreFileExchangeBodyIsWrappedFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedFileExists("target/data/filemove/testStoreFile").     mock.expectedMessageCount(1).     File temporaryFile = File.createTempFile("camel", "test").     GenericFile<File> body = new GenericFile<>().     body.setFile(temporaryFile).     template.requestBodyAndHeader("direct:in", temporaryFile, Exchange.FILE_LOCAL_WORK_PATH, temporaryFile).     mock.assertIsSatisfied().     assertFalse("Temporary body file should have been moved, not copied", temporaryFile.exists()). }
false;public;0;4;;public void configure() throws Exception {     from("direct:in").to("file://target/data/filemove/?fileName=testStoreFile").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").to("file://target/data/filemove/?fileName=testStoreFile").to("mock:result").         }     }. }
