commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/inbox").     deleteDirectory("target/data/outbox").     super.setUp(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new Exception("Exception raised"). }
false;public;0;15;;@Test public void testRecipientListUseOriginalMessageIssue() throws Exception {     getMockEndpoint("mock:throwException").whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new Exception("Exception raised").         }     }).     getMockEndpoint("mock:error").expectedMinimumMessageCount(1).     getMockEndpoint("mock:error").expectedFileExists("target/data/outbox/hello.txt", "A").     template.sendBodyAndHeader("file:target/data/inbox", "A", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).useOriginalMessage().to("file://target/data/outbox").to("mock:error").     from("file://target/data/inbox?initialDelay=0&delay=10").transform(constant("B")).setHeader("path", constant("mock:throwException")).recipientList(header("path")).shareUnitOfWork(). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).useOriginalMessage().to("file://target/data/outbox").to("mock:error").             from("file://target/data/inbox?initialDelay=0&delay=10").transform(constant("B")).setHeader("path", constant("mock:throwException")).recipientList(header("path")).shareUnitOfWork().         }     }. }
