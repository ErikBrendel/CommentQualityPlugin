commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void testRoute() throws Exception {     getMockEndpoint("mock:end").expectedMessageCount(2).     getMockEndpoint("mock:intercept").expectedMessageCount(3).     getMockEndpoint("ftp:foo").expectedBodiesReceived("Hello World", "Bye World").     getMockEndpoint("http:bar").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "ftp:foo,http:bar").     template.sendBodyAndHeader("direct:start", "Bye World", "foo", "ftp:foo").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     // simulate ftp/http using mocks     context.addComponent("ftp", new MockComponent()).     context.addComponent("http", new MockComponent()).     interceptSendToEndpoint("(ftp|http):.*").to("log:intercept").to("mock:intercept").     from("direct:start").recipientList(header("foo")).parallelProcessing().to("mock:end"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // simulate ftp/http using mocks             context.addComponent("ftp", new MockComponent()).             context.addComponent("http", new MockComponent()).             interceptSendToEndpoint("(ftp|http):.*").to("log:intercept").to("mock:intercept").             from("direct:start").recipientList(header("foo")).parallelProcessing().to("mock:end").         }     }. }
