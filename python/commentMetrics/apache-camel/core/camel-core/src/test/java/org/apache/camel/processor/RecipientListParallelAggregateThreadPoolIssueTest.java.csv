commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testRecipientListParallelALot() throws Exception {     String before = context.getExecutorServiceManager().resolveThreadName("foo").     for (int i = 0. i < 10. i++) {         MockEndpoint mock = getMockEndpoint("mock:result").         mock.reset().         mock.expectedBodiesReceivedInAnyOrder("c", "b", "a").         template.sendBodyAndHeader("direct:start", "Hello World", "foo", "direct:a,direct:b,direct:c").         assertMockEndpointsSatisfied().     }     String after = context.getExecutorServiceManager().resolveThreadName("foo").     int num1 = context.getTypeConverter().convertTo(int.class, before).     int num2 = context.getTypeConverter().convertTo(int.class, after).     int diff = num2 - num1.     // should be at least 10 + 1 other threads (10 in parallel pool + 1 in aggregate pool)     // we run unit test per jmv fork, so there may be a hanging thread     assertTrue("There should be 12 or more threads in use, was: " + diff, diff >= 11). }
false;public;0;11;;@Override public void configure() throws Exception {     context.getExecutorServiceManager().setThreadNamePattern("#counter#").     from("direct:start").recipientList(header("foo")).parallelProcessing().     from("direct:a").to("log:a").transform(constant("a")).to("mock:result").     from("direct:b").to("log:b").transform(constant("b")).to("mock:result").     from("direct:c").to("log:c").transform(constant("c")).to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getExecutorServiceManager().setThreadNamePattern("#counter#").             from("direct:start").recipientList(header("foo")).parallelProcessing().             from("direct:a").to("log:a").transform(constant("a")).to("mock:result").             from("direct:b").to("log:b").transform(constant("b")).to("mock:result").             from("direct:c").to("log:c").transform(constant("c")).to("mock:result").         }     }. }
