commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String routeId = exchange.getUnitOfWork().getRouteContext().getRoute().getId().     assertEquals("bar", routeId). }
false;public;0;21;;@Override public void configure() throws Exception {     onException(Exception.class).log("Error due ${exception.message}").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String routeId = exchange.getUnitOfWork().getRouteContext().getRoute().getId().             assertEquals("bar", routeId).         }     }).     from("direct:start").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").to("mock:bar").throwException(new IllegalArgumentException("Forced bar error")). }
false;public;0;41;;@Test public void testContextScopedOnExceptionLogRouteBarFail() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).log("Error due ${exception.message}").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String routeId = exchange.getUnitOfWork().getRouteContext().getRoute().getId().                     assertEquals("bar", routeId).                 }             }).             from("direct:start").routeId("foo").to("mock:foo").to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").to("mock:bar").throwException(new IllegalArgumentException("Forced bar error")).         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced bar error", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String routeId = exchange.getUnitOfWork().getRouteContext().getRoute().getId().     assertEquals("foo", routeId). }
false;public;0;24;;@Override public void configure() throws Exception {     onException(Exception.class).log("Error due ${exception.message}").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String routeId = exchange.getUnitOfWork().getRouteContext().getRoute().getId().             assertEquals("foo", routeId).         }     }).     from("direct:start").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced foo error")).to("direct:bar").to("mock:result").     from("direct:bar").routeId("bar").to("mock:bar").     from("direct:killer").routeId("killer").to("mock:killer"). }
false;public;0;44;;@Test public void testContextScopedOnExceptionLogRouteFooFail() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).log("Error due ${exception.message}").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String routeId = exchange.getUnitOfWork().getRouteContext().getRoute().getId().                     assertEquals("foo", routeId).                 }             }).             from("direct:start").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced foo error")).to("direct:bar").to("mock:result").             from("direct:bar").routeId("bar").to("mock:bar").             from("direct:killer").routeId("killer").to("mock:killer").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced foo error", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
