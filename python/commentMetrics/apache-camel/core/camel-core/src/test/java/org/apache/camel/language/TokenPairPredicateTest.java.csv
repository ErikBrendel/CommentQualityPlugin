commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/pair").     super.setUp(). }
false;public;0;16;;@Test public void testTokenPairPredicate() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/pair", "<hello>world!</hello>", Exchange.FILE_NAME, "hello.xml").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     File file = new File("target/data/pair/hello.xml").     assertFalse("File should not exists " + file, file.exists()).     file = new File("target/data/pair/ok/hello.xml").     assertTrue("File should exists " + file, file.exists()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("file:target/data/pair?initialDelay=0&delay=10&move=ok").choice().when().tokenizePair("<hello>", "</hello>").to("mock:result").end(). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/pair?initialDelay=0&delay=10&move=ok").choice().when().tokenizePair("<hello>", "</hello>").to("mock:result").end().         }     }. }
