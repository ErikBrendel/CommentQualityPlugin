commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testTryFinallyCaughtException() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint error = getMockEndpoint("mock:b").     error.expectedMessageCount(1).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied().     Exception e = error.getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertNotNull(e).     assertEquals("Forced", e.getMessage()).     String to = error.getReceivedExchanges().get(0).getProperty(Exchange.FAILURE_ENDPOINT, String.class).     assertEquals("bean://myBean?method=doSomething", to). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", this).     return jndi. }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").doTry().to("mock:a").to("bean:myBean?method=doSomething").doFinally().to("mock:b").end().to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().to("mock:a").to("bean:myBean?method=doSomething").doFinally().to("mock:b").end().to("mock:result").         }     }. }
false;public;1;3;;public void doSomething(String body) throws Exception {     throw new IllegalArgumentException("Forced"). }
