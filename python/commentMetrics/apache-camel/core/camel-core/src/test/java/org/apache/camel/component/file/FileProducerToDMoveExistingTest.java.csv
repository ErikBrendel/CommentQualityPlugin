commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void setUp() throws Exception {     deleteDirectory("target/out").     super.setUp(). }
false;public;0;15;;@Test public void testMoveExisting() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(2).     Map<String, Object> headers = new HashMap<>().     headers.put("myDir", "out").     headers.put(Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeaders("direct:start", "Hello World", headers).     template.sendBodyAndHeaders("direct:start", "Bye World", headers).     assertMockEndpointsSatisfied().     assertFileExists("target/out/old-hello.txt").     assertFileExists("target/out/hello.txt"). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").toD("file:target/${header.myDir}?fileExist=Move&moveExisting=target/out/old-${file:onlyname}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").toD("file:target/${header.myDir}?fileExist=Move&moveExisting=target/out/old-${file:onlyname}").to("mock:result").         }     }. }
