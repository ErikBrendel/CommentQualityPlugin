commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testRedeliverA() throws Exception {     counter = 0.     try {         template.sendBody("direct:a", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // first call + 3 redeliveries     assertEquals(1 + 3, counter). }
false;public;0;15;;@Test public void testRedeliverB() throws Exception {     counter = 0.     try {         template.sendBody("direct:b", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // first call + 3 redeliveries     assertEquals(1 + 3, counter). }
false;public;1;13;;@Override public void process(Exchange exchange) throws Exception {     // should be same input body     assertEquals("Hello World", exchange.getIn().getBody()).     assertFalse("Should not have OUT", exchange.hasOut()).     assertNull(exchange.getException()).     // mutate IN body     exchange.getIn().setBody("Bye World").     counter++.     throw new IllegalArgumentException("Forced"). }
false;public;1;13;;@Override public void process(Exchange exchange) throws Exception {     // should be same input body     assertEquals("Hello World", exchange.getIn().getBody()).     assertFalse("Should not have OUT", exchange.hasOut()).     assertNull(exchange.getException()).     // mutate OUT body     exchange.getOut().setBody("Bye World").     counter++.     throw new IllegalArgumentException("Forced"). }
false;public;0;39;;@Override public void configure() throws Exception {     // try to redeliver up till 3 times     errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0)).     from("direct:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // should be same input body             assertEquals("Hello World", exchange.getIn().getBody()).             assertFalse("Should not have OUT", exchange.hasOut()).             assertNull(exchange.getException()).             // mutate IN body             exchange.getIn().setBody("Bye World").             counter++.             throw new IllegalArgumentException("Forced").         }     }).     from("direct:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // should be same input body             assertEquals("Hello World", exchange.getIn().getBody()).             assertFalse("Should not have OUT", exchange.hasOut()).             assertNull(exchange.getException()).             // mutate OUT body             exchange.getOut().setBody("Bye World").             counter++.             throw new IllegalArgumentException("Forced").         }     }). }
false;protected;0;44;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // try to redeliver up till 3 times             errorHandler(defaultErrorHandler().maximumRedeliveries(3).redeliveryDelay(0)).             from("direct:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // should be same input body                     assertEquals("Hello World", exchange.getIn().getBody()).                     assertFalse("Should not have OUT", exchange.hasOut()).                     assertNull(exchange.getException()).                     // mutate IN body                     exchange.getIn().setBody("Bye World").                     counter++.                     throw new IllegalArgumentException("Forced").                 }             }).             from("direct:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // should be same input body                     assertEquals("Hello World", exchange.getIn().getBody()).                     assertFalse("Should not have OUT", exchange.hasOut()).                     assertNull(exchange.getException()).                     // mutate OUT body                     exchange.getOut().setBody("Bye World").                     counter++.                     throw new IllegalArgumentException("Forced").                 }             }).         }     }. }
