commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;public void configure() {     from("direct:outerRoute").id("out").choice().when(header("test-header").isNotNull()).to("direct:mainProcess").otherwise().to("log:badMessage").transform().method(new MyBean(), "processRejectedMessage").end().     from("direct:mainProcess").bean(new MyBean(), "processMessage"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:outerRoute").id("out").choice().when(header("test-header").isNotNull()).to("direct:mainProcess").otherwise().to("log:badMessage").transform().method(new MyBean(), "processRejectedMessage").end().             from("direct:mainProcess").bean(new MyBean(), "processMessage").         }     }. }
false;public;1;3;;public String processRejectedMessage(@Body String message) {     return "Rejecting " + message. }
false;public;1;3;;public String processMessage(@Body String message) {     return "Processing " + message. }
false;public;0;10;;@Test public void testRoute() {     String result = template.requestBodyAndHeader("direct:outerRoute", "body", "test-header", "headerValue", String.class).     assertEquals("Processing body", result).     result = template.requestBody("direct:outerRoute", "body", String.class).     assertEquals("Rejecting body", result). // context.getRouteDefinition("out").toString(). }
