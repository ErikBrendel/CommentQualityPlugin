commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSplitterStreamingNoError() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("A", "B", "C", "D", "E").     getMockEndpoint("mock:b").expectedBodiesReceived("A", "B", "C", "D", "E").     getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C,D,E").     template.sendBody("direct:start", "A,B,C,D,E").     assertMockEndpointsSatisfied(). }
false;public;0;19;;@Test public void testSplitterStreamingWithError() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("A", "B", "Kaboom", "D", "E").     getMockEndpoint("mock:b").expectedBodiesReceived("A", "B", "D", "E").     getMockEndpoint("mock:result").expectedMessageCount(0).     // you can always use a custom aggregation strategy to deal with errors your-self     try {         template.sendBody("direct:start", "A,B,Kaboom,D,E").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Cannot do this", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Cannot do this").     } }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).streaming().to("mock:a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Kaboom".equals(body)) {                 throw new IllegalArgumentException("Cannot do this").             }         }     }).to("mock:b").end().to("mock:result"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).streaming().to("mock:a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Kaboom".equals(body)) {                         throw new IllegalArgumentException("Cannot do this").                     }                 }             }).to("mock:b").end().to("mock:result").         }     }. }
