commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSplitterAndVerifyMock() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:error2").expectedMessageCount(1).     getMockEndpoint("mock:split").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     onException(ExpressionEvaluationException.class).handled(true).to("mock://error").     from("direct://start").onException(ExpressionEvaluationException.class).handled(true).to("mock://error2").end().split(new MyExpression()).to("mock://split").end().to("log:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(ExpressionEvaluationException.class).handled(true).to("mock://error").             from("direct://start").onException(ExpressionEvaluationException.class).handled(true).to("mock://error2").end().split(new MyExpression()).to("mock://split").end().to("log:result").         }     }. }
false;public;2;5;;public <T> T evaluate(Exchange exchange, Class<T> type) {     // can kick in anyway     throw new ExpressionEvaluationException(null, exchange, null). }
