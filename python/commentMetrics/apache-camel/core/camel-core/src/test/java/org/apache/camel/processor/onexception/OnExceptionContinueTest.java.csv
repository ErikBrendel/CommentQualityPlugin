commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testContinued() throws Exception {     getMockEndpoint("mock:start").expectedMessageCount(1).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     // and we should keep the exception so we know what caused the failure     mock.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public // START SNIPPET: e1 void configure() throws Exception {     // tell Camel to handle and continue when this exception is thrown     onException(IllegalArgumentException.class).continued(true).     from("direct:start").to("mock:start").throwException(new IllegalArgumentException("Forced")).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public // START SNIPPET: e1         void configure() throws Exception {             // tell Camel to handle and continue when this exception is thrown             onException(IllegalArgumentException.class).continued(true).             from("direct:start").to("mock:start").throwException(new IllegalArgumentException("Forced")).to("mock:result").         }     }. }
