commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testConcurrentDynamicRouter() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(COUNT).     getMockEndpoint("mock:b").expectedMessageCount(COUNT).     Thread sendToSedaA = createSedaSenderThread("seda:a").     Thread sendToSedaB = createSedaSenderThread("seda:b").     sendToSedaA.start().     sendToSedaB.start().     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void run() {     for (int i = 0. i < COUNT. i++) {         template.sendBody(seda, "Message from " + seda).     } }
false;private;1;10;;private Thread createSedaSenderThread(final String seda) {     return new Thread(new Runnable() {          @Override         public void run() {             for (int i = 0. i < COUNT. i++) {                 template.sendBody(seda, "Message from " + seda).             }         }     }). }
false;public;0;4;;public void configure() {     from("seda:a").bean(new MyDynamicRouterPojo("mock:a")).     from("seda:b").bean(new MyDynamicRouterPojo("mock:b")). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("seda:a").bean(new MyDynamicRouterPojo("mock:a")).             from("seda:b").bean(new MyDynamicRouterPojo("mock:b")).         }     }. }
false;public;1;8;;@DynamicRouter public String route(@Header(Exchange.SLIP_ENDPOINT) String previous) {     if (previous == null) {         return target.     } else {         return null.     } }
