commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testStopRouteWithAbortAfterTimeoutTrue() throws Exception {     // doesnt test to well on all Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mockEP = getMockEndpoint("mock:result").     mockEP.setExpectedMessageCount(10).     // send some message through the route     for (int i = 0. i < 5. i++) {         template.sendBody("seda:start", "message-" + i).     }     // stop route with a 1s timeout and abortAfterTimeout=true (should abort after 1s)     boolean stopRouteResponse = context.getRouteController().stopRoute("start", 1, TimeUnit.SECONDS, true).     // confirm that route is still running     assertFalse("stopRoute response should be False", stopRouteResponse).     assertEquals("route should still be started", true, context.getRouteController().getRouteStatus("start").isStarted()).     // send some more messages through the route     for (int i = 5. i < 10. i++) {         template.sendBody("seda:start", "message-" + i).     }     mockEP.assertIsSatisfied(). }
false;public;0;31;;@Test public void testStopRouteWithAbortAfterTimeoutFalse() throws Exception {     // doesnt test to well on all Windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mockEP = getMockEndpoint("mock:result").     // send some message through the route     for (int i = 0. i < 5. i++) {         template.sendBody("seda:start", "message-" + i).     }     // stop route with a 1s timeout and abortAfterTimeout=false (normal timeout behavior)     boolean stopRouteResponse = context.getRouteController().stopRoute("start", 1, TimeUnit.SECONDS, false).     // the route should have been forced stopped     assertTrue("stopRoute response should be True", stopRouteResponse).     assertEquals("route should be stopped", true, context.getRouteController().getRouteStatus("start").isStopped()).     int before = mockEP.getExchanges().size().     // send some more messages through the route     for (int i = 5. i < 10. i++) {         template.sendBody("seda:start", "message-" + i).     }     int after = mockEP.getExchanges().size().     assertEquals("Should not route messages", before, after). }
false;public;0;7;;@Override public void configure() throws Exception {     // shutdown this test faster     context.getShutdownStrategy().setTimeout(3).     from("seda:start").routeId("start").delay(100).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // shutdown this test faster             context.getShutdownStrategy().setTimeout(3).             from("seda:start").routeId("start").delay(100).to("mock:result").         }     }. }
