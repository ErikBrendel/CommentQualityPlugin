commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String target = exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT, String.class).     exchange.getIn().setHeader("target", target). }
false;public;0;16;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:error").     interceptSendToEndpoint("direct:*").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String target = exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT, String.class).             exchange.getIn().setHeader("target", target).         }     }).     from("direct:start").recipientList(header("foo")).     from("direct:foo").setBody(constant("Bye World")).to("mock:foo").     from("direct:kabom").throwException(new IllegalArgumentException("Damn")). }
false;public;0;31;;@Test public void testUsingInterceptor() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:error").             interceptSendToEndpoint("direct:*").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String target = exchange.getIn().getHeader(Exchange.INTERCEPTED_ENDPOINT, String.class).                     exchange.getIn().setHeader("target", target).                 }             }).             from("direct:start").recipientList(header("foo")).             from("direct:foo").setBody(constant("Bye World")).to("mock:foo").             from("direct:kabom").throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").message(0).header("target").isEqualTo("direct://kabom").     String foo = "direct:foo,direct:kabom".     template.sendBodyAndHeader("direct:start", "Hello World", "foo", foo).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:error").     from("direct:start").recipientList(header("foo")).     from("direct:foo").setBody(constant("Bye World")).to("mock:foo").     from("direct:kabom").throwException(new IllegalArgumentException("Damn")). }
false;public;0;25;;@Test public void testUsingExistingHeaders() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:error").             from("direct:start").recipientList(header("foo")).             from("direct:foo").setBody(constant("Bye World")).to("mock:foo").             from("direct:kabom").throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:foo").message(0).header(Exchange.TO_ENDPOINT).isEqualTo("mock://foo").     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").message(0).header(Exchange.FAILURE_ENDPOINT).isEqualTo("direct://kabom").     String foo = "direct:foo,direct:kabom".     template.sendBodyAndHeader("direct:start", "Hello World", "foo", foo).     assertMockEndpointsSatisfied(). }
