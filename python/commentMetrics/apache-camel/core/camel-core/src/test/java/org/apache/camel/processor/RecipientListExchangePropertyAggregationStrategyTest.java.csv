commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testRecipientExchangeProperty() throws Exception {     getMockEndpoint("mock:a").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT, "direct://a").     getMockEndpoint("mock:a").expectedPropertyReceived(Exchange.TO_ENDPOINT, "mock://a").     getMockEndpoint("mock:b").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT, "direct://b").     getMockEndpoint("mock:b").expectedPropertyReceived(Exchange.TO_ENDPOINT, "mock://b").     getMockEndpoint("mock:c").expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT, "direct://c").     getMockEndpoint("mock:c").expectedPropertyReceived(Exchange.TO_ENDPOINT, "mock://c").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello c").     // would be the last one     mock.expectedPropertyReceived(Exchange.RECIPIENT_LIST_ENDPOINT, "direct://c").     String out = template.requestBodyAndHeader("direct:start", "Hello World", "slip", "direct:a,direct:b,direct:c", String.class).     assertEquals("Hello c", out).     assertMockEndpointsSatisfied().     assertEquals(3, strategy.getUris().size()).     assertEquals("direct://a", strategy.getUris().get(0)).     assertEquals("direct://b", strategy.getUris().get(1)).     assertEquals("direct://c", strategy.getUris().get(2)). }
false;public;0;9;;public void configure() {     from("direct:start").recipientList(header("slip")).aggregationStrategy(strategy).to("mock:result").     from("direct:a").to("mock:a").transform(constant("Hello a")).     from("direct:b").to("mock:b").transform(constant("Hello b")).     from("direct:c").to("mock:c").transform(constant("Hello c")). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").recipientList(header("slip")).aggregationStrategy(strategy).to("mock:result").             from("direct:a").to("mock:a").transform(constant("Hello a")).             from("direct:b").to("mock:b").transform(constant("Hello b")).             from("direct:c").to("mock:c").transform(constant("Hello c")).         }     }. }
false;public;2;5;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     uris.add(newExchange.getProperty(Exchange.RECIPIENT_LIST_ENDPOINT, String.class)).     return newExchange. }
false;public;0;3;;public List<String> getUris() {     return uris. }
