commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/file").     super.setUp(). }
false;public;0;18;;@Test public void testFail() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedFileExists("target/data/file/hello.txt", "Hello World").     template.sendBodyAndHeader("file://target/data/file", "Hello World", Exchange.FILE_NAME, "hello.txt").     try {         template.sendBodyAndHeader("file://target/data/file?fileExist=Fail", "Bye World", Exchange.FILE_NAME, "hello.txt").         fail("Should have thrown a GenericFileOperationFailedException").     } catch (CamelExecutionException e) {         GenericFileOperationFailedException cause = assertIsInstanceOf(GenericFileOperationFailedException.class, e.getCause()).         assertEquals(FileUtil.normalizePath("File already exist: target/data/file/hello.txt. Cannot write new file."), cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file://target/data/file?noop=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/file?noop=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
