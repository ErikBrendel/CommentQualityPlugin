commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testTimeoutCalledCorrectly() throws Exception {     MockEndpoint compensate = getMockEndpoint("mock:compensate").     compensate.expectedMessageCount(1).     compensate.expectedHeaderReceived("id", "myid").     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     template.sendBody("direct:saga", "Hello").     end.assertIsSatisfied().     compensate.assertIsSatisfied(). }
false;public;0;20;;@Test public void testTimeoutHasNoEffectIfCompleted() throws Exception {     MockEndpoint compensate = getMockEndpoint("mock:compensate").     compensate.expectedMessageCount(1).     compensate.setResultWaitTime(500).     MockEndpoint complete = getMockEndpoint("mock:complete").     complete.expectedMessageCount(1).     complete.expectedHeaderReceived("id", "myid").     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     template.sendBody("direct:saga-auto", "Hello").     end.assertIsSatisfied().     complete.assertIsSatisfied().     compensate.assertIsNotSatisfied(). }
false;public;0;22;;@Override public void configure() throws Exception {     context.addService(new InMemorySagaService()).     from("direct:saga").saga().timeout(100, TimeUnit.MILLISECONDS).option("id", constant("myid")).completionMode(SagaCompletionMode.MANUAL).compensation("mock:compensate").to("mock:end").     from("direct:saga-auto").saga().timeout(350, TimeUnit.MILLISECONDS).option("id", constant("myid")).compensation("mock:compensate").completion("mock:complete").to("mock:end"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addService(new InMemorySagaService()).             from("direct:saga").saga().timeout(100, TimeUnit.MILLISECONDS).option("id", constant("myid")).completionMode(SagaCompletionMode.MANUAL).compensation("mock:compensate").to("mock:end").             from("direct:saga-auto").saga().timeout(350, TimeUnit.MILLISECONDS).option("id", constant("myid")).compensation("mock:compensate").completion("mock:complete").to("mock:end").         }     }. }
