commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addStartupListener(my).     return context. }
false;public;2;12;;public void onCamelContextStarted(CamelContext context, boolean alreadyStarted) throws Exception {     invoked++.     this.alreadyStarted = alreadyStarted.     if (alreadyStarted) {         // the routes should already been started as we add the listener afterwards         assertTrue(context.getRouteController().getRouteStatus("foo").isStarted()).     } else {         // the routes should not have been started as they start afterwards         assertTrue(context.getRouteController().getRouteStatus("foo").isStopped()).     } }
false;public;0;3;;public int getInvoked() {     return invoked. }
false;public;0;3;;public boolean isAlreadyStarted() {     return alreadyStarted. }
false;public;0;14;;@Test public void testStartupListenerComponent() throws Exception {     // and now the routes are started     assertTrue(context.getRouteController().getRouteStatus("foo").isStarted()).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(1, my.getInvoked()).     assertFalse(my.isAlreadyStarted()). }
false;public;0;17;;@Test public void testStartupListenerComponentAlreadyStarted() throws Exception {     // and now the routes are started     assertTrue(context.getRouteController().getRouteStatus("foo").isStarted()).     MyStartupListener other = new MyStartupListener().     context.addStartupListener(other).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(1, other.getInvoked()).     assertTrue(other.isAlreadyStarted()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").routeId("foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").routeId("foo").to("mock:result").         }     }. }
