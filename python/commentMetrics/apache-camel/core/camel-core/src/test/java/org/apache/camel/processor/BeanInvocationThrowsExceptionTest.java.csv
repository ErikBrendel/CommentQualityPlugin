commented;modifiers;parameterAmount;loc;comment;code
true;public;0;5;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testBeanInvocation() {     int result = (Integer) template.sendBody("direct:input", ExchangePattern.InOut, "Hello London").     assertEquals(1, result). }
false;public;0;11;;@Test public void testBeanInvocationFailure() {     // must create an exchange to get the result as an exchange where we can get the caused exception     Exchange exchange = getMandatoryEndpoint("direct:input").createExchange(ExchangePattern.InOut).     exchange.getIn().setBody("Hello Paris").     Exchange out = template.send("direct:input", exchange).     assertTrue("Should be failed", out.isFailed()).     assertTrue("Should be IllegalArgumentException", out.getException() instanceof IllegalArgumentException).     assertEquals("Forced exception", out.getException().getMessage()). }
false;public;0;3;;public void configure() throws Exception {     from("direct:input").bean(new ExceptionBean()). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:input").bean(new ExceptionBean()).         }     }. }
false;public;1;7;;public int doSomething(String request) throws Exception {     if (request.equals("Hello London")) {         return 1.     } else {         throw new IllegalArgumentException("Forced exception").     } }
