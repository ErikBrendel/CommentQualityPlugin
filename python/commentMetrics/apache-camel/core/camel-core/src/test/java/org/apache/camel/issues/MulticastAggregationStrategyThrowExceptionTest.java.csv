commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testThrowException() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")).     // must use share UoW if we want the error handler to react on exceptions     // from the aggregation strategy also.     from("direct:start").multicast(new MyAggregateBean()).shareUnitOfWork().to("direct:a").to("direct:b").end().     from("direct:a").to("mock:a").     from("direct:b").to("mock:b"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead")).             // must use share UoW if we want the error handler to react on exceptions             // from the aggregation strategy also.             from("direct:start").multicast(new MyAggregateBean()).shareUnitOfWork().to("direct:a").to("direct:b").end().             from("direct:a").to("mock:a").             from("direct:b").to("mock:b").         }     }. }
false;public;2;6;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange != null) {         throw new IllegalArgumentException("Forced").     }     return newExchange. }
