commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testSync() throws Exception {     TimerEndpoint endpoint = context.getEndpoint("timer:foo?synchronous=true", TimerEndpoint.class).     assertTrue("Timer endpoint must be synchronous, but it isn't", endpoint.isSynchronous()). }
false;public;0;5;;@Test public void testAsync() throws Exception {     TimerEndpoint endpoint = context.getEndpoint("timer:foo", TimerEndpoint.class).     assertFalse("Timer endpoint must be asynchronous, but it isn't", endpoint.isSynchronous()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // simulate long task     TimeUnit.MILLISECONDS.sleep(50). }
false;public;0;12;;public void configure() {     from("timer://foo?fixedRate=true&delay=0&period=10").id("timer").threads(threads, threads).maxQueueSize(1).rejectedPolicy(ThreadPoolRejectedPolicy.CallerRuns).to("log:task").to("mock:task").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // simulate long task             TimeUnit.MILLISECONDS.sleep(50).         }     }). }
false;public;0;25;;@Test public void testAsyncRouting() throws Exception {     final int threads = 5.     // should trigger many tasks as we are async     getMockEndpoint("mock:task").expectedMinimumMessageCount(20).     context.addRoutes(new RouteBuilder() {          public void configure() {             from("timer://foo?fixedRate=true&delay=0&period=10").id("timer").threads(threads, threads).maxQueueSize(1).rejectedPolicy(ThreadPoolRejectedPolicy.CallerRuns).to("log:task").to("mock:task").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // simulate long task                     TimeUnit.MILLISECONDS.sleep(50).                 }             }).         }     }).     context.start().     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
