commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testAggregateExpressionPerGroupTimeout() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("G+H+I", "D+E+F", "A+B+C").     // will use fallback timeout (1 sec)     template.sendBodyAndHeader("direct:start", "A", "id", 789).     template.sendBodyAndHeader("direct:start", "B", "id", 789).     template.sendBodyAndHeader("direct:start", "C", "id", 789).     // will use 0.5 sec timeout     Map<String, Object> headers = new HashMap<>().     headers.put("id", 123).     headers.put("timeout", 500).     template.sendBodyAndHeaders("direct:start", "D", headers).     template.sendBodyAndHeaders("direct:start", "E", headers).     template.sendBodyAndHeaders("direct:start", "F", headers).     // will use 0.1 sec timeout     Map<String, Object> headers2 = new HashMap<>().     headers2.put("id", 456).     headers2.put("timeout", 100).     template.sendBodyAndHeaders("direct:start", "G", headers2).     template.sendBodyAndHeaders("direct:start", "H", headers2).     template.sendBodyAndHeaders("direct:start", "I", headers2).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionTimeout(header("timeout")).completionTimeout(1000).completionTimeoutCheckerInterval(10).to("mock:aggregated"). // END SNIPPET: e1 }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionTimeout(header("timeout")).completionTimeout(1000).completionTimeoutCheckerInterval(10).to("mock:aggregated").         // END SNIPPET: e1         }     }. }
