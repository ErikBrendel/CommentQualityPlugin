commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override @Before public void setUp() throws Exception {     File dir = new File("target/data/reports/dosnovol").     deleteDirectory(dir).     path = dir.getAbsolutePath().     if (FileUtil.isWindows()) {         int dp = path.indexOf(":\\").         if (dp > 0) {             path = path.substring(dp + 1).replace('\\', '/').         }     }     super.setUp(). }
false;public;0;10;;@Test public void testRouteFileToFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists(path + "/route/out/hello.txt").     template.sendBodyAndHeader("file://" + path + "/route/poller", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testRouteFromFileOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://" + path + "/from/poller", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testRouteToFileOnly() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists(path + "/to/out/hello.txt").     template.sendBodyAndHeader("direct:report", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("file://" + path + "/route/poller?initialDelay=0&delay=10").to("file://" + path + "/route/out", "mock:result").     from("file://" + path + "/from/poller?initialDelay=0&delay=10").to("mock:result").     from("direct:report").to("file://" + path + "/to/out", "mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://" + path + "/route/poller?initialDelay=0&delay=10").to("file://" + path + "/route/out", "mock:result").             from("file://" + path + "/from/poller?initialDelay=0&delay=10").to("mock:result").             from("direct:report").to("file://" + path + "/to/out", "mock:result").         }     }. }
