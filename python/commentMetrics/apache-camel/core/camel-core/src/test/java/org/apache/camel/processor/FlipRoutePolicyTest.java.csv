commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testFlipRoutePolicyTest() throws Exception {     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedMinimumMessageCount(3).     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMinimumMessageCount(3).     assertMockEndpointsSatisfied(). }
false;public;0;20;;@Override public void configure() throws Exception {     // create the flip route policy     RoutePolicy policy = new FlipRoutePolicy("foo", "bar").     // use the flip route policy in the foo route     from("timer://foo?delay=0&period=10").routeId("foo").routePolicy(policy).setBody().constant("Foo message").to("log:foo").to("mock:foo").     // use the flip route policy in the bar route and do NOT start     // this route on startup     from("timer://bar?delay=0&period=10").routeId("bar").routePolicy(policy).noAutoStartup().setBody().constant("Bar message").to("log:bar").to("mock:bar"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // create the flip route policy             RoutePolicy policy = new FlipRoutePolicy("foo", "bar").             // use the flip route policy in the foo route             from("timer://foo?delay=0&period=10").routeId("foo").routePolicy(policy).setBody().constant("Foo message").to("log:foo").to("mock:foo").             // use the flip route policy in the bar route and do NOT start             // this route on startup             from("timer://bar?delay=0&period=10").routeId("bar").routePolicy(policy).noAutoStartup().setBody().constant("Bar message").to("log:bar").to("mock:bar").         }     }. }
