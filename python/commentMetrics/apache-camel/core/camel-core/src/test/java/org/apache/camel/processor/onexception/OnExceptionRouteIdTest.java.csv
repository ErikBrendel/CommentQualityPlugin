commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testOnExceptionRouteId() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied().     RouteDefinition route = context.getRouteDefinition("foo").     assertNotNull(route).     assertEquals("foo", route.getId()). }
false;public;0;13;;@Override public void configure() throws Exception {     onException(Exception.class).id("myError").maximumRedeliveries(0).handled(true).setHeader("error", constant("true")).end().stop().     from("direct:foo").routeId("foo").to("mock:foo").end(). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).id("myError").maximumRedeliveries(0).handled(true).setHeader("error", constant("true")).end().stop().             from("direct:foo").routeId("foo").to("mock:foo").end().         }     }. }
