commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/gf").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(File.class).to("mock:result"). }
false;public;0;20;;@Test public void testToFile() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(File.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(File.class).     template.sendBodyAndHeader("file://target/data/gf", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;public;0;21;;@Test public void testToString() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(String.class).     mock.message(0).body().isEqualTo("Hello World").     template.sendBodyAndHeader("file://target/data/gf", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(byte[].class).to("mock:result"). }
false;public;0;21;;@Test public void testToBytes() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(byte[].class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(byte[].class).     mock.message(0).body(String.class).isEqualTo("Hello World").     template.sendBodyAndHeader("file://target/data/gf", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(Serializable.class).to("mock:result"). }
false;public;0;21;;@Test public void testToSerializable() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(Serializable.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(Serializable.class).     mock.message(0).body(String.class).isEqualTo("Hello World").     template.sendBodyAndHeader("file://target/data/gf", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(InputStream.class).to("mock:result"). }
false;public;0;21;;@Test public void testToInputStream() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(InputStream.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(InputStream.class).     mock.message(0).body(String.class).isEqualTo("Hello World").     template.sendBodyAndHeader("file://target/data/gf", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     Object body = exchange.getIn().getBody().     assertIsInstanceOf(BufferedInputStream.class, body). }
false;public;0;13;;@Override public void configure() throws Exception {     from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(InputStream.class).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             Object body = exchange.getIn().getBody().             assertIsInstanceOf(BufferedInputStream.class, body).         }     }).to("mock:result"). }
false;public;0;30;;@Test public void testToFileInputStream() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/gf?initialDelay=0&delay=10").convertBodyTo(InputStream.class).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     Object body = exchange.getIn().getBody().                     assertIsInstanceOf(BufferedInputStream.class, body).                 }             }).to("mock:result").         }     }).     context.start().     // a file input stream is wrapped in a buffered so its faster     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).body().isInstanceOf(BufferedInputStream.class).     mock.message(0).body(String.class).isEqualTo("Hello World").     template.sendBodyAndHeader("file://target/data/gf", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
