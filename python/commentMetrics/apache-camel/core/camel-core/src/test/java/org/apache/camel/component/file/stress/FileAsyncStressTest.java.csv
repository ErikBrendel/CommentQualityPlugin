commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override @Before public void setUp() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     super.setUp().     deleteDirectory("target/data/filestress").     for (int i = 0. i < files. i++) {         template.sendBodyAndHeader("file:target/data/filestress", "Hello World", Exchange.FILE_NAME, i + ".txt").     } }
false;public;0;16;;@Test public void testAsyncStress() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     // start route when all the files have been written     context.getRouteController().startRoute("foo").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(100).     mock.setResultWaitTime(30000).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // simulate some work with random time to complete     Random ran = new Random().     int delay = ran.nextInt(50) + 10.     Thread.sleep(delay). }
false;public;0;16;;@Override public void configure() throws Exception {     // leverage the fact that we can limit to max 50 files per poll     // this will result in polling again and potentially picking up files     // that already are in progress     from("file:target/data/filestress?maxMessagesPerPoll=50").routeId("foo").noAutoStartup().threads(10).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // simulate some work with random time to complete             Random ran = new Random().             int delay = ran.nextInt(50) + 10.             Thread.sleep(delay).         }     }).to("mock:result"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // leverage the fact that we can limit to max 50 files per poll             // this will result in polling again and potentially picking up files             // that already are in progress             from("file:target/data/filestress?maxMessagesPerPoll=50").routeId("foo").noAutoStartup().threads(10).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // simulate some work with random time to complete                     Random ran = new Random().                     int delay = ran.nextInt(50) + 10.                     Thread.sleep(delay).                 }             }).to("mock:result").         }     }. }
