commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/files").     super.setUp(). }
false;public;0;16;;@Test public void testConsumeAndDelete() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file://target/data/files", "Bye World", Exchange.FILE_NAME, "report2.txt").     template.sendBodyAndHeader("file://target/data/files", "Hello World", Exchange.FILE_NAME, "report.txt").     template.sendBodyAndHeader("file://target/data/files/2008", "2008 Report", Exchange.FILE_NAME, "report2008.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // file should not exists     assertFalse("File should been deleted", new File("target/data/files/report.txt").exists()). }
false;public;0;4;;public void configure() throws Exception {     from("file://target/data/files/?initialDelay=0&delay=10&fileName=report.txt&delete=true").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/files/?initialDelay=0&delay=10&fileName=report.txt&delete=true").convertBodyTo(String.class).to("mock:result").         }     }. }
