commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testDLCNoRedelivery() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Only the original attempt", 1, counter). }
false;public;0;11;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(0)).     from("direct:start").to("mock:a").process(new MyFailProcessor()).to("mock:b"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(0)).             from("direct:start").to("mock:a").process(new MyFailProcessor()).to("mock:b").         }     }. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     counter++.     throw new IllegalArgumentException("Forced"). }
