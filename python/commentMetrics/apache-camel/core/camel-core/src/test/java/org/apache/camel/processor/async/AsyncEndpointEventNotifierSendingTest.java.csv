commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testAsyncEndpointEventNotifier() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye Camel", reply).     assertMockEndpointsSatisfied().     assertEquals(8, events.size()).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(0)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(1)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(2)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(3)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(4)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(5)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(6)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(7)). }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;public;1;3;;public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent. }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;18;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }          public boolean isEnabled(CamelEvent event) {             return event instanceof ExchangeSendingEvent || event instanceof ExchangeSentEvent.         }          @Override         protected void doStart() throws Exception {         }     }).     return context. }
false;public;0;9;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("mock:before").to("async:bye:camel?delay=250").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("mock:before").to("async:bye:camel?delay=250").to("mock:result").         }     }. }
