commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     weaveByToString("xxx").replace().to("mock:xxx"). }
false;public;0;14;;@Test public void testUnknownId() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 weaveByToString("xxx").replace().to("mock:xxx").             }         }).         fail("Should hve thrown exception").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage(), e.getMessage().startsWith("There are no outputs which matches: xxx in the route")).     } }
false;public;0;6;;@Override public void configure() throws Exception {     // weave nodes in the route which has foo anywhere in their to string representation     // and replace them with the following route path     weaveByToString(".*foo.*").replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;23;;@Test public void testReplace() throws Exception {     // START SNIPPET: e1     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave nodes in the route which has foo anywhere in their to string representation             // and replace them with the following route path             weaveByToString(".*foo.*").replace().multicast().to("mock:a").to("mock:b").         }     }).     // END SNIPPET: e1     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     weaveByToString(".*bar.*").remove(). }
false;public;0;18;;@Test public void testRemove() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByToString(".*bar.*").remove().         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertTrue("Should have removed mock:bar endpoint", context.hasEndpoint("mock:bar") == null). }
false;public;0;4;;@Override public void configure() throws Exception {     weaveByToString(".*bar.*").before().to("mock:a").transform(constant("Bye World")). }
false;public;0;18;;@Test public void testBefore() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByToString(".*bar.*").before().to("mock:a").transform(constant("Bye World")).         }     }).     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     weaveByToString(".*bar.*").after().to("mock:a").transform(constant("Bye World")). }
false;public;0;18;;@Test public void testAfter() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByToString(".*bar.*").after().to("mock:a").transform(constant("Bye World")).         }     }).     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").to("mock:bar").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").to("mock:bar").to("mock:result").         }     }. }
