commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("A", "B", "C").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel", "Bye Camel", "Bye Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("A,B,C").     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied().     // 3 split messages + 1 redelivery attempt     assertEquals(3 + 1, counter). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     if (counter++ == 1) {         throw new IllegalArgumentException("Cannot do this").     } }
false;public;0;21;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     onException(Exception.class).maximumRedeliveries(2).redeliveryDelay(0).     from("direct:start").split(body()).to("mock:before").to("async:bye:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             if (counter++ == 1) {                 throw new IllegalArgumentException("Cannot do this").             }         }     }).to("mock:after").end().to("mock:result"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             onException(Exception.class).maximumRedeliveries(2).redeliveryDelay(0).             from("direct:start").split(body()).to("mock:before").to("async:bye:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     if (counter++ == 1) {                         throw new IllegalArgumentException("Cannot do this").                     }                 }             }).to("mock:after").end().to("mock:result").         }     }. }
