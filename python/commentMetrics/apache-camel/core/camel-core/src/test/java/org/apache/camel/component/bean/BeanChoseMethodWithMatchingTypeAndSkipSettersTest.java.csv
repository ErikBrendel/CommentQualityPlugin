commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/file/order").     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("orderService", service).     return jndi. }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     service.setConverter(context.getTypeConverter()).     return context. }
false;public;0;9;;@Test public void testSendCSVFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:queue:order").     mock.expectedBodiesReceived("66554,123,456").     template.sendBodyAndHeader("file://target/data/file/order", "123,456", Exchange.FILE_NAME, "66554.csv").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testSendXMLData() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:queue:order").     mock.expectedBodiesReceived("77889,667,457").     String xml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "<order id=\"77889\">" + "<customer id=\"667\"/>" + "<confirm>457</confirm>" + "</order>".     template.sendBody("seda:xml", xml).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/file/order?initialDelay=0&delay=10", "seda:xml").bean("orderService").to("mock:queue:order"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/file/order?initialDelay=0&delay=10", "seda:xml").bean("orderService").to("mock:queue:order").         }     }. }
