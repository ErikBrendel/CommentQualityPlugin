commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@After public void tearDown() throws Exception {     super.tearDown().     if (pool != null) {         pool.shutdownNow().     } }
false;public;0;10;;@Test public void testSend() throws Exception {     // hello must come first, as we have delay on the tapped route     result.expectedBodiesReceived("Hello World", "Tapped").     tap.expectedBodiesReceived("Tapped").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     tap = getMockEndpoint("mock:tap").     result = getMockEndpoint("mock:result"). }
false;public;0;16;;public void configure() {     // START SNIPPET: e1     // use a custom thread pool for sending tapped messages     pool = Executors.newFixedThreadPool(2).     from("direct:start").to("log:foo").wireTap("direct:tap").executorService(pool).to("mock:result").     // END SNIPPET: e1     from("direct:tap").delay(1000).setBody().constant("Tapped").to("mock:result", "mock:tap"). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             // use a custom thread pool for sending tapped messages             pool = Executors.newFixedThreadPool(2).             from("direct:start").to("log:foo").wireTap("direct:tap").executorService(pool).to("mock:result").             // END SNIPPET: e1             from("direct:tap").delay(1000).setBody().constant("Tapped").to("mock:result", "mock:tap").         }     }. }
