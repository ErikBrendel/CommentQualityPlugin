commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;16;;@Override public void configure() throws Exception {     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).     from("direct:foo").onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;29;;@Test public void testOnExceptionExactType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).             from("direct:foo").onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).     from("direct:foo").onException(IOException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;29;;@Test public void testOnExceptionDifferentType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).             from("direct:foo").onException(IOException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:foo").onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;30;;@Test public void testOnExceptionSameTypeRouteLast() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     from("direct:foo").onException(IOException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;29;;@Test public void testOnExceptionDifferentTypeRouteLast() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").onException(IOException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")).     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).     from("direct:foo").onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;32;;@Test public void testOnExceptionExactTypeDLC() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead")).             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).             from("direct:foo").onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:dlc").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;24;;@Override public void configure() throws Exception {     from("direct:start").onException(IOException.class).handled(true).to("mock:io").end().onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).     from("direct:foo").onException(IOException.class).handled(true).to("mock:io").end().onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;38;;@Test public void testTwoOnExceptionExactType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(IOException.class).handled(true).to("mock:io").end().onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).             from("direct:foo").onException(IOException.class).handled(true).to("mock:io").end().onException(IllegalArgumentException.class).handled(true).to("mock:foo").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:io").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("mock:foo").     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;26;;@Test public void testOnExceptionRouteAndGlobalExactType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).to("mock:foo").             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     onException(IOException.class).handled(true).to("mock:foo").     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;26;;@Test public void testOnExceptionRouteAndGlobalDifferentType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IOException.class).handled(true).to("mock:foo").             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("mock:foo").     from("direct:start").onException(IOException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")). }
false;public;0;27;;@Test public void testOnExceptionRouteAndOnlyGlobalExactType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).to("mock:foo").             from("direct:start").onException(IOException.class).handled(true).to("mock:damn").end().throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     // this time we pick global scoped as its an exact match, so foo should get the message     getMockEndpoint("mock:damn").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     onException(IOException.class).handled(true).to("mock:foo").     from("direct:start").onException(Exception.class).handled(true).to("mock:damn").end().throwException(new FileNotFoundException("unknown.txt")). }
false;public;0;27;;@Test public void testOnExceptionRouteAndOnlyGlobalBestMatchType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IOException.class).handled(true).to("mock:foo").             from("direct:start").onException(Exception.class).handled(true).to("mock:damn").end().throwException(new FileNotFoundException("unknown.txt")).         }     }).     context.start().     // this time we pick global scoped as its the best match, so foo should get the message     getMockEndpoint("mock:damn").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     onException(IOException.class).handled(true).to("mock:foo").     from("direct:start").onException(IOException.class).handled(true).to("mock:damn").end().throwException(new FileNotFoundException("unknown.txt")). }
false;public;0;27;;@Test public void testOnExceptionRouteBestMatchAndGlobalSameType() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IOException.class).handled(true).to("mock:foo").             from("direct:start").onException(IOException.class).handled(true).to("mock:damn").end().throwException(new FileNotFoundException("unknown.txt")).         }     }).     context.start().     // route scope is preferred over context scoped     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
