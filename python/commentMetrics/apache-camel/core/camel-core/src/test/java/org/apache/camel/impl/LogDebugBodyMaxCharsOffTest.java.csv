commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     context.getGlobalOptions().put(Exchange.LOG_DEBUG_BODY_MAX_CHARS, "-1"). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("logFormatter", new TraceExchangeFormatter()).     return jndi. }
false;public;0;25;;@Test public void testLogBodyMaxLengthTest() throws Exception {     // create a big body     StringBuilder sb = new StringBuilder().     for (int i = 0. i < 1000. i++) {         int value = i % 10.         sb.append(value).     }     String body = sb.toString().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied().     // should be empty body as toString on the message will return an empty body     TraceExchangeFormatter myFormatter = context.getRegistry().lookupByNameAndType("logFormatter", TraceExchangeFormatter.class).     String msg = myFormatter.getMessage().     assertTrue(msg.endsWith("Body: [Body is not logged]]")).     // but body and clipped should not be the same     assertNotSame("clipped log and real body should not be the same", msg, mock.getReceivedExchanges().get(0).getIn().getBody(String.class)). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("mock:result").         }     }. }
