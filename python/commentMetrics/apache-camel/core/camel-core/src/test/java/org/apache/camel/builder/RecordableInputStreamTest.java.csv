commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testReadAndGetTextsBufferPurge() throws Exception {     RecordableInputStream ris = new RecordableInputStream(new ByteArrayInputStream(DATA), "utf-8").     assertEquals(0, ris.size()).     byte[] buf = new byte[64].     // 8 * 64 = 512     for (int i = 0. i < 8. i++) {         // read in 64 bytes         int n = ris.read(buf, 0, buf.length).         assertEquals(64, n).         assertEquals(64, ris.size()).         int offset = i * 64.         // consume the first 32 bytes         String text = ris.getText(32).         assertEquals(new String(DATA, offset, 32, "utf-8"), text).         assertEquals(32, ris.size()).         // consume the other 32 bytes         text = ris.getText(32).         assertEquals(new String(DATA, offset + 32, 32, "utf-8"), text).         assertEquals(0, ris.size()).         ris.record().     }     ris.close(). }
false;public;0;37;;@Test public void testReadAndGetTextsAutoStopRecord() throws Exception {     RecordableInputStream ris = new RecordableInputStream(new ByteArrayInputStream(DATA), "utf-8").     assertEquals(0, ris.size()).     byte[] buf = new byte[64].     // read 64 bytes     int n = ris.read(buf, 0, buf.length).     assertEquals(64, n).     assertEquals(64, ris.size()).     // consume the 64 bytes     String text = ris.getText(64).     assertEquals(new String(DATA, 0, 64, "utf-8"), text).     assertEquals(0, ris.size()).     // read the next 64 bytes     n = ris.read(buf, 0, buf.length).     assertEquals(64, n).     assertEquals(0, ris.size()).     // turn back on the recording and read the next 64 bytes     ris.record().     n = ris.read(buf, 0, buf.length).     assertEquals(64, n).     assertEquals(64, ris.size()).     // consume the 64 bytes     text = ris.getText(64).     // 64 * 2 = 128     assertEquals(new String(DATA, 128, 64, "utf-8"), text).     assertEquals(0, ris.size()).     ris.close(). }
