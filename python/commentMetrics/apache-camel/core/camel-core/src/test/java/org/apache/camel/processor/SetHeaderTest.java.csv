commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testSendMatchingMessage() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(1).     sendBody("direct:start", matchingBody).     assertMockEndpointsSatisfied().     List<Exchange> list = resultEndpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     Object value = exchange.getIn().getHeader("foo").     assertEquals("foo header", "London", value). }
false;public;0;9;;public void configure() {     // START SNIPPET: example     from("direct:start").unmarshal().string().setHeader("foo").xpath("/person[@name='James']/@city", String.class).to("mock:result"). // END SNIPPET: example }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:start").unmarshal().string().setHeader("foo").xpath("/person[@name='James']/@city", String.class).to("mock:result").         // END SNIPPET: example         }     }. }
