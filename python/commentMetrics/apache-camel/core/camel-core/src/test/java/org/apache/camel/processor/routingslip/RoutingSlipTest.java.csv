commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testUpdatingOfRoutingSlipAllDefaults() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived(ANSWER).     y.expectedBodiesReceived(ANSWER).     z.expectedBodiesReceived(ANSWER).     sendBody("direct:a", ROUTING_SLIP_HEADER, ",").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testUpdatingOfRoutingSlipHeaderSet() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived(ANSWER).     y.expectedBodiesReceived(ANSWER).     z.expectedBodiesReceived(ANSWER).     sendBody("direct:b", "aRoutingSlipHeader", ",").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testUpdatingOfRoutingSlipHeaderAndDelimiterSet() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived(ANSWER).     y.expectedBodiesReceived(ANSWER).     z.expectedBodiesReceived(ANSWER).     sendBody("direct:c", "aRoutingSlipHeader", "#").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testBodyExpression() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived("mock:x, mock:y,mock:z").     y.expectedBodiesReceived("mock:x, mock:y,mock:z").     z.expectedBodiesReceived("mock:x, mock:y,mock:z").     template.sendBody("direct:d", "mock:x, mock:y,mock:z").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testMessagePassingThrough() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     sendBody("direct:a", ROUTING_SLIP_HEADER, ",").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testEmptyRoutingSlip() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     sendBodyWithEmptyRoutingSlip().     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testNoRoutingSlip() throws Exception {     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     sendBodyWithNoRoutingSlip().     assertMockEndpointsSatisfied(). }
false;protected;3;4;;protected void sendBody(String endpoint, String header, String delimiter) {     template.sendBodyAndHeader(endpoint, ANSWER, header, "mock:x" + delimiter + "mock:y" + delimiter + "mock:z"). }
false;protected;0;3;;protected void sendBodyWithEmptyRoutingSlip() {     template.sendBodyAndHeader("direct:a", ANSWER, ROUTING_SLIP_HEADER, ""). }
false;protected;0;3;;protected void sendBodyWithNoRoutingSlip() {     template.sendBody("direct:a", ANSWER). }
false;public;0;17;;public void configure() {     // START SNIPPET: e1     from("direct:a").routingSlip(header("myHeader")).to("mock:end").     // END SNIPPET: e1     // START SNIPPET: e2     from("direct:b").routingSlip(ExpressionBuilder.headerExpression("aRoutingSlipHeader")).     // END SNIPPET: e2     // START SNIPPET: e3     from("direct:c").routingSlip(header("aRoutingSlipHeader"), "#").     // END SNIPPET: e3     // START SNIPPET: e4     from("direct:d").routingSlip(body()). // END SNIPPET: e4 }
false;protected;0;21;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:a").routingSlip(header("myHeader")).to("mock:end").             // END SNIPPET: e1             // START SNIPPET: e2             from("direct:b").routingSlip(ExpressionBuilder.headerExpression("aRoutingSlipHeader")).             // END SNIPPET: e2             // START SNIPPET: e3             from("direct:c").routingSlip(header("aRoutingSlipHeader"), "#").             // END SNIPPET: e3             // START SNIPPET: e4             from("direct:d").routingSlip(body()).         // END SNIPPET: e4         }     }. }
