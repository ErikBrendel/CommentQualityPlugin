commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testFooBar() throws Exception {     getMockEndpoint("mock:error").expectedBodiesReceived("bar").     getMockEndpoint("mock:line").expectedBodiesReceived("foo", "bar").     getMockEndpoint("mock:result").expectedBodiesReceived("foo=bar").     String out = template.requestBody("direct:start", "foo,bar", String.class).     assertEquals("foo=bar", out).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testBarFoo() throws Exception {     getMockEndpoint("mock:error").expectedBodiesReceived("bar").     getMockEndpoint("mock:line").expectedBodiesReceived("bar", "foo").     getMockEndpoint("mock:result").expectedBodiesReceived("bar=foo").     String out = template.requestBody("direct:start", "bar,foo", String.class).     assertEquals("bar=foo", out).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     onException(Exception.class).continued(true).logContinued(false).to("log:error", "mock:error").     from("direct:start").split(body(), new SplitAggregationStrategy()).shareUnitOfWork().to("mock:line").filter(simple("${body} == 'bar'")).throwException(new IllegalArgumentException("Forced")).end().end().to("log:result").to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).continued(true).logContinued(false).to("log:error", "mock:error").             from("direct:start").split(body(), new SplitAggregationStrategy()).shareUnitOfWork().to("mock:line").filter(simple("${body} == 'bar'")).throwException(new IllegalArgumentException("Forced")).end().end().to("log:result").to("mock:result").         }     }. }
false;public;2;11;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String s1 = oldExchange.getIn().getBody(String.class).     String s2 = newExchange.getIn().getBody(String.class).     String body = s1 + "=" + s2.     oldExchange.getIn().setBody(body).     return oldExchange. }
