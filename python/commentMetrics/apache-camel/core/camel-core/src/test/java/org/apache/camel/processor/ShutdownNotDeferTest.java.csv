commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/deferred").     super.setUp(). }
false;public;0;17;;@Test public void testShutdownNotDeferred() throws Exception {     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMinimumMessageCount(1).     template.sendBody("seda:foo", "A").     template.sendBody("seda:foo", "B").     template.sendBody("seda:foo", "C").     template.sendBody("seda:foo", "D").     template.sendBody("seda:foo", "E").     assertMockEndpointsSatisfied().     context.stop().     assertTrue("Should have been suspended", CONSUMER_SUSPENDED.get()). }
false;public;0;15;;@Override public void configure() throws Exception {     from("seda:foo").startupOrder(1).to("file://target/data/deferred").     // use file component to transfer files from route 1 -> route 2     MyDeferFileEndpoint defer = new MyDeferFileEndpoint("file://target/data/deferred?initialDelay=0&delay=10", getContext().getComponent("file")).     defer.setFile(new File("target/data/deferred")).     from(defer).startupOrder(2).shutdownRoute(Default).to("mock:bar"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").startupOrder(1).to("file://target/data/deferred").             // use file component to transfer files from route 1 -> route 2             MyDeferFileEndpoint defer = new MyDeferFileEndpoint("file://target/data/deferred?initialDelay=0&delay=10", getContext().getComponent("file")).             defer.setFile(new File("target/data/deferred")).             from(defer).startupOrder(2).shutdownRoute(Default).to("mock:bar").         }     }. }
false;protected;0;5;;@Override protected void doSuspend() throws Exception {     CONSUMER_SUSPENDED.set(true).     super.doSuspend(). }
false;protected;2;10;;@Override protected FileConsumer newFileConsumer(Processor processor, GenericFileOperations<File> operations) {     return new FileConsumer(this, processor, operations, createGenericFileStrategy()) {          @Override         protected void doSuspend() throws Exception {             CONSUMER_SUSPENDED.set(true).             super.doSuspend().         }     }. }
