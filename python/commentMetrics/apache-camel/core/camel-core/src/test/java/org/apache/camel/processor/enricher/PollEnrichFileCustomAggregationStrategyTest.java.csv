commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/enrich").     deleteDirectory("target/data/enrichdata").     super.setUp(). }
false;public;0;21;;@Test public void testPollEnrichCustomAggregationStrategyBody() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Start").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Big file").     mock.expectedFileExists("target/data/enrich/.done/AAA.fin").     mock.expectedFileExists("target/data/enrichdata/.done/AAA.dat").     template.sendBodyAndHeader("file://target/data/enrich", "Start", Exchange.FILE_NAME, "AAA.fin").     log.info("Sleeping for 0.5 sec before writing enrichdata file").     Thread.sleep(500).     template.sendBodyAndHeader("file://target/data/enrichdata", "Big file", Exchange.FILE_NAME, "AAA.dat").     log.info("... write done").     assertMockEndpointsSatisfied().     assertFileDoesNotExists("target/data/enrichdata/AAA.dat.camelLock"). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/enrich?initialDelay=0&delay=10&move=.done").to("mock:start").pollEnrich("file://target/data/enrichdata?initialDelay=0&delay=10&readLock=markerFile&move=.done", 10000, new ReplaceAggregationStrategy()).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/enrich?initialDelay=0&delay=10&move=.done").to("mock:start").pollEnrich("file://target/data/enrichdata?initialDelay=0&delay=10&readLock=markerFile&move=.done", 10000, new ReplaceAggregationStrategy()).to("mock:result").         }     }. }
false;private,static;1;4;;private static void assertFileDoesNotExists(String filename) {     File file = new File(filename).     assertFalse("File " + filename + " should not exist, it should have been deleted after being processed", file.exists()). }
false;public;2;11;;public Exchange aggregate(Exchange original, Exchange resource) {     Object resourceResponse = resource.getIn().getBody().     if (original.getPattern().isOutCapable()) {         original.getOut().setBody(resourceResponse).         original.getProperties().putAll(resource.getProperties()).     } else {         original.getIn().setBody(resourceResponse).         original.getProperties().putAll(resource.getProperties()).     }     return original. }
