commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     // use a pool with 2 concurrent tasks so we cannot run too fast     service = Executors.newFixedThreadPool(2).     super.setUp(). }
false;public;0;5;;@After public void tearDown() throws Exception {     super.tearDown().     service.shutdownNow(). }
false;public;0;9;;@Test public void testSplitParallelNoStopOnExceptionOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Bye World", "Hi World").     template.sendBody("direct:start", "Hello World,Bye World,Hi World").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testSplitParallelNoStopOnExceptionStop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedMinimumMessageCount(0).     // we do NOT stop so we receive all messages except the one that goes kaboom     mock.allMessages().body().isNotEqualTo("Kaboom").     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Goodday World", "Bye World", "Hi World").     try {         template.sendBody("direct:start", "Hello World,Goodday World,Kaboom,Bye World,Hi World").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced", cause.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).parallelProcessing().executorService(service).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Kaboom".equals(body)) {                 throw new IllegalArgumentException("Forced").             }         }     }).to("mock:split"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).parallelProcessing().executorService(service).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Kaboom".equals(body)) {                         throw new IllegalArgumentException("Forced").                     }                 }             }).to("mock:split").         }     }. }
