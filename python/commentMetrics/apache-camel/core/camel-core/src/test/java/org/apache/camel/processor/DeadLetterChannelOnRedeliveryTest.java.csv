commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testOnExceptionAlterMessageBeforeRedelivery() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World3").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testOnExceptionAlterMessageWithHeadersBeforeRedelivery() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World3").     mock.expectedHeaderReceived("foo", "123").     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "123").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     counter = 0. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // force some error so Camel will do redelivery     if (++counter <= 3) {         throw new IllegalArgumentException("Forced by unit test").     } }
false;public;0;23;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // we configure our Dead Letter Channel to invoke     // MyRedeliveryProcessor before a redelivery is     // attempted. This allows us to alter the message before     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(5).onRedelivery(new MyRedeliverProcessor()).redeliveryDelay(0L)).     // END SNIPPET: e1     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // force some error so Camel will do redelivery             if (++counter <= 3) {                 throw new IllegalArgumentException("Forced by unit test").             }         }     }).to("mock:result"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // we configure our Dead Letter Channel to invoke             // MyRedeliveryProcessor before a redelivery is             // attempted. This allows us to alter the message before             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(5).onRedelivery(new MyRedeliverProcessor()).redeliveryDelay(0L)).             // END SNIPPET: e1             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // force some error so Camel will do redelivery                     if (++counter <= 3) {                         throw new IllegalArgumentException("Forced by unit test").                     }                 }             }).to("mock:result").         }     }. }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     // the message is being redelivered so we can alter it     // we just append the redelivery counter to the body     // you can of course do all kind of stuff instead     String body = exchange.getIn().getBody(String.class).     int count = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).     exchange.getIn().setBody(body + count).     // the maximum redelivery was set to 5     int max = exchange.getIn().getHeader(Exchange.REDELIVERY_MAX_COUNTER, Integer.class).     assertEquals(5, max). }
