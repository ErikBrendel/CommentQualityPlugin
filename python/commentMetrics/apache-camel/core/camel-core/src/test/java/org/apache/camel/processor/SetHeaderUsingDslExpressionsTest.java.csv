commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public int hashCode() {     return value1.hashCode() * 10 + value2.hashCode(). }
false;public;1;10;;public boolean equals(Object obj) {     boolean result = false.     if (obj instanceof MyValueClass) {         MyValueClass value = (MyValueClass) obj.         if (this.value1.equals(value.value1) && this.value2.equals(value.value2)) {             result = true.         }     }     return result. }
false;public;0;7;;public void configure() throws Exception {     MyValueClass insteadValue = new MyValueClass("value1", "value2").     from("direct:start").setHeader("foo").constant("ABC").setHeader("value").constant(insteadValue).to("mock:result"). }
false;public;0;19;;@Test public void testUseConstant() throws Exception {     MyValueClass value = new MyValueClass("value1", "value2").     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             MyValueClass insteadValue = new MyValueClass("value1", "value2").             from("direct:start").setHeader("foo").constant("ABC").setHeader("value").constant(insteadValue).to("mock:result").         }     }).     expected.message(0).header("value").isEqualTo(value).     template.sendBodyAndHeader("direct:start", body, "bar", "ABC").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").setHeader("foo", constant("ABC")).to("mock:result"). }
false;public;0;14;;@Test public void testUseConstantParameter() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").setHeader("foo", constant("ABC")).to("mock:result").         }     }).     template.sendBodyAndHeader("direct:start", body, "bar", "ABC").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public Object evaluate(Exchange exchange) {     return "ABC". }
false;public;0;7;;public void configure() throws Exception {     from("direct:start").setHeader("foo").expression(new ExpressionAdapter() {          public Object evaluate(Exchange exchange) {             return "ABC".         }     }).to("mock:result"). }
false;public;0;16;;@Test public void testUseExpression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").setHeader("foo").expression(new ExpressionAdapter() {                  public Object evaluate(Exchange exchange) {                     return "ABC".                 }             }).to("mock:result").         }     }).     template.sendBodyAndHeader("direct:start", body, "bar", "ABC").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").setHeader("foo").header("bar").to("mock:result"). }
false;public;0;14;;@Test public void testUseHeaderExpression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").setHeader("foo").header("bar").to("mock:result").         }     }).     template.sendBodyAndHeader("direct:start", body, "bar", "ABC").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").setHeader("foo").xpath("/personFile/text()").to("mock:result"). }
false;public;0;14;;@Test public void testUseHeaderXpathExpression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").setHeader("foo").xpath("/personFile/text()").to("mock:result").         }     }).     template.sendBody("direct:start", "<personFile>ABC</personFile>").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").setHeader("foo").body().to("mock:result"). }
false;public;0;14;;@Test public void testUseBodyExpression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").setHeader("foo").body().to("mock:result").         }     }).     template.sendBody("direct:start", "ABC").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:start").setHeader("foo").body(String.class).to("mock:result"). }
false;public;0;14;;@Test public void testUseBodyAsTypeExpression() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").setHeader("foo").body(String.class).to("mock:result").         }     }).     template.sendBody("direct:start", "ABC".getBytes()).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     expected = getMockEndpoint("mock:result").     expected.message(0).header("foo").isEqualTo("ABC"). }
