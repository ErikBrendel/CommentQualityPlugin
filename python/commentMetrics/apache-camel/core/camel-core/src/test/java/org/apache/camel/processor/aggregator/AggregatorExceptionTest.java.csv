commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testAggregateAndOnException() throws Exception {     // all goes to error     MockEndpoint mock = getMockEndpoint("mock:error").     mock.expectedMessageCount(2).     for (int c = 0. c <= 10. c++) {         template.sendBodyAndHeader("direct:start", "Hi!" + c, "id", 123).     }     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new java.lang.NoSuchMethodError(exceptionString). }
false;public;0;14;;@Override public void configure() throws Exception {     final String exceptionString = "This is an Error not an Exception".     errorHandler(deadLetterChannel("mock:error")).     from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionSize(5).process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new java.lang.NoSuchMethodError(exceptionString).         }     }). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             final String exceptionString = "This is an Error not an Exception".             errorHandler(deadLetterChannel("mock:error")).             from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionSize(5).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new java.lang.NoSuchMethodError(exceptionString).                 }             }).         }     }. }
