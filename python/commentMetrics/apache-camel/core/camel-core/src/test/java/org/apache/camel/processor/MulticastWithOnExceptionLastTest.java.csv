commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}")).     from("direct:start").multicast().to("direct:foo", "direct:baz", "direct:bar").end().to("mock:result").     from("direct:foo").to("mock:foo").     from("direct:bar").process(new MyProcessor()).to("mock:bar").     from("direct:baz").to("mock:baz"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:handled").transform(simple("Damn ${exception.message}")).             from("direct:start").multicast().to("direct:foo", "direct:baz", "direct:bar").end().to("mock:result").             from("direct:foo").to("mock:foo").             from("direct:bar").process(new MyProcessor()).to("mock:bar").             from("direct:baz").to("mock:baz").         }     }. }
