commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     counter.incrementAndGet(). }
false;public;0;23;;@Test public void testDoneByIndex() throws Exception {     final AtomicInteger counter = new AtomicInteger().     getMockEndpoint("mock:split").whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             counter.incrementAndGet().         }     }).     // notify when the 1st exchange is done (by index)     NotifyBuilder notify = new NotifyBuilder(context).whenDoneByIndex(0).create().     assertEquals(false, notify.matches()).     template.sendBody("seda:foo", "A,B,C").     assertEquals(true, notify.matchesMockWaitTime()).     assertEquals(3, counter.get()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:foo").routeId("foo").delay(500).split(body().tokenize(",")).to("mock:split").end().to("mock:foo"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("foo").delay(500).split(body().tokenize(",")).to("mock:split").end().to("mock:foo").         }     }. }
