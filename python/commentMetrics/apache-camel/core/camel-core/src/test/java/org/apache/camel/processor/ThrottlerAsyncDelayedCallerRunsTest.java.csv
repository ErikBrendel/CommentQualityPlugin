commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testThrottler() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(6).     template.sendBody("seda:start", "A").     template.sendBody("seda:start", "B").     template.sendBody("seda:start", "C").     template.sendBody("seda:start", "D").     template.sendBody("seda:start", "E").     template.sendBody("seda:start", "F").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     // create a profile for the throttler     ThreadPoolProfileBuilder builder = new ThreadPoolProfileBuilder("myThrottler").     builder.maxQueueSize(2).     context.getExecutorServiceManager().registerThreadPoolProfile(builder.build()).     from("seda:start").throttle(1).timePeriodMillis(100).asyncDelayed().executorServiceRef("myThrottler").callerRunsWhenRejected(true).to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // create a profile for the throttler             ThreadPoolProfileBuilder builder = new ThreadPoolProfileBuilder("myThrottler").             builder.maxQueueSize(2).             context.getExecutorServiceManager().registerThreadPoolProfile(builder.build()).             from("seda:start").throttle(1).timePeriodMillis(100).asyncDelayed().executorServiceRef("myThrottler").callerRunsWhenRejected(true).to("mock:result").         }     }. }
