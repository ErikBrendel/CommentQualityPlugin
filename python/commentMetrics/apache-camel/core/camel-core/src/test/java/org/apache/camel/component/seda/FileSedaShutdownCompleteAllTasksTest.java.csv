commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/seda").     super.setUp(). }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     latch.countDown().     if (first) {         // only sleep on first         Thread.sleep(100).     }     first = false. }
false;public;0;24;;@Override public void configure() throws Exception {     from(url).routeId("route1").shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).to("log:delay").to("seda:foo").     from("seda:foo").routeId("route2").to("log:bar").to("mock:bar").process(new Processor() {          boolean first = true.          @Override         public void process(Exchange exchange) throws Exception {             latch.countDown().             if (first) {                 // only sleep on first                 Thread.sleep(100).             }             first = false.         }     }). }
false;public;0;52;;@Test public void testShutdownCompleteAllTasks() throws Exception {     // prepare 5 files to begin with     template.sendBodyAndHeader(url, "A", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader(url, "B", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader(url, "C", Exchange.FILE_NAME, "c.txt").     template.sendBodyAndHeader(url, "D", Exchange.FILE_NAME, "d.txt").     template.sendBodyAndHeader(url, "E", Exchange.FILE_NAME, "e.txt").     final CountDownLatch latch = new CountDownLatch(1).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).routeId("route1").shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).to("log:delay").to("seda:foo").             from("seda:foo").routeId("route2").to("log:bar").to("mock:bar").process(new Processor() {                  boolean first = true.                  @Override                 public void process(Exchange exchange) throws Exception {                     latch.countDown().                     if (first) {                         // only sleep on first                         Thread.sleep(100).                     }                     first = false.                 }             }).         }     }).     context.start().     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     latch.await(5, TimeUnit.SECONDS).     // shutdown during processing     context.stop().     // should route all 5     assertEquals("Should complete all messages", 5, bar.getReceivedCounter()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
