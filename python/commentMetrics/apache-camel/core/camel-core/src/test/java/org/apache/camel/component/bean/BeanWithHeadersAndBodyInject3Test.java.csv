commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public void configure() {     from("direct:start").to("bean:myBean?method=doSomething").to("mock:finish"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").to("bean:myBean?method=doSomething").to("mock:finish").         }     }. }
false;public;0;13;;@Test public void testInOnly() throws Exception {     MockEndpoint end = getMockEndpoint("mock:finish").     end.expectedBodiesReceived("Hello!").     end.message(0).header("out").isNull().     sendBody("direct:start", "Test Input").     assertMockEndpointsSatisfied().     assertNotNull(end.getExchanges().get(0).getIn().getBody()).     assertEquals("Hello!", end.getExchanges().get(0).getIn().getBody()). }
false;public;0;15;;@Test public void testInOut() throws Exception {     MockEndpoint end = getMockEndpoint("mock:finish").     end.expectedBodiesReceived("Hello!").     end.expectedHeaderReceived("out", 123).     String out = template.requestBody("direct:start", "Test Input", String.class).     assertEquals("Hello!", out).     assertMockEndpointsSatisfied().     assertNotNull(end.getExchanges().get(0).getIn().getBody()).     assertEquals("Hello!", end.getExchanges().get(0).getIn().getBody()).     assertEquals(123, end.getExchanges().get(0).getIn().getHeader("out")). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     return answer. }
false;public;3;8;;public String doSomething(@Body String body, @Headers Map<?, ?> headers, @OutHeaders Map<String, Object> outHeaders) {     if (outHeaders != null) {         outHeaders.put("out", 123).     }     return "Hello!". }
