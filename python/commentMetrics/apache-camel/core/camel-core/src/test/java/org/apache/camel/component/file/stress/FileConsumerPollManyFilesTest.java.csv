commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override @Before public void setUp() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     deleteDirectory("target/data/manyfiles").     super.setUp().     // create files     for (int i = 0. i < FILES. i++) {         template.sendBodyAndHeader("file:target/data/manyfiles", "Message " + i, Exchange.FILE_NAME, "file-" + i + ".txt").     } }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:target/data/manyfiles?delete=true").convertBodyTo(String.class).to("mock:result"). }
false;public;0;22;;@Test public void testPollManyFiles() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/manyfiles?delete=true").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(FILES).     assertMockEndpointsSatisfied(). }
