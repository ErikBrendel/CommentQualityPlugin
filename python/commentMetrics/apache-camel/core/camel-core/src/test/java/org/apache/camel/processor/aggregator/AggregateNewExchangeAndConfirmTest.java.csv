commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testAggregateNewExchangeAndConfirm() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:aggregated").     mock.expectedBodiesReceived("ABC").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     assertMockEndpointsSatisfied().     // give UoW time to complete and confirm     await().atMost(1, TimeUnit.SECONDS).until(() -> repo.getId() != null).     // must have confirmed     assertEquals(mock.getReceivedExchanges().get(0).getExchangeId(), repo.getId()). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyNewExchangeAggregationStrategy()).aggregationRepository(repo).completionSize(3).to("mock:aggregated"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyNewExchangeAggregationStrategy()).aggregationRepository(repo).completionSize(3).to("mock:aggregated").         }     }. }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     String body = "".     if (oldExchange != null) {         body = oldExchange.getIn().getBody(String.class).     }     body += newExchange.getIn().getBody(String.class).     newExchange.getIn().setBody(body).     return newExchange. }
false;public;2;5;;@Override public void confirm(CamelContext camelContext, String exchangeId) {     log.info("Confirmed id: " + exchangeId).     this.id = exchangeId. }
false;public;0;3;;public String getId() {     return id. }
