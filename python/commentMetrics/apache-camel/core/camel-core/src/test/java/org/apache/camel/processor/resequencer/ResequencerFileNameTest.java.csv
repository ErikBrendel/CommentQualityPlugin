commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;5;;public void configure() {     // START SNIPPET: example     from("direct:start").resequence(new MyFileNameExpression()).stream().timeout(100).to("mock:result"). // END SNIPPET: example }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:start").resequence(new MyFileNameExpression()).stream().timeout(100).to("mock:result").         // END SNIPPET: example         }     }. }
false;public;0;13;;@Test public void testStreamResequence() throws Exception {     resultEndpoint.expectedBodiesReceived("20090612-D001", "20090612-D003").     template.requestBody("direct:start", "20090612-D003").     template.requestBody("direct:start", "20090612-D001").     resultEndpoint.assertIsSatisfied().     resultEndpoint.reset().     resultEndpoint.expectedBodiesReceived("20090612-D002", "20090615-D001").     template.requestBody("direct:start", "20090615-D001").     template.requestBody("direct:start", "20090612-D002").     resultEndpoint.assertIsSatisfied(). }
