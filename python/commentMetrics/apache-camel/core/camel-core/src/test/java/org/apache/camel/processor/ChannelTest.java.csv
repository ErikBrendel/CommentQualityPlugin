commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testChannel() throws Exception {     counter = 0.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     if (counter++ < 1) {         throw new IllegalArgumentException("Damn").     } }
false;public;0;13;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             if (counter++ < 1) {                 throw new IllegalArgumentException("Damn").             }         }     }).delay(10).to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     if (counter++ < 1) {                         throw new IllegalArgumentException("Damn").                     }                 }             }).delay(10).to("mock:result").         }     }. }
