commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/space").     createDirectory("target/data/space").     super.setUp(). }
false;protected;0;29;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     // create space.properties file     FileOutputStream fos = new FileOutputStream("target/data/space/space.properties").     String cool = "cool.leading= Leading space" + LS + "cool.trailing=Trailing space " + LS + "cool.both= Both leading and trailing space ".     fos.write(cool.getBytes()).     fos.write(LS.getBytes()).     String space = "space.leading=   \\r\\n" + LS + "space.trailing=\\t   " + LS + "space.both=  \\r   \\t  \\n   ".     fos.write(space.getBytes()).     fos.write(LS.getBytes()).     String mixed = "mixed.leading=   Leading space\\r\\n" + LS + "mixed.trailing=Trailing space\\t   " + LS + "mixed.both=  Both leading and trailing space\\r   \\t  \\n   ".     fos.write(mixed.getBytes()).     fos.write(LS.getBytes()).     String empty = "empty.line=                               ".     fos.write(empty.getBytes()).     fos.close().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("file:target/data/space/space.properties").     context.addComponent("properties", pc).     return context. }
false;public;0;16;;@Test public void testMustTrimValues() throws Exception {     assertEquals("Leading space", context.resolvePropertyPlaceholders("{{cool.leading}}")).     assertEquals("Trailing space", context.resolvePropertyPlaceholders("{{cool.trailing}}")).     assertEquals("Both leading and trailing space", context.resolvePropertyPlaceholders("{{cool.both}}")).     assertEquals("\r\n", context.resolvePropertyPlaceholders("{{space.leading}}")).     assertEquals("\t", context.resolvePropertyPlaceholders("{{space.trailing}}")).     assertEquals("\r   \t  \n", context.resolvePropertyPlaceholders("{{space.both}}")).     assertEquals("Leading space\r\n", context.resolvePropertyPlaceholders("{{mixed.leading}}")).     assertEquals("Trailing space\t", context.resolvePropertyPlaceholders("{{mixed.trailing}}")).     assertEquals("Both leading and trailing space\r   \t  \n", context.resolvePropertyPlaceholders("{{mixed.both}}")).     assertEquals("", context.resolvePropertyPlaceholders("{{empty.line}}")). }
