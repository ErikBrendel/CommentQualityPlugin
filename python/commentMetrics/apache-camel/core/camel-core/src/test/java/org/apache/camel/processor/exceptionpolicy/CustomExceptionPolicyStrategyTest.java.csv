commented;modifiers;parameterAmount;loc;comment;code
false;public;3;7;;public OnExceptionDefinition getExceptionPolicy(Map<ExceptionPolicyKey, OnExceptionDefinition> exceptionPolicices, Exchange exchange, Throwable exception) {     // with MyPolicyException to win.     return exceptionPolicices.get(new ExceptionPolicyKey(null, MyPolicyException.class, null)). }
false;public;0;15;;// END SNIPPET e2 @Test public void testCustomPolicy() throws Exception {     MockEndpoint mock = getMockEndpoint(ERROR_QUEUE).     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(MESSAGE_INFO, "Damm my policy exception").     try {         template.sendBody("direct:a", "Hello Camel").         fail("Should have thrown an exception").     } catch (Exception e) {     // expected     }     mock.assertIsSatisfied(). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String s = exchange.getIn().getBody(String.class).     if ("Hello Camel".equals(s)) {         throw new CamelExchangeException("Forced for testing", exchange).     }     exchange.getOut().setBody("Hello World"). }
true;public;0;27;// START SNIPPET e1 ;// START SNIPPET e1 public void configure() throws Exception {     // configure the error handler to use my policy instead of the default from Camel     errorHandler(deadLetterChannel("mock:error").exceptionPolicyStrategy(new MyPolicy())).     onException(MyPolicyException.class).maximumRedeliveries(1).redeliveryDelay(0).setHeader(MESSAGE_INFO, constant("Damm my policy exception")).to(ERROR_QUEUE).     onException(CamelException.class).maximumRedeliveries(3).redeliveryDelay(0).setHeader(MESSAGE_INFO, constant("Damm a Camel exception")).to(ERROR_QUEUE).     // END SNIPPET e1     from("direct:a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String s = exchange.getIn().getBody(String.class).             if ("Hello Camel".equals(s)) {                 throw new CamelExchangeException("Forced for testing", exchange).             }             exchange.getOut().setBody("Hello World").         }     }).to("mock:result"). }
false;protected;0;32;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          // START SNIPPET e1         public void configure() throws Exception {             // configure the error handler to use my policy instead of the default from Camel             errorHandler(deadLetterChannel("mock:error").exceptionPolicyStrategy(new MyPolicy())).             onException(MyPolicyException.class).maximumRedeliveries(1).redeliveryDelay(0).setHeader(MESSAGE_INFO, constant("Damm my policy exception")).to(ERROR_QUEUE).             onException(CamelException.class).maximumRedeliveries(3).redeliveryDelay(0).setHeader(MESSAGE_INFO, constant("Damm a Camel exception")).to(ERROR_QUEUE).             // END SNIPPET e1             from("direct:a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String s = exchange.getIn().getBody(String.class).                     if ("Hello Camel".equals(s)) {                         throw new CamelExchangeException("Forced for testing", exchange).                     }                     exchange.getOut().setBody("Hello World").                 }             }).to("mock:result").         }     }. }
