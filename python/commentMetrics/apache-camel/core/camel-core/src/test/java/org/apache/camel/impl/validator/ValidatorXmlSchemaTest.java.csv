commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void shouldPass() throws Exception {     final String body = "<user><name>Jan</name></user>".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived(body).     template.sendBody("direct:in", body).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void shouldThrowException() throws Exception {     final String body = "<fail/>".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:in", body).         fail("Should throw exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(ValidationException.class, e.getCause()).     }     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     validator().type("xml").withUri("validator:org/apache/camel/impl/validate.xsd").     from("direct:in").inputTypeWithValidate("xml").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             validator().type("xml").withUri("validator:org/apache/camel/impl/validate.xsd").             from("direct:in").inputTypeWithValidate("xml").to("mock:result").         }     }. }
