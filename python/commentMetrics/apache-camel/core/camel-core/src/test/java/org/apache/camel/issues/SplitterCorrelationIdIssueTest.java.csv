commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("A,B,C"). }
false;public;0;33;;@Test public void testSplitCorrelationId() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedMessageCount(3).     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("A,B,C").         }     }).     assertMockEndpointsSatisfied().     // match that all exchange id is unique     String parent = exchange.getExchangeId().     String split1 = mock.getReceivedExchanges().get(0).getExchangeId().     String split2 = mock.getReceivedExchanges().get(1).getExchangeId().     String split3 = mock.getReceivedExchanges().get(2).getExchangeId().     assertNotSame(parent, split1).     assertNotSame(parent, split2).     assertNotSame(parent, split3).     assertNotSame(split1, split2).     assertNotSame(split2, split3).     assertNotSame(split3, split1).     // match correlation id from split -> parent     String corr1 = mock.getReceivedExchanges().get(0).getProperty(Exchange.CORRELATION_ID, String.class).     String corr2 = mock.getReceivedExchanges().get(1).getProperty(Exchange.CORRELATION_ID, String.class).     String corr3 = mock.getReceivedExchanges().get(2).getProperty(Exchange.CORRELATION_ID, String.class).     assertEquals(parent, corr1).     assertEquals(parent, corr2).     assertEquals(parent, corr3). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).to("mock:split"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).to("mock:split").         }     }. }
