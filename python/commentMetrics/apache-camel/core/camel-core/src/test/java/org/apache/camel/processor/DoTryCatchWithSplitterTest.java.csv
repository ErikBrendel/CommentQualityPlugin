commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testTryCatchWithSplitter() throws Exception {     getMockEndpoint("mock:line").expectedBodiesReceived("Tiger", "Camel").     getMockEndpoint("mock:iae").expectedBodiesReceived("Tiger,Camel,Donkey").     template.sendBody("direct:start", "Tiger,Camel,Donkey").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:start").doTry().split(body().tokenize(",")).to("direct:line").endDoTry().doCatch(IllegalArgumentException.class).to("mock:iae").end().     from("direct:line").choice().when(body().contains("Donkey")).throwException(new IllegalArgumentException("Donkey not allowed")).otherwise().to("mock:line"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().split(body().tokenize(",")).to("direct:line").endDoTry().doCatch(IllegalArgumentException.class).to("mock:iae").end().             from("direct:line").choice().when(body().contains("Donkey")).throwException(new IllegalArgumentException("Donkey not allowed")).otherwise().to("mock:line").         }     }. }
