commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/gzip").     super.setUp(). }
false;public;0;16;;@Test public void testGzipFileDelete() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/gzip", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     File in = new File("target/data/gzip/hello.txt").     assertFalse("Should have been deleted " + in, in.exists()).     File out = new File("target/data/gzip/out/hello.txt.gz").     assertTrue("Should have been created " + out, out.exists()). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file:target/data/gzip?initialDelay=0&delay=10&delete=true").marshal().gzip().to("file:target/data/gzip/out?fileName=${file:name}.gz").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/gzip?initialDelay=0&delay=10&delete=true").marshal().gzip().to("file:target/data/gzip/out?fileName=${file:name}.gz").to("mock:result").         }     }. }
