commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myCoolBean", new MyBarSingleton()).     return jndi. }
false;public;0;8;;@Test public void testDumpModelAsXml() throws Exception {     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("myRoute")).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<simple>Hello ${body}</simple>")). }
false;public;0;8;;@Test public void testDumpModelAsXmlXPath() throws Exception {     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("myOtherRoute")).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<xpath>/foo</xpath>")). }
false;public;0;8;;@Test public void testDumpModelAsXmlHeader() throws Exception {     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("myFooRoute")).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<header>bar</header>")). }
false;public;0;9;;@Test public void testDumpModelAsXmlBean() throws Exception {     String xml = ModelHelper.dumpModelAsXml(context, context.getRouteDefinition("myBeanRoute")).     assertNotNull(xml).     log.info(xml).     assertTrue(xml.contains("<setHeader headerName=\"foo\"")).     assertTrue(xml.contains("<method>myCoolBean</method>")). }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").setBody(simple("Hello ${body}")).to("mock:result").     from("direct:other").routeId("myOtherRoute").setBody(xpath("/foo")).to("mock:result").     from("direct:foo").routeId("myFooRoute").setBody(header("bar")).to("mock:result").     from("direct:bean").routeId("myBeanRoute").setHeader("foo", method("myCoolBean")).to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").setBody(simple("Hello ${body}")).to("mock:result").             from("direct:other").routeId("myOtherRoute").setBody(xpath("/foo")).to("mock:result").             from("direct:foo").routeId("myFooRoute").setBody(header("bar")).to("mock:result").             from("direct:bean").routeId("myBeanRoute").setHeader("foo", method("myCoolBean")).to("mock:result").         }     }. }
