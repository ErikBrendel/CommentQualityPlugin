commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testFailedExchangesNotRemoved() throws Exception {     resultEndpoint.expectedBodiesReceived("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damn I cannot handle id 2").     } }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).removeOnFailure(false).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damn I cannot handle id 2").             }         }     }).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).removeOnFailure(false).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damn I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }. }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
