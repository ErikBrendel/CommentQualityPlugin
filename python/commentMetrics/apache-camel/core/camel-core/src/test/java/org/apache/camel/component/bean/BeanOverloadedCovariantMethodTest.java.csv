commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").bean(MySuperBean.class, "hello").to("mock:result"). }
false;public;0;18;;@Test public void testHelloCovariantOverload() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MySuperBean.class, "hello").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Claus from super class").     template.sendBody("direct:start", "Claus").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MySuperBean.class).to("mock:result"). }
false;public;0;19;;@Test public void testHelloCovariantOverloadNoNameOrParameters() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MySuperBean.class).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello null from super class").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MySuperBean.class, "hello").to("mock:result"). }
false;public;0;19;;@Test public void testHelloCovariantOverloadNoParameters() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MySuperBean.class, "hello").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello null from super class").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").bean(MySuperBean.class, "hello(String)").to("mock:result"). }
false;public;0;19;;@Test public void testHelloCovariantOverloadFromParameters() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(MySuperBean.class, "hello(String)").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello null from super class").     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;1;3;;public Object hello(String name) {     return "Hello " + name + " from base class". }
false;public;1;3;;public String hello(String name) {     return "Hello " + name + " from super class". }
