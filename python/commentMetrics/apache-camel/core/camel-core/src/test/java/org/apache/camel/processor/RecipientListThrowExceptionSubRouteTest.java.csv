commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String findEndpoint() {     throw new IllegalArgumentException("Damn"). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).to("mock:error").end().recipientList(method(Router.class)). }
false;public;0;21;;@Test public void testRecipientList() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).to("mock:error").end().recipientList(method(Router.class)).         }     }).     context.start().     MockEndpoint endpoint = getMockEndpoint("mock:error").     endpoint.expectedMessageCount(1).     sendBody("direct:start", "Hello World!").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).to("mock:error").end().to("direct:child").     from("direct:child").errorHandler(noErrorHandler()).recipientList(method(Router.class)). }
false;public;0;25;;@Test public void testRecipientListChild() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).to("mock:error").end().to("direct:child").             from("direct:child").errorHandler(noErrorHandler()).recipientList(method(Router.class)).         }     }).     context.start().     MockEndpoint endpoint = getMockEndpoint("mock:error").     endpoint.expectedMessageCount(1).     sendBody("direct:start", "Hello World!").     assertMockEndpointsSatisfied(). }
