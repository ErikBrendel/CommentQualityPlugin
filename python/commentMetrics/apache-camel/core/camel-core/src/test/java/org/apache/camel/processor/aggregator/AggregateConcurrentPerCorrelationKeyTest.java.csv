commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public Object call() throws Exception {     template.sendBodyAndHeader(uri, "" + count, "id", id).     return null. }
false;public;0;24;;@Test public void testAggregateConcurrentPerCorrelationKey() throws Exception {     ExecutorService service = Executors.newFixedThreadPool(20).     List<Callable<Object>> tasks = new ArrayList<>().     for (int i = 0. i < size. i++) {         final int id = i % 5.         final int count = i.         tasks.add(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBodyAndHeader(uri, "" + count, "id", id).                 return null.             }         }).     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(5).     // submit all tasks     service.invokeAll(tasks).     assertMockEndpointsSatisfied().     service.shutdownNow(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(40).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(40).to("mock:result").         }     }. }
