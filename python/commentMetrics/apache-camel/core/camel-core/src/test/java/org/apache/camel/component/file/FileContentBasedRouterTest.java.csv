commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/cbr").     super.setUp(). }
false;private;0;5;;private void sendFiles() {     template.sendBodyAndHeader("file://target/data/cbr", "Hello London", "CamelFileName", "london.txt").     template.sendBodyAndHeader("file://target/data/cbr", "Hello Paris", "CamelFileName", "paris.txt").     template.sendBodyAndHeader("file://target/data/cbr", "Hello Copenhagen", "CamelFileName", "copenhagen.txt"). }
false;public;0;12;;@Test public void testRouteLondon() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:london").     mock.expectedMessageCount(1).     // should not load the content of the body into memory unless demand for it     // so the type received should be a GenericFile (holder for the file)     mock.message(0).body().isInstanceOf(GenericFile.class).     sendFiles().     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testRouteParis() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:paris").     mock.expectedMessageCount(1).     // should not load the content of the body into memory unless demand for it     // so the type received should be a GenericFile (holder for the file)     mock.message(0).body().isInstanceOf(GenericFile.class).     sendFiles().     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testRouteOther() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:other").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived("CamelFileName", "copenhagen.txt").     // should not load the content of the body into memory unless demand for it     // so the type received should be a GenericFile (holder for the file)     mock.message(0).body().isInstanceOf(GenericFile.class).     sendFiles().     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("file://target/data/cbr?noop=true&initialDelay=0&delay=10").choice().when(header("CamelFileName").isEqualTo("london.txt")).to("mock:london").when(header("CamelFileName").isEqualTo("paris.txt")).to("mock:paris").otherwise().to("mock:other"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/cbr?noop=true&initialDelay=0&delay=10").choice().when(header("CamelFileName").isEqualTo("london.txt")).to("mock:london").when(header("CamelFileName").isEqualTo("paris.txt")).to("mock:paris").otherwise().to("mock:other").         }     }. }
