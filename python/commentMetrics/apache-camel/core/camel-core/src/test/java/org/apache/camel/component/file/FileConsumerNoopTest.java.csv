commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filenoop").     super.setUp(). }
false;public;0;13;;@Test public void testNoop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     template.sendBodyAndHeader("file://target/data/filenoop", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/filenoop", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied().     assertTrue(new File("target/data/filenoop/hello.txt").exists()).     assertTrue(new File("target/data/filenoop/bye.txt").exists()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/filenoop?noop=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filenoop?noop=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
