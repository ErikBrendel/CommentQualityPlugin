commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@SuppressWarnings("unchecked") @Test public void testGrouped() throws Exception {     // START SNIPPET: e2     MockEndpoint result = getMockEndpoint("mock:result").     // we expect 1 messages since we group all we get in using the same correlation key     result.expectedMessageCount(1).     // then we sent all the message at once     template.sendBody("direct:start", "100").     template.sendBody("direct:start", "150").     template.sendBody("direct:start", "130").     template.sendBody("direct:start", "200").     template.sendBody("direct:start", "190").     assertMockEndpointsSatisfied().     Exchange out = result.getExchanges().get(0).     List<Exchange> grouped = out.getIn().getBody(List.class).     assertEquals(5, grouped.size()).     assertEquals("100", grouped.get(0).getIn().getBody(String.class)).     assertEquals("150", grouped.get(1).getIn().getBody(String.class)).     assertEquals("130", grouped.get(2).getIn().getBody(String.class)).     assertEquals("200", grouped.get(3).getIn().getBody(String.class)).     assertEquals("190", grouped.get(4).getIn().getBody(String.class)). // END SNIPPET: e2 }
false;public;0;11;;public void configure() throws Exception {     // START SNIPPET: e1     // our route is aggregating from the direct queue and sending the response to the mock     from("direct:start").aggregate(new GroupedExchangeAggregationStrategy()).constant(true).completionTimeout(500L).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // our route is aggregating from the direct queue and sending the response to the mock             from("direct:start").aggregate(new GroupedExchangeAggregationStrategy()).constant(true).completionTimeout(500L).to("mock:result").         // END SNIPPET: e1         }     }. }
