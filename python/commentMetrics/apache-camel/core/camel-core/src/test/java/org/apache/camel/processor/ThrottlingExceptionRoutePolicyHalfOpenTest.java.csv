commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Before public void setUp() throws Exception {     super.setUp().     this.setUseRouteBuilder(true).     result = getMockEndpoint("mock:result").     context.getShutdownStrategy().setTimeout(1). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String msg = exchange.getIn().getBody(String.class).     exchange.setException(new ThrottlingException(msg)). }
false;public;0;47;;@Test public void testHalfOpenCircuit() throws Exception {     result.reset().     result.expectedMessageCount(2).     List<String> bodies = Arrays.asList("Message One", "Message Two").     result.expectedBodiesReceivedInAnyOrder(bodies).     result.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String msg = exchange.getIn().getBody(String.class).             exchange.setException(new ThrottlingException(msg)).         }     }).     // send two messages which will fail     sendMessage("Message One").     sendMessage("Message Two").     final ServiceSupport consumer = (ServiceSupport) context.getRoute("foo").getConsumer().     // wait long enough to have the consumer suspended     await().atMost(2, TimeUnit.SECONDS).until(consumer::isSuspended).     // send more messages     // but never should get there     // due to open circuit     log.debug("sending message three").     sendMessage("Message Three").     assertMockEndpointsSatisfied().     result.reset().     result.expectedMessageCount(1).     bodies = Arrays.asList("Message Four").     result.expectedBodiesReceivedInAnyOrder(bodies).     // wait long enough to have the consumer resumed     await().atMost(2, TimeUnit.SECONDS).until(consumer::isStarted).     // send message     // should get through     log.debug("sending message four").     sendMessage("Message Four").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     int threshold = 2.     long failureWindow = 30.     long halfOpenAfter = 250.     ThrottlingExceptionRoutePolicy policy = new ThrottlingExceptionRoutePolicy(threshold, failureWindow, halfOpenAfter, null).     from(url).routeId("foo").routePolicy(policy).to("log:foo?groupSize=10").to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             int threshold = 2.             long failureWindow = 30.             long halfOpenAfter = 250.             ThrottlingExceptionRoutePolicy policy = new ThrottlingExceptionRoutePolicy(threshold, failureWindow, halfOpenAfter, null).             from(url).routeId("foo").routePolicy(policy).to("log:foo?groupSize=10").to("mock:result").         }     }. }
false;protected;1;7;;protected void sendMessage(String bodyText) {     try {         template.sendBody(url, bodyText).     } catch (Exception e) {         log.debug("Error sending:" + e.getCause().getMessage()).     } }
