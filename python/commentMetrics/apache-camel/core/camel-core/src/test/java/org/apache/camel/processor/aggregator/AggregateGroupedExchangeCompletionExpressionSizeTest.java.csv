commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testGrouped() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(2).     template.sendBodyAndHeader("direct:start", "A", "size", 3).     template.sendBodyAndHeader("direct:start", "B", "size", 3).     template.sendBodyAndHeader("direct:start", "C", "size", 3).     template.sendBodyAndHeader("direct:start", "D", "size", 3).     template.sendBodyAndHeader("direct:start", "E", "size", 3).     template.sendBodyAndHeader("direct:start", "F", "size", 3).     assertMockEndpointsSatisfied(). }
false;public;0;7;;public void configure() throws Exception {     from("direct:start").aggregate(constant(true)).completionSize(header("size")).eagerCheckCompletion().aggregationStrategy(groupedExchange()).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").aggregate(constant(true)).completionSize(header("size")).eagerCheckCompletion().aggregationStrategy(groupedExchange()).to("mock:result").         }     }. }
