commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello Camel"). }
false;public;0;20;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     Exchange reply = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello Camel").         }     }).     assertNotNull(reply).     assertTrue(reply.isFailed()).     assertNotNull(reply.getException()).     assertEquals("Faulty Bye Camel", reply.getException().getMessage()).     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName().     exchange.getOut().setFault(true).     exchange.getOut().setBody("Faulty Bye Camel"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;25;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     // enable handle fault to ensure it works using async API     from("direct:start").handleFault().to("mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("async:bye:camel").to("log:after").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().             exchange.getOut().setFault(true).             exchange.getOut().setBody("Faulty Bye Camel").         }     }).to("mock:after").to("mock:result"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             // enable handle fault to ensure it works using async API             from("direct:start").handleFault().to("mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:camel").to("log:after").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                     exchange.getOut().setFault(true).                     exchange.getOut().setBody("Faulty Bye Camel").                 }             }).to("mock:after").to("mock:result").         }     }. }
