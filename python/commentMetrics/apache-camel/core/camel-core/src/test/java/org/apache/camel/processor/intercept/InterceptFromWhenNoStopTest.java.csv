commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testInterceptorWhen() throws Exception {     getMockEndpoint("mock:goofy").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(1).     sendBody("direct:start", "Hello World!").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testInterceptorWhenGoofy() throws Exception {     getMockEndpoint("mock:goofy").expectedMessageCount(1).     getMockEndpoint("mock:end").expectedMessageCount(1).     sendBody("direct:start", "Hello Goofy").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptFrom().when(simple("${body} contains 'Goofy'")).to("mock:goofy").     from("direct:start").to("mock:end"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptFrom().when(simple("${body} contains 'Goofy'")).to("mock:goofy").             from("direct:start").to("mock:end").         }     }. }
