commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSendLotsOfMessages() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(messageCount).     for (int i = 0. i < messageCount. i++) {         template.sendBody("seda:a", "<message>" + i + "</message>").     }     resultEndpoint.assertIsSatisfied(). }
false;public;0;3;;public void run() {     template.sendBody("direct:a", "<message>payload</message>"). }
false;public;0;21;;@Test public void testSendLotsOfMessagesSimultaneously() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(messageCount).     ExecutorService executor = Executors.newFixedThreadPool(messageCount).     for (int i = 0. i < messageCount. i++) {         executor.execute(new Runnable() {              public void run() {                 template.sendBody("direct:a", "<message>payload</message>").             }         }).     }     // let's wait for the exchanges to arrive     resultEndpoint.assertIsSatisfied().     context.stop().     executor.shutdownNow(). }
false;public;0;7;;public void configure() {     // START SNIPPET: ex     from("seda:a").throttle(3).timePeriodMillis(INTERVAL).asyncDelayed().to("log:result", "mock:result").     // END SNIPPET: ex     from("direct:a").throttle(3).timePeriodMillis(INTERVAL).asyncDelayed().to("log:result", "mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: ex             from("seda:a").throttle(3).timePeriodMillis(INTERVAL).asyncDelayed().to("log:result", "mock:result").             // END SNIPPET: ex             from("direct:a").throttle(3).timePeriodMillis(INTERVAL).asyncDelayed().to("log:result", "mock:result").         }     }. }
