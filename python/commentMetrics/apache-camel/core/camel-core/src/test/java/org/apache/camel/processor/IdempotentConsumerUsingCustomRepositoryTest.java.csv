commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(header("messageId"), customRepo).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(header("messageId"), customRepo).to("mock:result").         }     }. }
false;public;0;30;;@Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     resultEndpoint.expectedBodiesReceived("one", "two", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     // 4 is already pre added in custom repo so it will be regarded as duplicate     sendMessage("4", "four").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied().     // and the custom repo now contains those keys     assertTrue(customRepo.contains("1")).     assertTrue(customRepo.contains("2")).     assertTrue(customRepo.contains("3")).     assertTrue(customRepo.contains("4")).     assertFalse(customRepo.contains("5")).     customRepo.clear().     assertFalse(customRepo.contains("1")).     assertFalse(customRepo.contains("2")).     assertFalse(customRepo.contains("3")).     assertFalse(customRepo.contains("4")).     assertFalse(customRepo.contains("5")). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;10;;protected void sendMessage(final Object messageId, final Object body) {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;1;8;;public boolean add(String key) {     if (cache.containsKey(key)) {         return false.     } else {         cache.put(key, key).         return true.     } }
false;public;0;4;;@Override public void clear() {     cache.clear(). }
false;public;1;3;;public boolean contains(String key) {     return cache.containsKey(key). }
false;public;1;3;;public boolean remove(String key) {     return cache.remove(key) != null. }
false;public;1;4;;public boolean confirm(String key) {     // noop     return true. }
false;public;0;3;;public void start() throws Exception { // noop }
false;public;0;3;;public void stop() throws Exception { // noop }
