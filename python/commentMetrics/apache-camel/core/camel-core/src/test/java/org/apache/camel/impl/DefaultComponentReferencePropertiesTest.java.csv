commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;0;3;;public Producer createProducer() throws Exception {     return null. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;1;3;;public void setExpression(List<?> expressions) { // do nothing }
false;public;1;3;;public void setExpression(Expression expression) {     this.expression = expression. }
false;public;1;3;;public void setExpression(String expression) {     stringExpression = expression. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;3;;public void setSpecial(Expression special) {     this.special = special. }
false;protected;3;5;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     MyEndpoint result = new MyEndpoint(uri, this).     setProperties(result, parameters).     return result. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myExpression", ExpressionBuilder.bodyExpression()).     return jndi. }
false;protected;3;9;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     assertEquals("foo://?name=Christian", uri).     assertEquals("", remaining).     assertEquals(1, parameters.size()).     assertEquals("Christian", parameters.get("name")).     return null. }
false;public;0;16;;@Test public void testEmptyPath() throws Exception {     DefaultComponent component = new DefaultComponent(context) {          @Override         protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {             assertEquals("foo://?name=Christian", uri).             assertEquals("", remaining).             assertEquals(1, parameters.size()).             assertEquals("Christian", parameters.get("name")).             return null.         }     }.     component.createEndpoint("foo://?name=Christian"). }
false;public;0;9;;@Test public void testOnlyStringSetter() throws Exception {     MyComponent component = new MyComponent(context).     MyEndpoint endpoint = (MyEndpoint) component.createEndpoint("foo://?name=Claus").     assertNotNull(endpoint).     assertEquals("Claus", endpoint.name).     assertNull(endpoint.expression).     assertNull(endpoint.stringExpression). }
false;public;0;9;;@Test public void testCallStringSetter() throws Exception {     MyComponent component = new MyComponent(context).     MyEndpoint endpoint = (MyEndpoint) component.createEndpoint("foo://?expression=hello").     assertNotNull(endpoint).     assertEquals("hello", endpoint.stringExpression).     assertNull(endpoint.expression).     assertNull(endpoint.name). }
false;public;0;9;;@Test public void testNoBeanInRegistryThenCallStringSetter() throws Exception {     MyComponent component = new MyComponent(context).     MyEndpoint endpoint = (MyEndpoint) component.createEndpoint("foo://?expression=#hello").     assertNotNull(endpoint).     assertEquals("#hello", endpoint.stringExpression).     assertNull(endpoint.expression).     assertNull(endpoint.name). }
false;public;0;14;;@Test public void testCallExpressionSetter() throws Exception {     MyComponent component = new MyComponent(context).     MyEndpoint endpoint = (MyEndpoint) component.createEndpoint("foo://?expression=#myExpression").     assertNotNull(endpoint).     assertNull(endpoint.stringExpression).     assertNotNull(endpoint.expression).     assertNull(endpoint.name).     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     assertEquals("Hello World", endpoint.expression.evaluate(exchange, String.class)). }
false;public;0;15;;@Test public void testCallSingleExpressionSetter() throws Exception {     MyComponent component = new MyComponent(context).     MyEndpoint endpoint = (MyEndpoint) component.createEndpoint("foo://?special=#myExpression").     assertNotNull(endpoint).     assertNull(endpoint.stringExpression).     assertNull(endpoint.expression).     assertNull(endpoint.name).     assertNotNull(endpoint.special).     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     assertEquals("Hello World", endpoint.special.evaluate(exchange, String.class)). }
false;public;0;10;;@Test public void testTypoInParameter() throws Exception {     MyComponent component = new MyComponent(context).     try {         component.createEndpoint("foo://?xxxexpression=#hello").         fail("Should have throw a ResolveEndpointFailedException").     } catch (ResolveEndpointFailedException e) {     // ok     } }
false;public;0;10;;@Test public void testTypoInParameterValue() throws Exception {     MyComponent component = new MyComponent(context).     try {         component.createEndpoint("foo://?special=#dummy").         fail("Should have throw a IllegalArgumentException").     } catch (IllegalArgumentException e) {     // ok     } }
