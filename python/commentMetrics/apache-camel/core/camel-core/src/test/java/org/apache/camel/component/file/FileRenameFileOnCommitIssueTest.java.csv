commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/renameissue").     super.setUp(). }
false;public;0;10;;@Test public void testFileRenameFileOnCommitIssue() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/renameissue/.camel/hello.txt").     template.sendBodyAndHeader("file://target/data/renameissue", "World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     log.info("The exchange's IN body as String is {}", exchange.getIn().getBody(String.class)). }
false;public;0;15;;@Override public void configure() throws Exception {     from("file://target/data/renameissue?noop=false&initialDelay=0&delay=10").setProperty("PartitionID").simple("${file:name}").convertBodyTo(String.class).inOut("direct:source").process(new Processor() {          public void process(Exchange exchange) throws Exception {             log.info("The exchange's IN body as String is {}", exchange.getIn().getBody(String.class)).         }     }).to("mock:result").     from("direct:source").transform(body().prepend("Hello ")). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/renameissue?noop=false&initialDelay=0&delay=10").setProperty("PartitionID").simple("${file:name}").convertBodyTo(String.class).inOut("direct:source").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     log.info("The exchange's IN body as String is {}", exchange.getIn().getBody(String.class)).                 }             }).to("mock:result").             from("direct:source").transform(body().prepend("Hello ")).         }     }. }
