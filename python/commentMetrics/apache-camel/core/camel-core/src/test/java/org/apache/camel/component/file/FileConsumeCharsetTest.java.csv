commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/files").     super.setUp().     template.sendBodyAndHeader("file://target/data/files?charset=UTF-8", "Hello World \u4f60\u597d", Exchange.FILE_NAME, "report.txt"). }
false;public;0;12;;@Test public void testConsumeAndDelete() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World \u4f60\u597d").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // file should not exists     assertFalse("File should been deleted", new File("target/data/files/report.txt").exists()). }
false;public;0;5;;public void configure() throws Exception {     from("file://target/data/files/?initialDelay=0&delay=10&fileName=report.txt&delete=true&charset=UTF-8").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/files/?initialDelay=0&delay=10&fileName=report.txt&delete=true&charset=UTF-8").convertBodyTo(String.class).to("mock:result").         }     }. }
