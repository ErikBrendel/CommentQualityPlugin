commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     route = "". }
false;public;0;21;;@Test public void testAsyncRouteWithError() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedMessageCount(0).     // send a request reply to the direct start endpoint     try {         template.requestBody("direct:start", "Hello").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         // expected an execution exception         assertEquals("Damn forced by unit test", e.getCause().getMessage()).     }     // we should run before the async processor that sets B     route += "A".     assertMockEndpointsSatisfied().     assertEquals("BA", route). }
false;public;0;22;;@Test public void testAsyncRouteWithTypeConverted() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedMessageCount(0).     // future type converter that will wait for the response     try {         template.requestBody("direct:start", "Hello", String.class).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         // expected an execution exception         assertEquals("Damn forced by unit test", e.getCause().getMessage()).     }     // we should wait for the async response as we ask for the result as a String body     route += "A".     assertMockEndpointsSatisfied().     assertEquals("BA", route). }
false;public;0;19;;@Override public void configure() throws Exception {     // we start this route async     from("direct:start").transform(body().append(" World")).threads().to("mock:foo").delay(100).process(new MyProcessor()).to("mock:result"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // we start this route async             from("direct:start").transform(body().append(" World")).threads().to("mock:foo").delay(100).process(new MyProcessor()).to("mock:result").         }     }. }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     route += "B".     assertEquals("Hello World", exchange.getIn().getBody()).     throw new IllegalArgumentException("Damn forced by unit test"). }
