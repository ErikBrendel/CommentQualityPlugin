commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMulticastNoStopOnExceptionOk() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello").     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello").     getMockEndpoint("mock:baz").expectedBodiesReceived("Hello").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello").     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testMulticastNoStopOnExceptionStop() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Kaboom").     getMockEndpoint("mock:bar").expectedMessageCount(0).     // we do not stop so we should continue and thus baz receives 1 message     getMockEndpoint("mock:baz").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Kaboom").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").multicast().to("direct:foo", "direct:bar", "direct:baz").end().to("mock:result").     from("direct:foo").to("mock:foo").     from("direct:bar").process(new MyProcessor()).to("mock:bar").     from("direct:baz").to("mock:baz"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().to("direct:foo", "direct:bar", "direct:baz").end().to("mock:result").             from("direct:foo").to("mock:foo").             from("direct:bar").process(new MyProcessor()).to("mock:bar").             from("direct:baz").to("mock:baz").         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Forced").     } }
