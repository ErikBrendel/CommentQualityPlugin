commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCheckHeader() throws Exception {     String body = "<one/>".     x.expectedBodiesReceived(body).     // The SpringChoiceTest.java can't setup the header by Spring configure file     // x.expectedHeaderReceived("name", "a").     expectsMessageCount(0, y, z).     sendMessage("bar", body).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testCheckBody() throws Exception {     String body = "<two/>".     y.expectedBodiesReceived(body).     expectsMessageCount(0, x, z).     sendMessage("cheese", body).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testSetXpathProperty() throws Exception {     String body = "<soapenv:Body xmlns:ns=\"http://myNamesapce\" xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\">" + "<ns:Addresses> <Address>address1</Address>" + " <Address>address2</Address> <Address>address3</Address>" + " <Address>address4</Address> </ns:Addresses> </soapenv:Body>".     end.reset().     end.expectedMessageCount(1).     template.sendBody("direct:setProperty", body).     assertMockEndpointsSatisfied().     Exchange exchange = end.getExchanges().get(0).     NodeList nodeList = exchange.getProperty("Addresses", NodeList.class).     assertNotNull("The node list should not be null", nodeList). }
false;protected;2;3;;protected void sendMessage(final Object headerValue, final Object body) throws Exception {     template.sendBodyAndHeader("direct:start", body, "foo", headerValue). }
false;public;0;10;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z").     end = getMockEndpoint("mock:end"). }
false;public;0;13;;public void configure() {     // START SNIPPET: ex     from("direct:start").choice().when().xpath("in:header('foo') = 'bar'").to("mock:x").when().xpath("in:body() = '<two/>'").to("mock:y").otherwise().to("mock:z").     // END SNIPPET: ex     from("direct:setProperty").setProperty("Addresses").xpath("//Address", NodeList.class).to("mock:end"). }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: ex             from("direct:start").choice().when().xpath("in:header('foo') = 'bar'").to("mock:x").when().xpath("in:body() = '<two/>'").to("mock:y").otherwise().to("mock:z").             // END SNIPPET: ex             from("direct:setProperty").setProperty("Addresses").xpath("//Address", NodeList.class).to("mock:end").         }     }. }
