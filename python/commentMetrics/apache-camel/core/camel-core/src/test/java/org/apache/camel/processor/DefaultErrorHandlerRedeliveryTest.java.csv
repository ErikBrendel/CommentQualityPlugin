commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testRedeliveryTest() throws Exception {     counter = 0.     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {     // expected     }     // One call + 2 re-deliveries     assertEquals(3, counter). }
false;public;0;13;;@Test public void testNoRedeliveriesTest() throws Exception {     counter = 0.     try {         template.sendBody("direct:no", "Hello World").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {     // expected     }     // One call     assertEquals(1, counter). }
false;public;0;12;;@Test public void testOneRedeliveryTest() throws Exception {     counter = 0.     try {         template.sendBody("direct:one", "Hello World").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {     // expected     }     // One call + 1 re-delivery     assertEquals(2, counter). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     throw new Exception("Forced exception by unit test"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     throw new Exception("Forced exception by unit test"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     throw new Exception("Forced exception by unit test"). }
false;public;0;27;;public void configure() throws Exception {     from("direct:start").errorHandler(defaultErrorHandler().redeliveryDelay(0).maximumRedeliveries(2)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             throw new Exception("Forced exception by unit test").         }     }).     from("direct:no").process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             throw new Exception("Forced exception by unit test").         }     }).     from("direct:one").errorHandler(defaultErrorHandler().redeliveryDelay(0).maximumRedeliveries(1)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             throw new Exception("Forced exception by unit test").         }     }). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").errorHandler(defaultErrorHandler().redeliveryDelay(0).maximumRedeliveries(2)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     throw new Exception("Forced exception by unit test").                 }             }).             from("direct:no").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     throw new Exception("Forced exception by unit test").                 }             }).             from("direct:one").errorHandler(defaultErrorHandler().redeliveryDelay(0).maximumRedeliveries(1)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     throw new Exception("Forced exception by unit test").                 }             }).         }     }. }
