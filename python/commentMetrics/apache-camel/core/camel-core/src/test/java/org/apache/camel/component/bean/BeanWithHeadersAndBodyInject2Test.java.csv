commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.setProperty("p1", "abc").     exchange.setProperty("p2", 123).     Message in = exchange.getIn().     // add users hashmap     in.setHeader("users", users).     in.setBody("TheBody"). }
false;public;0;21;;@Test public void testCannotBindToParameter() throws Exception {     // Create hashmap for testing purpose     users.put("charles", new User("Charles", "43")).     users.put("claus", new User("Claus", "33")).     Exchange out = template.send("direct:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setProperty("p1", "abc").             exchange.setProperty("p2", 123).             Message in = exchange.getIn().             // add users hashmap             in.setHeader("users", users).             in.setBody("TheBody").         }     }).     assertTrue("Should fail", out.isFailed()).     assertIsInstanceOf(RuntimeCamelException.class, out.getException()).     assertIsInstanceOf(NoTypeConversionAvailableException.class, out.getException().getCause()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("TheBody").     exchange.getIn().setHeader("users", list). }
false;public;0;17;;@Test public void testBindToParameter() throws Exception {     final List<String> list = new ArrayList<>().     list.add("Charles").     list.add("Claus").     Exchange out = template.send("direct:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("TheBody").             exchange.getIn().setHeader("users", list).         }     }).     assertFalse("Should not fail", out.isFailed()).     assertSame(list, myBean.users).     assertEquals("TheBody", myBean.body). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("TheBody").     exchange.getIn().setHeader("users", null). }
false;public;0;12;;@Test public void testBindToParameterIsNullValue() throws Exception {     Exchange out = template.send("direct:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("TheBody").             exchange.getIn().setHeader("users", null).         }     }).     assertFalse("Should not fail", out.isFailed()).     assertEquals("TheBody", myBean.body). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     return answer. }
false;public;0;3;;public void configure() {     from("direct:in").to("bean:myBean?method=myMethod"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:in").to("bean:myBean?method=myMethod").         }     }. }
false;public;2;6;;public void myMethod(@Header(value = "users") List<User> users, Object body) {     LOG.info("myMethod() method called on " + this).     LOG.info(" users " + users).     this.body = body.     this.users = users. }
