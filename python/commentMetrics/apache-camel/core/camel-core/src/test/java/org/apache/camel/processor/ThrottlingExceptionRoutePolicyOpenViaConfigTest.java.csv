commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     this.createPolicy().     super.setUp().     this.setUseRouteBuilder(true).     result = getMockEndpoint("mock:result").     context.getShutdownStrategy().setTimeout(1). }
false;protected;0;7;;protected void createPolicy() {     int threshold = 2.     long failureWindow = 30.     long halfOpenAfter = 100.     boolean keepOpen = false.     policy = new ThrottlingExceptionRoutePolicy(threshold, failureWindow, halfOpenAfter, null, keepOpen). }
false;public;0;47;;@Test public void testThrottlingRoutePolicyStartWithAlwaysOpenOffThenToggle() throws Exception {     // should go through b/c circuit is closed     for (int i = 0. i < size. i++) {         template.sendBody(url, "MessageRound1 " + i).         Thread.sleep(3).     }     result.expectedMessageCount(size).     result.setResultWaitTime(1000).     assertMockEndpointsSatisfied().     // set keepOpen to true     policy.setKeepOpen(true).     // trigger opening circuit     // by sending another message     template.sendBody(url, "MessageTrigger").     // give time for circuit to open     Thread.sleep(500).     // should NOT go through b/c circuit is open     for (int i = 0. i < size. i++) {         template.sendBody(url, "MessageRound2 " + i).         Thread.sleep(3).     }     // gives time for policy half open check to run every second     // and should not close b/c keepOpen is true     Thread.sleep(500).     result.expectedMessageCount(size + 1).     result.setResultWaitTime(1000).     assertMockEndpointsSatisfied().     // set keepOpen to false     policy.setKeepOpen(false).     // gives time for policy half open check to run every second     // and it should close b/c keepOpen is false     result.expectedMessageCount(size * 2 + 1).     result.setResultWaitTime(1000).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from(url).routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result").         }     }. }
