commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testTwoMulticast() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("ABCD", "ABCD").     mock.expectsAscending().header("id").     template.sendBodyAndHeader("direct:start", "", "id", 1).     template.sendBodyAndHeader("direct:start", "", "id", 2).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testMoreMulticast() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     mock.expectsAscending().header("id").     for (int i = 0. i < 20. i++) {         template.sendBodyAndHeader("direct:start", "", "id", i).     }     assertMockEndpointsSatisfied(). }
false;public;0;4;;public Object call() throws Exception {     template.sendBodyAndHeader("direct:start", "", "id", index).     return null. }
false;public;0;21;;@Test public void testConcurrencyParallelMulticast() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(20).     // this time we cannot expect in order but there should be no duplicates     mock.expectsNoDuplicates(header("id")).     ExecutorService executor = Executors.newFixedThreadPool(10).     for (int i = 0. i < 20. i++) {         final int index = i.         executor.submit(new Callable<Object>() {              public Object call() throws Exception {                 template.sendBodyAndHeader("direct:start", "", "id", index).                 return null.             }         }).     }     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
false;public;0;27;;@Override public void configure() throws Exception {     from("direct:start").multicast(new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String body = oldExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).             return oldExchange.         }     }).parallelProcessing().to("direct:a", "direct:b", "direct:c", "direct:d").end().to("mock:result").     from("direct:a").delay(20).setBody(body().append("A")).     from("direct:b").setBody(body().append("B")).     from("direct:c").delay(50).setBody(body().append("C")).     from("direct:d").delay(10).setBody(body().append("D")). }
false;protected;0;32;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast(new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String body = oldExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).                     return oldExchange.                 }             }).parallelProcessing().to("direct:a", "direct:b", "direct:c", "direct:d").end().to("mock:result").             from("direct:a").delay(20).setBody(body().append("A")).             from("direct:b").setBody(body().append("B")).             from("direct:c").delay(50).setBody(body().append("C")).             from("direct:d").delay(10).setBody(body().append("D")).         }     }. }
