commented;modifiers;parameterAmount;loc;comment;code
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.getOut().copyFrom(exchange.getIn()).     Integer counter = exchange.getIn().getHeader("copy-counter", Integer.class).     if (counter == null) {         counter = 0.     }     exchange.getOut().setHeader("copy-counter", counter + 1). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setFault(true).     exchange.getOut().setBody(exchange.getIn().getBody()).     Integer counter = exchange.getIn().getHeader("copy-counter", Integer.class).     if (counter == null) {         counter = 0.     }     exchange.getOut().setHeader("copy-counter", counter + 1). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(1).     in.setHeader("foo", "bar"). }
false;public;0;17;;@Test public void testSendMessageThroughAPipeline() throws Exception {     resultEndpoint.expectedBodiesReceived(4).     Exchange results = template.request("direct:a", new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(1).             in.setHeader("foo", "bar").         }     }).     resultEndpoint.assertIsSatisfied().     assertEquals("Result body", 4, results.getOut().getBody()). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody("Hello World"). }
false;public;0;11;;@Test public void testResultsReturned() throws Exception {     Exchange exchange = template.request("direct:b", new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("Hello World").         }     }).     assertEquals("Hello World", exchange.getOut().getBody()).     assertEquals(3, exchange.getOut().getHeader("copy-counter")). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody("Fault Message"). }
true;public;0;13;/**  * Disabled for now until we figure out fault processing in the pipeline.  *  * @throws Exception  */ ;/**  * Disabled for now until we figure out fault processing in the pipeline.  *  * @throws Exception  */ @Test public void testFaultStopsPipeline() throws Exception {     Exchange exchange = template.request("direct:c", new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("Fault Message").         }     }).     // Check the fault..     assertTrue(exchange.getOut() != null && exchange.getOut().isFault()).     assertEquals("Fault Message", exchange.getOut().getBody()).     assertEquals(2, exchange.getOut().getHeader("copy-counter")). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setHeader("header", "headerValue"). }
false;public;0;11;;@Test public void testOnlyProperties() {     Exchange exchange = template.request("direct:b", new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader("header", "headerValue").         }     }).     assertEquals("headerValue", exchange.getOut().getHeader("header")).     assertEquals(3, exchange.getOut().getHeader("copy-counter")). }
false;public;1;4;;public void process(Exchange exchange) {     exchange.setPattern(ExchangePattern.InOut).     exchange.getIn().setBody("test"). }
false;public;0;17;;@Test public void testCopyInOutExchange() {     Exchange exchange = template.request("direct:start", new Processor() {          public void process(Exchange exchange) {             exchange.setPattern(ExchangePattern.InOut).             exchange.getIn().setBody("test").         }     }).     assertEquals("There should have no message header", 0, exchange.getOut().getHeaders().size()).     assertEquals("There should have no attachments", 0, exchange.getOut().getAttachmentObjects().size()).     assertEquals("There should have no attachments", 0, exchange.getOut().getAttachments().size()).     assertEquals("Get a wrong message body", "test", exchange.getOut().getBody()).     assertNull(exchange.getOut().getHeader("test")).     assertNull(exchange.getOut().getAttachmentObject("test1.xml")).     assertNull(exchange.getOut().getAttachment("test1.xml")). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;1;8;;public void process(Exchange exchange) {     Integer number = exchange.getIn().getBody(Integer.class).     if (number == null) {         number = 0.     }     number = number + 1.     exchange.getOut().setBody(number). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     exchange.getOut().copyFrom(exchange.getIn()).     assertNotNull("The test attachment should not be null", exchange.getOut().getAttachmentObject("test1.xml")).     assertNotNull("The test attachment should not be null", exchange.getOut().getAttachment("test1.xml")).     assertNotNull("The test header should not be null", exchange.getOut().getHeader("test")).     exchange.getOut().removeAttachment("test1.xml").     exchange.getOut().removeHeader("test"). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     exchange.getOut().copyFrom(exchange.getIn()).     // Added the header and attachment     exchange.getOut().setHeader("test", "testValue").     exchange.getOut().addAttachment("test1.xml", new DataHandler(new FileDataSource("pom.xml"))). }
false;public;0;34;;public void configure() {     // START SNIPPET: example     from("direct:a").pipeline("direct:x", "direct:y", "direct:z", "mock:result").     // END SNIPPET: example     from("direct:x").process(processor).     from("direct:y").process(processor).     from("direct:z").process(processor).     // Create a route that uses the  InToOut processor 3 times. the copy-counter header should be == 3     from("direct:b").process(new InToOut()).process(new InToOut()).process(new InToOut()).     // Create a route that uses the  InToFault processor.. the last InToOut will not be called since the Fault occurs before.     from("direct:c").process(new InToOut()).process(new InToFault()).process(new InToOut()).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().copyFrom(exchange.getIn()).             // Added the header and attachment             exchange.getOut().setHeader("test", "testValue").             exchange.getOut().addAttachment("test1.xml", new DataHandler(new FileDataSource("pom.xml"))).         }     }).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().copyFrom(exchange.getIn()).             assertNotNull("The test attachment should not be null", exchange.getOut().getAttachmentObject("test1.xml")).             assertNotNull("The test attachment should not be null", exchange.getOut().getAttachment("test1.xml")).             assertNotNull("The test header should not be null", exchange.getOut().getHeader("test")).             exchange.getOut().removeAttachment("test1.xml").             exchange.getOut().removeHeader("test").         }     }). }
false;protected;0;49;;protected RouteBuilder createRouteBuilder() {     final Processor processor = new Processor() {          public void process(Exchange exchange) {             Integer number = exchange.getIn().getBody(Integer.class).             if (number == null) {                 number = 0.             }             number = number + 1.             exchange.getOut().setBody(number).         }     }.     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:a").pipeline("direct:x", "direct:y", "direct:z", "mock:result").             // END SNIPPET: example             from("direct:x").process(processor).             from("direct:y").process(processor).             from("direct:z").process(processor).             // Create a route that uses the  InToOut processor 3 times. the copy-counter header should be == 3             from("direct:b").process(new InToOut()).process(new InToOut()).process(new InToOut()).             // Create a route that uses the  InToFault processor.. the last InToOut will not be called since the Fault occurs before.             from("direct:c").process(new InToOut()).process(new InToFault()).process(new InToOut()).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().copyFrom(exchange.getIn()).                     // Added the header and attachment                     exchange.getOut().setHeader("test", "testValue").                     exchange.getOut().addAttachment("test1.xml", new DataHandler(new FileDataSource("pom.xml"))).                 }             }).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().copyFrom(exchange.getIn()).                     assertNotNull("The test attachment should not be null", exchange.getOut().getAttachmentObject("test1.xml")).                     assertNotNull("The test attachment should not be null", exchange.getOut().getAttachment("test1.xml")).                     assertNotNull("The test header should not be null", exchange.getOut().getHeader("test")).                     exchange.getOut().removeAttachment("test1.xml").                     exchange.getOut().removeHeader("test").                 }             }).         }     }. }
