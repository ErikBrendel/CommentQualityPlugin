commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testDisabled() throws Exception { // noop }
false;public;0;14;;public void xxxtestAggregateTimeoutManual() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     // by default the use latest aggregation strategy     result.expectedBodiesReceived("Message 1999").     // should take at least 3 seconds to complete this one     result.setResultMinimumWaitTime(2500).     for (int i = 0. i < 2000. i++) {         template.sendBodyAndHeader("direct:start", "Message " + i, "id", "1").         Thread.sleep(3).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionTimeout(3000).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionTimeout(3000).to("mock:result").         // END SNIPPET: e1         }     }. }
