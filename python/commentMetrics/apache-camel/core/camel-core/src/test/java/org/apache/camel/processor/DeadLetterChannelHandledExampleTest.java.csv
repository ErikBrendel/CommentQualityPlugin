commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testOrderOK() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Order OK").     result.expectedHeaderReceived("orderid", "123").     MockEndpoint error = getMockEndpoint("mock:error").     error.expectedMessageCount(0).     Object out = template.requestBodyAndHeader("direct:start", "Order: MacBook Pro", "customerid", "444").     assertEquals("Order OK", out).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testOrderERROR() throws Exception {     MockEndpoint error = getMockEndpoint("mock:error").     error.expectedBodiesReceived("Order ERROR").     error.expectedHeaderReceived("orderid", "failed").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(0).     Object out = template.requestBodyAndHeader("direct:start", "Order: kaboom", "customerid", "555").     assertEquals("Order ERROR", out).     assertMockEndpointsSatisfied(). }
false;public;0;25;;public void configure() throws Exception {     // START SNIPPET: e1     // we do special error handling for when OrderFailedException is thrown     onException(OrderFailedException.class).handled(true).bean(OrderService.class, "orderFailed").to("mock:error").     // this is just the generic error handler where we set the destination     // and the number of redeliveries we want to try     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1)).     // this is our route where we handle orders     from("direct:start").bean(OrderService.class, "handleOrder").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;29;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // we do special error handling for when OrderFailedException is thrown             onException(OrderFailedException.class).handled(true).bean(OrderService.class, "orderFailed").to("mock:error").             // this is just the generic error handler where we set the destination             // and the number of redeliveries we want to try             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1)).             // this is our route where we handle orders             from("direct:start").bean(OrderService.class, "handleOrder").to("mock:result").         // END SNIPPET: e1         }     }. }
true;public;3;10;/**  * This method handle our order input and return the order  *  * @param in      the in headers  * @param payload the in payload  * @param out     the out headers  * @return the out payload  * @throws OrderFailedException is thrown if the order cannot be processed  */ ;/**  * This method handle our order input and return the order  *  * @param in      the in headers  * @param payload the in payload  * @param out     the out headers  * @return the out payload  * @throws OrderFailedException is thrown if the order cannot be processed  */ public Object handleOrder(@Headers Map<?, ?> in, @Body String payload, @OutHeaders Map<String, Object> out) throws OrderFailedException {     out.put("customerid", in.get("customerid")).     if ("Order: kaboom".equals(payload)) {         throw new OrderFailedException("Cannot order: kaboom").     } else {         out.put("orderid", "123").         return "Order OK".     } }
true;public;3;5;/**  * This method creates the response to the caller if the order could not be processed  * @param in      the in headers  * @param payload the in payload  * @param out     the out headers  * @return the out payload  */ ;/**  * This method creates the response to the caller if the order could not be processed  * @param in      the in headers  * @param payload the in payload  * @param out     the out headers  * @return the out payload  */ public Object orderFailed(@Headers Map<?, ?> in, @Body String payload, @OutHeaders Map<String, Object> out) {     out.put("customerid", in.get("customerid")).     out.put("orderid", "failed").     return "Order ERROR". }
