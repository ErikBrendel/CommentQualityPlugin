commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;public void configure() {     // set an invalid charset     from("direct:invalid").convertBodyTo(String.class, "ASSI").to("mock:endpoint"). }
false;public;0;14;;@Test public void testConvertBodyTo() {     try {         context.addRoutes(new RouteBuilder() {              public void configure() {                 // set an invalid charset                 from("direct:invalid").convertBodyTo(String.class, "ASSI").to("mock:endpoint").             }         }).         fail("Should have thrown an exception").     } catch (Exception e) {         assertIsInstanceOf(UnsupportedCharsetException.class, e.getCause()).     } }
false;public;0;3;;public void configure() {     from("direct:foo").convertBodyTo(byte[].class, "iso-8859-1").to("mock:foo"). }
false;public;0;16;;@Test public void testConvertBodyCharset() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:foo").convertBodyTo(byte[].class, "iso-8859-1").to("mock:foo").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     // do not propagate charset to avoid side effects with double conversion etc     getMockEndpoint("mock:foo").message(0).exchangeProperty(Exchange.CHARSET_NAME).isNull().     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public void configure() {     from("direct:foo").convertBodyTo(byte[].class, "iso-8859-1").to("mock:foo"). }
false;public;0;18;;@Test public void testConvertBodyCharsetWithExistingCharsetName() throws Exception {     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:foo").convertBodyTo(byte[].class, "iso-8859-1").to("mock:foo").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     // do not propagate charset to avoid side effects with double conversion etc     getMockEndpoint("mock:foo").message(0).exchangeProperty(Exchange.CHARSET_NAME).isEqualTo("UTF-8").     Exchange srcExchange = ExchangeBuilder.anExchange(context).withProperty(Exchange.CHARSET_NAME, "UTF-8").withBody("Hello World").build().     template.send("direct:foo", srcExchange).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testConvertToInteger() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(11).     template.sendBody("direct:start", "11").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testConvertNullBody() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.message(0).body().isNull().     template.sendBody("direct:start", null).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testConvertFailed() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:invalid", "11").         fail("Should have thrown an exception").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof InvalidPayloadException).     }     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testConvertToBytesCharset() throws Exception {     byte[] body = "Hello World".getBytes("iso-8859-1").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(body).     template.sendBody("direct:charset", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testConvertToStringCharset() throws Exception {     String body = "Hello World".     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(body).     template.sendBody("direct:charset3", new ByteArrayInputStream(body.getBytes("utf-16"))).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testConvertToBytesCharsetFail() throws Exception {     byte[] body = "Hello World".getBytes("utf-8").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(body).     template.sendBody("direct:charset2", "Hello World").     // should NOT be okay as we expected utf-8 but got it in utf-16     result.assertIsNotSatisfied(). }
false;public;0;20;;@Test public void testConvertToStringCharsetFail() throws Exception {     // does not work on AIX     String osName = System.getProperty("os.name").toLowerCase(Locale.ENGLISH).     boolean aix = osName.indexOf("aix") > -1.     if (aix) {         return.     }     String body = "Hell\u00F6 W\u00F6rld".     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived(body).     template.sendBody("direct:charset3", new ByteArrayInputStream(body.getBytes("utf-8"))).     // should NOT be okay as we expected utf-8 but got it in utf-16     result.assertIsNotSatisfied(). }
false;public;0;7;;public void configure() {     from("direct:start").convertBodyTo(Integer.class).to("mock:result").     from("direct:invalid").convertBodyTo(Date.class).to("mock:result").     from("direct:charset").convertBodyTo(byte[].class, "iso-8859-1").to("mock:result").     from("direct:charset2").convertBodyTo(byte[].class, "utf-16").to("mock:result").     from("direct:charset3").convertBodyTo(String.class, "utf-16").to("mock:result"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").convertBodyTo(Integer.class).to("mock:result").             from("direct:invalid").convertBodyTo(Date.class).to("mock:result").             from("direct:charset").convertBodyTo(byte[].class, "iso-8859-1").to("mock:result").             from("direct:charset2").convertBodyTo(byte[].class, "utf-16").to("mock:result").             from("direct:charset3").convertBodyTo(String.class, "utf-16").to("mock:result").         }     }. }
