commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/failed").     super.setUp(). }
false;public;0;12;;@Test public void testMoveFailed() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World IS processed!").     mock.expectedFileExists("target/data/failed/error/bye.txt").     template.sendBodyAndHeader("file://target/data/failed", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file://target/data/failed", "Kabom", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body != null && body.startsWith("Kabom")) {         throw new IllegalArgumentException("Forced").     } }
false;public;0;14;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).useOriginalMessage().to("file://target/data/failed/error").     from("file://target/data/failed?delete=true&initialDelay=0&delay=10").setBody(simple("${body} IS processed!")).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if (body != null && body.startsWith("Kabom")) {                 throw new IllegalArgumentException("Forced").             }         }     }).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).useOriginalMessage().to("file://target/data/failed/error").             from("file://target/data/failed?delete=true&initialDelay=0&delay=10").setBody(simple("${body} IS processed!")).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if (body != null && body.startsWith("Kabom")) {                         throw new IllegalArgumentException("Forced").                     }                 }             }).to("mock:result").         }     }. }
