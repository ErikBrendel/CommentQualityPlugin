commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/multidir").     super.setUp(). }
false;public;0;17;;@Test public void testMultiDir() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Bye World", "Hello World", "Goodday World").     mock.expectedFileExists("target/data/multidir/.done/bye.txt.old").     mock.expectedFileExists("target/data/multidir/.done/sub/hello.txt.old").     mock.expectedFileExists("target/data/multidir/.done/sub/sub2/goodday.txt.old").     template.sendBodyAndHeader(fileUrl, "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader(fileUrl, "Hello World", Exchange.FILE_NAME, "sub/hello.txt").     template.sendBodyAndHeader(fileUrl, "Goodday World", Exchange.FILE_NAME, "sub/sub2/goodday.txt").     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result").         }     }. }
