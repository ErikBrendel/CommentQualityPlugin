commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testRegexTokenize() throws Exception {     Expression expression = regexTokenizeExpression(headerExpression("location"), ",").     List<String> expected = new ArrayList<>(Arrays.asList(new String[] { "Islington", "London", "UK" })).     assertExpression(expression, exchange, expected).     Predicate predicate = contains(regexTokenizeExpression(headerExpression("location"), ","), constantExpression("London")).     assertPredicate(predicate, exchange, true).     predicate = contains(regexTokenizeExpression(headerExpression("location"), ","), constantExpression("Manchester")).     assertPredicate(predicate, exchange, false). }
false;public;0;9;;@Test public void testRegexReplaceAll() throws Exception {     Expression expression = regexReplaceAll(headerExpression("location"), "London", "Westminster").     assertExpression(expression, exchange, "Islington,Westminster,UK").     expression = regexReplaceAll(headerExpression("location"), "London", headerExpression("name")).     assertExpression(expression, exchange, "Islington,James,UK"). }
false;public;0;15;;@Test public void testTokenize() throws Exception {     Expression expression = tokenizeExpression(headerExpression("location"), ",").     List<String> expected = new ArrayList<>(Arrays.asList(new String[] { "Islington", "London", "UK" })).     assertExpression(expression, exchange, expected).     Predicate predicate = contains(tokenizeExpression(headerExpression("location"), ","), constantExpression("London")).     assertPredicate(predicate, exchange, true).     predicate = contains(tokenizeExpression(headerExpression("location"), ","), constantExpression("Manchester")).     assertPredicate(predicate, exchange, false). }
false;public;0;8;;@Test public void testTokenizeLines() throws Exception {     Expression expression = regexTokenizeExpression(bodyExpression(), "[\r|\n]").     exchange.getIn().setBody("Hello World\nBye World\rSee you again").     List<String> expected = new ArrayList<>(Arrays.asList(new String[] { "Hello World", "Bye World", "See you again" })).     assertExpression(expression, exchange, expected). }
false;public;0;8;;@Test public void testSortLines() throws Exception {     Expression expression = sortExpression(body().tokenize(",").getExpression(), new SortByName()).     exchange.getIn().setBody("Jonathan,Claus,James,Hadrian").     List<String> expected = new ArrayList<>(Arrays.asList(new String[] { "Claus", "Hadrian", "James", "Jonathan" })).     assertExpression(expression, exchange, expected). }
false;public;0;9;;@Test public void testCamelContextPropertiesExpression() throws Exception {     camelContext.getGlobalOptions().put("CamelTestKey", "CamelTestValue").     Expression expression = camelContextPropertyExpression("CamelTestKey").     assertExpression(expression, exchange, "CamelTestValue").     expression = camelContextPropertiesExpression().     Map<?, ?> properties = expression.evaluate(exchange, Map.class).     assertEquals("Get a wrong properties size", properties.size(), 1). }
false;public;0;6;;@Test public void testParseSimpleOrFallbackToConstantExpression() throws Exception {     assertEquals("world", parseSimpleOrFallbackToConstantExpression("world", camelContext).evaluate(exchange, String.class)).     assertEquals("Hello there!", parseSimpleOrFallbackToConstantExpression("${body}", camelContext).evaluate(exchange, String.class)).     assertEquals("Hello there!", parseSimpleOrFallbackToConstantExpression("$simple{body}", camelContext).evaluate(exchange, String.class)). }
false;public;0;11;;@Test public void testFunction() throws Exception {     assertExpression(messageExpression(m -> m.getExchange().getIn().getHeader("name")), exchange, "James").     assertExpression(messageExpression(m -> m.getHeader("name")), exchange, "James"). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     Message in = exchange.getIn().     in.setBody("Hello there!").     in.setHeader("name", "James").     in.setHeader("location", "Islington,London,UK"). }
false;public;2;3;;public int compare(java.lang.String o1, java.lang.String o2) {     return o1.compareToIgnoreCase(o2). }
