commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testHasOut() {     Object out = template.requestBody("direct:start", "Hi").     assertEquals("Bye World", out). }
false;public;0;6;;@Test public void testHasNotOutForInOptionalOut() {     // OUT is optional in the route but we should not get a response     Object out = template.sendBody("direct:noout", ExchangePattern.InOptionalOut, "Hi").     assertEquals(null, out). }
false;public;0;6;;@Test public void testHasNotOutForInOut() {     // OUT is optional in the route but we should still not get a response     Object out = template.sendBody("direct:noout", ExchangePattern.InOut, "Hi").     assertEquals(null, out). }
false;public;0;5;;@Test public void testHasNotOutForInOnly() {     Object out = template.sendBody("direct:noout", ExchangePattern.InOnly, "Hi").     assertEquals(null, out). }
false;public;0;5;;@Test public void testInOnly() {     Object out = template.sendBody("direct:inonly", ExchangePattern.InOnly, "Hi").     assertEquals(null, out). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Bye World"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // we do not set any OUT only IN     exchange.getIn().setBody("Hello World"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;21;;@Override public void configure() throws Exception {     from("direct:start").setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Bye World").         }     }).     from("direct:noout").setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // we do not set any OUT only IN             exchange.getIn().setBody("Hello World").         }     }).     from("direct:inonly").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Bye World").                 }             }).             from("direct:noout").setExchangePattern(ExchangePattern.InOptionalOut).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // we do not set any OUT only IN                     exchange.getIn().setBody("Hello World").                 }             }).             from("direct:inonly").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Hello World").                 }             }).         }     }. }
