commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testNoError() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "<order><type>myType</type><user>James</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testNoError2() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start2", "<order><type>myType</type><user>James</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testFunctionalError() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     // we use DLC so all exceptions gets handled     template.sendBody("direct:start", "<order><type>myType</type><user>Func</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testFunctionalError2() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:handled").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("direct:start2", "<order><type>myType</type><user>Func</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testTechnicalError() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:tech.error").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("direct:start", "<order><type>myType</type><user>Tech</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testTechnicalError2() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:tech.error").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("direct:start2", "<order><type>myType</type><user>Tech</user></order>").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     myServiceBean = new MyServiceBean().     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myServiceBean", myServiceBean).     return jndi. }
false;public;0;26;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // global error handler     // as its based on a unit test we do not have any delays between and do not log the stack trace     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).logStackTrace(false)).     // shared for both routes     onException(MyTechnicalException.class).handled(true).maximumRedeliveries(2).to("mock:tech.error").     from("direct:start").onException(MyFunctionalException.class).maximumRedeliveries(0).end().to("bean:myServiceBean").to("mock:result").     from("direct:start2").onException(MyFunctionalException.class).handled(true).maximumRedeliveries(0).to("mock:handled").end().to("bean:myServiceBean").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // global error handler             // as its based on a unit test we do not have any delays between and do not log the stack trace             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).logStackTrace(false)).             // shared for both routes             onException(MyTechnicalException.class).handled(true).maximumRedeliveries(2).to("mock:tech.error").             from("direct:start").onException(MyFunctionalException.class).maximumRedeliveries(0).end().to("bean:myServiceBean").to("mock:result").             from("direct:start2").onException(MyFunctionalException.class).handled(true).maximumRedeliveries(0).to("mock:handled").end().to("bean:myServiceBean").to("mock:result").         // END SNIPPET: e1         }     }. }
