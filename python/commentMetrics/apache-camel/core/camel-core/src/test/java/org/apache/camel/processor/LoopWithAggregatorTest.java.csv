commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testLoopCopy() throws Exception {     getMockEndpoint("mock:loop").expectedBodiesReceived("AB", "AB", "AB").     getMockEndpoint("mock:result").expectedBodiesReceived("AB").     template.requestBody("direct:start", "A").     assertMockEndpointsSatisfied(). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     // set the response directly     exchange.getIn().setBody("B"). }
false;public;0;24;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").loop(3).copy().enrich("direct:getTimeStamp", new ExampleAggregationStrategy()).inOnly("mock:loop").end().to("mock:result").     // END SNIPPET: e1     from("direct:getTimeStamp").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // set the response directly             exchange.getIn().setBody("B").         }     }). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").loop(3).copy().enrich("direct:getTimeStamp", new ExampleAggregationStrategy()).inOnly("mock:loop").end().to("mock:result").             // END SNIPPET: e1             from("direct:getTimeStamp").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // set the response directly                     exchange.getIn().setBody("B").                 }             }).         }     }. }
false;public;2;14;;public Exchange aggregate(Exchange original, Exchange resource) {     String originalBody = original.getIn().getBody(String.class).     if (original.getOut().getBody() != null) {         originalBody = original.getOut().getBody(String.class).     }     String resourceResponse = resource.getIn().getBody(String.class).     String mergeResult = originalBody + resourceResponse.     if (original.getPattern().isOutCapable()) {         original.getOut().setBody(mergeResult).     } else {         original.getIn().setBody(mergeResult).     }     return original. }
