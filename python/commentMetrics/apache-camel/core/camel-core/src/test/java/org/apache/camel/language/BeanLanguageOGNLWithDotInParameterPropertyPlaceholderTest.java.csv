commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDot() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("goto", "mock:MyAppV1.2.3/blah").     template.sendBodyAndHeader("direct:start", "Hello World", "id", "blah").     assertMockEndpointsSatisfied(). }
false;protected;0;11;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyDestinationBean()).     myProp = new Properties().     myProp.put("myApp", "MyAppV1.2.3").     jndi.bind("myprop", myProp).     return jndi. }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setLocation("ref:myprop").     return context. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").setHeader("goto").simple("${bean:myBean.whereToMate({{myApp}}, ${header.id})}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("goto").simple("${bean:myBean.whereToMate({{myApp}}, ${header.id})}").to("mock:result").         }     }. }
false;public;2;3;;public String whereToMate(String version, String id) {     return "mock:" + version + "/" + id. }
