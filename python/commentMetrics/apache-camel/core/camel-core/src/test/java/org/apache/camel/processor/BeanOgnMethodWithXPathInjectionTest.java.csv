commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSendMessage() throws Exception {     String expectedBody = "<env:Envelope xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Body>" + "<foo>bar</foo></env:Body></env:Envelope>".     Object out = template.requestBodyAndHeader("direct:in", expectedBody, "foo", "bar").     assertEquals("bar", out).     assertEquals("bean body: " + myBean, expectedBody, myBean.body).     assertEquals("bean foo: " + myBean, "bar", myBean.foo). }
false;public;0;22;;@Test public void testSendTwoMessages() throws Exception {     // 1st message     String expectedBody = "<env:Envelope xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Body>" + "<foo>bar</foo></env:Body></env:Envelope>".     Object out = template.requestBodyAndHeader("direct:in", expectedBody, "foo", "bar").     assertEquals("bar", out).     assertEquals("bean body: " + myBean, expectedBody, myBean.body).     assertEquals("bean foo: " + myBean, "bar", myBean.foo).     // 2nd message     String expectedBody2 = "<env:Envelope xmlns:env='http://www.w3.org/2003/05/soap-envelope'><env:Body>" + "<foo>baz</foo></env:Body></env:Envelope>".     Object out2 = template.requestBodyAndHeader("direct:in", expectedBody2, "foo", "bar").     assertEquals("baz", out2).     assertEquals("bean body: " + myBean, expectedBody2, myBean.body).     assertEquals("bean foo: " + myBean, "baz", myBean.foo). }
false;protected;0;7;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     answer.bind("myOtherBean", myOtherBean).     return answer. }
false;public;0;4;;public void configure() {     from("direct:in").transform().method("myOtherBean", "doSomething.read"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:in").transform().method("myOtherBean", "doSomething.read").         }     }. }
false;public;0;3;;public MyBean doSomething() {     return inner. }
false;public;0;4;;@Override public String toString() {     return "MyBean[foo: " + foo + " body: " + body + "]". }
false;public;2;6;;public String read(String body, @XPath("/soap:Envelope/soap:Body/foo/text()") String foo) {     this.foo = foo.     this.body = body.     LOG.info("read() method called on " + this).     return foo. }
