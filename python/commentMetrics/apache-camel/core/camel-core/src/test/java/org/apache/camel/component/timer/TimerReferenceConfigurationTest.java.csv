commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;12;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry reg = super.createRegistry().     reg.bind("refExpectedTimeString", refExpectedTimeString).     reg.bind("refExpectedPattern", refExpectedPattern).     reg.bind("refExpectedPeriod", refExpectedPeriod).     reg.bind("refExpectedDelay", refExpectedDelay).     reg.bind("refExpectedFixedRate", refExpectedFixedRate).     reg.bind("refExpectedDaemon", refExpectedDaemon).     reg.bind("refExpectedRepeatCount", refExpectedRepeatCount).     return reg. }
false;public;0;5;;@Override public void configure() throws Exception {     from(refTimerUri).to(mockEndpointUri).     from(valueTimerUri).to(mockEndpointUri). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(refTimerUri).to(mockEndpointUri).             from(valueTimerUri).to(mockEndpointUri).         }     }. }
true;public;0;20;/**  * Test that the reference configuration params are correct  */ ;/**  * Test that the reference configuration params are correct  */ @Test public void testReferenceConfiguration() throws Exception {     Endpoint e = context.getEndpoint(refTimerUri).     TimerEndpoint timer = (TimerEndpoint) e.     final Date expectedTimeObject = new SimpleDateFormat(refExpectedPattern).parse(refExpectedTimeString).     final Date time = timer.getTime().     final long period = timer.getPeriod().     final long delay = timer.getDelay().     final boolean fixedRate = timer.isFixedRate().     final boolean daemon = timer.isDaemon().     final long repeatCount = timer.getRepeatCount().     assertEquals(refExpectedDelay, delay).     assertEquals(refExpectedPeriod, period).     assertEquals(expectedTimeObject, time).     assertEquals(refExpectedFixedRate, fixedRate).     assertEquals(refExpectedDaemon, daemon).     assertEquals(refExpectedRepeatCount, repeatCount). }
true;public;0;19;/**  * Test that the 'value' configuration params are correct  */ ;/**  * Test that the 'value' configuration params are correct  */ @Test public void testValueConfiguration() throws Exception {     Endpoint e = context.getEndpoint(valueTimerUri).     TimerEndpoint timer = (TimerEndpoint) e.     final Date expectedTimeObject = new SimpleDateFormat(valExpectedPattern).parse(valExpectedTimeString).     final Date time = timer.getTime().     final long period = timer.getPeriod().     final long delay = timer.getDelay().     final boolean fixedRate = timer.isFixedRate().     final boolean daemon = timer.isDaemon().     final long repeatCount = timer.getRepeatCount().     assertEquals(valExpectedDelay, delay).     assertEquals(valExpectedPeriod, period).     assertEquals(expectedTimeObject, time).     assertEquals(valExpectedFixedRate, fixedRate).     assertEquals(valExpectedDaemon, daemon).     assertEquals(valExpectedRepeatCount, repeatCount). }
