commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;@Before @Override public void setUp() throws Exception {     super.setUp().     sw1 = new StringWriter().     sw2 = new StringWriter().     ConsumingAppender.newAppender(LogCustomLoggerTest.class.getCanonicalName(), "LogCustomLoggerTest", Level.TRACE, event -> sw1.append(event.getLoggerName())).     ConsumingAppender.newAppender("provided.logger1.name", "logger1", Level.TRACE, event -> sw1.append(event.getLoggerName())).     ConsumingAppender.newAppender("provided.logger2.name", "logger2", Level.TRACE, event -> sw1.append(event.getLoggerName())).     ConsumingAppender.newAppender("irrelevant.logger.name", "irrelevant", Level.TRACE, event -> sw1.append(event.getLoggerName())).     ConsumingAppender.newAppender(LogComponent.class.getCanonicalName(), "LogComponent", Level.INFO, event -> sw2.append(event.getLoggerName())). }
false;public;0;7;;@Test public void testFallbackLogger() throws Exception {     String endpointUri = "log:" + LogCustomLoggerTest.class.getCanonicalName().     template.requestBody(endpointUri, "hello").     assertThat(sw1.toString(), equalTo(LogCustomLoggerTest.class.getCanonicalName())). }
false;public;0;7;;@Test public void testEndpointURIParametrizedLogger() throws Exception {     context.getRegistry().bind("logger1", LoggerFactory.getLogger("provided.logger1.name")).     context.getRegistry().bind("logger2", LoggerFactory.getLogger("provided.logger2.name")).     template.requestBody("log:irrelevant.logger.name?logger=#logger2", "hello").     assertThat(sw1.toString(), equalTo("provided.logger2.name")). }
false;public;0;9;;@Test public void testEndpointURIParametrizedNotResolvableLogger() {     context.getRegistry().bind("logger1", LoggerFactory.getLogger("provided.logger1.name")).     try {         template.requestBody("log:irrelevant.logger.name?logger=#logger2", "hello").     } catch (ResolveEndpointFailedException e) {     // expected     } }
false;public;0;6;;@Test public void testDefaultRegistryLogger() throws Exception {     context.getRegistry().bind("logger", LoggerFactory.getLogger("provided.logger1.name")).     template.requestBody("log:irrelevant.logger.name", "hello").     assertThat(sw1.toString(), equalTo("provided.logger1.name")). }
false;public;0;8;;@Test public void testTwoRegistryLoggers() throws Exception {     context.getRegistry().bind("logger1", LoggerFactory.getLogger("provided.logger1.name")).     context.getRegistry().bind("logger2", LoggerFactory.getLogger("provided.logger2.name")).     template.requestBody("log:irrelevant.logger.name", "hello").     assertThat(sw1.toString(), equalTo("irrelevant.logger.name")).     assertThat(sw2.toString(), equalTo(LogComponent.class.getName())). }
false;protected;0;4;;@Override protected CamelContext createCamelContext() throws Exception {     return new DefaultCamelContext(). }
