commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testPredicateAggregateCollection() throws Exception {     // START SNIPPET: e2     MockEndpoint result = getMockEndpoint("mock:result").     // we only expect two messages as they have reached the completed predicate     // that we want 3 messages that has the same header id     result.expectedMessageCount(2).     result.expectedBodiesReceived("Message 1c", "Message 3c").     // then we sent all the message at once     template.sendBodyAndHeader("direct:start", "Message 1a", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 2a", "id", "2").     template.sendBodyAndHeader("direct:start", "Message 3a", "id", "3").     template.sendBodyAndHeader("direct:start", "Message 1b", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 3b", "id", "3").     template.sendBodyAndHeader("direct:start", "Message 1c", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 3c", "id", "3").     template.sendBodyAndHeader("direct:start", "Message 2b", "id", "2").     template.sendBodyAndHeader("direct:start", "Message 1d", "id", "1").     template.sendBodyAndHeader("direct:start", "Message 4", "id", "4").     assertMockEndpointsSatisfied(). // END SNIPPET: e2 }
false;public;0;10;;public void configure() throws Exception {     // START SNIPPET: e1     // our route is aggregating from the direct queue and sending the response to the mock     from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionSize(3).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // our route is aggregating from the direct queue and sending the response to the mock             from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionSize(3).to("mock:result").         // END SNIPPET: e1         }     }. }
