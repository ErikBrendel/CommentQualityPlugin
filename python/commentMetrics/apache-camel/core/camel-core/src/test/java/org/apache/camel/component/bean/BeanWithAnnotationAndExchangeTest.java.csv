commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testBeanWithAnnotationAndExchangeTest() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("StartMyBean").     mock.expectedHeaderReceived("user", "admin").     template.requestBody("direct:in", "Start").     mock.assertIsSatisfied(). }
false;protected;0;5;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", new MyBean()).     return answer. }
false;public;0;6;;public void configure() throws Exception {     from("direct:in").setHeader("user", constant("admin")).to("bean:myBean").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").setHeader("user", constant("admin")).to("bean:myBean").to("mock:result").         }     }. }
true;public;3;5;// START SNIPPET: e1 ;// START SNIPPET: e1 public void doSomething(@Header("user") String user, @Body String body, Exchange exchange) {     assertEquals("admin", user).     exchange.getIn().setBody(body + "MyBean"). }
