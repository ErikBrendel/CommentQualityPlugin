commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testNoCache() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("World", "Camel").     template.sendBody("direct:start", "World").     Expression first = endpoint.getExpression().     template.sendBody("direct:start", "Camel").     Expression second = endpoint.getExpression().     assertMockEndpointsSatisfied().     assertSame(first, second).     assertNull(first).     assertNull(second). }
false;public;0;9;;@Override public void configure() throws Exception {     String script = URLEncoder.encode("Hello ${body}", "UTF-8").     endpoint = context.getEndpoint("language:simple:" + script + "?transform=false&cacheScript=false", LanguageEndpoint.class).     from("direct:start").to(endpoint).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             String script = URLEncoder.encode("Hello ${body}", "UTF-8").             endpoint = context.getEndpoint("language:simple:" + script + "?transform=false&cacheScript=false", LanguageEndpoint.class).             from("direct:start").to(endpoint).to("mock:result").         }     }. }
