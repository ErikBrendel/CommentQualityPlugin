commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/changed/").     createDirectory("target/data/changed/in").     writeFile().     // sleep to make the file a little bit old     Thread.sleep(100).     super.setUp(). }
false;public;0;10;;@Test public void testChangedReadLockMinAge() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/changed/out/file.dat").     // We should get the file on the first poll     mock.expectedMessagesMatches(exchangeProperty(Exchange.RECEIVED_TIMESTAMP).convertTo(long.class).isLessThan(new Date().getTime() + 15000)).     assertMockEndpointsSatisfied(). }
false;private;0;9;;private void writeFile() throws Exception {     LOG.debug("Writing file...").     FileOutputStream fos = new FileOutputStream("target/data/changed/in/file.dat").     fos.write("Line".getBytes()).     fos.flush().     fos.close().     LOG.debug("Writing file DONE..."). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file:target/data/changed/in?initialDelay=0&delay=10&readLock=changed&readLockMinAge=10&readLockCheckInterval=30000&readLockTimeout=90000").to("file:target/data/changed/out", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/changed/in?initialDelay=0&delay=10&readLock=changed&readLockMinAge=10&readLockCheckInterval=30000&readLockTimeout=90000").to("file:target/data/changed/out", "mock:result").         }     }. }
