commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSendingMessageGetsDelayed() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     // do not wait for the first message     resultEndpoint.expectedMessageCount(0).     resultEndpoint.setResultWaitTime(10).     template.sendBodyAndHeader("seda:a", "<hello>world!</hello>", "MyDelay", 100).     // we should not receive it as we wait at most 0.01 sec and it take 0.1 sec to send     resultEndpoint.assertIsSatisfied().     // now if we wait a bit longer we should receive the message!     resultEndpoint.reset().     resultEndpoint.expectedMessageCount(1).     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testDelayConstant() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     // should at least take 0.1 sec to complete     resultEndpoint.setResultMinimumWaitTime(90).     template.sendBody("seda:b", "<hello>world!</hello>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testDelayBean() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     // should at least take 0.1 sec to complete     resultEndpoint.setResultMinimumWaitTime(90).     template.sendBody("seda:c", "<hello>world!</hello>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testExchangeAwareDelayBean() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     // should at least take 0.1 sec to complete     resultEndpoint.setResultMinimumWaitTime(90).     template.sendBodyAndHeader("seda:d", "<hello>world!</hello>", BEAN_DELAYER_HEADER, 100).     resultEndpoint.assertIsSatisfied(). }
false;public;0;15;;public void configure() {     // START SNIPPET: ex     from("seda:a").delay().header("MyDelay").to("mock:result").     // END SNIPPET: ex     // START SNIPPET: ex2     from("seda:b").delay(100).to("mock:result").     // END SNIPPET: ex2     // START SNIPPET: ex3     from("seda:c").delay().method(bean, "delayMe").to("mock:result").     // END SNIPPET: ex3     from("seda:d").delay().method(exchangeAwareBean, "delayMe").to("mock:result"). }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: ex             from("seda:a").delay().header("MyDelay").to("mock:result").             // END SNIPPET: ex             // START SNIPPET: ex2             from("seda:b").delay(100).to("mock:result").             // END SNIPPET: ex2             // START SNIPPET: ex3             from("seda:c").delay().method(bean, "delayMe").to("mock:result").             // END SNIPPET: ex3             from("seda:d").delay().method(exchangeAwareBean, "delayMe").to("mock:result").         }     }. }
