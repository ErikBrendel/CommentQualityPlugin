commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSplitterOnPrepare() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(2).     getMockEndpoint("mock:a").allMessages().body(String.class).isEqualTo("1 Tony the Tiger").     List<Animal> animals = new ArrayList<>().     animals.add(new Animal(1, "Tiger")).     animals.add(new Animal(1, "Tiger")).     template.sendBody("direct:start", animals).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").split(body()).onPrepare(new FixNamePrepare()).to("direct:a").     from("direct:a").process(new ProcessorA()).to("mock:a"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body()).onPrepare(new FixNamePrepare()).to("direct:a").             from("direct:a").process(new ProcessorA()).to("mock:a").         }     }. }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tony the Tiger", body.getName()). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()).     body.setName("Tony the Tiger"). }
