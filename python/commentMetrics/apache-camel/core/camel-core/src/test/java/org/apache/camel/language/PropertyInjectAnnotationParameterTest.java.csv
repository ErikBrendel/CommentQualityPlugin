commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testPropertyInjectAnnotationOne() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:one", "World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testPropertyInjectAnnotationTwo() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("WorldWorldWorld").     template.sendBody("direct:two", "World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testPropertyInjectAnnotationThree() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Goodbye World").     template.sendBody("direct:three", "World").     assertMockEndpointsSatisfied(). }
false;protected;0;13;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     Properties props = new Properties().     props.put("greeting", "Hello").     props.put("times", "3").     pc.setInitialProperties(props).     context.addComponent("properties", pc).     return context. }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:one").bean(MyBean.class).to("mock:result").     from("direct:two").bean(MyCounterBean.class).to("mock:result").     from("direct:three").bean(MyOtherBean.class).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:one").bean(MyBean.class).to("mock:result").             from("direct:two").bean(MyCounterBean.class).to("mock:result").             from("direct:three").bean(MyOtherBean.class).to("mock:result").         }     }. }
false;public;2;3;;public String callA(@PropertyInject("greeting") String greeting, String body) {     return greeting + " " + body. }
false;public;2;3;;public String callA(@PropertyInject(value = "bye", defaultValue = "Goodbye") String bye, String body) {     return bye + " " + body. }
false;public;2;7;;public String callA(@PropertyInject("times") int times, String body) {     StringBuilder sb = new StringBuilder().     for (int i = 0. i < times. i++) {         sb.append(body).     }     return sb.toString(). }
