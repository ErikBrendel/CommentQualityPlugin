commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     strategy = new MyIntercepStrategy().     super.setUp(). }
false;public;0;13;;@Test public void testOk() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:handled").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(true, strategy.isInvoked()). }
false;public;0;13;;@Test public void testILE() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:handled").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(0).     template.sendBody("direct:iae", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(true, strategy.isInvoked()). }
false;public;0;14;;@Override public void configure() throws Exception {     getContext().addInterceptStrategy(strategy).     onException(IllegalArgumentException.class).handled(true).to("mock:handled").     errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(1)).     from("direct:start").to("mock:result").     from("direct:iae").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().addInterceptStrategy(strategy).             onException(IllegalArgumentException.class).handled(true).to("mock:handled").             errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(1)).             from("direct:start").to("mock:result").             from("direct:iae").throwException(new IllegalArgumentException("Damn")).         }     }. }
false;protected;1;4;;protected void processNext(Exchange exchange) throws Exception {     invoked = true.     super.processNext(exchange). }
false;public;4;8;;public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, Processor target, Processor nextTarget) throws Exception {     return new DelegateProcessor(target) {          protected void processNext(Exchange exchange) throws Exception {             invoked = true.             super.processNext(exchange).         }     }. }
false;public;0;3;;public boolean isInvoked() {     return invoked. }
