commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/dotfiles").     super.setUp(). }
false;public;0;11;;@Test public void testSkipDotFiles() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     mock.setResultWaitTime(100).     template.sendBodyAndHeader("file:target/data/dotfiles/", "This is a dot file", Exchange.FILE_NAME, ".skipme").     mock.assertIsSatisfied(). }
false;public;0;13;;@Test public void testSkipDotFilesWithARegularFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file:target/data/dotfiles/", "This is a dot file", Exchange.FILE_NAME, ".skipme").     template.sendBodyAndHeader("file:target/data/dotfiles/", "Hello World", Exchange.FILE_NAME, "hello.txt").     mock.assertIsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").         }     }. }
