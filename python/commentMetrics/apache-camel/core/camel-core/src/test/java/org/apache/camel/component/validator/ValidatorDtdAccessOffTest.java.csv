commented;modifiers;parameterAmount;loc;comment;code
true;public;0;9;/**  * Tests that no external DTD call is executed for StringSource.  */ ;/**  * Tests that no external DTD call is executed for StringSource.  */ @Test public void testInvalidMessageWithExternalDTDStringSource() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     template.sendBody("direct:start", ssrfPayloud).     MockEndpoint.assertIsSatisfied(validEndpoint, unknownHostExceptionEndpoint, finallyEndpoint). }
true;public;0;9;/**  * Tests that external DTD call is not executed  for StreamSource.  */ ;/**  * Tests that external DTD call is not executed  for StreamSource.  */ @Test public void testInvalidMessageWithExternalDTDStreamSource() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     InputStream is = new ByteArrayInputStream(ssrfPayloud.getBytes(StandardCharsets.UTF_8)).     template.sendBody("direct:start", is).     MockEndpoint.assertIsSatisfied(validEndpoint, unknownHostExceptionEndpoint, finallyEndpoint). }
true;public;0;9;/**  * Tests that XXE is not possible for StreamSource.  */ ;/**  * Tests that XXE is not possible for StreamSource.  */ @Test public void testInvalidMessageXXESourceStream() throws Exception {     invalidEndpoint.expectedMessageCount(1).     finallyEndpoint.expectedMessageCount(1).     InputStream is = new ByteArrayInputStream(xxePayloud.getBytes(StandardCharsets.UTF_8)).     template.sendBody("direct:start", is).     MockEndpoint.assertIsSatisfied(validEndpoint, unknownHostExceptionEndpoint, finallyEndpoint). }
