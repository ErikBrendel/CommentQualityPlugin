commented;modifiers;parameterAmount;loc;comment;code
false;public;0;37;;@Test public void testClearCachedSchema() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // send one message for start up to finish.     new Sender().run().     // send with 5 sender threads in parallel and call clear cache in     // between     ExecutorService senderPool = Executors.newFixedThreadPool(5).     ExecutorService executorClearCache = Executors.newFixedThreadPool(1).     for (int i = 0. i < 5. i++) {         senderPool.execute(new Sender()).         if (i == 2) {             /**              * The clear cache thread calls xsdEndpoint.clearCachedSchema              */             executorClearCache.execute(new ClearCache()).         }     }     senderPool.shutdown().     executorClearCache.shutdown().     senderPool.awaitTermination(2, TimeUnit.SECONDS).     List<Exchange> exchanges = mock.getExchanges().     assertNotNull(exchanges).     // expect at least 5 correct sent messages, the messages sent before     // the clearCacheSchema method is called will fail with a validation     // error and will nor result in an exchange     assertTrue("Less then expected exchanges", exchanges.size() > 5). }
false;protected;0;7;;@Override protected CamelContext createCamelContext() throws Exception {     String handlerPackageSystemProp = "java.protocol.handler.pkgs".     String customUrlHandlerPackage = "org.apache.camel.urlhandler".     registerSystemProperty(handlerPackageSystemProp, customUrlHandlerPackage, "|").     return new DefaultCamelContext(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("validator:pd:somefile.xsd").convertBodyTo(String.class).to("log:after").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("validator:pd:somefile.xsd").convertBodyTo(String.class).to("log:after").to("mock:result").         }     }. }
false;public;0;12;;@Override public void run() {     // send up to 5 messages     for (int j = 0. j < 5. j++) {         try {             Thread.sleep(100).         } catch (InterruptedException e) {             throw new RuntimeException(e).         }         sendBody("direct:start", messageBytes).     } }
false;public;0;11;;@Override public void run() {     try {         // start later after the first sender         // threads are running         Thread.sleep(200).         clearCachedSchema().     } catch (Exception e) {         throw new RuntimeException(e).     } }
false;private;0;11;;private void clearCachedSchema() throws Exception {     Collection<Endpoint> endpoints = context.getEndpoints().     for (Endpoint endpoint : endpoints) {         LOG.info("Endpoint URI: " + endpoint.getEndpointUri()).         if (endpoint.getEndpointUri().startsWith("validator:")) {             ValidatorEndpoint xsltEndpoint = (ValidatorEndpoint) endpoint.             xsltEndpoint.clearCachedSchema().             LOG.info("schema cache cleared").         }     } }
