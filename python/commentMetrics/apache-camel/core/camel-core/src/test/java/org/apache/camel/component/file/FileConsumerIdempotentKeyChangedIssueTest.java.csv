commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testFile() throws Exception {     getMockEndpoint("mock:file").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader(endpoint, "Hello World", Exchange.FILE_NAME, "hello.txt").     context.getRouteController().startAllRoutes().     assertMockEndpointsSatisfied().     oneExchangeDone.matches(5, TimeUnit.SECONDS).     resetMocks().     getMockEndpoint("mock:file").expectedBodiesReceived("Hello World Again").     template.sendBodyAndHeader(endpoint, "Hello World Again", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     endpoint = endpoint("file:target/data/changed?noop=true&readLock=changed&initialDelay=0&delay=10&readLockCheckInterval=100" + "&idempotentKey=${file:onlyname}-${file:size}-${date:file:yyyyMMddHHmmss}").     from(endpoint).noAutoStartup().convertBodyTo(String.class).to("log:file").to("mock:file"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             endpoint = endpoint("file:target/data/changed?noop=true&readLock=changed&initialDelay=0&delay=10&readLockCheckInterval=100" + "&idempotentKey=${file:onlyname}-${file:size}-${date:file:yyyyMMddHHmmss}").             from(endpoint).noAutoStartup().convertBodyTo(String.class).to("log:file").to("mock:file").         }     }. }
