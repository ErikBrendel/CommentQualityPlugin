commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Override public void configure() throws Exception {     validator().type("toValidate").withBean("testValidator").     onException(ValidationException.class).handled(true).log("Invalid validation: ${exception.message}").to("mock:invalid").     from("direct:in").outputTypeWithValidate("toValidate").to("mock:out"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             validator().type("toValidate").withBean("testValidator").             onException(ValidationException.class).handled(true).log("Invalid validation: ${exception.message}").to("mock:invalid").             from("direct:in").outputTypeWithValidate("toValidate").to("mock:out").         }     }. }
false;public;2;10;;@Override public void validate(Message message, DataType type) throws ValidationException {     Object body = message.getBody().     LOG.info("Validating : [{}]", body).     if (body instanceof String && body.equals("valid")) {         LOG.info("OK").     } else {         throw new ValidationException(message.getExchange(), "Wrong content").     } }
false;protected;0;8;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("testValidator", new TestValidator()).     return registry. }
false;public;0;9;;@Test public void testValid() throws InterruptedException {     getMockEndpoint("mock:out").expectedMessageCount(1).     getMockEndpoint("mock:invalid").expectedMessageCount(0).     template.sendBody("direct:in", "valid").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testInvalid() throws InterruptedException {     getMockEndpoint("mock:out").expectedMessageCount(1).     getMockEndpoint("mock:invalid").expectedMessageCount(0).     try {         template.sendBody("direct:in", "wrong").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(ValidationException.class, e.getCause()).         assertTrue(e.getCause().getMessage().startsWith("Wrong content")).     }     assertMockEndpointsSatisfied(). }
