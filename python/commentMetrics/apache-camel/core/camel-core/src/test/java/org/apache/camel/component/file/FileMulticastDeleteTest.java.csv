commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/inbox").     super.setUp(). }
false;public;0;10;;@Test public void testFileMulticastDelete() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Got Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file:target/data/inbox", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Override public void configure() throws Exception {     from("file:target/data/inbox?delete=true&initialDelay=0&delay=10").multicast(new UseLatestAggregationStrategy()).shareUnitOfWork().to("direct:foo", "direct:bar").end().convertBodyTo(String.class).to("mock:result").     from("direct:foo").to("log:foo").aggregate(header(Exchange.FILE_NAME), new MyFileAggregator()).completionTimeout(100).convertBodyTo(String.class).to("mock:foo").end().     from("direct:bar").to("log:bar").convertBodyTo(String.class).to("mock:bar"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/inbox?delete=true&initialDelay=0&delay=10").multicast(new UseLatestAggregationStrategy()).shareUnitOfWork().to("direct:foo", "direct:bar").end().convertBodyTo(String.class).to("mock:result").             from("direct:foo").to("log:foo").aggregate(header(Exchange.FILE_NAME), new MyFileAggregator()).completionTimeout(100).convertBodyTo(String.class).to("mock:foo").end().             from("direct:bar").to("log:bar").convertBodyTo(String.class).to("mock:bar").         }     }. }
false;public;2;7;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     // load data     String data = newExchange.getIn().getBody(String.class).     newExchange.getIn().setBody("Got " + data).     return newExchange. }
