commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMulticastOnPrepare() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:a").message(0).body(String.class).isEqualTo("1 Tony the Tiger").     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:b").message(0).body(String.class).isEqualTo("1 Tiger").     template.sendBody("direct:start", new Animal(1, "Tiger")).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").multicast().onPrepare(new AnimalDeepClonePrepare()).to("direct:a").to("direct:b").     // END SNIPPET: e1     from("direct:a").process(new ProcessorA()).to("mock:a").     from("direct:b").process(new ProcessorB()).to("mock:b"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").multicast().onPrepare(new AnimalDeepClonePrepare()).to("direct:a").to("direct:b").             // END SNIPPET: e1             from("direct:a").process(new ProcessorA()).to("mock:a").             from("direct:b").process(new ProcessorB()).to("mock:b").         }     }. }
false;public;1;9;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()).     // adjust the name     body.setName("Tony the Tiger"). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     Animal body = exchange.getIn().getBody(Animal.class).     assertEquals(1, body.getId()).     assertEquals("Tiger", body.getName()). }
