commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testAggregateTimeoutOnly() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     // by default the use latest aggregation strategy is used so we get message 9     result.expectedBodiesReceived("Message 9").     // should take 0.1 seconds to complete this one     result.setResultMinimumWaitTime(90).     for (int i = 0. i < 10. i++) {         template.sendBodyAndHeader("direct:start", "Message " + i, "id", "1").     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result").         // END SNIPPET: e1         }     }. }
