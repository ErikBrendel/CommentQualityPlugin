commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSendingMessageGetsDelayed() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     // do not wait for the first message     resultEndpoint.expectedMessageCount(0).     resultEndpoint.setResultWaitTime(500).     template.sendBodyAndHeader("seda:a", "<hello>world!</hello>", "MyDelay", 1000).     // we should not receive it as we wait at most 0.5 sec and it take 1 sec to send     resultEndpoint.assertIsSatisfied().     // now if we wait a bit longer we should receive the message!     resultEndpoint.reset().     resultEndpoint.expectedMessageCount(1).     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testDelayConstant() throws Exception {     MockEndpoint resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class).     resultEndpoint.expectedMessageCount(1).     // should at least take 1 sec to complete     resultEndpoint.setResultMinimumWaitTime(900).     template.sendBody("seda:b", "<hello>world!</hello>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;public void configure() {     // START SNIPPET: ex     from("seda:a").delay().header("MyDelay").asyncDelayed().to("mock:result").     // END SNIPPET: ex     // START SNIPPET: ex2     from("seda:b").delay(1000).asyncDelayed().to("mock:result"). // END SNIPPET: ex2 }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: ex             from("seda:a").delay().header("MyDelay").asyncDelayed().to("mock:result").             // END SNIPPET: ex             // START SNIPPET: ex2             from("seda:b").delay(1000).asyncDelayed().to("mock:result").         // END SNIPPET: ex2         }     }. }
