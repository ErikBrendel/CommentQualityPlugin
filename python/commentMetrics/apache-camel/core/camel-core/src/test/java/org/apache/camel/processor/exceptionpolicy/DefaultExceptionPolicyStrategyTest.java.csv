commented;modifiers;parameterAmount;loc;comment;code
false;private;0;10;;private void setupPolicies() {     strategy = new DefaultExceptionPolicyStrategy().     policies = new HashMap<>().     type1 = new OnExceptionDefinition(CamelExchangeException.class).     type2 = new OnExceptionDefinition(Exception.class).     type3 = new OnExceptionDefinition(IOException.class).     policies.put(new ExceptionPolicyKey(null, CamelExchangeException.class, null), type1).     policies.put(new ExceptionPolicyKey(null, Exception.class, null), type2).     policies.put(new ExceptionPolicyKey(null, IOException.class, null), type3). }
false;private;0;9;;private void setupPoliciesNoTopLevelException() {     // without the top level exception that can be used as fallback     strategy = new DefaultExceptionPolicyStrategy().     policies = new HashMap<>().     type1 = new OnExceptionDefinition(CamelExchangeException.class).     type3 = new OnExceptionDefinition(IOException.class).     policies.put(new ExceptionPolicyKey(null, CamelExchangeException.class, null), type1).     policies.put(new ExceptionPolicyKey(null, IOException.class, null), type3). }
false;private;0;10;;private void setupPoliciesCausedBy() {     strategy = new DefaultExceptionPolicyStrategy().     policies = new HashMap<>().     type1 = new OnExceptionDefinition(FileNotFoundException.class).     type2 = new OnExceptionDefinition(ConnectException.class).     type3 = new OnExceptionDefinition(IOException.class).     policies.put(new ExceptionPolicyKey(null, FileNotFoundException.class, null), type1).     policies.put(new ExceptionPolicyKey(null, IOException.class, null), type2).     policies.put(new ExceptionPolicyKey(null, ConnectException.class, null), type3). }
false;public;0;6;;@Test public void testDirectMatch1() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new CamelExchangeException("", null)).     assertEquals(type1, result). }
false;public;0;6;;@Test public void testDirectMatch2() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new Exception("")).     assertEquals(type2, result). }
false;public;0;6;;@Test public void testDirectMatch3() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new IOException("")).     assertEquals(type3, result). }
false;public;0;12;;@Test public void testClosetMatch3() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new ConnectException("")).     assertEquals(type3, result).     result = strategy.getExceptionPolicy(policies, null, new SocketException("")).     assertEquals(type3, result).     result = strategy.getExceptionPolicy(policies, null, new FileNotFoundException()).     assertEquals(type3, result). }
false;public;0;12;;@Test public void testClosetMatch2() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new ClassCastException("")).     assertEquals(type2, result).     result = strategy.getExceptionPolicy(policies, null, new NumberFormatException("")).     assertEquals(type2, result).     result = strategy.getExceptionPolicy(policies, null, new NullPointerException()).     assertEquals(type2, result). }
false;public;0;9;;@Test public void testClosetMatch1() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new ValidationException(null, "")).     assertEquals(type1, result).     result = strategy.getExceptionPolicy(policies, null, new ExchangeTimedOutException(null, 0)).     assertEquals(type1, result). }
false;public;0;6;;@Test public void testNoMatch1ThenMatchingJustException() {     setupPolicies().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new AlreadyStoppedException()).     assertEquals(type2, result). }
false;public;0;6;;@Test public void testNoMatch1ThenNull() {     setupPoliciesNoTopLevelException().     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new AlreadyStoppedException()).     assertNull("Should not find an exception policy to use", result). }
false;public;0;9;;@Test public void testCausedBy() {     setupPoliciesCausedBy().     IOException ioe = new IOException("Damm").     ioe.initCause(new FileNotFoundException("Somefile not found")).     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, ioe).     assertEquals(type1, result). }
false;public;0;9;;@Test public void testCausedByWrapped() {     setupPoliciesCausedBy().     IOException ioe = new IOException("Damm").     ioe.initCause(new FileNotFoundException("Somefile not found")).     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, new RuntimeCamelException(ioe)).     assertEquals(type1, result). }
false;public;0;9;;@Test public void testCausedByNotConnected() {     setupPoliciesCausedBy().     IOException ioe = new IOException("Damm").     ioe.initCause(new ConnectException("Not connected")).     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, ioe).     assertEquals(type3, result). }
false;public;0;9;;@Test public void testCausedByOtherIO() {     setupPoliciesCausedBy().     IOException ioe = new IOException("Damm").     ioe.initCause(new MalformedURLException("Bad url")).     OnExceptionDefinition result = strategy.getExceptionPolicy(policies, null, ioe).     assertEquals(type2, result). }
