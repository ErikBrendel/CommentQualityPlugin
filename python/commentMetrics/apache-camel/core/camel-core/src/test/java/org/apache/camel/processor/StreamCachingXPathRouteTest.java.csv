commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testByteArrayInputStream() throws Exception {     getMockEndpoint("mock:english").expectedBodiesReceived("<hello/>").     getMockEndpoint("mock:dutch").expectedBodiesReceived("<hallo/>").     getMockEndpoint("mock:german").expectedBodiesReceived("<hallo/>").     getMockEndpoint("mock:french").expectedBodiesReceived("<hellos/>").     template.sendBody("direct:a", new ByteArrayInputStream("<hello/>".getBytes())).     template.sendBody("direct:a", new ByteArrayInputStream("<hallo/>".getBytes())).     template.sendBody("direct:a", new ByteArrayInputStream("<hellos/>".getBytes())).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     context.setStreamCaching(true).     from("direct:a").choice().when(xpath("//hello")).to("mock:english").when(xpath("//hallo")).to("mock:dutch", "mock:german").otherwise().to("mock:french"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setStreamCaching(true).             from("direct:a").choice().when(xpath("//hello")).to("mock:english").when(xpath("//hallo")).to("mock:dutch", "mock:german").otherwise().to("mock:french").         }     }. }
