commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSimpleOgnlIssueKing() throws Exception {     getMockEndpoint("mock:king").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     MyObjectMessage body = new MyObjectMessage().     body.getProperty().put("foo", "King Kong").     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSimpleOgnlIssueOther() throws Exception {     getMockEndpoint("mock:king").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(1).     MyObjectMessage body = new MyObjectMessage().     body.getProperty().put("foo", "Tiger").     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").choice().when().simple("${body.property['foo']} == 'King Kong'").to("mock:king").otherwise().to("mock:other"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when().simple("${body.property['foo']} == 'King Kong'").to("mock:king").otherwise().to("mock:other").         }     }. }
false;public;0;3;;public Map<Object, Object> getProperty() {     return property. }
