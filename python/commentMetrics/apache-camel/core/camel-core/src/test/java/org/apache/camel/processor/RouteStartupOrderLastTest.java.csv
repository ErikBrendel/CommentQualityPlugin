commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testRouteStartupOrderLast() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // assert correct order     DefaultCamelContext dcc = (DefaultCamelContext) context.     List<RouteStartupOrder> order = dcc.getRouteStartupOrder().     assertEquals(4, order.size()).     assertEquals("seda://foo", order.get(0).getRoute().getEndpoint().getEndpointUri()).     assertEquals("direct://start", order.get(1).getRoute().getEndpoint().getEndpointUri()).     assertEquals("seda://bar", order.get(2).getRoute().getEndpoint().getEndpointUri()).     assertEquals("direct://bar", order.get(3).getRoute().getEndpoint().getEndpointUri()). }
false;public;0;14;;@Override public void configure() throws Exception {     // use auto assigned startup ordering     from("direct:start").to("seda:foo").     // should start first     from("seda:foo").startupOrder(1).to("mock:result").     // should start last after the default routes     from("direct:bar").startupOrder(12345).to("seda:bar").     // use auto assigned startup ordering     from("seda:bar").to("mock:other"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use auto assigned startup ordering             from("direct:start").to("seda:foo").             // should start first             from("seda:foo").startupOrder(1).to("mock:result").             // should start last after the default routes             from("direct:bar").startupOrder(12345).to("seda:bar").             // use auto assigned startup ordering             from("seda:bar").to("mock:other").         }     }. }
