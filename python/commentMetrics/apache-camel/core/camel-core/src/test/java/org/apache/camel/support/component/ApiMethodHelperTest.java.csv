commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testGetCandidateMethods() {     List<ApiMethod> methods = apiMethodHelper.getCandidateMethods("sayHi").     assertEquals("Can't find sayHi(*)", 2, methods.size()).     methods = apiMethodHelper.getCandidateMethods("hi").     assertEquals("Can't find sayHi(name)", 2, methods.size()).     methods = apiMethodHelper.getCandidateMethods("hi", Arrays.asList("name")).     assertEquals("Can't find sayHi(name)", 1, methods.size()).     methods = apiMethodHelper.getCandidateMethods("greetMe").     assertEquals("Can't find greetMe(name)", 1, methods.size()).     methods = apiMethodHelper.getCandidateMethods("greetUs", Arrays.asList("name1")).     assertEquals("Can't find greetUs(name1, name2)", 1, methods.size()).     methods = apiMethodHelper.getCandidateMethods("greetAll", Arrays.asList("nameMap")).     assertEquals("Can't find greetAll(nameMap)", 1, methods.size()).     methods = apiMethodHelper.getCandidateMethods("greetInnerChild", Arrays.asList("child")).     assertEquals("Can't find greetInnerChild(child)", 1, methods.size()). }
false;public;0;26;;@Test public void testFilterMethods() {     List<ApiMethod> methods = apiMethodHelper.filterMethods(Arrays.asList(sayHis), ApiMethodHelper.MatchType.EXACT).     assertEquals("Exact match failed for sayHi()", 1, methods.size()).     assertEquals("Exact match failed for sayHi()", TestMethod.SAYHI, methods.get(0)).     methods = apiMethodHelper.filterMethods(Arrays.asList(sayHis), ApiMethodHelper.MatchType.SUBSET).     assertEquals("Subset match failed for sayHi(*)", 2, methods.size()).     methods = apiMethodHelper.filterMethods(Arrays.asList(sayHis), ApiMethodHelper.MatchType.SUBSET, Arrays.asList("name")).     assertEquals("Subset match failed for sayHi(name)", 1, methods.size()).     assertEquals("Exact match failed for sayHi()", TestMethod.SAYHI_1, methods.get(0)).     methods = apiMethodHelper.filterMethods(Arrays.asList(sayHis), ApiMethodHelper.MatchType.SUPER_SET, Arrays.asList("name")).     assertEquals("Super set match failed for sayHi(name)", 1, methods.size()).     assertEquals("Exact match failed for sayHi()", TestMethod.SAYHI_1, methods.get(0)).     methods = apiMethodHelper.filterMethods(Arrays.asList(TestMethod.values()), ApiMethodHelper.MatchType.SUPER_SET, Arrays.asList("name")).     assertEquals("Super set match failed for sayHi(name)", 2, methods.size()).     // test nullable names     methods = apiMethodHelper.filterMethods(Arrays.asList(TestMethod.GREETALL, TestMethod.GREETALL_1, TestMethod.GREETALL_2), ApiMethodHelper.MatchType.SUPER_SET).     assertEquals("Super set match with null args failed for greetAll(names)", 1, methods.size()). }
false;public;0;8;;@Test public void testGetArguments() {     assertEquals("GetArguments failed for hi", 2, apiMethodHelper.getArguments("hi").size()).     assertEquals("GetArguments failed for greetMe", 2, apiMethodHelper.getArguments("greetMe").size()).     assertEquals("GetArguments failed for greetUs", 4, apiMethodHelper.getArguments("greetUs").size()).     assertEquals("GetArguments failed for greetAll", 6, apiMethodHelper.getArguments("greetAll").size()).     assertEquals("GetArguments failed for greetInnerChild", 2, apiMethodHelper.getArguments("greetInnerChild").size()). }
false;public;0;15;;@Test public void testGetMissingProperties() throws Exception {     assertEquals("Missing properties for hi", 1, apiMethodHelper.getMissingProperties("hi", new HashSet<String>()).size()).     final HashSet<String> argNames = new HashSet<>().     argNames.add("name").     assertEquals("Missing properties for greetMe", 0, apiMethodHelper.getMissingProperties("greetMe", argNames).size()).     argNames.clear().     argNames.add("name1").     assertEquals("Missing properties for greetMe", 1, apiMethodHelper.getMissingProperties("greetUs", argNames).size()). }
false;public;0;4;;@Test public void testAllArguments() throws Exception {     assertEquals("Get all arguments", 8, apiMethodHelper.allArguments().size()). }
false;public;0;8;;@Test public void testGetType() throws Exception {     assertEquals("Get type name", String.class, apiMethodHelper.getType("name")).     assertEquals("Get type name1", String.class, apiMethodHelper.getType("name1")).     assertEquals("Get type name2", String.class, apiMethodHelper.getType("name2")).     assertEquals("Get type nameMap", Map.class, apiMethodHelper.getType("nameMap")).     assertEquals("Get type child", TestProxy.InnerChild.class, apiMethodHelper.getType("child")). }
false;public;0;5;;@Test public void testGetHighestPriorityMethod() throws Exception {     assertEquals("Get highest priority method", TestMethod.SAYHI_1, ApiMethodHelper.getHighestPriorityMethod(Arrays.asList(sayHis))). }
false;public;1;4;;@Override public String sayHi(String name) {     return "Howdy " + name. }
false;public;0;42;;@Test public void testInvokeMethod() throws Exception {     TestProxy proxy = new TestProxy().     assertEquals("sayHi()", "Hello!", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI, Collections.<String, Object>emptyMap())).     final HashMap<String, Object> properties = new HashMap<>().     properties.put("name", "Dave").     assertEquals("sayHi(name)", "Hello Dave", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI_1, properties)).     assertEquals("greetMe(name)", "Greetings Dave", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETME, properties)).     properties.clear().     properties.put("name1", "Dave").     properties.put("name2", "Frank").     assertEquals("greetUs(name1, name2)", "Greetings Dave, Frank", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETUS, properties)).     properties.clear().     properties.put("names", new String[] { "Dave", "Frank" }).     assertEquals("greetAll(names)", "Greetings Dave, Frank", ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETALL, properties)).     properties.clear().     Map<String, String> nameMap = new HashMap<>().     nameMap.put("Dave", "Hello").     nameMap.put("Frank", "Goodbye").     properties.put("nameMap", nameMap).     final Map<String, String> result = (Map<String, String>) ApiMethodHelper.invokeMethod(proxy, TestMethod.GREETALL_2, properties).     assertNotNull("greetAll(nameMap)", result).     for (Map.Entry<String, String> entry : result.entrySet()) {         assertTrue("greetAll(nameMap)", entry.getValue().endsWith(entry.getKey())).     }     // test with a derived proxy     proxy = new TestProxy() {          @Override         public String sayHi(String name) {             return "Howdy " + name.         }     }.     properties.clear().     properties.put("name", "Dave").     assertEquals("Derived sayHi(name)", "Howdy Dave", ApiMethodHelper.invokeMethod(proxy, TestMethod.SAYHI_1, properties)). }
false;public;0;4;;@Override public String getName() {     return apiMethod.getName(). }
false;public;0;4;;@Override public Class<?> getResultType() {     return apiMethod.getResultType(). }
false;public;0;4;;@Override public List<String> getArgNames() {     return apiMethod.getArgNames(). }
false;public;0;4;;@Override public List<Class<?>> getArgTypes() {     return apiMethod.getArgTypes(). }
false;public;0;4;;@Override public Method getMethod() {     return apiMethod.getMethod(). }
