commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;public;0;19;;@Test public void testCreateDirectory() throws Exception {     deleteDirectory("target/data/file/foo").     Endpoint endpoint = context.getEndpoint("file://target/data/file/foo").     Consumer consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {         // noop         }     }).     consumer.start().     consumer.stop().     // the directory should now exists     File dir = new File("target/data/file/foo").     assertTrue("Directory should be created", dir.exists()).     assertTrue("Directory should be a directory", dir.isDirectory()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;public;0;21;;@Test public void testCreateAbsoluteDirectory() throws Exception {     deleteDirectory("target/data/file/foo").     // use current dir as base as absolute path     String base = new File("").getAbsolutePath() + "/target/data/file/foo".     Endpoint endpoint = context.getEndpoint("file://" + base).     Consumer consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {         // noop         }     }).     consumer.start().     consumer.stop().     // the directory should now exists     File dir = new File(base).     assertTrue("Directory should be created", dir.exists()).     assertTrue("Directory should be a directory", dir.isDirectory()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;public;0;18;;@Test public void testDoNotCreateDirectory() throws Exception {     deleteDirectory("target/data/file/foo").     Endpoint endpoint = context.getEndpoint("file://target/data/file/foo?autoCreate=false").     Consumer consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {         // noop         }     }).     consumer.start().     consumer.stop().     // the directory should NOT exists     File dir = new File("target/data/file/foo").     assertFalse("Directory should NOT be created", dir.exists()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;public;0;19;;@Test public void testAutoCreateDirectoryWithDot() throws Exception {     deleteDirectory("target/data/file/foo.bar").     Endpoint endpoint = context.getEndpoint("file://target/data/file/foo.bar?autoCreate=true").     Consumer consumer = endpoint.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {         // noop         }     }).     consumer.start().     consumer.stop().     // the directory should exist     File dir = new File("target/data/file/foo.bar").     assertTrue("Directory should be created", dir.exists()).     assertTrue("Directory should be a directory", dir.isDirectory()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;public;0;20;;@Test public void testStartingDirectoryMustExistDirectory() throws Exception {     deleteDirectory("target/data/file/foo").     Endpoint endpoint = context.getEndpoint("file://target/data/file/foo?autoCreate=false&startingDirectoryMustExist=true").     try {         endpoint.createConsumer(new Processor() {              public void process(Exchange exchange) throws Exception {             // noop             }         }).         fail("Should have thrown an exception").     } catch (FileNotFoundException e) {         assertTrue(e.getMessage().startsWith("Starting directory does not exist")).     }     // the directory should NOT exists     File dir = new File("target/data/file/foo").     assertFalse("Directory should NOT be created", dir.exists()). }
