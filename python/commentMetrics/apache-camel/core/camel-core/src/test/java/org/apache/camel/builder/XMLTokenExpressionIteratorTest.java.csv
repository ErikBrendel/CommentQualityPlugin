commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Before public void setUp() throws Exception {     nsmap = new HashMap<>().     nsmap.put("G", "urn:g").     nsmap.put("C", "urn:c"). }
false;public;0;4;;@Test public void testExtractChild() throws Exception {     invokeAndVerify("//C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;8;;@Test public void testExtractChildInjected() throws Exception {     String[] result = RESULTS_CHILD_JAVA8.     if (isJava7OrLower()) {         result = RESULTS_CHILD.     }     invokeAndVerify("//C:child", 'i', new ByteArrayInputStream(TEST_BODY), result). }
false;public;0;4;;@Test public void testExtractChildNSMixed() throws Exception {     invokeAndVerify("//*:child", 'w', new ByteArrayInputStream(TEST_BODY_NS_MIXED), RESULTS_CHILD_MIXED_WRAPPED). }
false;public;0;8;;@Test public void testExtractChildNSMixedInjected() throws Exception {     String[] result = RESULTS_CHILD_MIXED_JAVA8.     if (isJava7OrLower()) {         result = RESULTS_CHILD_MIXED.     }     invokeAndVerify("//*:child", 'i', new ByteArrayInputStream(TEST_BODY_NS_MIXED), result). }
false;public;0;4;;@Test public void testExtractAnyChild() throws Exception {     invokeAndVerify("//*:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;8;;@Test public void testExtractCxxxd() throws Exception {     String[] result = RESULTS_CHILD_JAVA8.     if (isJava7OrLower()) {         result = RESULTS_CHILD.     }     invokeAndVerify("//C:c*d", 'i', new ByteArrayInputStream(TEST_BODY), result). }
false;public;0;4;;@Test public void testExtractUnqualifiedChild() throws Exception {     invokeAndVerify("//child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_NULL). }
false;public;0;4;;@Test public void testExtractSomeUnqualifiedChild() throws Exception {     invokeAndVerify("//child", 'w', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), RESULTS_CHILD_NO_NS_MIXED_WRAPPED). }
false;public;0;8;;@Test public void testExtractSomeUnqualifiedChildInjected() throws Exception {     String[] result = RESULTS_CHILD_NO_NS_MIXED_JAVA8.     if (isJava7OrLower()) {         result = RESULTS_CHILD_NO_NS_MIXED.     }     invokeAndVerify("//child", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), result). }
false;public;0;5;;@Test public void testExtractSomeQualifiedChild() throws Exception {     nsmap.put("", "urn:c").     invokeAndVerify("//child", 'w', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), RESULTS_CHILD_NS_MIXED_WRAPPED). }
false;public;0;9;;@Test public void testExtractSomeQualifiedChildInjected() throws Exception {     nsmap.put("", "urn:c").     String[] result = RESULTS_CHILD_NS_MIXED_JAVA8.     if (isJava7OrLower()) {         result = RESULTS_CHILD_NS_MIXED.     }     invokeAndVerify("//child", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), result). }
false;public;0;9;;@Test public void testExtractWithNullNamespaceMap() throws Exception {     nsmap = null.     String[] result = RESULTS_CHILD_NO_NS_MIXED_JAVA8.     if (isJava7OrLower()) {         result = RESULTS_CHILD_NO_NS_MIXED.     }     invokeAndVerify("//child", 'i', new ByteArrayInputStream(TEST_BODY_NO_NS_MIXED), result). }
false;public;0;5;;@Test public void testExtractChildWithAncestorGGPdGP() throws Exception {     invokeAndVerify("/G:greatgrandparent/grandparent//C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;5;;@Test public void testExtractChildWithAncestorGGPdP() throws Exception {     invokeAndVerify("/G:greatgrandparent//C:parent/C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;5;;@Test public void testExtractChildWithAncestorGPddP() throws Exception {     invokeAndVerify("//grandparent//C:parent/C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;5;;@Test public void testExtractChildWithAncestorGPdP() throws Exception {     invokeAndVerify("//grandparent/C:parent/C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;5;;@Test public void testExtractChildWithAncestorP() throws Exception {     invokeAndVerify("//C:parent/C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;5;;@Test public void testExtractChildWithAncestorGGPdGPdP() throws Exception {     invokeAndVerify("/G:greatgrandparent/grandparent/C:parent/C:child", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_CHILD_WRAPPED). }
false;public;0;5;;@Test public void testExtractParent() throws Exception {     invokeAndVerify("//C:parent", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_PARENT_WRAPPED). }
false;public;0;5;;@Test public void testExtractParentInjected() throws Exception {     invokeAndVerify("//C:parent", 'i', new ByteArrayInputStream(TEST_BODY), RESULTS_PARENT). }
false;public;0;5;;@Test public void testExtractAuntWC1() throws Exception {     invokeAndVerify("//a*t", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_AUNT_WRAPPED). }
false;public;0;5;;@Test public void testExtractAuntWC2() throws Exception {     invokeAndVerify("//au?t", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_AUNT_WRAPPED). }
false;public;0;5;;@Test public void testExtractAunt() throws Exception {     invokeAndVerify("//aunt", 'w', new ByteArrayInputStream(TEST_BODY), RESULTS_AUNT_WRAPPED). }
false;public;0;5;;@Test public void testExtractAuntInjected() throws Exception {     invokeAndVerify("//aunt", 'i', new ByteArrayInputStream(TEST_BODY), RESULTS_AUNT). }
false;public;0;5;;@Test public void testExtractAuntUnwrapped() throws Exception {     invokeAndVerify("//aunt", 'u', new ByteArrayInputStream(TEST_BODY), RESULTS_AUNT_UNWRAPPED). }
false;public;0;5;;@Test public void testExtractGrandParentText() throws Exception {     invokeAndVerify("//grandparent", 't', new ByteArrayInputStream(TEST_BODY), RESULTS_GRANDPARENT_TEXT). }
false;private;4;16;;private void invokeAndVerify(String path, char mode, InputStream in, String[] expected) throws Exception {     XMLTokenExpressionIterator xtei = new XMLTokenExpressionIterator(path, mode).     xtei.setNamespaces(nsmap).     Iterator<?> it = xtei.createIterator(in, "utf-8").     List<String> results = new ArrayList<>().     while (it.hasNext()) {         results.add((String) it.next()).     }     ((Closeable) it).close().     assertEquals("token count", expected.length, results.size()).     for (int i = 0. i < expected.length. i++) {         assertEquals("mismatch [" + i + "]", expected[i], results.get(i)).     } }
false;private;0;3;;private boolean isJava7OrLower() {     return getJavaMajorVersion() <= 7. }
