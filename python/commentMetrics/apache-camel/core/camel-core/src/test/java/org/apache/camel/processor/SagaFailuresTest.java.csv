commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testCompensationAfterFailures() throws Exception {     maxFailures = new AtomicInteger(2).     MockEndpoint compensate = getMockEndpoint("mock:compensate").     compensate.expectedMessageCount(1).     sendBody("direct:saga-compensate", "hello").     compensate.assertIsSatisfied(). }
false;public;0;12;;@Test public void testNoCompensationAfterMaxFailures() throws Exception {     maxFailures = new AtomicInteger(3).     MockEndpoint compensate = getMockEndpoint("mock:compensate").     compensate.expectedMessageCount(1).     compensate.setResultWaitTime(200).     sendBody("direct:saga-compensate", "hello").     compensate.assertIsNotSatisfied(). }
false;public;0;15;;@Test public void testCompletionAfterFailures() throws Exception {     maxFailures = new AtomicInteger(2).     MockEndpoint complete = getMockEndpoint("mock:complete").     complete.expectedMessageCount(1).     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedBodiesReceived("hello").     sendBody("direct:saga-complete", "hello").     complete.assertIsSatisfied().     end.assertIsSatisfied(). }
false;public;0;16;;@Test public void testNoCompletionAfterMaxFailures() throws Exception {     maxFailures = new AtomicInteger(3).     MockEndpoint complete = getMockEndpoint("mock:complete").     complete.expectedMessageCount(1).     complete.setResultWaitTime(200).     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedBodiesReceived("hello").     sendBody("direct:saga-complete", "hello").     complete.assertIsNotSatisfied().     end.assertIsSatisfied(). }
false;public;0;39;;@Override public void configure() throws Exception {     InMemorySagaService sagaService = new InMemorySagaService().     sagaService.setMaxRetryAttempts(3).     sagaService.setRetryDelayInMilliseconds(20).     context.addService(sagaService).     from("direct:saga-compensate").saga().compensation("direct:compensate").process(x -> {         throw new RuntimeException("fail").     }).     from("direct:saga-complete").saga().completion("direct:complete").to("mock:end").     from("direct:compensate").process(x -> {         int current = maxFailures.decrementAndGet().         if (current >= 0) {             throw new RuntimeException("compensation failure").         }     }).to("mock:compensate").     from("direct:complete").process(x -> {         int current = maxFailures.decrementAndGet().         if (current >= 0) {             throw new RuntimeException("completion failure").         }     }).to("mock:complete"). }
false;protected;0;45;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             InMemorySagaService sagaService = new InMemorySagaService().             sagaService.setMaxRetryAttempts(3).             sagaService.setRetryDelayInMilliseconds(20).             context.addService(sagaService).             from("direct:saga-compensate").saga().compensation("direct:compensate").process(x -> {                 throw new RuntimeException("fail").             }).             from("direct:saga-complete").saga().completion("direct:complete").to("mock:end").             from("direct:compensate").process(x -> {                 int current = maxFailures.decrementAndGet().                 if (current >= 0) {                     throw new RuntimeException("compensation failure").                 }             }).to("mock:compensate").             from("direct:complete").process(x -> {                 int current = maxFailures.decrementAndGet().                 if (current >= 0) {                     throw new RuntimeException("completion failure").                 }             }).to("mock:complete").         }     }. }
