commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     // replace all gold id's with the following route path     weaveById("gold*").replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;20;;@Test public void testReplaceMultipleIds() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // replace all gold id's with the following route path             weaveById("gold*").replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(2).     getMockEndpoint("mock:b").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").id("gold-1").to("mock:bar").id("gold-2").to("mock:result").id("silver-1"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").id("gold-1").to("mock:bar").id("gold-2").to("mock:result").id("silver-1").         }     }. }
