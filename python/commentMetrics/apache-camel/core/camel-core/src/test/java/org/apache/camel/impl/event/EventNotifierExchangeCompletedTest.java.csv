commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     events.clear().     super.setUp(). }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;public;1;7;;public boolean isEnabled(CamelEvent event) {     // we only want the completed event     return event instanceof ExchangeCompletedEvent. // you can add additional filtering such as the exchange // should be from a specific endpoint or route // just return true for the events you like }
false;protected;0;18;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }          public boolean isEnabled(CamelEvent event) {             // we only want the completed event             return event instanceof ExchangeCompletedEvent.         // you can add additional filtering such as the exchange         // should be from a specific endpoint or route         // just return true for the events you like         }     }).     return context. }
false;public;0;27;;@Test public void testExchangeCompleted() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(1, events.size()).     // get the event     ExchangeCompletedEvent event = (ExchangeCompletedEvent) events.get(0).     assertNotNull(event.getExchange()).     assertNotNull(event.getExchange().getFromEndpoint()).     assertEquals("direct://start", event.getExchange().getFromEndpoint().getEndpointUri()).     // grab the created timestamp     Date created = event.getExchange().getCreated().     assertNotNull(created).     // calculate elapsed time     Date now = new Date().     long elapsed = now.getTime() - created.getTime().     assertTrue("Should be > 400, was: " + elapsed, elapsed > 400).     log.info("Elapsed time in millis: " + elapsed). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("direct:bar").to("mock:result").     from("direct:bar").delay(500).to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("direct:bar").to("mock:result").             from("direct:bar").delay(500).to("mock:bar").         }     }. }
