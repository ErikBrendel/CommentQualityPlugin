commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").transform(body().append(" World")).to("mock:result"). }
false;public;0;18;;@Test public void testAppend() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform(body().append(" World")).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.message(0).body().isEqualToIgnoreCase("hello WORLD").     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").transform(body().prepend("Hello ")).to("mock:result"). }
false;public;0;18;;@Test public void testPrepend() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform(body().prepend("Hello ")).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.message(0).body().isEqualToIgnoreCase("hello world").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;public;2;5;;public <T> T evaluate(Exchange exchange, Class<T> type) {     String body = exchange.getIn().getBody(String.class).     Boolean answer = body.contains("Camel").     return type.cast(answer). }
false;public;2;5;;public <T> T evaluate(Exchange exchange, Class<T> type) {     String body = exchange.getIn().getBody(String.class).     Boolean answer = body.contains("Camel").     return type.cast(answer). }
false;public;0;34;;@Test public void testMatches() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.message(0).body().matches(new Expression() {          public <T> T evaluate(Exchange exchange, Class<T> type) {             String body = exchange.getIn().getBody(String.class).             Boolean answer = body.contains("Camel").             return type.cast(answer).         }     }).     template.sendBody("direct:start", "Camel rocks").     mock.assertIsSatisfied().     // send in a false test     mock.reset().     mock.message(0).body().matches(new Expression() {          public <T> T evaluate(Exchange exchange, Class<T> type) {             String body = exchange.getIn().getBody(String.class).             Boolean answer = body.contains("Camel").             return type.cast(answer).         }     }).     template.sendBody("direct:start", "Hello World").     mock.assertIsNotSatisfied(). }
