commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBeanParameterInvalidValueA() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:a", "World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         RuntimeExchangeException cause = assertIsInstanceOf(RuntimeExchangeException.class, e.getCause()).         assertTrue(cause.getMessage().contains("echo(java.lang.String,int)")).         assertTrue(cause.getMessage().contains("[World, null]")).         assertIsInstanceOf(IllegalArgumentException.class, cause.getCause()).     }     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyBean()).     return jndi. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:a").to("bean:foo?method=echo").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").to("bean:foo?method=echo").to("mock:result").         }     }. }
false;public;2;16;;public String echo(String body, int times) {     if (body == null) {         // use an empty string for no body         return "".     }     if (times > 0) {         StringBuilder sb = new StringBuilder().         for (int i = 0. i < times. i++) {             sb.append(body).         }         return sb.toString().     }     return body. }
