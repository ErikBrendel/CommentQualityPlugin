commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testDurationRoutePolicy() throws Exception {     assertTrue(context.getRouteController().getRouteStatus("foo").isStarted()).     assertFalse(context.getRouteController().getRouteStatus("foo").isStopped()).     // the policy should stop the route after 5 messages     getMockEndpoint("mock:foo").expectedMinimumMessageCount(5).     assertMockEndpointsSatisfied().     // need a little time to stop async     await().atMost(5, TimeUnit.SECONDS).untilAsserted(() -> {         assertFalse(context.getRouteController().getRouteStatus("foo").isStarted()).         assertTrue(context.getRouteController().getRouteStatus("foo").isStopped()).     }). }
false;public;0;8;;@Override public void configure() throws Exception {     DurationRoutePolicy policy = new DurationRoutePolicy().     policy.setMaxMessages(5).     from("timer:foo?period=100").routeId("foo").routePolicy(policy).to("mock:foo"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             DurationRoutePolicy policy = new DurationRoutePolicy().             policy.setMaxMessages(5).             from("timer:foo?period=100").routeId("foo").routePolicy(policy).to("mock:foo").         }     }. }
