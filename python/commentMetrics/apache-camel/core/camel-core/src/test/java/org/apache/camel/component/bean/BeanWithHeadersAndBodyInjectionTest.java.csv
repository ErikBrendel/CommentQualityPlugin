commented;modifiers;parameterAmount;loc;comment;code
false;public;1;9;;public void process(Exchange exchange) throws Exception {     exchange.setProperty("p1", "abc").     exchange.setProperty("p2", 123).     Message in = exchange.getIn().     in.setHeader("h1", "xyz").     in.setHeader("h2", 456).     in.setBody("TheBody"). }
false;public;0;22;;@Test public void testSendMessage() throws Exception {     template.send("direct:in", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setProperty("p1", "abc").             exchange.setProperty("p2", 123).             Message in = exchange.getIn().             in.setHeader("h1", "xyz").             in.setHeader("h2", 456).             in.setBody("TheBody").         }     }).     Map<String, Object> foo = myBean.headers.     assertNotNull("myBean.foo", foo).     assertEquals("foo.h1", "xyz", foo.get("h1")).     assertEquals("foo.h2", 456, foo.get("h2")).     assertEquals("body", "TheBody", myBean.body). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     return answer. }
false;public;0;3;;public void configure() {     from("direct:in").to("bean:myBean?method=myMethod"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:in").to("bean:myBean?method=myMethod").         }     }. }
false;public;0;4;;@Override public String toString() {     return "MyBean[foo: " + headers + " body: " + body + "]". }
false;public;2;5;;public void myMethod(@Headers Map<String, Object> headers, Object body) {     this.headers = headers.     this.body = body.     LOG.info("myMethod() method called on " + this). }
false;public;2;3;;public void anotherMethod(@Headers Map<String, Object> headers, Object body) {     fail("Should not have called this method!"). }
