commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;protected CamelContext createCamelContext() {     // disable stream cache otherwise to much hazzle in this unit test to filter the stream cache     // in all the assertion codes     DefaultCamelContext ctx = new DefaultCamelContext().     ctx.setStreamCaching(Boolean.FALSE).     return ctx. }
false;public;0;5;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").to("direct:b"). }
false;protected;0;12;;protected List<Route> buildSimpleRoute() throws Exception {     // START SNIPPET: e1     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").to("direct:b").         }     }.     // END SNIPPET: e1     return getRouteList(builder). }
false;public;0;16;;@Test public void testSimpleRoute() throws Exception {     List<Route> routes = buildSimpleRoute().     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         SendProcessor sendProcessor = assertIsInstanceOf(SendProcessor.class, channel.getNextProcessor()).         assertEquals("Endpoint URI", "direct://b", sendProcessor.getDestination().getEndpointUri()).     } }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").filter(header("foo").isEqualTo("bar")).to("direct:b"). }
false;protected;0;14;;protected List<Route> buildSimpleRouteWithHeaderPredicate() throws Exception {     // START SNIPPET: e2     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").filter(header("foo").isEqualTo("bar")).to("direct:b").         }     }.     // END SNIPPET: e2     return getRouteList(builder). }
false;public;0;19;;@Test public void testSimpleRouteWithHeaderPredicate() throws Exception {     List<Route> routes = buildSimpleRouteWithHeaderPredicate().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         FilterProcessor filterProcessor = assertIsInstanceOf(FilterProcessor.class, channel.getNextProcessor()).         SendProcessor sendProcessor = assertIsInstanceOf(SendProcessor.class, unwrapChannel(filterProcessor).getNextProcessor()).         assertEquals("Endpoint URI", "direct://b", sendProcessor.getDestination().getEndpointUri()).     } }
false;public;0;12;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").choice().when(header("foo").isEqualTo("bar")).to("direct:b").when(header("foo").isEqualTo("cheese")).to("direct:c").otherwise().to("direct:d"). }
false;protected;0;19;;protected List<Route> buildSimpleRouteWithChoice() throws Exception {     // START SNIPPET: e3     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").choice().when(header("foo").isEqualTo("bar")).to("direct:b").when(header("foo").isEqualTo("cheese")).to("direct:c").otherwise().to("direct:d").         }     }.     // END SNIPPET: e3     return getRouteList(builder). }
false;public;0;27;;@Test public void testSimpleRouteWithChoice() throws Exception {     List<Route> routes = buildSimpleRouteWithChoice().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         ChoiceProcessor choiceProcessor = assertIsInstanceOf(ChoiceProcessor.class, channel.getNextProcessor()).         List<FilterProcessor> filters = choiceProcessor.getFilters().         assertEquals("Should be two when clauses", 2, filters.size()).         Processor filter1 = filters.get(0).         assertSendTo(unwrapChannel(((FilterProcessor) filter1).getProcessor()).getNextProcessor(), "direct://b").         Processor filter2 = filters.get(1).         assertSendTo(unwrapChannel(((FilterProcessor) filter2).getProcessor()).getNextProcessor(), "direct://c").         assertSendTo(unwrapChannel(choiceProcessor.getOtherwise()).getNextProcessor(), "direct://d").     } }
false;public;1;3;;public void process(Exchange exchange) {     log.debug("Called with exchange: " + exchange). }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").process(myProcessor). }
false;protected;0;19;;protected List<Route> buildCustomProcessor() throws Exception {     // START SNIPPET: e4     myProcessor = new Processor() {          public void process(Exchange exchange) {             log.debug("Called with exchange: " + exchange).         }     }.     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").process(myProcessor).         }     }.     // END SNIPPET: e4     return getRouteList(builder). }
false;public;0;10;;@Test public void testCustomProcessor() throws Exception {     List<Route> routes = buildCustomProcessor().     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).     } }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").filter(header("foo").isEqualTo("bar")).process(myProcessor). }
false;protected;0;14;;protected List<Route> buildCustomProcessorWithFilter() throws Exception {     // START SNIPPET: e5     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").filter(header("foo").isEqualTo("bar")).process(myProcessor).         }     }.     // END SNIPPET: e5     return getRouteList(builder). }
false;public;0;12;;@Test public void testCustomProcessorWithFilter() throws Exception {     List<Route> routes = buildCustomProcessorWithFilter().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).     } }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").multicast().to("direct:tap", "direct:b"). }
false;protected;0;13;;protected List<Route> buildWireTap() throws Exception {     // START SNIPPET: e6     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").multicast().to("direct:tap", "direct:b").         }     }.     // END SNIPPET: e6     return getRouteList(builder). }
false;public;0;22;;@Test public void testWireTap() throws Exception {     List<Route> routes = buildWireTap().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         MulticastProcessor multicastProcessor = assertIsInstanceOf(MulticastProcessor.class, channel.getNextProcessor()).         List<Processor> endpoints = new ArrayList<>(multicastProcessor.getProcessors()).         assertEquals("Should have 2 endpoints", 2, endpoints.size()).         assertSendToProcessor(unwrapChannel(endpoints.get(0)).getNextProcessor(), "direct://tap").         assertSendToProcessor(unwrapChannel(endpoints.get(1)).getNextProcessor(), "direct://b").     } }
false;public;0;8;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").process(interceptor1).process(interceptor2).to("direct:d"). }
false;protected;0;18;;protected List<Route> buildRouteWithInterceptor() throws Exception {     interceptor1 = new org.apache.camel.support.processor.DelegateProcessor() {     }.     interceptor2 = new MyInterceptorProcessor().     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").process(interceptor1).process(interceptor2).to("direct:d").         }     }.     return getRouteList(builder). }
false;public;0;23;;@Test public void testRouteWithInterceptor() throws Exception {     List<Route> routes = buildRouteWithInterceptor().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Pipeline line = assertIsInstanceOf(Pipeline.class, unwrap(consumer.getProcessor())).         assertEquals(3, line.getProcessors().size()).         // last should be our seda         List<Processor> processors = new ArrayList<>(line.getProcessors()).         Processor sendTo = assertIsInstanceOf(SendProcessor.class, unwrapChannel(processors.get(2)).getNextProcessor()).         assertSendTo(sendTo, "direct://d").     } }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").filter(header("foo").isEqualTo(123)).to("direct:b"). }
false;public;0;23;;@Test public void testComplexExpressions() throws Exception {     // START SNIPPET: e7     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").filter(header("foo").isEqualTo(123)).to("direct:b").         }     }.     // END SNIPPET: e7     List<Route> routes = getRouteList(builder).     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).     } }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").multicast().to("direct:b", "direct:c", "direct:d"). }
false;protected;0;13;;protected List<Route> buildStaticRecipientList() throws Exception {     // START SNIPPET: multicast     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").multicast().to("direct:b", "direct:c", "direct:d").         }     }.     // END SNIPPET: multicast     return getRouteList(builder). }
false;public;0;6;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").recipientList(header("foo")). }
false;protected;0;13;;protected List<Route> buildDynamicRecipientList() throws Exception {     // START SNIPPET: e9     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").recipientList(header("foo")).         }     }.     // END SNIPPET: e9     return getRouteList(builder). }
false;public;0;28;;@Test public void testRouteDynamicReceipentList() throws Exception {     List<Route> routes = buildDynamicRecipientList().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         Pipeline line = assertIsInstanceOf(Pipeline.class, channel.getNextProcessor()).         Iterator<?> it = line.getProcessors().iterator().         // EvaluateExpressionProcessor should be wrapped in error handler         Object first = it.next().         first = assertIsInstanceOf(DeadLetterChannel.class, first).getOutput().         assertIsInstanceOf(EvaluateExpressionProcessor.class, first).         // and the second should NOT be wrapped in error handler         Object second = it.next().         assertIsInstanceOf(RecipientList.class, second).     } }
false;public;0;7;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").split(bodyAs(String.class).tokenize("\n")).to("direct:b"). }
false;protected;0;14;;protected List<Route> buildSplitter() throws Exception {     // START SNIPPET: splitter     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").split(bodyAs(String.class).tokenize("\n")).to("direct:b").         }     }.     // END SNIPPET: splitter     return getRouteList(builder). }
false;public;0;17;;@Test public void testSplitter() throws Exception {     List<Route> routes = buildSplitter().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         assertIsInstanceOf(Splitter.class, channel.getNextProcessor()).     } }
false;public;0;8;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").idempotentConsumer(header("myMessageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("direct:b"). }
false;protected;0;15;;protected List<Route> buildIdempotentConsumer() throws Exception {     // START SNIPPET: idempotent     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").idempotentConsumer(header("myMessageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).to("direct:b").         }     }.     // END SNIPPET: idempotent     return getRouteList(builder). }
false;public;0;23;;@Test public void testIdempotentConsumer() throws Exception {     List<Route> routes = buildIdempotentConsumer().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Channel channel = unwrapChannel(consumer.getProcessor()).         IdempotentConsumer idempotentConsumer = assertIsInstanceOf(IdempotentConsumer.class, channel.getNextProcessor()).         assertEquals("messageIdExpression", "header(myMessageId)", idempotentConsumer.getMessageIdExpression().toString()).         assertIsInstanceOf(MemoryIdempotentRepository.class, idempotentConsumer.getIdempotentRepository()).         SendProcessor sendProcessor = assertIsInstanceOf(SendProcessor.class, unwrapChannel(idempotentConsumer.getProcessor()).getNextProcessor()).         assertEquals("Endpoint URI", "direct://b", sendProcessor.getDestination().getEndpointUri()).     } }
false;public;0;8;;public void configure() {     errorHandler(deadLetterChannel("mock:error")).     from("direct:a").threads(5, 10).to("mock:a").to("mock:b"). }
false;protected;0;15;;protected List<Route> buildThreads() throws Exception {     // START SNIPPET: e10     RouteBuilder builder = new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error")).             from("direct:a").threads(5, 10).to("mock:a").to("mock:b").         }     }.     // END SNIPPET: e10     return getRouteList(builder). }
false;public;0;22;;@Test public void testThreads() throws Exception {     List<Route> routes = buildThreads().     log.debug("Created routes: " + routes).     assertEquals("Number routes created", 1, routes.size()).     for (Route route : routes) {         Endpoint key = route.getEndpoint().         assertEquals("From endpoint", "direct://a", key.getEndpointUri()).         EventDrivenConsumerRoute consumer = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).         Pipeline line = assertIsInstanceOf(Pipeline.class, unwrap(consumer.getProcessor())).         Iterator<Processor> it = line.getProcessors().iterator().         assertIsInstanceOf(ThreadsProcessor.class, unwrapChannel(it.next()).getNextProcessor()).         assertIsInstanceOf(SendProcessor.class, unwrapChannel(it.next()).getNextProcessor()).         assertIsInstanceOf(SendProcessor.class, unwrapChannel(it.next()).getNextProcessor()).     } }
false;protected;2;8;;protected void assertSendTo(Processor processor, String uri) {     if (!(processor instanceof SendProcessor)) {         processor = unwrapErrorHandler(processor).     }     SendProcessor sendProcessor = assertIsInstanceOf(SendProcessor.class, processor).     assertEquals("Endpoint URI", uri, sendProcessor.getDestination().getEndpointUri()). }
false;protected;2;12;;protected void assertSendToProcessor(Processor processor, String uri) {     if (!(processor instanceof Producer)) {         processor = unwrapErrorHandler(processor).     }     if (processor instanceof SendProcessor) {         assertSendTo(processor, uri).     } else {         Producer producer = assertIsInstanceOf(Producer.class, processor).         assertEquals("Endpoint URI", uri, producer.getEndpoint().getEndpointUri()).     } }
true;protected;1;5;/**  * By default routes should be wrapped in the {@link DeadLetterChannel} so  * lets unwrap that and return the actual processor  */ ;/**  * By default routes should be wrapped in the {@link DeadLetterChannel} so  * lets unwrap that and return the actual processor  */ protected Processor getProcessorWithoutErrorHandler(Route route) {     EventDrivenConsumerRoute consumerRoute = assertIsInstanceOf(EventDrivenConsumerRoute.class, route).     Processor processor = unwrap(consumerRoute.getProcessor()).     return unwrapErrorHandler(processor). }
false;protected;1;8;;protected Processor unwrapErrorHandler(Processor processor) {     if (processor instanceof DeadLetterChannel) {         DeadLetterChannel deadLetter = (DeadLetterChannel) processor.         return deadLetter.getOutput().     } else {         return processor.     } }
false;protected;1;8;;protected Processor unwrapDelegateProcessor(Processor processor) {     if (processor instanceof DelegateProcessor) {         DelegateProcessor delegate = (DelegateProcessor) processor.         return delegate.getProcessor().     } else {         return processor.     } }
false;public;0;7;;public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error")).     from("direct:start").to("direct:in").     from("direct:in").to("mock:result"). }
false;public;0;16;;@Test public void testCorrectNumberOfRoutes() throws Exception {     RouteBuilder builder = new RouteBuilder() {          public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error")).             from("direct:start").to("direct:in").             from("direct:in").to("mock:result").         }     }.     List<Route> routes = getRouteList(builder).     assertEquals(2, routes.size()). }
