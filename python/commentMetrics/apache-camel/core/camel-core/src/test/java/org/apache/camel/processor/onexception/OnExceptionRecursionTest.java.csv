commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;16;;@Override public void configure() throws Exception {     onException(Throwable.class).to("mock:c").to("direct:handle").     from("direct:test").to("mock:a").throwException(new IllegalStateException("Bad state")).to("mock:b").     from("direct:handle").to("mock:d").log("Handling exception").throwException(new NullPointerException("A NPE error here")). }
false;public;0;41;;@Test public void testRecursionDirect() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("mock:c").to("direct:handle").             from("direct:test").to("mock:a").throwException(new IllegalStateException("Bad state")).to("mock:b").             from("direct:handle").to("mock:d").log("Handling exception").throwException(new NullPointerException("A NPE error here")).         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     // will be called twice because of the two exceptions because the circular exception is detected to break out     getMockEndpoint("mock:c").expectedMessageCount(2).     getMockEndpoint("mock:d").expectedMessageCount(2).     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).         IllegalStateException ise = assertIsInstanceOf(IllegalStateException.class, npe.getSuppressed()[0]).         assertEquals("Bad state", ise.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     onException(Throwable.class).to("mock:c").to("direct:handle").     from("direct:test").to("mock:a").throwException(new IllegalStateException("Bad state")).to("mock:b").     from("direct:handle").errorHandler(noErrorHandler()).to("mock:d").log("Handling exception").throwException(new NullPointerException("A NPE error here")). }
false;public;0;42;;@Test public void testRecursionDirectNoErrorHandler() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Throwable.class).to("mock:c").to("direct:handle").             from("direct:test").to("mock:a").throwException(new IllegalStateException("Bad state")).to("mock:b").             from("direct:handle").errorHandler(noErrorHandler()).to("mock:d").log("Handling exception").throwException(new NullPointerException("A NPE error here")).         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(0).     // we will only be called once because when the route fails its not under error handler     // and therefore onException wont trigger the 2nd time     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(1).     try {         template.sendBody("direct:test", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         NullPointerException npe = assertIsInstanceOf(NullPointerException.class, e.getCause()).         assertEquals("A NPE error here", npe.getMessage()).         IllegalStateException ise = assertIsInstanceOf(IllegalStateException.class, npe.getSuppressed()[0]).         assertEquals("Bad state", ise.getMessage()).     }     assertMockEndpointsSatisfied(). }
