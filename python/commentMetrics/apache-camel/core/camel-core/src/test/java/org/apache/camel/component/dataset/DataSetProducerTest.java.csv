commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     Context context = super.createJndiContext().     context.bind(dataSetName, dataSet).     return context. }
false;public;0;9;;@Test public void testSendingMessagesExplicitlyToDataSetEndpointWithDataSetIndexHeader() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         template.sendBodyAndHeader(dataSetUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndexHeader() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         template.sendBody(dataSetUri, dataSet.getDefaultBody()).     }     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndexAndDataSetIndexUriParameterSetToOff() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         if (0 == i % 2) {             template.sendBodyAndHeader(dataSetUriWithDataSetIndexSetToLenient, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).         } else {             template.sendBody(dataSetUriWithDataSetIndexSetToLenient, dataSet.getDefaultBody()).         }     }     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndexAndDataSetIndexUriParameterSetToLenient() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         if (0 == i % 2) {             template.sendBodyAndHeader(dataSetUriWithDataSetIndexSetToLenient, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).         } else {             template.sendBody(dataSetUriWithDataSetIndexSetToLenient, dataSet.getDefaultBody()).         }     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testSendingMessagesExplicitlyToDataSetEndpointWithoutDataSetIndexAndDataSetIndexUriParameterSetToStrict() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         template.sendBodyAndHeader(dataSetUriWithDataSetIndexSetToStrict, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).     }     assertMockEndpointsSatisfied(). }
true;public;0;13;/**  * Verify that the CamelDataSetIndex header is optional when the dataSetIndex parameter is unset  */ ;/**  * Verify that the CamelDataSetIndex header is optional when the dataSetIndex parameter is unset  */ @Test public void testNotSettingDataSetIndexHeaderWhenDataSetIndexUriParameterIsUnset() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         if (0 == (size % 2)) {             template.sendBodyAndHeader(dataSetUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).         } else {             template.sendBody(dataSetUri, dataSet.getDefaultBody()).         }     }     assertMockEndpointsSatisfied(). }
true;public;0;13;/**  * Verify that the CamelDataSetIndex header is ignored when the dataSetIndex URI paramter is set to off  */ ;/**  * Verify that the CamelDataSetIndex header is ignored when the dataSetIndex URI paramter is set to off  */ @Test public void testNotSettingDataSetIndexHeaderWhenDataSetIndexUriParameterSetToOff() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         if (0 == (size % 2)) {             template.sendBodyAndHeader(dataSetUriWithDataSetIndexSetToOff, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, size - i).         } else {             template.sendBody(dataSetUriWithDataSetIndexSetToOff, dataSet.getDefaultBody()).         }     }     assertMockEndpointsSatisfied(). }
true;public;0;13;/**  * Verify that the CamelDataSetIndex header is optional when the dataSetIndex URI parameter is set to lenient  */ ;/**  * Verify that the CamelDataSetIndex header is optional when the dataSetIndex URI parameter is set to lenient  */ @Test public void testNotSettingDataSetIndexHeaderWhenDataSetIndexUriParameterSetToLenient() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         if (0 == (size % 2)) {             template.sendBodyAndHeader(dataSetUriWithDataSetIndexSetToLenient, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).         } else {             template.sendBody(dataSetUriWithDataSetIndexSetToLenient, dataSet.getDefaultBody()).         }     }     assertMockEndpointsSatisfied(). }
true;public;0;27;/**  * Verify that the CamelDataSetIndex header is required when the dataSetIndex URI parameter is set to strict  */ ;/**  * Verify that the CamelDataSetIndex header is required when the dataSetIndex URI parameter is set to strict  */ @Test public void testNotSettingDataSetIndexHeaderWhenDataSetIndexUriParameterSetToStrict() throws Exception {     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         template.sendBody(dataSetUriWithDataSetIndexSetToStrict, dataSet.getDefaultBody()).     }     try {         assertMockEndpointsSatisfied().     } catch (AssertionError assertionError) {         // Check as much of the string as possible - but the ExchangeID at the end will be unique         String expectedErrorString = dataSetUriWithDataSetIndexSetToStrict + " Failed due to caught exception: " + NoSuchHeaderException.class.getName() + ": No '" + Exchange.DATASET_INDEX + "' header available of type: java.lang.Long. Exchange".         String actualErrorString = assertionError.getMessage().         if (actualErrorString.startsWith(expectedErrorString)) {             // This is what we expect             return.         } else {             throw assertionError.         }     }     fail("AssertionError should have been generated"). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUri).to(resultUri). }
false;public;0;27;;@Test public void testDataSetIndexUriParameterUnset() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUri).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     for (long i = 0. i < size. i++) {         template.sendBody(sourceUri, dataSet.getDefaultBody()).     }     assertMockEndpointsSatisfied().     result.assertMessagesAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUriWithDataSetIndexSetToOff).to(resultUri). }
false;public;0;25;;@Test public void testDataSetIndexUriParameterSetToOff() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUriWithDataSetIndexSetToOff).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     for (long i = 0. i < size. i++) {         template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUriWithDataSetIndexSetToLenient).to(resultUri). }
false;public;0;25;;@Test public void testDataSetIndexUriParameterSetToLenient() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUriWithDataSetIndexSetToLenient).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     for (long i = 0. i < size. i++) {         template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUriWithDataSetIndexSetToStrict).to(resultUri). }
false;public;0;25;;@Test public void testDataSetIndexUriParameterSetToStrict() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUriWithDataSetIndexSetToStrict).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.expectsAscending(header(Exchange.DATASET_INDEX).convertTo(Number.class)).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     for (long i = 0. i < size. i++) {         template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUri).to(resultUri). }
false;public;0;45;;@Test public void testInvalidDataSetIndexValueWithDataSetIndexUriParameterUnset() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUri).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     for (long i = 0. i < size. i++) {         if (i == (size / 2)) {             template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i + 10).         } else {             template.sendBody(sourceUri, dataSet.getDefaultBody()).         }     }     try {         assertMockEndpointsSatisfied().     } catch (AssertionError assertionError) {         // Check as much of the string as possible - but the ExchangeID at the end will be unique         String expectedErrorString = dataSetUri + " Failed due to caught exception: " + AssertionError.class.getName() + ": Header: " + Exchange.DATASET_INDEX + " does not match. Expected: " + size / 2 + " but was: " + (size / 2 + 10) + " on Exchange".         String actualErrorString = assertionError.getMessage().         if (actualErrorString.startsWith(expectedErrorString)) {             // This is what we expect             return.         } else {             throw assertionError.         }     }     fail("AssertionError should have been generated"). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUriWithDataSetIndexSetToOff).to(resultUri). }
false;public;0;27;;@Test public void testInvalidDataSetIndexValueWithDataSetIndexUriParameterSetToOff() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUriWithDataSetIndexSetToOff).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     for (long i = 0. i < size. i++) {         if (i == (size / 2)) {             template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i + 10).         } else {             template.sendBody(sourceUri, dataSet.getDefaultBody()).         }     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUriWithDataSetIndexSetToLenient).to(resultUri). }
false;public;0;45;;@Test public void testInvalidDataSetIndexValueWithDataSetIndexUriParameterSetToLenient() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUriWithDataSetIndexSetToLenient).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     for (long i = 0. i < size. i++) {         if (i == (size / 2)) {             template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i + 10).         } else {             template.sendBody(sourceUri, dataSet.getDefaultBody()).         }     }     try {         assertMockEndpointsSatisfied().     } catch (AssertionError assertionError) {         // Check as much of the string as possible - but the ExchangeID at the end will be unique         String expectedErrorString = dataSetUriWithDataSetIndexSetToLenient + " Failed due to caught exception: " + AssertionError.class.getName() + ": Header: " + Exchange.DATASET_INDEX + " does not match. Expected: " + size / 2 + " but was: " + (size / 2 + 10) + " on Exchange".         String actualErrorString = assertionError.getMessage().         if (actualErrorString.startsWith(expectedErrorString)) {             // This is what we expect             return.         } else {             throw assertionError.         }     }     fail("AssertionError should have been generated"). }
false;public;0;6;;@Override public void configure() throws Exception {     from(sourceUri).to(dataSetUriWithDataSetIndexSetToStrict).to(resultUri). }
false;public;0;44;;@Test public void testInvalidDataSetIndexValueWithDataSetIndexUriParameterSetToStrict() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(sourceUri).to(dataSetUriWithDataSetIndexSetToStrict).to(resultUri).         }     }).     context.start().     long size = dataSet.getSize().     MockEndpoint result = getMockEndpoint(resultUri).     result.expectedMessageCount((int) size).     result.allMessages().header(Exchange.DATASET_INDEX).isNotNull().     for (long i = 0. i < size. i++) {         if (i == (size / 2)) {             template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i + 10).         } else {             template.sendBodyAndHeader(sourceUri, dataSet.getDefaultBody(), Exchange.DATASET_INDEX, i).         }     }     try {         assertMockEndpointsSatisfied().     } catch (AssertionError assertionError) {         // Check as much of the string as possible - but the ExchangeID at the end will be unique         String expectedErrorString = dataSetUriWithDataSetIndexSetToStrict + " Failed due to caught exception: " + AssertionError.class.getName() + ": Header: " + Exchange.DATASET_INDEX + " does not match. Expected: " + size / 2 + " but was: " + (size / 2 + 10) + " on Exchange".         String actualErrorString = assertionError.getMessage().         if (actualErrorString.startsWith(expectedErrorString)) {             // This is what we expect             return.         } else {             throw assertionError.         }     }     fail("AssertionError should have been generated"). }
