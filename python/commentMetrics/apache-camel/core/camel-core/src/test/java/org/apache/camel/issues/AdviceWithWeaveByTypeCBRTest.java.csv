commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     weaveByType(ChoiceDefinition.class).replace().to("mock:baz"). }
false;public;0;15;;@Test public void testWeaveByType() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByType(ChoiceDefinition.class).replace().to("mock:baz").         }     }).     getMockEndpoint("mock:baz").expectedMessageCount(1).     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").transform(simple("Hello ${body}")).log("Got ${body}").to("mock:result").choice().when(header("foo").isEqualTo("bar")).to("mock:resultA").otherwise().to("mock:resultB"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform(simple("Hello ${body}")).log("Got ${body}").to("mock:result").choice().when(header("foo").isEqualTo("bar")).to("mock:resultA").otherwise().to("mock:resultB").         }     }. }
