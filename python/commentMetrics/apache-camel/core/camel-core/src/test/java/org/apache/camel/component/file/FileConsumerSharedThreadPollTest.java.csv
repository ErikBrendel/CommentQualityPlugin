commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/a").     deleteDirectory("target/data/b").     super.setUp(). }
false;public;0;12;;@Test public void testSharedThreadPool() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     // thread thread name should be the same     mock.message(0).header("threadName").isEqualTo(mock.message(1).header("threadName")).     template.sendBodyAndHeader("file:target/data/a", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/b", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader("threadName", Thread.currentThread().getName()). }
false;public;0;23;;@Override public void configure() throws Exception {     // create shared pool and enlist in registry     pool = new ThreadPoolBuilder(context).poolSize(1).buildScheduled(this, "MySharedPool").     context.getRegistry().bind("myPool", pool).     from("file:target/data/a?initialDelay=0&delay=10&scheduledExecutorService=#myPool").routeId("a").to("direct:shared").     from("file:target/data/b?initialDelay=0&delay=10&scheduledExecutorService=#myPool").routeId("b").to("direct:shared").     from("direct:shared").routeId("shared").convertBodyTo(String.class).log("Get ${file:name} using ${threadName}").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader("threadName", Thread.currentThread().getName()).         }     }).to("mock:result"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // create shared pool and enlist in registry             pool = new ThreadPoolBuilder(context).poolSize(1).buildScheduled(this, "MySharedPool").             context.getRegistry().bind("myPool", pool).             from("file:target/data/a?initialDelay=0&delay=10&scheduledExecutorService=#myPool").routeId("a").to("direct:shared").             from("file:target/data/b?initialDelay=0&delay=10&scheduledExecutorService=#myPool").routeId("b").to("direct:shared").             from("direct:shared").routeId("shared").convertBodyTo(String.class).log("Get ${file:name} using ${threadName}").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader("threadName", Thread.currentThread().getName()).                 }             }).to("mock:result").         }     }. }
