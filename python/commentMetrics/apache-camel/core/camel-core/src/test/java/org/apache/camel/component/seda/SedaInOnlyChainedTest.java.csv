commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testInOnlySedaChained() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("start").     getMockEndpoint("mock:b").expectedBodiesReceived("start-a").     getMockEndpoint("mock:c").expectedBodiesReceived("start-a-b").     template.sendBody("seda:a", "start").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:a").to("mock:a").setBody(simple("${body}-a")).to("seda:b").     from("seda:b").to("mock:b").setBody(simple("${body}-b")).to("seda:c").     from("seda:c").to("mock:c").setBody(simple("${body}-c")). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:a").to("mock:a").setBody(simple("${body}-a")).to("seda:b").             from("seda:b").to("mock:b").setBody(simple("${body}-b")).to("seda:c").             from("seda:c").to("mock:c").setBody(simple("${body}-c")).         }     }. }
