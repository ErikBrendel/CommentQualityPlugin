commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testOnePolicyChildFirst() {     List<Class<? extends Throwable>> exceptions = new ArrayList<>().     exceptions.add(ChildException.class).     exceptions.add(ParentException.class).     ErrorHandlerSupport support = new ShuntErrorHandlerSupport().     support.addExceptionPolicy(null, new OnExceptionDefinition(exceptions)).     assertEquals(ChildException.class, getExceptionPolicyFor(support, new ChildException(), 0)).     assertEquals(ParentException.class, getExceptionPolicyFor(support, new ParentException(), 1)). }
false;public;0;12;;@Test public void testOnePolicyChildLast() {     List<Class<? extends Throwable>> exceptions = new ArrayList<>().     exceptions.add(ParentException.class).     exceptions.add(ChildException.class).     ErrorHandlerSupport support = new ShuntErrorHandlerSupport().     support.addExceptionPolicy(null, new OnExceptionDefinition(exceptions)).     assertEquals(ChildException.class, getExceptionPolicyFor(support, new ChildException(), 1)).     assertEquals(ParentException.class, getExceptionPolicyFor(support, new ParentException(), 0)). }
false;public;0;9;;@Test public void testTwoPolicyChildFirst() {     ErrorHandlerSupport support = new ShuntErrorHandlerSupport().     support.addExceptionPolicy(null, new OnExceptionDefinition(ChildException.class)).     support.addExceptionPolicy(null, new OnExceptionDefinition(ParentException.class)).     assertEquals(ChildException.class, getExceptionPolicyFor(support, new ChildException(), 0)).     assertEquals(ParentException.class, getExceptionPolicyFor(support, new ParentException(), 0)). }
false;public;0;9;;@Test public void testTwoPolicyChildLast() {     ErrorHandlerSupport support = new ShuntErrorHandlerSupport().     support.addExceptionPolicy(null, new OnExceptionDefinition(ParentException.class)).     support.addExceptionPolicy(null, new OnExceptionDefinition(ChildException.class)).     assertEquals(ChildException.class, getExceptionPolicyFor(support, new ChildException(), 0)).     assertEquals(ParentException.class, getExceptionPolicyFor(support, new ParentException(), 0)). }
false;private,static;3;4;;private static Class<? extends Throwable> getExceptionPolicyFor(ErrorHandlerSupport support, Throwable childException, int index) {     return support.getExceptionPolicy(null, childException).getExceptionClasses().get(index). }
false;protected;0;2;;protected void doStart() throws Exception { }
false;protected;0;2;;protected void doStop() throws Exception { }
false;public;0;3;;public boolean supportTransacted() {     return false. }
false;public;0;3;;public Processor getOutput() {     return null. }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
