commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testRedeliveryErrorHandlerNoRedeliveryOnShutdown() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied().     // should not take long to stop the route     StopWatch watch = new StopWatch().     context.getRouteController().stopRoute("foo").     watch.taken().     assertTrue("Should stop route faster, was " + watch.taken(), watch.taken() < 4000). }
false;public;0;15;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // this error handler will try up till 20 redelivery attempts with 1 second between.     // however if we are stopping then do not allow any redeliver attempts.     errorHandler(defaultErrorHandler().allowRedeliveryWhileStopping(false).maximumRedeliveries(20).redeliveryDelay(1000).retryAttemptedLogLevel(LoggingLevel.INFO)).     from("seda:foo").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced")). // END SNIPPET: e1 }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // this error handler will try up till 20 redelivery attempts with 1 second between.             // however if we are stopping then do not allow any redeliver attempts.             errorHandler(defaultErrorHandler().allowRedeliveryWhileStopping(false).maximumRedeliveries(20).redeliveryDelay(1000).retryAttemptedLogLevel(LoggingLevel.INFO)).             from("seda:foo").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced")).         // END SNIPPET: e1         }     }. }
