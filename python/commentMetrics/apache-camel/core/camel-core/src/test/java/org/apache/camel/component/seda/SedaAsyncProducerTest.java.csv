commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testAsyncProducer() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // using the new async API we can fire a real async message     Future<String> future = template.asyncRequestBody("direct:start", "Hello World", String.class).     // I should happen before mock     route = route + "send".     assertMockEndpointsSatisfied().     assertEquals("Send should occur before processor", "sendprocess", route).     // and get the response with the future handle     String response = future.get().     assertEquals("Bye World", response). }
false;public;0;22;;@Test public void testAsyncProducerWait() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     // using the new async API we can fire a real async message     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     exchange.setPattern(ExchangePattern.InOut).     exchange.setProperty(Exchange.ASYNC_WAIT, WaitForTaskToComplete.IfReplyExpected).     template.send("direct:start", exchange).     // I should not happen before mock     route = route + "send".     assertMockEndpointsSatisfied().     assertEquals("Send should occur before processor", "processsend", route).     String response = exchange.getOut().getBody(String.class).     assertEquals("Bye World", response). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     route = route + "process".     // set the response     exchange.getOut().setBody("Bye World"). }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("direct:start").delay(100).process(new Processor() {          public void process(Exchange exchange) throws Exception {             route = route + "process".             // set the response             exchange.getOut().setBody("Bye World").         }     }).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("direct:start").delay(100).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     route = route + "process".                     // set the response                     exchange.getOut().setBody("Bye World").                 }             }).to("mock:result").         }     }. }
