commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testMarshal() throws Exception {     DefaultExchangeHolder holder = createHolder(true).     assertNotNull(holder).     assertNotNull(holder.toString()). }
false;public;0;13;;@Test public void testNoProperties() throws Exception {     DefaultExchangeHolder holder = createHolder(false).     assertNotNull(holder).     Exchange exchange = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange, holder).     assertEquals("Hello World", exchange.getIn().getBody()).     assertEquals("Bye World", exchange.getOut().getBody()).     assertEquals(123, exchange.getIn().getHeader("foo")).     assertNull(exchange.getProperty("bar")). }
false;public;0;14;;@Test public void testUnmarshal() throws Exception {     id = null.     Exchange exchange = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange, createHolder(true)).     assertEquals("Hello World", exchange.getIn().getBody()).     assertEquals("Bye World", exchange.getOut().getBody()).     assertEquals(123, exchange.getIn().getHeader("foo")).     assertEquals("Hi Camel", exchange.getIn().getHeader("CamelFoo")).     assertEquals(444, exchange.getProperty("bar")).     assertEquals(555, exchange.getProperty("CamelBar")).     assertEquals(id, exchange.getExchangeId()). }
false;public;0;17;;@Test public void testSkipNonSerializableData() throws Exception {     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("Foo", new MyFoo("Tiger")).     exchange.getIn().setHeader("Bar", 123).     DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange).     exchange = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange, holder).     // the non serializable header should be skipped     assertEquals("Hello World", exchange.getIn().getBody()).     assertEquals(123, exchange.getIn().getHeader("Bar")).     assertNull(exchange.getIn().getHeader("Foo")). }
false;public;0;22;;@Test public void testSkipNonSerializableDataFromList() throws Exception {     // use a mixed list, the MyFoo is not serializable so the entire list should be skipped     List<Object> list = new ArrayList<>().     list.add("I am okay").     list.add(new MyFoo("Tiger")).     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("Foo", list).     exchange.getIn().setHeader("Bar", 123).     DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange).     exchange = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange, holder).     // the non serializable header should be skipped     assertEquals("Hello World", exchange.getIn().getBody()).     assertEquals(123, exchange.getIn().getHeader("Bar")).     assertNull(exchange.getIn().getHeader("Foo")). }
false;public;0;22;;@Test public void testSkipNonSerializableDataFromMap() throws Exception {     // use a mixed Map, the MyFoo is not serializable so the entire map should be skipped     Map<String, Object> map = new HashMap<>().     map.put("A", "I am okay").     map.put("B", new MyFoo("Tiger")).     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("Foo", map).     exchange.getIn().setHeader("Bar", 123).     DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange).     exchange = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange, holder).     // the non serializable header should be skipped     assertEquals("Hello World", exchange.getIn().getBody()).     assertEquals(123, exchange.getIn().getHeader("Bar")).     assertNull(exchange.getIn().getHeader("Foo")). }
false;public;0;25;;@Test public void testCaughtException() throws Exception {     // use a mixed list, the MyFoo is not serializable so the entire list should be skipped     List<Object> list = new ArrayList<>().     list.add("I am okay").     list.add(new MyFoo("Tiger")).     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("Foo", list).     exchange.getIn().setHeader("Bar", 123).     exchange.setProperty(Exchange.EXCEPTION_CAUGHT, new IllegalArgumentException("Forced")).     DefaultExchangeHolder holder = DefaultExchangeHolder.marshal(exchange).     exchange = new DefaultExchange(context).     DefaultExchangeHolder.unmarshal(exchange, holder).     // the caught exception should be included     assertEquals("Hello World", exchange.getIn().getBody()).     assertEquals(123, exchange.getIn().getHeader("Bar")).     assertNull(exchange.getIn().getHeader("Foo")).     assertNotNull(exchange.getProperty(Exchange.EXCEPTION_CAUGHT)).     assertEquals("Forced", exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).getMessage()). }
false;public;0;12;;@Test public void testFileNotSupported() throws Exception {     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody(new File("src/test/resources/log4j2.properties")).     try {         DefaultExchangeHolder.marshal(exchange).         fail("Should have thrown exception").     } catch (RuntimeExchangeException e) {     // expected     } }
false;private;1;11;;private DefaultExchangeHolder createHolder(boolean includeProperties) {     Exchange exchange = new DefaultExchange(context).     id = exchange.getExchangeId().     exchange.getIn().setBody("Hello World").     exchange.getIn().setHeader("foo", 123).     exchange.getIn().setHeader("CamelFoo", "Hi Camel").     exchange.setProperty("bar", 444).     exchange.setProperty("CamelBar", 555).     exchange.getOut().setBody("Bye World").     return DefaultExchangeHolder.marshal(exchange, includeProperties). }
false;public;0;4;;@SuppressWarnings("unused") public String getFoo() {     return foo. }
