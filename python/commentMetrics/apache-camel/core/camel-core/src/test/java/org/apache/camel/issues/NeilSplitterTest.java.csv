commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;public String[] getCats() {     return cats. }
false;public;1;3;;public void setCats(String[] cats) {     this.cats = cats. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setName(String name) {     this.name = name. }
false;public;1;8;;public void process(Exchange exchange) {     Message in = exchange.getIn().     CatFight catFight = new CatFight().     catFight.setName("blueydart").     catFight.setCats(new String[] { "Ginger", "Mr Boots" }).     in.setBody(catFight).     in.setHeader("foo", "bar"). }
false;public;0;18;;@Test public void testCustomExpression() throws Exception {     resultEndpoint.expectedBodiesReceived("Ginger", "Mr Boots").     template.send("direct:custom", new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             CatFight catFight = new CatFight().             catFight.setName("blueydart").             catFight.setCats(new String[] { "Ginger", "Mr Boots" }).             in.setBody(catFight).             in.setHeader("foo", "bar").         }     }).     resultEndpoint.assertIsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setBody("<a><b>Ginger</b><b>Mr Boots</b></a> ").     in.setHeader("foo", "bar"). }
false;public;0;17;;@Test public void testXPathExpression() throws Exception {     resultEndpoint.expectedBodiesReceived("<b>Ginger</b>", "<b>Mr Boots</b>").     template.send("direct:xpath", new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setBody("<a><b>Ginger</b><b>Mr Boots</b></a> ").             in.setHeader("foo", "bar").         }     }).     resultEndpoint.assertIsSatisfied(). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;1;6;;public Object evaluate(Exchange exchange) {     CatFight catFight = (CatFight) exchange.getIn().getBody().     String[] cats = catFight.getCats().     return cats. }
false;public;0;14;;public void configure() {     Expression catFightCats = new ExpressionAdapter() {          public Object evaluate(Exchange exchange) {             CatFight catFight = (CatFight) exchange.getIn().getBody().             String[] cats = catFight.getCats().             return cats.         }     }.     from("direct:custom").split(catFightCats).to("mock:result").     from("direct:xpath").split(xpath("/a/b")).to("mock:result"). }
false;protected;0;18;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             Expression catFightCats = new ExpressionAdapter() {                  public Object evaluate(Exchange exchange) {                     CatFight catFight = (CatFight) exchange.getIn().getBody().                     String[] cats = catFight.getCats().                     return cats.                 }             }.             from("direct:custom").split(catFightCats).to("mock:result").             from("direct:xpath").split(xpath("/a/b")).to("mock:result").         }     }. }
