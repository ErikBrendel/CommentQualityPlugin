commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("my", my).     return jndi. }
false;public;0;20;;@Test public void testLanguageService() throws Exception {     MyLanguage myl = (MyLanguage) context.resolveLanguage("my").     assertNotNull(myl).     assertEquals("Started", myl.getState()).     // simple language is resolved by default hence why there is 2     assertEquals(2, context.getLanguageNames().size()).     // resolve again, should find same instance     MyLanguage myl2 = (MyLanguage) context.resolveLanguage("my").     assertNotNull(myl2).     assertSame(myl, myl2).     assertEquals("Started", myl2.getState()).     // simple language is resolved by default hence why there is 2     assertEquals(2, context.getLanguageNames().size()).     context.stop().     assertEquals("Stopped", myl.getState()).     assertTrue(context.getLanguageNames().isEmpty()). }
false;public;0;17;;@Test public void testNonSingletonLanguage() throws Exception {     Language tol = context.resolveLanguage("tokenize").     assertNotNull(tol).     // simple language is resolved by default hence why there is 2     assertEquals(2, context.getLanguageNames().size()).     // resolve again, should find another instance     Language tol2 = context.resolveLanguage("tokenize").     assertNotNull(tol2).     assertNotSame(tol, tol2).     // simple language is resolved by default hence why there is 2     assertEquals(2, context.getLanguageNames().size()).     context.stop().     assertTrue(context.getLanguageNames().isEmpty()). }
false;public;1;5;;@Override public Predicate createPredicate(String expression) {     return PredicateBuilder.constant(true). }
false;public;1;4;;@Override public Expression createExpression(String expression) {     return ExpressionBuilder.constantExpression(expression). }
false;public;0;3;;public String getState() {     return state. }
false;protected;0;5;;@Override protected void doStart() throws Exception {     state = "Started". }
false;protected;0;4;;@Override protected void doStop() throws Exception {     state = "Stopped". }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
