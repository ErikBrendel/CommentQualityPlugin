commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     assertNull("Should not have breadcrumb", exchange.getIn().getHeader("breadcrumbId")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     assertNull("Should not have breadcrumb", exchange.getIn().getHeader("breadcrumbId")). }
false;public;0;22;;@Override public void configure() throws Exception {     // MDC and breadcrumb disabled     context.setUseMDCLogging(false).     context.setUseBreadcrumb(false).     from("direct:a").routeId("route-a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertNull("Should not have breadcrumb", exchange.getIn().getHeader("breadcrumbId")).         }     }).to("log:foo").to("direct:b").     from("direct:b").routeId("route-b").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertNull("Should not have breadcrumb", exchange.getIn().getHeader("breadcrumbId")).         }     }).to("log:bar").to("mock:result"). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // MDC and breadcrumb disabled             context.setUseMDCLogging(false).             context.setUseBreadcrumb(false).             from("direct:a").routeId("route-a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertNull("Should not have breadcrumb", exchange.getIn().getHeader("breadcrumbId")).                 }             }).to("log:foo").to("direct:b").             from("direct:b").routeId("route-b").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertNull("Should not have breadcrumb", exchange.getIn().getHeader("breadcrumbId")).                 }             }).to("log:bar").to("mock:result").         }     }. }
