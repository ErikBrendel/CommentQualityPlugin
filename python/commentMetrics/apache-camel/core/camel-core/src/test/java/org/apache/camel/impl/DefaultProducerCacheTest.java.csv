commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@Test public void testCacheProducerAcquireAndRelease() throws Exception {     DefaultProducerCache cache = new DefaultProducerCache(this, context, 0).     cache.start().     assertEquals("Size should be 0", 0, cache.size()).     // test that we cache at most 1000 producers to avoid it eating to much memory     for (int i = 0. i < 1003. i++) {         Endpoint e = context.getEndpoint("direct:queue:" + i).         AsyncProducer p = cache.acquireProducer(e).         cache.releaseProducer(e, p).     }     // the eviction is async so force cleanup     cache.cleanUp().     Thread.sleep(50).     assertEquals("Size should be 1000", 1000, cache.size()).     cache.stop(). }
false;public;0;31;;@Test public void testCacheStopExpired() throws Exception {     DefaultProducerCache cache = new DefaultProducerCache(this, context, 5).     cache.start().     assertEquals("Size should be 0", 0, cache.size()).     for (int i = 0. i < 8. i++) {         Endpoint e = newEndpoint(true, i).         e.setCamelContext(context).         AsyncProducer p = cache.acquireProducer(e).         cache.releaseProducer(e, p).     }     // the eviction is async so force cleanup     cache.cleanUp().     Thread.sleep(50).     assertEquals("Size should be 5", 5, cache.size()).     // the eviction listener is async so sleep a bit     Thread.sleep(1000).     // should have stopped the 3 evicted     assertEquals(3, stopCounter.get()).     cache.stop().     // should have stopped all 8     assertEquals(8, stopCounter.get()). }
false;public;0;48;;@Test public void testExtendedStatistics() throws Exception {     DefaultProducerCache cache = new DefaultProducerCache(this, context, 5).     cache.setExtendedStatistics(true).     cache.start().     assertEquals("Size should be 0", 0, cache.size()).     // use 1 = 2 times     // use 2 = 3 times     // use 3..4 = 1 times     // use 5 = 0 times     Endpoint e = newEndpoint(true, 1).     AsyncProducer p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     e = newEndpoint(true, 1).     p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     e = newEndpoint(true, 2).     p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     e = newEndpoint(true, 2).     p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     e = newEndpoint(true, 2).     p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     e = newEndpoint(true, 3).     p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     e = newEndpoint(true, 4).     p = cache.acquireProducer(e).     cache.releaseProducer(e, p).     assertEquals("Size should be 4", 4, cache.size()).     EndpointUtilizationStatistics stats = cache.getEndpointUtilizationStatistics().     assertEquals(4, stats.size()).     Map<String, Long> recent = stats.getStatistics().     assertEquals(2, recent.get("my://1").longValue()).     assertEquals(3, recent.get("my://2").longValue()).     assertEquals(1, recent.get("my://3").longValue()).     assertEquals(1, recent.get("my://4").longValue()).     assertNull(recent.get("my://5")).     cache.stop(). }
false;public;0;5;;@Override public void setUp() throws Exception {     super.setUp().     component = new MyComponent(context). }
false;protected;2;3;;protected MyEndpoint newEndpoint(boolean isSingleton, int number) {     return new MyEndpoint(component, isSingleton, number). }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new MyProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return isSingleton. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception {     stopCounter.incrementAndGet(). }
false;protected;0;4;;@Override protected void doShutdown() throws Exception {     shutdownCounter.incrementAndGet(). }
