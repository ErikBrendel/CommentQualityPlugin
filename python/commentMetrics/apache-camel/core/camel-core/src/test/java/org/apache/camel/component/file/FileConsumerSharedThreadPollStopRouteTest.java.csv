commented;modifiers;parameterAmount;loc;comment;code
false;public;0;32;;@Test public void testSharedThreadPool() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     // thread thread name should be the same     mock.message(0).header("threadName").isEqualTo(mock.message(1).header("threadName")).     template.sendBodyAndHeader("file:target/data/a", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/b", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied().     // now stop a     context.getRouteController().stopRoute("a").     resetMocks().     mock.expectedBodiesReceived("Bye World 2").     // a should not be polled     mock.expectedFileExists("target/data/a/hello2.txt").     template.sendBodyAndHeader("file:target/data/a", "Hello World 2", Exchange.FILE_NAME, "hello2.txt").     template.sendBodyAndHeader("file:target/data/b", "Bye World 2", Exchange.FILE_NAME, "bye2.txt").     assertMockEndpointsSatisfied().     // now start a, which should pickup the file     resetMocks().     mock.expectedBodiesReceived("Hello World 2").     context.getRouteController().startRoute("a").     assertMockEndpointsSatisfied(). }
