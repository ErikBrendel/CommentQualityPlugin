commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testTryCatchFinally() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     getMockEndpoint("mock:finally").expectedMessageCount(1).     sendBody("direct:start", "<test>Hello World!</test>").     assertTrue("Should have been handled", handled).     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:start").doTry().process(new ProcessorFail()).to("mock:result").doCatch(IllegalStateException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end(). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").doTry().process(new ProcessorFail()).to("mock:result").doCatch(IllegalStateException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalStateException("Force to fail"). }
false;public;1;10;;public void process(Exchange exchange) throws Exception {     handled = true.     assertEquals("Should not be marked as failed", false, exchange.isFailed()).     Exception e = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT).     assertNotNull("There should be an exception", e).     assertTrue(e instanceof IllegalStateException).     assertEquals("Force to fail", e.getMessage()). }
