commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSimpleRouteExpressionAsPredicateTest() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived(true).     getMockEndpoint("mock:bar").expectedBodiesReceived("ABC == ABC").     template.sendBodyAndHeader("direct:foo", "Hello World", "foo", "ABC").     template.sendBodyAndHeader("direct:bar", "Hello World", "bar", "ABC").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:foo").setBody().simple("${header.foo} == ${header.foo}", boolean.class).to("mock:foo").     from("direct:bar").setBody().simple("${header.bar} == ${header.bar}").to("mock:bar"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").setBody().simple("${header.foo} == ${header.foo}", boolean.class).to("mock:foo").             from("direct:bar").setBody().simple("${header.bar} == ${header.bar}").to("mock:bar").         }     }. }
