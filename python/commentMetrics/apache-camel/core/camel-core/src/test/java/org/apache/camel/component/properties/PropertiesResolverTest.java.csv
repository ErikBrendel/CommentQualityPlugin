commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testPropertiesResolver() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:foo"). }
false;public;0;9;;@Override public void configure() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:foo").         }     }). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addRoutes(new RouteBuilder() {                  @Override                 public void configure() throws Exception {                     from("direct:start").to("properties:foo").                 }             }).         }     }. }
false;protected;0;10;;protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("foo").     pc.setPropertiesResolver(new MyCustomResolver()).     context.addComponent("properties", pc).     return context. }
false;public;3;5;;public Properties resolveProperties(CamelContext context, boolean ignoreMissingLocation, List<PropertiesLocation> locations) throws Exception {     Properties answer = new Properties().     answer.put("foo", "mock:result").     return answer. }
