commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testBadFirstMessage() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     try {         template.sendBody("direct:start", "A").         fail("Should fail").     } catch (CamelExecutionException e) {     // expected     }     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testBadSecondMessage() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     try {         template.sendBody("direct:start", "A").         fail("Should fail").     } catch (CamelExecutionException e) {     // expected     }     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testBadThirdMessage() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     try {         template.sendBody("direct:start", "A").         fail("Should fail").     } catch (CamelExecutionException e) {     // expected     }     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testBadForthMessage() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("B", "C", "D").     template.sendBodyAndHeader("direct:start", "D", "seqno", 4).     template.sendBodyAndHeader("direct:start", "C", "seqno", 3).     template.sendBodyAndHeader("direct:start", "B", "seqno", 2).     try {         template.sendBody("direct:start", "A").         fail("Should fail").     } catch (CamelExecutionException e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").resequence(header("seqno")).stream().timeout(50).deliveryAttemptInterval(10).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").resequence(header("seqno")).stream().timeout(50).deliveryAttemptInterval(10).to("mock:result").         }     }. }
