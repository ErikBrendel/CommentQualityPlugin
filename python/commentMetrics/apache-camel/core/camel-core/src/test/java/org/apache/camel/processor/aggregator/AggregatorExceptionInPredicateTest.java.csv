commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testExceptionInAggregationStrategy() throws Exception {     testExceptionInFlow("direct:start"). }
false;public;0;4;;@Test public void testExceptionInPredicate() throws Exception {     testExceptionInFlow("direct:predicate"). }
false;private;1;13;;private void testExceptionInFlow(String startUri) throws Exception {     // failed first aggregation     getMockEndpoint("mock:handled").expectedMessageCount(1).     // second aggregated     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader(startUri, "Damn", "id", 1).     template.sendBodyAndHeader(startUri, "Hello World", "id", 1).     assertMockEndpointsSatisfied(). }
false;public;2;7;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     Object body = newExchange.getIn().getBody().     if ("Damn".equals(body)) {         throw new IllegalArgumentException().     }     return newExchange. }
false;public;2;6;;public <T> T evaluate(Exchange exchange, Class<T> type) {     if (exchange.getIn().getBody().equals("Damn")) {         throw new IllegalArgumentException().     }     return ExpressionBuilder.headerExpression("id").evaluate(exchange, type). }
false;public;0;32;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("mock:handled").     from("direct:start").aggregate(header("id")).completionTimeout(500).aggregationStrategy(new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             Object body = newExchange.getIn().getBody().             if ("Damn".equals(body)) {                 throw new IllegalArgumentException().             }             return newExchange.         }     }).to("mock:result").     from("direct:predicate").aggregate(new Expression() {          public <T> T evaluate(Exchange exchange, Class<T> type) {             if (exchange.getIn().getBody().equals("Damn")) {                 throw new IllegalArgumentException().             }             return ExpressionBuilder.headerExpression("id").evaluate(exchange, type).         }     }, new UseLatestAggregationStrategy()).completionTimeout(500).to("mock:result"). }
false;protected;0;37;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).to("mock:handled").             from("direct:start").aggregate(header("id")).completionTimeout(500).aggregationStrategy(new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     Object body = newExchange.getIn().getBody().                     if ("Damn".equals(body)) {                         throw new IllegalArgumentException().                     }                     return newExchange.                 }             }).to("mock:result").             from("direct:predicate").aggregate(new Expression() {                  public <T> T evaluate(Exchange exchange, Class<T> type) {                     if (exchange.getIn().getBody().equals("Damn")) {                         throw new IllegalArgumentException().                     }                     return ExpressionBuilder.headerExpression("id").evaluate(exchange, type).                 }             }, new UseLatestAggregationStrategy()).completionTimeout(500).to("mock:result").         }     }. }
