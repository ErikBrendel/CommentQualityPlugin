commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Ignore @Test public void launchBenchmark() throws Exception {     Options opt = new OptionsBuilder().include(this.getClass().getName() + ".*").mode(Mode.AverageTime).timeUnit(TimeUnit.MICROSECONDS).warmupTime(TimeValue.seconds(2)).warmupIterations(5).measurementTime(TimeValue.seconds(1)).measurementIterations(5).threads(2).forks(1).shouldFailOnError(true).shouldDoGC(true).build().     new Runner(opt).run(). }
false;public;0;8;;@Setup(Level.Trial) public void initialize() throws Exception {     packageScanClassResolver = new DefaultPackageScanClassResolver().     injector = new ReflectionInjector().     factoryFinder = new DefaultFactoryFinderResolver().resolveDefaultFactoryFinder(new DefaultClassResolver()).     converter = new DefaultTypeConverter(packageScanClassResolver, injector, factoryFinder, true).     converter.start(). }
false;public;2;11;;@Benchmark public void benchmarkLoadTime(BenchmarkState state, Blackhole bh) throws Exception {     DefaultPackageScanClassResolver packageScanClassResolver = state.packageScanClassResolver.     Injector injector = state.injector.     FactoryFinder factoryFinder = state.factoryFinder.     DefaultTypeConverter converter = new DefaultTypeConverter(packageScanClassResolver, injector, factoryFinder, true).     converter.start().     bh.consume(converter). }
false;public;2;8;;@Benchmark public void benchmarkConversionTimeEnum(BenchmarkState state, Blackhole bh) {     DefaultTypeConverter converter = state.converter.     for (int i = 0. i < 1000. i++) {         bh.consume(converter.convertTo(LoggingLevel.class, "DEBUG")).     } }
false;public;2;8;;@Benchmark public void benchmarkConversionIntToLong(BenchmarkState state, Blackhole bh) {     DefaultTypeConverter converter = state.converter.     for (int i = 0. i < 1000. i++) {         bh.consume(converter.convertTo(Long.class, 3)).     } }
false;public;2;8;;@Benchmark public void benchmarkConversionStringToChar(BenchmarkState state, Blackhole bh) {     DefaultTypeConverter converter = state.converter.     for (int i = 0. i < 1000. i++) {         bh.consume(converter.convertTo(char[].class, "Hello world")).     } }
false;public;2;8;;@Benchmark public void benchmarkConversionStringToURI(BenchmarkState state, Blackhole bh) {     DefaultTypeConverter converter = state.converter.     for (int i = 0. i < 1000. i++) {         bh.consume(converter.convertTo(URI.class, "uri:foo")).     } }
false;public;2;8;;@Benchmark public void benchmarkConversionListToStringArray(BenchmarkState state, Blackhole bh) {     DefaultTypeConverter converter = state.converter.     for (int i = 0. i < 1000. i++) {         bh.consume(converter.convertTo(String[].class, Arrays.asList("DEBUG"))).     } }
false;public;0;8;;@Ignore @Test public void testConvertEnumPerfs() throws Exception {     Blackhole bh = new Blackhole("Today's password is swordfish. I understand instantiating Blackholes directly is dangerous.").     BenchmarkState state = new BenchmarkState().     state.initialize().     doTest(bh, state). }
false;private;2;6;;private void doTest(Blackhole bh, BenchmarkState state) {     DefaultTypeConverter converter = state.converter.     for (int i = 0. i < 1000000. i++) {         bh.consume(converter.convertTo(Long.class, 3)).     } }
