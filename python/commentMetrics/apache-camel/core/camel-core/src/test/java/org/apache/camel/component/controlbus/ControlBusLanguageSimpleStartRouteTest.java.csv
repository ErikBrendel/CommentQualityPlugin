commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testControlBusStartStop() throws Exception {     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     // store a pending message     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     // start the route using control bus     template.sendBody("controlbus:language:simple", "${camelContext.getRouteController().startRoute('foo')}").     assertMockEndpointsSatisfied().     // now stop the route, using a header     template.sendBodyAndHeader("controlbus:language:simple", "${camelContext.getRouteController().stopRoute(${header.me})}", "me", "foo").     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()). }
false;public;0;12;;@Test public void testControlBusStatus() throws Exception {     assertEquals("Stopped", context.getRouteController().getRouteStatus("foo").name()).     String status = template.requestBody("controlbus:language:simple", "${camelContext.getRouteController().getRouteStatus('foo')}", String.class).     assertEquals("Stopped", status).     context.getRouteController().startRoute("foo").     status = template.requestBody("controlbus:language:simple", "${camelContext.getRouteController().getRouteStatus('foo')}", String.class).     assertEquals("Started", status). }
false;public;0;5;;@Override public void configure() throws Exception {     from("seda:foo").routeId("foo").noAutoStartup().to("mock:foo"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("foo").noAutoStartup().to("mock:foo").         }     }. }
