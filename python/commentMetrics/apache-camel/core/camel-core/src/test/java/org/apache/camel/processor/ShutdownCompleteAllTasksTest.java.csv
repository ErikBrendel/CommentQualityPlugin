commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/pending").     super.setUp().     template.sendBodyAndHeader(url, "A", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader(url, "B", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader(url, "C", Exchange.FILE_NAME, "c.txt").     template.sendBodyAndHeader(url, "D", Exchange.FILE_NAME, "d.txt").     template.sendBodyAndHeader(url, "E", Exchange.FILE_NAME, "e.txt"). }
false;public;0;24;;@Test public void testShutdownCompleteAllTasks() throws Exception {     // give it 30 seconds to shutdown     context.getShutdownStrategy().setTimeout(30).     // start route     context.getRouteController().startRoute("foo").     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     int batch = bar.getReceivedExchanges().get(0).getProperty(Exchange.BATCH_SIZE, int.class).     // wait for latch     latch.await(10, TimeUnit.SECONDS).     // shutdown during processing     context.stop().     // should route all     assertEquals("Should complete all messages", batch, counter.get()). }
false;public;0;9;;@Override public // START SNIPPET: e1 void configure() throws Exception {     from(url).routeId("foo").noAutoStartup().shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).process(new MyProcessor()).to("mock:bar"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public // START SNIPPET: e1         void configure() throws Exception {             from(url).routeId("foo").noAutoStartup().shutdownRunningTask(ShutdownRunningTask.CompleteAllTasks).process(new MyProcessor()).to("mock:bar").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter.incrementAndGet().     latch.countDown(). }
