commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void setUp() throws Exception {     deleteDirectory("target/doesnotexists").     super.setUp(). }
false;public;0;9;;@Test public void testBridgeErrorHandler() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMinimumMessageCount(1).     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")).     from("file:target/doesnotexists?initialDelay=1&delay=1" + "&autoCreate=false&directoryMustExist=true&bridgeErrorHandler=true").routeId("foo").noAutoStartup().to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead")).             from("file:target/doesnotexists?initialDelay=1&delay=1" + "&autoCreate=false&directoryMustExist=true&bridgeErrorHandler=true").routeId("foo").noAutoStartup().to("mock:result").         }     }. }
