commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/cachedir").     super.setUp(). }
false;public;0;17;;@Test public void testByteArrayInputStream() throws Exception {     getMockEndpoint("mock:english").expectedBodiesReceived("<hello/>").     getMockEndpoint("mock:dutch").expectedBodiesReceived("<hallo/>").     getMockEndpoint("mock:german").expectedBodiesReceived("<hallo/>").     getMockEndpoint("mock:french").expectedBodiesReceived("<hellos/>").     // need to wrap in MyInputStream as ByteArrayInputStream is optimized to just reuse in memory buffer     // and not needed to spool to disk     template.sendBody("direct:a", new MyInputStream(new ByteArrayInputStream("<hello/>".getBytes()))).     spoolRule.setSpool(true).     template.sendBody("direct:a", new MyInputStream(new ByteArrayInputStream("<hallo/>".getBytes()))).     template.sendBody("direct:a", new MyInputStream(new ByteArrayInputStream("<hellos/>".getBytes()))).     assertMockEndpointsSatisfied(). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     // check if spool file exists     if (spoolRule.isSpool()) {         String[] names = new File("target/cachedir").list().         assertEquals("There should be a cached spool file", 1, names.length).     } }
false;public;0;25;;@Override public void configure() throws Exception {     context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir").     context.getStreamCachingStrategy().addSpoolRule(spoolRule).     context.getStreamCachingStrategy().setAnySpoolRules(true).     context.setStreamCaching(true).     from("direct:a").choice().when(xpath("//hello")).to("mock:english").when(xpath("//hallo")).to("mock:dutch", "mock:german").otherwise().to("mock:french").end().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // check if spool file exists             if (spoolRule.isSpool()) {                 String[] names = new File("target/cachedir").list().                 assertEquals("There should be a cached spool file", 1, names.length).             }         }     }). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getStreamCachingStrategy().setSpoolDirectory("target/cachedir").             context.getStreamCachingStrategy().addSpoolRule(spoolRule).             context.getStreamCachingStrategy().setAnySpoolRules(true).             context.setStreamCaching(true).             from("direct:a").choice().when(xpath("//hello")).to("mock:english").when(xpath("//hallo")).to("mock:dutch", "mock:german").otherwise().to("mock:french").end().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // check if spool file exists                     if (spoolRule.isSpool()) {                         String[] names = new File("target/cachedir").list().                         assertEquals("There should be a cached spool file", 1, names.length).                     }                 }             }).         }     }. }
false;public;1;4;;@Override public boolean shouldSpoolCache(long length) {     return spool. }
false;public;0;3;;public boolean isSpool() {     return spool. }
false;public;1;3;;public void setSpool(boolean spool) {     this.spool = spool. }
false;public;0;4;;@Override public String toString() {     return "MyCustomSpoolRule". }
