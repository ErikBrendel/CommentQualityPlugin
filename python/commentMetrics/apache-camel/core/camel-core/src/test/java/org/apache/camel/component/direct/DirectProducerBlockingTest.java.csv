commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testProducerBlocksForSuspendedConsumer() throws Exception {     DirectEndpoint endpoint = getMandatoryEndpoint("direct:suspended", DirectEndpoint.class).     endpoint.getConsumer().suspend().     StopWatch watch = new StopWatch().     try {         template.sendBody("direct:suspended?block=true&timeout=500", "hello world").         fail("Expected CamelExecutionException").     } catch (CamelExecutionException e) {         DirectConsumerNotAvailableException cause = assertIsInstanceOf(DirectConsumerNotAvailableException.class, e.getCause()).         assertIsInstanceOf(CamelExchangeException.class, cause).         assertTrue(watch.taken() > 490).     } }
false;public;0;16;;@Test public void testProducerBlocksWithNoConsumers() throws Exception {     DirectEndpoint endpoint = getMandatoryEndpoint("direct:suspended", DirectEndpoint.class).     endpoint.getConsumer().suspend().     StopWatch watch = new StopWatch().     try {         template.sendBody("direct:start?block=true&timeout=500", "hello world").         fail("Expected CamelExecutionException").     } catch (CamelExecutionException e) {         DirectConsumerNotAvailableException cause = assertIsInstanceOf(DirectConsumerNotAvailableException.class, e.getCause()).         assertIsInstanceOf(CamelExchangeException.class, cause).         assertTrue(watch.taken() > 490).     } }
false;public;0;10;;@Override public void run() {     try {         Thread.sleep(200).         log.info("Resuming consumer").         context.getRouteController().resumeRoute("foo").     } catch (Exception e) {     // ignore     } }
false;public;0;26;;@Test public void testProducerBlocksResumeTest() throws Exception {     context.getRouteController().suspendRoute("foo").     ExecutorService executor = Executors.newSingleThreadExecutor().     executor.submit(new Runnable() {          @Override         public void run() {             try {                 Thread.sleep(200).                 log.info("Resuming consumer").                 context.getRouteController().resumeRoute("foo").             } catch (Exception e) {             // ignore             }         }     }).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:suspended?block=true&timeout=1000", "hello world").     assertMockEndpointsSatisfied().     executor.shutdownNow(). }
false;public;0;4;;public void configure() throws Exception {     from("direct:suspended").routeId("foo").to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:suspended").routeId("foo").to("mock:result").         }     }. }
