commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSendMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(1).     sendBody("direct:start", matchingBody).     resultEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Test public void testSendNotMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(0).     sendBody("direct:start", notMatchingBody).     resultEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;11;;public void configure() {     // START SNIPPET: example     Namespaces ns = new Namespaces("foo", "urn:cheese").     from("direct:start").unmarshal().string().setHeader("foo", xpath("/foo:person[@name='James']").namespaces(ns)).filter(xpath("/foo:person[@name='James']").namespaces(ns)).to("mock:result"). // END SNIPPET: example }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             Namespaces ns = new Namespaces("foo", "urn:cheese").             from("direct:start").unmarshal().string().setHeader("foo", xpath("/foo:person[@name='James']").namespaces(ns)).filter(xpath("/foo:person[@name='James']").namespaces(ns)).to("mock:result").         // END SNIPPET: example         }     }. }
