commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testAggregateAndOnException() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBodyAndHeader("seda:start", "Hello World", "id", 123).     template.sendBodyAndHeader("seda:start", "Bye World", "id", 123).     assertMockEndpointsSatisfied(). }
false;public;2;3;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     return newExchange. }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error")).     onException(CamelException.class).maximumRedeliveries(2).     from("seda:start").aggregate(header("id"), new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             return newExchange.         }     }).completionSize(2).completionTimeout(500L).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error")).             onException(CamelException.class).maximumRedeliveries(2).             from("seda:start").aggregate(header("id"), new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     return newExchange.                 }             }).completionSize(2).completionTimeout(500L).to("mock:result").         }     }. }
