commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.requestBody("direct:start", "Hello Camel", String.class).         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Damn", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied().     // wait a bit to ensure UoW has been run     assertTrue(oneExchangeDone.matchesMockWaitTime()).     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)).     assertEquals(0, sync.isOnComplete()).     assertEquals(1, sync.isOnFailure()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName().     exchange.addOnCompletion(sync). }
false;public;0;24;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().             exchange.addOnCompletion(sync).         }     }).to("mock:before").to("log:before").to("async:bye:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:after").throwException(new IllegalArgumentException("Damn")).to("mock:result"). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                     exchange.addOnCompletion(sync).                 }             }).to("mock:before").to("log:before").to("async:bye:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:after").throwException(new IllegalArgumentException("Damn")).to("mock:result").         }     }. }
false;public;1;3;;public void onComplete(Exchange exchange) {     onComplete.incrementAndGet(). }
false;public;1;4;;@Override public void onFailure(Exchange exchange) {     onFailure.incrementAndGet(). }
false;public;0;3;;public int isOnComplete() {     return onComplete.get(). }
false;public;0;3;;public int isOnFailure() {     return onFailure.get(). }
