commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:producer?multipleConsumers=true").routeId("route2").to("mock:route2"). }
false;public;0;37;;@Test public void testMultipleVMConsumersSameContext() throws Exception {     CamelContext camelContext = new DefaultCamelContext().     ProducerTemplate producerTemplate = camelContext.createProducerTemplate().     RouteBuilder builder = new RouteBuilder(camelContext) {          @Override         public void configure() throws Exception {             from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1").         }     }.     RouteBuilder builder2 = new RouteBuilder(camelContext) {          @Override         public void configure() throws Exception {             from("vm:producer?multipleConsumers=true").routeId("route2").to("mock:route2").         }     }.     camelContext.addRoutes(builder).     camelContext.addRoutes(builder2).     camelContext.start().     MockEndpoint mock1 = (MockEndpoint) camelContext.getEndpoint("mock:route1").     MockEndpoint mock2 = (MockEndpoint) camelContext.getEndpoint("mock:route2").     mock1.expectedMessageCount(100).     mock2.expectedMessageCount(100).     for (int i = 0. i < 100. i++) {         producerTemplate.sendBody("vm:producer?multipleConsumers=true", i).     }     MockEndpoint.assertIsSatisfied(mock1, mock2).     camelContext.stop(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:producer?multipleConsumers=true").routeId("route2").to("mock:route2"). }
false;public;0;38;;@Test public void testVmMultipleConsumersMultipleContext() throws Exception {     // start context 1     CamelContext consumerContext1 = new DefaultCamelContext().     consumerContext1.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1").         }     }).     consumerContext1.start().     MockEndpoint route1Mock = (MockEndpoint) consumerContext1.getEndpoint("mock:route1").     route1Mock.expectedMessageCount(100).     // start up context 2     CamelContext consumerContext2 = new DefaultCamelContext().     consumerContext2.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:producer?multipleConsumers=true").routeId("route2").to("mock:route2").         }     }).     consumerContext2.start().     MockEndpoint route2Mock = (MockEndpoint) consumerContext2.getEndpoint("mock:route2").     route2Mock.expectedMessageCount(100).     // use context part of contextTestSupport to send in messages     for (int i = 0. i < 100. i++) {         template.sendBody("vm:producer?multipleConsumers=true", i).     }     route1Mock.assertIsSatisfied().     route2Mock.assertIsSatisfied().     consumerContext1.stop().     consumerContext2.stop(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:producer?multipleConsumers=true").routeId(route).to("mock:" + route). }
false;private;1;11;;private CamelContext buildConsumerContext(final String route) throws Exception {     DefaultCamelContext rc = new DefaultCamelContext().     rc.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:producer?multipleConsumers=true").routeId(route).to("mock:" + route).         }     }).     rc.start().     return rc. }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1"). }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:foo?multipleConsumers=true").routeId("route2").to("mock:route2"). }
false;public;0;37;;@Test public void testVmMultipleConsumersDifferentEndpoints() throws Exception {     // start context 1     CamelContext consumerContext1 = new DefaultCamelContext().     consumerContext1.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:producer?multipleConsumers=true").routeId("route1").to("mock:route1").         }     }).     consumerContext1.start().     MockEndpoint route1Mock = (MockEndpoint) consumerContext1.getEndpoint("mock:route1").     route1Mock.expectedMessageCount(100).     // start up context 2     CamelContext consumerContext2 = new DefaultCamelContext().     consumerContext2.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:foo?multipleConsumers=true").routeId("route2").to("mock:route2").         }     }).     consumerContext2.start().     MockEndpoint route2Mock = (MockEndpoint) consumerContext2.getEndpoint("mock:route2").     route2Mock.expectedMessageCount(0).     // use context part of contextTestSupport to send in messages     for (int i = 0. i < 100. i++) {         template.sendBody("vm:producer?multipleConsumers=true", i).     }     route1Mock.assertIsSatisfied().     route2Mock.assertIsSatisfied().     consumerContext1.stop().     consumerContext2.stop(). }
