commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/allow").     super.setUp().     template.sendBodyAndHeader("file://target/data/allow", "Hello world", Exchange.FILE_NAME, "hello.txt"). }
false;public;0;10;;@Test public void testFileExistAppendAllowNullBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:appendTypeAppendResult").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/allow/hello.txt", "Hello world").     template.sendBody("direct:appendTypeAppend", null).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testFileExistOverrideAllowNullBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:appendTypeOverrideResult").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/allow/hello.txt", "").     template.sendBody("direct:appendTypeOverride", null).     assertMockEndpointsSatisfied(). }
false;public;0;11;;public void configure() {     from("direct:appendTypeAppend").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("file://target/data/allow?allowNullBody=true&fileExist=Append").to("mock:appendTypeAppendResult").     from("direct:appendTypeOverride").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("file://target/data/allow?allowNullBody=true&fileExist=Override").to("mock:appendTypeOverrideResult"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:appendTypeAppend").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("file://target/data/allow?allowNullBody=true&fileExist=Append").to("mock:appendTypeAppendResult").             from("direct:appendTypeOverride").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("file://target/data/allow?allowNullBody=true&fileExist=Override").to("mock:appendTypeOverrideResult").         }     }. }
