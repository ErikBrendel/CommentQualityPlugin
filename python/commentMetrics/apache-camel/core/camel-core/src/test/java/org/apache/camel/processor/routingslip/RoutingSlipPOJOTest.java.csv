commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testRoutingSlipPOJO() throws Exception {     MockEndpoint foo = getMockEndpoint("mock:foo").     MockEndpoint result = getMockEndpoint("mock:result").     foo.expectedBodiesReceived("Message").     result.expectedBodiesReceived("Message is processed!").     template.sendBody("direct:a", "Message").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody(exchange.getIn().getBody() + " is processed!"). }
false;public;0;9;;public void configure() {     from("direct:a").bean(new MyRoutingSlipPOJO()).     from("direct:b").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody(exchange.getIn().getBody() + " is processed!").         }     }). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:a").bean(new MyRoutingSlipPOJO()).             from("direct:b").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody(exchange.getIn().getBody() + " is processed!").                 }             }).         }     }. }
false;public;1;4;;@RoutingSlip(context = "camel-1") public String[] doSomething(String body) {     return new String[] { "mock:foo", "direct:b", "mock:result" }. }
