commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testTwoScheduler() throws Exception {     getMockEndpoint("mock:done").expectedMinimumMessageCount(10).     assertMockEndpointsSatisfied(). }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     if (sleep.compareAndSet(true, false)) {         log.info("Thread is sleeping").         Thread.sleep(1000).         log.info("Thread is done sleeping").     } }
false;public;0;20;;public void configure() {     // number of concurrent task a thread pool should have     SchedulerComponent comp = context.getComponent("scheduler", SchedulerComponent.class).     comp.setConcurrentTasks(2).     // let this route scheduler use all 2 concurrent tasks at the same time     from("scheduler://foo?delay=250&scheduler.concurrentTasks=2").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             if (sleep.compareAndSet(true, false)) {                 log.info("Thread is sleeping").                 Thread.sleep(1000).                 log.info("Thread is done sleeping").             }         }     }).to("log:done").to("mock:done"). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() {             // number of concurrent task a thread pool should have             SchedulerComponent comp = context.getComponent("scheduler", SchedulerComponent.class).             comp.setConcurrentTasks(2).             // let this route scheduler use all 2 concurrent tasks at the same time             from("scheduler://foo?delay=250&scheduler.concurrentTasks=2").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     if (sleep.compareAndSet(true, false)) {                         log.info("Thread is sleeping").                         Thread.sleep(1000).                         log.info("Thread is done sleeping").                     }                 }             }).to("log:done").to("mock:done").         }     }. }
