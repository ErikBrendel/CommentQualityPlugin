commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testBeanAnnotationOne() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello/Bonjour World").     template.sendBody("direct:one", "World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testBeanAnnotationTwo() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello/Bonjour World").     template.sendBody("direct:two", "World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testBeanAnnotationThree() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello/Bonjour World").     template.sendBody("direct:three", "World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testBeanAnnotationFour() throws Exception {     getMockEndpoint("mock:middle").expectedBodiesReceived("Hello/Bonjour World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:four", "World").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("GreetingService", new GreetingService()).     return jndi. }
false;public;0;21;;@Override public void configure() throws Exception {     from("direct:one").bean(MyBean.class).to("mock:result").     from("direct:two").bean(MyBean.class, "callA").to("mock:result").     from("direct:three").setHeader(Exchange.BEAN_METHOD_NAME, constant("callA")).bean(MyBean.class).to("mock:result").     from("direct:four").bean(MyBean.class, "callA").to("mock:middle").bean(MyBean.class, "callB").to("mock:result"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:one").bean(MyBean.class).to("mock:result").             from("direct:two").bean(MyBean.class, "callA").to("mock:result").             from("direct:three").setHeader(Exchange.BEAN_METHOD_NAME, constant("callA")).bean(MyBean.class).to("mock:result").             from("direct:four").bean(MyBean.class, "callA").to("mock:middle").bean(MyBean.class, "callB").to("mock:result").         }     }. }
false;public;3;5;;public String callA(@Bean(ref = "GreetingService", method = "english") String greeting, @Bean(ref = "GreetingService", method = "french") String french, String body) {     return greeting + "/" + french + " " + body. }
false;public;0;3;;public String callB() {     return "Bye World". }
false;public;0;3;;public String callA() {     throw new IllegalArgumentException("Should not callA"). }
false;public;0;3;;public String callB() {     throw new IllegalArgumentException("Should not callB"). }
false;public;0;3;;public String english() {     return "Hello". }
false;public;0;3;;public String french() {     return "Bonjour". }
false;public;0;3;;public String german() {     return "Hallo". }
