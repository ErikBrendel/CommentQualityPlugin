commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testNoException() throws Exception {     endEndpoint.expectedMessageCount(1).     exceptionEndpoint.expectedMessageCount(0).     aEndpoint.expectedMessageCount(1).     sendRoutingSlipWithNoExceptionThrowingComponent().     assertEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWithExceptionThrowingComponentFirstInList() throws Exception {     endEndpoint.expectedMessageCount(0).     exceptionEndpoint.expectedMessageCount(1).     aEndpoint.expectedMessageCount(0).     sendRoutingSlipWithExceptionThrowingComponentFirstInList().     assertEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWithExceptionThrowingComponentSecondInList() throws Exception {     endEndpoint.expectedMessageCount(0).     exceptionEndpoint.expectedMessageCount(1).     aEndpoint.expectedMessageCount(1).     sendRoutingSlipWithExceptionThrowingComponentSecondInList().     assertEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWithExceptionSettingComponentFirstInList() throws Exception {     endEndpoint.expectedMessageCount(0).     exceptionEndpoint.expectedMessageCount(1).     aEndpoint.expectedMessageCount(0).     sendRoutingSlipWithExceptionSettingComponentFirstInList().     assertEndpointsSatisfied(). }
false;public;0;10;;@Test public void testWithExceptionSettingComponentSecondInList() throws Exception {     endEndpoint.expectedMessageCount(0).     exceptionEndpoint.expectedMessageCount(1).     aEndpoint.expectedMessageCount(1).     sendRoutingSlipWithExceptionSettingComponentSecondInList().     assertEndpointsSatisfied(). }
false;private;0;3;;private void assertEndpointsSatisfied() throws InterruptedException {     MockEndpoint.assertIsSatisfied(5, TimeUnit.SECONDS, endEndpoint, exceptionEndpoint, aEndpoint). }
false;protected;0;4;;protected void sendRoutingSlipWithExceptionThrowingComponentFirstInList() {     template.sendBodyAndHeader("direct:start", ANSWER, ROUTING_SLIP_HEADER, "bean:myBean?method=throwException,mock:a"). }
false;protected;0;4;;protected void sendRoutingSlipWithExceptionThrowingComponentSecondInList() {     template.sendBodyAndHeader("direct:start", ANSWER, ROUTING_SLIP_HEADER, "mock:a,bean:myBean?method=throwException"). }
false;protected;0;4;;protected void sendRoutingSlipWithNoExceptionThrowingComponent() {     template.sendBodyAndHeader("direct:start", ANSWER, ROUTING_SLIP_HEADER, "mock:a"). }
false;protected;0;4;;protected void sendRoutingSlipWithExceptionSettingComponentFirstInList() {     template.sendBodyAndHeader("direct:start", ANSWER, ROUTING_SLIP_HEADER, "mock:exceptionSetting,mock:a"). }
false;protected;0;4;;protected void sendRoutingSlipWithExceptionSettingComponentSecondInList() {     template.sendBodyAndHeader("direct:start", ANSWER, ROUTING_SLIP_HEADER, "mock:a,mock:exceptionSetting"). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.setException(new Exception("Throw me!")). }
false;public;0;19;;@Override @Before public void setUp() throws Exception {     super.setUp().     endEndpoint = resolveMandatoryEndpoint("mock:noexception", MockEndpoint.class).     exceptionEndpoint = resolveMandatoryEndpoint("mock:exception", MockEndpoint.class).     exceptionSettingEndpoint = resolveMandatoryEndpoint("mock:exceptionSetting", MockEndpoint.class).     aEndpoint = resolveMandatoryEndpoint("mock:a", MockEndpoint.class).     exceptionSettingEndpoint.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.setException(new Exception("Throw me!")).         }     }).     Object lookedUpBean = context.getRegistry().lookupByName("myBean").     assertSame("Lookup of 'myBean' should return same object!", myBean, lookedUpBean). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     return answer. }
false;public;0;7;;public void configure() {     from("direct:start").doTry().routingSlip(header(ROUTING_SLIP_HEADER)).end().to("mock:noexception").doCatch(Exception.class).to("mock:exception"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").doTry().routingSlip(header(ROUTING_SLIP_HEADER)).end().to("mock:noexception").doCatch(Exception.class).to("mock:exception").         }     }. }
false;public;0;3;;public void throwException() throws Exception {     throw new Exception("Throw me!"). }
