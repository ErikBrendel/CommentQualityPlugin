commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyRoutingSlipBean()).     return jndi. }
false;public;0;20;;@Test public void testAsyncEndpointDontBlock() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     Endpoint startEndpoint = context.getEndpoint("direct:start").     SendProcessor asyncSender = new SendProcessor(startEndpoint).     ServiceHelper.startService(asyncSender).     ExecutorService executorService = context.getExecutorServiceManager().newSingleThreadExecutor(this, "test").     try {         Future<Boolean> asyncFuture = executorService.submit(new ExchangeSubmitter(startEndpoint, asyncSender)).         Assert.assertFalse(asyncFuture.get(5, TimeUnit.SECONDS)).         innerExchange.getOut().setBody("Bye Camel").         innerCallback.done(false).         assertMockEndpointsSatisfied().     } finally {         executorService.shutdown().         ServiceHelper.stopAndShutdownService(asyncSender).     } }
false;public;0;9;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("bean:myBean").     from("direct:asyncRoute").process(new MyAsyncProcessor()). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("bean:myBean").             from("direct:asyncRoute").process(new MyAsyncProcessor()).         }     }. }
false;public;0;4;;@RoutingSlip public String doSomething() {     return "direct:asyncRoute,mock:result". }
false;public;1;4;;@Override public void done(boolean doneSync) {     Assert.assertFalse(doneSync). }
false;public;0;11;;@Override public Boolean call() throws Exception {     Exchange exchange = startEndpoint.createExchange(ExchangePattern.InOut).     exchange.getIn().setBody("Hello Camel").     return asyncSender.process(exchange, new AsyncCallback() {          @Override         public void done(boolean doneSync) {             Assert.assertFalse(doneSync).         }     }). }
false;public;2;7;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     innerCallback = callback.     innerExchange = exchange.     return false. }
