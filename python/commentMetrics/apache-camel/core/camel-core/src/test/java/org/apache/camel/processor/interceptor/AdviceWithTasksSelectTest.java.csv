commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     // should only match the first     weaveById("gold*").selectFirst().replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectFirst() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should only match the first             weaveById("gold*").selectFirst().replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(1).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // should only match the last     weaveById("gold*").selectLast().replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectLast() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should only match the last             weaveById("gold*").selectLast().replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // should match the first index (0 based)     weaveById("gold*").selectIndex(0).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectIndexZero() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should match the first index (0 based)             weaveById("gold*").selectIndex(0).replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(1).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // should match the second index (0 based)     weaveById("gold*").selectIndex(1).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectIndexOne() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should match the second index (0 based)             weaveById("gold*").selectIndex(1).replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:baz").expectedMessageCount(1).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // should match the third index (0 based)     weaveById("gold*").selectIndex(2).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectIndexTwo() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should match the third index (0 based)             weaveById("gold*").selectIndex(2).replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // should be out of bounds     weaveById("gold*").selectIndex(3).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;15;;@Test public void testSelectIndexOutOfBounds() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 // should be out of bounds                 weaveById("gold*").selectIndex(3).replace().multicast().to("mock:a").to("mock:b").             }         }).         fail("Should hve thrown exception").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage(), e.getMessage().startsWith("There are no outputs which matches: gold* in the route")).     } }
false;public;0;5;;@Override public void configure() throws Exception {     // should match the first two (0-based)     weaveById("gold*").selectRange(0, 1).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectRangeZeroOne() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should match the first two (0-based)             weaveById("gold*").selectRange(0, 1).replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:baz").expectedMessageCount(1).     getMockEndpoint("mock:a").expectedMessageCount(2).     getMockEndpoint("mock:b").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // should match the 2nd and 3rd (0-based)     weaveById("gold*").selectRange(1, 2).replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;21;;@Test public void testSelectRangeOneTwo() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // should match the 2nd and 3rd (0-based)             weaveById("gold*").selectRange(1, 2).replace().multicast().to("mock:a").to("mock:b").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:baz").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(2).     getMockEndpoint("mock:b").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").log("Got ${body}").id("foo").to("mock:foo").id("gold-1").to("mock:bar").id("gold-2").to("mock:baz").id("gold-3").to("mock:result").id("silver-1"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").log("Got ${body}").id("foo").to("mock:foo").id("gold-1").to("mock:bar").id("gold-2").to("mock:baz").id("gold-3").to("mock:result").id("silver-1").         }     }. }
