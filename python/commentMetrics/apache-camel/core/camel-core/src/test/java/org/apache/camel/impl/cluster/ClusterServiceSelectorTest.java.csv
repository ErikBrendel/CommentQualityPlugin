commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testDefaultSelector() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         context = new DefaultCamelContext().         context.addService(service1).         Optional<CamelClusterService> lookup = lookupService(context).         Assert.assertTrue(lookup.isPresent()).         Assert.assertEquals(service1, lookup.get()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;18;;@Test public void testDefaultSelectorFailure() throws Exception {     CamelContext context = null.     try {         context = new DefaultCamelContext().         context.addService(new DummyClusterService1()).         context.addService(new DummyClusterService2()).         Optional<CamelClusterService> lookup = lookupService(context).         Assert.assertFalse(lookup.isPresent()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;21;;@Test public void testSelectSingle() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         context = new DefaultCamelContext().         context.addService(service1).         CamelClusterService.Selector selector = ClusterServiceSelectors.single().         Optional<CamelClusterService> lookup = lookupService(context, selector).         Assert.assertTrue(lookup.isPresent()).         Assert.assertEquals(service1, lookup.get()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;19;;@Test public void testSelectSingleFailure() throws Exception {     CamelContext context = null.     try {         context = new DefaultCamelContext().         context.addService(new DummyClusterService1()).         context.addService(new DummyClusterService2()).         CamelClusterService.Selector selector = ClusterServiceSelectors.single().         Optional<CamelClusterService> lookup = lookupService(context, selector).         Assert.assertFalse(lookup.isPresent()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;19;;@Test public void testSelectFirst() throws Exception {     CamelContext context = null.     try {         context = new DefaultCamelContext().         context.addService(new DummyClusterService1()).         context.addService(new DummyClusterService2()).         CamelClusterService.Selector selector = ClusterServiceSelectors.first().         Optional<CamelClusterService> lookup = lookupService(context, selector).         Assert.assertTrue(lookup.isPresent()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;19;;@Test public void testSelectByType() throws Exception {     CamelContext context = null.     try {         context = new DefaultCamelContext().         context.addService(new DummyClusterService1()).         context.addService(new DummyClusterService2()).         Assert.assertTrue(lookupService(context, ClusterServiceSelectors.type(DummyClusterService1.class)).isPresent()).         Assert.assertTrue(lookupService(context, ClusterServiceSelectors.type(DummyClusterService2.class)).isPresent()).         Assert.assertFalse(lookupService(context, ClusterServiceSelectors.type(FileLockClusterService.class)).isPresent()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;35;;@Test public void testSelectByAttribute() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         service1.setAttribute("service.type", "zookeeper").         DummyClusterService2 service2 = new DummyClusterService2().         service2.setAttribute("service.type", "file").         context = new DefaultCamelContext().         context.addService(service1).         context.addService(service2).         Optional<CamelClusterService> lookup.         lookup = lookupService(context, ClusterServiceSelectors.attribute("service.type", "zookeeper")).         Assert.assertTrue(lookup.isPresent()).         Assert.assertEquals(service1, lookup.get()).         lookup = lookupService(context, ClusterServiceSelectors.attribute("service.type", "file")).         Assert.assertTrue(lookup.isPresent()).         Assert.assertEquals(service2, lookup.get()).         lookup = lookupService(context, ClusterServiceSelectors.attribute("service.type", "consul")).         Assert.assertFalse(lookup.isPresent()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;27;;@Test public void testSelectByOrder() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         service1.setOrder(1).         DummyClusterService2 service2 = new DummyClusterService2().         service2.setOrder(0).         context = new DefaultCamelContext().         context.addService(service1).         context.addService(service2).         CamelClusterService.Selector selector = ClusterServiceSelectors.order().         Optional<CamelClusterService> lookup = lookupService(context, selector).         Assert.assertTrue(lookup.isPresent()).         Assert.assertEquals(service2, lookup.get()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;29;;@Test public void testSelectByOrderFailure() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         service1.setOrder(1).         DummyClusterService2 service2 = new DummyClusterService2().         service2.setOrder(0).         DummyClusterService2 service3 = new DummyClusterService2().         service3.setOrder(0).         context = new DefaultCamelContext().         context.addService(service1).         context.addService(service2).         context.addService(service3).         CamelClusterService.Selector selector = ClusterServiceSelectors.order().         Optional<CamelClusterService> lookup = lookupService(context, selector).         Assert.assertFalse(lookup.isPresent()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;21;;@Test public void testMandatoryLookup() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         context = new DefaultCamelContext().         context.addService(service1).         CamelClusterService.Selector selector = ClusterServiceSelectors.single().         CamelClusterService lookup = mandatoryLookupService(context, selector).         Assert.assertNotNull(lookup).         Assert.assertEquals(service1, lookup).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;20;;@Test public void testMandatoryLookupWithoutSelector() throws Exception {     CamelContext context = null.     try {         DummyClusterService1 service1 = new DummyClusterService1().         context = new DefaultCamelContext().         context.addService(service1).         CamelClusterService lookup = mandatoryLookupService(context).         Assert.assertNotNull(lookup).         Assert.assertEquals(service1, lookup).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;14;;@Test(expected = IllegalStateException.class) public void testMandatoryLookupFailure() throws Exception {     CamelContext context = null.     try {         context = new DefaultCamelContext().         mandatoryLookupService(context, ClusterServiceSelectors.single()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;14;;@Test(expected = IllegalStateException.class) public void testMandatoryLookupFailureWithoutSelector() throws Exception {     CamelContext context = null.     try {         context = new DefaultCamelContext().         mandatoryLookupService(context).     } finally {         if (context != null) {             context.stop().         }     } }
false;protected;1;4;;@Override protected CamelClusterView createView(String namespace) throws Exception {     return new DummyClusterServiceView(this, namespace). }
false;protected;1;4;;@Override protected CamelClusterView createView(String namespace) throws Exception {     return new DummyClusterServiceView(this, namespace). }
false;public;0;4;;@Override public Optional<CamelClusterMember> getLeader() {     return Optional.empty(). }
false;public;0;4;;@Override public CamelClusterMember getLocalMember() {     return new DummyClusterServiceMember(false, true). }
false;public;0;4;;@Override public List<CamelClusterMember> getMembers() {     return Collections.emptyList(). }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
false;public;0;4;;@Override public boolean isLeader() {     return leader. }
false;public;0;4;;@Override public boolean isLocal() {     return local. }
false;public;0;4;;@Override public String getId() {     return getClusterService().getId(). }
