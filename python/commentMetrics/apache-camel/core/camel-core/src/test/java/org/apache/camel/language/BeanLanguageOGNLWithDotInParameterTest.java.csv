commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testDot() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("goto", "mock:MyAppV1.2.3/blah").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyDestinationBean()).     return jndi. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").setHeader("goto").simple("${bean:myBean?method=whereToMate('MyAppV1.2.3', 'blah')}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("goto").simple("${bean:myBean?method=whereToMate('MyAppV1.2.3', 'blah')}").to("mock:result").         }     }. }
false;public;2;3;;public String whereToMate(String version, String id) {     return "mock:" + version + "/" + id. }
