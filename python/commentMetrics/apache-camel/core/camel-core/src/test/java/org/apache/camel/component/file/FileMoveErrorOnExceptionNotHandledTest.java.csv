commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/move").     super.setUp(). }
false;public;0;11;;@Test public void testMoveError() throws Exception {     getMockEndpoint("mock:before").expectedMessageCount(1).     getMockEndpoint("mock:after").expectedMessageCount(0).     getMockEndpoint("mock:damn").expectedMessageCount(1).     getMockEndpoint("mock:damn").expectedFileExists("target/data/move/error/hello.txt").     template.sendBodyAndHeader("file:target/data/move", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("file:target/data/move?moveFailed=error&initialDelay=0&delay=10").onException(IllegalArgumentException.class).to("mock:damn").end().to("mock:before").throwException(new IllegalArgumentException("Damn")).to("mock:after"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/move?moveFailed=error&initialDelay=0&delay=10").onException(IllegalArgumentException.class).to("mock:damn").end().to("mock:before").throwException(new IllegalArgumentException("Damn")).to("mock:after").         }     }. }
