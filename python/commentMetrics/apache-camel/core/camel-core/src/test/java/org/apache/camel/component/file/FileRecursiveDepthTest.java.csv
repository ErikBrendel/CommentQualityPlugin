commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/depth").     super.setUp(). }
false;public;0;15;;@Test public void testDepth() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("a2", "b2").     template.sendBodyAndHeader("file:target/data/depth", "a", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/depth", "b", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader("file:target/data/depth/foo", "a2", Exchange.FILE_NAME, "a2.txt").     template.sendBodyAndHeader("file:target/data/depth/foo/bar", "a3", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/depth/bar", "b2", Exchange.FILE_NAME, "b2.txt").     template.sendBodyAndHeader("file:target/data/depth/bar/foo", "b3", Exchange.FILE_NAME, "b.txt").     // only expect 2 of the 6 sent, those at depth 2     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testDepthMin2Max99() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("a2", "b2", "a3", "b3").     template.sendBodyAndHeader("file:target/data/depth2", "a", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/depth2", "b", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader("file:target/data/depth2/bar", "b2", Exchange.FILE_NAME, "b2.txt").     template.sendBodyAndHeader("file:target/data/depth2/foo", "a2", Exchange.FILE_NAME, "a2.txt").     template.sendBodyAndHeader("file:target/data/depth2/foo/bar", "a3", Exchange.FILE_NAME, "a3.txt").     template.sendBodyAndHeader("file:target/data/depth2/bar/foo", "b3", Exchange.FILE_NAME, "b3.txt").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testMin1Max1() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("a", "b").     template.sendBodyAndHeader("file:target/data/depth3", "a", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/depth3", "b", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader("file:target/data/depth3/foo", "a2", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/depth3/foo/bar", "a3", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/depth3/bar", "b2", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader("file:target/data/depth3/bar/foo", "b3", Exchange.FILE_NAME, "b.txt").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     from("file:target/data/depth?initialDelay=0&delay=10&recursive=true&minDepth=2&maxDepth=2").convertBodyTo(String.class).to("mock:result").     from("file:target/data/depth2?initialDelay=0&delay=10&recursive=true&minDepth=2&maxDepth=99").convertBodyTo(String.class).to("mock:result").     from("file:target/data/depth3?initialDelay=0&delay=10&recursive=true&minDepth=1&maxDepth=1").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/depth?initialDelay=0&delay=10&recursive=true&minDepth=2&maxDepth=2").convertBodyTo(String.class).to("mock:result").             from("file:target/data/depth2?initialDelay=0&delay=10&recursive=true&minDepth=2&maxDepth=99").convertBodyTo(String.class).to("mock:result").             from("file:target/data/depth3?initialDelay=0&delay=10&recursive=true&minDepth=1&maxDepth=1").convertBodyTo(String.class).to("mock:result").         }     }. }
