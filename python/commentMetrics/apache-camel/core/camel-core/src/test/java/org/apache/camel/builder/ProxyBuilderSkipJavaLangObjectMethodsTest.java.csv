commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testSayFoo() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Camel").     Foo foo = new ProxyBuilder(context).endpoint("direct:start").build(Foo.class).     String out = foo.sayHello("Camel").     assertEquals("Hello Camel", out).     // these methods should not be proxied as they are from java.lang.Object     assertNotNull(foo.hashCode()).     assertNotNull(foo.toString()).     assertFalse(foo.equals(null)).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("mock:start").transform(body().prepend("Hello ")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:start").transform(body().prepend("Hello ")).         }     }. }
false;;1;1;;String sayHello(String body).
