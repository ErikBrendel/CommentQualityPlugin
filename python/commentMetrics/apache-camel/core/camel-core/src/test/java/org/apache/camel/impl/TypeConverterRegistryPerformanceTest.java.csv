commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testManual() throws Exception { // noop }
false;public;0;8;;@Override public void run() {     for (int j = 0. j < inner. j++) {         Document dom = context.getTypeConverter().convertTo(Document.class, "<hello>World</hello>").         assertNotNull(dom).     }     latch.countDown(). }
false;public;0;28;;public void disbledtestPerformance() throws Exception {     // force converter to be loaded on startup     Document dom = context.getTypeConverter().convertTo(Document.class, "<hello>World</hello>").     assertNotNull(dom).     StopWatch watch = new StopWatch().     latch = new CountDownLatch(size).     executorService = Executors.newFixedThreadPool(pool).     for (int i = 0. i < size. i++) {         executorService.submit(new Runnable() {              @Override             public void run() {                 for (int j = 0. j < inner. j++) {                     Document dom = context.getTypeConverter().convertTo(Document.class, "<hello>World</hello>").                     assertNotNull(dom).                 }                 latch.countDown().             }         }).     }     assertTrue("Should all work", latch.await(2, TimeUnit.MINUTES)).     log.info("Took " + watch.taken()).     executorService.shutdownNow(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
