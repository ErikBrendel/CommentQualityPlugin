commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/pollenrich").     super.setUp(). }
false;public;0;15;;@Test public void testFilePollEnrichNoWait() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedFileExists("target/data/pollenrich/done/hello.txt").     template.sendBodyAndHeader("file:target/data/pollenrich", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // file should be moved     File file = new File("target/data/pollenrich/hello.txt").     assertFalse("File should have been moved", file.exists()). }
false;public;0;13;;@Override public void configure() throws Exception {     from("timer:foo?delay=0&period=10").routeId("foo").log("Trigger timer foo").pollEnrich("file:target/data/pollenrich?initialDelay=0&delay=10&move=done", 0).convertBodyTo(String.class).filter(body().isNull()).stop().end().log("Polled filed ${file:name}").to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:foo?delay=0&period=10").routeId("foo").log("Trigger timer foo").pollEnrich("file:target/data/pollenrich?initialDelay=0&delay=10&move=done", 0).convertBodyTo(String.class).filter(body().isNull()).stop().end().log("Polled filed ${file:name}").to("mock:result").         }     }. }
