commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myCurrencyBean", new MyCurrencyBean()).     return jndi. }
false;public;0;8;;@Test public void testDisplay() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Currency is $").     template.sendBody("direct:start", new MyCurrency("$")).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testDisplayPrice() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Price is $123").     template.sendBodyAndHeader("direct:price", new MyCurrency("$"), "price", 123).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to("bean:myCurrencyBean?method=display( ${body} )").to("mock:result").     from("direct:price").to("bean:myCurrencyBean?method=displayPrice( ${body}, ${header.price} )").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:myCurrencyBean?method=display( ${body} )").to("mock:result").             from("direct:price").to("bean:myCurrencyBean?method=displayPrice( ${body}, ${header.price} )").to("mock:result").         }     }. }
