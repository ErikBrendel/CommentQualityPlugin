commented;modifiers;parameterAmount;loc;comment;code
false;public;0;29;;@Test public void testExchangeSentRecipient() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBodyAndHeader("direct:foo", "Hello World", "foo", "direct:cool,direct:start").     // wait for the message to be fully done using oneExchangeDone     assertMockEndpointsSatisfied().     assertTrue(oneExchangeDone.matchesMockWaitTime()).     // stop Camel to let all the events complete     context.stop().     assertTrue("Should be 11 or more, was: " + events.size(), events.size() >= 11).     // we run parallel so just assert we got 6 sending and 6 sent events     int sent = 0.     int sending = 0.     for (CamelEvent event : events) {         if (event instanceof ExchangeSendingEvent) {             sending++.         } else {             sent++.         }     }     assertTrue("There should be 5 or more, was " + sending, sending >= 5).     assertTrue("There should be 5 or more, was " + sent, sent >= 5). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").to("log:foo").to("direct:bar").to("mock:result").     from("direct:bar").delay(500).     from("direct:foo").recipientList(header("foo")).parallelProcessing().     from("direct:cool").delay(1000).     from("direct:tap").wireTap("log:foo").to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("log:foo").to("direct:bar").to("mock:result").             from("direct:bar").delay(500).             from("direct:foo").recipientList(header("foo")).parallelProcessing().             from("direct:cool").delay(1000).             from("direct:tap").wireTap("log:foo").to("mock:result").         }     }. }
