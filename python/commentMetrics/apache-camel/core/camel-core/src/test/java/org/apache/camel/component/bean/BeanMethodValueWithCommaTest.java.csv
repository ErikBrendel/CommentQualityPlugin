commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSingle() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Camela,b").     template.sendBody("direct:single", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testDouble() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Camelc,d").     template.sendBody("direct:double", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testHeader() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Camele,f").     template.sendBodyAndHeader("direct:header", "Camel", "myHeader", "e,f").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void test() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("SomeID0 0 10,11,12 * * ?").     template.sendBody("direct:cron", new MyCronBody("SomeID", "0 0 10,11,12 * * ?")).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyBean()).     return jndi. }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:single").to("bean:foo?method=bar(${body}, 'a,b')").to("mock:result").     from("direct:double").to("bean:foo?method=bar(${body}, \"c,d\")").to("mock:result").     from("direct:header").to("bean:foo?method=bar(${body}, ${header.myHeader})").to("mock:result").     from("direct:cron").to("bean:foo?method=bar(${body.id}, ${body.cron})").to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:single").to("bean:foo?method=bar(${body}, 'a,b')").to("mock:result").             from("direct:double").to("bean:foo?method=bar(${body}, \"c,d\")").to("mock:result").             from("direct:header").to("bean:foo?method=bar(${body}, ${header.myHeader})").to("mock:result").             from("direct:cron").to("bean:foo?method=bar(${body.id}, ${body.cron})").to("mock:result").         }     }. }
false;public;2;3;;public String bar(String body, String extra) {     return body + extra. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String getCron() {     return cron. }
