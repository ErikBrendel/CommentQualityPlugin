commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("mySplitterBean", new MySplitterBean()).     return jndi. }
false;public;0;10;;@Test public void testSplitBodyWithPojoBean() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.reset().     mock.expectedBodiesReceived("James", "Jonathan", "Hadrian", "Claus", "Willem").     template.sendBody("direct:body", "James,Jonathan,Hadrian,Claus,Willem").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testSplitMessageWithPojoBean() throws Exception {     String[] users = { "James", "Jonathan", "Hadrian", "Claus", "Willem" }.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.reset().     mock.expectedMessageCount(5).     template.sendBodyAndHeader("direct:message", "Test Body Message", "user", "James,Jonathan,Hadrian,Claus,Willem").     int i = 0.     for (Exchange exchange : mock.getExchanges()) {         assertEquals("We got a wrong body ", "Test Body Message", exchange.getIn().getBody()).         assertEquals("We got a wrong header ", users[i], exchange.getIn().getHeader("user")).         i++.     } }
false;public;0;15;;public void configure() {     // START SNIPPET: e1     from("direct:body").split().method("mySplitterBean", "splitBody").to("mock:result").     from("direct:message").split().method("mySplitterBean", "splitMessage").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;19;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:body").split().method("mySplitterBean", "splitBody").to("mock:result").             from("direct:message").split().method("mySplitterBean", "splitMessage").to("mock:result").         // END SNIPPET: e1         }     }. }
true;public;1;13;/**  * The split body method returns something that is iteratable such as a java.util.List.  *  * @param body the payload of the incoming message  * @return a list containing each part splitted  */ ;/**  * The split body method returns something that is iteratable such as a java.util.List.  *  * @param body the payload of the incoming message  * @return a list containing each part splitted  */ public List<String> splitBody(String body) {     // since this is based on an unit test you can of cause     // use different logic for splitting as Camel have out     // of the box support for splitting a String based on comma     // but this is for show and tell, since this is java code     // you have the full power how you like to split your messages     List<String> answer = new ArrayList<>().     String[] parts = body.split(",").     for (String part : parts) {         answer.add(part).     }     return answer. }
true;public;3;17;/**  * The split message method returns something that is iteratable such as a java.util.List.  *  * @param header the header of the incoming message with the name user  * @param body the payload of the incoming message  * @return a list containing each part splitted  */ ;/**  * The split message method returns something that is iteratable such as a java.util.List.  *  * @param header the header of the incoming message with the name user  * @param body the payload of the incoming message  * @return a list containing each part splitted  */ public List<Message> splitMessage(@Header(value = "user") String header, @Body String body, CamelContext camelContext) {     // we can leverage the Parameter Binding Annotations     // http://camel.apache.org/parameter-binding-annotations.html     // to access the message header and body at same time,     // then create the message that we want, splitter will     // take care rest of them.     // *NOTE* this feature requires Camel version >= 1.6.1     List<Message> answer = new ArrayList<>().     String[] parts = header.split(",").     for (String part : parts) {         DefaultMessage message = new DefaultMessage(camelContext).         message.setHeader("user", part).         message.setBody(body).         answer.add(message).     }     return answer. }
