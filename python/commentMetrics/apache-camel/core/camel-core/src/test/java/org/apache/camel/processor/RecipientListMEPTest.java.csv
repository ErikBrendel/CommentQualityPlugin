commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMEPInOnly() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World", "Hello Again").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World", "Bye World").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Hello Again").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testMEPInOutOnly() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World", "Hello Again").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World", "Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     out = template.requestBody("direct:start", "Hello Again", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").recipientList().constant("seda:foo?exchangePattern=InOut").to("mock:result").     from("seda:foo").to("mock:foo").transform().constant("Bye World"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").recipientList().constant("seda:foo?exchangePattern=InOut").to("mock:result").             from("seda:foo").to("mock:foo").transform().constant("Bye World").         }     }. }
