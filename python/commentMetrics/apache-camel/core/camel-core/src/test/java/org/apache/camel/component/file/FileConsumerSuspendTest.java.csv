commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/suspended").     super.setUp(). }
false;public;0;16;;@Test public void testConsumeSuspendFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/suspended", "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader("file://target/data/suspended", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // the route is suspended by the policy so we should only receive one     String[] files = new File("target/data/suspended/").list().     assertNotNull(files).     assertEquals("The file should exists", 1, files.length). }
false;public;0;7;;@Override public void configure() throws Exception {     MyPolicy myPolicy = new MyPolicy().     from("file://target/data/suspended?maxMessagesPerPoll=1&delete=true&initialDelay=0&delay=10").routePolicy(myPolicy).id("myRoute").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             MyPolicy myPolicy = new MyPolicy().             from("file://target/data/suspended?maxMessagesPerPoll=1&delete=true&initialDelay=0&delay=10").routePolicy(myPolicy).id("myRoute").convertBodyTo(String.class).to("mock:result").         }     }. }
false;public;2;10;;public void onExchangeDone(Route route, Exchange exchange) {     // only stop it at first run     if (counter++ == 0) {         try {             super.stopConsumer(route.getConsumer()).         } catch (Exception e) {             handleException(e).         }     } }
