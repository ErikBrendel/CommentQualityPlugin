commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testNoWhen() throws Exception {     MockEndpoint mock = getMockEndpoint(ERROR_QUEUE).     mock.expectedMessageCount(1).     try {         template.sendBody("direct:a", "Hello Camel").         fail("Should have thrown an Exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testWithWhen() throws Exception {     MockEndpoint mock = getMockEndpoint(ERROR_USER_QUEUE).     mock.expectedMessageCount(1).     try {         template.sendBodyAndHeader("direct:a", "Hello Camel", "user", "admin").         fail("Should have thrown an Exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String s = exchange.getIn().getBody(String.class).     if ("Hello Camel".equals(s)) {         throw new MyUserException("Forced for testing").     }     exchange.getOut().setBody("Hello World"). }
true;public;0;33;// START SNIPPET e1 ;// START SNIPPET e1 public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     // here we define our onException to catch MyUserException when     // there is a header[user] on the exchange that is not null     onException(MyUserException.class).onWhen(header("user").isNotNull()).maximumRedeliveries(1).redeliveryDelay(0).to(ERROR_USER_QUEUE).     // here we define onException to catch MyUserException as a kind     // of fallback when the above did not match.     // Notice: The order how we have defined these onException is     // important as Camel will resolve in the same order as they     // have been defined     onException(MyUserException.class).maximumRedeliveries(2).redeliveryDelay(0).to(ERROR_QUEUE).     // END SNIPPET e1     from("direct:a").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String s = exchange.getIn().getBody(String.class).             if ("Hello Camel".equals(s)) {                 throw new MyUserException("Forced for testing").             }             exchange.getOut().setBody("Hello World").         }     }).to("mock:result"). }
false;protected;0;38;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          // START SNIPPET e1         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             // here we define our onException to catch MyUserException when             // there is a header[user] on the exchange that is not null             onException(MyUserException.class).onWhen(header("user").isNotNull()).maximumRedeliveries(1).redeliveryDelay(0).to(ERROR_USER_QUEUE).             // here we define onException to catch MyUserException as a kind             // of fallback when the above did not match.             // Notice: The order how we have defined these onException is             // important as Camel will resolve in the same order as they             // have been defined             onException(MyUserException.class).maximumRedeliveries(2).redeliveryDelay(0).to(ERROR_QUEUE).             // END SNIPPET e1             from("direct:a").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String s = exchange.getIn().getBody(String.class).                     if ("Hello Camel".equals(s)) {                         throw new MyUserException("Forced for testing").                     }                     exchange.getOut().setBody("Hello World").                 }             }).to("mock:result").         }     }. }
