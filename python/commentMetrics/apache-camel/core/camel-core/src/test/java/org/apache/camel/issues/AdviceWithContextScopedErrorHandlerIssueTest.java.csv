commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("direct:bar").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")). }
false;public;0;18;;@Test public void testAdviceWith() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("route-a"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("direct:bar").skipSendToOriginalEndpoint().throwException(new IllegalArgumentException("Forced")).         }     }).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error")).     from("direct:start").routeId("route-a").to("direct:bar").     from("direct:bar").routeId("route-b").to("mock:bar"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error")).             from("direct:start").routeId("route-a").to("direct:bar").             from("direct:bar").routeId("route-b").to("mock:bar").         }     }. }
