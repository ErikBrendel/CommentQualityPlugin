commented;modifiers;parameterAmount;loc;comment;code
false;public;1;2;;public void setEndpoint(GenericFileEndpoint<Object> endpoint) { }
false;public;1;4;;public boolean deleteFile(String name) throws GenericFileOperationFailedException {     deleteCounter++.     return false. }
false;public;1;10;;public boolean existsFile(String name) throws GenericFileOperationFailedException {     existsCounter++.     // The file name should be normalized     if (FileUtil.normalizePath("target/data/foo/boom.txt").equals(name)) {         // test that we can newer delete this file         return true.     }     return existsCounter <= 1. }
false;public;2;3;;public boolean renameFile(String from, String to) throws GenericFileOperationFailedException {     return false. }
false;public;2;3;;public boolean buildDirectory(String directory, boolean absolute) throws GenericFileOperationFailedException {     return false. }
false;public;3;3;;public boolean retrieveFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {     return false. }
false;public;1;3;;public void releaseRetrievedFileResources(Exchange exchange) throws GenericFileOperationFailedException { // No-op }
false;public;3;3;;public boolean storeFile(String name, Exchange exchange, long size) throws GenericFileOperationFailedException {     return false. }
false;public;0;3;;public String getCurrentDirectory() throws GenericFileOperationFailedException {     return null. }
false;public;1;2;;public void changeCurrentDirectory(String path) throws GenericFileOperationFailedException { }
false;public;0;2;;public void changeToParentDirectory() throws GenericFileOperationFailedException { }
false;public;0;3;;public List<Object> listFiles() throws GenericFileOperationFailedException {     return null. }
false;public;1;3;;public List<Object> listFiles(String path) throws GenericFileOperationFailedException {     return null. }
false;public;0;18;;@Test public void testTroubleDeletingFile() throws Exception {     deleteCounter = 0.     existsCounter = 0.     @SuppressWarnings("unchecked")     GenericFileEndpoint<Object> endpoint = context.getEndpoint("file://target/data/foo", GenericFileEndpoint.class).     Exchange exchange = endpoint.createExchange().     GenericFile<Object> file = new GenericFile<>().     file.setAbsoluteFilePath("target/data/foo/me.txt").     GenericFileDeleteProcessStrategy<Object> strategy = new GenericFileDeleteProcessStrategy<>().     strategy.commit(new MyGenericFileOperations(), endpoint, exchange, file).     assertEquals("Should have tried to delete file 2 times", 2, deleteCounter).     assertEquals("Should have tried to delete file 2 times", 2, existsCounter). }
false;public;0;23;;@Test public void testCannotDeleteFile() throws Exception {     deleteCounter = 0.     existsCounter = 0.     @SuppressWarnings("unchecked")     GenericFileEndpoint<Object> endpoint = context.getEndpoint("file://target/data/foo", GenericFileEndpoint.class).     Exchange exchange = endpoint.createExchange().     GenericFile<Object> file = new GenericFile<>().     file.setAbsoluteFilePath("target/data/foo/boom.txt").     GenericFileDeleteProcessStrategy<Object> strategy = new GenericFileDeleteProcessStrategy<>().     try {         strategy.commit(new MyGenericFileOperations(), endpoint, exchange, file).         fail("Should have thrown an exception").     } catch (GenericFileOperationFailedException e) {     // expected     }     assertEquals("Should have tried to delete file 3 times", 3, deleteCounter).     assertEquals("Should have tried to delete file 3 times", 3, existsCounter). }
