commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDefaultConsumerBridgeErrorHandler() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello World").     getMockEndpoint("mock:dead").expectedBodiesReceived("Cannot process").     latch.countDown().     assertMockEndpointsSatisfied().     // should not attempt redelivery as we must be exhausted when bridging the error handler     assertEquals(0, redeliverCounter.get()).     Exception cause = getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertNotNull(cause).     assertEquals("Simulated", cause.getMessage()). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     redeliverCounter.incrementAndGet(). }
false;public;0;26;;@Override public void configure() throws Exception {     // register our custom component     getContext().addComponent("my", new MyComponent()).     // configure exception clause     onException(Exception.class).maximumRedeliveries(3).onRedelivery(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             redeliverCounter.incrementAndGet().         }     }).redeliveryDelay(0).handled(true).to("mock:dead").     // configure the consumer to bridge with the Camel error handler,     // so the above error handler will trigger if exceptions also     // occurs inside the consumer     from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // register our custom component             getContext().addComponent("my", new MyComponent()).             // configure exception clause             onException(Exception.class).maximumRedeliveries(3).onRedelivery(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     redeliverCounter.incrementAndGet().                 }             }).redeliveryDelay(0).handled(true).to("mock:dead").             // configure the consumer to bridge with the Camel error handler,             // so the above error handler will trigger if exceptions also             // occurs inside the consumer             from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result").         }     }. }
