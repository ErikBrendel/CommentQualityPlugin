commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testBeanInPipeline() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World from James").     mock.expectedHeaderReceived("from", "James").     template.sendBodyAndHeader("direct:input", "Hello World", "from", "Claus").     mock.assertIsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     from("direct:input").pipeline("bean:foo", "bean:bar?method=usingExchange", "bean:baz").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:input").pipeline("bean:foo", "bean:bar?method=usingExchange", "bean:baz").to("mock:result").         }     }. }
false;protected;0;7;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("foo", new FooBean()).     answer.bind("bar", new BarBean()).     answer.bind("baz", new BazBean()).     return answer. }
false;public;1;3;;public void onlyPlainBody(Object body) {     assertEquals("Hello World", body). }
false;public;1;3;;public void doNotUseMe(String body) {     fail("Should not invoce me"). }
false;public;1;7;;public void usingExchange(Exchange exchange) {     String body = exchange.getIn().getBody(String.class).     assertEquals("Hello World", body).     assertEquals("Claus", exchange.getIn().getHeader("from")).     exchange.getOut().setHeader("from", "James").     exchange.getOut().setBody("Hello World from James"). }
false;public;1;3;;public void doNotUseMe(String body) {     fail("Should not invoce me"). }
false;public;2;4;;public void withAnnotations(@Headers Map<String, Object> headers, @Body String body) {     assertEquals("Hello World from James", body).     assertEquals("James", headers.get("from")). }
