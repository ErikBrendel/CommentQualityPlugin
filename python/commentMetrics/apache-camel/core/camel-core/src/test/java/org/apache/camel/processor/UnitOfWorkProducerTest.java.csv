commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;public;1;3;;public boolean isEnabled(CamelEvent event) {     return event instanceof ExchangeCompletedEvent. }
false;protected;0;14;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }          public boolean isEnabled(CamelEvent event) {             return event instanceof ExchangeCompletedEvent.         }     }).     return context. }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     events.clear().     super.tearDown(). }
false;public;0;15;;@Test public void testSedaBasedUnitOfWorkProducer() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     // sending to seda should cause 2 completed events     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // there should be 2 completed events     // one for the producer template, and another for the Camel route     assertEquals(2, events.size()). }
false;public;0;15;;@Test public void testDirectBasedUnitOfWorkProducer() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     // sending to direct should cause 1 completed events     template.sendBody("direct:bar", "Hello World").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // there should be 1 completed events as direct endpoint will be like a direct method call     // and the UoW will be re-used     assertEquals(1, events.size()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("seda:foo").to("mock:result").     from("direct:bar").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").to("mock:result").             from("direct:bar").to("mock:result").         }     }. }
