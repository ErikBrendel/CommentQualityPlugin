commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testOnCompletionParallel() throws Exception {     getMockEndpoint("mock:input").expectedBodiesReceived("World").     getMockEndpoint("mock:after").expectedBodiesReceived("I was here Hello World").     String out = template.requestBody("seda:bar", "World", String.class).     assertEquals("Hello World", out).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("seda:bar").onCompletion().parallelProcessing().transform(body().prepend("I was here ")).to("mock:after").end().to("mock:input").transform(body().prepend("Hello ")).to("log:bar"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:bar").onCompletion().parallelProcessing().transform(body().prepend("I was here ")).to("mock:after").end().to("mock:input").transform(body().prepend("Hello ")).to("log:bar").         }     }. }
