commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSplitWithErrorIsHandled() throws Exception {     MockEndpoint error = getMockEndpoint("mock:error").     error.expectedBodiesReceived("James").     error.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isNotNull().     error.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).method("getMessage").isEqualTo("This is a dummy error James!").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hi Claus", "Hi Willem").     template.sendBody("direct:start", "Claus@James@Willem").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSplitOnlyWithErrorIsHandled() throws Exception {     MockEndpoint error = getMockEndpoint("mock:error").     error.expectedBodiesReceived("James").     error.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isNotNull().     error.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).method("getMessage").isEqualTo("This is a dummy error James!").     template.sendBody("direct:start", "James").     assertMockEndpointsSatisfied(). }
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("error", new GenerateError()).     return jndi. }
false;public;0;15;;public void configure() {     context.setTracing(true).     from("direct:start").split(body().tokenize("@")).doTry().to("bean:error").to("mock:result").doCatch(Exception.class).to("mock:error").doFinally().to("mock:foo").to("mock:bar").end(). }
false;protected;0;20;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             context.setTracing(true).             from("direct:start").split(body().tokenize("@")).doTry().to("bean:error").to("mock:result").doCatch(Exception.class).to("mock:error").doFinally().to("mock:foo").to("mock:bar").end().         }     }. }
false;public;1;6;;public String dummyException(String payload) throws Exception {     if (payload.equals("James")) {         throw new IllegalArgumentException("This is a dummy error James!").     }     return "Hi " + payload. }
