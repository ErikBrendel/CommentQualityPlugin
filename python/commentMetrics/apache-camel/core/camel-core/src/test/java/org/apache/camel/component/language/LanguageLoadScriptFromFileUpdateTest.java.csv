commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/script").     super.setUp(). }
false;public;0;11;;@Test public void testLanguage() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Bye World").     template.sendBody("direct:start", "World").     template.sendBodyAndHeader("file:target/data/script", "Bye ${body}", Exchange.FILE_NAME, "myscript.txt").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     // create script to start with     template.sendBodyAndHeader("file:target/data/script", "Hello ${body}", Exchange.FILE_NAME, "myscript.txt").     // START SNIPPET: e1     from("direct:start").to("language:simple:file:target/data/script/myscript.txt?contentCache=false").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // create script to start with             template.sendBodyAndHeader("file:target/data/script", "Hello ${body}", Exchange.FILE_NAME, "myscript.txt").             // START SNIPPET: e1             from("direct:start").to("language:simple:file:target/data/script/myscript.txt?contentCache=false").to("mock:result").         // END SNIPPET: e1         }     }. }
