commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSedaDefaultUnboundedQueueSize() throws Exception {     SedaEndpoint seda = context.getEndpoint("seda:foo", SedaEndpoint.class).     assertEquals(0, seda.getQueue().size()).     for (int i = 0. i < 1000. i++) {         template.sendBody("seda:foo", "Message " + i).     }     assertEquals(1000, seda.getQueue().size()). }
false;public;0;19;;@Test public void testSedaDefaultBoundedQueueSize() throws Exception {     SedaEndpoint seda = context.getEndpoint("seda:foo?size=500", SedaEndpoint.class).     assertEquals(0, seda.getQueue().size()).     for (int i = 0. i < 500. i++) {         template.sendBody("seda:foo", "Message " + i).     }     assertEquals(500, seda.getQueue().size()).     // sending one more hit the limit     try {         template.sendBody("seda:foo", "Message overflow").         fail("Should thrown an exception").     } catch (Exception e) {         assertIsInstanceOf(IllegalStateException.class, e.getCause()).     } }
