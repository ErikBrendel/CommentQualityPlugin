commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testCustomAggregationStrategy() throws Exception {     // START SNIPPET: e2     MockEndpoint result = getMockEndpoint("mock:result").     // we expect to find the two winners with the highest bid     result.expectedBodiesReceivedInAnyOrder("200", "150").     // then we sent all the message at once     template.sendBodyAndHeader("direct:start", "100", "id", "1").     template.sendBodyAndHeader("direct:start", "150", "id", "2").     template.sendBodyAndHeader("direct:start", "130", "id", "2").     template.sendBodyAndHeader("direct:start", "200", "id", "1").     template.sendBodyAndHeader("direct:start", "190", "id", "1").     assertMockEndpointsSatisfied(). // END SNIPPET: e2 }
false;public;0;11;;public void configure() throws Exception {     // START SNIPPET: e1     // our route is aggregating from the direct queue and sending the response to the mock     from("direct:start").aggregate(new MyAggregationStrategy()).header("id").completionTimeout(1000L).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // our route is aggregating from the direct queue and sending the response to the mock             from("direct:start").aggregate(new MyAggregationStrategy()).header("id").completionTimeout(1000L).to("mock:result").         // END SNIPPET: e1         }     }. }
false;public;2;10;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         // the first time we only have the new exchange so it wins the first round         return newExchange.     }     int oldPrice = oldExchange.getIn().getBody(Integer.class).     int newPrice = newExchange.getIn().getBody(Integer.class).     // return the "winner" that has the highest price     return newPrice > oldPrice ? newExchange : oldExchange. }
