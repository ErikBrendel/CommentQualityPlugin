commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;3;;protected String getLanguageName() {     return "file". }
false;public;0;11;;@Test public void testFileNoSingleExt() throws Exception {     assertExpression("${file:name}", "test" + File.separator + "bye.def.txt").     assertExpression("${file:name.noext}", "test" + File.separator + "bye").     assertExpression("${file:name.noext.single}", "test" + File.separator + "bye.def").     assertExpression("${file:name.ext}", "def.txt").     assertExpression("${file:name.ext.single}", "txt").     assertExpression("${file:onlyname.noext}", "bye").     assertExpression("${file:onlyname.noext.single}", "bye.def"). }
false;public;0;22;;public Exchange createExchange() {     // create the file     String uri = "file://target/data/filelanguage?fileExist=Override".     template.sendBodyAndHeader(uri, "Bye World", Exchange.FILE_NAME, "test/bye.def.txt").     // get the file handle     file = new File("target/data/filelanguage/test/bye.def.txt").     GenericFile<File> gf = FileConsumer.asGenericFile("target/data/filelanguage", file, null, false).     FileEndpoint endpoint = getMandatoryEndpoint(uri, FileEndpoint.class).     Exchange answer = endpoint.createExchange(gf).     endpoint.configureMessage(gf, answer.getIn()).     Calendar cal = Calendar.getInstance().     cal.set(1974, Calendar.APRIL, 20).     answer.getIn().setHeader("birthday", cal.getTime()).     cal.set(2008, Calendar.AUGUST, 8).     answer.getOut().setHeader("special", cal.getTime()).     return answer. }
