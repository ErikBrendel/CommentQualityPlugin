commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/premove").     super.setUp(). }
false;public;0;8;;@Test public void testPreMoveLastModified() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/premove", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/premove?preMove=work/work-${file:name}&initialDelay=0&delay=10&keepLastModified=true").process(new LastModifiedCheckerProcessor()).log("Got file ${file:name} modified=${file:modified}").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/premove?preMove=work/work-${file:name}&initialDelay=0&delay=10&keepLastModified=true").process(new LastModifiedCheckerProcessor()).log("Got file ${file:name} modified=${file:modified}").to("mock:result").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertTrue(exchange.getIn().getHeader(Exchange.FILE_LAST_MODIFIED, Long.class) > 0L).     assertTrue(exchange.getIn().getHeader(Exchange.FILE_LENGTH, Long.class) > 0L). }
