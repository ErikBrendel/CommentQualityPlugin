commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testCorrectRouteId() throws Exception {     getMockEndpoint("mock:foo").expectedHeaderReceived("foo", "foo").     getMockEndpoint("mock:bar").expectedHeaderReceived("bar", "bar").     getMockEndpoint("mock:baz").expectedHeaderReceived("baz", "baz").     template.requestBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:foo").routeId("foo").setHeader("foo").simple("${routeId}").to("mock:foo").to("seda:bar").to("mock:result").     from("seda:bar").routeId("bar").setHeader("bar").simple("${routeId}").to("mock:bar").to("direct:baz").     from("direct:baz").routeId("baz").setHeader("baz").simple("${routeId}").to("mock:baz"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").routeId("foo").setHeader("foo").simple("${routeId}").to("mock:foo").to("seda:bar").to("mock:result").             from("seda:bar").routeId("bar").setHeader("bar").simple("${routeId}").to("mock:bar").to("direct:baz").             from("direct:baz").routeId("baz").setHeader("baz").simple("${routeId}").to("mock:baz").         }     }. }
