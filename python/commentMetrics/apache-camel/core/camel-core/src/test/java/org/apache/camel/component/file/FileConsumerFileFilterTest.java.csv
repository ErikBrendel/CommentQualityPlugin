commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myFilter", new MyFileFilter<>()).     return jndi. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filefilter").     super.setUp(). }
false;public;0;11;;@Test public void testFilterFiles() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     template.sendBodyAndHeader("file:target/data/filefilter/", "This is a file to be filtered", Exchange.FILE_NAME, "skipme.txt").     mock.setResultWaitTime(100).     mock.assertIsSatisfied(). }
false;public;0;13;;@Test public void testFilterFilesWithARegularFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file:target/data/filefilter/", "This is a file to be filtered", Exchange.FILE_NAME, "skipme.txt").     template.sendBodyAndHeader("file:target/data/filefilter/", "Hello World", Exchange.FILE_NAME, "hello.txt").     mock.assertIsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").         }     }. }
false;public;1;8;;public boolean accept(GenericFile<T> file) {     // we want all directories     if (file.isDirectory()) {         return true.     }     // we dont accept any files starting with skip in the name     return !file.getFileName().startsWith("skip"). }
