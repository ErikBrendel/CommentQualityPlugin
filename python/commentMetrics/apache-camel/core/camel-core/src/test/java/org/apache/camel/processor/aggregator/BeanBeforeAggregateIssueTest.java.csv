commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testBeanBeforeAggregation() throws Exception {     NotifyBuilder notify = new NotifyBuilder(context).whenDone(3).create().     getMockEndpoint("mock:result").expectedBodiesReceived("A+B").     template.sendBody("seda:start", "A").     template.sendBody("seda:start", "B").     assertMockEndpointsSatisfied().     // wait for all exchanges to be done (2 input + 1 aggregated)     notify.matches(5, TimeUnit.SECONDS).     // should have confirmed     assertTrue("Should have confirmed", myRepo.isConfirm()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:start").bean(TestBean.class).aggregate(constant("true"), new BodyInAggregatingStrategy()).aggregationRepository(myRepo).completionSize(2).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").bean(TestBean.class).aggregate(constant("true"), new BodyInAggregatingStrategy()).aggregationRepository(myRepo).completionSize(2).to("mock:result").         }     }. }
false;public;1;3;;public String doNothing(String foo) {     return foo. }
false;public;2;6;;@Override public void confirm(CamelContext camelContext, String exchangeId) {     // test that confirm is invoked     super.confirm(camelContext, exchangeId).     confirm = true. }
false;public;0;3;;public boolean isConfirm() {     return confirm. }
