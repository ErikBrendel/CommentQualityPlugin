commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testIntercept() throws Exception {     MockEndpoint intercepted = getMockEndpoint("mock:intercepted").     intercepted.expectedBodiesReceived("Hello London").     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("Hello Paris").     template.sendBodyAndHeader("seda:a", "Hello London", "city", "London").     template.sendBodyAndHeader("seda:a", "Hello Paris", "city", "Paris").     intercepted.assertIsSatisfied().     result.assertIsSatisfied(). }
false;public;0;5;;public void configure() throws Exception {     // In Camel 1.4 proceed is default so we must use stop to not route it to the result mock     interceptFrom().when(header("city").isEqualTo("London")).to("mock:intercepted").stop().     from("seda:a").to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // In Camel 1.4 proceed is default so we must use stop to not route it to the result mock             interceptFrom().when(header("city").isEqualTo("London")).to("mock:intercepted").stop().             from("seda:a").to("mock:result").         }     }. }
