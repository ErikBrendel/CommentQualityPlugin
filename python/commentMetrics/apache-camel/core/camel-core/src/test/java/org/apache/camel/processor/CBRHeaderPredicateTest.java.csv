commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("cbrBean", new MyCBRBean()).     return jndi. }
false;public;0;13;;@Test public void testCBR() throws Exception {     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.expectedBodiesReceived("Hello Foo").     MockEndpoint bar = getMockEndpoint("mock:bar").     bar.expectedBodiesReceived("Hello Bar").     template.sendBodyAndHeader("direct:start", "Hello Foo", "foo", "bar").     template.sendBodyAndHeader("direct:start", "Hello Bar", "foo", "other").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").choice().when().method("cbrBean", "checkHeader").to("mock:foo").otherwise().to("mock:bar").end(). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when().method("cbrBean", "checkHeader").to("mock:foo").otherwise().to("mock:bar").end().         }     }. }
false;public;1;5;;public boolean checkHeader(Exchange exchange) {     Message inMsg = exchange.getIn().     String foo = (String) inMsg.getHeader("foo").     return foo.equals("bar"). }
