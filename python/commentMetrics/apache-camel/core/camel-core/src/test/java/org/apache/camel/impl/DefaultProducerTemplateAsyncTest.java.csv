commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testRequestAsync() throws Exception {     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello").     Future<Exchange> future = template.asyncSend("direct:start", exchange).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     Exchange result = future.get().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result.getIn().getBody()).     assertTrue("Should take longer than: " + delta, delta > 50).     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello"). }
false;public;0;19;;@Test public void testSendAsyncProcessor() throws Exception {     Future<Exchange> future = template.asyncSend("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello").         }     }).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     Exchange result = future.get().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result.getIn().getBody()).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;16;;@Test public void testRequestAsyncBody() throws Exception {     Future<Object> future = template.asyncRequestBody("direct:start", "Hello").     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     // we can use extract body to convert to expect body type     String result = template.extractFutureBody(future, String.class).     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;16;;@Test public void testRequestAsyncBodyType() throws Exception {     Future<String> future = template.asyncRequestBody("direct:start", "Hello", String.class).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     // or we can use parameter type in the requestBody method so the future handle know its type     String result = future.get().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;22;;@Test public void testRequestAsyncBodyAndHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", 123).     Future<Object> future = template.asyncRequestBodyAndHeader("direct:start", "Hello", "foo", 123).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     // we can use extract body to convert to expect body type     String result = template.extractFutureBody(future, String.class).     assertMockEndpointsSatisfied().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;22;;@Test public void testRequestAsyncBodyAndHeaderType() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", 123).     Future<String> future = template.asyncRequestBodyAndHeader("direct:start", "Hello", "foo", 123, String.class).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     // or we can use parameter type in the requestBody method so the future handle know its type     String result = future.get().     assertMockEndpointsSatisfied().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;26;;@Test public void testRequestAsyncBodyAndHeaders() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", 123).     mock.expectedHeaderReceived("bar", "cheese").     Map<String, Object> headers = new HashMap<>().     headers.put("foo", 123).     headers.put("bar", "cheese").     Future<Object> future = template.asyncRequestBodyAndHeaders("direct:start", "Hello", headers).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     // we can use extract body to convert to expect body type     String result = template.extractFutureBody(future, String.class).     assertMockEndpointsSatisfied().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;26;;@Test public void testRequestAsyncBodyAndHeadersType() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("foo", 123).     mock.expectedHeaderReceived("bar", "cheese").     Map<String, Object> headers = new HashMap<>().     headers.put("foo", 123).     headers.put("bar", "cheese").     Future<String> future = template.asyncRequestBodyAndHeaders("direct:start", "Hello", headers, String.class).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     // or we can use parameter type in the requestBody method so the future handle know its type     String result = future.get().     assertMockEndpointsSatisfied().     long delta = System.currentTimeMillis() - start.     assertEquals("Hello World", result).     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;22;;@Test public void testRequestAsyncErrorWhenProcessing() throws Exception {     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello").     Future<Object> future = template.asyncRequestBody("direct:error", exchange).     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     try {         template.extractFutureBody(future, Exchange.class).         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         assertEquals("Damn forced by unit test", e.getCause().getMessage()).     }     long delta = System.currentTimeMillis() - start.     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;0;19;;@Test public void testRequestAsyncBodyErrorWhenProcessing() throws Exception {     Future<Object> future = template.asyncRequestBody("direct:error", "Hello").     long start = System.currentTimeMillis().     // you can do other stuff     String echo = template.requestBody("direct:echo", "Hi", String.class).     assertEquals("HiHi", echo).     try {         template.extractFutureBody(future, String.class).         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         assertEquals("Damn forced by unit test", e.getCause().getMessage()).     }     long delta = System.currentTimeMillis() - start.     assertTrue("Should take longer than: " + delta, delta > 50). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("Hello World", exchange.getIn().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;27;;@Test public void testAsyncCallbackExchangeInOnly() throws Exception {     ORDER.set(0).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     final CountDownLatch latch = new CountDownLatch(1).     Exchange exchange = context.getEndpoint("direct:start").createExchange().     exchange.getIn().setBody("Hello").     template.asyncCallback("direct:start", exchange, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("Hello World", exchange.getIn().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertMockEndpointsSatisfied().     assertEquals(7, ORDER.get()). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("HelloHello", exchange.getOut().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;25;;@Test public void testAsyncCallbackExchangeInOut() throws Exception {     ORDER.set(0).     final CountDownLatch latch = new CountDownLatch(1).     Exchange exchange = context.getEndpoint("direct:start").createExchange().     exchange.getIn().setBody("Hello").     exchange.setPattern(ExchangePattern.InOut).     template.asyncCallback("direct:echo", exchange, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("HelloHello", exchange.getOut().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()). }
false;public;1;5;;@Override public void onDone(Exchange exchange) {     assertEquals("Hello World", exchange.getIn().getBody()).     ORDER.addAndGet(2). }
false;public;0;25;;@Test public void testAsyncCallbackExchangeInOnlyGetResult() throws Exception {     ORDER.set(0).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     Exchange exchange = context.getEndpoint("direct:start").createExchange().     exchange.getIn().setBody("Hello").     Future<Exchange> future = template.asyncCallback("direct:start", exchange, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("Hello World", exchange.getIn().getBody()).             ORDER.addAndGet(2).         }     }).     ORDER.addAndGet(1).     Exchange reply = future.get(10, TimeUnit.SECONDS).     ORDER.addAndGet(4).     assertMockEndpointsSatisfied().     assertEquals(7, ORDER.get()).     assertNotNull(reply). }
false;public;1;5;;@Override public void onDone(Exchange exchange) {     assertEquals("HelloHello", exchange.getOut().getBody()).     ORDER.addAndGet(2). }
false;public;0;24;;@Test public void testAsyncCallbackExchangeInOutGetResult() throws Exception {     ORDER.set(0).     Exchange exchange = context.getEndpoint("direct:start").createExchange().     exchange.getIn().setBody("Hello").     exchange.setPattern(ExchangePattern.InOut).     Future<Exchange> future = template.asyncCallback("direct:echo", exchange, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("HelloHello", exchange.getOut().getBody()).             ORDER.addAndGet(2).         }     }).     ORDER.addAndGet(1).     Exchange reply = future.get(10, TimeUnit.SECONDS).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()).     assertNotNull(reply).     assertEquals("HelloHello", reply.getOut().getBody()). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("Hello World", exchange.getIn().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;24;;@Test public void testAsyncCallbackBodyInOnly() throws Exception {     ORDER.set(0).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     final CountDownLatch latch = new CountDownLatch(1).     template.asyncCallbackSendBody("direct:start", "Hello", new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("Hello World", exchange.getIn().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertMockEndpointsSatisfied().     assertEquals(7, ORDER.get()). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("HelloHello", exchange.getOut().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;21;;@Test public void testAsyncCallbackBodyInOut() throws Exception {     ORDER.set(0).     final CountDownLatch latch = new CountDownLatch(1).     template.asyncCallbackRequestBody("direct:echo", "Hello", new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("HelloHello", exchange.getOut().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()). }
false;public;1;5;;@Override public void onDone(Exchange exchange) {     assertEquals("Hello World", exchange.getIn().getBody()).     ORDER.addAndGet(2). }
false;public;0;23;;@Test public void testAsyncCallbackBodyInOnlyGetResult() throws Exception {     ORDER.set(0).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     Future<Object> future = template.asyncCallbackSendBody("direct:start", "Hello", new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("Hello World", exchange.getIn().getBody()).             ORDER.addAndGet(2).         }     }).     ORDER.addAndGet(1).     Object reply = future.get(10, TimeUnit.SECONDS).     ORDER.addAndGet(4).     assertMockEndpointsSatisfied().     assertEquals(7, ORDER.get()).     // no reply when in only     assertEquals(null, reply). }
false;public;1;5;;@Override public void onDone(Exchange exchange) {     assertEquals("HelloHello", exchange.getOut().getBody()).     ORDER.addAndGet(2). }
false;public;0;19;;@Test public void testAsyncCallbackBodyInOutGetResult() throws Exception {     ORDER.set(0).     Future<Object> future = template.asyncCallbackRequestBody("direct:echo", "Hello", new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("HelloHello", exchange.getOut().getBody()).             ORDER.addAndGet(2).         }     }).     ORDER.addAndGet(1).     Object reply = future.get(10, TimeUnit.SECONDS).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()).     assertEquals("HelloHello", reply). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello"). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("Hello World", exchange.getIn().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;28;;@Test public void testAsyncCallbackInOnlyProcessor() throws Exception {     ORDER.set(0).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     final CountDownLatch latch = new CountDownLatch(1).     template.asyncCallback("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello").         }     }, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("Hello World", exchange.getIn().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertMockEndpointsSatisfied().     assertEquals(7, ORDER.get()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello").     exchange.setPattern(ExchangePattern.InOut). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("HelloHello", exchange.getOut().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;26;;@Test public void testAsyncCallbackInOutProcessor() throws Exception {     ORDER.set(0).     final CountDownLatch latch = new CountDownLatch(1).     template.asyncCallback("direct:echo", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello").             exchange.setPattern(ExchangePattern.InOut).         }     }, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("HelloHello", exchange.getOut().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Bye").     exchange.setPattern(ExchangePattern.InOut). }
false;public;1;6;;@Override public void onDone(Exchange exchange) {     assertEquals("ByeBye", exchange.getOut().getBody()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;26;;@Test public void testAsyncCallbackThreadsInOutProcessor() throws Exception {     ORDER.set(0).     final CountDownLatch latch = new CountDownLatch(1).     template.asyncCallback("direct:threads", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Bye").             exchange.setPattern(ExchangePattern.InOut).         }     }, new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             assertEquals("ByeBye", exchange.getOut().getBody()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()). }
false;public;1;6;;@Override public void onFailure(Exchange exchange) {     assertEquals("Damn forced by unit test", exchange.getException().getMessage()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;24;;@Test public void testAsyncCallbackExchangeInOnlyWithFailure() throws Exception {     ORDER.set(0).     final CountDownLatch latch = new CountDownLatch(1).     Exchange exchange = context.getEndpoint("direct:error").createExchange().     exchange.getIn().setBody("Hello").     template.asyncCallback("direct:error", exchange, new SynchronizationAdapter() {          @Override         public void onFailure(Exchange exchange) {             assertEquals("Damn forced by unit test", exchange.getException().getMessage()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()). }
false;public;1;6;;@Override public void onFailure(Exchange exchange) {     assertEquals("Damn forced by unit test", exchange.getException().getMessage()).     ORDER.addAndGet(2).     latch.countDown(). }
false;public;0;25;;@Test public void testAsyncCallbackExchangeInOutWithFailure() throws Exception {     ORDER.set(0).     final CountDownLatch latch = new CountDownLatch(1).     Exchange exchange = context.getEndpoint("direct:error").createExchange().     exchange.getIn().setBody("Hello").     exchange.setPattern(ExchangePattern.InOut).     template.asyncCallback("direct:error", exchange, new SynchronizationAdapter() {          @Override         public void onFailure(Exchange exchange) {             assertEquals("Damn forced by unit test", exchange.getException().getMessage()).             ORDER.addAndGet(2).             latch.countDown().         }     }).     ORDER.addAndGet(1).     assertTrue(latch.await(10, TimeUnit.SECONDS)).     ORDER.addAndGet(4).     assertEquals(7, ORDER.get()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Damn forced by unit test"). }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:start").delay(200).asyncDelayed().transform(body().append(" World")).to("mock:result").     from("direct:error").delay(200).asyncDelayed().process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Damn forced by unit test").         }     }).     from("direct:echo").transform(body().append(body())).     from("direct:threads").threads(5).transform(body().append(body())). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").delay(200).asyncDelayed().transform(body().append(" World")).to("mock:result").             from("direct:error").delay(200).asyncDelayed().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("Damn forced by unit test").                 }             }).             from("direct:echo").transform(body().append(body())).             from("direct:threads").threads(5).transform(body().append(body())).         }     }. }
