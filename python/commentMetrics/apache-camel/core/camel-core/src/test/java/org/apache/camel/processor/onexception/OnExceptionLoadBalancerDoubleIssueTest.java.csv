commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testNotDouble() throws Exception {     // there should only be 3 processors on the load balancer     getMockEndpoint("mock:error").expectedBodiesReceived("A", "D", "G").     getMockEndpoint("mock:error2").expectedBodiesReceived("B", "E").     getMockEndpoint("mock:error3").expectedBodiesReceived("C", "F").     template.sendBody("direct:foo", "A").     template.sendBody("direct:foo", "B").     template.sendBody("direct:bar", "C").     template.sendBody("direct:bar", "D").     template.sendBody("direct:foo", "E").     template.sendBody("direct:bar", "F").     template.sendBody("direct:foo", "G").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).loadBalance().roundRobin().id("round").to("mock:error", "mock:error2", "mock:error3").end().     from("direct:foo").throwException(new IllegalArgumentException("Forced")).     from("direct:bar").throwException(new IllegalArgumentException("Also Forced")). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).loadBalance().roundRobin().id("round").to("mock:error", "mock:error2", "mock:error3").end().             from("direct:foo").throwException(new IllegalArgumentException("Forced")).             from("direct:bar").throwException(new IllegalArgumentException("Also Forced")).         }     }. }
