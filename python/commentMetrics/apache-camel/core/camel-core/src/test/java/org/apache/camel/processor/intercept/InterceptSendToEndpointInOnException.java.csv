commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Override public void configure() throws Exception {     onException(IOException.class).handled(true).to("mock:io").     interceptSendToEndpoint("mock:io").skipSendToOriginalEndpoint().to("mock:intercepted").     from("direct:start").to("mock:foo").to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IOException.class).handled(true).to("mock:io").             interceptSendToEndpoint("mock:io").skipSendToOriginalEndpoint().to("mock:intercepted").             from("direct:start").to("mock:foo").to("mock:result").         }     }. }
false;public;0;11;;public void testOk() throws Exception {     getMockEndpoint("mock:io").expectedMessageCount(0).     getMockEndpoint("mock:intercepted").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Forced"). }
false;public;0;29;;public void testAnotherError() throws Exception {     getMockEndpoint("mock:io").expectedMessageCount(0).     getMockEndpoint("mock:intercepted").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Forced").         }     }).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).     }     try {         template.sendBody("direct:start", "Bye World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).     }     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IOException("Forced"). }
false;public;0;18;;public void testIOError() throws Exception {     getMockEndpoint("mock:io").expectedMessageCount(0).     getMockEndpoint("mock:intercepted").expectedMessageCount(2).     getMockEndpoint("mock:foo").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint foo = getMockEndpoint("mock:foo").     foo.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IOException("Forced").         }     }).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
