commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testConfigurationOnEndpoint() throws Exception {     String endpointUri = "xslt:xslt/staff/staff.xsl?uriResolverFactory=#uriResolverFactory".     String directStart = "direct:start".     // ensure that the URI resolver factory is not set on the component by     // the method "testConfigurationOnComponent"     registry.getContext().unbind("xslt").     execute(endpointUri, directStart). }
false;public;0;12;;@Test public void testConfigurationOnComponent() throws Exception {     XsltComponent xsltComponent = new XsltComponent().     xsltComponent.setUriResolverFactory(new CustomXsltUriResolverFactory()).     registry.bind("xslt", xsltComponent).     String endpointUri = "xslt:xslt/staff/staff.xsl".     String directStart = "direct:startComponent".     execute(endpointUri, directStart). }
false;;2;19;;void execute(String endpointUri, String directStart) throws InterruptedException {     InputStream payloud = XsltUriResolverFactoryTest.class.getClassLoader().getResourceAsStream("xslt/staff/staff.xml").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     sendBody(directStart, payloud).     // wait until endpoint is resolved     await().atMost(1, TimeUnit.SECONDS).until(() -> resolveMandatoryEndpoint(endpointUri, XsltEndpoint.class) != null).     assertMockEndpointsSatisfied().     XsltEndpoint xsltEndpoint = resolveMandatoryEndpoint(endpointUri, XsltEndpoint.class).     assertNotNull(xsltEndpoint).     CustomXsltUriResolver resolver = (CustomXsltUriResolver) xsltEndpoint.getUriResolver().     checkResourceUri(resolver.resolvedResourceUris, "xslt/staff/staff.xsl").     checkResourceUri(resolver.resolvedResourceUris, "../common/staff_template.xsl"). }
false;public;0;7;;@Override public void configure() throws Exception {     //      from("direct:start").setHeader("xslt_file", //      new ConstantExpression("xslt/staff/staff.xsl")).recipientList(//      new SimpleExpression("xslt:${header.xslt_file}?uriResolverFactory=#uriResolverFactory")).to("mock:result"). }
false;public;0;7;;@Override public void configure() throws Exception {     //      from("direct:startComponent").setHeader("xslt_file", //      new ConstantExpression("xslt/staff/staff.xsl")).recipientList(//      new SimpleExpression("xslt:${header.xslt_file}")).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     return new RouteBuilder[] { new RouteBuilder() {          @Override         public void configure() throws Exception {             //              from("direct:start").setHeader("xslt_file", //              new ConstantExpression("xslt/staff/staff.xsl")).recipientList(//              new SimpleExpression("xslt:${header.xslt_file}?uriResolverFactory=#uriResolverFactory")).to("mock:result").         }     }, new RouteBuilder() {          @Override         public void configure() throws Exception {             //              from("direct:startComponent").setHeader("xslt_file", //              new ConstantExpression("xslt/staff/staff.xsl")).recipientList(//              new SimpleExpression("xslt:${header.xslt_file}")).to("mock:result").         }     } }. }
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     registry = super.createRegistry().     registry.bind("uriResolverFactory", new CustomXsltUriResolverFactory()).     return registry. }
false;;2;3;;void checkResourceUri(Set<String> uris, String resourceUri) {     Assert.assertTrue("Missing resource uri " + resourceUri + " in resolved resource URI set", uris.contains(resourceUri)). }
false;public;2;4;;@Override public URIResolver createUriResolver(CamelContext camelContext, String resourceUri) {     return new CustomXsltUriResolver(camelContext, resourceUri). }
false;public;2;5;;public Source resolve(String href, String base) throws TransformerException {     Source result = super.resolve(href, base).     resolvedResourceUris.add(href).     return result. }
