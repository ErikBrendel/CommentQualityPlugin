commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/myfile").     super.setUp(). }
false;public;0;11;;@Test public void testNewFileConsumer() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/myfile", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     await("postPollCheck invocation").atMost(1, TimeUnit.SECONDS).until(myFile::isPost). }
false;public;0;10;;@Override public void configure() throws Exception {     myFile = new MyFileEndpoint().     myFile.setCamelContext(context).     myFile.setFile(new File("target/data/myfile")).     myFile.setDelay(10).     myFile.setInitialDelay(0).     from(myFile).to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             myFile = new MyFileEndpoint().             myFile.setCamelContext(context).             myFile.setFile(new File("target/data/myfile")).             myFile.setDelay(10).             myFile.setInitialDelay(0).             from(myFile).to("mock:result").         }     }. }
false;protected;1;4;;@Override protected void postPollCheck(int polledMessages) {     post = true. }
false;protected;2;8;;protected FileConsumer newFileConsumer(Processor processor, GenericFileOperations<File> operations) {     return new FileConsumer(this, processor, operations, createGenericFileStrategy()) {          @Override         protected void postPollCheck(int polledMessages) {             post = true.         }     }. }
false;public;0;3;;public boolean isPost() {     return post. }
