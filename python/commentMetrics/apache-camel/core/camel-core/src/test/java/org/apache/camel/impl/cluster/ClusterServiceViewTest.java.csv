commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testViewEquality() throws Exception {     TestClusterService service = new TestClusterService(UUID.randomUUID().toString()).     TestClusterView view1 = service.getView("ns1").unwrap(TestClusterView.class).     TestClusterView view2 = service.getView("ns1").unwrap(TestClusterView.class).     TestClusterView view3 = service.getView("ns2").unwrap(TestClusterView.class).     Assert.assertEquals(view1, view2).     Assert.assertNotEquals(view1, view3). }
false;public;0;46;;@Test public void testViewReferences() throws Exception {     TestClusterService service = new TestClusterService(UUID.randomUUID().toString()).     service.start().     TestClusterView view1 = service.getView("ns1").unwrap(TestClusterView.class).     TestClusterView view2 = service.getView("ns1").unwrap(TestClusterView.class).     TestClusterView view3 = service.getView("ns2").unwrap(TestClusterView.class).     Assert.assertEquals(ServiceStatus.Started, view1.getStatus()).     Assert.assertEquals(ServiceStatus.Started, view2.getStatus()).     Assert.assertEquals(ServiceStatus.Started, view3.getStatus()).     service.releaseView(view1).     Assert.assertEquals(ServiceStatus.Started, view1.getStatus()).     Assert.assertEquals(ServiceStatus.Started, view2.getStatus()).     Assert.assertEquals(ServiceStatus.Started, view3.getStatus()).     service.releaseView(view2).     Assert.assertEquals(ServiceStatus.Stopped, view1.getStatus()).     Assert.assertEquals(ServiceStatus.Stopped, view2.getStatus()).     Assert.assertEquals(ServiceStatus.Started, view3.getStatus()).     service.releaseView(view3).     TestClusterView newView1 = service.getView("ns1").unwrap(TestClusterView.class).     TestClusterView newView2 = service.getView("ns1").unwrap(TestClusterView.class).     Assert.assertEquals(newView1, newView2).     Assert.assertEquals(view1, newView1).     Assert.assertEquals(view1, newView2).     Assert.assertEquals(ServiceStatus.Started, newView1.getStatus()).     Assert.assertEquals(ServiceStatus.Started, newView2.getStatus()).     Assert.assertEquals(ServiceStatus.Stopped, view3.getStatus()).     service.stop().     Assert.assertEquals(ServiceStatus.Stopped, view1.getStatus()).     Assert.assertEquals(ServiceStatus.Stopped, view2.getStatus()).     Assert.assertEquals(ServiceStatus.Stopped, view3.getStatus()).     Assert.assertEquals(ServiceStatus.Stopped, newView1.getStatus()).     Assert.assertEquals(ServiceStatus.Stopped, newView2.getStatus()). }
false;public;0;26;;@Test public void testViewForceOperations() throws Exception {     TestClusterService service = new TestClusterService(UUID.randomUUID().toString()).     TestClusterView view = service.getView("ns1").unwrap(TestClusterView.class).     Assert.assertEquals(ServiceStatus.Stopped, view.getStatus()).     // This should not start the view as the service has not yet started.     service.startView(view.getNamespace()).     Assert.assertEquals(ServiceStatus.Stopped, view.getStatus()).     // This should start the view.     service.start().     Assert.assertEquals(ServiceStatus.Started, view.getStatus()).     service.stopView(view.getNamespace()).     Assert.assertEquals(ServiceStatus.Stopped, view.getStatus()).     service.startView(view.getNamespace()).     Assert.assertEquals(ServiceStatus.Started, view.getStatus()).     service.releaseView(view).     Assert.assertEquals(ServiceStatus.Stopped, view.getStatus()). }
false;public;0;24;;@Test public void testMultipleViewListeners() throws Exception {     final TestClusterService service = new TestClusterService(UUID.randomUUID().toString()).     final TestClusterView view = service.getView("ns1").unwrap(TestClusterView.class).     final int events = 1 + new Random().nextInt(10).     final Set<Integer> results = new HashSet<>().     final CountDownLatch latch = new CountDownLatch(events).     IntStream.range(0, events).forEach(i -> view.addEventListener((CamelClusterEventListener.Leadership) (v, l) -> {         results.add(i).         latch.countDown().     })).     service.start().     view.setLeader(true).     latch.await(10, TimeUnit.SECONDS).     IntStream.range(0, events).forEach(i -> Assert.assertTrue(results.contains(i))). }
false;public;0;31;;@Test public void testLateViewListeners() throws Exception {     final TestClusterService service = new TestClusterService(UUID.randomUUID().toString()).     final TestClusterView view = service.getView("ns1").unwrap(TestClusterView.class).     final int events = 1 + new Random().nextInt(10).     final Set<Integer> results = new HashSet<>().     final CountDownLatch latch = new CountDownLatch(events * 2).     IntStream.range(0, events).forEach(i -> view.addEventListener((CamelClusterEventListener.Leadership) (v, l) -> {         results.add(i).         latch.countDown().     })).     service.start().     view.setLeader(true).     IntStream.range(events, events * 2).forEach(i -> view.addEventListener((CamelClusterEventListener.Leadership) (v, l) -> {         results.add(i).         latch.countDown().     })).     latch.await(10, TimeUnit.SECONDS).     IntStream.range(0, events * 2).forEach(i -> Assert.assertTrue(results.contains(i))). }
false;public;0;6;;@Override public Optional<CamelClusterMember> getLeader() {     return leader ? Optional.of(getLocalMember()) : Optional.empty(). }
false;public;0;4;;@Override public boolean isLeader() {     return leader. }
false;public;0;4;;@Override public boolean isLocal() {     return true. }
false;public;0;4;;@Override public String getId() {     return getClusterService().getId(). }
false;public;0;19;;@Override public CamelClusterMember getLocalMember() {     return new CamelClusterMember() {          @Override         public boolean isLeader() {             return leader.         }          @Override         public boolean isLocal() {             return true.         }          @Override         public String getId() {             return getClusterService().getId().         }     }. }
false;public;0;4;;@Override public List<CamelClusterMember> getMembers() {     return Collections.emptyList(). }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;3;;@Override protected void doStop() throws Exception { }
false;public;0;3;;public boolean isLeader() {     return leader. }
false;public;1;7;;public void setLeader(boolean leader) {     this.leader = leader.     if (isRunAllowed()) {         fireLeadershipChangedEvent(getLeader()).     } }
false;protected;1;4;;@Override protected TestClusterView createView(String namespace) throws Exception {     return new TestClusterView(this, namespace). }
