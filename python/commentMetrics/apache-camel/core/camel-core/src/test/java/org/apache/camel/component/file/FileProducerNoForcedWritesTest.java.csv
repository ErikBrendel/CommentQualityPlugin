commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/file").     super.setUp(). }
false;public;0;15;;@Test public void testNoForcedWrites() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file://target/data/file", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     assertFileExists("target/data/file/output.txt").     assertEquals("Hello World", context.getTypeConverter().convertTo(String.class, new File("target/data/file/output.txt"))).     assertFileExists("target/data/file/output2.txt").     assertEquals("Hello World", context.getTypeConverter().convertTo(String.class, new File("target/data/file/output2.txt"))). }
false;public;0;8;;@Override public void configure() throws Exception {     from("file:target/data/file?initialDelay=0&delay=10&noop=true").multicast().to("file:target/data/file/?fileName=output.txt&forceWrites=false", "file:target/data/file/?fileName=output2.txt&charset=iso-8859-1&forceWrites=false").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/file?initialDelay=0&delay=10&noop=true").multicast().to("file:target/data/file/?fileName=output.txt&forceWrites=false", "file:target/data/file/?fileName=output2.txt&charset=iso-8859-1&forceWrites=false").to("mock:result").         }     }. }
