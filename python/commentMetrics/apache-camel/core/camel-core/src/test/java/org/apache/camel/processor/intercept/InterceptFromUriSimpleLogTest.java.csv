commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testInterceptLog() throws Exception {     getMockEndpoint("mock:first").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("seda:foo", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;public void configure() throws Exception {     // START SNIPPET: e1     // only trigger when incoming from seda:bar endpoint     interceptFrom("seda:bar").to("mock:bar").     // and here we have a couple of routes     from("direct:start").to("mock:first").to("seda:bar").     from("seda:bar").to("mock:result").     from("seda:foo").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;17;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             // START SNIPPET: e1             // only trigger when incoming from seda:bar endpoint             interceptFrom("seda:bar").to("mock:bar").             // and here we have a couple of routes             from("direct:start").to("mock:first").to("seda:bar").             from("seda:bar").to("mock:result").             from("seda:foo").to("mock:result").         // END SNIPPET: e1         }     }. }
