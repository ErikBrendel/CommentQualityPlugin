commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testOk() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:foo").message(0).header("MyRoutePolicy").isEqualTo(true).     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").message(0).header("MyRoutePolicy").isEqualTo(true).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // remove the route policy so we can test without it     getOriginalRoute().setRoutePolicies(null). }
false;public;0;20;;@Test public void testAdviceRoutePolicyRemoved() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // remove the route policy so we can test without it             getOriginalRoute().setRoutePolicies(null).         }     }).     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:foo").message(0).header("MyRoutePolicy").isNull().     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").message(0).header("MyRoutePolicy").isNull().     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").routePolicy(new MyRoutePolicy()).to("mock:foo").to("mock:bar"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routePolicy(new MyRoutePolicy()).to("mock:foo").to("mock:bar").         }     }. }
false;public;2;4;;@Override public void onExchangeBegin(Route route, Exchange exchange) {     exchange.getIn().setHeader("MyRoutePolicy", true). }
