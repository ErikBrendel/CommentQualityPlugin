commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testA() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:a").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedBodiesReceived("").     template.sendBody("direct:a", "").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedMessageCount(1).     mock.message(0).body().isNull().     template.sendBody("direct:a", null).     assertMockEndpointsSatisfied(). }
false;public;0;20;;@Test public void testB() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:b").     mock.expectedBodiesReceived("Bye World").     template.sendBody("direct:b", "Hello World").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedMessageCount(1).     mock.message(0).body().isNull().     template.sendBody("direct:b", "").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedMessageCount(1).     mock.message(0).body().isNull().     template.sendBody("direct:b", null).     assertMockEndpointsSatisfied(). }
false;public;0;19;;@Test public void testC() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:c").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:c", "Hello World").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedBodiesReceived("").     template.sendBody("direct:c", "").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedMessageCount(1).     mock.message(0).body().isNull().     template.sendBody("direct:c", null).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:a").bean(BeanInvokeTest.class, "doSomething").to("mock:a").     from("direct:b").bean(BeanInvokeTest.class, "changeSomething").to("mock:b").     from("direct:c").bean(BeanInvokeTest.class, "doNothing").to("mock:c"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").bean(BeanInvokeTest.class, "doSomething").to("mock:a").             from("direct:b").bean(BeanInvokeTest.class, "changeSomething").to("mock:b").             from("direct:c").bean(BeanInvokeTest.class, "doNothing").to("mock:c").         }     }. }
false;public;1;3;;public String doSomething(String s) {     return s. }
false;public;1;6;;public String changeSomething(String s) {     if ("Hello World".equals(s)) {         return "Bye World".     }     return null. }
false;public;1;2;;public void doNothing(String s) { }
