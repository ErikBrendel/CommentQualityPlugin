commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testOriginalInBodyIsFile() throws Exception {     MockEndpoint dead = getMockEndpoint("mock:dead").     dead.expectedMessageCount(1).     dead.message(0).body().isInstanceOf(GenericFile.class).     dead.message(0).body(String.class).isEqualTo("Hello").     template.sendBodyAndHeader("file://target/data/originalexchange", "Hello", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/originalexchange").     super.setUp(). }
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").disableRedelivery().logStackTrace(false).useOriginalMessage()).     from("file://target/data/originalexchange?initialDelay=0&delay=10&noop=true").transform(body().append(" World")).process(new MyThrowProcessor()). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").disableRedelivery().logStackTrace(false).useOriginalMessage()).             from("file://target/data/originalexchange?initialDelay=0&delay=10&noop=true").transform(body().append(" World")).process(new MyThrowProcessor()).         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("Hello World", exchange.getIn().getBody(String.class)).     throw new IllegalArgumentException("Forced"). }
