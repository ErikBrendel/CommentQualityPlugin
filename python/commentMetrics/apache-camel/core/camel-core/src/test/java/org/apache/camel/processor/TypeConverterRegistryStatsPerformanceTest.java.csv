commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.setTypeConverterStatisticsEnabled(true).     return context. }
false;public;0;28;;@Test public void testTransform() throws Exception {     long noop = context.getTypeConverterRegistry().getStatistics().getNoopCounter().     long attempt = context.getTypeConverterRegistry().getStatistics().getAttemptCounter().     long failed = context.getTypeConverterRegistry().getStatistics().getFailedCounter().     long hit = context.getTypeConverterRegistry().getStatistics().getHitCounter().     long miss = context.getTypeConverterRegistry().getStatistics().getMissCounter().     getMockEndpoint("mock:result").expectedMessageCount(size).     for (int i = 0. i < size. i++) {         template.sendBody("direct:start", "World").     }     assertMockEndpointsSatisfied().     long noop2 = context.getTypeConverterRegistry().getStatistics().getNoopCounter().     long attempt2 = context.getTypeConverterRegistry().getStatistics().getAttemptCounter().     long failed2 = context.getTypeConverterRegistry().getStatistics().getFailedCounter().     long hit2 = context.getTypeConverterRegistry().getStatistics().getHitCounter().     long miss2 = context.getTypeConverterRegistry().getStatistics().getMissCounter().     log.info("Noop: before={}, after={}, delta={}", noop, noop2, noop2 - noop).     log.info("Attempt: before={}, after={}, delta={}", attempt, attempt2, attempt2 - attempt).     log.info("Failed: before={}, after={}, delta={}", failed, failed2, failed2 - failed).     log.info("Hit: before={}, after={}, delta={}", hit, hit2, hit2 - hit).     log.info("Miss: before={}, after={}, delta={}", miss, miss2, miss2 - miss). }
false;public;0;6;;public void configure() {     from("direct:start").transform().method(TypeConverterRegistryStatsPerformanceTest.class, "transformMe").bean(TypeConverterRegistryStatsPerformanceTest.class, "transformMeAlso").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").transform().method(TypeConverterRegistryStatsPerformanceTest.class, "transformMe").bean(TypeConverterRegistryStatsPerformanceTest.class, "transformMeAlso").to("mock:result").         }     }. }
false;public;1;3;;public String transformMe(String in) {     return "Hello " + in. }
false;public;1;3;;public String transformMeAlso(String in) {     return "Bye " + in. }
