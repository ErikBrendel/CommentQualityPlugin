commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     events.clear().     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;3;;public void notify(CamelEvent event) throws Exception {     events.add(event). }
false;protected;0;6;;@Override protected void doStart() throws Exception {     setIgnoreCamelContextEvents(true).     setIgnoreRouteEvents(true).     setIgnoreServiceEvents(true). }
false;protected;0;17;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             events.add(event).         }          @Override         protected void doStart() throws Exception {             setIgnoreCamelContextEvents(true).             setIgnoreRouteEvents(true).             setIgnoreServiceEvents(true).         }     }).     return context. }
false;public;0;6;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(4).redeliveryDelay(0)).     from("direct:start").throwException(new IllegalArgumentException("Damn")). }
false;public;0;36;;@Test public void testExchangeRedeliverySync() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(4).redeliveryDelay(0)).             from("direct:start").throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertTrue(oneExchangeDone.matchesMockWaitTime()).     assertEquals(12, events.size()).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(0)).     assertIsInstanceOf(ExchangeCreatedEvent.class, events.get(1)).     ExchangeRedeliveryEvent e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(2)).     assertEquals(1, e.getAttempt()).     e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(3)).     assertEquals(2, e.getAttempt()).     e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(4)).     assertEquals(3, e.getAttempt()).     e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(5)).     assertEquals(4, e.getAttempt()).     assertIsInstanceOf(ExchangeFailureHandlingEvent.class, events.get(6)).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(7)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(8)).     assertIsInstanceOf(ExchangeFailureHandledEvent.class, events.get(9)).     assertIsInstanceOf(ExchangeCompletedEvent.class, events.get(10)).     assertIsInstanceOf(ExchangeSentEvent.class, events.get(11)). }
false;public;0;6;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(4).asyncDelayedRedelivery().redeliveryDelay(10)).     from("direct:start").throwException(new IllegalArgumentException("Damn")). }
false;public;0;32;;@Test public void testExchangeRedeliveryAsync() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").maximumRedeliveries(4).asyncDelayedRedelivery().redeliveryDelay(10)).             from("direct:start").throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:dead").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertTrue(oneExchangeDone.matchesMockWaitTime()).     assertEquals(12, events.size()).     assertIsInstanceOf(ExchangeSendingEvent.class, events.get(0)).     assertIsInstanceOf(ExchangeCreatedEvent.class, events.get(1)).     ExchangeRedeliveryEvent e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(2)).     assertEquals(1, e.getAttempt()).     e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(3)).     assertEquals(2, e.getAttempt()).     e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(4)).     assertEquals(3, e.getAttempt()).     e = assertIsInstanceOf(ExchangeRedeliveryEvent.class, events.get(5)).     assertEquals(4, e.getAttempt()). // since its async the ordering of the rest can be different depending per OS and timing }
