commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     weaveById("xxx").replace().to("mock:xxx"). }
false;public;0;14;;@Test public void testUnknownId() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 weaveById("xxx").replace().to("mock:xxx").             }         }).         fail("Should hve thrown exception").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage(), e.getMessage().startsWith("There are no outputs which matches: xxx in the route")).     } }
false;public;0;6;;@Override public void configure() throws Exception {     // weave the node in the route which has id = bar     // and replace it with the following route path     weaveById("bar").replace().multicast().to("mock:a").to("mock:b"). }
false;public;0;23;;@Test public void testReplace() throws Exception {     // START SNIPPET: e1     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the node in the route which has id = bar             // and replace it with the following route path             weaveById("bar").replace().multicast().to("mock:a").to("mock:b").         }     }).     // END SNIPPET: e1     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // weave the node in the route which has id = bar and remove it     weaveById("bar").remove(). }
false;public;0;21;;@Test public void testRemove() throws Exception {     // START SNIPPET: e2     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the node in the route which has id = bar and remove it             weaveById("bar").remove().         }     }).     // END SNIPPET: e2     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertTrue("Should have removed mock:bar endpoint", context.hasEndpoint("mock:bar") == null). }
false;public;0;6;;@Override public void configure() throws Exception {     // weave the node in the route which has id = bar     // and insert the following route path before the adviced node     weaveById("bar").before().to("mock:a").transform(constant("Bye World")). }
false;public;0;22;;@Test public void testBefore() throws Exception {     // START SNIPPET: e3     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the node in the route which has id = bar             // and insert the following route path before the adviced node             weaveById("bar").before().to("mock:a").transform(constant("Bye World")).         }     }).     // END SNIPPET: e3     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     // weave the node in the route which has id = bar     // and insert the following route path after the advice node     weaveById("bar").after().to("mock:a").transform(constant("Bye World")). }
false;public;0;22;;@Test public void testAfter() throws Exception {     // START SNIPPET: e4     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // weave the node in the route which has id = bar             // and insert the following route path after the advice node             weaveById("bar").after().to("mock:a").transform(constant("Bye World")).         }     }).     // END SNIPPET: e4     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e5     from("direct:start").to("mock:foo").to("mock:bar").id("bar").to("mock:result"). // END SNIPPET: e5 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e5             from("direct:start").to("mock:foo").to("mock:bar").id("bar").to("mock:result").         // END SNIPPET: e5         }     }. }
