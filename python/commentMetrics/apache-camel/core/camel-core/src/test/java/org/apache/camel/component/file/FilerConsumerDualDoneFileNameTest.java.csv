commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/done").     super.setUp(). }
false;public;0;9;;@Test public void testTwoDoneFile() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     template.sendBodyAndHeader("file:target/data/done?doneFileName=${file:name}.ready", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/done?doneFileName=${file:name}.ready", "Bye World", Exchange.FILE_NAME, "bye.txt").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testOneDoneFileMissing() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file:target/data/done?doneFileName=${file:name}.ready", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/done", "Bye World", Exchange.FILE_NAME, "bye.txt").     // give chance to poll 2nd file but it lacks the done file     Thread.sleep(250).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file:target/data/done?doneFileName=${file:name}.ready&initialDelay=0&delay=10").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/done?doneFileName=${file:name}.ready&initialDelay=0&delay=10").to("mock:result").         }     }. }
