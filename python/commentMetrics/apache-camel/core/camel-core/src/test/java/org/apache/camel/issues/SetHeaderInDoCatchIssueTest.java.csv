commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception { // empty message }
false;public;0;10;;@Test public void testSuccess() {     Exchange exchange = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {         // empty message         }     }).     assertEquals("CamsResponse", exchange.getOut().getHeader("Status")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("ExchangeTimedOutException"). }
false;public;0;10;;@Test public void testExchangeTimedOutException() {     Exchange exchange = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("ExchangeTimedOutException").         }     }).     assertEquals("TimeOut", exchange.getOut().getHeader("Status")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Exception"). }
false;public;0;10;;@Test public void testException() {     Exchange exchange = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Exception").         }     }).     assertEquals("ExceptionGeneral", exchange.getOut().getHeader("Status")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     log.info("A headers " + exchange.getIn().getHeaders()). }
false;public;1;9;;public void process(Exchange exchange) throws Exception {     log.info("B headers " + exchange.getIn().getHeaders()).     if ("ExchangeTimedOutException".equals(exchange.getIn().getBody(String.class))) {         throw new ExchangeTimedOutException(exchange, 1).     } else if ("Exception".equals(exchange.getIn().getBody(String.class))) {         throw new Exception().     } }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     log.info("C headers " + exchange.getIn().getHeaders()). }
false;protected;0;29;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = new JndiRegistry(createJndiContext()).     registry.bind("A", new Processor() {          public void process(Exchange exchange) throws Exception {             log.info("A headers " + exchange.getIn().getHeaders()).         }     }).     registry.bind("B", new Processor() {          public void process(Exchange exchange) throws Exception {             log.info("B headers " + exchange.getIn().getHeaders()).             if ("ExchangeTimedOutException".equals(exchange.getIn().getBody(String.class))) {                 throw new ExchangeTimedOutException(exchange, 1).             } else if ("Exception".equals(exchange.getIn().getBody(String.class))) {                 throw new Exception().             }         }     }).     registry.bind("C", new Processor() {          public void process(Exchange exchange) throws Exception {             log.info("C headers " + exchange.getIn().getHeaders()).         }     }).     return registry. }
false;public;0;18;;@Override public void configure() throws Exception {     context.setTracing(true).     from("direct:start").doTry().to("A").setHeader("CamelJmsDestinationName", constant("queue:outQueue")).inOut("B").setHeader("Status", constant("CamsResponse")).doCatch(ExchangeTimedOutException.class).setHeader("Status", constant("TimeOut")).doCatch(Exception.class).setHeader("Status", constant("ExceptionGeneral")).end().to("C").transform(body()). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setTracing(true).             from("direct:start").doTry().to("A").setHeader("CamelJmsDestinationName", constant("queue:outQueue")).inOut("B").setHeader("Status", constant("CamsResponse")).doCatch(ExchangeTimedOutException.class).setHeader("Status", constant("TimeOut")).doCatch(Exception.class).setHeader("Status", constant("ExceptionGeneral")).end().to("C").transform(body()).         }     }. }
