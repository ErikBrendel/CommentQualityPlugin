commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Override public void configure() throws Exception {     from(endpoint).to("direct:foo").     from("direct:foo").to(endpoint). }
false;public;0;21;;@Test public void testDataSetEndpoint() throws Exception {     final DataSetEndpoint endpoint = new DataSetEndpoint("dataset://foo", null, new SimpleDataSet(2)).     endpoint.setCamelContext(context).     endpoint.setInitialDelay(0).     assertEquals(0, endpoint.getPreloadSize()).     assertEquals(0, endpoint.getConsumeDelay()).     assertEquals(3, endpoint.getProduceDelay()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(endpoint).to("direct:foo").             from("direct:foo").to(endpoint).         }     }).     context.start().     endpoint.assertIsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from(endpoint).to("direct:foo").     from("direct:foo").to(endpoint). }
false;public;0;22;;@Test public void testDataSetEndpointCtr() throws Exception {     final DataSetEndpoint endpoint = new DataSetEndpoint("dataset://foo", context.getComponent("dataset"), new SimpleDataSet(2)).     endpoint.setConsumeDelay(2).     assertEquals(2, endpoint.getConsumeDelay()).     endpoint.setProduceDelay(5).     assertEquals(5, endpoint.getProduceDelay()).     endpoint.setInitialDelay(1).     assertEquals(1, endpoint.getInitialDelay()).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(endpoint).to("direct:foo").             from("direct:foo").to(endpoint).         }     }).     context.start().     endpoint.assertIsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     reported.set(true). }
false;public;0;5;;@Override public void configure() throws Exception {     from(endpoint).to("direct:foo").     from("direct:foo").to(endpoint). }
false;public;0;24;;@Test public void testDataSetReporter() throws Exception {     final DataSetEndpoint endpoint = new DataSetEndpoint("dataset://foo", context.getComponent("dataset"), new SimpleDataSet(10)).     endpoint.setInitialDelay(0).     final AtomicBoolean reported = new AtomicBoolean(false).     endpoint.setReporter(new Processor() {          public void process(Exchange exchange) throws Exception {             reported.set(true).         }     }).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(endpoint).to("direct:foo").             from("direct:foo").to(endpoint).         }     }).     context.start().     endpoint.assertIsSatisfied().     assertTrue(reported.get()). }
false;public;0;7;;@Test public void testSimpleDataSet() throws Exception {     SimpleDataSet ds = new SimpleDataSet().     ds.setSize(2).     ds.setDefaultBody("Hi").     assertEquals("Hi", ds.getDefaultBody()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String body = "Hi " + exchange.getIn().getBody(String.class).     exchange.getIn().setBody(body). }
false;public;0;5;;@Override public void configure() throws Exception {     from(endpoint).to("direct:foo").     from("direct:foo").to(endpoint). }
false;public;0;28;;@Test public void testDataSetSupport() throws Exception {     MyDataSet ds = new MyDataSet().     ds.setSize(4).     ds.setReportCount(0).     ds.setOutputTransformer(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = "Hi " + exchange.getIn().getBody(String.class).             exchange.getIn().setBody(body).         }     }).     assertNotNull(ds.getOutputTransformer()).     final DataSetEndpoint endpoint = new DataSetEndpoint("dataset://foo", context.getComponent("dataset"), ds).     endpoint.setInitialDelay(0).     endpoint.allMessages().body().startsWith("Hi ").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from(endpoint).to("direct:foo").             from("direct:foo").to(endpoint).         }     }).     context.start().     endpoint.assertIsSatisfied(). }
false;protected;1;4;;@Override protected Object createMessageBody(long messageIndex) {     return "Message " + messageIndex. }
