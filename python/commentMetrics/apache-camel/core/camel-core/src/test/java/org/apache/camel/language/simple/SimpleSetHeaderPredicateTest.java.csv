commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testSetHeaderPredicateFalse() throws Exception {     getMockEndpoint("mock:result").expectedHeaderReceived("bar", false).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testSetHeaderPredicateTrue() throws Exception {     getMockEndpoint("mock:result").expectedHeaderReceived("bar", true).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testOther() throws Exception {     getMockEndpoint("mock:other").expectedHeaderReceived("param1", "hello").     getMockEndpoint("mock:other").expectedHeaderReceived("param2", true).     template.sendBody("direct:other", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").setHeader("bar").simple("${header.foo} == 'Camel'", boolean.class).to("mock:result").     from("direct:other").setHeader("param1", constant("hello")).log("param1 = ${header.param1}").setHeader("param2").simple("${header.param1} == 'hello'", Boolean.class).log("param2 = ${header.param2}").to("mock:other"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("bar").simple("${header.foo} == 'Camel'", boolean.class).to("mock:result").             from("direct:other").setHeader("param1", constant("hello")).log("param1 = ${header.param1}").setHeader("param2").simple("${header.param1} == 'hello'", Boolean.class).log("param2 = ${header.param2}").to("mock:other").         }     }. }
