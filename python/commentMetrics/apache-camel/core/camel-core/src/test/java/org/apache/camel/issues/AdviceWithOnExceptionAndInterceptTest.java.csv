commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new SQLException(). }
false;public;0;18;;@Override public void configure() {     onException(SQLException.class).handled(true).transform(constant("Intercepted SQL!")).log("sending ${body}").to("mock:b").     interceptSendToEndpoint("mock:a").skipSendToOriginalEndpoint().log("intercepted message").bean(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new SQLException().         }     }). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:a").loadBalance().failover(IOException.class).to("mock:a").to("mock:b").end(). }
false;public;0;24;;@Test public void testFailover() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").loadBalance().failover(IOException.class).to("mock:a").to("mock:b").end().         }     }).     RouteDefinition routeDefinition = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(routeDefinition, context, new AdviceWithRouteBuilder()).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedBodiesReceived("Intercepted SQL!").     template.sendBody("direct:a", "foo").     assertMockEndpointsSatisfied(). }
