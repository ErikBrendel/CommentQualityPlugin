commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testIn() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     Object result = template.requestBody("direct:in", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Bye World", result).     assertSame(context, template.getCamelContext()). }
false;public;0;11;;@Test public void testInOut() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye Bye World").     Object result = template.requestBody("direct:out", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Bye Bye World", result). }
false;public;0;11;;@Test public void testFault() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     Object result = template.requestBody("direct:fault", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Faulty World", result). }
false;public;0;15;;@Test public void testExceptionUsingBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:exception", "Hello World").         fail("Should have thrown RuntimeCamelException").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertEquals("Forced exception by unit test", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testExceptionOnRequestBodyWithResponseType() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.requestBody("direct:exception", "Hello World", Integer.class).         fail("Should have thrown RuntimeCamelException").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertEquals("Forced exception by unit test", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;17;;@Test public void testExceptionUsingProcessor() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     Exchange out = template.send("direct:exception", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertTrue(out.isFailed()).     assertEquals("Forced exception by unit test", out.getException().getMessage()).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testExceptionUsingExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     Exchange exchange = context.getEndpoint("direct:exception").createExchange().     exchange.getIn().setBody("Hello World").     Exchange out = template.send("direct:exception", exchange).     assertTrue(out.isFailed()).     assertEquals("Forced exception by unit test", out.getException().getMessage()).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testRequestExceptionUsingBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.requestBody("direct:exception", "Hello World").         fail("Should have thrown RuntimeCamelException").     } catch (RuntimeCamelException e) {         assertTrue(e.getCause() instanceof IllegalArgumentException).         assertEquals("Forced exception by unit test", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World"). }
false;public;0;17;;@Test public void testRequestExceptionUsingProcessor() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     Exchange out = template.request("direct:exception", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").         }     }).     assertTrue(out.isFailed()).     assertEquals("Forced exception by unit test", out.getException().getMessage()).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testRequestExceptionUsingExchange() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     Exchange exchange = context.getEndpoint("direct:exception").createExchange(ExchangePattern.InOut).     exchange.getIn().setBody("Hello World").     Exchange out = template.send("direct:exception", exchange).     assertTrue(out.isFailed()).     assertEquals("Forced exception by unit test", out.getException().getMessage()).     assertMockEndpointsSatisfied(). }
false;public;0;25;;@Test public void testRequestBody() throws Exception {     // with endpoint as string uri     Integer out = template.requestBody("direct:inout", "Hello", Integer.class).     assertEquals(new Integer(123), out).     out = template.requestBodyAndHeader("direct:inout", "Hello", "foo", "bar", Integer.class).     assertEquals(new Integer(123), out).     Map<String, Object> headers = new HashMap<>().     out = template.requestBodyAndHeaders("direct:inout", "Hello", headers, Integer.class).     assertEquals(new Integer(123), out).     // with endpoint object     Endpoint endpoint = context.getEndpoint("direct:inout").     out = template.requestBody(endpoint, "Hello", Integer.class).     assertEquals(new Integer(123), out).     out = template.requestBodyAndHeader(endpoint, "Hello", "foo", "bar", Integer.class).     assertEquals(new Integer(123), out).     headers = new HashMap<>().     out = template.requestBodyAndHeaders(endpoint, "Hello", headers, Integer.class).     assertEquals(new Integer(123), out). }
false;public;0;20;;@Test public void testRequestUsingDefaultEndpoint() throws Exception {     ProducerTemplate producer = new DefaultProducerTemplate(context, context.getEndpoint("direct:out")).     producer.start().     Object out = producer.requestBody("Hello").     assertEquals("Bye Bye World", out).     out = producer.requestBodyAndHeader("Hello", "foo", 123).     assertEquals("Bye Bye World", out).     Map<String, Object> headers = new HashMap<>().     out = producer.requestBodyAndHeaders("Hello", headers).     assertEquals("Bye Bye World", out).     out = producer.requestBodyAndHeaders("Hello", null).     assertEquals("Bye Bye World", out).     producer.stop(). }
false;public;0;16;;@Test public void testSendUsingDefaultEndpoint() throws Exception {     ProducerTemplate producer = new DefaultProducerTemplate(context, context.getEndpoint("direct:in")).     producer.start().     getMockEndpoint("mock:result").expectedMessageCount(3).     producer.sendBody("Hello").     producer.sendBodyAndHeader("Hello", "foo", 123).     Map<String, Object> headers = new HashMap<>().     producer.sendBodyAndHeaders("Hello", headers).     assertMockEndpointsSatisfied().     producer.stop(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Bye World"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody("Bye Bye World"). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getOut().setFault(true).     exchange.getOut().setBody("Faulty World"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Forced exception by unit test"). }
false;public;0;36;;@Override public void configure() throws Exception {     // for faster unit test     errorHandler(noErrorHandler()).     from("direct:in").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Bye World").         }     }).to("mock:result").     from("direct:out").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody("Bye Bye World").         }     }).to("mock:result").     from("direct:fault").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getOut().setFault(true).             exchange.getOut().setBody("Faulty World").         }     }).to("mock:result").     from("direct:exception").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Forced exception by unit test").         }     }).to("mock:result").     from("direct:inout").transform(constant(123)). }
false;protected;0;41;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // for faster unit test             errorHandler(noErrorHandler()).             from("direct:in").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("Bye World").                 }             }).to("mock:result").             from("direct:out").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody("Bye Bye World").                 }             }).to("mock:result").             from("direct:fault").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getOut().setFault(true).                     exchange.getOut().setBody("Faulty World").                 }             }).to("mock:result").             from("direct:exception").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("Forced exception by unit test").                 }             }).to("mock:result").             from("direct:inout").transform(constant(123)).         }     }. }
false;public;0;23;;@Test public void testCacheProducers() throws Exception {     ProducerTemplate template = new DefaultProducerTemplate(context).     template.setMaximumCacheSize(500).     template.start().     assertEquals("Size should be 0", 0, template.getCurrentCacheSize()).     // test that we cache at most 500 producers to avoid it eating to much memory     for (int i = 0. i < 503. i++) {         Endpoint e = context.getEndpoint("seda:queue:" + i).         template.sendBody(e, "Hello").     }     // the eviction is async so force cleanup     template.cleanUp().     assertEquals("Size should be 500", 500, template.getCurrentCacheSize()).     template.stop().     // should be 0     assertEquals("Size should be 0", 0, template.getCurrentCacheSize()). }
false;public;0;21;;@Test public void testCacheProducersFromContext() throws Exception {     ProducerTemplate template = context.createProducerTemplate(500).     assertEquals("Size should be 0", 0, template.getCurrentCacheSize()).     // test that we cache at most 500 producers to avoid it eating to much memory     for (int i = 0. i < 503. i++) {         Endpoint e = context.getEndpoint("seda:queue:" + i).         template.sendBody(e, "Hello").     }     // the eviction is async so force cleanup     template.cleanUp().     assertEquals("Size should be 500", 500, template.getCurrentCacheSize()).     template.stop().     // should be 0     assertEquals("Size should be 0", 0, template.getCurrentCacheSize()). }
