commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     LOG.info("Asserting String -> XOrderResponse convertion").     assertEquals(XOrderResponse.class, exchange.getIn().getBody().getClass()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").     assertEquals("response", exchange.getIn().getBody()). }
false;public;0;32;;@Test public void testJavaTransformer() throws Exception {     MockEndpoint abcresult = getMockEndpoint("mock:abcresult").     abcresult.expectedMessageCount(1).     abcresult.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             LOG.info("Asserting String -> XOrderResponse convertion").             assertEquals(XOrderResponse.class, exchange.getIn().getBody().getClass()).         }     }).     MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult").     xyzresult.expectedMessageCount(1).     xyzresult.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").             assertEquals("response", exchange.getIn().getBody()).         }     }).     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     exchange.getIn().setBody(new AOrder()).     Exchange answerEx = template.send("direct:abc", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals(AOrderResponse.class, answerEx.getOut().getBody().getClass()).     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").     assertEquals("response", exchange.getIn().getBody()). }
false;public;0;21;;@Test public void testDataFormatTransformer() throws Exception {     MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult").     xyzresult.expectedMessageCount(1).     xyzresult.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").             assertEquals("response", exchange.getIn().getBody()).         }     }).     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     ((DataTypeAware) exchange.getIn()).setBody("{name:XOrder}", new DataType("json:JsonXOrder")).     Exchange answerEx = template.send("direct:dataFormat", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals("{name:XOrderResponse}", answerEx.getOut().getBody(String.class)).     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").     assertEquals("response", exchange.getIn().getBody()). }
false;public;0;21;;@Test public void testEndpointTransformer() throws Exception {     MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult").     xyzresult.expectedMessageCount(1).     xyzresult.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").             assertEquals("response", exchange.getIn().getBody()).         }     }).     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     exchange.getIn().setBody("<XOrder/>").     Exchange answerEx = template.send("direct:endpoint", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals("<XOrderResponse/>", answerEx.getOut().getBody(String.class)).     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").     assertEquals("response", exchange.getIn().getBody()). }
false;public;0;21;;@Test public void testCustomTransformer() throws Exception {     MockEndpoint xyzresult = getMockEndpoint("mock:xyzresult").     xyzresult.expectedMessageCount(1).     xyzresult.whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             LOG.info("Asserting String -> XOrderResponse convertion is not yet performed").             assertEquals("response", exchange.getIn().getBody()).         }     }).     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     exchange.getIn().setBody("name=XOrder").     Exchange answerEx = template.send("direct:custom", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals("name=XOrderResponse", answerEx.getOut().getBody(String.class)).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     LOG.info("Asserting input -> AOrder convertion").     assertEquals(AOrder.class, exchange.getIn().getBody().getClass()). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     LOG.info("Asserting input -> XOrder convertion").     assertEquals(XOrder.class, exchange.getIn().getBody().getClass()).     exchange.getIn().setBody("response"). }
false;public;0;61;;@Override public void configure() throws Exception {     context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters()).     from("direct:abc").inputType(AOrder.class).outputType(AOrderResponse.class).process(new Processor() {          public void process(Exchange exchange) throws Exception {             LOG.info("Asserting input -> AOrder convertion").             assertEquals(AOrder.class, exchange.getIn().getBody().getClass()).         }     }).inOut("direct:xyz").to("mock:abcresult").     from("direct:xyz").inputType(XOrder.class).outputType(XOrderResponse.class).process(new Processor() {          public void process(Exchange exchange) throws Exception {             LOG.info("Asserting input -> XOrder convertion").             assertEquals(XOrder.class, exchange.getIn().getBody().getClass()).             exchange.getIn().setBody("response").         }     }).to("mock:xyzresult").     transformer().scheme("json").withDataFormat(new MyJsonDataFormatDefinition()).     from("direct:dataFormat").inputType("json:JsonXOrder").outputType("json:JsonXOrderResponse").inOut("direct:xyz").     context.addComponent("myxml", new MyXmlComponent()).     transformer().fromType("xml:XmlXOrder").toType(XOrder.class).withUri("myxml:endpoint").     transformer().fromType(XOrderResponse.class).toType("xml:XmlXOrderResponse").withUri("myxml:endpoint").     from("direct:endpoint").inputType("xml:XmlXOrder").outputType("xml:XmlXOrderResponse").inOut("direct:xyz").     transformer().fromType("other:OtherXOrder").toType(XOrder.class).withJava(OtherToXOrderTransformer.class).     transformer().fromType(XOrderResponse.class).toType("other:OtherXOrderResponse").withJava(XOrderResponseToOtherTransformer.class).     from("direct:custom").inputType("other:OtherXOrder").outputType("other:OtherXOrderResponse").inOut("direct:xyz"). }
false;protected;0;66;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getTypeConverterRegistry().addTypeConverters(new MyTypeConverters()).             from("direct:abc").inputType(AOrder.class).outputType(AOrderResponse.class).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     LOG.info("Asserting input -> AOrder convertion").                     assertEquals(AOrder.class, exchange.getIn().getBody().getClass()).                 }             }).inOut("direct:xyz").to("mock:abcresult").             from("direct:xyz").inputType(XOrder.class).outputType(XOrderResponse.class).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     LOG.info("Asserting input -> XOrder convertion").                     assertEquals(XOrder.class, exchange.getIn().getBody().getClass()).                     exchange.getIn().setBody("response").                 }             }).to("mock:xyzresult").             transformer().scheme("json").withDataFormat(new MyJsonDataFormatDefinition()).             from("direct:dataFormat").inputType("json:JsonXOrder").outputType("json:JsonXOrderResponse").inOut("direct:xyz").             context.addComponent("myxml", new MyXmlComponent()).             transformer().fromType("xml:XmlXOrder").toType(XOrder.class).withUri("myxml:endpoint").             transformer().fromType(XOrderResponse.class).toType("xml:XmlXOrderResponse").withUri("myxml:endpoint").             from("direct:endpoint").inputType("xml:XmlXOrder").outputType("xml:XmlXOrderResponse").inOut("direct:xyz").             transformer().fromType("other:OtherXOrder").toType(XOrder.class).withJava(OtherToXOrderTransformer.class).             transformer().fromType(XOrderResponse.class).toType("other:OtherXOrderResponse").withJava(XOrderResponseToOtherTransformer.class).             from("direct:custom").inputType("other:OtherXOrder").outputType("other:OtherXOrderResponse").inOut("direct:xyz").         }     }. }
false;public;1;5;;@Converter public AOrder toAOrder(String order) {     LOG.info("TypeConverter: String -> AOrder").     return new AOrder(). }
false;public;1;5;;@Converter public XOrder toXOrder(AOrder aorder) {     LOG.info("TypeConverter: AOrder -> XOrder").     return new XOrder(). }
false;public;1;5;;@Converter public XOrderResponse toXOrderResponse(String res) {     LOG.info("TypeConverter: String -> XOrderResponse").     return new XOrderResponse(). }
false;public;1;5;;@Converter public AOrderResponse toAOrderResponse(XOrderResponse xres) {     LOG.info("TypeConverter: XOrderResponse -> AOrderResponse").     return new AOrderResponse(). }
false;public,static;3;3;;public static DataFormat getDataFormat(RouteContext routeContext, DataFormatDefinition type, String ref) {     return new MyJsonDataFormatDefinition().createDataFormat(). }
false;public;1;3;;public DataFormat getDataFormat(RouteContext routeContext) {     return createDataFormat(). }
false;public;3;6;;@Override public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {     assertEquals(graph.toString(), XOrderResponse.class, graph.getClass()).     LOG.info("DataFormat: XOrderResponse -> JSON").     stream.write("{name:XOrderResponse}".getBytes()). }
false;public;2;13;;@Override public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     BufferedReader reader = new BufferedReader(new InputStreamReader(stream)).     String line = "".     String input = "".     while ((line = reader.readLine()) != null) {         input += line.     }     reader.close().     assertEquals("{name:XOrder}", input).     LOG.info("DataFormat: JSON -> XOrder").     return new XOrder(). }
false;private;0;23;;private DataFormat createDataFormat() {     return new DataFormat() {          @Override         public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {             assertEquals(graph.toString(), XOrderResponse.class, graph.getClass()).             LOG.info("DataFormat: XOrderResponse -> JSON").             stream.write("{name:XOrderResponse}".getBytes()).         }          @Override         public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {             BufferedReader reader = new BufferedReader(new InputStreamReader(stream)).             String line = "".             String input = "".             while ((line = reader.readLine()) != null) {                 input += line.             }             reader.close().             assertEquals("{name:XOrder}", input).             LOG.info("DataFormat: JSON -> XOrder").             return new XOrder().         }     }. }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyXmlEndpoint(). }
false;public;2;15;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     Object input = exchange.getIn().getBody().     if (input instanceof XOrderResponse) {         log.info("Endpoint: XOrderResponse -> XML").         exchange.getIn().setBody("<XOrderResponse/>").     } else {         assertEquals("<XOrder/>", input).         log.info("Endpoint: XML -> XOrder").         exchange.getIn().setBody(new XOrder()).     }     callback.done(true).     return true. }
false;public;0;20;;@Override public Producer createProducer() throws Exception {     return new DefaultAsyncProducer(this) {          @Override         public boolean process(Exchange exchange, AsyncCallback callback) {             Object input = exchange.getIn().getBody().             if (input instanceof XOrderResponse) {                 log.info("Endpoint: XOrderResponse -> XML").                 exchange.getIn().setBody("<XOrderResponse/>").             } else {                 assertEquals("<XOrder/>", input).                 log.info("Endpoint: XML -> XOrder").                 exchange.getIn().setBody(new XOrder()).             }             callback.done(true).             return true.         }     }. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "myxml:endpoint". }
false;public;3;6;;@Override public void transform(Message message, DataType from, DataType to) throws Exception {     assertEquals("name=XOrder", message.getBody()).     log.info("Bean: Other -> XOrder").     message.setBody(new XOrder()). }
false;public;3;5;;@Override public void transform(Message message, DataType from, DataType to) throws Exception {     log.info("Bean: XOrderResponse -> Other").     message.setBody("name=XOrderResponse"). }
