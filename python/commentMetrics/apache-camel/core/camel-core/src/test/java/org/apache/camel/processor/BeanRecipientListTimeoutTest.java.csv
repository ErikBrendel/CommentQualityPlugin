commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testBeanRecipientListParallelTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // A will timeout so we only get B and/or C     mock.message(0).body().not(body().contains("A")).     template.sendBody("direct:start", "Hello").     assertMockEndpointsSatisfied().     assertNotNull(receivedExchange).     assertEquals(0, receivedIndex).     assertEquals(3, receivedTotal).     assertEquals(1000, receivedTimeout). }
false;protected;0;7;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", new MyBean()).     answer.bind("myStrategy", new MyAggregationStrategy()).     return answer. }
false;public;0;9;;public void configure() {     from("direct:start").bean("myBean", "route").to("mock:result").     from("direct:a").delay(2000).setBody(constant("A")).     from("direct:b").setBody(constant("B")).     from("direct:c").delay(500).setBody(constant("C")). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").bean("myBean", "route").to("mock:result").             from("direct:a").delay(2000).setBody(constant("A")).             from("direct:b").setBody(constant("B")).             from("direct:c").delay(500).setBody(constant("C")).         }     }. }
false;public;1;4;;@RecipientList(strategyRef = "myStrategy", parallelProcessing = true, timeout = 1000) public String[] route(String body) {     return new String[] { "direct:a", "direct:b", "direct:c" }. }
false;public;4;11;;public void timeout(Exchange oldExchange, int index, int total, long timeout) {     // we can't assert on the expected values here as the contract of this method doesn't     // allow to throw any Throwable (including AssertionError) so that we assert     // about the expected values directly inside the test method itself. other than that     // asserting inside a thread other than the main thread dosen't make much sense as     // junit would not realize the failed assertion!     receivedExchange = oldExchange.     receivedIndex = index.     receivedTotal = total.     receivedTimeout = timeout. }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
