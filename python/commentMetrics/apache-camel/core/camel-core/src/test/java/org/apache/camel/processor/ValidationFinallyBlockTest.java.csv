commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testValidMessage() throws Exception {     validEndpoint.expectedMessageCount(1).     invalidEndpoint.expectedMessageCount(0).     allEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "<valid/>", "foo", "bar").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, allEndpoint). }
false;public;0;10;;@Test public void testInvalidMessage() throws Exception {     invalidEndpoint.expectedMessageCount(1).     validEndpoint.expectedMessageCount(0).     allEndpoint.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "<invalid/>", "foo", "notMatchedHeaderValue").     MockEndpoint.assertIsSatisfied(validEndpoint, invalidEndpoint, allEndpoint). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     validEndpoint = resolveMandatoryEndpoint("mock:valid", MockEndpoint.class).     invalidEndpoint = resolveMandatoryEndpoint("mock:invalid", MockEndpoint.class).     allEndpoint = resolveMandatoryEndpoint("mock:all", MockEndpoint.class). }
false;public;0;7;;public void configure() {     TryDefinition tryType = from("direct:start").doTry().process(validator).to("mock:valid").     tryType.doCatch(ValidationException.class).to("mock:invalid").     tryType.doFinally().to("mock:all"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             TryDefinition tryType = from("direct:start").doTry().process(validator).to("mock:valid").             tryType.doCatch(ValidationException.class).to("mock:invalid").             tryType.doFinally().to("mock:all").         }     }. }
