commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     mock = getMockEndpoint("mock:mock"). }
false;public;0;7;;// ------------------------------------------------------------- // InOnly routes // ------------------------------------------------------------- @Test public void testEnrichInOnly() throws InterruptedException {     mock.expectedBodiesReceived("test:blah").     mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://mock").     template.sendBody("direct:enricher-test-1", "test").     mock.assertIsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody("test"). }
false;public;0;15;;@Test public void testEnrichFaultInOnly() throws InterruptedException {     mock.expectedMessageCount(0).     Exchange exchange = template.send("direct:enricher-test-3", new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("test").         }     }).     mock.assertIsSatisfied().     assertEquals("test", exchange.getIn().getBody()).     assertTrue(exchange.getOut() != null && exchange.getOut().isFault()).     assertEquals("failed", exchange.getOut().getBody()).     assertEquals("direct://enricher-fault-resource", exchange.getProperty(Exchange.TO_ENDPOINT)).     assertNull(exchange.getException()). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody("test"). }
false;public;0;13;;@Test public void testEnrichErrorInOnly() throws InterruptedException {     mock.expectedMessageCount(0).     Exchange exchange = template.send("direct:enricher-test-4", new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("test").         }     }).     mock.assertIsSatisfied().     assertEquals("test", exchange.getIn().getBody()).     assertEquals("failed", exchange.getException().getMessage()).     assertFalse(exchange.hasOut()). }
false;public;0;5;;// ------------------------------------------------------------- // InOut routes // ------------------------------------------------------------- @Test public void testEnrichInOut() throws InterruptedException {     String result = (String) template.sendBody("direct:enricher-test-5", ExchangePattern.InOut, "test").     assertEquals("test:blah", result). }
false;public;1;4;;public void process(Exchange exchange) {     exchange.getIn().setHeader("foo", "bar").     exchange.getIn().setBody("test"). }
false;public;0;13;;@Test public void testEnrichInOutPlusHeader() throws InterruptedException {     Exchange exchange = template.send("direct:enricher-test-5", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setHeader("foo", "bar").             exchange.getIn().setBody("test").         }     }).     assertEquals("bar", exchange.getIn().getHeader("foo")).     assertEquals("test:blah", exchange.getIn().getBody()).     assertTrue(exchange.hasOut()).     assertNull(exchange.getException()). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody("test"). }
false;public;0;12;;@Test public void testEnrichFaultInOut() throws InterruptedException {     Exchange exchange = template.send("direct:enricher-test-7", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("test").         }     }).     assertEquals("test", exchange.getIn().getBody()).     assertTrue(exchange.getOut() != null && exchange.getOut().isFault()).     assertEquals("failed", exchange.getOut().getBody()).     assertNull(exchange.getException()). }
false;public;1;3;;public void process(Exchange exchange) {     exchange.getIn().setBody("test"). }
false;public;0;11;;@Test public void testEnrichErrorInOut() throws InterruptedException {     Exchange exchange = template.send("direct:enricher-test-8", ExchangePattern.InOut, new Processor() {          public void process(Exchange exchange) {             exchange.getIn().setBody("test").         }     }).     assertEquals("test", exchange.getIn().getBody()).     assertEquals("failed", exchange.getException().getMessage()).     assertFalse(exchange.hasOut()). }
false;public;0;38;;public void configure() {     // -------------------------------------------------------------     // InOnly routes     // -------------------------------------------------------------     from("direct:enricher-test-1").enrich("direct:enricher-constant-resource", aggregationStrategy).to("mock:mock").     from("direct:enricher-test-3").enrich("direct:enricher-fault-resource", aggregationStrategy).to("mock:mock").     // avoid re-deliveries     from("direct:enricher-test-4").errorHandler(noErrorHandler()).enrich("direct:enricher-error-resource", aggregationStrategy).to("mock:mock").     // -------------------------------------------------------------     // InOut routes     // -------------------------------------------------------------     from("direct:enricher-test-5").enrich("direct:enricher-constant-resource", aggregationStrategy).     from("direct:enricher-test-7").enrich("direct:enricher-fault-resource", aggregationStrategy).     // avoid re-deliveries     from("direct:enricher-test-8").errorHandler(noErrorHandler()).enrich("direct:enricher-error-resource", aggregationStrategy).     // -------------------------------------------------------------     // Enricher resources     // -------------------------------------------------------------     from("direct:enricher-constant-resource").transform().constant("blah").     from("direct:enricher-fault-resource").errorHandler(noErrorHandler()).process(new FailureProcessor(false)).     from("direct:enricher-error-resource").errorHandler(noErrorHandler()).process(new FailureProcessor(true)). }
false;protected;0;42;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // -------------------------------------------------------------             // InOnly routes             // -------------------------------------------------------------             from("direct:enricher-test-1").enrich("direct:enricher-constant-resource", aggregationStrategy).to("mock:mock").             from("direct:enricher-test-3").enrich("direct:enricher-fault-resource", aggregationStrategy).to("mock:mock").             // avoid re-deliveries             from("direct:enricher-test-4").errorHandler(noErrorHandler()).enrich("direct:enricher-error-resource", aggregationStrategy).to("mock:mock").             // -------------------------------------------------------------             // InOut routes             // -------------------------------------------------------------             from("direct:enricher-test-5").enrich("direct:enricher-constant-resource", aggregationStrategy).             from("direct:enricher-test-7").enrich("direct:enricher-fault-resource", aggregationStrategy).             // avoid re-deliveries             from("direct:enricher-test-8").errorHandler(noErrorHandler()).enrich("direct:enricher-error-resource", aggregationStrategy).             // -------------------------------------------------------------             // Enricher resources             // -------------------------------------------------------------             from("direct:enricher-constant-resource").transform().constant("blah").             from("direct:enricher-fault-resource").errorHandler(noErrorHandler()).process(new FailureProcessor(false)).             from("direct:enricher-error-resource").errorHandler(noErrorHandler()).process(new FailureProcessor(true)).         }     }. }
