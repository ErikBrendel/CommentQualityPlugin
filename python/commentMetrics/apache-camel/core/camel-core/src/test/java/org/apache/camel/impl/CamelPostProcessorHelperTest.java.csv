commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myProp", myProp).     jndi.bind("foo", new FooBar()).     return jndi. }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setLocation("ref:myProp").     return context. }
false;public;0;8;;@Test public void testConstructor() {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper().     assertNull(helper.getCamelContext()).     helper.setCamelContext(context).     assertNotNull(helper.getCamelContext()). }
false;public;0;5;;@Test public void testConstructorCamelContext() {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     assertNotNull(helper.getCamelContext()). }
false;public;0;6;;@Test public void testMatchContext() {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     assertTrue(helper.matchContext(context.getName())).     assertFalse(helper.matchContext("foo")). }
false;public;0;15;;@Test public void testConsume() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeBean my = new MyConsumeBean().     Method method = my.getClass().getMethod("consumeSomething", String.class).     helper.consumerInjection(method, my, "foo").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testConsumePrivate() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyPrivateConsumeBean my = new MyPrivateConsumeBean().     Method method = my.getClass().getDeclaredMethod("consumeSomethingPrivate", String.class).     try {         helper.consumerInjection(method, my, "foo").         fail("Should have thrown exception").     } catch (RuntimeCamelException e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertTrue(iae.getMessage().startsWith("The method private void")).         assertTrue(iae.getMessage().endsWith("(for example the method must be public)")).     } }
false;public;0;18;;@Test public void testConsumeSynchronization() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyConsumeAndSynchronizationBean my = new MyConsumeAndSynchronizationBean().     Method method = my.getClass().getMethod("consumeSomething", String.class, Exchange.class).     helper.consumerInjection(method, my, "foo").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied().     // give UoW a bit of time     await("onDone invokation").atMost(1, TimeUnit.SECONDS).until(mySynchronization::isOnDone). }
false;public;0;18;;@Test public void testProduceSynchronization() throws Exception {     MyProduceAndSynchronizationBean my = new MyProduceAndSynchronizationBean().     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     Producer producer = helper.createInjectionProducer(context.getEndpoint("mock:result"), my, "foo").     my.setProducer(producer).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     my.produceSomething("Hello World").     assertMockEndpointsSatisfied().     // give UoW a bit of time     await("onDone invocation").atMost(1, TimeUnit.SECONDS).until(mySynchronization::isOnDone). }
false;public;0;23;;@Test public void testEndpointInjectProducerTemplate() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointInjectBeanProducerTemplate bean = new MyEndpointInjectBeanProducerTemplate().     Method method = bean.getClass().getMethod("setProducer", ProducerTemplate.class).     EndpointInject endpointInject = method.getAnnotation(EndpointInject.class).     Class<?>[] parameterTypes = method.getParameterTypes().     for (Class<?> type : parameterTypes) {         String propertyName = org.apache.camel.util.ObjectHelper.getPropertyName(method).         Object value = helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").         ObjectHelper.invokeMethod(method, bean, value).     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     assertNotNull(bean.getProducer()).     bean.send("Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;27;;@Test public void testEndpointInjectProducer() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointBeanProducer bean = new MyEndpointBeanProducer().     Method method = bean.getClass().getMethod("setProducer", Producer.class).     EndpointInject endpointInject = method.getAnnotation(EndpointInject.class).     Class<?>[] parameterTypes = method.getParameterTypes().     for (Class<?> type : parameterTypes) {         String propertyName = org.apache.camel.util.ObjectHelper.getPropertyName(method).         Object value = helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").         ObjectHelper.invokeMethod(method, bean, value).     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     assertNotNull(bean.getProducer()).     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     bean.send(exchange).     assertMockEndpointsSatisfied(). }
false;public;0;27;;@Test public void testEndpointInjectPollingConsumer() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointBeanPollingConsumer bean = new MyEndpointBeanPollingConsumer().     Method method = bean.getClass().getMethod("setConsumer", PollingConsumer.class).     EndpointInject endpointInject = method.getAnnotation(EndpointInject.class).     Class<?>[] parameterTypes = method.getParameterTypes().     for (Class<?> type : parameterTypes) {         String propertyName = org.apache.camel.util.ObjectHelper.getPropertyName(method).         Object value = helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").         ObjectHelper.invokeMethod(method, bean, value).     }     template.sendBody("seda:foo", "Hello World").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     assertNotNull(bean.getConsumer()).     Exchange exchange = bean.consume().     template.send("mock:result", exchange).     assertMockEndpointsSatisfied(). }
false;public;0;24;;@Test public void testEndpointInjectProducerTemplateField() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointInjectProducerTemplate bean = new MyEndpointInjectProducerTemplate().     Field field = bean.getClass().getField("producer").     EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).     Class<?> type = field.getType().     String propertyName = "producer".     Object value = helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").     field.set(bean, value).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     bean.send(exchange).     assertMockEndpointsSatisfied(). }
false;public;0;24;;@Test public void testEndpointInjectFluentProducerTemplateField() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointInjectFluentProducerTemplate bean = new MyEndpointInjectFluentProducerTemplate().     Field field = bean.getClass().getField("producer").     EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).     Class<?> type = field.getType().     String propertyName = "producer".     Object value = helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").     field.set(bean, value).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     bean.send(exchange).     assertMockEndpointsSatisfied(). }
false;public;0;24;;@Test public void testEndpointInjectProducerTemplateFieldNoDefaultEndpoint() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointInjectProducerTemplateNoDefaultEndpoint bean = new MyEndpointInjectProducerTemplateNoDefaultEndpoint().     Field field = bean.getClass().getField("producer").     EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).     Class<?> type = field.getType().     String propertyName = "producer".     Object value = helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").     field.set(bean, value).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Hello World").     bean.send(exchange).     assertMockEndpointsSatisfied(). }
false;public;0;18;;@Test public void testEndpointInjectProducerTemplateFieldNameUnknown() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointInjectProducerTemplateNameUnknown bean = new MyEndpointInjectProducerTemplateNameUnknown().     Field field = bean.getClass().getField("producer").     EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).     Class<?> type = field.getType().     String propertyName = "producer".     try {         helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").         fail("Should throw exception").     } catch (NoSuchBeanException e) {         assertEquals("No bean could be found in the registry for: unknown of type: org.apache.camel.Endpoint", e.getMessage()).     } }
false;public;0;18;;@Test public void testEndpointInjectProducerTemplateFieldUrlUnknown() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointInjectProducerTemplateUrlUnknown bean = new MyEndpointInjectProducerTemplateUrlUnknown().     Field field = bean.getClass().getField("producer").     EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).     Class<?> type = field.getType().     String propertyName = "producer".     try {         helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").         fail("Should throw exception").     } catch (ResolveEndpointFailedException e) {         assertEquals("Failed to resolve endpoint: xxx://foo due to: No component found with scheme: xxx", e.getMessage()).     } }
false;public;0;18;;@Test public void testEndpointInjectBothUriAndRef() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyEndpointBothUriAndRef bean = new MyEndpointBothUriAndRef().     Field field = bean.getClass().getField("producer").     EndpointInject endpointInject = field.getAnnotation(EndpointInject.class).     Class<?> type = field.getType().     String propertyName = "producer".     try {         helper.getInjectionValue(type, endpointInject.uri(), endpointInject.ref(), endpointInject.property(), propertyName, bean, "foo").         fail("Should throw exception").     } catch (IllegalArgumentException e) {         assertEquals("Both uri and name is provided, only either one is allowed: uri=seda:foo, ref=myEndpoint", e.getMessage()).     } }
false;public;0;21;;@Test public void testPropertyFieldInject() throws Exception {     myProp.put("myTimeout", "2000").     myProp.put("myApp", "Camel").     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyPropertyFieldBean bean = new MyPropertyFieldBean().     Field field = bean.getClass().getField("timeout").     PropertyInject propertyInject = field.getAnnotation(PropertyInject.class).     Class<?> type = field.getType().     Object value = helper.getInjectionPropertyValue(type, propertyInject.value(), "", "timeout", bean, "foo").     assertEquals(Integer.valueOf("2000"), Integer.valueOf("" + value)).     field = bean.getClass().getField("greeting").     propertyInject = field.getAnnotation(PropertyInject.class).     type = field.getType().     value = helper.getInjectionPropertyValue(type, propertyInject.value(), "", "greeting", bean, "foo").     assertEquals("Hello Camel", value). }
false;public;0;20;;@Test public void testPropertyFieldDefaultValueInject() throws Exception {     myProp.put("myApp", "Camel").     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyPropertyFieldBean bean = new MyPropertyFieldBean().     Field field = bean.getClass().getField("timeout").     PropertyInject propertyInject = field.getAnnotation(PropertyInject.class).     Class<?> type = field.getType().     Object value = helper.getInjectionPropertyValue(type, propertyInject.value(), "5000", "timeout", bean, "foo").     assertEquals(Integer.valueOf("5000"), Integer.valueOf("" + value)).     field = bean.getClass().getField("greeting").     propertyInject = field.getAnnotation(PropertyInject.class).     type = field.getType().     value = helper.getInjectionPropertyValue(type, propertyInject.value(), "", "greeting", bean, "foo").     assertEquals("Hello Camel", value). }
false;public;0;21;;@Test public void testPropertyMethodInject() throws Exception {     myProp.put("myTimeout", "2000").     myProp.put("myApp", "Camel").     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyPropertyMethodBean bean = new MyPropertyMethodBean().     Method method = bean.getClass().getMethod("setTimeout", int.class).     PropertyInject propertyInject = method.getAnnotation(PropertyInject.class).     Class<?> type = method.getParameterTypes()[0].     Object value = helper.getInjectionPropertyValue(type, propertyInject.value(), "", "timeout", bean, "foo").     assertEquals(Integer.valueOf("2000"), Integer.valueOf("" + value)).     method = bean.getClass().getMethod("setGreeting", String.class).     propertyInject = method.getAnnotation(PropertyInject.class).     type = method.getParameterTypes()[0].     value = helper.getInjectionPropertyValue(type, propertyInject.value(), "", "greeting", bean, "foo").     assertEquals("Hello Camel", value). }
false;public;0;15;;@Test public void testBeanInject() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyBeanInjectBean bean = new MyBeanInjectBean().     Field field = bean.getClass().getField("foo").     BeanInject beanInject = field.getAnnotation(BeanInject.class).     Class<?> type = field.getType().     Object value = helper.getInjectionBeanValue(type, beanInject.value()).     field.set(bean, value).     String out = bean.doSomething("World").     assertEquals("Hello World", out). }
false;public;0;16;;@Test public void testBeanInjectNotFound() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyBeanInjectBean bean = new MyBeanInjectBean().     Field field = bean.getClass().getField("foo").     Class<?> type = field.getType().     try {         helper.getInjectionBeanValue(type, "bar").         fail("Should have thrown exception").     } catch (NoSuchBeanException e) {         assertEquals("No bean could be found in the registry for: bar of type: org.apache.camel.impl.FooBar", e.getMessage()).         assertEquals("bar", e.getName()).     } }
false;public;0;15;;@Test public void testBeanInjectByType() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     MyBeanInjectByTypeBean bean = new MyBeanInjectByTypeBean().     Field field = bean.getClass().getField("foo").     BeanInject beanInject = field.getAnnotation(BeanInject.class).     Class<?> type = field.getType().     Object value = helper.getInjectionBeanValue(type, beanInject.value()).     field.set(bean, value).     String out = bean.doSomething("Camel").     assertEquals("Hello Camel", out). }
false;public;0;23;;@Test public void testFluentProducerTemplateWithNoInjection() throws Exception {     CamelPostProcessorHelper helper = new CamelPostProcessorHelper(context).     NoBeanInjectionTestClass myBean = new NoBeanInjectionTestClass().     Field field = myBean.getClass().getField("fluentProducerTemplate").     EndpointInject inject = field.getAnnotation(EndpointInject.class).     String propertyName = "fluent".     Class<?> classType = field.getType().     Object value = helper.getInjectionValue(classType, inject.uri(), inject.ref(), inject.property(), propertyName, myBean, "bla").     field.set(myBean, value).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bla Bla Bla. .").     Exchange exchange = new DefaultExchange(context).     exchange.getIn().setBody("Bla Bla Bla. .").     myBean.sendExchange(exchange).     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void sendExchange(Exchange exchange) {     fluentProducerTemplate.withExchange(exchange).to("mock:result").send(). }
false;public;1;5;;@Consume(uri = "seda:foo") public void consumeSomething(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;2;6;;@Consume(uri = "seda:foo") public void consumeSomething(String body, Exchange exchange) {     exchange.addOnCompletion(mySynchronization).     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;1;8;;public void produceSomething(String body) throws Exception {     assertEquals("Hello World", body).     Exchange exchange = producer.getEndpoint().createExchange().     exchange.addOnCompletion(mySynchronization).     exchange.getIn().setBody(body).     producer.process(exchange). }
false;public;1;3;;public void setProducer(Producer producer) {     this.producer = producer. }
false;public;1;4;;@Override public void onDone(Exchange exchange) {     onDone = true. }
false;public;0;3;;public boolean isOnDone() {     return onDone. }
false;public;1;4;;@EndpointInject(uri = "mock:result") public void setProducer(ProducerTemplate producer) {     this.producer = producer. }
false;public;0;3;;public ProducerTemplate getProducer() {     return producer. }
false;public;1;3;;public void send(String message) {     producer.sendBody(message). }
false;public;1;4;;@EndpointInject(uri = "mock:result") public void setProducer(Producer producer) {     this.producer = producer. }
false;public;0;3;;public Producer getProducer() {     return producer. }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.process(exchange). }
false;public;1;4;;@EndpointInject(uri = "seda:foo") public void setConsumer(PollingConsumer consumer) {     this.consumer = consumer. }
false;public;0;3;;public PollingConsumer getConsumer() {     return consumer. }
false;public;0;3;;public Exchange consume() throws Exception {     return consumer.receive(1000). }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.send(exchange). }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.withExchange(exchange).send(). }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.send("mock:result", exchange). }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.send(exchange). }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.send(exchange). }
false;public;1;3;;public void send(Exchange exchange) throws Exception {     producer.send(exchange). }
false;private;1;5;;@Consume(uri = "seda:foo") private void consumeSomethingPrivate(String body) {     assertEquals("Hello World", body).     template.sendBody("mock:result", body). }
false;public;1;3;;public String doSomething(String body) {     return greeting + " " + body + " with timeout=" + timeout. }
false;public;1;3;;public String doSomething(String body) {     return greeting + " " + body + " with timeout=" + timeout. }
false;public;1;3;;public String doSomething(String body) {     return greeting + " " + body + " with timeout=" + timeout. }
false;public;0;3;;public int getTimeout() {     return timeout. }
false;public;1;4;;@PropertyInject("myTimeout") public void setTimeout(int timeout) {     this.timeout = timeout. }
false;public;0;3;;public String getGreeting() {     return greeting. }
false;public;1;4;;@PropertyInject("Hello {{myApp}}") public void setGreeting(String greeting) {     this.greeting = greeting. }
false;public;1;3;;public String doSomething(String body) {     return foo.hello(body). }
false;public;1;3;;public String doSomething(String body) {     return foo.hello(body). }
