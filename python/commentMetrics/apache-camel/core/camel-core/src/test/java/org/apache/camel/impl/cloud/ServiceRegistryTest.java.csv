commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;// ********************* // Set up // ********************* @Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;42;;// ********************* // Tests // ********************* @Test public void testServiceRegistrationWithRouteIdAndGroup() throws Exception {     final String serviceName = UUID.randomUUID().toString().     final String serviceId = UUID.randomUUID().toString().     final int port = 9090.     context.addRouteDefinition(new RouteDefinition().from("direct:start").routeGroup(serviceName).routeId(serviceId).routeProperty(ServiceDefinition.SERVICE_META_HOST, "localhost").routeProperty(ServiceDefinition.SERVICE_META_PORT, "" + port).routeProperty("service.meta1", "meta1").routeProperty("meta2", "meta2").routePolicy(new ServiceRegistrationRoutePolicy()).to("mock:end")).     InMemoryServiceRegistry sr = new InMemoryServiceRegistry().     context.addService(sr).     context.start().     final Map<String, ServiceDefinition> defs = sr.getDefinitions().     Assertions.assertThat(defs).hasSize(1).     // basic properties     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("name", serviceName).     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("id", serviceId).     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("host", "localhost").     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("port", port).     // metadata     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_NAME, serviceName).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_ID, serviceId).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_HOST, "localhost").     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_PORT, "" + port).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry("service.meta1", "meta1").     Assertions.assertThat(defs.get(serviceId).getMetadata()).doesNotContainKeys("meta2"). }
false;public;0;44;;@Test public void testServiceRegistrationWithRouteIdAndGroupOverride() throws Exception {     final String serviceName = UUID.randomUUID().toString().     final String serviceId = UUID.randomUUID().toString().     final int port = 9090.     context.addRouteDefinition(new RouteDefinition().from("direct:start").routeGroup("service-name").routeId("service-id").routeProperty(ServiceDefinition.SERVICE_META_NAME, serviceName).routeProperty(ServiceDefinition.SERVICE_META_ID, serviceId).routeProperty(ServiceDefinition.SERVICE_META_HOST, "localhost").routeProperty(ServiceDefinition.SERVICE_META_PORT, "" + port).routeProperty("service.meta1", "meta1").routeProperty("meta2", "meta2").routePolicy(new ServiceRegistrationRoutePolicy()).to("mock:end")).     InMemoryServiceRegistry sr = new InMemoryServiceRegistry().     context.addService(sr).     context.start().     final Map<String, ServiceDefinition> defs = sr.getDefinitions().     Assertions.assertThat(defs).hasSize(1).     // basic properties     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("name", serviceName).     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("id", serviceId).     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("host", "localhost").     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("port", port).     // metadata     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_NAME, serviceName).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_ID, serviceId).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_HOST, "localhost").     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_PORT, "" + port).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry("service.meta1", "meta1").     Assertions.assertThat(defs.get(serviceId).getMetadata()).doesNotContainKeys("meta2"). }
false;public;0;42;;// ********************* // Tests // ********************* @Test public void testServiceRegistrationWithRouteProperties() throws Exception {     final String serviceName = UUID.randomUUID().toString().     final String serviceId = UUID.randomUUID().toString().     final int port = 9090.     context.addRouteDefinition(new RouteDefinition().from("direct:start").routeProperty(ServiceDefinition.SERVICE_META_NAME, serviceName).routeProperty(ServiceDefinition.SERVICE_META_ID, serviceId).routeProperty(ServiceDefinition.SERVICE_META_HOST, "localhost").routeProperty(ServiceDefinition.SERVICE_META_PORT, "" + port).routeProperty("service.meta1", "meta1").routeProperty("meta2", "meta2").routePolicy(new ServiceRegistrationRoutePolicy()).to("mock:end")).     InMemoryServiceRegistry sr = new InMemoryServiceRegistry().     context.addService(sr).     context.start().     final Map<String, ServiceDefinition> defs = sr.getDefinitions().     Assertions.assertThat(defs).hasSize(1).     // basic properties     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("name", serviceName).     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("id", serviceId).     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("host", "localhost").     Assertions.assertThat(defs.values()).first().hasFieldOrPropertyWithValue("port", port).     // metadata     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_NAME, serviceName).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_ID, serviceId).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_HOST, "localhost").     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry(ServiceDefinition.SERVICE_META_PORT, "" + port).     Assertions.assertThat(defs.get(serviceId).getMetadata()).containsEntry("service.meta1", "meta1").     Assertions.assertThat(defs.get(serviceId).getMetadata()).doesNotContainKeys("meta2"). }
false;public;1;7;;@Override public void register(ServiceDefinition definition) {     Objects.requireNonNull(definition.getId(), "ServiceDefinition ID").     Objects.requireNonNull(definition.getName(), "ServiceDefinition Name").     definitions.put(definition.getId(), definition). }
false;public;1;7;;@Override public void deregister(ServiceDefinition definition) {     Objects.requireNonNull(definition.getId(), "ServiceDefinition ID").     Objects.requireNonNull(definition.getName(), "ServiceDefinition Name").     definitions.remove(definition.getId()). }
false;protected;0;3;;@Override protected void doStart() throws Exception { }
false;protected;0;4;;@Override protected void doStop() throws Exception {     definitions.clear(). }
false;;0;3;;Map<String, ServiceDefinition> getDefinitions() {     return Collections.unmodifiableMap(definitions). }
