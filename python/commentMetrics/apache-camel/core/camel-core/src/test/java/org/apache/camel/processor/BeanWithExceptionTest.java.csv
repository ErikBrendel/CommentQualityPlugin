commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("<valid/>").     exchange.getIn().setHeader("foo", "bar").     exchange.setProperty("cheese", "old"). }
false;public;0;15;;@Test public void testValidMessage() throws Exception {     validEndpoint.expectedMessageCount(1).     invalidEndpoint.expectedMessageCount(0).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("<valid/>").             exchange.getIn().setHeader("foo", "bar").             exchange.setProperty("cheese", "old").         }     }).     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("<invalid/>").     exchange.getIn().setHeader("foo", "notMatchedHeaderValue").     exchange.setProperty("cheese", "old"). }
false;public;0;19;;@Test public void testInvalidMessage() throws Exception {     validEndpoint.expectedMessageCount(0).     invalidEndpoint.expectedMessageCount(1).     Exchange exchange = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("<invalid/>").             exchange.getIn().setHeader("foo", "notMatchedHeaderValue").             exchange.setProperty("cheese", "old").         }     }).     assertNotNull(exchange.getException()).     ValidationException exception = assertIsInstanceOf(ValidationException.class, exchange.getException()).     assertEquals("Invalid header foo: notMatchedHeaderValue", exception.getMessage()).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     validEndpoint = resolveMandatoryEndpoint("mock:valid", MockEndpoint.class).     invalidEndpoint = resolveMandatoryEndpoint("mock:invalid", MockEndpoint.class). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", new ValidationBean()).     return answer. }
false;public;0;5;;public void configure() {     onException(ValidationException.class).to("mock:invalid").     from("direct:start").bean("myBean").to("mock:valid"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             onException(ValidationException.class).to("mock:invalid").             from("direct:start").bean("myBean").to("mock:valid").         }     }. }
false;public;3;10;;public void someMethod(String body, @Header("foo") String header, @ExchangeProperty("cheese") String cheese) throws ValidationException {     assertEquals("old", cheese).     if ("bar".equals(header)) {         LOG.info("someMethod() called with valid header and body: " + body).     } else {         throw new ValidationException(null, "Invalid header foo: " + header).     } }
