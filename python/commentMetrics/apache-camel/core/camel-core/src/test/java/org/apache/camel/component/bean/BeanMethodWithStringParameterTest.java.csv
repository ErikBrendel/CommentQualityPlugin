commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyBean()).     return jndi. }
false;public;0;8;;@Test public void testBean() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello WorldHello World").     template.sendBody("direct:start", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testBeanOther() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     template.sendBody("direct:other", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to("bean:myBean?method=doSomething('Hello World', 2)").to("mock:result").     from("direct:other").to("bean:myBean?method=doSomethingWithExchange('Bye')").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:myBean?method=doSomething('Hello World', 2)").to("mock:result").             from("direct:other").to("bean:myBean?method=doSomethingWithExchange('Bye')").to("mock:result").         }     }. }
false;public,static;2;8;;public static String doSomething(String name, int repeat) {     StringBuffer sb = new StringBuffer().     for (int i = 0. i < repeat. i++) {         sb.append(name).     }     return sb.toString(). }
false;public,static;2;3;;public static String doSomethingWithExchange(String name, Exchange exchange) {     return name + " " + exchange.getIn().getBody(String.class). }
