commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@Test public void testRedeliveryCounterIsResetWhenHandled() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         // we tried to handle that exception but then another exception occurred         // so this exchange failed with an exception         fail("Should throw an exception").     } catch (CamelExecutionException e) {         ConnectException cause = assertIsInstanceOf(ConnectException.class, e.getCause()).         assertEquals("Cannot connect to bar server", cause.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals("123", counter). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {         String s = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).         counter += s.     }     // we throw an exception here, but the default error handler should not kick in     throw new ConnectException("Cannot connect to bar server"). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {         String s = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).         counter += s.     }     throw new ConnectException("Cannot connect to foo server"). }
false;public;0;29;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(0)).     onException(IOException.class).maximumRedeliveries(3).handled(true).process(new Processor() {          public void process(Exchange exchange) throws Exception {             if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {                 String s = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).                 counter += s.             }             // we throw an exception here, but the default error handler should not kick in             throw new ConnectException("Cannot connect to bar server").         }     }).to("mock:other").     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {                 String s = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).                 counter += s.             }             throw new ConnectException("Cannot connect to foo server").         }     }).to("mock:result"). }
false;protected;0;34;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().maximumRedeliveries(5).redeliveryDelay(0)).             onException(IOException.class).maximumRedeliveries(3).handled(true).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {                         String s = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).                         counter += s.                     }                     // we throw an exception here, but the default error handler should not kick in                     throw new ConnectException("Cannot connect to bar server").                 }             }).to("mock:other").             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     if (exchange.getIn().getHeader(Exchange.REDELIVERED) != null) {                         String s = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).                         counter += s.                     }                     throw new ConnectException("Cannot connect to foo server").                 }             }).to("mock:result").         }     }. }
