commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testSedaNoTimeout() throws Exception {     Future<String> out = template.asyncRequestBody("seda:foo", "World", String.class).     assertEquals("Bye World", out.get()). }
false;public;0;15;;@Test public void testSedaTimeout() throws Exception {     Future<String> out = template.asyncRequestBody("seda:foo?timeout=" + timeout, "World", String.class).     try {         out.get().         fail("Should have thrown an exception").     } catch (ExecutionException e) {         assertIsInstanceOf(CamelExecutionException.class, e.getCause()).         assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause().getCause()).         SedaEndpoint se = (SedaEndpoint) context.getRoute("seda").getEndpoint().         assertNotNull("Consumer endpoint cannot be null", se).         assertEquals("Timeout Exchanges should be removed from queue", 0, se.getCurrentQueueSize()).     } }
false;public;0;6;;@Test public void testSedaTimeoutWithStoppedRoute() throws Exception {     context.getRouteController().stopRoute("seda").     timeout = 500.     testSedaTimeout(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("seda:foo").routeId("seda").to("mock:before").delay(250).transform(body().prepend("Bye ")).to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo").routeId("seda").to("mock:before").delay(250).transform(body().prepend("Bye ")).to("mock:result").         }     }. }
