commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myFilter", new MyDirectoryFilter<>()).     return jndi. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/directoryfilter").     super.setUp(). }
false;public;0;29;;@Test public void testFilterFilesWithARegularFile() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file:target/data/directoryfilter/skipDir/", "This is a file to be filtered", Exchange.FILE_NAME, "skipme.txt").     template.sendBodyAndHeader("file:target/data/directoryfilter/skipDir2/", "This is a file to be filtered", Exchange.FILE_NAME, "skipme.txt").     template.sendBodyAndHeader("file:target/data/directoryfilter/okDir/", "Hello World", Exchange.FILE_NAME, "hello.txt").     mock.assertIsSatisfied().     // check names     assertEquals(4, names.size()).     // copy to list so its easier to index     List<String> list = new ArrayList<>(names).     list.sort(null).     assertEquals("okDir", list.get(0)).     // windows or unix paths     assertTrue(list.get(0), list.get(1).equals("okDir/hello.txt") || list.get(1).equals("okDir\\hello.txt")).     assertEquals("skipDir", list.get(2)).     assertEquals("skipDir2", list.get(3)). }
false;public;0;3;;public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").         }     }. }
false;public;1;11;;public boolean accept(GenericFile<T> file) {     // remember the name due unit testing (should not be needed in regular use-cases)     names.add(file.getFileName()).     // we dont accept any files within directory starting with skip in the name     if (file.isDirectory() && file.getFileName().startsWith("skip")) {         return false.     }     return true. }
