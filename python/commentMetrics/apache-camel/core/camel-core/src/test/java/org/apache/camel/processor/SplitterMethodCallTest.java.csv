commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSplitUsingMethodCall() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedBodiesReceived("Claus", "James", "Willem").     template.sendBody("direct:start", "Claus@James@Willem").     assertMockEndpointsSatisfied(). }
false;protected;0;5;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("splitterBean", new SplitWordsBean()).     return jndi. }
false;public;0;7;;public void configure() {     // START SNIPPET: e1     from("direct:start").split().method("splitterBean", "splitWords").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").split().method("splitterBean", "splitWords").to("mock:result").         // END SNIPPET: e1         }     }. }
false;public,static;1;6;;public static List<String> splitWords(String body) {     // as we like. As this is based on a unit test we just do it easy     return Arrays.asList(body.split("@")). }
