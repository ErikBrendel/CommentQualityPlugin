commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("{{start}}").to("properties:{{cool.result}}"). }
false;public;0;16;;@Test public void testPropertiesComponent() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("{{start}}").to("properties:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{bar.end}}?locations=ref:coolBar"). }
false;public;0;16;;@Test public void testPropertiesComponentLocationsOverride() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{bar.end}}?locations=ref:coolBar").         }     }).     context.start().     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;17;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     Properties cool = new Properties().     cool.put("cool.end", "mock:end").     cool.put("cool.result", "mock:result").     cool.put("start", "direct:start").     jndi.bind("myCoolProperties", cool).     Properties bar = new Properties().     bar.put("bar.end", "mock:bar").     bar.put("dude", "direct:bar").     jndi.bind("coolBar", bar).     return jndi. }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocations(new String[] { "ref:myCoolProperties" }).     context.addComponent("properties", pc).     return context. }
