commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testChoiceNoErrorHandler() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "bar").     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) {     assertEquals("Hello World", exchange.getIn().getBody(String.class)). }
false;public;0;16;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("direct:start").choice().when(header("foo").isEqualTo("bar")).to("direct:end").otherwise().end().     from("direct:end").process(new Processor() {          public void process(Exchange exchange) {             assertEquals("Hello World", exchange.getIn().getBody(String.class)).         }     }).to("mock:result"). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("direct:start").choice().when(header("foo").isEqualTo("bar")).to("direct:end").otherwise().end().             from("direct:end").process(new Processor() {                  public void process(Exchange exchange) {                     assertEquals("Hello World", exchange.getIn().getBody(String.class)).                 }             }).to("mock:result").         }     }. }
