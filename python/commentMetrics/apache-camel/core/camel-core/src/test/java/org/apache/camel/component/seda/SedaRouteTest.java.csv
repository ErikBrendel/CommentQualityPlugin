commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     // make SEDA testing faster     System.setProperty("CamelSedaPollTimeout", "10").     super.setUp(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     System.clearProperty("CamelSedaPollTimeout").     super.tearDown(). }
false;public;1;4;;public void process(Exchange e) {     log.debug("Received exchange: " + e.getIn()).     latch.countDown(). }
false;public;0;9;;public void configure() {     from("seda:test.a").to("seda:test.b").     from("seda:test.b").process(new Processor() {          public void process(Exchange e) {             log.debug("Received exchange: " + e.getIn()).             latch.countDown().         }     }). }
false;public;0;34;;@Test public void testSedaQueue() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     CamelContext context = new DefaultCamelContext().     // lets add some routes     context.addRoutes(new RouteBuilder() {          public void configure() {             from("seda:test.a").to("seda:test.b").             from("seda:test.b").process(new Processor() {                  public void process(Exchange e) {                     log.debug("Received exchange: " + e.getIn()).                     latch.countDown().                 }             }).         }     }).     context.start().     // now lets fire in a message     Endpoint endpoint = context.getEndpoint("seda:test.a").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setHeader("cheese", 123).     Producer producer = endpoint.createProducer().     producer.process(exchange).     // now lets sleep for a while     assertTrue(latch.await(5, TimeUnit.SECONDS)).     context.stop(). }
false;public;1;4;;public void process(Exchange e) {     log.debug("Received exchange: " + e.getIn()).     latch.countDown(). }
false;public;0;9;;public void configure() {     from("seda:test.a").to("seda:test.b").     from("seda:test.b").process(new Processor() {          public void process(Exchange e) {             log.debug("Received exchange: " + e.getIn()).             latch.countDown().         }     }). }
false;public;0;34;;@Test public void testThatShowsEndpointResolutionIsNotConsistent() throws Exception {     final CountDownLatch latch = new CountDownLatch(1).     CamelContext context = new DefaultCamelContext().     // lets add some routes     context.addRoutes(new RouteBuilder() {          public void configure() {             from("seda:test.a").to("seda:test.b").             from("seda:test.b").process(new Processor() {                  public void process(Exchange e) {                     log.debug("Received exchange: " + e.getIn()).                     latch.countDown().                 }             }).         }     }).     context.start().     // now lets fire in a message     Endpoint endpoint = context.getEndpoint("seda:test.a").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setHeader("cheese", 123).     Producer producer = endpoint.createProducer().     producer.process(exchange).     // now lets sleep for a while     assertTrue(latch.await(5, TimeUnit.SECONDS)).     context.stop(). }
