commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/inbox").     deleteDirectory("target/data/outbox").     super.setUp(). }
false;public;0;12;;@Test public void testRecipientListUseOriginalMessageIssue() throws Exception {     getMockEndpoint("mock:error").expectedMinimumMessageCount(1).     template.sendBodyAndHeader("file:target/data/inbox", "A", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     File out = new File("target/data/outbox/hello.txt").     String data = context.getTypeConverter().convertTo(String.class, out).     assertEquals("A", data). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     // try to put some invalid destination     exchange.getIn().setHeader("path", "xxx"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("B"). }
false;public;0;20;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).useOriginalMessage().to("file://target/data/outbox").to("mock:error").     from("file://target/data/inbox?initialDelay=0&delay=10").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("B").         }     }).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // try to put some invalid destination             exchange.getIn().setHeader("path", "xxx").         }     }).recipientList(header("path")). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).useOriginalMessage().to("file://target/data/outbox").to("mock:error").             from("file://target/data/inbox?initialDelay=0&delay=10").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     exchange.getIn().setBody("B").                 }             }).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // try to put some invalid destination                     exchange.getIn().setHeader("path", "xxx").                 }             }).recipientList(header("path")).         }     }. }
