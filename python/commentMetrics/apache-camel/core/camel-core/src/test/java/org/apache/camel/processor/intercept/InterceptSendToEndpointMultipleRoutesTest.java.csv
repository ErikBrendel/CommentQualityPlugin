commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;8;;@Override public void configure() throws Exception {     super.configure().     from("direct:a").to("seda:a").to("mock:result"). }
false;public;0;8;;@Override public void configure() throws Exception {     super.configure().     from("direct:b").to("seda:b").to("mock:result"). }
false;public;0;9;;@Override public void configure() throws Exception {     super.configure().     from("direct:c").to("seda:c").to("mock:c").to("mock:result"). }
false;public;0;48;;@Test public void testInterceptEndpoint() throws Exception {     // NOTE: each of these routes must extend our base route class     context.addRoutes(new MyBaseRoute() {          @Override         public void configure() throws Exception {             super.configure().             from("direct:a").to("seda:a").to("mock:result").         }     }).     context.addRoutes(new MyBaseRoute() {          @Override         public void configure() throws Exception {             super.configure().             from("direct:b").to("seda:b").to("mock:result").         }     }).     context.addRoutes(new MyBaseRoute() {          @Override         public void configure() throws Exception {             super.configure().             from("direct:c").to("seda:c").to("mock:c").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("A", "B", "C").     getMockEndpoint("mock:detour").expectedBodiesReceived("A", "B", "C").     getMockEndpoint("mock:c").expectedBodiesReceived("C").     template.sendBody("direct:a", "A").     template.sendBody("direct:b", "B").     template.sendBody("direct:c", "C").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     // base route with common interceptors     interceptSendToEndpoint("seda:*").skipSendToOriginalEndpoint().to("mock:detour"). }
