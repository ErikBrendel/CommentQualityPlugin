commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testInOutWithRequestBody() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:pickedUp").     mock.expectedMessageCount(1).     // this direct endpoint should receive an exception     try {         Future<Object> obj = template.asyncRequestBody("direct:in", "Hello World").         // wait five seconds at most. else, let's assume something went wrong         obj.get(5000, TimeUnit.MILLISECONDS).     } catch (Exception e) {         // if we receive an exception, the async routing engine is working correctly         // before the Enricher was fixed for cases where routing was async and the AggregationStrategy         // threw an exception, the call to requestBody would stall indefinitely         // unwrap the exception chain         assertTrue(e instanceof ExecutionException).         assertTrue(e.getCause() instanceof CamelExecutionException).         assertTrue(e.getCause().getCause() instanceof CamelExchangeException).         assertTrue(e.getCause().getCause().getCause() instanceof RuntimeException).         assertTrue(e.getCause().getCause().getCause().getMessage().equals("Bang! Unhandled exception")).         mock.assertIsSatisfied().         return.     }     fail("Expected an RuntimeException"). }
false;protected;0;10;;protected CamelContext createCamelContext() throws Exception {     CamelContext camelContext = super.createCamelContext().     camelContext.init().     ShutdownStrategy shutdownStrategy = camelContext.getShutdownStrategy().     camelContext.addComponent("async", new MyAsyncComponent()).     shutdownStrategy.setTimeout(1000).     shutdownStrategy.setTimeUnit(TimeUnit.MILLISECONDS).     shutdownStrategy.setShutdownNowOnTimeout(true).     return camelContext. }
false;public;2;4;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     throw new RuntimeException("Bang! Unhandled exception"). }
false;public;0;12;;public void configure() throws Exception {     from("direct:in").to("mock:pickedUp").enrich("async:out?reply=Reply", new AggregationStrategy() {          @Override         public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             throw new RuntimeException("Bang! Unhandled exception").         }     }). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").to("mock:pickedUp").enrich("async:out?reply=Reply", new AggregationStrategy() {                  @Override                 public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     throw new RuntimeException("Bang! Unhandled exception").                 }             }).         }     }. }
