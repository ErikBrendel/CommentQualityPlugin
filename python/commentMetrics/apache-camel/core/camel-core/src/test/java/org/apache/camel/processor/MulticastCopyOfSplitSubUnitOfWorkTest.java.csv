commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testOK() throws Exception {     counter = 0.     getMockEndpoint("mock:dead").expectedMessageCount(0).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:line").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testError() throws Exception {     counter = 0.     getMockEndpoint("mock:dead").expectedMessageCount(1).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:line").expectedMessageCount(0).     template.sendBody("direct:start", "Hello Donkey").     assertMockEndpointsSatisfied().     // 1 first + 3 redeliveries     assertEquals(4, counter). }
false;public;0;23;;@Override public void configure() throws Exception {     // START SNIPPET: e1     errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0)).     from("direct:start").to("mock:a").multicast().shareUnitOfWork().to("mock:b").to("direct:line").end().to("mock:result").     from("direct:line").to("log:line").process(new MyProcessor()).to("mock:line"). // END SNIPPET: e1 }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             errorHandler(deadLetterChannel("mock:dead").useOriginalMessage().maximumRedeliveries(3).redeliveryDelay(0)).             from("direct:start").to("mock:a").multicast().shareUnitOfWork().to("mock:b").to("direct:line").end().to("mock:result").             from("direct:line").to("log:line").process(new MyProcessor()).to("mock:line").         // END SNIPPET: e1         }     }. }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body.contains("Donkey")) {         counter++.         throw new IllegalArgumentException("Donkey not allowed").     } }
