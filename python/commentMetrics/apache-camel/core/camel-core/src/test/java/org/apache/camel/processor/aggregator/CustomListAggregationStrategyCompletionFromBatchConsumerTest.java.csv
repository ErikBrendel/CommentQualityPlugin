commented;modifiers;parameterAmount;loc;comment;code
false;public;0;21;;@SuppressWarnings("unchecked") @Test public void testCustomAggregationStrategy() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/batch", "100", Exchange.FILE_NAME, "1.txt").     template.sendBodyAndHeader("file:target/data/batch", "150", Exchange.FILE_NAME, "2.txt").     template.sendBodyAndHeader("file:target/data/batch", "130", Exchange.FILE_NAME, "3.txt").     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     // the list will be stored as the message body by default     List<Integer> numbers = result.getExchanges().get(0).getIn().getBody(List.class).     assertNotNull(numbers).     assertEquals(Integer.valueOf("100"), numbers.get(0)).     assertEquals(Integer.valueOf("150"), numbers.get(1)).     assertEquals(Integer.valueOf("130"), numbers.get(2)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file:target/data/batch?initialDelay=0&delay=10&sortBy=file:name").routeId("foo").noAutoStartup().aggregate(new MyListOfNumbersStrategy()).constant(true).completionFromBatchConsumer().to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/batch?initialDelay=0&delay=10&sortBy=file:name").routeId("foo").noAutoStartup().aggregate(new MyListOfNumbersStrategy()).constant(true).completionFromBatchConsumer().to("mock:result").         }     }. }
false;public;1;5;;@Override public Integer getValue(Exchange exchange) {     String s = exchange.getIn().getBody(String.class).     return Integer.valueOf(s). }
