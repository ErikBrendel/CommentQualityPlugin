commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSingle() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBody("direct:single", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testDouble() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBody("direct:double", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testHeader() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBodyAndHeader("direct:header", "Camel", "myHeader", "e()f").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testCron() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     template.sendBody("direct:cron", new MyCronBody("SomeID", "(0 0 10,11,12 * * ?)")).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyBean()).     return jndi. }
false;public;0;30;;@Override public void configure() throws Exception {     from("direct:single").choice().when().simple("${bean:foo?method=bar(${body}, 'a()b')}").to("mock:result").otherwise().to("mock:other").     from("direct:double").choice().when().simple("${bean:foo?method=bar(${body}, \"a()b\")}").to("mock:result").otherwise().to("mock:other").     from("direct:header").choice().when().simple("${bean:foo?method=bar(${body}, ${header.myHeader})}").to("mock:result").otherwise().to("mock:other").     from("direct:cron").choice().when().simple("${bean:foo?method=bar(${body.id}, ${body.cron})}").to("mock:result").otherwise().to("mock:other"). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:single").choice().when().simple("${bean:foo?method=bar(${body}, 'a()b')}").to("mock:result").otherwise().to("mock:other").             from("direct:double").choice().when().simple("${bean:foo?method=bar(${body}, \"a()b\")}").to("mock:result").otherwise().to("mock:other").             from("direct:header").choice().when().simple("${bean:foo?method=bar(${body}, ${header.myHeader})}").to("mock:result").otherwise().to("mock:other").             from("direct:cron").choice().when().simple("${bean:foo?method=bar(${body.id}, ${body.cron})}").to("mock:result").otherwise().to("mock:other").         }     }. }
false;public;2;4;;public boolean bar(String body, String extra) {     // we are testing that we can pass in () as value for a parameter     return extra.contains("(") && extra.contains(")"). }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public String getCron() {     return cron. }
