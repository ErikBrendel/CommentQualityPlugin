commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testBeanReturnCallable() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("StartMyBean").     mock.expectedHeaderReceived("user", "admin").     mock.expectedHeaderReceived("foo", "bar").     template.requestBody("direct:in", "Start").     mock.assertIsSatisfied(). }
false;protected;0;5;;protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", new MyBean()).     return answer. }
false;public;0;6;;public void configure() throws Exception {     from("direct:in").setHeader("foo", constant("bar")).to("bean:myBean").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:in").setHeader("foo", constant("bar")).to("bean:myBean").to("mock:result").         }     }. }
false;public;0;8;;@Override public Object call() throws Exception {     String body = exchange.getIn().getBody(String.class).     exchange.getIn().setHeader("user", "admin").     exchange.getIn().setBody(body + "MyBean").     // return null as we have set changes already     return null. }
false;public;1;12;;public Callable doSomething(final Exchange exchange) {     return new Callable() {          @Override         public Object call() throws Exception {             String body = exchange.getIn().getBody(String.class).             exchange.getIn().setHeader("user", "admin").             exchange.getIn().setBody(body + "MyBean").             // return null as we have set changes already             return null.         }     }. }
