commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     // mock sending to direct:foo and skip send to it     mockEndpointsAndSkip("direct:foo"). }
true;public;0;23;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testAdvisedMockEndpointsWithSkip() throws Exception {     // advice the first route using the inlined AdviceWith route builder     // which has extended capabilities than the regular route builder     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // mock sending to direct:foo and skip send to it             mockEndpointsAndSkip("direct:foo").         }     }).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:direct:foo").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // the message was not send to the direct:foo route and thus not sent to the seda endpoint     SedaEndpoint seda = context.getEndpoint("seda:foo", SedaEndpoint.class).     assertEquals(0, seda.getCurrentQueueSize()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").to("mock:result").     from("direct:foo").transform(constant("Bye World")).to("seda:foo"). }
true;protected;0;11;// START SNIPPET: route ;// END SNIPPET: e1 // START SNIPPET: route @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").to("mock:result").             from("direct:foo").transform(constant("Bye World")).to("seda:foo").         }     }. }
