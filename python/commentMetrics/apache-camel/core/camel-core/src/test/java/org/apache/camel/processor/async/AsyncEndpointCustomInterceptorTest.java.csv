commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye Camel", reply).     assertMockEndpointsSatisfied().     assertEquals(8, interceptor.getCounter()).     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;23;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     context.addInterceptStrategy(interceptor).     from("direct:start").to("mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).to("async:bye:camel").process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:after").to("mock:result"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             context.addInterceptStrategy(interceptor).             from("direct:start").to("mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).to("async:bye:camel").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:after").to("mock:result").         }     }. }
false;public;2;6;;public boolean process(final Exchange exchange, final AsyncCallback callback) {     // we just want to count number of interceptions     counter.incrementAndGet().     // and continue processing the exchange     return super.process(exchange, callback). }
false;public;4;12;;public Processor wrapProcessorInInterceptors(final CamelContext context, final NamedNode definition, final Processor target, final Processor nextTarget) throws Exception {     return new DelegateAsyncProcessor(target) {          public boolean process(final Exchange exchange, final AsyncCallback callback) {             // we just want to count number of interceptions             counter.incrementAndGet().             // and continue processing the exchange             return super.process(exchange, callback).         }     }. }
false;public;0;3;;public int getCounter() {     return counter.get(). }
