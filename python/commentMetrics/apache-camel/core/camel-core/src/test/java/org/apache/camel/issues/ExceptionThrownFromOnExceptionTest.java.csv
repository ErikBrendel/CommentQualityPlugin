commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     ON_EXCEPTION_RETRY.incrementAndGet().     throw new IOException("Some other IOException"). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     RETRY.incrementAndGet().     throw new IOException("IO error"). }
false;public;0;31;;@Override public void configure() throws Exception {     // on exception to catch all IO exceptions and handle them specially     onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             ON_EXCEPTION_RETRY.incrementAndGet().             throw new IOException("Some other IOException").         }     }).to("mock:c").     from("direct:start").to("direct:intermediate").to("mock:result").     from("direct:intermediate").to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             RETRY.incrementAndGet().             throw new IOException("IO error").         }     }).to("mock:end"). }
false;public;0;59;;@Test public void testExceptionThrownFromOnException() throws Exception {     RETRY.set(0).     ON_EXCEPTION_RETRY.set(0).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // on exception to catch all IO exceptions and handle them specially             onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     ON_EXCEPTION_RETRY.incrementAndGet().                     throw new IOException("Some other IOException").                 }             }).to("mock:c").             from("direct:start").to("direct:intermediate").to("mock:result").             from("direct:intermediate").to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     RETRY.incrementAndGet().                     throw new IOException("IO error").                 }             }).to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         IOException cause = assertIsInstanceOf(IOException.class, e.getCause()).         assertEquals("Some other IOException", cause.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals("Should try 4 times (1 first, 3 retry)", 4, RETRY.get()).     assertEquals("Should only invoke onException once", 1, ON_EXCEPTION_RETRY.get()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     ON_EXCEPTION_RETRY.incrementAndGet().     throw new IOException("Some other IOException"). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     RETRY.incrementAndGet().     throw new IOException("IO error"). }
false;public;0;33;;@Override public void configure() throws Exception {     // on exception to catch all IO exceptions and handle them specially     onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).handled(true).to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             ON_EXCEPTION_RETRY.incrementAndGet().             throw new IOException("Some other IOException").         }     }).to("mock:c").     from("direct:start").to("direct:intermediate").to("mock:result").     from("direct:intermediate").to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             RETRY.incrementAndGet().             throw new IOException("IO error").         }     }).to("mock:end"). }
false;public;0;61;;@Test public void testExceptionThrownFromOnExceptionAndHandled() throws Exception {     RETRY.set(0).     ON_EXCEPTION_RETRY.set(0).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // on exception to catch all IO exceptions and handle them specially             onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).handled(true).to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     ON_EXCEPTION_RETRY.incrementAndGet().                     throw new IOException("Some other IOException").                 }             }).to("mock:c").             from("direct:start").to("direct:intermediate").to("mock:result").             from("direct:intermediate").to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     RETRY.incrementAndGet().                     throw new IOException("IO error").                 }             }).to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         IOException cause = assertIsInstanceOf(IOException.class, e.getCause()).         assertEquals("Some other IOException", cause.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals("Should try 4 times (1 first, 3 retry)", 4, RETRY.get()).     assertEquals("Should only invoke onException once", 1, ON_EXCEPTION_RETRY.get()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     ON_EXCEPTION_RETRY.incrementAndGet().     throw new IOException("Some other IOException"). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     RETRY.incrementAndGet().     throw new IOException("IO error"). }
false;public;0;34;;@Override public void configure() throws Exception {     // DLC     deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).     // on exception to catch all IO exceptions and handle them specially     onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             ON_EXCEPTION_RETRY.incrementAndGet().             throw new IOException("Some other IOException").         }     }).to("mock:c").     from("direct:start").to("direct:intermediate").to("mock:result").     from("direct:intermediate").to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             RETRY.incrementAndGet().             throw new IOException("IO error").         }     }).to("mock:end"). }
false;public;0;65;;@Test public void testExceptionThrownFromOnExceptionWithDeadLetterChannel() throws Exception {     RETRY.set(0).     ON_EXCEPTION_RETRY.set(0).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // DLC             deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).             // on exception to catch all IO exceptions and handle them specially             onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     ON_EXCEPTION_RETRY.incrementAndGet().                     throw new IOException("Some other IOException").                 }             }).to("mock:c").             from("direct:start").to("direct:intermediate").to("mock:result").             from("direct:intermediate").to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     RETRY.incrementAndGet().                     throw new IOException("IO error").                 }             }).to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     // the error will not be handled by DLC since we had an onException, and that failed,     // so the exchange will throw an exception     getMockEndpoint("mock:error").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         IOException cause = assertIsInstanceOf(IOException.class, e.getCause()).         assertEquals("Some other IOException", cause.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals("Should try 4 times (1 first, 3 retry)", 4, RETRY.get()).     assertEquals("Should only invoke onException once", 1, ON_EXCEPTION_RETRY.get()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     ON_EXCEPTION_RETRY.incrementAndGet().     throw new IOException("Some other IOException"). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     RETRY.incrementAndGet().     throw new IOException("IO error"). }
false;public;0;36;;@Override public void configure() throws Exception {     // DLC     deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).     // on exception to catch all IO exceptions and handle them specially     onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).handled(true).to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             ON_EXCEPTION_RETRY.incrementAndGet().             throw new IOException("Some other IOException").         }     }).to("mock:c").     from("direct:start").to("direct:intermediate").to("mock:result").     from("direct:intermediate").to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             RETRY.incrementAndGet().             throw new IOException("IO error").         }     }).to("mock:end"). }
false;public;0;67;;@Test public void testExceptionThrownFromOnExceptionAndHandledWithDeadLetterChannel() throws Exception {     RETRY.set(0).     ON_EXCEPTION_RETRY.set(0).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // DLC             deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).             // on exception to catch all IO exceptions and handle them specially             onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).handled(true).to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     ON_EXCEPTION_RETRY.incrementAndGet().                     throw new IOException("Some other IOException").                 }             }).to("mock:c").             from("direct:start").to("direct:intermediate").to("mock:result").             from("direct:intermediate").to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     RETRY.incrementAndGet().                     throw new IOException("IO error").                 }             }).to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(0).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     // the error will not be handled by DLC since we had an onException, and that failed,     // so the exchange will throw an exception     getMockEndpoint("mock:error").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         IOException cause = assertIsInstanceOf(IOException.class, e.getCause()).         assertEquals("Some other IOException", cause.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals("Should try 4 times (1 first, 3 retry)", 4, RETRY.get()).     assertEquals("Should only invoke onException once", 1, ON_EXCEPTION_RETRY.get()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     ON_EXCEPTION_RETRY.incrementAndGet(). // no exception is thrown this time }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     RETRY.incrementAndGet().     throw new IOException("IO error"). }
false;public;0;34;;@Override public void configure() throws Exception {     // DLC     deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).     // on exception to catch all IO exceptions and handle them specially     onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             ON_EXCEPTION_RETRY.incrementAndGet().         // no exception is thrown this time         }     }).to("mock:c").     from("direct:start").to("direct:intermediate").to("mock:result").     from("direct:intermediate").to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             RETRY.incrementAndGet().             throw new IOException("IO error").         }     }).to("mock:end"). }
false;public;0;67;;@Test public void testNoExceptionThrownFromOnExceptionWithDeadLetterChannel() throws Exception {     RETRY.set(0).     ON_EXCEPTION_RETRY.set(0).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // DLC             deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).             // on exception to catch all IO exceptions and handle them specially             onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     ON_EXCEPTION_RETRY.incrementAndGet().                 // no exception is thrown this time                 }             }).to("mock:c").             from("direct:start").to("direct:intermediate").to("mock:result").             from("direct:intermediate").to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     RETRY.incrementAndGet().                     throw new IOException("IO error").                 }             }).to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     // the exception is handled by the onException and thus not the DLC     getMockEndpoint("mock:error").expectedMessageCount(0).     // but the caller still fails since handled is false on onException     try {         template.sendBody("direct:start", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         // this time its the first exception thrown from the route         IOException cause = assertIsInstanceOf(IOException.class, e.getCause()).         assertEquals("IO error", cause.getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals("Should try 4 times (1 first, 3 retry)", 4, RETRY.get()).     assertEquals("Should only invoke onException once", 1, ON_EXCEPTION_RETRY.get()). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     ON_EXCEPTION_RETRY.incrementAndGet(). // no exception is thrown this time }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     RETRY.incrementAndGet().     throw new IOException("IO error"). }
false;public;0;36;;@Override public void configure() throws Exception {     // DLC     deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).     // on exception to catch all IO exceptions and handle them specially     onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).handled(true).to("mock:b").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             ON_EXCEPTION_RETRY.incrementAndGet().         // no exception is thrown this time         }     }).to("mock:c").     from("direct:start").to("direct:intermediate").to("mock:result").     from("direct:intermediate").to("mock:a").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             RETRY.incrementAndGet().             throw new IOException("IO error").         }     }).to("mock:end"). }
false;public;0;62;;@Test public void testNoExceptionThrownFromOnExceptionAndHandledWithDeadLetterChannel() throws Exception {     RETRY.set(0).     ON_EXCEPTION_RETRY.set(0).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // DLC             deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3).             // on exception to catch all IO exceptions and handle them specially             onException(IOException.class).redeliveryDelay(0).maximumRedeliveries(3).handled(true).to("mock:b").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     ON_EXCEPTION_RETRY.incrementAndGet().                 // no exception is thrown this time                 }             }).to("mock:c").             from("direct:start").to("direct:intermediate").to("mock:result").             from("direct:intermediate").to("mock:a").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     RETRY.incrementAndGet().                     throw new IOException("IO error").                 }             }).to("mock:end").         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     // the exception is handled by onException so it goes not in DLC     getMockEndpoint("mock:error").expectedMessageCount(0).     // and this time there was no exception thrown from onException,     // and the exception is handled so the caller should not fail     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals("Should try 4 times (1 first, 3 retry)", 4, RETRY.get()).     assertEquals("Should only invoke onException once", 1, ON_EXCEPTION_RETRY.get()). }
