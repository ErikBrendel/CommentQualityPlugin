commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/done").     super.setUp(). }
false;public;0;19;;@Test public void testDoneFile() throws Exception {     getMockEndpoint("mock:input").expectedMessageCount(1).     template.sendBodyAndHeader("file:target/data/done", "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader("file:target/data/done", "", Exchange.FILE_NAME, "done").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // done file should be deleted now     File file = new File("target/data/done/done").     assertFalse("Done file should be deleted: " + file, file.exists()).     // as well the original file should be moved to failed     file = new File("target/data/done/failed/hello.txt").     assertTrue("Original file should be moved: " + file, file.exists()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:target/data/done?doneFileName=done&initialDelay=0&delay=10&moveFailed=failed").to("mock:input").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/done?doneFileName=done&initialDelay=0&delay=10&moveFailed=failed").to("mock:input").throwException(new IllegalArgumentException("Forced")).         }     }. }
