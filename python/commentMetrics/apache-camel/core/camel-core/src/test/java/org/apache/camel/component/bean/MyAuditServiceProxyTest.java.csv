commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testMyAuditServiceProxy() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedHeaderReceived("uuid", "1234").     // must enable binding on proxy     MyAuditService service = new ProxyBuilder(context).endpoint("direct:proxy").binding(true).build(MyAuditService.class).     service.auditMessage("1234", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:proxy").to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:proxy").to("mock:result").         }     }. }
