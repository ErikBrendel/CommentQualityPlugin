commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/noop").     super.setUp(). }
false;public;0;21;;@Test public void testRecursiveNoop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("a", "b", "a2", "c", "b2").     template.sendBodyAndHeader("file:target/data/noop", "a", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/noop", "b", Exchange.FILE_NAME, "b.txt").     template.sendBodyAndHeader("file:target/data/noop/foo", "a2", Exchange.FILE_NAME, "a.txt").     template.sendBodyAndHeader("file:target/data/noop/bar", "c", Exchange.FILE_NAME, "c.txt").     template.sendBodyAndHeader("file:target/data/noop/bar", "b2", Exchange.FILE_NAME, "b.txt").     assertMockEndpointsSatisfied().     // reset mock and send in a new file to be picked up only     mock.reset().     mock.expectedBodiesReceived("c2").     template.sendBodyAndHeader("file:target/data/noop", "c2", Exchange.FILE_NAME, "c.txt").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:target/data/noop?initialDelay=0&delay=10&recursive=true&noop=true").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/noop?initialDelay=0&delay=10&recursive=true&noop=true").convertBodyTo(String.class).to("mock:result").         }     }. }
