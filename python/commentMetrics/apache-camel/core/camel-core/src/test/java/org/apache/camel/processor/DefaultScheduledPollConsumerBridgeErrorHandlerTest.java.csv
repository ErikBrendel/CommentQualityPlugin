commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testDefaultConsumerBridgeErrorHandler() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     Exception cause = getMockEndpoint("mock:dead").getReceivedExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertNotNull(cause).     assertEquals("Simulated", cause.getMessage()). }
false;public;0;14;;@Override public void configure() throws Exception {     getContext().addComponent("my", new MyComponent()).     // configure error handler     errorHandler(deadLetterChannel("mock:dead")).     // configure the consumer to bridge with the Camel error handler,     // so the above error handler will trigger if exceptions also     // occurs inside the consumer     from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             getContext().addComponent("my", new MyComponent()).             // configure error handler             errorHandler(deadLetterChannel("mock:dead")).             // configure the consumer to bridge with the Camel error handler,             // so the above error handler will trigger if exceptions also             // occurs inside the consumer             from("my:foo?consumer.bridgeErrorHandler=true").to("log:foo").to("mock:result").         }     }. // END SNIPPET: e1 }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyEndpoint(uri, this). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return null. }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     Consumer answer = new MyConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;0;4;;@Override protected int poll() throws Exception {     throw new IllegalArgumentException("Simulated"). }
