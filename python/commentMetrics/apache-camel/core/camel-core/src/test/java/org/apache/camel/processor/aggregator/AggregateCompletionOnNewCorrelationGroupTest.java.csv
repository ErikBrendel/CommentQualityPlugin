commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testCompletionOnNewCorrelationGroup() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("AA", "BB", "CCC").     template.sendBodyAndHeader("direct:start", "A", "id", "1").     template.sendBodyAndHeader("direct:start", "A", "id", "1").     template.sendBodyAndHeader("direct:start", "B", "id", "2").     template.sendBodyAndHeader("direct:start", "B", "id", "2").     template.sendBodyAndHeader("direct:start", "C", "id", "3").     template.sendBodyAndHeader("direct:start", "C", "id", "3").     template.sendBodyAndHeader("direct:start", "C", "id", "3").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionOnNewCorrelationGroup().completionSize(3).to("log:aggregated", "mock:aggregated"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), new MyAggregationStrategy()).completionOnNewCorrelationGroup().completionSize(3).to("log:aggregated", "mock:aggregated").         }     }. }
false;public;2;11;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body1 = oldExchange.getIn().getBody(String.class).     String body2 = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body1 + body2).     return oldExchange. }
