commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/multicast").     super.setUp(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("file://target/data/multicast?initialDelay=0&delay=10").multicast().pipeline().transform(body().prepend("HEADER:")).to("file://target/data/multicast/out/?fileName=header.txt").to("mock:header").end().pipeline().transform(body().prepend("FOOTER:")).to("file://target/data/multicast/out/?fileName=footer.txt").to("mock:footer").end().end().to("mock:end"). }
false;public;0;39;;@Test public void testFromFileMulticastToFiles() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/multicast?initialDelay=0&delay=10").multicast().pipeline().transform(body().prepend("HEADER:")).to("file://target/data/multicast/out/?fileName=header.txt").to("mock:header").end().pipeline().transform(body().prepend("FOOTER:")).to("file://target/data/multicast/out/?fileName=footer.txt").to("mock:footer").end().end().to("mock:end").         }     }).     context.start().     MockEndpoint header = getMockEndpoint("mock:header").     header.expectedBodiesReceived("HEADER:foo").     header.expectedFileExists("target/data/multicast/out/header.txt").     MockEndpoint footer = getMockEndpoint("mock:footer").     footer.expectedBodiesReceived("FOOTER:foo").     footer.expectedFileExists("target/data/multicast/out/footer.txt").     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     end.expectedFileExists("target/data/multicast/.camel/foo.txt").     template.sendBodyAndHeader("file://target/data/multicast", "foo", Exchange.FILE_NAME, "foo.txt").     assertMockEndpointsSatisfied(). }
false;public;0;17;;@Override public void configure() throws Exception {     from("file://target/data/multicast?initialDelay=0&delay=10").multicast().parallelProcessing().pipeline().transform(body().prepend("HEADER:")).to("file://target/data/multicast/out/?fileName=header.txt").to("mock:header").end().pipeline().transform(body().prepend("FOOTER:")).to("file://target/data/multicast/out/?fileName=footer.txt").to("mock:footer").end().end().to("mock:end"). }
false;public;0;39;;@Test public void testFromFileMulticastParallelToFiles() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/multicast?initialDelay=0&delay=10").multicast().parallelProcessing().pipeline().transform(body().prepend("HEADER:")).to("file://target/data/multicast/out/?fileName=header.txt").to("mock:header").end().pipeline().transform(body().prepend("FOOTER:")).to("file://target/data/multicast/out/?fileName=footer.txt").to("mock:footer").end().end().to("mock:end").         }     }).     context.start().     MockEndpoint header = getMockEndpoint("mock:header").     header.expectedBodiesReceived("HEADER:foo").     header.expectedFileExists("target/data/multicast/out/header.txt").     MockEndpoint footer = getMockEndpoint("mock:footer").     footer.expectedBodiesReceived("FOOTER:foo").     footer.expectedFileExists("target/data/multicast/out/footer.txt").     MockEndpoint end = getMockEndpoint("mock:end").     end.expectedMessageCount(1).     end.expectedFileExists("target/data/multicast/.camel/foo.txt").     template.sendBodyAndHeader("file://target/data/multicast", "foo", Exchange.FILE_NAME, "foo.txt").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
