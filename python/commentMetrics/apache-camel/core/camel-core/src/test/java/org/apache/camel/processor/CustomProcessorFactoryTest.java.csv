commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;8;;@Override protected // START SNIPPET: e1 CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     // register our custom factory     context.setProcessorFactory(new MyFactory()).     return context. }
true;public;0;8;// START SNIPPET: e2 ;// END SNIPPET: e1 // START SNIPPET: e2 @Test public void testAlterDefinitionUsingProcessorFactory() throws Exception {     getMockEndpoint("mock:foo").expectedBodiesReceived("body was altered").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testAlterDefinitionUsingProcessorFactoryWithChild() throws Exception {     getMockEndpoint("mock:split").expectedBodiesReceived("body was altered", "body was altered").     getMockEndpoint("mock:extra").expectedBodiesReceived("body was altered", "body was altered").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello,World").     template.sendBody("direct:foo", "Hello,World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start").setBody().constant("body not altered").to("mock:foo").     from("direct:foo").split(body()).setBody().constant("body not altered").to("mock:split").end().to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setBody().constant("body not altered").to("mock:foo").             from("direct:foo").split(body()).setBody().constant("body not altered").to("mock:split").end().to("mock:result").         }     }. }
false;public;3;3;;public Processor createChildProcessor(RouteContext routeContext, NamedNode definition, boolean mandatory) throws Exception {     return null. }
false;public;2;16;;public Processor createProcessor(RouteContext routeContext, NamedNode definition) throws Exception {     if (definition instanceof SplitDefinition) {         // add additional output to the splitter         SplitDefinition split = (SplitDefinition) definition.         split.addOutput(new ToDefinition("mock:extra")).     }     if (definition instanceof SetBodyDefinition) {         SetBodyDefinition set = (SetBodyDefinition) definition.         set.setExpression(new ConstantExpression("body was altered")).     }     // before the processor was created     return null. }
