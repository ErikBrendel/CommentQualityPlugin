commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testThreadNotUsedForEveryAggregatorWithCustomExecutorService() throws Exception {     assertTrue("There should not be a thread for every aggregator when using a shared thread pool", aggregateThreadsCount() < NUM_AGGREGATORS).     // sanity check to make sure were testing routes that work     for (int i = 0. i < NUM_AGGREGATORS. ++i) {         MockEndpoint result = getMockEndpoint("mock:result" + i).         // by default the use latest aggregation strategy is used so we get message 4         result.expectedBodiesReceived("Message 4").     }     for (int i = 0. i < NUM_AGGREGATORS. ++i) {         for (int j = 0. j < 5. j++) {             template.sendBodyAndHeader("direct:start" + i, "Message " + j, "id", "1").         }     }     assertMockEndpointsSatisfied(). }
false;public,static;0;12;;public static int aggregateThreadsCount() {     int count = 0.     ThreadGroup threadGroup = Thread.currentThread().getThreadGroup().     Thread[] threads = new Thread[threadGroup.activeCount()].     threadGroup.enumerate(threads).     for (Thread thread : threads) {         if (thread != null && thread.getName().contains(AggregateProcessor.AGGREGATE_TIMEOUT_CHECKER)) {             ++count.         }     }     return count. }
false;public;0;12;;@Override public void configure() throws Exception {     // share 8 threads among the 20 routes     ScheduledExecutorService threadPool = context.getExecutorServiceManager().newScheduledThreadPool(this, "MyThreadPool", 8).     for (int i = 0. i < NUM_AGGREGATORS. ++i) {         from("direct:start" + i).aggregate(header("id"), new UseLatestAggregationStrategy()).completionTimeout(100).timeoutCheckerExecutorService(threadPool).completionTimeoutCheckerInterval(10).to("mock:result" + i).     } }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // share 8 threads among the 20 routes             ScheduledExecutorService threadPool = context.getExecutorServiceManager().newScheduledThreadPool(this, "MyThreadPool", 8).             for (int i = 0. i < NUM_AGGREGATORS. ++i) {                 from("direct:start" + i).aggregate(header("id"), new UseLatestAggregationStrategy()).completionTimeout(100).timeoutCheckerExecutorService(threadPool).completionTimeoutCheckerInterval(10).to("mock:result" + i).             }         }     }. }
