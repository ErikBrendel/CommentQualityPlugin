commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/inbox").     super.setUp(). }
false;public;0;18;;@Test public void testConsumeSameFileAgain() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // some file systems may read files in different order     mock.expectedBodiesReceivedInAnyOrder("Hello World", "Foo").     template.sendBodyAndHeader("file://target/data/inbox", "Hello World", Exchange.FILE_NAME, "foo.txt").     template.sendBodyAndHeader("file://target/data/inbox", "Foo", Exchange.FILE_NAME, "bar.txt").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedBodiesReceived("Bye World").     template.sendBodyAndHeader("file://target/data/inbox", "Bye World", Exchange.FILE_NAME, "foo.txt").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from(uri).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(uri).convertBodyTo(String.class).to("mock:result").         }     }. }
