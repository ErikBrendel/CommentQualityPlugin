commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Test public void testContinuedTwo() throws Exception {     getMockEndpoint("mock:me").expectedMessageCount(2).     super.testContinuedTwo().     assertEquals(2, predicateInvoked.get()).     assertEquals(2, processorInvoked.get()). }
false;public;1;5;;@Override public boolean matches(Exchange exchange) {     predicateInvoked.incrementAndGet().     return true. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     processorInvoked.incrementAndGet(). }
false;public;0;30;;@Override public void configure() throws Exception {     // use a predicate instance     Predicate predicate = new Predicate() {          @Override         public boolean matches(Exchange exchange) {             predicateInvoked.incrementAndGet().             return true.         }     }.     // tell Camel to handle and continue when this exception is thrown     onException(IllegalArgumentException.class).continued(predicate).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             processorInvoked.incrementAndGet().         }     }).to("mock:me").     from("direct:start").to("mock:start").throwException(new IllegalArgumentException("Forced")).to("mock:middle").throwException(new IllegalArgumentException("Forced Again")).to("mock:result"). }
false;protected;0;35;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use a predicate instance             Predicate predicate = new Predicate() {                  @Override                 public boolean matches(Exchange exchange) {                     predicateInvoked.incrementAndGet().                     return true.                 }             }.             // tell Camel to handle and continue when this exception is thrown             onException(IllegalArgumentException.class).continued(predicate).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     processorInvoked.incrementAndGet().                 }             }).to("mock:me").             from("direct:start").to("mock:start").throwException(new IllegalArgumentException("Forced")).to("mock:middle").throwException(new IllegalArgumentException("Forced Again")).to("mock:result").         }     }. }
