commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;public void testConsumerContext() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     String out = template2.requestBody("direct:start", "Hello World", String.class).     assertEquals("Hello World", out).     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     // using "toD" instead of "to" make use of the exchange context to resolve the direct endpoint at route execution.     // if the exchange context is not the excepted one, the toD will fail     from("vm:test").toD("direct:process").     from("direct:process").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // using "toD" instead of "to" make use of the exchange context to resolve the direct endpoint at route execution.             // if the exchange context is not the excepted one, the toD will fail             from("vm:test").toD("direct:process").             from("direct:process").to("mock:result").         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("vm:test"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("vm:test").         }     }. }
