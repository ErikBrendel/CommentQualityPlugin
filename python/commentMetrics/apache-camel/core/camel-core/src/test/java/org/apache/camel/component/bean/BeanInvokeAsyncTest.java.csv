commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testDoSomething() throws Exception {     runTestSendBody("Hello World", "Hello World", this::doSomething).     runTestSendBody("", "", this::doSomething).     runTestSendBody(this::expectNullBody, null, this::doSomething). }
false;public;0;7;;@Test public void testChangeSomething() throws Exception {     runTestSendBody("Bye World", "Hello World", this::changeSomething).     runTestSendBody("Bye All", null, this::changeSomething).     runTestSendBody("Bye All", "", this::changeSomething). }
false;public;0;6;;@Test public void testDoNothing() throws Exception {     runTestSendBody("Hello World", "Hello World", this::doNothing).     runTestSendBody("", "", this::doNothing).     runTestSendBody(this::expectNullBody, null, this::doNothing). }
false;public;0;11;;@Test public void testThrowSomething() throws Exception {     try {         runTestSendBody(m -> m.expectedMessageCount(0), "SomeProblem", this::throwSomething).         fail("Exception expected").     } catch (ExecutionException e) {         Assert.assertTrue(e.getCause() instanceof CamelExecutionException).         Assert.assertTrue(e.getCause().getCause() instanceof IllegalStateException).         Assert.assertEquals("SomeProblem", e.getCause().getCause().getMessage()).     } }
false;private;3;4;;private void runTestSendBody(String expectedBody, String sentBody, Function<String, String> processor) throws Exception {     runTestSendBody(m -> m.expectedBodiesReceived(expectedBody), sentBody, processor). }
false;private;3;22;;private void runTestSendBody(Consumer<MockEndpoint> mockPreparer, String sentBody, Function<String, String> processor) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.reset().     mockPreparer.accept(mock).     callFuture = new CompletableFuture<>().     methodInvoked = new CountDownLatch(1).     sendFuture = template.asyncSendBody("direct:entry", sentBody).     Assert.assertTrue(methodInvoked.await(5, TimeUnit.SECONDS)).     Assert.assertEquals(0, mock.getReceivedCounter()).     Assert.assertFalse(sendFuture.isDone()).     try {         callFuture.complete(processor.apply(receivedBody)).     } catch (Exception e) {         callFuture.completeExceptionally(e).     }     sendFuture.get().     assertMockEndpointsSatisfied(). }
false;private;1;4;;private void expectNullBody(MockEndpoint mock) {     mock.expectedMessageCount(1).     mock.message(0).body().isNull(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:entry").bean(BeanInvokeAsyncTest.this, "asyncMethod").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:entry").bean(BeanInvokeAsyncTest.this, "asyncMethod").to("mock:result").         }     }. }
true;public;1;5;// java 8 async return type ;// java 8 async return type public CompletableFuture<?> asyncMethod(String body) {     this.receivedBody = body.     methodInvoked.countDown().     return callFuture. }
false;public;1;3;;public String doSomething(String s) {     return s. }
false;public;1;6;;public String changeSomething(String s) {     if ("Hello World".equals(s)) {         return "Bye World".     }     return "Bye All". }
false;public;1;3;;public String doNothing(String s) {     return null. }
false;public;1;3;;public String throwSomething(String s) {     throw new IllegalStateException(s). }
