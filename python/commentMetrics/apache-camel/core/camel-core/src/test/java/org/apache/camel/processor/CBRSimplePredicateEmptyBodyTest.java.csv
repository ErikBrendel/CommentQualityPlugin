commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCBR() throws Exception {     getMockEndpoint("mock:unknown").expectedMessageCount(1).     getMockEndpoint("mock:unknown").message(0).header("name").isNull().     getMockEndpoint("mock:known").expectedMessageCount(1).     getMockEndpoint("mock:known").message(0).header("name").isEqualTo("Camel").     template.sendBodyAndHeader("direct:start", null, "name", null).     template.sendBodyAndHeader("direct:start", null, "name", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").choice().when().simple("${header.name} == null").to("mock:unknown").otherwise().to("mock:known").end(). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when().simple("${header.name} == null").to("mock:unknown").otherwise().to("mock:known").end().         }     }. }
