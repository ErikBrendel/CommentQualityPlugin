commented;modifiers;parameterAmount;loc;comment;code
false;public;3;4;;public void beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {     String body = exchange.getIn().getBody(String.class).     logs.add("Breakpoint at " + definition + " with body: " + body). }
false;public;3;4;;public void onEvent(Exchange exchange, ExchangeEvent event, NamedNode definition) {     String body = exchange.getIn().getBody(String.class).     logs.add("Breakpoint event " + event.getClass().getSimpleName() + " with body: " + body). }
false;public;3;3;;public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {     return body().contains("Camel").matches(exchange). }
false;public;3;8;;public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {     // match when sending to mocks     if (definition instanceof ToDefinition) {         ToDefinition to = (ToDefinition) definition.         return to.getUri().startsWith("mock").     }     return false. }
false;public;2;4;;@Override public boolean matchEvent(Exchange exchange, ExchangeEvent event) {     return event.getType() == Type.ExchangeCompleted. }
false;public;0;41;;@Override @Before public void setUp() throws Exception {     super.setUp().     breakpoint = new BreakpointSupport() {          public void beforeProcess(Exchange exchange, Processor processor, NamedNode definition) {             String body = exchange.getIn().getBody(String.class).             logs.add("Breakpoint at " + definition + " with body: " + body).         }          public void onEvent(Exchange exchange, ExchangeEvent event, NamedNode definition) {             String body = exchange.getIn().getBody(String.class).             logs.add("Breakpoint event " + event.getClass().getSimpleName() + " with body: " + body).         }     }.     camelCondition = new ConditionSupport() {          public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {             return body().contains("Camel").matches(exchange).         }     }.     mockCondition = new ConditionSupport() {          public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {             // match when sending to mocks             if (definition instanceof ToDefinition) {                 ToDefinition to = (ToDefinition) definition.                 return to.getUri().startsWith("mock").             }             return false.         }     }.     doneCondition = new ConditionSupport() {          @Override         public boolean matchEvent(Exchange exchange, ExchangeEvent event) {             return event.getType() == Type.ExchangeCompleted.         }     }. }
false;public;0;15;;@Test public void testDebug() throws Exception {     context.getDebugger().addBreakpoint(breakpoint, camelCondition).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied().     assertEquals(2, logs.size()).     assertEquals("Breakpoint at To[log:foo] with body: Hello Camel", logs.get(0)).     assertEquals("Breakpoint at To[mock:result] with body: Hello Camel", logs.get(1)). }
false;public;0;15;;@Test public void testDebugEvent() throws Exception {     context.getDebugger().addBreakpoint(breakpoint, doneCondition).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied().     assertEquals(2, logs.size()).     assertEquals("Breakpoint event ExchangeCompletedEvent with body: Hello World", logs.get(0)).     assertEquals("Breakpoint event ExchangeCompletedEvent with body: Hello Camel", logs.get(1)). }
false;public;0;32;;@Test public void testDebugSuspended() throws Exception {     context.getDebugger().addBreakpoint(breakpoint, mockCondition, camelCondition).     // suspend the breakpoint     context.getDebugger().suspendAllBreakpoints().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied().     assertEquals(0, logs.size()).     // resume the breakpoint     context.getDebugger().activateAllBreakpoints().     // reset and test again now the breakpoint is active     resetMocks().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World", "Hello Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied().     assertEquals(1, logs.size()).     assertEquals("Breakpoint at To[mock:result] with body: Hello Camel", logs.get(0)). }
false;public;0;27;;@Test public void testDebugRemoveBreakpoint() throws Exception {     context.getDebugger().addBreakpoint(breakpoint).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(10, logs.size()).     // remove the breakpoint     context.getDebugger().removeBreakpoint(breakpoint).     // reset and test again now the breakpoint is removed     resetMocks().     logs.clear().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Camel").     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied().     assertEquals(0, logs.size()). }
false;public;0;7;;@Override public void configure() throws Exception {     // use debugger     context.setDebugger(new DefaultDebugger()).     from("direct:start").to("log:foo").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use debugger             context.setDebugger(new DefaultDebugger()).             from("direct:start").to("log:foo").to("mock:result").         }     }. }
