commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;public void testRouteIdAutoAssignClash() throws Exception {     getMockEndpoint("mock:start1").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:start2").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:start").expectedBodiesReceived("Hi Camel").     template.sendBody("direct:start1", "Hello World").     template.sendBody("direct:start2", "Bye World").     template.sendBody("direct:start", "Hi Camel").     assertMockEndpointsSatisfied().     assertEquals(3, context.getRouteDefinitions().size()).     assertEquals(3, context.getRoutes().size()).     assertNotNull(context.getRoute("route1")).     assertNotNull(context.getRoute("route2")).     // we will auto assign the route as route3     assertNotNull(context.getRoute("route3")). }
false;public;0;14;;@Override public void configure() throws Exception {     // use route1, route2 to clash with Camel's auto assigning     from("direct:start1").routeId("route1").to("mock:start1").     // use route1, route2 to clash with Camel's auto assigning     from("direct:start2").routeId("route2").to("mock:start2").     // no assigned route id which should be auto assigned     from("direct:start").to("mock:start"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use route1, route2 to clash with Camel's auto assigning             from("direct:start1").routeId("route1").to("mock:start1").             // use route1, route2 to clash with Camel's auto assigning             from("direct:start2").routeId("route2").to("mock:start2").             // no assigned route id which should be auto assigned             from("direct:start").to("mock:start").         }     }. }
