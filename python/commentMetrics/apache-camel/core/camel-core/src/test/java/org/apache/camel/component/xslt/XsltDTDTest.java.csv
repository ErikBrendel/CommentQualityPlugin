commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSendingStringMessage() throws Exception {     sendEntityMessage(MESSAGE). }
false;public;0;5;;@Test public void testSendingInputStreamMessage() throws Exception {     InputStream is = IOConverter.toInputStream(MESSAGE, new DefaultExchange(context)).     sendEntityMessage(is). }
false;private;1;34;;private void sendEntityMessage(Object message) throws Exception {     MockEndpoint endpoint = getMockEndpoint("mock:result").     endpoint.reset().     endpoint.expectedMessageCount(1).     template.sendBody("direct:start1", message).     assertMockEndpointsSatisfied().     List<Exchange> list = endpoint.getReceivedExchanges().     Exchange exchange = list.get(0).     String xml = exchange.getIn().getBody(String.class).     assertTrue("Get a wrong transformed message", xml.indexOf("<transformed subject=\"\">") > 0).     try {         endpoint.reset().         endpoint.expectedMessageCount(1).         template.sendBody("direct:start2", message).         assertMockEndpointsSatisfied().         list = endpoint.getReceivedExchanges().         exchange = list.get(0).         xml = exchange.getIn().getBody(String.class).         assertTrue("Get a wrong transformed message", xml.indexOf("<transformed subject=\"\">") > 0).     } catch (Exception ex) {         // expect an exception here         assertTrue("Get a wrong exception", ex instanceof CamelExecutionException).         // the file could not be found         assertTrue("Get a wrong exception cause", ex.getCause() instanceof TransformerException).     } }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:start1").to("xslt:org/apache/camel/component/xslt/transform_dtd.xsl").to("mock:result").     from("direct:start2").to("xslt:org/apache/camel/component/xslt/transform_dtd.xsl?allowStAX=false").to("mock:result"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start1").to("xslt:org/apache/camel/component/xslt/transform_dtd.xsl").to("mock:result").             from("direct:start2").to("xslt:org/apache/camel/component/xslt/transform_dtd.xsl?allowStAX=false").to("mock:result").         }     }. }
