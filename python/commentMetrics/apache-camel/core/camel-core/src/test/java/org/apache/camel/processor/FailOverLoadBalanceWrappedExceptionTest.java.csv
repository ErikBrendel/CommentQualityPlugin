commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z"). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // socket exception is an io exception     throw new CamelExchangeException("foo", exchange, new SocketException("Forced")). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IOException("Forced"). }
false;public;0;19;;public void configure() {     from("direct:start").loadBalance().failover(IOException.class).to("direct:x", "direct:y", "direct:z").     from("direct:x").to("mock:x").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // socket exception is an io exception             throw new CamelExchangeException("foo", exchange, new SocketException("Forced")).         }     }).     from("direct:y").to("mock:y").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IOException("Forced").         }     }).     from("direct:z").to("mock:z"). }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").loadBalance().failover(IOException.class).to("direct:x", "direct:y", "direct:z").             from("direct:x").to("mock:x").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // socket exception is an io exception                     throw new CamelExchangeException("foo", exchange, new SocketException("Forced")).                 }             }).             from("direct:y").to("mock:y").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IOException("Forced").                 }             }).             from("direct:z").to("mock:z").         }     }. }
false;public;0;10;;@Test public void testWrappedException() throws Exception {     x.expectedMessageCount(1).     y.expectedMessageCount(1).     z.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
