commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyFooBean()).     return jndi. }
false;public;0;6;;@Test public void testOrder() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Order").     template.sendBody("direct:a", "Hello").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello").     exchange.setException(new IllegalArgumentException("Forced by unit test")). }
false;public;0;11;;@Test public void testFailure() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Failure").     template.send("direct:b", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello").             exchange.setException(new IllegalArgumentException("Forced by unit test")).         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").logStackTrace(false).maximumRedeliveries(3)).     onException(Exception.class).handled(true).bean("foo", "handleFailure").to("mock:result").     from("direct:a").bean("foo").to("mock:result").     from("direct:b").to("mock:foo"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").logStackTrace(false).maximumRedeliveries(3)).             onException(Exception.class).handled(true).bean("foo", "handleFailure").to("mock:result").             from("direct:a").bean("foo").to("mock:result").             from("direct:b").to("mock:foo").         }     }. }
false;public;1;4;;public String handleException(Exception e) {     fail("Should not call this method as it is not intended for Camel").     return "Exception". }
false;public;2;3;;public String handleFailure(@Body String order, @ExchangeException IllegalArgumentException e) {     return "Failure". }
false;public;1;3;;public String handleOrder(@Body String order) {     return "Order". }
