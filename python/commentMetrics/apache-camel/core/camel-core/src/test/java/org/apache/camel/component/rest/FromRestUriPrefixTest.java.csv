commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Test public void testFromRestModel() throws Exception {     assertEquals(getExpectedNumberOfRoutes(), context.getRoutes().size()).     assertEquals(1, context.getRestDefinitions().size()).     RestDefinition rest = context.getRestDefinitions().get(0).     assertNotNull(rest).     assertEquals("/say/", rest.getPath()).     assertEquals(3, rest.getVerbs().size()).     assertEquals("/hello", rest.getVerbs().get(0).getUri()).     assertEquals("/bye", rest.getVerbs().get(1).getUri()).     assertEquals("/hi", rest.getVerbs().get(2).getUri()).     ToDefinition to = assertIsInstanceOf(ToDefinition.class, rest.getVerbs().get(0).getTo()).     assertEquals("direct:hello", to.getUri()).     to = assertIsInstanceOf(ToDefinition.class, rest.getVerbs().get(1).getTo()).     assertEquals("direct:bye", to.getUri()).     // the rest becomes routes and the input is a seda endpoint created by the DummyRestConsumerFactory     getMockEndpoint("mock:update").expectedMessageCount(1).     template.sendBody("seda:post-say-hi", "I was here").     assertMockEndpointsSatisfied().     String out = template.requestBody("seda:get-say-hello", "Me", String.class).     assertEquals("Hello World", out).     String out2 = template.requestBody("seda:get-say-bye", "Me", String.class).     assertEquals("Bye World", out2). }
false;public;0;15;;@Override public void configure() throws Exception {     restConfiguration().host("localhost").     // we have logic to cleanup those paths so there is only one / between the paths     rest("/say/").get("/hello").to("direct:hello").get("/bye").consumes("application/json").to("direct:bye").post("/hi").to("mock:update").     from("direct:hello").transform().constant("Hello World").     from("direct:bye").transform().constant("Bye World"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             restConfiguration().host("localhost").             // we have logic to cleanup those paths so there is only one / between the paths             rest("/say/").get("/hello").to("direct:hello").get("/bye").consumes("application/json").to("direct:bye").post("/hi").to("mock:update").             from("direct:hello").transform().constant("Hello World").             from("direct:bye").transform().constant("Bye World").         }     }. }
