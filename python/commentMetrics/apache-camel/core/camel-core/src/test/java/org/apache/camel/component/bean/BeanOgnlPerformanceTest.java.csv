commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyFooBean()).     return jndi. }
false;public;0;14;;@Test public void testBeanOgnlPerformance() throws Exception {     StopWatch watch = new StopWatch().     getMockEndpoint("mock:result").expectedMessageCount(size).     for (int i = 0. i < size. i++) {         template.sendBody("direct:start", "Hello World").     }     assertMockEndpointsSatisfied().     log.info("Took {} millis", watch.taken()). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).toF("bean:foo?cache=%s&method=hello('Camel')", cache).to("mock:result").         }     }. }
