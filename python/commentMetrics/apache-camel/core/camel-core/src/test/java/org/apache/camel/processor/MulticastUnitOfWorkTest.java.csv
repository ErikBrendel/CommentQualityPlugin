commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testMulticastUOW() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // will run B and then A, where A will be the last one     assertEquals("onCompleteA", sync).     assertEquals("onCompleteA", lastOne). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     lastOne = "processor". }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     assertNull("First exchange is not complete yet", sync). }
false;public;0;24;;@Override public void configure() throws Exception {     context.setTracing(true).     from("direct:start").process(new MyUOWProcessor("A")).multicast().to("direct:foo", "direct:bar").     from("direct:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             assertNull("First exchange is not complete yet", sync).         }     }).process(new MyUOWProcessor("B")).process(new Processor() {          public void process(Exchange exchange) throws Exception {             lastOne = "processor".         }     }).to("mock:result").     from("direct:bar").to("mock:result"). }
false;protected;0;29;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setTracing(true).             from("direct:start").process(new MyUOWProcessor("A")).multicast().to("direct:foo", "direct:bar").             from("direct:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     assertNull("First exchange is not complete yet", sync).                 }             }).process(new MyUOWProcessor("B")).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     lastOne = "processor".                 }             }).to("mock:result").             from("direct:bar").to("mock:result").         }     }. }
false;public;1;4;;public void onComplete(Exchange exchange) {     sync = "onComplete" + id.     lastOne = sync. }
false;public;1;4;;public void onFailure(Exchange exchange) {     sync = "onFailure" + id.     lastOne = sync. }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     exchange.getUnitOfWork().addSynchronization(new Synchronization() {          public void onComplete(Exchange exchange) {             sync = "onComplete" + id.             lastOne = sync.         }          public void onFailure(Exchange exchange) {             sync = "onFailure" + id.             lastOne = sync.         }     }). }
