commented;modifiers;parameterAmount;loc;comment;code
true;public;0;11;/**  * A single node XPath selection that internally returns a DTMNodeList of length 1 can now be automatically  * converted to a Document/Node.  * @throws Exception  */ ;/**  * A single node XPath selection that internally returns a DTMNodeList of length 1 can now be automatically  * converted to a Document/Node.  * @throws Exception  */ @Test public void testSingleNodeList() throws Exception {     getMockEndpoint("mock:found").expectedMessageCount(1).     getMockEndpoint("mock:found").setResultWaitTime(500).     getMockEndpoint("mock:notfound").expectedMessageCount(0).     getMockEndpoint("mock:notfound").setResultWaitTime(500).     template.requestBody("direct:doTest", XML_INPUT_SINGLE, String.class).     assertMockEndpointsSatisfied(). }
true;public;0;17;/**  * Regression test to ensure that a NodeList of length > 1 is not processed by the new converters.  * @throws Exception  */ ;/**  * Regression test to ensure that a NodeList of length > 1 is not processed by the new converters.  * @throws Exception  */ @Test public void testMultipleNodeList() throws Exception {     getMockEndpoint("mock:found").expectedMessageCount(0).     getMockEndpoint("mock:found").setResultWaitTime(500).     getMockEndpoint("mock:notfound").expectedMessageCount(0).     getMockEndpoint("mock:notfound").setResultWaitTime(500).     try {         template.requestBody("direct:doTest", XML_INPUT_MULTIPLE, String.class).         fail("NoTypeConversionAvailableException expected").     } catch (CamelExecutionException ex) {         assertEquals(RuntimeCamelException.class, ex.getCause().getClass()).         assertEquals(NoTypeConversionAvailableException.class, ex.getCause().getCause().getClass()).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:doTest").transform().xpath("/root/name").choice().when().xpath("/name").to("mock:found").otherwise().to("mock:notfound"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:doTest").transform().xpath("/root/name").choice().when().xpath("/name").to("mock:found").otherwise().to("mock:notfound").         }     }. }
