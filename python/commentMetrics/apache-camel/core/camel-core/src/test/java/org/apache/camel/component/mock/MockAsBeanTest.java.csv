commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", foo).     return jndi. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String in = exchange.getIn().getBody(String.class).     exchange.getIn().setBody("Bye " + in). }
true;public;0;18;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testMockAsBeanWithWhenAnyExchangeReceived() throws Exception {     // we should expect to receive the transformed message     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     // the foo bean is a MockEndpoint which we use in this test to transform     // the message     foo.whenAnyExchangeReceived(new Processor() {          public void process(Exchange exchange) throws Exception {             String in = exchange.getIn().getBody(String.class).             exchange.getIn().setBody("Bye " + in).         }     }).     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").bean("foo").to("mock:result"). }
false;protected;0;14;;// END SNIPPET: e1 @Override protected // START SNIPPET: e2 RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean("foo").to("mock:result").         }     }. }
true;public;0;11;// START SNIPPET: e3 ;// END SNIPPET: e2 // START SNIPPET: e3 @Test public void testMockAsBeanWithReplyBody() throws Exception {     // we should expect to receive the transformed message     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     foo.returnReplyBody(ExpressionBuilder.simpleExpression("Bye ${body}")).     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
true;public;0;11;// START SNIPPET: e4 ;// END SNIPPET: e3 // START SNIPPET: e4 @Test public void testMockAsBeanWithReplyHeader() throws Exception {     // we should expect to receive the transformed message     getMockEndpoint("mock:result").expectedHeaderReceived("myHeader", "Bye World").     foo.returnReplyHeader("myHeader", ExpressionBuilder.simpleExpression("Bye ${body}")).     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
