commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/noop").     super.setUp(). }
false;public;0;13;;@Test public void testNoop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // should only be able to read the file once as idempotent is true     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/noop", "Hello World", Exchange.FILE_NAME, "hello.txt").     // give some time to let consumer try to read the file multiple times     Thread.sleep(50).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file://target/data/noop?noop=true&idempotent=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/noop?noop=true&idempotent=true&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
