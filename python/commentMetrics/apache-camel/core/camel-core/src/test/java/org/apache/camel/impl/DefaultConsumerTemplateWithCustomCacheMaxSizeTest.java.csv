commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.getGlobalOptions().put(Exchange.MAXIMUM_CACHE_POOL_SIZE, "200").     return context. }
false;public;0;21;;@Test public void testCacheConsumers() throws Exception {     ConsumerTemplate template = context.createConsumerTemplate().     assertEquals("Size should be 0", 0, template.getCurrentCacheSize()).     // test that we cache at most 500 producers to avoid it eating to much memory     for (int i = 0. i < 203. i++) {         Endpoint e = context.getEndpoint("direct:queue:" + i).         template.receiveNoWait(e).     }     // the eviction is async so force cleanup     template.cleanUp().     assertEquals("Size should be 200", 200, template.getCurrentCacheSize()).     template.stop().     // should be 0     assertEquals("Size should be 0", 0, template.getCurrentCacheSize()). }
false;public;0;10;;@Test public void testInvalidSizeABC() {     context.getGlobalOptions().put(Exchange.MAXIMUM_CACHE_POOL_SIZE, "ABC").     try {         context.createConsumerTemplate().         fail("Should have thrown an exception").     } catch (Exception e) {         assertEquals("Property CamelMaximumCachePoolSize must be a positive number, was: ABC", e.getCause().getMessage()).     } }
false;public;0;10;;@Test public void testInvalidSizeZero() {     context.getGlobalOptions().put(Exchange.MAXIMUM_CACHE_POOL_SIZE, "0").     try {         context.createConsumerTemplate().         fail("Should have thrown an exception").     } catch (Exception e) {         assertEquals("Property CamelMaximumCachePoolSize must be a positive number, was: 0", e.getCause().getMessage()).     } }
