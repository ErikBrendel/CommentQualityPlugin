commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testNoError() throws Exception {     MockEndpoint error = getMockEndpoint("mock:error").     MockEndpoint result = getMockEndpoint("mock:result").     error.expectedMessageCount(0).     result.expectedMessageCount(1).     result.expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testError() throws Exception {     MockEndpoint error = getMockEndpoint("mock:error").     MockEndpoint result = getMockEndpoint("mock:result").     error.expectedMessageCount(1).     // we exepect the orignal input when moved to the DLC queue     error.expectedBodiesReceived("Boom").     result.expectedMessageCount(0).     template.sendBody("direct:start", "Boom").     assertMockEndpointsSatisfied(). }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Boom".equals(body)) {         throw new IllegalArgumentException("Forced exception by unit test").     }     exchange.getIn().setBody("Bye World"). }
false;public;0;14;;public void configure() throws Exception {     from("direct:start").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1).redeliveryDelay(0)).process(new Processor() {          public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if ("Boom".equals(body)) {                 throw new IllegalArgumentException("Forced exception by unit test").             }             exchange.getIn().setBody("Bye World").         }     }).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1).redeliveryDelay(0)).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if ("Boom".equals(body)) {                         throw new IllegalArgumentException("Forced exception by unit test").                     }                     exchange.getIn().setBody("Bye World").                 }             }).to("mock:result").         }     }. }
