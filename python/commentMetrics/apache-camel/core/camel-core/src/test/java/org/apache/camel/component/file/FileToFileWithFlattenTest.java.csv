commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;10;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/flatten-in").     deleteDirectory("target/data/flatten-out").     super.setUp().     template.sendBodyAndHeader(fileUrl, "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader(fileUrl, "Hello World", Exchange.FILE_NAME, "sub/hello.txt").     template.sendBodyAndHeader(fileUrl, "Goodday World", Exchange.FILE_NAME, "sub/sub2/goodday.txt"). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     context.stop().     super.tearDown(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/flatten-in?initialDelay=0&delay=10&recursive=true&flatten=true").to("file://target/data/flatten-out", "mock:result"). }
false;public;0;26;;@Test public void testFlatternConsumer() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/flatten-in?initialDelay=0&delay=10&recursive=true&flatten=true").to("file://target/data/flatten-out", "mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     // flatten files     mock.expectedFileExists("target/data/flatten-out/bye.txt").     mock.expectedFileExists("target/data/flatten-out/hello.txt").     mock.expectedFileExists("target/data/flatten-out/goodday.txt").     // default move files     mock.expectedFileExists("target/data/flatten-in/.camel/bye.txt").     mock.expectedFileExists("target/data/flatten-in/sub/.camel/hello.txt").     mock.expectedFileExists("target/data/flatten-in/sub/sub2/.camel/goodday.txt").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/flatten-in?initialDelay=0&delay=10&recursive=true").to("file://target/data/flatten-out?flatten=true", "mock:result"). }
false;public;0;26;;@Test public void testFlatternProducer() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/flatten-in?initialDelay=0&delay=10&recursive=true").to("file://target/data/flatten-out?flatten=true", "mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     // flatten files     mock.expectedFileExists("target/data/flatten-out/bye.txt").     mock.expectedFileExists("target/data/flatten-out/hello.txt").     mock.expectedFileExists("target/data/flatten-out/goodday.txt").     // default move files     mock.expectedFileExists("target/data/flatten-in/.camel/bye.txt").     mock.expectedFileExists("target/data/flatten-in/sub/.camel/hello.txt").     mock.expectedFileExists("target/data/flatten-in/sub/sub2/.camel/goodday.txt").     assertMockEndpointsSatisfied(). }
