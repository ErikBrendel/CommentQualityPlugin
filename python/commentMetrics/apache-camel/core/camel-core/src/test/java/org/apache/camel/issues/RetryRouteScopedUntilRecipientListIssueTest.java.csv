commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myRetryBean", new MyRetryBean()).     return jndi. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.setException(new IllegalArgumentException("Damn")). }
false;public;0;7;;public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          public void process(Exchange exchange) throws Exception {             exchange.setException(new IllegalArgumentException("Damn")).         }     }. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "fail". }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;public;1;3;;public void process(Exchange exchange) throws Exception { // noop }
false;public;0;7;;public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          public void process(Exchange exchange) throws Exception {         // noop         }     }. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "not-fail". }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;52;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addEndpoint("fail", new DefaultEndpoint() {          public Producer createProducer() throws Exception {             return new DefaultProducer(this) {                  public void process(Exchange exchange) throws Exception {                     exchange.setException(new IllegalArgumentException("Damn")).                 }             }.         }          public Consumer createConsumer(Processor processor) throws Exception {             return null.         }          @Override         protected String createEndpointUri() {             return "fail".         }          public boolean isSingleton() {             return true.         }     }).     context.addEndpoint("not-fail", new DefaultEndpoint() {          public Producer createProducer() throws Exception {             return new DefaultProducer(this) {                  public void process(Exchange exchange) throws Exception {                 // noop                 }             }.         }          public Consumer createConsumer(Processor processor) throws Exception {             return null.         }          @Override         protected String createEndpointUri() {             return "not-fail".         }          public boolean isSingleton() {             return true.         }     }).     return context. }
false;public;0;15;;@Test public void testRetryUntilRecipientListOkOnly() throws Exception {     invoked.set(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "direct:foo").     assertMockEndpointsSatisfied().     context.stop().     assertEquals(0, invoked.get()). }
false;public;0;15;;@Test public void testRetryUntilRecipientListOkNotFail() throws Exception {     invoked.set(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "direct:foo,not-fail").     assertMockEndpointsSatisfied().     context.stop().     assertEquals(0, invoked.get()). }
false;public;0;21;;@Test public void testRetryUntilRecipientListFailOnly() throws Exception {     invoked.set(0).     NotifyBuilder event = event().whenDone(2).create().     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "fail").     assertMockEndpointsSatisfied().     // wait until its done before we stop and check that retry was invoked     boolean matches = event.matches(10, TimeUnit.SECONDS).     assertTrue(matches).     context.stop().     assertEquals(3, invoked.get()). }
false;public;0;21;;@Test public void testRetryUntilRecipientListFailAndOk() throws Exception {     invoked.set(0).     NotifyBuilder event = event().whenDone(3).create().     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMinimumMessageCount(0).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "fail,direct:foo").     assertMockEndpointsSatisfied().     // wait until its done before we stop and check that retry was invoked     boolean matches = event.matches(10, TimeUnit.SECONDS).     assertTrue(matches).     context.stop().     assertEquals(3, invoked.get()). }
false;public;0;21;;@Test public void testRetryUntilRecipientListOkAndFail() throws Exception {     invoked.set(0).     NotifyBuilder event = event().whenDone(3).create().     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "direct:foo,fail").     assertMockEndpointsSatisfied().     // wait until its done before we stop and check that retry was invoked     boolean matches = event.matches(10, TimeUnit.SECONDS).     assertTrue(matches).     context.stop().     assertEquals(3, invoked.get()). }
false;public;0;15;;@Test public void testRetryUntilRecipientNotFail() throws Exception {     invoked.set(0).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "not-fail").     assertMockEndpointsSatisfied().     context.stop().     assertEquals(0, invoked.get()). }
false;public;0;21;;@Test public void testRetryUntilRecipientFailAndNotFail() throws Exception {     invoked.set(0).     NotifyBuilder event = event().whenDone(3).create().     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMinimumMessageCount(0).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "fail,not-fail").     assertMockEndpointsSatisfied().     // wait until its done before we stop and check that retry was invoked     boolean matches = event.matches(10, TimeUnit.SECONDS).     assertTrue(matches).     context.stop().     assertEquals(3, invoked.get()). }
false;public;0;20;;@Test public void testRetryUntilRecipientNotFailAndFail() throws Exception {     invoked.set(0).     NotifyBuilder event = event().whenDone(3).create().     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMinimumMessageCount(0).     template.sendBodyAndHeader("seda:start", "Hello World", "recipientListHeader", "not-fail,fail").     assertMockEndpointsSatisfied().     // wait until its done before we stop and check that retry was invoked     boolean matches = event.matches(10, TimeUnit.SECONDS).     assertTrue(matches).     context.stop().     assertEquals(3, invoked.get()). }
false;public;0;9;;@Override public void configure() throws Exception {     from("seda:start").onException(Exception.class).redeliveryDelay(0).retryWhile(method("myRetryBean")).end().recipientList(header("recipientListHeader")).to("mock:result").     from("direct:foo").to("log:foo").to("mock:foo"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").onException(Exception.class).redeliveryDelay(0).retryWhile(method("myRetryBean")).end().recipientList(header("recipientListHeader")).to("mock:result").             from("direct:foo").to("log:foo").to("mock:foo").         }     }. }
true;public;3;7;// using bean binding we can bind the information from the exchange to the types we have in our method signature ;// using bean binding we can bind the information from the exchange to the types we have in our method signature public boolean retry(@Header(Exchange.REDELIVERY_COUNTER) Integer counter, @Body String body, @ExchangeException Exception causedBy) {     // NOTE: counter is the redelivery attempt, will start from 1     invoked.incrementAndGet().     // we can of course do what ever we want to determine the result but this is a unit test so we end after 3 attempts     return counter < 3. }
