commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/file/xpathsplit").     super.setUp().     StringBuilder sb = new StringBuilder().     sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").     sb.append("\n<persons>").     for (int i = 0. i < size. i++) {         sb.append("\n<person><id>" + i + "</id><name>John Doe</name></person>").     }     sb.append("\n</persons>").     template.sendBodyAndHeader("file://target/data/file/xpathsplit", sb.toString(), Exchange.FILE_NAME, "bigfile.xml"). }
false;public;0;8;;@Test public void testXPathSplitStream() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:splitted").     mock.expectedMessageCount(size).     mock.expectsNoDuplicates().body().     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("file://target/data/file/xpathsplit?initialDelay=0&delay=10").split(xpath("/persons/person").documentType(InputSource.class)).streaming().to("mock:splitted"). // END SNIPPET: e1 }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("file://target/data/file/xpathsplit?initialDelay=0&delay=10").split(xpath("/persons/person").documentType(InputSource.class)).streaming().to("mock:splitted").         // END SNIPPET: e1         }     }. }
