commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testSplitParallelTimeout() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // A will timeout so we only get B and/or C     mock.message(0).body().not(body().contains("A")).     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied().     assertNotNull(receivedExchange).     assertEquals(0, receivedIndex).     assertEquals(3, receivedTotal).     assertEquals(100, receivedTimeout). }
false;public;0;19;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(","), new MyAggregationStrategy()).parallelProcessing().timeout(100).choice().when(body().isEqualTo("A")).to("direct:a").when(body().isEqualTo("B")).to("direct:b").when(body().isEqualTo("C")).to("direct:c").end().end().to("mock:result").     from("direct:a").delay(200).setBody(constant("A")).     from("direct:b").setBody(constant("B")).     from("direct:c").delay(10).setBody(constant("C")). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(","), new MyAggregationStrategy()).parallelProcessing().timeout(100).choice().when(body().isEqualTo("A")).to("direct:a").when(body().isEqualTo("B")).to("direct:b").when(body().isEqualTo("C")).to("direct:c").end().end().to("mock:result").             from("direct:a").delay(200).setBody(constant("A")).             from("direct:b").setBody(constant("B")).             from("direct:c").delay(10).setBody(constant("C")).         }     }. }
false;public;4;11;;public void timeout(Exchange oldExchange, int index, int total, long timeout) {     // we can't assert on the expected values here as the contract of this method doesn't     // allow to throw any Throwable (including AssertionError) so that we assert     // about the expected values directly inside the test method itself. other than that     // asserting inside a thread other than the main thread dosen't make much sense as     // junit would not realize the failed assertion!     receivedExchange = oldExchange.     receivedIndex = index.     receivedTotal = total.     receivedTimeout = timeout. }
false;public;2;9;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body + newExchange.getIn().getBody(String.class)).     return oldExchange. }
