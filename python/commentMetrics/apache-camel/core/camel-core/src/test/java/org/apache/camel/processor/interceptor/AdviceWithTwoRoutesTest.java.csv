commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().to("mock:detour"). }
false;public;0;19;;@Test public void testAdviceWithA() throws Exception {     RouteDefinition route = context.getRouteDefinition("a").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().to("mock:detour").         }     }).     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:detour").expectedMessageCount(1).     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().to("mock:detour"). }
false;public;0;19;;@Test public void testAdviceWithB() throws Exception {     RouteDefinition route = context.getRouteDefinition("b").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().to("mock:detour").         }     }).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:detour").expectedMessageCount(1).     template.sendBody("direct:b", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().to("mock:detour"). }
false;public;0;6;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().to("mock:detour"). }
false;public;0;31;;@Test public void testAdviceWithAB() throws Exception {     RouteDefinition route = context.getRouteDefinition("a").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://a").skipSendToOriginalEndpoint().to("mock:detour").         }     }).     route = context.getRouteDefinition("b").     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock://b").skipSendToOriginalEndpoint().to("mock:detour").         }     }).     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedMessageCount(0).     getMockEndpoint("mock:detour").expectedMessageCount(2).     template.sendBody("direct:a", "Hello World").     template.sendBody("direct:b", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:a").routeId("a").to("log:a").setBody(body().regexReplaceAll("\n", "")).to("mock:a").     from("direct:b").routeId("b").to("log:b").to("mock:b"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:a").routeId("a").to("log:a").setBody(body().regexReplaceAll("\n", "")).to("mock:a").             from("direct:b").routeId("b").to("log:b").to("mock:b").         }     }. }
