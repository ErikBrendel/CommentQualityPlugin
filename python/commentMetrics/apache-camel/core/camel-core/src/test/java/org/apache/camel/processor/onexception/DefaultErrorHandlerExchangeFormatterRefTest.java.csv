commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myExchangeFormatter", new MyExchangeFormatter()).     return jndi. }
false;public;0;10;;@Test public void testRetryUntil() throws Exception {     try {         template.requestBody("direct:start", "Hello World").         fail("Expected the exception").     } catch (Exception ex) {     // expect the exception here.     }     assertEquals(1, invoked). }
false;public;0;6;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().exchangeFormatterRef("myExchangeFormatter")).     from("direct:start").process(new MyProcessor()). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().exchangeFormatterRef("myExchangeFormatter")).             from("direct:start").process(new MyProcessor()).         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new MyFunctionalException("Sorry you cannot do this"). }
false;public;1;5;;@Override public String format(Exchange exchange) {     invoked++.     return "Exchange". }
