commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/multidir").     super.setUp(). }
false;public;0;30;;@SuppressWarnings("unchecked") @Test public void testMultiDir() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World", "Hello World", "Godday World").     template.sendBodyAndHeader(fileUrl, "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader(fileUrl, "Hello World", Exchange.FILE_NAME, "sub/hello.txt").     template.sendBodyAndHeader(fileUrl, "Godday World", Exchange.FILE_NAME, "sub/sub2/godday.txt").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getExchanges().get(0).     GenericFile<File> gf = (GenericFile<File>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     File file = gf.getFile().     assertDirectoryEquals("target/data/multidir/bye.txt", file.getPath()).     assertEquals("bye.txt", file.getName()).     exchange = mock.getExchanges().get(1).     gf = (GenericFile<File>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     file = gf.getFile().     assertDirectoryEquals("target/data/multidir/sub/hello.txt", file.getPath()).     assertEquals("hello.txt", file.getName()).     exchange = mock.getExchanges().get(2).     gf = (GenericFile<File>) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE).     file = gf.getFile().     assertDirectoryEquals("target/data/multidir/sub/sub2/godday.txt", file.getPath()).     assertEquals("godday.txt", file.getName()). }
false;public;0;3;;public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").         }     }. }
