commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/done").     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myProp", myProp).     return jndi. }
false;protected;0;9;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setLocation("ref:myProp").     return context. }
false;public;0;10;;@Test public void testProducerConstantDoneFileName() throws Exception {     template.sendBodyAndHeader("file:target/data/done?doneFileName=done", "Hello World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/done/hello.txt").     assertEquals("File should exists", true, file.exists()).     File done = new File("target/data/done/done").     assertEquals("Done file should exists", true, done.exists()). }
false;public;0;10;;@Test public void testProducerPrefixDoneFileName() throws Exception {     template.sendBodyAndHeader("file:target/data/done?doneFileName=done-${file:name}", "Hello World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/done/hello.txt").     assertEquals("File should exists", true, file.exists()).     File done = new File("target/data/done/done-hello.txt").     assertEquals("Done file should exists", true, done.exists()). }
false;public;0;10;;@Test public void testProducerExtDoneFileName() throws Exception {     template.sendBodyAndHeader("file:target/data/done?doneFileName=${file:name}.done", "Hello World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/done/hello.txt").     assertEquals("File should exists", true, file.exists()).     File done = new File("target/data/done/hello.txt.done").     assertEquals("Done file should exists", true, done.exists()). }
false;public;0;10;;@Test public void testProducerReplaceExtDoneFileName() throws Exception {     template.sendBodyAndHeader("file:target/data/done?doneFileName=${file:name.noext}.done", "Hello World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/done/hello.txt").     assertEquals("File should exists", true, file.exists()).     File done = new File("target/data/done/hello.done").     assertEquals("Done file should exists", true, done.exists()). }
false;public;0;10;;@Test public void testProducerInvalidDoneFileName() throws Exception {     try {         template.sendBodyAndHeader("file:target/data/done?doneFileName=${file:parent}/foo", "Hello World", Exchange.FILE_NAME, "hello.txt").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         ExpressionIllegalSyntaxException cause = assertIsInstanceOf(ExpressionIllegalSyntaxException.class, e.getCause()).         assertTrue(cause.getMessage(), cause.getMessage().endsWith("Cannot resolve reminder: ${file:parent}/foo")).     } }
false;public;0;10;;@Test public void testProducerEmptyDoneFileName() throws Exception {     try {         template.sendBodyAndHeader("file:target/data/done?doneFileName=", "Hello World", Exchange.FILE_NAME, "hello.txt").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         IllegalArgumentException cause = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertTrue(cause.getMessage(), cause.getMessage().startsWith("doneFileName must be specified and not empty")).     } }
false;public;0;12;;@Test public void testProducerPlaceholderPrefixDoneFileName() throws Exception {     myProp.put("myDir", "target/data/done").     template.sendBodyAndHeader("file:{{myDir}}?doneFileName=done-${file:name}", "Hello World", Exchange.FILE_NAME, "hello.txt").     File file = new File("target/data/done/hello.txt").     assertEquals("File should exists", true, file.exists()).     File done = new File("target/data/done/done-hello.txt").     assertEquals("Done file should exists", true, done.exists()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
