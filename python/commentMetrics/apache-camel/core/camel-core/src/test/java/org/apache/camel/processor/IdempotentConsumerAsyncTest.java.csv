commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).threads().to("mock:result"). }
false;public;0;23;;@Test public void testDuplicateMessagesAreFilteredOut() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).threads().to("mock:result").         }     }).     context.start().     resultEndpoint.expectedBodiesReceivedInAnyOrder("one", "two", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damn I cannot handle id 2").     } }
false;public;0;15;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).threads().process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damn I cannot handle id 2").             }         }     }).to("mock:result"). }
false;public;0;34;;@Test public void testFailedExchangesNotAddedDeadLetterChannel() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false)).             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).threads().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damn I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }).     context.start().     // we send in 2 messages with id 2 that fails     getMockEndpoint("mock:error").expectedMessageCount(2).     resultEndpoint.expectedBodiesReceivedInAnyOrder("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     String id = exchange.getIn().getHeader("messageId", String.class).     if (id.equals("2")) {         throw new IllegalArgumentException("Damn I cannot handle id 2").     } }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).threads().process(new Processor() {          public void process(Exchange exchange) throws Exception {             String id = exchange.getIn().getHeader("messageId", String.class).             if (id.equals("2")) {                 throw new IllegalArgumentException("Damn I cannot handle id 2").             }         }     }).to("mock:result"). }
false;public;0;30;;@Test public void testFailedExchangesNotAdded() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").idempotentConsumer(header("messageId"), MemoryIdempotentRepository.memoryIdempotentRepository(200)).threads().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String id = exchange.getIn().getHeader("messageId", String.class).                     if (id.equals("2")) {                         throw new IllegalArgumentException("Damn I cannot handle id 2").                     }                 }             }).to("mock:result").         }     }).     context.start().     resultEndpoint.expectedBodiesReceivedInAnyOrder("one", "three").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("2", "two").     sendMessage("1", "one").     sendMessage("3", "three").     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("messageId", messageId). }
false;protected;2;13;;protected void sendMessage(final Object messageId, final Object body) throws Exception {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("messageId", messageId).         }     }).     // must sleep a little as the route is async and we can be to fast     Thread.sleep(50). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
