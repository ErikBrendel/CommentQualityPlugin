commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testSendMessage() throws Exception {     template.sendBodyAndHeader("direct:in", "<hello>world!</hello>", "foo", "bar").     assertEquals("bean body: " + myBean, "bar", myBean.bar). }
false;public;0;6;;@Test public void testSendMessageHandler() throws Exception {     template.sendBodyAndHeader("direct:other", "<hello>world!</hello>", "foo", "bar").     assertEquals("bean body: " + myOtherBean, "bar", myOtherBean.bar). }
false;protected;0;7;;@Override protected Context createJndiContext() throws Exception {     JndiContext answer = new JndiContext().     answer.bind("myBean", myBean).     answer.bind("myOtherBean", myOtherBean).     return answer. }
false;public;0;5;;public void configure() {     from("direct:in").bean("myBean").     from("direct:other").bean("myOtherBean"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:in").bean("myBean").             from("direct:other").bean("myOtherBean").         }     }. }
false;public;1;3;;public void bar(String body) {     fail("bar() called with: " + body). }
false;public;1;4;;public void foo(@Simple("${header.foo}") String bar) {     this.bar = bar.     LOG.info("foo() method called with: " + bar). }
false;public;1;3;;public void wrongMethod(String body) {     fail("wrongMethod() called with: " + body). }
false;public;1;3;;public void bar(String body) {     fail("bar() called with: " + body). }
false;public;1;5;;@Handler public void foo(@Simple("${header.foo}") String bar) {     this.bar = bar.     LOG.info("foo() method called with: " + bar). }
false;public;1;3;;public void wrongMethod(String body) {     fail("wrongMethod() called with: " + body). }
