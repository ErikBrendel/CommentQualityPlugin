commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testRepoException() throws Exception {     getMockEndpoint("mock:dead").expectedBodiesReceived("nineninenine").     getMockEndpoint("mock:result").expectedBodiesReceived("one", "two", "three").     template.sendBodyAndHeader("direct:start", "one", "messageId", "1").     template.sendBodyAndHeader("direct:start", "two", "messageId", "2").     template.sendBodyAndHeader("direct:start", "one", "messageId", "1").     template.sendBodyAndHeader("direct:start", "nineninenine", "messageId", "999").     template.sendBodyAndHeader("direct:start", "two", "messageId", "2").     template.sendBodyAndHeader("direct:start", "three", "messageId", "3").     template.sendBodyAndHeader("direct:start", "one", "messageId", "1").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")).     from("direct:start").idempotentConsumer(header("messageId"), myRepo).to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead")).             from("direct:start").idempotentConsumer(header("messageId"), myRepo).to("mock:result").         }     }. }
false;public;1;7;;@Override public boolean add(String key) {     if ("999".equals(key)) {         throw new IllegalArgumentException("Forced").     }     return super.add(key). }
