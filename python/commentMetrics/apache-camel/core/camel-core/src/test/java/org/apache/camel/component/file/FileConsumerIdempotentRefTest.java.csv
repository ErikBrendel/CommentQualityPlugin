commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myRepo", new MyIdempotentRepository()).     return jndi. }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/idempotent").     super.setUp().     template.sendBodyAndHeader("file://target/data/idempotent/", "Hello World", Exchange.FILE_NAME, "report.txt"). }
false;public;0;4;;public void configure() throws Exception {     from("file://target/data/idempotent/?idempotent=true&idempotentRepository=#myRepo&move=done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/idempotent/?idempotent=true&idempotentRepository=#myRepo&move=done/${file:name}&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
false;public;0;26;;@Test public void testIdempotentRef() throws Exception {     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedMessageCount(1).     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // reset mock and set new expectations     mock.reset().     mock.expectedMessageCount(0).     // move file back     File file = new File("target/data/idempotent/done/report.txt").     File renamed = new File("target/data/idempotent/report.txt").     file.renameTo(renamed).     // should NOT consume the file again, let a bit time go     Thread.sleep(100).     assertMockEndpointsSatisfied().     assertTrue("MyIdempotentRepository should have been invoked", invoked). }
false;public;1;7;;public boolean add(String messageId) {     // will return true 1st time, and false 2nd time     boolean result = invoked.     invoked = true.     assertEquals("report.txt", messageId).     return !result. }
false;public;1;3;;public boolean contains(String key) {     return invoked. }
false;public;1;3;;public boolean remove(String key) {     return true. }
false;public;1;3;;public boolean confirm(String key) {     return true. }
false;public;0;4;;@Override public void clear() {     return. }
false;public;0;2;;public void start() throws Exception { }
false;public;0;2;;public void stop() throws Exception { }
