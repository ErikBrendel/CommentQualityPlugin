commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testWorks() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.expectedBodiesReceived(expectedBody).     result.message(0).header("sample.name").isEqualTo("myValue").     template.sendBody("direct:start", "<sample><name>value</name></sample>").     result.assertIsSatisfied(). }
false;public;0;12;;@Test public void testHeaderPredicateFails() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.message(0).header("sample.name").isEqualTo("shouldNotMatch").     template.sendBody("direct:start", "<sample><name>value</name></sample>").     try {         result.assertIsSatisfied().         fail("Should have failed this test!").     } catch (AssertionError e) {         log.info("Caught expected assertion failure: " + e, e).     } }
false;public;0;3;;public void configure() throws Exception {     from("direct:start").process(new MyProcessor()).to("mock:result"). }
false;protected;0;8;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:start").process(new MyProcessor()).to("mock:result").         }     }. }
false;public;1;7;;public void process(Exchange exchange) throws Exception {     exchange.getIn().getBody(String.class).     Message output = exchange.getOut().     output.setHeader("sample.name", "myValue").     output.setBody(expectedBody). }
