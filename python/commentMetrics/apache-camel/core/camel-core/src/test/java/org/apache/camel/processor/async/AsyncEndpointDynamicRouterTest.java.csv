commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye World", reply).     assertMockEndpointsSatisfied().     assertEquals(4, invoked).     assertEquals(4, bodies.size()).     assertEquals("Hello Camel", bodies.get(0)).     assertEquals("Bye Camel", bodies.get(1)).     assertEquals("Bye World", bodies.get(2)).     assertEquals("Bye World", bodies.get(3)). }
false;public;0;9;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").dynamicRouter(method(AsyncEndpointDynamicRouterTest.class, "slip")).     from("direct:foo").transform(constant("Bye World")). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").dynamicRouter(method(AsyncEndpointDynamicRouterTest.class, "slip")).             from("direct:foo").transform(constant("Bye World")).         }     }. }
true;public;1;15;/**  * Use this method to compute dynamic where we should route next.  *  * @param body the message body  * @return endpoints to go, or <tt>null</tt> to indicate the end  */ ;/**  * Use this method to compute dynamic where we should route next.  *  * @param body the message body  * @return endpoints to go, or <tt>null</tt> to indicate the end  */ public String slip(String body) {     bodies.add(body).     invoked++.     if (invoked == 1) {         return "async:bye:camel".     } else if (invoked == 2) {         return "direct:foo".     } else if (invoked == 3) {         return "mock:result".     }     // no more so return null     return null. }
