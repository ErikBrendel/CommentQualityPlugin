commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:a").skipSendToOriginalEndpoint().to("mock:error"). }
false;public;0;5;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:b").skipSendToOriginalEndpoint().to("mock:error"). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     throw new IllegalArgumentException("Forced " + body). }
false;public;0;41;;@Test public void testAdviceWith() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("a"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:a").skipSendToOriginalEndpoint().to("mock:error").         }     }).     RouteReifier.adviceWith(context.getRouteDefinition("b"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:b").skipSendToOriginalEndpoint().to("mock:error").         }     }).     getMockEndpoint("mock:error").whenAnyExchangeReceived(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             throw new IllegalArgumentException("Forced " + body).         }     }).     getMockEndpoint("mock:a").expectedMessageCount(0).     getMockEndpoint("mock:b").expectedMessageCount(0).     // whenAnyExchange is invoked after the mock receive the exchange     getMockEndpoint("mock:error").expectedBodiesReceived("A", "B").     // the onException should handle and send the message to this mock     getMockEndpoint("mock:handled").expectedBodiesReceived("Handling Forced A", "Handling Forced B").     Object outA = template.requestBody("direct:a", "A").     assertEquals("Handling Forced A", outA).     Object outB = template.requestBody("direct:b", "B").     assertEquals("Handling Forced B", outB).     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).setBody(simple("Handling ${exception.message}")).to("mock:handled").     from("direct:a").routeId("a").to("mock:a").     from("direct:b").routeId("b").to("mock:b"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).setBody(simple("Handling ${exception.message}")).to("mock:handled").             from("direct:a").routeId("a").to("mock:a").             from("direct:b").routeId("b").to("mock:b").         }     }. }
