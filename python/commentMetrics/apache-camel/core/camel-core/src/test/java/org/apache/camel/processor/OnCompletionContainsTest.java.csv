commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void onDone(Exchange exchange) {     template.sendBody(endPoint, body). }
false;public;0;4;;@Override public String toString() {     return body. }
false;public;0;9;;@Test public void testOnCompletionContainsTest() throws Exception {     getMockEndpoint("mock:sync").expectedBodiesReceived("C", "B", "B", "A", "Hello World").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void onDone(Exchange exchange) {     template.sendBody("mock:sync", "C"). }
false;public;0;4;;@Override public String toString() {     return "C". }
false;public;1;30;;public void process(Exchange exchange) throws Exception {     SynchronizationAdapter adapter = new SimpleSynchronizationAdapter("mock:sync", "A").     exchange.addOnCompletion(adapter).     // should not add the adapter again as we already have it     if (!exchange.containsOnCompletion(adapter)) {         exchange.addOnCompletion(adapter).     }     adapter = new SimpleSynchronizationAdapter("mock:sync", "B").     exchange.addOnCompletion(adapter).     // now add the B again as we want to test that this also work     if (exchange.containsOnCompletion(adapter)) {         exchange.addOnCompletion(adapter).     }     // add a C that is no a SimpleSynchronizationAdapter class     exchange.addOnCompletion(new SynchronizationAdapter() {          @Override         public void onDone(Exchange exchange) {             template.sendBody("mock:sync", "C").         }          @Override         public String toString() {             return "C".         }     }). }
false;public;0;37;;@Override public void configure() throws Exception {     onCompletion().to("mock:sync").     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             SynchronizationAdapter adapter = new SimpleSynchronizationAdapter("mock:sync", "A").             exchange.addOnCompletion(adapter).             // should not add the adapter again as we already have it             if (!exchange.containsOnCompletion(adapter)) {                 exchange.addOnCompletion(adapter).             }             adapter = new SimpleSynchronizationAdapter("mock:sync", "B").             exchange.addOnCompletion(adapter).             // now add the B again as we want to test that this also work             if (exchange.containsOnCompletion(adapter)) {                 exchange.addOnCompletion(adapter).             }             // add a C that is no a SimpleSynchronizationAdapter class             exchange.addOnCompletion(new SynchronizationAdapter() {                  @Override                 public void onDone(Exchange exchange) {                     template.sendBody("mock:sync", "C").                 }                  @Override                 public String toString() {                     return "C".                 }             }).         }     }).to("mock:result"). }
false;protected;0;42;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().to("mock:sync").             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     SynchronizationAdapter adapter = new SimpleSynchronizationAdapter("mock:sync", "A").                     exchange.addOnCompletion(adapter).                     // should not add the adapter again as we already have it                     if (!exchange.containsOnCompletion(adapter)) {                         exchange.addOnCompletion(adapter).                     }                     adapter = new SimpleSynchronizationAdapter("mock:sync", "B").                     exchange.addOnCompletion(adapter).                     // now add the B again as we want to test that this also work                     if (exchange.containsOnCompletion(adapter)) {                         exchange.addOnCompletion(adapter).                     }                     // add a C that is no a SimpleSynchronizationAdapter class                     exchange.addOnCompletion(new SynchronizationAdapter() {                          @Override                         public void onDone(Exchange exchange) {                             template.sendBody("mock:sync", "C").                         }                          @Override                         public String toString() {                             return "C".                         }                     }).                 }             }).to("mock:result").         }     }. }
