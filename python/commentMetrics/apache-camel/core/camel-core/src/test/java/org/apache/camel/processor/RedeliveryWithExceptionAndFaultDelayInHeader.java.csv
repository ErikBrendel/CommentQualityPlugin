commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;public void testOk() throws Exception {     counter = 0.     getMockEndpoint("mock:result").expectedMessageCount(1).     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     assertMockEndpointsSatisfied(). }
false;public;0;10;;public void testTransientAndPersistentError() throws Exception {     counter = 0.     getMockEndpoint("mock:result").expectedMessageCount(0).     String out = template.requestBody("direct:start", "Boom", String.class).     assertEquals("Persistent error", out).     assertMockEndpointsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Boom"). }
false;public;0;18;;public void testTransientAndPersistentErrorWithExchange() throws Exception {     counter = 0.     getMockEndpoint("mock:result").expectedMessageCount(0).     Exchange out = template.request("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Boom").         }     }).     assertTrue("Should be failed", out.isFailed()).     assertNull("No exception", out.getException()).     assertTrue(out.getOut() != null && out.getOut().isFault()).     assertEquals("Persistent error", out.getOut().getBody()).     assertMockEndpointsSatisfied(). }
false;public;1;14;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader(Exchange.REDELIVERY_DELAY, 100).     counter++.     if (counter < 3) {         throw new IllegalArgumentException("Try again").     }     if (exchange.getIn().getBody().equals("Boom")) {         exchange.getOut().setFault(true).         exchange.getOut().setBody("Persistent error").     } else {         exchange.getOut().setBody("Bye World").     } }
false;public;0;23;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().maximumRedeliveries(5)).     from("direct:start").process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader(Exchange.REDELIVERY_DELAY, 100).             counter++.             if (counter < 3) {                 throw new IllegalArgumentException("Try again").             }             if (exchange.getIn().getBody().equals("Boom")) {                 exchange.getOut().setFault(true).                 exchange.getOut().setBody("Persistent error").             } else {                 exchange.getOut().setBody("Bye World").             }         }     }).to("mock:result"). }
false;protected;0;28;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().maximumRedeliveries(5)).             from("direct:start").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getIn().setHeader(Exchange.REDELIVERY_DELAY, 100).                     counter++.                     if (counter < 3) {                         throw new IllegalArgumentException("Try again").                     }                     if (exchange.getIn().getBody().equals("Boom")) {                         exchange.getOut().setFault(true).                         exchange.getOut().setBody("Persistent error").                     } else {                         exchange.getOut().setBody("Bye World").                     }                 }             }).to("mock:result").         }     }. }
