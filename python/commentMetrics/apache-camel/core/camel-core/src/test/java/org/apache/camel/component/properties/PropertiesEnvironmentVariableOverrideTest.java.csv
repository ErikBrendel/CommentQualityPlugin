commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").to("properties:cool.end").     from("direct:foo").to("properties:mock:{{cool.result}}"). }
false;public;0;27;;@Test public void testPropertiesComponentCacheDisabled() throws Exception {     PropertiesComponent pc = context.getComponent("properties", PropertiesComponent.class).     pc.setCache(false).     System.setProperty("cool.end", "mock:override").     System.setProperty("cool.result", "override").     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:cool.end").             from("direct:foo").to("properties:mock:{{cool.result}}").         }     }).     context.start().     getMockEndpoint("mock:override").expectedMessageCount(2).     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:foo", "Hello Foo").     System.clearProperty("cool.end").     System.clearProperty("cool.result").     assertMockEndpointsSatisfied(). }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocations(new String[] { "classpath:org/apache/camel/component/properties/myproperties.properties" }).     context.addComponent("properties", pc).     return context. }
