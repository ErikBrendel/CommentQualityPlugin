commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSendToFirstWhen() throws Exception {     String body = "<body id='a'/>".     x.expectedBodiesReceived(body).     expectsMessageCount(0, y, z).     sendMessage("bar", body).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSendToSecondWhen() throws Exception {     String body = "<body id='b'/>".     y.expectedBodiesReceived(body).     expectsMessageCount(0, x, z).     sendMessage("cheese", body).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testSendToOtherwiseClause() throws Exception {     String body = "<body id='c'/>".     z.expectedBodiesReceived(body).     expectsMessageCount(0, x, y).     sendMessage("somethingUndefined", body).     assertMockEndpointsSatisfied(). }
false;protected;2;3;;protected void sendMessage(final Object headerValue, final Object body) throws Exception {     template.sendBodyAndHeader("direct:start", body, "foo", headerValue). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z"). }
false;public;0;6;;public void configure() {     from("direct:start").choice().when().xpath("/body[@id='a']").setHeader("name", constant("a")).to("mock:x").when().xpath("/body[@id='b']").to("mock:y").otherwise().to("mock:z"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").choice().when().xpath("/body[@id='a']").setHeader("name", constant("a")).to("mock:x").when().xpath("/body[@id='b']").to("mock:y").otherwise().to("mock:z").         }     }. }
