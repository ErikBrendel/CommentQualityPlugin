commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").transform().method(MethodCallMissingParenthesisTest.class, "doSomething(${body}, ${header.foo})").to("mock:result"). }
false;public;0;16;;@Test public void testCorrect() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().method(MethodCallMissingParenthesisTest.class, "doSomething(${body}, ${header.foo})").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Hello=Camel").     template.sendBodyAndHeader("direct:start", "Hello", "foo", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").transform().method(MethodCallMissingParenthesisTest.class, "doSomething(${body}, ${header.foo}").to("mock:result"). }
false;public;0;20;;@Test public void testMissing() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().method(MethodCallMissingParenthesisTest.class, "doSomething(${body}, ${header.foo}").to("mock:result").         }     }).     context.start().     try {         template.sendBodyAndHeader("direct:start", "Hello", "foo", "Camel").         fail("Should throw exception").     } catch (CamelExecutionException e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("Method should end with parenthesis, was doSomething(${body}, ${header.foo}", iae.getMessage()).     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").transform().method(MethodCallMissingParenthesisTest.class, "--doSomething(${body}, ${header.foo})").to("mock:result"). }
false;public;0;20;;@Test public void testInvalidName() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().method(MethodCallMissingParenthesisTest.class, "--doSomething(${body}, ${header.foo})").to("mock:result").         }     }).     context.start().     try {         template.sendBodyAndHeader("direct:start", "Hello", "foo", "Camel").         fail("Should throw exception").     } catch (CamelExecutionException e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("Method name must start with a valid java identifier at position: 0 in method: --doSomething(${body}, ${header.foo})", iae.getMessage()).     } }
false;public;2;3;;public String doSomething(String body, String header) {     return body + "=" + header. }
