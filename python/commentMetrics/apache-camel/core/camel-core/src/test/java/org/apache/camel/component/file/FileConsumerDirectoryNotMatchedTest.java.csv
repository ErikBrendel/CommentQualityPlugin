commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/dirnotmatched").     super.setUp().     template.sendBodyAndHeader("file:target/data/dirnotmatched/", "This is a dot file", Exchange.FILE_NAME, ".skipme").     template.sendBodyAndHeader("file:target/data/dirnotmatched/", "This is a web file", Exchange.FILE_NAME, "index.html").     template.sendBodyAndHeader("file:target/data/dirnotmatched/2007", "2007 report", Exchange.FILE_NAME, "report2007.txt").     template.sendBodyAndHeader("file:target/data/dirnotmatched/2008", "2008 report", Exchange.FILE_NAME, "report2008.txt"). }
false;public;0;7;;@Test public void testSkipDirectories() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.assertIsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from(fileUrl).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).convertBodyTo(String.class).to("mock:result").         }     }. }
