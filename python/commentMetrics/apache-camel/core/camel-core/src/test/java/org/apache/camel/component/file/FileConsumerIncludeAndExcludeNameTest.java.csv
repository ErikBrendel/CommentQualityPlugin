commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/includeexclude").     super.setUp(). }
false;public;0;10;;@Test public void testIncludePreAndPostfixes() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Report 2", "Report 3", "Report 4").     mock.expectedMessageCount(3).     sendFiles().     mock.assertIsSatisfied(). }
false;private;0;9;;private void sendFiles() throws Exception {     String url = "file://target/data/includeexclude".     template.sendBodyAndHeader(url, "Hello World", Exchange.FILE_NAME, "hello.txt").     template.sendBodyAndHeader(url, "Report 1", Exchange.FILE_NAME, "report1.xml").     template.sendBodyAndHeader(url, "Report 2", Exchange.FILE_NAME, "report2.txt").     template.sendBodyAndHeader(url, "Report 3", Exchange.FILE_NAME, "report3.txt").     template.sendBodyAndHeader(url, "Report 4", Exchange.FILE_NAME, "Report4.txt").     template.sendBodyAndHeader(url, "Secret", Exchange.FILE_NAME, "Secret.txt"). }
false;public;0;4;;public void configure() throws Exception {     from("file://target/data/includeexclude/?initialDelay=0&delay=10&include=report.*txt&exclude=hello.*").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/includeexclude/?initialDelay=0&delay=10&include=report.*txt&exclude=hello.*").convertBodyTo(String.class).to("mock:result").         }     }. }
