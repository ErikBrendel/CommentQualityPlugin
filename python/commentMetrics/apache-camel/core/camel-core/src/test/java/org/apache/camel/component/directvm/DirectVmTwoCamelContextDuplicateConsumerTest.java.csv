commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testThirdClash() throws Exception {     CamelContext third = new DefaultCamelContext().     third.addRoutes(createRouteBuilderForThirdContext()).     try {         third.start().         fail("Should have thrown exception").     } catch (IllegalStateException e) {         assertEquals("A consumer Consumer[direct-vm://foo] already exists from CamelContext: camel-1. Multiple consumers not supported", e.getMessage()).     }     // stop first camel context then     context.stop().     // and start the 3rd which should work now     third.start().     MockEndpoint mock = third.getEndpoint("mock:third", MockEndpoint.class).     mock.expectedMessageCount(1).     template2.sendBody("direct:start", "Hello World").     mock.assertIsSatisfied().     third.stop(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct-vm:foo").transform(constant("Bye World")).log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:foo").transform(constant("Bye World")).log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("mock:result").         }     }. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("direct-vm:foo"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("direct-vm:foo").         }     }. }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct-vm:foo").transform(constant("Bye World")).log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("mock:third"). }
false;protected;0;11;;protected RouteBuilder createRouteBuilderForThirdContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:foo").transform(constant("Bye World")).log("Running on Camel ${camelId} on thread ${threadName} with message ${body}").to("mock:third").         }     }. }
