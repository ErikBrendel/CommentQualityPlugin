commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testLogProcessorFoo() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testLogProcessorBar() throws Exception {     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:bar", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testLogProcessorBaz() throws Exception {     getMockEndpoint("mock:baz").expectedMessageCount(1).     template.sendBody("direct:baz", "Hi World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testLogProcessorMarker() throws Exception {     getMockEndpoint("mock:wombat").expectedMessageCount(1).     template.sendBody("direct:wombat", "Hi Wombat").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Test public void testNoLog() throws Exception {     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:nolog", "Hi World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo").     from("direct:bar").routeId("bar").log(LoggingLevel.WARN, "Also got ${body}").to("mock:bar").     from("direct:baz").routeId("baz").log(LoggingLevel.ERROR, "cool", "Me got ${body}").to("mock:baz").     from("direct:wombat").routeId("wombat").log(LoggingLevel.INFO, "cool", "mymarker", "Me got ${body}").to("mock:wombat").     from("direct:nolog").routeId("nolog").log(LoggingLevel.TRACE, "Should not log ${body}").to("mock:bar"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").routeId("foo").log("Got ${body}").to("mock:foo").             from("direct:bar").routeId("bar").log(LoggingLevel.WARN, "Also got ${body}").to("mock:bar").             from("direct:baz").routeId("baz").log(LoggingLevel.ERROR, "cool", "Me got ${body}").to("mock:baz").             from("direct:wombat").routeId("wombat").log(LoggingLevel.INFO, "cool", "mymarker", "Me got ${body}").to("mock:wombat").             from("direct:nolog").routeId("nolog").log(LoggingLevel.TRACE, "Should not log ${body}").to("mock:bar").         }     }. }
