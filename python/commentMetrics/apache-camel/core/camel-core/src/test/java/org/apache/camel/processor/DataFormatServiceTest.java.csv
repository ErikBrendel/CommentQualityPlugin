commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testMarshal() throws Exception {     assertEquals(true, my.isStarted()).     assertSame(context, my.getCamelContext()).     getMockEndpoint("mock:a").expectedBodiesReceived("Hi Camel").     template.sendBody("direct:a", "Hello World").     assertMockEndpointsSatisfied().     context.stop().     assertEquals(true, my.isStopped()).     assertSame(context, my.getCamelContext()). }
false;public;0;16;;@Test public void testUnmarshal() throws Exception {     assertEquals(true, my.isStarted()).     assertSame(context, my.getCamelContext()).     getMockEndpoint("mock:b").expectedBodiesReceived("Bye World").     template.sendBody("direct:b", "Hello World").     assertMockEndpointsSatisfied().     context.stop().     assertEquals(true, my.isStopped()).     assertSame(context, my.getCamelContext()). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // marshal using our custom data format. (my is an instance of MyDataFormat)     from("direct:a").marshal(my).to("mock:a").     // unmarshal using our custom data format.     from("direct:b").unmarshal(my).to("mock:b"). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // marshal using our custom data format. (my is an instance of MyDataFormat)             from("direct:a").marshal(my).to("mock:a").             // unmarshal using our custom data format.             from("direct:b").unmarshal(my).to("mock:b").         // END SNIPPET: e1         }     }. }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;public;3;3;;public void marshal(Exchange exchange, Object graph, OutputStream stream) throws Exception {     stream.write("Hi Camel".getBytes()). }
false;public;2;3;;public Object unmarshal(Exchange exchange, InputStream stream) throws Exception {     return "Bye World". }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
