commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testSimplePropertiesNested() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived("myHeader", "Beer taste good").     template.sendBodyAndHeader("direct:start", "Hello World", "beer", "bar.quote").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").setHeader("myHeader").simple("${properties:${header.beer}}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setHeader("myHeader").simple("${properties:${header.beer}}").to("mock:result").         }     }. }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocations(new String[] { "org/apache/camel/component/properties/bar.properties" }).     context.addComponent("properties", pc).     return context. }
