commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testFailoverRoundRobin() throws Exception {     getMockEndpoint("mock:good").expectedBodiesReceived("Hello World", "Bye World").     getMockEndpoint("mock:bad").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     from("direct:start").loadBalance().failover(1, true, true).to("direct:good", "direct:bad").     from("direct:good").to("mock:good").     from("direct:bad").to("mock:bad").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").loadBalance().failover(1, true, true).to("direct:good", "direct:bad").             from("direct:good").to("mock:good").             from("direct:bad").to("mock:bad").throwException(new IllegalArgumentException("Damn")).         }     }. }
