commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/deletefile").     super.setUp(). }
false;public;0;16;;@Test public void testPollFileAndShouldNotBeDeleted() throws Exception {     template.sendBodyAndHeader("file://target/data/deletefile", body, Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:error").     // it could potentially retry the file on the 2nd poll and then fail again     // so it should be minimum message count     mock.expectedMinimumMessageCount(1).     mock.assertIsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // assert the file is deleted     File file = new File("target/data/deletefile/hello.txt").     assertTrue("The file should NOT have been deleted", file.exists()). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Forced by unittest"). }
false;public;0;10;;public void configure() throws Exception {     onException(IllegalArgumentException.class).to("mock:error").     from("file://target/data/deletefile?initialDelay=0&delay=10&delete=true").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Forced by unittest").         }     }). }
false;protected;0;14;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             onException(IllegalArgumentException.class).to("mock:error").             from("file://target/data/deletefile?initialDelay=0&delay=10&delete=true").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("Forced by unittest").                 }             }).         }     }. }
