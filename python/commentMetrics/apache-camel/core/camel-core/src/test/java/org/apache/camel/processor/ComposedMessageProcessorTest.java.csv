commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@SuppressWarnings("unchecked") @Test public void testValidatingCorrectOrder() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedHeaderReceived("orderId", "myorderid").     List<OrderItem> order = Arrays.asList(new OrderItem[] { new OrderItem("widget", 5), new OrderItem("gadget", 10) }).     template.sendBodyAndHeader("direct:start", order, "orderId", "myorderid").     assertMockEndpointsSatisfied().     List<OrderItem> validatedOrder = resultEndpoint.getExchanges().get(0).getIn().getBody(List.class).     assertTrue(validatedOrder.get(0).valid).     assertTrue(validatedOrder.get(1).valid). }
false;public;0;21;;@SuppressWarnings("unchecked") @Test public void testValidatingIncorrectOrder() throws Exception {     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(1).     resultEndpoint.expectedHeaderReceived("orderId", "myorderid").     // START SNIPPET: e1     List<OrderItem> order = Arrays.asList(new OrderItem[] { new OrderItem("widget", 500), new OrderItem("gadget", 200) }).     template.sendBodyAndHeader("direct:start", order, "orderId", "myorderid").     // END SNIPPET: e1     assertMockEndpointsSatisfied().     List<OrderItem> validatedOrder = resultEndpoint.getExchanges().get(0).getIn().getBody(List.class).     assertFalse(validatedOrder.get(0).valid).     assertFalse(validatedOrder.get(1).valid). }
false;protected;0;7;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("orderItemHelper", new OrderItemHelper()).     jndi.bind("widgetInventory", new WidgetInventory()).     jndi.bind("gadgetInventory", new GadgetInventory()).     return jndi. }
false;public;0;19;;public void configure() {     // START SNIPPET: e2     // split up the order so individual OrderItems can be validated by the appropriate bean     from("direct:start").split().body().choice().when().method("orderItemHelper", "isWidget").to("bean:widgetInventory").otherwise().to("bean:gadgetInventory").end().to("seda:aggregate").     // collect and re-assemble the validated OrderItems into an order again     from("seda:aggregate").aggregate(new MyOrderAggregationStrategy()).header("orderId").completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result"). // END SNIPPET: e2 }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e2             // split up the order so individual OrderItems can be validated by the appropriate bean             from("direct:start").split().body().choice().when().method("orderItemHelper", "isWidget").to("bean:widgetInventory").otherwise().to("bean:gadgetInventory").end().to("seda:aggregate").             // collect and re-assemble the validated OrderItems into an order again             from("seda:aggregate").aggregate(new MyOrderAggregationStrategy()).header("orderId").completionTimeout(100).completionTimeoutCheckerInterval(10).to("mock:result").         // END SNIPPET: e2         }     }. }
true;public,static;1;3;// START SNIPPET: e4 ;// START SNIPPET: e4 public static boolean isWidget(@Body OrderItem orderItem) {     return orderItem.type.equals("widget"). }
false;public;1;6;;public void checkInventory(@Body OrderItem orderItem) {     assertEquals("widget", orderItem.type).     if (orderItem.quantity < 10) {         orderItem.valid = true.     } }
false;public;1;6;;public void checkInventory(@Body OrderItem orderItem) {     assertEquals("gadget", orderItem.type).     if (orderItem.quantity < 20) {         orderItem.valid = true.     } }
false;public;2;12;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     List<OrderItem> order = new ArrayList<>(2).     order.add(oldExchange.getIn().getBody(OrderItem.class)).     order.add(newExchange.getIn().getBody(OrderItem.class)).     oldExchange.getIn().setBody(order).     return oldExchange. }
