commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myRetryHandler", new MyRetryBean()).     return jndi. }
false;public;0;6;;@Test public void testRetryUntil() throws Exception {     Object out = template.requestBody("direct:start", "Hello World").     assertEquals("Bye World", out).     assertEquals(3, invoked). }
false;public;0;6;;@Override public void configure() throws Exception {     errorHandler(defaultErrorHandler().redeliveryDelay(0).retryWhile(method("myRetryHandler"))).     from("direct:start").process(new MyProcessor()). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(defaultErrorHandler().redeliveryDelay(0).retryWhile(method("myRetryHandler"))).             from("direct:start").process(new MyProcessor()).         }     }. }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     if (invoked < 3) {         throw new MyFunctionalException("Sorry you cannot do this").     }     exchange.getIn().setBody("Bye World"). }
false;public;0;5;;public boolean retry() {     // force retry forever     invoked++.     return true. }
