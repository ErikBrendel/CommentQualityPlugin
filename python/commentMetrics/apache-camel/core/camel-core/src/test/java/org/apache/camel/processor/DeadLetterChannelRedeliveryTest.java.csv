commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testTwoRedeliveryTest() throws Exception {     counter = 0.     redeliveryCounter = 0.     getMockEndpoint("mock:error").expectedMessageCount(1).     template.sendBody("direct:two", "Hello World").     assertMockEndpointsSatisfied().     // One call + 2 re-deliveries     assertEquals(3, counter).     // 2 re-deliveries     assertEquals(2, redeliveryCounter). }
false;public;0;14;;@Test public void testNoRedeliveriesTest() throws Exception {     counter = 0.     redeliveryCounter = 0.     getMockEndpoint("mock:error").expectedMessageCount(1).     template.sendBody("direct:no", "Hello World").     assertMockEndpointsSatisfied().     // One call     assertEquals(1, counter).     // no redeliveries     assertEquals(0, redeliveryCounter). }
false;public;0;14;;@Test public void testOneRedeliveriesTest() throws Exception {     counter = 0.     redeliveryCounter = 0.     getMockEndpoint("mock:error").expectedMessageCount(1).     template.sendBody("direct:one", "Hello World").     assertMockEndpointsSatisfied().     // One call + 1 redelivery     assertEquals(2, counter).     // 1 redelivery     assertEquals(1, redeliveryCounter). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     throw new Exception("Forced exception by unit test"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     throw new Exception("Forced exception by unit test"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     counter++.     throw new Exception("Forced exception by unit test"). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class). }
false;public;0;49;;public void configure() throws Exception {     from("direct:two").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).onRedelivery(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).         }     })).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             throw new Exception("Forced exception by unit test").         }     }).     from("direct:no").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0).onRedelivery(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).         }     })).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             throw new Exception("Forced exception by unit test").         }     }).     from("direct:one").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1).redeliveryDelay(0).onRedelivery(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).         }     })).process(new Processor() {          public void process(Exchange exchange) throws Exception {             counter++.             throw new Exception("Forced exception by unit test").         }     }). }
false;protected;0;54;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:two").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(2).redeliveryDelay(0).onRedelivery(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).                 }             })).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     throw new Exception("Forced exception by unit test").                 }             }).             from("direct:no").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(0).onRedelivery(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).                 }             })).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     throw new Exception("Forced exception by unit test").                 }             }).             from("direct:one").errorHandler(deadLetterChannel("mock:error").maximumRedeliveries(1).redeliveryDelay(0).onRedelivery(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     redeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).                 }             })).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     counter++.                     throw new Exception("Forced exception by unit test").                 }             }).         }     }. }
