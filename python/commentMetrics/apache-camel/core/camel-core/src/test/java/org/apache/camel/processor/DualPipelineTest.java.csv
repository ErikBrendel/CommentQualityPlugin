commented;modifiers;parameterAmount;loc;comment;code
false;public;0;30;;@Test public void testDualPipeline() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("After A").     getMockEndpoint("mock:c").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:d").expectedBodiesReceived("After C").     getMockEndpoint("mock:e").expectedBodiesReceived("After C").     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // now check the route     MulticastDefinition mc = assertIsInstanceOf(MulticastDefinition.class, context.getRouteDefinitions().get(0).getOutputs().get(0)).     PipelineDefinition pd1 = assertIsInstanceOf(PipelineDefinition.class, mc.getOutputs().get(0)).     PipelineDefinition pd2 = assertIsInstanceOf(PipelineDefinition.class, mc.getOutputs().get(1)).     assertEquals(3, pd1.getOutputs().size()).     assertEquals(4, pd2.getOutputs().size()).     SendDefinition<?> send1 = assertIsInstanceOf(SendDefinition.class, pd1.getOutputs().get(2)).     assertEquals("mock:b", send1.getUri()).     SendDefinition<?> send2 = assertIsInstanceOf(SendDefinition.class, pd2.getOutputs().get(3)).     assertEquals("mock:e", send2.getUri()).     SendDefinition<?> send = assertIsInstanceOf(SendDefinition.class, context.getRouteDefinitions().get(0).getOutputs().get(1)).     assertEquals("mock:result", send.getUri()). }
false;public;0;18;;@Override public void configure() throws Exception {     from("direct:start").multicast().pipeline().to("mock:a").setBody(constant("After A")).to("mock:b").end().pipeline().to("mock:c").setBody(constant("After C")).to("mock:d").to("mock:e").end().end().to("mock:result"). }
false;protected;0;23;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().pipeline().to("mock:a").setBody(constant("After A")).to("mock:b").end().pipeline().to("mock:c").setBody(constant("After C")).to("mock:d").to("mock:e").end().end().to("mock:result").         }     }. }
