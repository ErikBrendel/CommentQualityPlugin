commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("classpath:org/apache/camel/component/properties/concatenation.properties")).     return context. }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     System.setProperty("environment", "junit").     super.setUp(). }
false;public;0;6;;@Override @After public void tearDown() throws Exception {     System.clearProperty("environment").     super.tearDown(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").setBody(simple("${properties:concat.property}")).to("mock:result"). }
false;public;0;16;;@Test public void testConcatPropertiesComponentDefault() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setBody(simple("${properties:concat.property}")).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("file:dirname").     template.sendBody("direct:start", "Test").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").setBody(simple("${properties:property.complete}")).to("mock:result"). }
false;public;0;16;;@Test public void testWithoutConcatPropertiesComponentDefault() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").setBody(simple("${properties:property.complete}")).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("file:dirname").     template.sendBody("direct:start", "Test").     assertMockEndpointsSatisfied(). }
