commented;modifiers;parameterAmount;loc;comment;code
false;public;0;36;;@Test public void testStartRouteThenStopMutateAndStartRouteAgain() throws Exception {     List<RouteDefinition> routes = context.getRouteDefinitions().     assertCollectionSize("Route", routes, 1).     RouteDefinition route = routes.get(0).     endpointA = getMandatoryEndpoint("direct:test.a").     endpointB = getMandatoryEndpoint("seda:test.b").     endpointC = getMandatoryEndpoint("direct:test.C").     // send from A over B to results     MockEndpoint results = getMockEndpoint("mock:results").     results.expectedBodiesReceived(expectedBody).     template.sendBody(endpointA, expectedBody).     assertMockEndpointsSatisfied().     // stop the route     context.getRouteController().stopRoute(route.getId()).     // lets mutate the route...     FromDefinition fromType = assertOneElement(route.getInputs()).     fromType.setUri("direct:test.C").     context.adapt(ModelCamelContext.class).addRouteDefinition(route).     // now lets check it works     // send from C over B to results     results.reset().     results = getMockEndpoint("mock:results").     results.expectedBodiesReceived(expectedBody).     template.sendBody(endpointC, expectedBody).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:test.a").to("seda:test.b").to("mock:results"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:test.a").to("seda:test.b").to("mock:results").         }     }. }
