commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void configure() {     from("direct:start").resequence(body()).batch().size(2).timeout(50).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").resequence(body()).batch().size(2).timeout(50).to("mock:result").         }     }. }
false;public;0;6;;@Test public void testResequencerBatch() throws Exception {     for (int i = 0. i < 100. i++) {         testIteration(i).     } }
false;private;1;28;;private void testIteration(int i) throws Exception {     MockEndpoint me = context.getEndpoint("mock:result", MockEndpoint.class).     me.reset().     me.expectedMessageCount(4).     LOG.info("Run #{}", i).     template.sendBody("direct:start", "4").     template.sendBody("direct:start", "1").     template.sendBody("direct:start", "3").     template.sendBody("direct:start", "2").     assertMockEndpointsSatisfied().     // because the order can change a bit depending when the resequencer trigger cut-off     // then the order can be a bit different     String a = me.getExchanges().get(0).getIn().getBody(String.class).     String b = me.getExchanges().get(1).getIn().getBody(String.class).     String c = me.getExchanges().get(2).getIn().getBody(String.class).     String d = me.getExchanges().get(3).getIn().getBody(String.class).     String line = a + b + c + d.     LOG.info("Order: {}", line).     assertTrue("Line was " + line, "1423".equals(line) || "1234".equals(line)). }
