commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testAggregateSimplePredicateEager() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C+END").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     template.sendBodyAndHeader("direct:start", "END", "id", 123).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).eagerCheckCompletion().completionPredicate(body().isEqualTo("END")).to("mock:aggregated"). // END SNIPPET: e1 }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(header("id"), new BodyInAggregatingStrategy()).eagerCheckCompletion().completionPredicate(body().isEqualTo("END")).to("mock:aggregated").         // END SNIPPET: e1         }     }. }
