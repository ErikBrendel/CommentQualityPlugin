commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testSendingAMessageUsingMulticastReceivesItsOwnExchange() throws Exception {     MockEndpoint x = getMockEndpoint("mock:x").     MockEndpoint y = getMockEndpoint("mock:y").     MockEndpoint z = getMockEndpoint("mock:z").     x.expectedBodiesReceived(BODY).     y.expectedBodiesReceived(BODY).     z.expectedBodiesReceived(BODY).     x.message(0).exchangeProperty("myProperty").isEqualTo(PROPERTY_VALUE).     y.message(0).exchangeProperty("myProperty").isEqualTo(PROPERTY_VALUE).     z.message(0).exchangeProperty("myProperty").isEqualTo(PROPERTY_VALUE).     sendBody().     assertMockEndpointsSatisfied(). }
false;protected;0;3;;protected void sendBody() {     template.sendBodyAndProperty("direct:a", BODY, "myProperty", PROPERTY_VALUE). }
false;public;0;5;;public void configure() {     // START SNIPPET: example     from("direct:a").recipientList(exchangeProperty("myProperty")). // END SNIPPET: example }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:a").recipientList(exchangeProperty("myProperty")).         // END SNIPPET: example         }     }. }
