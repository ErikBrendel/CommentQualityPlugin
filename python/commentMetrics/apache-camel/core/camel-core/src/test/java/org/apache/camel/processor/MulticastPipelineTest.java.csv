commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").pipeline("direct:a", "direct:b").pipeline("direct:c", "direct:d").to("mock:result").     from("direct:a").to("mock:a").setBody().constant("A").     from("direct:b").to("mock:b").setBody().constant("B").     from("direct:c").to("mock:c").setBody().constant("C").     from("direct:d").to("mock:d").setBody().constant("D"). }
false;public;0;28;;@Test public void testPlainPipeline() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").pipeline("direct:a", "direct:b").pipeline("direct:c", "direct:d").to("mock:result").             from("direct:a").to("mock:a").setBody().constant("A").             from("direct:b").to("mock:b").setBody().constant("B").             from("direct:c").to("mock:c").setBody().constant("C").             from("direct:d").to("mock:d").setBody().constant("D").         }     }).     context.start().     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("A").     getMockEndpoint("mock:c").expectedBodiesReceived("B").     getMockEndpoint("mock:d").expectedBodiesReceived("C").     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").pipeline().to("direct:a", "direct:b").end().pipeline().to("direct:c", "direct:d").end().to("mock:result").     from("direct:a").to("mock:a").setBody().constant("A").     from("direct:b").to("mock:b").setBody().constant("B").     from("direct:c").to("mock:c").setBody().constant("C").     from("direct:d").to("mock:d").setBody().constant("D"). }
false;public;0;28;;@Test public void testPlainPipelineTo() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").pipeline().to("direct:a", "direct:b").end().pipeline().to("direct:c", "direct:d").end().to("mock:result").             from("direct:a").to("mock:a").setBody().constant("A").             from("direct:b").to("mock:b").setBody().constant("B").             from("direct:c").to("mock:c").setBody().constant("C").             from("direct:d").to("mock:d").setBody().constant("D").         }     }).     context.start().     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("A").     getMockEndpoint("mock:c").expectedBodiesReceived("B").     getMockEndpoint("mock:d").expectedBodiesReceived("C").     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").multicast().pipeline("direct:a", "direct:b").pipeline("direct:c", "direct:d").end().to("mock:result").     from("direct:a").to("mock:a").setBody().constant("A").     from("direct:b").to("mock:b").setBody().constant("B").     from("direct:c").to("mock:c").setBody().constant("C").     from("direct:d").to("mock:d").setBody().constant("D"). }
false;public;0;30;;@Test public void testMulticastPipeline() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().pipeline("direct:a", "direct:b").pipeline("direct:c", "direct:d").end().to("mock:result").             from("direct:a").to("mock:a").setBody().constant("A").             from("direct:b").to("mock:b").setBody().constant("B").             from("direct:c").to("mock:c").setBody().constant("C").             from("direct:d").to("mock:d").setBody().constant("D").         }     }).     context.start().     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("A").     getMockEndpoint("mock:c").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:d").expectedBodiesReceived("C").     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").multicast().pipeline().to("direct:a", "direct:b").end().pipeline().to("direct:c", "direct:d").end().end().to("mock:result").     from("direct:a").to("mock:a").setBody().constant("A").     from("direct:b").to("mock:b").setBody().constant("B").     from("direct:c").to("mock:c").setBody().constant("C").     from("direct:d").to("mock:d").setBody().constant("D"). }
false;public;0;30;;@Test public void testMulticastPipelineTo() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().pipeline().to("direct:a", "direct:b").end().pipeline().to("direct:c", "direct:d").end().end().to("mock:result").             from("direct:a").to("mock:a").setBody().constant("A").             from("direct:b").to("mock:b").setBody().constant("B").             from("direct:c").to("mock:c").setBody().constant("C").             from("direct:d").to("mock:d").setBody().constant("D").         }     }).     context.start().     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:b").expectedBodiesReceived("A").     getMockEndpoint("mock:c").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:d").expectedBodiesReceived("C").     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
