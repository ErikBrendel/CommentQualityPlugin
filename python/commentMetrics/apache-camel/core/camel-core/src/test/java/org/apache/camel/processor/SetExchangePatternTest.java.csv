commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testInOut() throws Exception {     assertMessageReceivedWithPattern("direct:testInOut", ExchangePattern.InOut). }
false;public;0;4;;@Test public void testInOnly() throws Exception {     assertMessageReceivedWithPattern("direct:testInOnly", ExchangePattern.InOnly). }
false;public;0;4;;@Test public void testSetToInOnlyThenTo() throws Exception {     assertMessageReceivedWithPattern("direct:testSetToInOnlyThenTo", ExchangePattern.InOnly). }
false;public;0;4;;@Test public void testSetToInOutThenTo() throws Exception {     assertMessageReceivedWithPattern("direct:testSetToInOutThenTo", ExchangePattern.InOut). }
false;public;0;4;;@Test public void testToWithInOnlyParam() throws Exception {     assertMessageReceivedWithPattern("direct:testToWithInOnlyParam", ExchangePattern.InOnly). }
false;public;0;4;;@Test public void testToWithInOutParam() throws Exception {     assertMessageReceivedWithPattern("direct:testToWithInOutParam", ExchangePattern.InOut). }
false;public;0;4;;@Test public void testSetExchangePatternInOnly() throws Exception {     assertMessageReceivedWithPattern("direct:testSetExchangePatternInOnly", ExchangePattern.InOnly). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.setPattern(ExchangePattern.InOnly). }
false;public;0;21;;@Test public void testPreserveOldMEPInOut() throws Exception {     // the mock should get an InOut MEP     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOut).     // we send an InOnly     Exchange out = template.send("direct:testInOut", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.setPattern(ExchangePattern.InOnly).         }     }).     // the MEP should be preserved     assertNotNull(out).     assertEquals(ExchangePattern.InOnly, out.getPattern()).     assertMockEndpointsSatisfied(). }
false;public;1;5;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.setPattern(ExchangePattern.InOut). }
false;public;0;21;;@Test public void testPreserveOldMEPInOnly() throws Exception {     // the mock should get an InOnly MEP     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").message(0).exchangePattern().isEqualTo(ExchangePattern.InOnly).     // we send an InOut     Exchange out = template.send("direct:testInOnly", new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.setPattern(ExchangePattern.InOut).         }     }).     // the MEP should be preserved     assertNotNull(out).     assertEquals(ExchangePattern.InOut, out.getPattern()).     assertMockEndpointsSatisfied(). }
false;protected;2;23;;protected void assertMessageReceivedWithPattern(String sendUri, ExchangePattern expectedPattern) throws InterruptedException {     ExchangePattern sendPattern.     switch(expectedPattern) {         case InOut:             sendPattern = ExchangePattern.InOnly.             break.         case InOnly:             sendPattern = ExchangePattern.InOut.             break.         default:             sendPattern = ExchangePattern.InOnly.     }     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     String expectedBody = "InOnlyMessage".     resultEndpoint.expectedBodiesReceived(expectedBody).     resultEndpoint.expectedHeaderReceived("foo", "bar").     template.sendBodyAndHeader(sendUri, sendPattern, expectedBody, "foo", "bar").     resultEndpoint.assertIsSatisfied().     ExchangePattern actualPattern = resultEndpoint.getExchanges().get(0).getPattern().     assertEquals("received exchange pattern", actualPattern, expectedPattern). }
false;public;0;25;;public void configure() {     // START SNIPPET: example     // Send to an endpoint using InOut     from("direct:testInOut").inOut("mock:result").     // Send to an endpoint using InOut     from("direct:testInOnly").inOnly("mock:result").     // Set the exchange pattern to InOut, then send it from direct:inOnly to mock:result endpoint     from("direct:testSetToInOnlyThenTo").setExchangePattern(ExchangePattern.InOnly).to("mock:result").     from("direct:testSetToInOutThenTo").setExchangePattern(ExchangePattern.InOut).to("mock:result").     // Or we can pass the pattern as a parameter to the to() method     from("direct:testToWithInOnlyParam").to(ExchangePattern.InOnly, "mock:result").     from("direct:testToWithInOutParam").to(ExchangePattern.InOut, "mock:result").     // Set the exchange pattern to InOut, then send it on     from("direct:testSetExchangePatternInOnly").setExchangePattern(ExchangePattern.InOnly).to("mock:result"). // END SNIPPET: example }
false;protected;0;29;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             // Send to an endpoint using InOut             from("direct:testInOut").inOut("mock:result").             // Send to an endpoint using InOut             from("direct:testInOnly").inOnly("mock:result").             // Set the exchange pattern to InOut, then send it from direct:inOnly to mock:result endpoint             from("direct:testSetToInOnlyThenTo").setExchangePattern(ExchangePattern.InOnly).to("mock:result").             from("direct:testSetToInOutThenTo").setExchangePattern(ExchangePattern.InOut).to("mock:result").             // Or we can pass the pattern as a parameter to the to() method             from("direct:testToWithInOnlyParam").to(ExchangePattern.InOnly, "mock:result").             from("direct:testToWithInOutParam").to(ExchangePattern.InOut, "mock:result").             // Set the exchange pattern to InOut, then send it on             from("direct:testSetExchangePatternInOnly").setExchangePattern(ExchangePattern.InOnly).to("mock:result").         // END SNIPPET: example         }     }. }
