commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("mySplitter", new MyOtherSplitterBean()).     return jndi. }
false;public;1;3;;public Iterator<String> split(Exchange exchange) {     return MyCloseableIterator.getInstance(). }
false;public;0;10;;@Test public void testCloseableIterator() throws Exception {     try {         template.sendBody("direct:start", "Hello,World").     } catch (CamelExecutionException e) {         assertTrue("MyCloseableIterator.close() was not invoked", MyCloseableIterator.getInstance().isClosed()).         return.     }     fail("Exception should have been thrown"). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").split().method("mySplitter").to("log:foo", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split().method("mySplitter").to("log:foo", "mock:result").         }     }. }
false;public,static;0;6;;public static MyCloseableIterator getInstance() {     if (singleton == null) {         singleton = new MyCloseableIterator().     }     return singleton. }
false;public;0;4;;@Override public void close() throws IOException {     closed = true. }
false;public;0;3;;public boolean isClosed() {     return closed. }
false;public;0;4;;@Override public boolean hasNext() {     return true. }
false;public;0;4;;@Override public String next() {     throw new RuntimeException("will be closed"). }
false;public;0;3;;@Override public void remove() { }
