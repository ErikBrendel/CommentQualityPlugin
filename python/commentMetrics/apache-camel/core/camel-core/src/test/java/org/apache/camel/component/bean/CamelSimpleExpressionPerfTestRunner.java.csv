commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;9;;public static void main(String[] args) throws Exception {     long bodyOnly = executePerformanceTest("${body}").     long bodyProperty = executePerformanceTest("${body[p]}").     long bodyPropertyWithCache = executePerformanceTest("${body[p]}").     System.out.printf("${body}: %dms%n", bodyOnly).     System.out.printf("${body[p]} : %dms%n", bodyProperty).     System.out.printf("${body[p]} with cache : %dms%n", bodyPropertyWithCache). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").loop(MESSAGE_LOOP_COUNT).setHeader("test").simple(simpleExpression).to("mock:plop"). }
false;private,static;1;32;;private static long executePerformanceTest(final String simpleExpression) throws Exception {     CamelContext ctx = new DefaultCamelContext().     ctx.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").loop(MESSAGE_LOOP_COUNT).setHeader("test").simple(simpleExpression).to("mock:plop").         }     }).     ctx.start().     Map<String, String> body = new HashMap<>().     body.put("p", "q").     ProducerTemplate template = ctx.createProducerTemplate().     // Initial one, it's a dry start, we don't care about this one.     template.sendBody("direct:start", body).     // Measure the duration of the executions in nanoseconds     long totalNsDuration = 0.     for (int i = 0. i < TEST_EXECUTION_COUNT. i++) {         long tick = System.nanoTime().         template.sendBody("direct:start", body).         totalNsDuration += System.nanoTime() - tick.     }     ctx.stop().     // Return the average duration in milliseconds     return totalNsDuration / TEST_EXECUTION_COUNT / 1000 / 1000. }
