commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testDualIntercept() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:intercepted").expectedMessageCount(6).     getMockEndpoint("mock:a").expectedMessageCount(3).     getMockEndpoint("mock:b").expectedMessageCount(3).     template.sendBody("direct:start", "Hello World"). // TODO: Using multiple intercept should be avoided // assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     context.setTracing(true).     // it should generally be avoid to have dual interceptors as its a bit confusing     // but you can do it anyway     intercept().to("mock:intercepted").     intercept().to("mock:a").to("mock:b").     from("direct:start").to("mock:foo").to("mock:bar").to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setTracing(true).             // it should generally be avoid to have dual interceptors as its a bit confusing             // but you can do it anyway             intercept().to("mock:intercepted").             intercept().to("mock:a").to("mock:b").             from("direct:start").to("mock:foo").to("mock:bar").to("mock:result").         }     }. }
