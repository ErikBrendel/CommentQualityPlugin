commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testAggregateLostGroupIssue() throws Exception {     messageIndex = 0.     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(2).     mock.message(0).body().isEqualTo("0,1,2,3,4,5,6,7,8,9").     mock.message(1).body().isEqualTo("10,11,12,13,14,15,16,17,18,19").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getOut().setBody(messageIndex++).     exchange.getOut().setHeader("aggregateGroup", "group1"). }
false;public;2;11;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String oldBody = oldExchange.getIn().getBody(String.class).     String newBody = newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(oldBody + "," + newBody).     return oldExchange. }
false;public;0;26;;@Override public void configure() throws Exception {     from("timer://foo?period=10&delay=0").startupOrder(2).process(new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getOut().setBody(messageIndex++).             exchange.getOut().setHeader("aggregateGroup", "group1").         }     }).to("direct:aggregator").     from("direct:aggregator").startupOrder(1).aggregate(header("aggregateGroup"), new AggregationStrategy() {          public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {             if (oldExchange == null) {                 return newExchange.             }             String oldBody = oldExchange.getIn().getBody(String.class).             String newBody = newExchange.getIn().getBody(String.class).             oldExchange.getIn().setBody(oldBody + "," + newBody).             return oldExchange.         }     }).completionSize(10).completionTimeout(200).completionTimeoutCheckerInterval(10).to("log:aggregated").to("mock:result"). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer://foo?period=10&delay=0").startupOrder(2).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     exchange.getOut().setBody(messageIndex++).                     exchange.getOut().setHeader("aggregateGroup", "group1").                 }             }).to("direct:aggregator").             from("direct:aggregator").startupOrder(1).aggregate(header("aggregateGroup"), new AggregationStrategy() {                  public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {                     if (oldExchange == null) {                         return newExchange.                     }                     String oldBody = oldExchange.getIn().getBody(String.class).                     String newBody = newExchange.getIn().getBody(String.class).                     oldExchange.getIn().setBody(oldBody + "," + newBody).                     return oldExchange.                 }             }).completionSize(10).completionTimeout(200).completionTimeoutCheckerInterval(10).to("log:aggregated").to("mock:result").         }     }. }
