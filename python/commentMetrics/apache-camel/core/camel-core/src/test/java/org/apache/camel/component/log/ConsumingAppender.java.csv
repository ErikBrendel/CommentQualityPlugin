commented;modifiers;parameterAmount;loc;comment;code
false;public;1;4;;@Override public void append(LogEvent event) {     this.consumer.accept(event). }
false;public,static;4;3;;// ******************* // Helpers // ******************* public static Appender newAppender(String loggerName, String appenderName, Level level, Consumer<LogEvent> consumer) {     return newAppender(loggerName, appenderName, PatternLayout.SIMPLE_CONVERSION_PATTERN, level, consumer). }
false;public,static;5;28;;public static Appender newAppender(String loggerName, String appenderName, String patter, Level level, Consumer<LogEvent> consumer) {     final LoggerContext ctx = (LoggerContext) LogManager.getContext(false).     final Configuration config = ctx.getConfiguration().     config.removeLogger(loggerName).     ConsumingAppender appender = new ConsumingAppender(appenderName, patter, consumer).     appender.start().     LoggerConfig loggerConfig = LoggerConfig.createLogger(true, level, loggerName, "true", new AppenderRef[] { AppenderRef.createAppenderRef(appenderName, null, null) }, null, config, null).     loggerConfig.addAppender(appender, null, null).     config.addLogger(loggerName, loggerConfig).     ctx.updateLoggers().     return appender. }
