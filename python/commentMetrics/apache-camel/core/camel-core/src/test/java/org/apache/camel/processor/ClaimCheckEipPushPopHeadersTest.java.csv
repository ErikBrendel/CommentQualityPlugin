commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testPushPopHeaders() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:a").expectedHeaderReceived("foo", 123).     getMockEndpoint("mock:b").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:b").expectedHeaderReceived("foo", 456).     getMockEndpoint("mock:c").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:c").expectedHeaderReceived("foo", 123).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", 123).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").to("mock:a").claimCheck(ClaimCheckOperation.Push).transform().constant("Bye World").setHeader("foo", constant(456)).to("mock:b").claimCheck(ClaimCheckOperation.Pop, null, "headers").to("mock:c"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:a").claimCheck(ClaimCheckOperation.Push).transform().constant("Bye World").setHeader("foo", constant(456)).to("mock:b").claimCheck(ClaimCheckOperation.Pop, null, "headers").to("mock:c").         }     }. }
