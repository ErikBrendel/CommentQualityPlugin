commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testRedeliveryErrorHandlerNoRedeliveryOnShutdown() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:deadLetter").expectedMessageCount(1).     getMockEndpoint("mock:deadLetter").setResultWaitTime(25000).     template.sendBody("seda:foo", "Hello World").     getMockEndpoint("mock:foo").assertIsSatisfied().     // should not take long to stop the route     StopWatch watch = new StopWatch().     // sleep 0.5 seconds to do some redeliveries before we stop     Thread.sleep(500).     log.info("==== stopping route foo ====").     context.getRouteController().stopRoute("foo").     long taken = watch.taken().     getMockEndpoint("mock:deadLetter").assertIsSatisfied().     log.info("OnRedelivery processor counter {}", counter.get()).     assertTrue("Should stop route faster, was " + taken, taken < 5000).     assertTrue("Redelivery counter should be >= 20 and < 100, was: " + counter.get(), counter.get() >= 20 && counter.get() < 100). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     counter.incrementAndGet(). }
false;public;0;11;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:deadLetter").allowRedeliveryWhileStopping(false).onRedelivery(new MyRedeliverProcessor()).maximumRedeliveries(200).redeliveryDelay(10).retryAttemptedLogLevel(LoggingLevel.INFO)).     from("seda:foo").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:deadLetter").allowRedeliveryWhileStopping(false).onRedelivery(new MyRedeliverProcessor()).maximumRedeliveries(200).redeliveryDelay(10).retryAttemptedLogLevel(LoggingLevel.INFO)).             from("seda:foo").routeId("foo").to("mock:foo").throwException(new IllegalArgumentException("Forced")).         }     }. }
