commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/move").     super.setUp(). }
false;public;0;14;;@Test public void testMoveToSubDir() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(3).     mock.expectedFileExists("target/data/move/.done/bye.txt").     mock.expectedFileExists("target/data/move/sub/.done/hello.txt").     mock.expectedFileExists("target/data/move/sub/sub2/.done/goodday.txt").     template.sendBodyAndHeader(fileUrl, "Bye World", Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader(fileUrl, "Hello World", Exchange.FILE_NAME, "sub/hello.txt").     template.sendBodyAndHeader(fileUrl, "Goodday World", Exchange.FILE_NAME, "sub/sub2/goodday.txt").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/move?recursive=true&move=.done&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/move?recursive=true&move=.done&initialDelay=0&delay=10").convertBodyTo(String.class).to("mock:result").         }     }. }
