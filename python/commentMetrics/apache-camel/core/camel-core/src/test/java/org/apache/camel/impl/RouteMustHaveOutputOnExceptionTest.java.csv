commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).redeliveryDelay(10).maximumRedeliveries(2).backOffMultiplier(1.5).handled(true).delay(1000).log("Halting for some time").to("mock:halt").end().end().to("mock:result"). }
false;public;0;21;;@Test public void testValid() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).redeliveryDelay(10).maximumRedeliveries(2).backOffMultiplier(1.5).handled(true).delay(1000).log("Halting for some time").to("mock:halt").end().end().to("mock:result").         }     }).     context.start(). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).redeliveryDelay(10).maximumRedeliveries(2).backOffMultiplier(1.5).handled(true).delay(1000).log("Halting for some time").to("mock:halt").end().to("mock:result"). }
false;public;0;26;;@Test public void testInValid() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).redeliveryDelay(10).maximumRedeliveries(2).backOffMultiplier(1.5).handled(true).delay(1000).log("Halting for some time").to("mock:halt").end().to("mock:result").         }     }).     try {         context.start().         fail("Should have thrown an exception").     } catch (FailedToCreateRouteException e) {     // expected     } }
