commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testDetourSet() throws Exception {     controlBean.setDetour(true).     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).body().isEqualTo(BODY).     MockEndpoint detourEndpoint = getMockEndpoint("mock:detour").     detourEndpoint.expectedMessageCount(1).     detourEndpoint.message(0).body().isEqualTo(BODY).     template.sendBody("direct:start", BODY).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testDetourNotSet() throws Exception {     controlBean.setDetour(false).     MockEndpoint resultEndpoint = getMockEndpoint("mock:result").     resultEndpoint.expectedMessageCount(1).     resultEndpoint.message(0).body().isEqualTo(BODY).     MockEndpoint detourEndpoint = getMockEndpoint("mock:detour").     detourEndpoint.expectedMessageCount(0).     template.sendBody("direct:start", BODY).     assertMockEndpointsSatisfied(). }
false;protected;0;6;;protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     controlBean = new ControlBean().     jndi.bind("controlBean", controlBean).     return jndi. }
false;public;0;7;;public void configure() {     // START SNIPPET: e1     from("direct:start").choice().when().method("controlBean", "isDetour").to("mock:detour").end().to("mock:result"). // END SNIPPET: e1 }
false;protected;0;11;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: e1             from("direct:start").choice().when().method("controlBean", "isDetour").to("mock:detour").end().to("mock:result").         // END SNIPPET: e1         }     }. }
false;public;1;3;;public void setDetour(boolean detour) {     this.detour = detour. }
false;public;0;3;;public boolean isDetour() {     return detour. }
