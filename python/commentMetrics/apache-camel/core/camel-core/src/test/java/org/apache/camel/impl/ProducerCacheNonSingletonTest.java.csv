commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;20;;@Test public void testNonSingleton() throws Exception {     context.addComponent("dummy", new MyDummyComponent()).     DefaultProducerCache cache = new DefaultProducerCache(this, context, -1).     cache.start().     Endpoint endpoint = context.getEndpoint("dummy:foo").     DefaultAsyncProducer producer = (DefaultAsyncProducer) cache.acquireProducer(endpoint).     assertNotNull(producer).     assertTrue("Should be started", producer.getStatus().isStarted()).     Object found = context.hasService(MyDummyProducer.class).     assertNull("Should not store producer on CamelContext", found).     cache.releaseProducer(endpoint, producer).     assertTrue("Should be stopped", producer.getStatus().isStopped()).     cache.stop(). }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyDummyEndpoint(). }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return new MyDummyProducer(this). }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "dummy://foo". }
false;public;2;4;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     return false. }
