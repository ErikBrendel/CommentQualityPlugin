commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/include").     super.setUp(). }
false;public;0;10;;@Test public void testIncludePreAndPostfixes() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceivedInAnyOrder("Reports1", "Reports2", "Reports3").     mock.expectedMessageCount(3).     sendFiles().     mock.assertIsSatisfied(). }
false;private;0;9;;private void sendFiles() throws Exception {     String url = "file://target/data/include".     template.sendBodyAndHeader(url, "Hello World", Exchange.FILE_NAME, "hello.xml").     template.sendBodyAndHeader(url, "Reports1", Exchange.FILE_NAME, "report1.txt").     template.sendBodyAndHeader(url, "Bye World", Exchange.FILE_NAME, "secret.txt").     template.sendBodyAndHeader(url, "Reports2", Exchange.FILE_NAME, "report2.txt").     template.sendBodyAndHeader(url, "Reports3", Exchange.FILE_NAME, "Report3.txt").     template.sendBodyAndHeader(url, "Secret2", Exchange.FILE_NAME, "Secret2.txt"). }
false;public;0;4;;public void configure() throws Exception {     from("file://target/data/include/?initialDelay=0&delay=10&include=^report.*txt$").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/include/?initialDelay=0&delay=10&include=^report.*txt$").convertBodyTo(String.class).to("mock:result").         }     }. }
