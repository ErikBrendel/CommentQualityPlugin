commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testToDynamic() throws Exception {     getMockEndpoint("mock:bar").expectedBodiesReceived("Hello Camel ordered beer", "Hello World ordered wine").     // the post-processor should remove the header     getMockEndpoint("mock:bar").allMessages().header(BarConstants.DRINK).isNull().     template.sendBodyAndHeader("direct:start", "Hello Camel", "drink", "beer").     template.sendBodyAndHeader("direct:start", "Hello World", "drink", "wine").     assertMockEndpointsSatisfied().     // there should only be a bar:order endpoint     boolean found = context.getEndpointMap().containsKey("bar://order").     assertTrue("There should only be one bar endpoint", found). }
false;public;0;8;;@Override public void configure() throws Exception {     context.addComponent("bar", new BarComponent()).     from("direct:start").toD("bar:order?drink=${header.drink}").to("mock:bar"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("bar", new BarComponent()).             from("direct:start").toD("bar:order?drink=${header.drink}").to("mock:bar").         }     }. }
