commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     // insert at the end of the existing route, the given piece of route     weaveAddLast().to("mock:last"). }
false;public;0;18;;@Test public void testWeaveAddLast() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // insert at the end of the existing route, the given piece of route             weaveAddLast().to("mock:last").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:last").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "yeah").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     weaveByToUri("mock:foo").replace().to("mock:foo2").     // insert at the end of the existing route, the given piece of route     weaveAddLast().to("mock:last"). }
false;public;0;20;;@Test public void testWeaveByToUriAndAddLast() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByToUri("mock:foo").replace().to("mock:foo2").             // insert at the end of the existing route, the given piece of route             weaveAddLast().to("mock:last").         }     }).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:foo2").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(0).     getMockEndpoint("mock:last").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "yeah").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").choice().when().header("foo").to("mock:foo").otherwise().to("mock:bar"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when().header("foo").to("mock:foo").otherwise().to("mock:bar").         }     }. }
