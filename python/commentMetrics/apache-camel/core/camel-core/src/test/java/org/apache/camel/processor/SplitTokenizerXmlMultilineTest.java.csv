commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSingleLine() throws Exception {     String payload = "<Parent>\n" + "\t<Child A=\"1\" B=\"2\"/>\n" + "</Parent>".     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", payload).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testMultipleLines() throws Exception {     String payload = "<Parent>\n" + "\t<Child A=\"1\"\n" + "\tB=\"2\"/>\n" + "</Parent>".     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", payload).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").split().tokenizeXML("Child").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split().tokenizeXML("Child").to("mock:result").         }     }. }
