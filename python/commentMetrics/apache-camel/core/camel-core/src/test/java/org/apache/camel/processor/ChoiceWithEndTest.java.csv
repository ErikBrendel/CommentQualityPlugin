commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testRouteIsCorrectAtRuntime() throws Exception {     // use navigate to find that the end works as expected     Navigate<Processor> nav = getRoute("direct://start").navigate().     List<Processor> node = nav.next().     // there should be 4 outputs as the end in the otherwise should     // ensure that the transform and last send is not within the choice     assertEquals(4, node.size()).     // the navigate API is a bit simple at this time of writing so it does take a little     // bit of ugly code to find the correct processor in the runtime route     assertIsInstanceOf(SendProcessor.class, unwrapChannel(node.get(0)).getNextProcessor()).     assertIsInstanceOf(ChoiceProcessor.class, unwrapChannel(node.get(1)).getNextProcessor()).     assertIsInstanceOf(TransformProcessor.class, unwrapChannel(node.get(2)).getNextProcessor()).     assertIsInstanceOf(SendProcessor.class, unwrapChannel(node.get(3)).getNextProcessor()). }
false;private;1;10;;private Route getRoute(String routeEndpointURI) {     Route answer = null.     for (Route route : context.getRoutes()) {         if (routeEndpointURI.equals(route.getEndpoint().getEndpointUri())) {             answer = route.             break.         }     }     return answer. }
false;public;0;10;;@Test public void testChoiceHello() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:echo").expectedBodiesReceived("echo Hello World").     getMockEndpoint("mock:last").expectedBodiesReceived("last echo Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testChoiceBye() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:bye").expectedBodiesReceived("We do not care").     getMockEndpoint("mock:last").expectedBodiesReceived("last We do not care").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testChoiceOther() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Camel").     getMockEndpoint("mock:other").expectedBodiesReceived("other Camel").     getMockEndpoint("mock:last").expectedBodiesReceived("last other Camel").     template.sendBody("direct:start", "Camel").     assertMockEndpointsSatisfied(). }
false;public;0;26;;@Override public void configure() throws Exception {     MyChoiceBean bean = new MyChoiceBean().     from("direct:start").to("mock:start").choice().when(body().contains("Hello")).bean(bean, "echo").to("mock:echo").when(body().contains("Bye")).to("direct:bye").to("mock:bye").otherwise().bean(bean, "other").to("mock:other").end().transform(body().prepend("last ")).to("mock:last").     from("direct:bye").doTry().bean(bean, "bye").to("mock:bye").doCatch(Exception.class).setBody(constant("We do not care")).end(). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             MyChoiceBean bean = new MyChoiceBean().             from("direct:start").to("mock:start").choice().when(body().contains("Hello")).bean(bean, "echo").to("mock:echo").when(body().contains("Bye")).to("direct:bye").to("mock:bye").otherwise().bean(bean, "other").to("mock:other").end().transform(body().prepend("last ")).to("mock:last").             from("direct:bye").doTry().bean(bean, "bye").to("mock:bye").doCatch(Exception.class).setBody(constant("We do not care")).end().         }     }. }
false;public;1;3;;public String echo(String s) {     return "echo " + s. }
false;public;1;3;;public String bye(String s) throws Exception {     throw new IllegalArgumentException("Damn does not work"). }
false;public;1;3;;public String other(String s) {     return "other " + s. }
