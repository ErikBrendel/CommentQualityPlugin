commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new Exception("Forced exception by unit test"). }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:in").threads(2).to("mock:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new Exception("Forced exception by unit test").         }     }). }
false;public;0;28;;@Test public void testAsyncDefaultErrorHandlerWait() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").threads(2).to("mock:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new Exception("Forced exception by unit test").                 }             }).         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     try {         template.requestBody("direct:in", "Hello World").         fail("Should have thrown a CamelExecutionException").     } catch (CamelExecutionException e) {         assertEquals("Forced exception by unit test", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
