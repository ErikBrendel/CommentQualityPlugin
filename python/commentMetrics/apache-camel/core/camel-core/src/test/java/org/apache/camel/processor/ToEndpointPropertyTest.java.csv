commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;public;0;18;;@Test public void testSimpleToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://result").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").     from("direct:foo").to("mock:result"). }
false;public;0;21;;@Test public void testMediumToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").             from("direct:foo").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://result").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").recipientList(header("foo")). }
false;public;0;18;;@Test public void testRecipientListToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").recipientList(header("foo")).         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://result").     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:result").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").routingSlip(header("foo")). }
false;public;0;26;;@Test public void testRoutingSlipToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routingSlip(header("foo")).         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://result").     MockEndpoint a = getMockEndpoint("mock:a").     a.expectedMessageCount(1).     a.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://a").     MockEndpoint b = getMockEndpoint("mock:b").     b.expectedMessageCount(1).     b.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://b").     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:a,mock:b,mock:result").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").wireTap("mock:tap").to("mock:result"). }
false;public;0;22;;@Test public void testWireTapToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").wireTap("mock:tap").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://result").     MockEndpoint tap = getMockEndpoint("mock:tap").     tap.expectedMessageCount(1).     tap.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://tap").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     String to = exchange.getProperty(Exchange.TO_ENDPOINT, String.class).     assertEquals("direct://b", to). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:start").multicast().to("direct:a", "direct:b").end().process(new Processor() {          public void process(Exchange exchange) throws Exception {             String to = exchange.getProperty(Exchange.TO_ENDPOINT, String.class).             assertEquals("direct://b", to).         }     }).to("mock:result").     from("direct:a").transform(constant("A")).     from("direct:b").transform(constant("B")). }
false;public;0;27;;@Test public void testMulticastToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").multicast().to("direct:a", "direct:b").end().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String to = exchange.getProperty(Exchange.TO_ENDPOINT, String.class).                     assertEquals("direct://b", to).                 }             }).to("mock:result").             from("direct:a").transform(constant("A")).             from("direct:b").transform(constant("B")).         }     }).     context.start().     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     result.message(0).exchangeProperty(Exchange.FAILURE_ENDPOINT).isNull().     result.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://result").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").disableRedelivery()).     from("direct:start").to("direct:foo").to("mock:result").     from("direct:foo").throwException(new IllegalArgumentException("Damn")). }
false;public;0;23;;@Test public void testDLCToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").disableRedelivery()).             from("direct:start").to("direct:foo").to("mock:result").             from("direct:foo").throwException(new IllegalArgumentException("Damn")).         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint dead = getMockEndpoint("mock:dead").     dead.message(0).exchangeProperty(Exchange.FAILURE_ENDPOINT).isEqualTo("direct://foo").     dead.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://dead").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("direct:dead").disableRedelivery()).     from("direct:start").to("direct:foo").to("mock:result").     from("direct:foo").throwException(new IllegalArgumentException("Damn")).     from("direct:dead").to("mock:a").to("mock:b").to("mock:dead"). }
false;public;0;25;;@Test public void testMediumDLCToEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("direct:dead").disableRedelivery()).             from("direct:start").to("direct:foo").to("mock:result").             from("direct:foo").throwException(new IllegalArgumentException("Damn")).             from("direct:dead").to("mock:a").to("mock:b").to("mock:dead").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint dead = getMockEndpoint("mock:dead").     dead.message(0).exchangeProperty(Exchange.FAILURE_ENDPOINT).isEqualTo("direct://foo").     dead.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://dead").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead").disableRedelivery()).     from("direct:start").multicast().to("direct:a", "direct:b").     from("direct:a").transform(constant("A")).     from("direct:b").throwException(new IllegalArgumentException("Damn")).     from("direct:dead").to("mock:dead"). }
false;public;0;26;;@Test public void testMulticastDLC() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:dead").disableRedelivery()).             from("direct:start").multicast().to("direct:a", "direct:b").             from("direct:a").transform(constant("A")).             from("direct:b").throwException(new IllegalArgumentException("Damn")).             from("direct:dead").to("mock:dead").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(0).     MockEndpoint dead = getMockEndpoint("mock:dead").     dead.message(0).exchangeProperty(Exchange.FAILURE_ENDPOINT).isEqualTo("direct://b").     dead.message(0).exchangeProperty(Exchange.TO_ENDPOINT).isEqualTo("mock://dead").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
