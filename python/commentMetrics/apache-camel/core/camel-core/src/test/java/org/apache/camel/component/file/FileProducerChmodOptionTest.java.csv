commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory(TEST_DIRECTORY).     super.setUp(). }
false;private;0;4;;private boolean canTest() {     // can not run on windows     return !isPlatform("windows"). }
false;public;0;8;;@Test public void testWriteValidChmod0755() throws Exception {     if (!canTest()) {         return.     }     runChmodCheck("0755", "rwxr-xr-x"). }
false;public;0;8;;@Test public void testWriteValidChmod666() throws Exception {     if (!canTest()) {         return.     }     runChmodCheck("666", "rw-rw-rw-"). }
false;private;2;17;;private void runChmodCheck(String routeSuffix, String expectedPermissions) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:chmod" + routeSuffix).     mock.expectedMessageCount(1).     String testFileName = "chmod" + routeSuffix + ".txt".     String fullTestFileName = TEST_DIRECTORY + testFileName.     String testFileContent = "Writing file with chmod " + routeSuffix + " option at " + new Date().     mock.expectedFileExists(fullTestFileName, testFileContent).     template.sendBodyAndHeader("direct:write" + routeSuffix, testFileContent, Exchange.FILE_NAME, testFileName).     File f = new File(fullTestFileName).     Set<PosixFilePermission> permissions = Files.getPosixFilePermissions(f.toPath(), LinkOption.NOFOLLOW_LINKS).     assertEquals(expectedPermissions, PosixFilePermissions.toString(permissions)).     assertEquals(expectedPermissions.replace("-", "").length(), permissions.size()).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:writeBadChmod1").to("file://" + TEST_DIRECTORY + "?chmod=abc").to("mock:badChmod1"). }
false;public;0;22;;@Test public void testInvalidChmod() throws Exception {     if (!canTest()) {         return.     }     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:writeBadChmod1").to("file://" + TEST_DIRECTORY + "?chmod=abc").to("mock:badChmod1").             }         }).         fail("Expected FailedToCreateRouteException").     } catch (Exception e) {         assertTrue("Expected FailedToCreateRouteException, was " + e.getClass().getCanonicalName(), e instanceof FailedToCreateRouteException).         assertTrue("Message was [" + e.getMessage() + "]", e.getMessage().endsWith("conversion possible: chmod option [abc] is not valid")).     } }
true;public;0;15;/**  * Write a file without chmod set, should work normally and not throw an exception for invalid chmod value  * @throws Exception  */ ;/**  * Write a file without chmod set, should work normally and not throw an exception for invalid chmod value  * @throws Exception  */ @Test public void testWriteNoChmod() throws Exception {     if (!canTest()) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:noChmod").     mock.expectedMessageCount(1).     String testFileName = "noChmod.txt".     String fullTestFileName = TEST_DIRECTORY + testFileName.     String testFileContent = "Writing file with no chmod option at " + new Date().     mock.expectedFileExists(fullTestFileName, testFileContent).     template.sendBodyAndHeader("direct:writeNoChmod", testFileContent, Exchange.FILE_NAME, testFileName).     assertMockEndpointsSatisfied(). }
false;public;0;15;;public void configure() {     // Valid chmod values     from("direct:write666").to("file://" + TEST_DIRECTORY + "?chmod=666").to("mock:chmod666").     from("direct:write0755").to("file://" + TEST_DIRECTORY + "?chmod=0755").to("mock:chmod0755").     // No chmod     from("direct:writeNoChmod").to("file://" + TEST_DIRECTORY).to("mock:noChmod"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // Valid chmod values             from("direct:write666").to("file://" + TEST_DIRECTORY + "?chmod=666").to("mock:chmod666").             from("direct:write0755").to("file://" + TEST_DIRECTORY + "?chmod=0755").to("mock:chmod0755").             // No chmod             from("direct:writeNoChmod").to("file://" + TEST_DIRECTORY).to("mock:noChmod").         }     }. }
