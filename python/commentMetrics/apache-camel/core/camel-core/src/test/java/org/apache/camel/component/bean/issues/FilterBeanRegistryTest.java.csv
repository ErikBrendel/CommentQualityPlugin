commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("foo", new MyBean()).     return jndi. }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").filter().method("foo", "isGoldCustomer").to("mock:result"). }
false;public;0;20;;@Test public void testMethodCallExp() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").filter().method("foo", "isGoldCustomer").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Camel").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").filter().method("foo", "isGoldCustomer").to("mock:result"). }
false;public;0;20;;@Test public void testBeanLanguageExp() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").filter().method("foo", "isGoldCustomer").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedBodiesReceived("Camel").     template.sendBody("direct:start", "Hello World").     template.sendBody("direct:start", "Camel").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;3;;public boolean isGoldCustomer(String name) {     return "Camel".equals(name). }
