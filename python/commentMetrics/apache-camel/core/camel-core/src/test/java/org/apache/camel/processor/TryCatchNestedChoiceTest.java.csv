commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testFoo() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", 123).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testOther() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(1).     getMockEndpoint("mock:catch").expectedMessageCount(0).     template.sendBodyAndHeader("direct:start", "Hello Bar", "bar", 456).     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testCatch() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:other").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(1).     template.sendBody("direct:start", "Kaboom").     assertMockEndpointsSatisfied(). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if (body.contains("Kaboom")) {         throw new IllegalArgumentException("Forced error").     } }
false;public;0;26;;@Override public void configure() throws Exception {     from("direct:start").doTry().to("direct:bar").choice().when().simple("${header.foo} == 123").to("mock:foo").otherwise().to("mock:other").endDoTry().doCatch(Exception.class).to("mock:catch").end().     from("direct:bar").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             String body = exchange.getIn().getBody(String.class).             if (body.contains("Kaboom")) {                 throw new IllegalArgumentException("Forced error").             }         }     }). }
false;protected;0;31;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").doTry().to("direct:bar").choice().when().simple("${header.foo} == 123").to("mock:foo").otherwise().to("mock:other").endDoTry().doCatch(Exception.class).to("mock:catch").end().             from("direct:bar").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     String body = exchange.getIn().getBody(String.class).                     if (body.contains("Kaboom")) {                         throw new IllegalArgumentException("Forced error").                     }                 }             }).         }     }. }
