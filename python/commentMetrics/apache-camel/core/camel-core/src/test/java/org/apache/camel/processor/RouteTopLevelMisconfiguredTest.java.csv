commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").split(body()).onException(IllegalArgumentException.class).to("mock:illegal").end().to("mock:split").end(). }
false;public;0;20;;@Test public void testInvalidOnException() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").split(body()).onException(IllegalArgumentException.class).to("mock:illegal").end().to("mock:split").end().             }         }).         fail("Should fail").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage().startsWith("The output must be added as top-level on the route.")).     } }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").split(body()).onCompletion().to("mock:done").end().to("mock:split").end(). }
false;public;0;20;;@Test public void testInvalidOnCompletion() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").split(body()).onCompletion().to("mock:done").end().to("mock:split").end().             }         }).         fail("Should fail").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage().startsWith("The output must be added as top-level on the route.")).     } }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").split(body()).transacted().to("mock:split").end(). }
false;public;0;18;;@Test public void testInvalidTransacted() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").split(body()).transacted().to("mock:split").end().             }         }).         fail("Should fail").     } catch (IllegalArgumentException e) {         assertTrue(e.getMessage().startsWith("The output must be added as top-level on the route.")).     } }
