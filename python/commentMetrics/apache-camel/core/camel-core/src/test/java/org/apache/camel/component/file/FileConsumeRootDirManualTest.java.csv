commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testSkipMe() { // noop }
true;public;0;6;// manual test ;// manual test public void xxxTestPollRootDirectory() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file:/?noop=true").log("File: ${in.header.CamelFileName}").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:/?noop=true").log("File: ${in.header.CamelFileName}").to("mock:result").         }     }. }
