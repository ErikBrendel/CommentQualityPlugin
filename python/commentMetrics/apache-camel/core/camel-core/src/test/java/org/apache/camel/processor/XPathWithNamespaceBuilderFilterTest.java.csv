commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testSendMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(1).     template.sendBody("direct:start", "<person xmlns='http://acme.com/cheese' name='James' city='London'/>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;9;;@Test public void testSendNotMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(0).     template.sendBody("direct:start", "<person xmlns='http://acme.com/cheese'  name='Hiram' city='Tampa'/>").     resultEndpoint.assertIsSatisfied(). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;12;;public void configure() {     // START SNIPPET: example     // lets define the namespaces we'll need in our filters     Namespaces ns = new Namespaces("c", "http://acme.com/cheese").add("xsd", "http://www.w3.org/2001/XMLSchema").     // now lets create an xpath based Message Filter     from("direct:start").filter(xpath("/c:person[@name='James']").namespaces(ns)).to("mock:result"). // END SNIPPET: example }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             // lets define the namespaces we'll need in our filters             Namespaces ns = new Namespaces("c", "http://acme.com/cheese").add("xsd", "http://www.w3.org/2001/XMLSchema").             // now lets create an xpath based Message Filter             from("direct:start").filter(xpath("/c:person[@name='James']").namespaces(ns)).to("mock:result").         // END SNIPPET: example         }     }. }
