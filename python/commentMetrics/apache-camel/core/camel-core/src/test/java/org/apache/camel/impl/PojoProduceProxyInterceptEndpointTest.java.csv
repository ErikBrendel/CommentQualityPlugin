commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override public void configure() throws Exception {     interceptSendToEndpoint("direct:start").to("language:simple:${body}${body}").     from("direct:start").to("mock:result"). }
false;public;0;31;;@Test public void testPojoProduceInterceptAlreadyStarted() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("direct:start").to("language:simple:${body}${body}").             from("direct:start").to("mock:result").         }     }).     // start Camel before POJO being injected     context.start().     // use the injector (will use the default)     // which should post process the bean to inject the @Produce     MyBean bean = context.getInjector().newInstance(MyBean.class).     MockEndpoint mock = context.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedBodiesReceived("WorldWorld").     Object reply = bean.doSomething("World").     assertEquals("WorldWorld", reply).     mock.assertIsSatisfied().     context.stop(). }
false;public;0;8;;@Override public void configure() throws Exception {     interceptSendToEndpoint("direct:start").to("language:simple:${body}${body}").     from("direct:start").to("mock:result"). }
false;public;0;31;;@Test public void testPojoProduceInterceptNotStarted() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("direct:start").to("language:simple:${body}${body}").             from("direct:start").to("mock:result").         }     }).     // use the injector (will use the default)     // which should post process the bean to inject the @Produce     MyBean bean = context.getInjector().newInstance(MyBean.class).     // do NOT start Camel before POJO being injected     context.start().     MockEndpoint mock = context.getEndpoint("mock:result", MockEndpoint.class).     mock.expectedBodiesReceived("WorldWorld").     Object reply = bean.doSomething("World").     assertEquals("WorldWorld", reply).     mock.assertIsSatisfied().     context.stop(). }
false;;1;1;;String echo(String word).
false;public;1;3;;public Object doSomething(String body) throws Exception {     return echo.echo(body). }
