commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void setUp() throws Exception {     resetCoreConverters().     super.setUp(). }
false;private;0;10;;private void resetCoreConverters() throws Exception {     Field field = CoreStaticTypeConverterLoader.class.getDeclaredField("INSTANCE").     field.setAccessible(true).     Field modifiersField = Field.class.getDeclaredField("modifiers").     modifiersField.setAccessible(true).     modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL).     Constructor<?> cns = CoreStaticTypeConverterLoader.class.getDeclaredConstructor().     cns.setAccessible(true).     field.set(null, cns.newInstance()). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;5;;@Test public void testXPathResult() throws Exception {     String result = (String) xpath("/").stringResult().evaluate(createExchange(XML_DATA)).     assertEquals("Get a wrong result", "  ", result). }
false;public;0;15;;@Test public void testXPath() throws Exception {     // Set this feature will enable the external general entities     System.setProperty(DOM_BUILDER_FACTORY_FEATURE + ":" + "http://xml.org/sax/features/external-general-entities", "true").     try {         xpath("/").stringResult().evaluate(createExchange(XML_DATA)).         fail("Expect an Exception here").     } catch (TypeConversionException ex) {         assertTrue("Get a wrong exception cause: " + ex.getCause().getClass() + " instead of " + FileNotFoundException.class, ex.getCause() instanceof FileNotFoundException).     } finally {         System.clearProperty(DOM_BUILDER_FACTORY_FEATURE + ":" + "http://xml.org/sax/features/external-general-entities").     } }
false;public;0;11;;@Test public void testXPathNoTypeConverter() throws Exception {     try {         // define a class without type converter as document type         xpath("/").documentType(Exchange.class).stringResult().evaluate(createExchange(XML_DATA)).         fail("Expect an Exception here").     } catch (RuntimeCamelException ex) {         assertTrue("Get a wrong exception cause: " + ex.getCause().getClass() + " instead of " + NoTypeConversionAvailableException.class, ex.getCause() instanceof NoTypeConversionAvailableException).     } }
false;public;0;9;;@Test public void testXPathResultOnInvalidData() throws Exception {     try {         xpath("/").stringResult().evaluate(createExchange(XML_DATA_INVALID)).         fail("Expect an Exception here").     } catch (TypeConversionException ex) {         assertTrue("Get a wrong exception cause: " + ex.getCause().getClass() + " instead of " + SAXParseException.class, ex.getCause() instanceof SAXParseException).     } }
false;protected;1;4;;protected Exchange createExchange(Object xml) {     Exchange exchange = createExchangeWithBody(context, xml).     return exchange. }
