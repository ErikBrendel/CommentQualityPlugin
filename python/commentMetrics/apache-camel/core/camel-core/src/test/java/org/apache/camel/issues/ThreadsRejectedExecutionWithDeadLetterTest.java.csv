commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     latch.await(5, TimeUnit.SECONDS). }
false;public;0;19;;@Override public void configure() throws Exception {     from("seda:start").errorHandler(deadLetterChannel("mock:failed")).to("log:before").threads().maxPoolSize(1).poolSize(// 1 thread max     1).maxQueueSize(// 1 queued task     1).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             latch.await(5, TimeUnit.SECONDS).         }     }).to("log:after").to("mock:result"). }
false;public;0;42;;@Test public void testThreadsRejectedExecution() throws Exception {     final CountDownLatch latch = new CountDownLatch(3).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").errorHandler(deadLetterChannel("mock:failed")).to("log:before").threads().maxPoolSize(1).poolSize(// 1 thread max             1).maxQueueSize(// 1 queued task             1).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     latch.await(5, TimeUnit.SECONDS).                 }             }).to("log:after").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(2).     getMockEndpoint("mock:failed").expectedMessageCount(1).     // will block     template.sendBody("seda:start", "Hello World").     // will be queued     template.sendBody("seda:start", "Hi World").     // will be rejected     template.sendBody("seda:start", "Bye World").     Thread.sleep(100).     latch.countDown().     latch.countDown().     latch.countDown().     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     latch.await(500, TimeUnit.MILLISECONDS). }
false;public;0;19;;@Override public void configure() throws Exception {     from("seda:start").errorHandler(deadLetterChannel("mock:failed").maximumRedeliveries(10).redeliveryDelay(100L)).to("log:before").threads().maxPoolSize(1).poolSize(// 1 thread max     1).maxQueueSize(// 1 queued task     1).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             latch.await(500, TimeUnit.MILLISECONDS).         }     }).to("log:after").to("mock:result"). }
false;public;0;40;;@Test public void testThreadsRejectedExecutionWithRedelivery() throws Exception {     final CountDownLatch latch = new CountDownLatch(3).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:start").errorHandler(deadLetterChannel("mock:failed").maximumRedeliveries(10).redeliveryDelay(100L)).to("log:before").threads().maxPoolSize(1).poolSize(// 1 thread max             1).maxQueueSize(// 1 queued task             1).rejectedPolicy(ThreadPoolRejectedPolicy.Abort).process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     latch.await(500, TimeUnit.MILLISECONDS).                 }             }).to("log:after").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(3).     getMockEndpoint("mock:failed").expectedMessageCount(0).     // will block     template.sendBody("seda:start", "Hello World").     // will be queued     template.sendBody("seda:start", "Hi World").     // will be rejected and queued on redelivery later     template.sendBody("seda:start", "Bye World").     latch.countDown().     latch.countDown().     latch.countDown().     assertMockEndpointsSatisfied(). }
