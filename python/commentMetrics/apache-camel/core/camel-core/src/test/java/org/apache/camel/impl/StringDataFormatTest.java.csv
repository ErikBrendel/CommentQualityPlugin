commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Before public void setUp() throws Exception {     context = new DefaultCamelContext().     context.setTracing(true).     template = context.createProducerTemplate().     template.start(). }
false;public;0;5;;@After public void tearDown() throws Exception {     template.stop().     context.stop(). }
false;public;0;3;;public void configure() {     from("direct:start").marshal().string("UTF-8").process(new MyBookProcessor("UTF-8", title)). }
false;public;0;20;;@Test public void testMarshalUTF8() throws Exception {     // NOTE: We are using a processor to do the assertions as the mock endpoint (Camel) does not yet support     // type conversion using byte and strings where you can set a charset encoding     // include a UTF-8 char in the text \u0E08 is a Thai elephant     final String title = "Hello Thai Elephant \u0E08".     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().string("UTF-8").process(new MyBookProcessor("UTF-8", title)).         }     }).     context.start().     MyBook book = new MyBook().     book.setTitle(title).     template.sendBody("direct:start", book). }
false;public;0;3;;public void configure() {     from("direct:start").marshal().string().process(new MyBookProcessor(null, title)). }
false;public;0;19;;@Test public void testMarshalNoEncoding() throws Exception {     // NOTE: We are using a processor to do the assertions as the mock endpoint (Camel) does not yet support     // type conversion using byte and strings where you can set a charset encoding     final String title = "Hello World".     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").marshal().string().process(new MyBookProcessor(null, title)).         }     }).     context.start().     MyBook book = new MyBook().     book.setTitle(title).     template.sendBody("direct:start", book). }
false;public;0;3;;public void configure() {     from("direct:start").unmarshal().string("UTF-8").to("mock:unmarshal"). }
false;public;0;23;;@Test public void testUnmarshalUTF8() throws Exception {     // NOTE: Here we can use a MockEndpoint as we unmarshal the inputstream to String     // include a UTF-8 char in the text \u0E08 is a Thai elephant     final String title = "Hello Thai Elephant \u0E08".     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").unmarshal().string("UTF-8").to("mock:unmarshal").         }     }).     context.start().     byte[] bytes = title.getBytes("UTF-8").     InputStream in = new ByteArrayInputStream(bytes).     template.sendBody("direct:start", in).     MockEndpoint mock = context.getEndpoint("mock:unmarshal", MockEndpoint.class).     mock.setExpectedMessageCount(1).     mock.expectedBodiesReceived(title). }
false;public;0;3;;public void configure() {     from("direct:start").unmarshal().string().to("mock:unmarshal"). }
false;public;0;22;;@Test public void testUnmarshalNoEncoding() throws Exception {     // NOTE: Here we can use a MockEndpoint as we unmarshal the inputstream to String     final String title = "Hello World".     context.addRoutes(new RouteBuilder() {          public void configure() {             from("direct:start").unmarshal().string().to("mock:unmarshal").         }     }).     context.start().     byte[] bytes = title.getBytes().     InputStream in = new ByteArrayInputStream(bytes).     template.sendBody("direct:start", in).     MockEndpoint mock = context.getEndpoint("mock:unmarshal", MockEndpoint.class).     mock.setExpectedMessageCount(1).     mock.expectedBodiesReceived(title). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     byte[] body = exchange.getIn().getBody(byte[].class).     String text.     if (encoding != null) {         text = new String(body, encoding).     } else {         text = new String(body).     }     // does the testing     assertEquals(text, title). }
false;public;1;3;;public void setTitle(String title) {     this.title = title. }
false;public;0;4;;public String toString() {     // Camel will fallback to object toString converter and thus we get this text     return title. }
