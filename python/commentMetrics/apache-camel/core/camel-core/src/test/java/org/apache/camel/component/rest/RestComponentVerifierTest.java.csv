commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry registry = super.createRegistry().     registry.bind("rest", new RestComponent()).     registry.bind("rest-component", new MyComponent()).     return registry. }
false;public;0;19;;@Test public void testParameters() throws Exception {     RestComponent component = context.getComponent("rest", RestComponent.class).     ComponentVerifierExtension verifier = component.getVerifier().     Map<String, Object> parameters = new HashMap<>().     parameters.put("componentName", "rest-component").     parameters.put("host", "http://localhost:1234").     parameters.put("path", "verify").     parameters.put("method", "get").     // This parameter does not belong to the rest component and validation     // is delegated to the underlying component     parameters.put("authProxy", "http://localhost:8080").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.OK, result.getStatus()). }
false;public;0;22;;@Test public void testMissingParameters() throws Exception {     RestComponent component = context.getComponent("rest", RestComponent.class).     ComponentVerifierExtension verifier = component.getVerifier().     Map<String, Object> parameters = new HashMap<>().     parameters.put("componentName", "rest-component").     parameters.put("host", "http://localhost:" + 1234).     parameters.put("path", "verify").     // This parameter does not belong to the rest component and validation     // is delegated to the underlying component     parameters.put("authProxy", "http://localhost:8080").     ComponentVerifierExtension.Result result = verifier.verify(ComponentVerifierExtension.Scope.PARAMETERS, parameters).     Assert.assertEquals(ComponentVerifierExtension.Result.Status.ERROR, result.getStatus()).     Assert.assertEquals(1, result.getErrors().size()).     Assert.assertEquals(ComponentVerifierExtension.VerificationError.StandardCode.MISSING_PARAMETER, result.getErrors().get(0).getCode()).     Assert.assertEquals(1, result.getErrors().get(0).getParameterKeys().size()).     Assert.assertTrue(result.getErrors().get(0).getParameterKeys().contains("method")). }
false;public;2;6;;@Override public Result verify(Scope scope, Map<String, Object> parameters) {     return ResultBuilder.withStatusAndScope(RestComponentVerifierExtension.Result.Status.OK, scope).error(ResultErrorHelper.requiresOption("authProxy", parameters)).build(). }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     throw new UnsupportedOperationException(). }
false;public;10;15;;@Override public Producer createProducer(CamelContext camelContext, String host, String verb, String basePath, String uriTemplate, String queryParameters, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters) throws Exception {     throw new UnsupportedOperationException(). }
false;public;9;14;;@Override public Consumer createConsumer(CamelContext camelContext, Processor processor, String verb, String basePath, String uriTemplate, String consumes, String produces, RestConfiguration configuration, Map<String, Object> parameters) throws Exception {     throw new UnsupportedOperationException(). }
