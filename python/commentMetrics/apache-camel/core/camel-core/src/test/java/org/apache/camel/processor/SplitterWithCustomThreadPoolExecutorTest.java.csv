commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSplitterWithCustomThreadPoolExecutor() throws Exception {     ThreadPoolExecutor threadPoolExecutor = (ThreadPoolExecutor) getSplitter().getExecutorService().     if (threadPoolExecutor == null) {         threadPoolExecutor = context.getRegistry().lookupByNameAndType(getSplitter().getExecutorServiceRef(), ThreadPoolExecutor.class).     }     // this should be sufficient as core pool size is the only thing I changed from the default     assertTrue(threadPoolExecutor.getCorePoolSize() == getThreadPoolExecutor().getCorePoolSize()).     assertTrue(threadPoolExecutor.getMaximumPoolSize() == getThreadPoolExecutor().getMaximumPoolSize()). }
false;protected;0;3;;protected ThreadPoolExecutor getThreadPoolExecutor() {     return customThreadPoolExecutor. }
false;protected;0;11;;protected SplitDefinition getSplitter() {     SplitDefinition result = null.     List<RouteDefinition> routeDefinitions = context.getRouteDefinitions().     for (RouteDefinition routeType : routeDefinitions) {         result = firstSplitterType(routeType.getOutputs()).         if (result != null) {             break.         }     }     return result. }
false;protected;1;15;;protected SplitDefinition firstSplitterType(List<ProcessorDefinition<?>> outputs) {     SplitDefinition result = null.     for (ProcessorDefinition<?> processorType : outputs) {         if (processorType instanceof SplitDefinition) {             result = (SplitDefinition) processorType.         } else {             result = firstSplitterType(processorType.getOutputs()).         }         if (result != null) {             break.         }     }     return result. }
false;public;0;5;;public void configure() {     from("direct:parallel-custom-pool").split(body().tokenize(",")).parallelProcessing().executorService(customThreadPoolExecutor).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:parallel-custom-pool").split(body().tokenize(",")).parallelProcessing().executorService(customThreadPoolExecutor).to("mock:result").         }     }. }
