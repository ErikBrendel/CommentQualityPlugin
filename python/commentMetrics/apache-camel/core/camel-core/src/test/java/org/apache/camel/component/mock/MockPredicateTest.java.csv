commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testMockPredicate() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.message(0).predicate().header("foo").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "bar").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testMockPredicateAsParameter() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.message(0).predicate(PredicateBuilder.isNotNull(header("foo"))).     mock.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "bar").     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.getOut().setBody("Bye World"). }
false;public;0;15;;@Test public void testOutBodyType() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.message(0).outBody(String.class).isEqualTo("Bye World").     mock.expectedMessageCount(1).     template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.getOut().setBody("Bye World").         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").         }     }. }
