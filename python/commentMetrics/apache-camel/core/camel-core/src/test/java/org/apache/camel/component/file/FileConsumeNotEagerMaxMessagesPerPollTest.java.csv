commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/poll").     super.setUp(). }
false;public;0;22;;@Test public void testMaxMessagesPerPoll() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("AAA", "BBB").     template.sendBodyAndHeader(fileUrl, "CCC", Exchange.FILE_NAME, "ccc.txt").     template.sendBodyAndHeader(fileUrl, "AAA", Exchange.FILE_NAME, "aaa.txt").     template.sendBodyAndHeader(fileUrl, "BBB", Exchange.FILE_NAME, "bbb.txt").     // start route     context.getRouteController().startRoute("foo").     mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 2).     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedBodiesReceived("CCC").     mock.expectedPropertyReceived(Exchange.BATCH_SIZE, 1).     assertMockEndpointsSatisfied(). }
false;public;0;4;;public void configure() throws Exception {     from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result"). }
false;protected;0;8;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(fileUrl).routeId("foo").noAutoStartup().convertBodyTo(String.class).to("mock:result").         }     }. }
