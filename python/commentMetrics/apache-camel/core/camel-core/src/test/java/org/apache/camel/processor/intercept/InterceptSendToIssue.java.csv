commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;public void testInterceptSendTo() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.expectedMessageCount(1).     mock.expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, "direct://foo").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     Exchange exchange = mock.getReceivedExchanges().get(0).     assertEquals("direct://start", exchange.getFromEndpoint().getEndpointUri()). }
false;public;0;9;;@Override public void configure() throws Exception {     interceptSendToEndpoint("direct:foo").to("mock:foo").     from("direct:start").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("direct:foo").     from("direct:foo").log("Dummy"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("direct:foo").to("mock:foo").             from("direct:start").setHeader(Exchange.FILE_NAME, constant("hello.txt")).to("direct:foo").             from("direct:foo").log("Dummy").         }     }. }
