commented;modifiers;parameterAmount;loc;comment;code
false;public;0;19;;@SuppressWarnings("unchecked") @Test public void testCustomAggregationStrategy() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "100", "id", "1").     template.sendBodyAndHeader("direct:start", "150", "id", "1").     template.sendBodyAndHeader("direct:start", "130", "id", "1").     assertMockEndpointsSatisfied().     // the list will be stored as the message body by default     List<Integer> numbers = result.getExchanges().get(0).getIn().getBody(List.class).     assertNotNull(numbers).     assertEquals(Integer.valueOf("100"), numbers.get(0)).     assertEquals(Integer.valueOf("150"), numbers.get(1)).     assertEquals(Integer.valueOf("130"), numbers.get(2)). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").aggregate(new MyListOfNumbersStrategy()).header("id").completionSize(3).to("mock:result"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(new MyListOfNumbersStrategy()).header("id").completionSize(3).to("mock:result").         }     }. }
false;public;1;5;;@Override public Integer getValue(Exchange exchange) {     // the message body contains a number, so just return that as-is     return exchange.getIn().getBody(Integer.class). }
