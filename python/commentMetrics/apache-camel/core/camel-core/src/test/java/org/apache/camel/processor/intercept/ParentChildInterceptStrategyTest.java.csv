commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testParentChild() throws Exception {     getMockEndpoint("mock:done").expectedMessageCount(1).     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:c").expectedMessageCount(1).     getMockEndpoint("mock:d").expectedMessageCount(0).     getMockEndpoint("mock:e").expectedMessageCount(0).     template.sendBody("direct:start", "Hello Camel").     assertMockEndpointsSatisfied().     assertEquals(7, LIST.size()).     assertEquals("Parent route -> target task-a", LIST.get(0)).     assertEquals("Parent when -> target task-b", LIST.get(1)).     assertEquals("Parent when -> target task-c", LIST.get(2)).     assertEquals("Parent when2 -> target task-d", LIST.get(3)).     assertEquals("Parent otherwise -> target task-e", LIST.get(4)).     assertEquals("Parent route -> target choice", LIST.get(5)).     // the last one has no custom id so its using its label instead     assertEquals("Parent route -> target mock:done", LIST.get(6)). }
false;public;0;17;;@Override public void configure() throws Exception {     context.addInterceptStrategy(new MyParentChildInterceptStrategy()).     from("direct:start").routeId("route").to("mock:a").id("task-a").choice().id("choice").when(simple("${body} contains 'Camel'")).id("when").to("mock:b").id("task-b").to("mock:c").id("task-c").when(simple("${body} contains 'Donkey'")).id("when2").to("mock:d").id("task-d").otherwise().id("otherwise").to("mock:e").id("task-e").end().to("mock:done"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addInterceptStrategy(new MyParentChildInterceptStrategy()).             from("direct:start").routeId("route").to("mock:a").id("task-a").choice().id("choice").when(simple("${body} contains 'Camel'")).id("when").to("mock:b").id("task-b").to("mock:c").id("task-c").when(simple("${body} contains 'Donkey'")).id("when2").to("mock:d").id("task-d").otherwise().id("otherwise").to("mock:e").id("task-e").end().to("mock:done").         }     }. }
false;public;4;15;;@Override public Processor wrapProcessorInInterceptors(final CamelContext context, final NamedNode node, final Processor target, final Processor nextTarget) throws Exception {     ProcessorDefinition<?> definition = (ProcessorDefinition<?>) node.     String targetId = definition.hasCustomIdAssigned() ? definition.getId() : definition.getLabel().     ProcessorDefinition<?> parent = definition.getParent().     String parentId = "".     if (parent != null) {         parentId = parent.hasCustomIdAssigned() ? parent.getId() : parent.getLabel().     }     LIST.add("Parent " + parentId + " -> target " + targetId).     return target. }
