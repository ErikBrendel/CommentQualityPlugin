commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/keep").     super.setUp(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/keep?noop=true?initialDelay=0&delay=10").delay(10).to("file://target/data/keep/out?keepLastModified=true", "mock:result"). }
false;public;0;25;;@Test public void testKeepLastModified() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/keep?noop=true?initialDelay=0&delay=10").delay(10).to("file://target/data/keep/out?keepLastModified=true", "mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(Exchange.FILE_LAST_MODIFIED).isNotNull().     template.sendBodyAndHeader("file://target/data/keep", "Hello World", "CamelFileName", "hello.txt").     assertMockEndpointsSatisfied().     long t1 = mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_LAST_MODIFIED, long.class).     long t2 = new File("target/data/keep/out/hello.txt").lastModified().     assertEquals("Timestamp should have been kept", t1, t2). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/keep?noop=true?initialDelay=0&delay=10").delay(10).to("file://target/data/keep/out?keepLastModified=false", "mock:result"). }
false;public;0;25;;@Test public void testDoNotKeepLastModified() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/keep?noop=true?initialDelay=0&delay=10").delay(10).to("file://target/data/keep/out?keepLastModified=false", "mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(Exchange.FILE_LAST_MODIFIED).isNotNull().     template.sendBodyAndHeader("file://target/data/keep", "Hello World", "CamelFileName", "hello.txt").     assertMockEndpointsSatisfied().     long t1 = mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_LAST_MODIFIED, long.class).     long t2 = new File("target/data/keep/out/hello.txt").lastModified().     assertNotSame("Timestamp should NOT have been kept", t1, t2). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/keep?noop=true&initialDelay=0&delay=10").delay(10).to("file://target/data/keep/out", "mock:result"). }
false;public;0;25;;@Test public void testDoNotKeepLastModifiedIsDefault() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/keep?noop=true&initialDelay=0&delay=10").delay(10).to("file://target/data/keep/out", "mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.message(0).header(Exchange.FILE_LAST_MODIFIED).isNotNull().     template.sendBodyAndHeader("file://target/data/keep", "Hello World", "CamelFileName", "hello.txt").     assertMockEndpointsSatisfied().     long t1 = mock.getReceivedExchanges().get(0).getIn().getHeader(Exchange.FILE_LAST_MODIFIED, long.class).     long t2 = new File("target/data/keep/out/hello.txt").lastModified().     assertNotSame("Timestamp should NOT have been kept", t1, t2). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
