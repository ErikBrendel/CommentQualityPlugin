commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSplitterCompleted() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Hello World", "Bye World", "Bye Moon").     mock.message(0).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false).     mock.message(1).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false).     mock.message(2).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(true).     template.sendBody("direct:start", "Hello World,Bye World,Bye Moon").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testSplitterStreamingCompleted() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedBodiesReceived("Hello World", "Bye World", "Bye Moon").     mock.message(0).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false).     mock.message(1).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(false).     mock.message(2).exchangeProperty(Exchange.SPLIT_COMPLETE).isEqualTo(true).     template.sendBody("direct:streaming", "Hello World,Bye World,Bye Moon").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).to("mock:split").     from("direct:streaming").split(body().tokenize(",")).streaming().to("mock:split"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).to("mock:split").             from("direct:streaming").split(body().tokenize(",")).streaming().to("mock:split").         }     }. }
