commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/inbox").     deleteDirectory("target/data/outbox").     super.setUp(). }
false;public;0;11;;@Test public void testMoveDoneCustomHeader() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/outbox/hello.txt").     mock.expectedFileExists("target/data/inbox/dones/mydone.txt").     template.sendBodyAndHeader("file:target/data/inbox", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file:target/data/inbox?initialDelay=0&delay=10&move=${header.bar}").setHeader("bar", constant("dones/mydone.txt")).transform(constant("Bye World")).to("mock:result", "file:target/data/outbox"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/inbox?initialDelay=0&delay=10&move=${header.bar}").setHeader("bar", constant("dones/mydone.txt")).transform(constant("Bye World")).to("mock:result", "file:target/data/outbox").         }     }. }
