commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testIteratorThrowExceptionOnFirst() throws Exception {     getMockEndpoint("mock:line").expectedMessageCount(0).     getMockEndpoint("mock:end").expectedMessageCount(0).     try {         template.sendBody("direct:start", new MyIterator(1)).         fail("Should throw exception").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced error", iae.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testIteratorThrowExceptionOnSecond() throws Exception {     getMockEndpoint("mock:line").expectedMessageCount(1).     getMockEndpoint("mock:end").expectedMessageCount(0).     try {         template.sendBody("direct:start", new MyIterator(0)).         fail("Should throw exception").     } catch (Exception e) {         IllegalArgumentException iae = assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced error", iae.getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").split(body()).aggregationStrategy(new UseLatestAggregationStrategy()).streaming().stopOnException().parallelProcessing().parallelAggregate().to("mock:line").end().to("mock:end"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body()).aggregationStrategy(new UseLatestAggregationStrategy()).streaming().stopOnException().parallelProcessing().parallelAggregate().to("mock:line").end().to("mock:end").         }     }. }
false;public;0;4;;@Override public boolean hasNext() {     return count < 2. }
false;public;0;9;;@Override public String next() {     count++.     if (count == 1) {         return "Hello".     } else {         throw new IllegalArgumentException("Forced error").     } }
false;public;0;4;;@Override public void remove() { // noop }
false;public;1;4;;@Override public void forEachRemaining(Consumer<? super String> action) { // noop }
