commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testRetryWhilePredicate() throws Exception {     MyCoolDude dude = new MyCoolDude().     template.sendBodyAndHeader("direct:start", dude, "foo", 123).     assertEquals(3 + 1, dude.getCounter()). }
false;public;1;6;;@Override public boolean matches(Exchange exchange) {     Predicate predicate = and(simple("${body.areWeCool} == 'no'"), isNotNull(header("foo"))).     boolean answer = predicate.matches(exchange).     return answer. }
false;public;0;17;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).redeliveryDelay(0).retryWhile(new Predicate() {          @Override         public boolean matches(Exchange exchange) {             Predicate predicate = and(simple("${body.areWeCool} == 'no'"), isNotNull(header("foo"))).             boolean answer = predicate.matches(exchange).             return answer.         }     }).     from("direct:start").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).redeliveryDelay(0).retryWhile(new Predicate() {                  @Override                 public boolean matches(Exchange exchange) {                     Predicate predicate = and(simple("${body.areWeCool} == 'no'"), isNotNull(header("foo"))).                     boolean answer = predicate.matches(exchange).                     return answer.                 }             }).             from("direct:start").throwException(new IllegalArgumentException("Forced")).         }     }. }
false;public;0;7;;public String areWeCool() {     if (counter++ < 3) {         return "no".     } else {         return "yes".     } }
false;public;0;3;;public int getCounter() {     return counter. }
