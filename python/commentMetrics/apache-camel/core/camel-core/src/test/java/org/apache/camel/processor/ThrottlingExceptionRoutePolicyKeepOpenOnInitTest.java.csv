commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Override @Before public void setUp() throws Exception {     this.createPolicy().     super.setUp().     this.setUseRouteBuilder(true).     result = getMockEndpoint("mock:result").     context.getShutdownStrategy().setTimeout(1). }
false;protected;0;7;;protected void createPolicy() {     int threshold = 2.     long failureWindow = 30.     long halfOpenAfter = 100.     boolean keepOpen = true.     policy = new ThrottlingExceptionRoutePolicy(threshold, failureWindow, halfOpenAfter, null, keepOpen). }
false;public;0;19;;@Test public void testThrottlingRoutePolicyStartWithAlwaysOpenOn() throws Exception {     log.debug("---- sending some messages").     for (int i = 0. i < size. i++) {         template.sendBody(url, "Message " + i).         Thread.sleep(3).     }     // gives time for policy half open check to run every second     // and should not close b/c keepOpen is true     Thread.sleep(500).     // gives time for policy half open check to run every second     // but it should never close b/c keepOpen is true     result.expectedMessageCount(0).     result.setResultWaitTime(1000).     assertMockEndpointsSatisfied(). }
false;public;0;26;;@Test public void testThrottlingRoutePolicyStartWithAlwaysOpenOnThenClose() throws Exception {     for (int i = 0. i < size. i++) {         template.sendBody(url, "Message " + i).         Thread.sleep(3).     }     // gives time for policy half open check to run every second     // and should not close b/c keepOpen is true     Thread.sleep(500).     result.expectedMessageCount(0).     result.setResultWaitTime(1500).     assertMockEndpointsSatisfied().     // set keepOpen to false     // now half open check will succeed     policy.setKeepOpen(false).     // gives time for policy half open check to run every second     // and should close and get all the messages     result.expectedMessageCount(5).     result.setResultWaitTime(1500).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from(url).routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from(url).routePolicy(policy).log("${body}").to("log:foo?groupSize=10").to("mock:result").         }     }. }
