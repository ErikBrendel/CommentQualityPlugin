commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testDurationRoutePolicyFactory() throws Exception {     assertTrue(context.getRouteController().getRouteStatus("foo").isStarted()).     assertFalse(context.getRouteController().getRouteStatus("foo").isStopped()).     // the policy should stop the route after 2 seconds which is approx 20-30 messages     getMockEndpoint("mock:foo").expectedMinimumMessageCount(10).     assertMockEndpointsSatisfied().     // need a little time to stop async     await().atMost(5, TimeUnit.SECONDS).untilAsserted(() -> {         assertFalse(context.getRouteController().getRouteStatus("foo").isStarted()).         assertTrue(context.getRouteController().getRouteStatus("foo").isStopped()).     }). }
false;public;0;11;;@Override public void configure() throws Exception {     DurationRoutePolicyFactory factory = new DurationRoutePolicyFactory().     factory.setMaxSeconds(2).     factory.setMaxMessages(25).     getContext().addRoutePolicyFactory(factory).     from("timer:foo?period=100").routeId("foo").to("mock:foo"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             DurationRoutePolicyFactory factory = new DurationRoutePolicyFactory().             factory.setMaxSeconds(2).             factory.setMaxMessages(25).             getContext().addRoutePolicyFactory(factory).             from("timer:foo?period=100").routeId("foo").to("mock:foo").         }     }. }
