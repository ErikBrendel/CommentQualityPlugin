commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testPropertiesComponentInterceptFrom() throws Exception {     getMockEndpoint("mock:bar").expectedBodiesReceived("World").     getMockEndpoint("mock:cool").expectedBodiesReceived("Bye Camel").     template.sendBody("direct:bar", "World").     template.sendBody("direct:cool", "Camel").     assertMockEndpointsSatisfied(). }
false;protected;0;10;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("classpath:org/apache/camel/component/properties/myproperties.properties").     context.addComponent("properties", pc).     return context. }
false;public;0;11;;@Override public void configure() throws Exception {     interceptFrom("{{cool.start}}").transform().simple("Bye ${body}").     from("direct:cool").to("mock:cool").     from("direct:bar").to("mock:bar"). }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptFrom("{{cool.start}}").transform().simple("Bye ${body}").             from("direct:cool").to("mock:cool").             from("direct:bar").to("mock:bar").         }     }. }
