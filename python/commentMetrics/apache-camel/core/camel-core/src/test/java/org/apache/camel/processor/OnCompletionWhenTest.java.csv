commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testSynchronizeCompleteWhen() throws Exception {     getMockEndpoint("mock:sync").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:sync").expectedPropertyReceived(Exchange.ON_COMPLETION, true).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testSynchronizeCompleteNoWhen() throws Exception {     getMockEndpoint("mock:sync").expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").onCompletion().onWhen(body().contains("Hello")).to("log:sync").to("mock:sync").end().to("log:original").to("mock:result"). // END SNIPPET: e1 }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").onCompletion().onWhen(body().contains("Hello")).to("log:sync").to("mock:sync").end().to("log:original").to("mock:result").         // END SNIPPET: e1         }     }. }
