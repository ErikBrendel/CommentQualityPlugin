commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testIterator() {     Iterator<?> it = ObjectConverter.iterator("Claus,Jonathan").     assertEquals("Claus", it.next()).     assertEquals("Jonathan", it.next()).     assertEquals(false, it.hasNext()). }
false;public;0;13;;@SuppressWarnings("unchecked") @Test public void testIterable() {     for (final String name : (Iterable<String>) ObjectConverter.iterable("Claus,Jonathan")) {         switch(name) {             case "Claus":             case "Jonathan":                 break.             default:                 fail().         }     } }
false;public;0;6;;@Test public void testToByte() {     assertEquals(Byte.valueOf("4"), ObjectConverter.toByte(Byte.valueOf("4"))).     assertEquals(Byte.valueOf("4"), ObjectConverter.toByte(Integer.valueOf("4"))).     assertEquals(Byte.valueOf("4"), ObjectConverter.toByte("4")). }
false;public;0;5;;@Test public void testToClass() {     assertEquals(String.class, ObjectConverter.toClass("java.lang.String", null)).     assertEquals(null, ObjectConverter.toClass("foo.Bar", null)). }
false;public;0;9;;@Test public void testToShort() {     assertEquals(Short.valueOf("4"), ObjectConverter.toShort(Short.valueOf("4"))).     assertEquals(Short.valueOf("4"), ObjectConverter.toShort(Integer.valueOf("4"))).     assertEquals(Short.valueOf("4"), ObjectConverter.toShort("4")).     assertEquals(null, ObjectConverter.toShort(Double.NaN)).     assertEquals(null, ObjectConverter.toShort(Float.NaN)).     assertEquals(Short.valueOf("4"), ObjectConverter.toShort(Short.valueOf("4"))). }
false;public;0;9;;@Test public void testToInteger() {     assertEquals(Integer.valueOf("4"), ObjectConverter.toInteger(Integer.valueOf("4"))).     assertEquals(Integer.valueOf("4"), ObjectConverter.toInteger(Long.valueOf("4"))).     assertEquals(Integer.valueOf("4"), ObjectConverter.toInteger("4")).     assertEquals(null, ObjectConverter.toInteger(Double.NaN)).     assertEquals(null, ObjectConverter.toInteger(Float.NaN)).     assertEquals(Integer.valueOf("4"), ObjectConverter.toInteger(Integer.valueOf("4"))). }
false;public;0;9;;@Test public void testToLong() {     assertEquals(Long.valueOf("4"), ObjectConverter.toLong(Long.valueOf("4"))).     assertEquals(Long.valueOf("4"), ObjectConverter.toLong(Integer.valueOf("4"))).     assertEquals(Long.valueOf("4"), ObjectConverter.toLong("4")).     assertEquals(null, ObjectConverter.toLong(Double.NaN)).     assertEquals(null, ObjectConverter.toLong(Float.NaN)).     assertEquals(Long.valueOf("4"), ObjectConverter.toLong(Long.valueOf("4"))). }
false;public;0;9;;@Test public void testToFloat() {     assertEquals(Float.valueOf("4"), ObjectConverter.toFloat(Float.valueOf("4"))).     assertEquals(Float.valueOf("4"), ObjectConverter.toFloat(Integer.valueOf("4"))).     assertEquals(Float.valueOf("4"), ObjectConverter.toFloat("4")).     assertEquals((Float) Float.NaN, ObjectConverter.toFloat(Double.NaN)).     assertEquals((Float) Float.NaN, ObjectConverter.toFloat(Float.NaN)).     assertEquals(Float.valueOf("4"), ObjectConverter.toFloat(Float.valueOf("4"))). }
false;public;0;9;;@Test public void testToDouble() {     assertEquals(Double.valueOf("4"), ObjectConverter.toDouble(Double.valueOf("4"))).     assertEquals(Double.valueOf("4"), ObjectConverter.toDouble(Integer.valueOf("4"))).     assertEquals(Double.valueOf("4"), ObjectConverter.toDouble("4")).     assertEquals((Double) Double.NaN, ObjectConverter.toDouble(Double.NaN)).     assertEquals((Double) Double.NaN, ObjectConverter.toDouble(Float.NaN)).     assertEquals(Double.valueOf("4"), ObjectConverter.toDouble(Double.valueOf("4"))). }
false;public;0;12;;@Test public void testToBigInteger() {     assertEquals(BigInteger.valueOf(4), ObjectConverter.toBigInteger(Long.valueOf("4"))).     assertEquals(BigInteger.valueOf(4), ObjectConverter.toBigInteger(Integer.valueOf("4"))).     assertEquals(BigInteger.valueOf(4), ObjectConverter.toBigInteger("4")).     assertEquals(BigInteger.valueOf(123456789L), ObjectConverter.toBigInteger("123456789")).     assertEquals(null, ObjectConverter.toBigInteger(new Date())).     assertEquals(null, ObjectConverter.toBigInteger(Double.NaN)).     assertEquals(null, ObjectConverter.toBigInteger(Float.NaN)).     assertEquals(BigInteger.valueOf(4), ObjectConverter.toBigInteger(Long.valueOf("4"))).     assertEquals(new BigInteger("14350442579497085228"), ObjectConverter.toBigInteger("14350442579497085228")). }
false;public;0;7;;@Test public void testToString() {     assertEquals("ABC", ObjectConverter.toString(new StringBuffer("ABC"))).     assertEquals("ABC", ObjectConverter.toString(new StringBuilder("ABC"))).     assertEquals("", ObjectConverter.toString(new StringBuffer(""))).     assertEquals("", ObjectConverter.toString(new StringBuilder(""))). }
false;public;0;5;;@Test public void testToChar() {     assertEquals('A', ObjectConverter.toChar("A")).     assertEquals(Character.valueOf('A'), ObjectConverter.toCharacter("A")). }
false;public;0;7;;@Test public void testNaN() throws Exception {     assertEquals((Double) Double.NaN, ObjectConverter.toDouble(Double.NaN)).     assertEquals((Double) Double.NaN, ObjectConverter.toDouble(Float.NaN)).     assertEquals((Float) Float.NaN, ObjectConverter.toFloat(Double.NaN)).     assertEquals((Float) Float.NaN, ObjectConverter.toFloat(Float.NaN)). }
