commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void onComplete(Exchange exchange) { // this method is invoked when the Exchange completed with no failure }
false;public;1;8;;public void onFailure(Exchange exchange) {     // delete the file     String name = exchange.getIn().getHeader(Exchange.FILE_NAME_PRODUCED, String.class).     FileUtil.deleteFile(new File(name)).     // signal we have deleted the file     LATCH.countDown(). }
false;public;1;3;;public String createMail(String order) throws Exception {     return "Order confirmed: " + order. }
false;public;2;6;;public void sendMail(String body, @Header("to") String to) {     // simulate fatal error if we refer to a special no     if (to.equals("FATAL")) {         throw new IllegalArgumentException("Simulated fatal error").     } }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/mail/backup").     super.setUp(). }
false;public;0;8;;@Test public void testOk() throws Exception {     template.sendBodyAndHeader("direct:confirm", "bumper", "to", "someone@somewhere.org").     File file = new File("target/data/mail/backup/").     String[] files = file.list().     assertEquals("There should be one file", 1, files.length). }
false;public;0;19;;@Test public void testRollback() throws Exception {     try {         template.sendBodyAndHeader("direct:confirm", "bumper", "to", "FATAL").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Simulated fatal error", e.getCause().getMessage()).     }     oneExchangeDone.matchesMockWaitTime().     // onCompletion is async so we gotta wait a bit for the file to be deleted     assertTrue("Should countdown the latch", LATCH.await(5, TimeUnit.SECONDS)).     File file = new File("target/data/mail/backup/").     String[] files = file.list().     assertEquals("There should be no files", 0, files.length). }
false;public;0;17;;@Override public void configure() throws Exception {     from("direct:confirm").onCompletion().onFailureOnly().bean(FileRollback.class, "onFailure").end().bean(OrderService.class, "createMail").log("Saving mail backup file").to("file:target/data/mail/backup").log("Trying to send mail to ${header.to}").bean(OrderService.class, "sendMail").log("Mail send to ${header.to}"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:confirm").onCompletion().onFailureOnly().bean(FileRollback.class, "onFailure").end().bean(OrderService.class, "createMail").log("Saving mail backup file").to("file:target/data/mail/backup").log("Trying to send mail to ${header.to}").bean(OrderService.class, "sendMail").log("Mail send to ${header.to}").         }     }. }
