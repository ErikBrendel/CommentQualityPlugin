commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testOnExceptionCallSubRouteNoErrorHandler() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:start").expectedMessageCount(1).     getMockEndpoint("mock:afterbar").expectedMessageCount(0).     getMockEndpoint("mock:catch").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;20;;@Override public void configure() throws Exception {     onException(Exception.class).to("mock:error").end().     from("direct:start").to("mock:start").doTry().to("direct:bar").to("mock:afterbar").doCatch(Exception.class).to("mock:catch").end().to("mock:result").     from("direct:bar").errorHandler(noErrorHandler()).to("mock:bar").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).to("mock:error").end().             from("direct:start").to("mock:start").doTry().to("direct:bar").to("mock:afterbar").doCatch(Exception.class).to("mock:catch").end().to("mock:result").             from("direct:bar").errorHandler(noErrorHandler()).to("mock:bar").throwException(new IllegalArgumentException("Damn")).         }     }. }
