commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testInOut() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     // we do not wait for the response so we just get our own input back     assertEquals("Hello World", out).     assertMockEndpointsSatisfied(). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     exchange.getIn().setBody("Hello World").     exchange.setPattern(ExchangePattern.InOnly). }
false;public;0;16;;@Test public void testInOnly() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     Exchange out = template.send("direct:start", new Processor() {          public void process(Exchange exchange) throws Exception {             exchange.getIn().setBody("Hello World").             exchange.setPattern(ExchangePattern.InOnly).         }     }).     // we do not wait for the response so we just get our own input back     assertEquals("Hello World", out.getIn().getBody()).     assertEquals(null, out.getOut().getBody()).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("seda:foo?waitForTaskToComplete=Never").     from("seda:foo?waitForTaskToComplete=Never").transform(constant("Bye World")).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("seda:foo?waitForTaskToComplete=Never").             from("seda:foo?waitForTaskToComplete=Never").transform(constant("Bye World")).to("mock:result").         }     }. }
