commented;modifiers;parameterAmount;loc;comment;code
false;public;0;44;;@Test(timeout = 10000) public void testDefaultHealthCheckService() throws Exception {     CamelContext context = null.     try {         MyHealthCheck check = new MyHealthCheck("", HealthCheck.State.UP).         List<HealthCheck.State> results = new ArrayList<>().         CountDownLatch latch = new CountDownLatch(10).         DefaultHealthCheckRegistry registry = new DefaultHealthCheckRegistry().         registry.register(check).         DefaultHealthCheckService service = new DefaultHealthCheckService().         service.setCheckInterval(500, TimeUnit.MILLISECONDS).         service.addStateChangeListener((s, c) -> {             results.add(s).             check.flip().             latch.countDown().         }).         context = new DefaultCamelContext().         context.setExtension(HealthCheckRegistry.class, registry).         context.addService(service).         context.start().         latch.await().         for (int i = 0. i < results.size(). i++) {             if (i % 2 == 0) {                 Assert.assertEquals(HealthCheck.State.UP, results.get(i)).             } else {                 Assert.assertEquals(HealthCheck.State.DOWN, results.get(i)).             }         }         Assert.assertEquals(1, service.getResults().size()).         Assert.assertEquals(check, service.getResults().iterator().next().getCheck()).     } finally {         if (context != null) {             context.stop().         }     } }
false;public;0;3;;public void flip() {     this.state = this.state == State.UP ? State.DOWN : State.UP. }
false;public;2;4;;@Override public void doCall(HealthCheckResultBuilder builder, Map<String, Object> options) {     builder.state(state). }
