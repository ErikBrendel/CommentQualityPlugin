commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testVmInOutChainedTimeout() throws Exception {     StopWatch watch = new StopWatch().     try {         template2.requestBody("vm:a?timeout=1000", "Hello World").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         // the chained vm caused the timeout         ExchangeTimedOutException cause = assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause()).         assertEquals(200, cause.getTimeout()).     }     long delta = watch.taken().     assertTrue("Should be faster than 1 sec, was: " + delta, delta < 1100). }
false;public;0;7;;@Override public void configure() throws Exception {     from("vm:b").to("mock:b").delay(500).transform().constant("Bye World"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:b").to("mock:b").delay(500).transform().constant("Bye World").         }     }. }
false;public;0;10;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("vm:a").to("mock:a").to("vm:b?timeout=200").to("mock:a2"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("vm:a").to("mock:a").to("vm:b?timeout=200").to("mock:a2").         }     }. }
