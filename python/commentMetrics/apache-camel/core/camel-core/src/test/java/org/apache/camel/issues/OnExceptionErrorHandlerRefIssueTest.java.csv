commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testOnExceptionErrorHandlerRef() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:handled").expectedMessageCount(1).     getMockEndpoint("mock:dead").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myDLC", new DeadLetterChannelBuilder("mock:dead")).     return jndi. }
false;public;0;12;;@Override public void configure() throws Exception {     errorHandler(new ErrorHandlerBuilderRef("myDLC")).     from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:handled").end().to("mock:a").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(new ErrorHandlerBuilderRef("myDLC")).             from("direct:start").onException(IllegalArgumentException.class).handled(true).to("mock:handled").end().to("mock:a").throwException(new IllegalArgumentException("Damn")).         }     }. }
