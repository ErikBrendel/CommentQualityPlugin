commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("dummy", new MyDummyBean()).     return jndi. }
false;public;0;10;;@Test public void testBeanExplicitMethodAmbiguous() throws Exception {     try {         template.requestBody("direct:hello", "Camel").         fail("Should thrown an exception").     } catch (Exception e) {         AmbiguousMethodCallException cause = assertIsInstanceOf(AmbiguousMethodCallException.class, e.getCause()).         assertEquals(2, cause.getMethods().size()).     } }
false;public;0;5;;@Test public void testBeanExplicitMethodHandler() throws Exception {     String out = template.requestBody("direct:bye", "Camel", String.class).     assertEquals("Bye Camel", out). }
false;public;0;5;;@Test public void testBeanExplicitMethodInvocationStringBody() throws Exception {     String out = template.requestBody("direct:foo", "Camel", String.class).     assertEquals("String", out). }
false;public;0;5;;@Test public void testBeanExplicitMethodInvocationInputStreamBody() throws Exception {     String out = template.requestBody("direct:foo", new ByteArrayInputStream("Camel".getBytes()), String.class).     assertEquals("InputStream", out). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:hello").bean("dummy", "hello", true).     from("direct:bye").bean("dummy", true).     from("direct:foo").bean("dummy", "bar", true). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:hello").bean("dummy", "hello", true).             from("direct:bye").bean("dummy", true).             from("direct:foo").bean("dummy", "bar", true).         }     }. }
