commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filesplit").     super.setUp(). }
false;public;0;15;;@Test public void testSplitStreamingWithChoice() throws Exception {     getMockEndpoint("mock:other").expectedMessageCount(0).     MockEndpoint mock = getMockEndpoint("mock:body").     mock.expectedBodiesReceived("line1", "line2", "line3").     // should be moved to this directory after we are done     mock.expectedFileExists("target/data/filesplit/.camel/splitme.txt").     String body = "line1" + LS + "line2" + LS + "line3".     template.sendBodyAndHeader("file://target/data/filesplit", body, Exchange.FILE_NAME, "splitme.txt").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("file://target/data/filesplit?initialDelay=0&delay=10").split(body().tokenize(LS)).streaming().to("mock:split").choice().when(bodyAs(String.class).isNotNull()).to("mock:body").otherwise().to("mock:other").end(). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filesplit?initialDelay=0&delay=10").split(body().tokenize(LS)).streaming().to("mock:split").choice().when(bodyAs(String.class).isNotNull()).to("mock:body").otherwise().to("mock:other").end().         }     }. }
