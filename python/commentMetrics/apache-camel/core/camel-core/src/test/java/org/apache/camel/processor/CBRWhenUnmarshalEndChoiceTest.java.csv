commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCBR() throws Exception {     getMockEndpoint("mock:when").expectedMessageCount(1).     getMockEndpoint("mock:other").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(2).     template.sendBody("direct:abc", "Hello World").     template.sendBody("direct:abc", null).     template.sendBody("direct:abc", "Please do not fail").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:abc").filter(body().isNotNull()).choice().when().simple("${body} == 'Please do not fail'").to("mock:when").unmarshal().string().endChoice().otherwise().to("mock:other").end().to("mock:result").end(). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:abc").filter(body().isNotNull()).choice().when().simple("${body} == 'Please do not fail'").to("mock:when").unmarshal().string().endChoice().otherwise().to("mock:other").end().to("mock:result").end().         }     }. }
