commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testAbortAsRejectedExecutionHandler() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.Abort.asRejectedExecutionHandler()).     final MockCallable<String> task1 = new MockCallable<>().     final Future<?> result1 = executorService.submit(task1).     final MockRunnable task2 = new MockRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockCallable<String> task3 = new MockCallable<>().     try {         executorService.submit(task3).         fail("Third task should have been rejected by a threadpool is full with 1 task and queue is full with 1 task.").     } catch (RejectedExecutionException e) {     }     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertInvoked(task2, result2).     assertRejected(task3, null). }
false;public;0;22;;@Test public void testAbortAsRejectedExecutionHandlerWithRejectableTasks() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.Abort.asRejectedExecutionHandler()).     final MockRejectableRunnable task1 = new MockRejectableRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRejectableCallable<String> task2 = new MockRejectableCallable<>().     final Future<?> result2 = executorService.submit(task2).     final MockRejectableRunnable task3 = new MockRejectableRunnable().     final Future<?> result3 = executorService.submit(task3).     final MockRejectableCallable<String> task4 = new MockRejectableCallable<>().     final Future<?> result4 = executorService.submit(task4).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertInvoked(task2, result2).     assertRejected(task3, result3).     assertRejected(task4, result4). }
false;public;0;18;;@Test public void testCallerRunsAsRejectedExecutionHandler() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.CallerRuns.asRejectedExecutionHandler()).     final MockRunnable task1 = new MockRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRunnable task2 = new MockRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockRunnable task3 = new MockRunnable().     final Future<?> result3 = executorService.submit(task3).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertInvoked(task2, result2).     assertInvoked(task3, result3). }
false;public;0;18;;@Test public void testCallerRunsAsRejectedExecutionHandlerWithRejectableTasks() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.CallerRuns.asRejectedExecutionHandler()).     final MockRejectableRunnable task1 = new MockRejectableRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRejectableRunnable task2 = new MockRejectableRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockRejectableRunnable task3 = new MockRejectableRunnable().     final Future<?> result3 = executorService.submit(task3).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertInvoked(task2, result2).     assertInvoked(task3, result3). }
false;public;0;18;;@Test public void testDiscardAsRejectedExecutionHandler() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.Discard.asRejectedExecutionHandler()).     final MockRunnable task1 = new MockRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRunnable task2 = new MockRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockRunnable task3 = new MockRunnable().     final Future<?> result3 = executorService.submit(task3).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertInvoked(task2, result2).     assertRejected(task3, result3). }
false;public;0;18;;@Test public void testDiscardAsRejectedExecutionHandlerWithRejectableTasks() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.Discard.asRejectedExecutionHandler()).     final MockRejectableRunnable task1 = new MockRejectableRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRejectableRunnable task2 = new MockRejectableRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockRejectableRunnable task3 = new MockRejectableRunnable().     final Future<?> result3 = executorService.submit(task3).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertInvoked(task2, result2).     assertRejected(task3, result3). }
false;public;0;18;;@Test public void testDiscardOldestAsRejectedExecutionHandler() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.DiscardOldest.asRejectedExecutionHandler()).     final MockRunnable task1 = new MockRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRunnable task2 = new MockRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockRunnable task3 = new MockRunnable().     final Future<?> result3 = executorService.submit(task3).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertRejected(task2, result2).     assertInvoked(task3, result3). }
false;public;0;18;;@Test public void testDiscardOldestAsRejectedExecutionHandlerWithRejectableTasks() throws InterruptedException {     final ExecutorService executorService = createTestExecutorService(ThreadPoolRejectedPolicy.DiscardOldest.asRejectedExecutionHandler()).     final MockRejectableRunnable task1 = new MockRejectableRunnable().     final Future<?> result1 = executorService.submit(task1).     final MockRejectableRunnable task2 = new MockRejectableRunnable().     final Future<?> result2 = executorService.submit(task2).     final MockRejectableRunnable task3 = new MockRejectableRunnable().     final Future<?> result3 = executorService.submit(task3).     shutdownAndAwait(executorService).     assertInvoked(task1, result1).     assertRejected(task2, result2).     assertInvoked(task3, result3). }
false;private;1;3;;private ExecutorService createTestExecutorService(final RejectedExecutionHandler rejectedExecutionHandler) {     return new RejectableThreadPoolExecutor(1, 1, 30, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(1), rejectedExecutionHandler). }
false;private;1;8;;private void shutdownAndAwait(final ExecutorService executorService) {     executorService.shutdown().     try {         assertTrue("Test ExecutorService shutdown is not expected to take longer than 10 seconds.", executorService.awaitTermination(10, TimeUnit.SECONDS)).     } catch (InterruptedException e) {         fail("Test ExecutorService shutdown is not expected to be interrupted.").     } }
false;private;2;7;;private void assertInvoked(MockTask task, Future<?> result) {     assertTrue(result.isDone()).     assertEquals(1, task.getInvocationCount()).     if (task instanceof Rejectable) {         assertEquals(0, task.getRejectionCount()).     } }
false;private;2;9;;private void assertRejected(MockTask task, Future<?> result) {     if (result != null) {         assertFalse(result.isDone()).     }     assertEquals(0, task.getInvocationCount()).     if (task instanceof Rejectable) {         assertEquals(1, task.getRejectionCount()).     } }
false;public;0;3;;public int getInvocationCount() {     return invocationCount.get(). }
false;protected;0;3;;protected void countInvocation() {     invocationCount.incrementAndGet(). }
false;public;0;3;;public int getRejectionCount() {     return rejectionCount.get(). }
false;protected;0;3;;protected void countRejection() {     rejectionCount.incrementAndGet(). }
false;public;0;9;;@Override public void run() {     countInvocation().     try {         TimeUnit.MILLISECONDS.sleep(100).     } catch (InterruptedException e) {         fail("MockRunnable task is not expected to be interrupted.").     } }
false;public;0;4;;@Override public void reject() {     countRejection(). }
false;public;0;10;;@Override public T call() throws Exception {     countInvocation().     try {         TimeUnit.MILLISECONDS.sleep(100).     } catch (InterruptedException e) {         fail("MockCallable task is not expected to be interrupted.").     }     return null. }
false;public;0;4;;@Override public void reject() {     countRejection(). }
