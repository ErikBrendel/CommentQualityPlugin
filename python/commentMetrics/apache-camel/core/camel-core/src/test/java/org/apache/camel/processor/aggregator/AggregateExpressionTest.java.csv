commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testAggregateExpressionSize() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.expectedBodiesReceived("A+A", "B+B", "Z").     template.sendBody("direct:start", "A").     template.sendBody("direct:start", "B").     template.sendBody("direct:start", "A").     template.sendBody("direct:start", "B").     // send the last one with the batch size property     template.sendBodyAndProperty("direct:start", "Z", Exchange.BATCH_SIZE, 5).     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").aggregate(body(), new BodyInAggregatingStrategy()).completionFromBatchConsumer().to("mock:result"). // END SNIPPET: e1 }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").aggregate(body(), new BodyInAggregatingStrategy()).completionFromBatchConsumer().to("mock:result").         // END SNIPPET: e1         }     }. }
