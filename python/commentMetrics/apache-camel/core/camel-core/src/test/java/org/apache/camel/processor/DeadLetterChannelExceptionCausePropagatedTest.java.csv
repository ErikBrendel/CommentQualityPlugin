commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testFirstFewAttemptsFail() throws Exception {     MockEndpoint failedEndpoint = getMockEndpoint("mock:failed").     MockEndpoint successEndpoint = getMockEndpoint("mock:success").     failedEndpoint.expectedBodiesReceived(body).     failedEndpoint.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isEqualTo(RUNTIME_EXCEPTION).     failedEndpoint.expectedMessageCount(1).     successEndpoint.expectedMessageCount(0).     sendBody("direct:start", body).     assertMockEndpointsSatisfied().     assertNull(failedEndpoint.getExchanges().get(0).getException()). }
false;public;0;11;;public void configure() {     errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).     onException(RuntimeException.class).handled(true).to("mock:failed").     from("direct:start").process(e -> {         throw RUNTIME_EXCEPTION.     }).to("mock:success"). }
false;protected;0;15;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             errorHandler(deadLetterChannel("mock:error").redeliveryDelay(0).maximumRedeliveries(3)).             onException(RuntimeException.class).handled(true).to("mock:failed").             from("direct:start").process(e -> {                 throw RUNTIME_EXCEPTION.             }).to("mock:success").         }     }. }
