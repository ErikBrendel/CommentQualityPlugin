commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testPredicateValidator() throws Exception {     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     exchange.getIn().setBody("{name:XOrder}").     Exchange answerEx = template.send("direct:predicate", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals("{name:XOrderResponse}", answerEx.getIn().getBody(String.class)). }
false;public;0;11;;@Test public void testEndpointValidator() throws Exception {     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     exchange.getIn().setBody("<XOrder/>").     Exchange answerEx = template.send("direct:endpoint", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals("<XOrderResponse/>", answerEx.getOut().getBody(String.class)).     assertEquals(MyXmlEndpoint.class, answerEx.getProperty(VALIDATOR_INVOKED)). }
false;public;0;11;;@Test public void testCustomValidator() throws Exception {     Exchange exchange = new DefaultExchange(context, ExchangePattern.InOut).     exchange.getIn().setBody("name=XOrder").     Exchange answerEx = template.send("direct:custom", exchange).     if (answerEx.getException() != null) {         throw answerEx.getException().     }     assertEquals("name=XOrderResponse", answerEx.getOut().getBody(String.class)).     assertEquals(OtherXOrderResponseValidator.class, answerEx.getProperty(VALIDATOR_INVOKED)). }
false;public;0;33;;@Override public void configure() throws Exception {     validator().type("json").withExpression(bodyAs(String.class).contains("{name:XOrder}")).     from("direct:predicate").inputTypeWithValidate("json:JsonXOrder").outputType("json:JsonXOrderResponse").setBody(simple("{name:XOrderResponse}")).     context.addComponent("myxml", new MyXmlComponent()).     validator().type("xml:XmlXOrderResponse").withUri("myxml:endpoint").     from("direct:endpoint").inputType("xml:XmlXOrder").outputTypeWithValidate("xml:XmlXOrderResponse").validate(exchangeProperty(VALIDATOR_INVOKED).isNull()).setBody(simple("<XOrderResponse/>")).     validator().type("other:OtherXOrder").withJava(OtherXOrderValidator.class).     validator().type("other:OtherXOrderResponse").withJava(OtherXOrderResponseValidator.class).     from("direct:custom").inputTypeWithValidate("other:OtherXOrder").outputTypeWithValidate("other:OtherXOrderResponse").validate(exchangeProperty(VALIDATOR_INVOKED).isEqualTo(OtherXOrderValidator.class)).setBody(simple("name=XOrderResponse")). }
false;protected;0;38;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             validator().type("json").withExpression(bodyAs(String.class).contains("{name:XOrder}")).             from("direct:predicate").inputTypeWithValidate("json:JsonXOrder").outputType("json:JsonXOrderResponse").setBody(simple("{name:XOrderResponse}")).             context.addComponent("myxml", new MyXmlComponent()).             validator().type("xml:XmlXOrderResponse").withUri("myxml:endpoint").             from("direct:endpoint").inputType("xml:XmlXOrder").outputTypeWithValidate("xml:XmlXOrderResponse").validate(exchangeProperty(VALIDATOR_INVOKED).isNull()).setBody(simple("<XOrderResponse/>")).             validator().type("other:OtherXOrder").withJava(OtherXOrderValidator.class).             validator().type("other:OtherXOrderResponse").withJava(OtherXOrderResponseValidator.class).             from("direct:custom").inputTypeWithValidate("other:OtherXOrder").outputTypeWithValidate("other:OtherXOrderResponse").validate(exchangeProperty(VALIDATOR_INVOKED).isEqualTo(OtherXOrderValidator.class)).setBody(simple("name=XOrderResponse")).         }     }. }
false;protected;3;4;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyXmlEndpoint(). }
false;public;2;7;;@Override public boolean process(Exchange exchange, AsyncCallback callback) {     exchange.setProperty(VALIDATOR_INVOKED, MyXmlEndpoint.class).     assertEquals("<XOrderResponse/>", exchange.getIn().getBody()).     callback.done(true).     return true. }
false;public;0;12;;@Override public Producer createProducer() throws Exception {     return new DefaultAsyncProducer(this) {          @Override         public boolean process(Exchange exchange, AsyncCallback callback) {             exchange.setProperty(VALIDATOR_INVOKED, MyXmlEndpoint.class).             assertEquals("<XOrderResponse/>", exchange.getIn().getBody()).             callback.done(true).             return true.         }     }. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return false. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "myxml:endpoint". }
false;public;2;6;;@Override public void validate(Message message, DataType type) throws ValidationException {     message.getExchange().setProperty(VALIDATOR_INVOKED, OtherXOrderValidator.class).     assertEquals("name=XOrder", message.getBody()).     log.info("Java validation: other XOrder"). }
false;public;2;6;;@Override public void validate(Message message, DataType type) throws ValidationException {     message.getExchange().setProperty(VALIDATOR_INVOKED, OtherXOrderResponseValidator.class).     assertEquals("name=XOrderResponse", message.getBody()).     log.info("Java validation: other XOrderResponse"). }
