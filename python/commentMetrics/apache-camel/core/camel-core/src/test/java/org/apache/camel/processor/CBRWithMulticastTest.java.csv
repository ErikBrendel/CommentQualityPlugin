commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testOneMessage() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     template.sendBody("direct:start", "Camel rules").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testTwoMesssages() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     getMockEndpoint("mock:foo").expectedMessageCount(2).     getMockEndpoint("mock:bar").expectedMessageCount(2).     template.sendBody("direct:start", "Camel rules").     template.sendBody("direct:start", "Camel rocks").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testResult() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(0).     getMockEndpoint("mock:bar").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").choice().when(body().contains("Camel")).multicast().to("mock:foo").to("mock:bar").endChoice().otherwise().to("mock:result"). // END SNIPPET: e1 }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").choice().when(body().contains("Camel")).multicast().to("mock:foo").to("mock:bar").endChoice().otherwise().to("mock:result").         // END SNIPPET: e1         }     }. }
