commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testAggregateShutdownDefaultThreadPoolTest() throws Exception {     getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C").     template.sendBodyAndHeader("direct:foo", "A", "id", 123).     template.sendBodyAndHeader("direct:foo", "B", "id", 123).     template.sendBodyAndHeader("direct:foo", "C", "id", 123).     assertMockEndpointsSatisfied().     context.getRouteController().stopRoute("foo").     resetMocks().     context.getRouteController().startRoute("foo").     getMockEndpoint("mock:aggregated").expectedBodiesReceived("D+E+F").     template.sendBodyAndHeader("direct:foo", "D", "id", 123).     template.sendBodyAndHeader("direct:foo", "E", "id", 123).     template.sendBodyAndHeader("direct:foo", "F", "id", 123).     assertMockEndpointsSatisfied().     context.stop(). }
false;public;0;34;;@Test public void testAggregateShutdownCustomThreadPoolTest() throws Exception {     assertEquals(false, myPool.isShutdown()).     getMockEndpoint("mock:aggregated").expectedBodiesReceived("A+B+C").     template.sendBodyAndHeader("direct:bar", "A", "id", 123).     template.sendBodyAndHeader("direct:bar", "B", "id", 123).     template.sendBodyAndHeader("direct:bar", "C", "id", 123).     assertMockEndpointsSatisfied().     assertEquals(false, myPool.isShutdown()).     context.getRouteController().stopRoute("bar").     assertEquals(false, myPool.isShutdown()).     resetMocks().     context.getRouteController().startRoute("bar").     assertEquals(false, myPool.isShutdown()).     getMockEndpoint("mock:aggregated").expectedBodiesReceived("D+E+F").     template.sendBodyAndHeader("direct:bar", "D", "id", 123).     template.sendBodyAndHeader("direct:bar", "E", "id", 123).     template.sendBodyAndHeader("direct:bar", "F", "id", 123).     assertMockEndpointsSatisfied().     assertEquals(false, myPool.isShutdown()).     context.stop().     // now it should be shutdown when CamelContext is stopped/shutdown     assertEquals(true, myPool.isShutdown()). }
false;public;0;12;;@Override public void configure() throws Exception {     myPool = context.getExecutorServiceManager().newDefaultThreadPool(this, "myPool").     from("direct:foo").routeId("foo").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(3).to("mock:aggregated").     from("direct:bar").routeId("bar").aggregate(header("id"), new BodyInAggregatingStrategy()).executorService(myPool).completionSize(3).to("mock:aggregated"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             myPool = context.getExecutorServiceManager().newDefaultThreadPool(this, "myPool").             from("direct:foo").routeId("foo").aggregate(header("id"), new BodyInAggregatingStrategy()).completionSize(3).to("mock:aggregated").             from("direct:bar").routeId("bar").aggregate(header("id"), new BodyInAggregatingStrategy()).executorService(myPool).completionSize(3).to("mock:aggregated").         }     }. }
