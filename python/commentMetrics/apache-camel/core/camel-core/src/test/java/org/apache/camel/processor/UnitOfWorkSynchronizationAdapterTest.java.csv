commented;modifiers;parameterAmount;loc;comment;code
false;public;1;6;;@Override public void onComplete(Exchange exchange) {     completed = exchange.     foo = exchange.getIn().getHeader("foo").     doneLatch.countDown(). }
false;public;1;6;;@Override public void onFailure(Exchange exchange) {     failed = exchange.     baz = exchange.getIn().getHeader("baz").     doneLatch.countDown(). }
false;public;1;31;;public void process(Exchange exchange) throws Exception {     log.info("Received: " + exchange).     exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {          @Override         public void onComplete(Exchange exchange) {             completed = exchange.             foo = exchange.getIn().getHeader("foo").             doneLatch.countDown().         }     }).     exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {          @Override         public void onFailure(Exchange exchange) {             failed = exchange.             baz = exchange.getIn().getHeader("baz").             doneLatch.countDown().         }     }).     String name = getName().     if (name.equals("testFail")) {         log.info("Failing test!").         exchange.getOut().setFault(true).         exchange.getOut().setBody("testFail() should always fail with a fault!").     } else if (name.equals("testException")) {         log.info("Throwing exception!").         throw new Exception("Failing test!").     } }
false;public;0;36;;public void configure() {     from("seda:async").to("direct:foo").     from("direct:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             log.info("Received: " + exchange).             exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {                  @Override                 public void onComplete(Exchange exchange) {                     completed = exchange.                     foo = exchange.getIn().getHeader("foo").                     doneLatch.countDown().                 }             }).             exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {                  @Override                 public void onFailure(Exchange exchange) {                     failed = exchange.                     baz = exchange.getIn().getHeader("baz").                     doneLatch.countDown().                 }             }).             String name = getName().             if (name.equals("testFail")) {                 log.info("Failing test!").                 exchange.getOut().setFault(true).                 exchange.getOut().setBody("testFail() should always fail with a fault!").             } else if (name.equals("testException")) {                 log.info("Throwing exception!").                 throw new Exception("Failing test!").             }         }     }). }
false;protected;0;40;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("seda:async").to("direct:foo").             from("direct:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     log.info("Received: " + exchange).                     exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {                          @Override                         public void onComplete(Exchange exchange) {                             completed = exchange.                             foo = exchange.getIn().getHeader("foo").                             doneLatch.countDown().                         }                     }).                     exchange.getUnitOfWork().addSynchronization(new SynchronizationAdapter() {                          @Override                         public void onFailure(Exchange exchange) {                             failed = exchange.                             baz = exchange.getIn().getHeader("baz").                             doneLatch.countDown().                         }                     }).                     String name = getName().                     if (name.equals("testFail")) {                         log.info("Failing test!").                         exchange.getOut().setFault(true).                         exchange.getOut().setBody("testFail() should always fail with a fault!").                     } else if (name.equals("testException")) {                         log.info("Throwing exception!").                         throw new Exception("Failing test!").                     }                 }             }).         }     }. }
