commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filelanguage").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myguidgenerator", new MyGuidGenerator()).     return jndi. }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=${id}.bak").convertBodyTo(String.class).to("mock:result"). }
false;public;0;23;;@Test public void testRenameToId() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=${id}.bak").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file://target/data/filelanguage/", "Hello World", Exchange.FILE_NAME, "report.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     String id = mock.getExchanges().get(0).getIn().getMessageId().     File file = new File("target/data/filelanguage/" + id + ".bak").     assertTrue("File should have been renamed", file.exists()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=backup-${id}-${file:name.noext}.bak").convertBodyTo(String.class).to("mock:result"). }
false;public;0;23;;@Test public void testRenameToComplexWithId() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=backup-${id}-${file:name.noext}.bak").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye World").     template.sendBodyAndHeader("file://target/data/filelanguage/", "Bye World", Exchange.FILE_NAME, "report2.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     String id = mock.getExchanges().get(0).getIn().getMessageId().     File file = new File("target/data/filelanguage/backup-" + id + "-report2.bak").     assertTrue("File should have been renamed", file.exists()). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=backup/${bean:myguidgenerator.guid}.txt").convertBodyTo(String.class).to("mock:result"). }
false;public;0;18;;@Test public void testRenameToBean() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=backup/${bean:myguidgenerator.guid}.txt").convertBodyTo(String.class).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bye Big World").     mock.expectedFileExists("target/data/filelanguage/backup/123.txt", "Bye Big World").     template.sendBodyAndHeader("file://target/data/filelanguage/", "Bye Big World", Exchange.FILE_NAME, "report3.txt").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=../backup/${file:name}.bak").to("mock:result"). }
false;public;0;18;;@Test public void testRenameToSiblingFolder() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/filelanguage/?initialDelay=0&delay=10&exclude=.*bak" + "&move=../backup/${file:name}.bak").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello Big World").     mock.expectedFileExists("target/data/backup/report4.txt.bak").     template.sendBodyAndHeader("file://target/data/filelanguage/", "Hello Big World", Exchange.FILE_NAME, "report4.txt").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     // configured by java using java beans setters     FileEndpoint endpoint = new FileEndpoint().     endpoint.setCamelContext(context).     endpoint.setFile(new File("target/data/filelanguage/")).     endpoint.setAutoCreate(false).     endpoint.setMove(BeanLanguage.bean("myguidgenerator")).     endpoint.setExclude(".*bak").     endpoint.setInitialDelay(10).     from(endpoint).to("mock:result"). }
false;public;0;27;;@Test public void testRenameToBeanWithBeanLanguage() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // configured by java using java beans setters             FileEndpoint endpoint = new FileEndpoint().             endpoint.setCamelContext(context).             endpoint.setFile(new File("target/data/filelanguage/")).             endpoint.setAutoCreate(false).             endpoint.setMove(BeanLanguage.bean("myguidgenerator")).             endpoint.setExclude(".*bak").             endpoint.setInitialDelay(10).             from(endpoint).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Bean Language Rules The World").     mock.expectedFileExists("target/data/filelanguage/123").     template.sendBodyAndHeader("file://target/data/filelanguage/", "Bean Language Rules The World", Exchange.FILE_NAME, "report5.txt").     assertMockEndpointsSatisfied(). }
false;public;0;3;;public String guid() {     return "123". }
