commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct-vm:start").to("direct-vm:foo"). }
false;public;0;19;;public void testInOnly() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:start").to("direct-vm:foo").         }     }).     context.start().     try {         template.sendBody("direct-vm:start", "Hello World").         fail("Should throw an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(DirectVmConsumerNotAvailableException.class, e.getCause()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct-vm:start").to("direct-vm:foo"). }
false;public;0;19;;public void testInOut() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:start").to("direct-vm:foo").         }     }).     context.start().     try {         template.requestBody("direct-vm:start", "Hello World").         fail("Should throw an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(DirectVmConsumerNotAvailableException.class, e.getCause()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct-vm:start").to("direct-vm:foo?failIfNoConsumers=false"). }
false;public;0;19;;@Test public void testFailIfNoConsumerFalse() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:start").to("direct-vm:foo?failIfNoConsumers=false").         }     }).     context.start().     try {         template.sendBody("direct-vm:start", "Hello World").     } catch (CamelExecutionException e) {         assertIsInstanceOf(DirectVmConsumerNotAvailableException.class, e.getCause()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct-vm:foo").routeId("stopThisRoute").to("mock:foo"). }
false;public;0;28;;@Test public void testFailIfNoConsumersAfterConsumersLeave() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:foo").routeId("stopThisRoute").to("mock:foo").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("direct-vm:foo", "Hello World").     assertMockEndpointsSatisfied().     context.getRouteController().stopRoute("stopThisRoute").     TimeUnit.MILLISECONDS.sleep(100).     try {         template.sendBody("direct-vm:foo", "Hello World").         fail("Should throw an exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(DirectVmConsumerNotAvailableException.class, e.getCause()).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct-vm:in").to("direct-vm:foo").     from("direct-vm:foo").to("mock:foo"). }
false;public;0;21;;@Test public void testFailIfNoConsumersWithValidConsumer() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:in").to("direct-vm:foo").             from("direct-vm:foo").to("mock:foo").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("direct-vm:in", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct-vm:in").to("direct-vm:foo?failIfNoConsumers=false").to("direct-vm:bar").     from("direct-vm:bar").to("mock:foo"). }
false;public;0;20;;@Test public void testFailIfNoConsumersFalseWithPipeline() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:in").to("direct-vm:foo?failIfNoConsumers=false").to("direct-vm:bar").             from("direct-vm:bar").to("mock:foo").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("direct-vm:in", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct-vm:foo?failIfNoConsumers=false").to("log:test"). }
false;public;0;13;;@Test public void testConfigOnAConsumer() throws Exception {     context.getComponent("direct-vm", DirectVmComponent.class).setBlock(false).     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct-vm:foo?failIfNoConsumers=false").to("log:test").         }     }).     context.start(). }
