commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("fail", new MyFailBean()).     return jndi. }
false;public;0;10;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException(). }
false;public;0;25;;@Test public void testAsyncEndpointOK() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException().         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo,async:bye:camel,mock:bar,mock:baz").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException(). }
false;public;0;32;;@Test public void testAsyncEndpointERROR() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException().         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(0).     try {         template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo,mock:bar,bean:fail,mock:baz").         fail("Should throw exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied().     assertEquals(3, counter). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;1;5;;public String doSomething(Exchange exchange) throws Exception {     counter++.     assertEquals("bean://fail", exchange.getProperty(Exchange.TO_ENDPOINT, String.class)).     throw new IllegalArgumentException("Damn"). }
