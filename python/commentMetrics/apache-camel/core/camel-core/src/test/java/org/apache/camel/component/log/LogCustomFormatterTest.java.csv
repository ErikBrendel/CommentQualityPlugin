commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Before @Override public void setUp() throws Exception {     super.setUp(). }
false;public;0;19;;@Test public void testCustomFormatterInComponent() throws Exception {     context.stop().     LogComponent log = new LogComponent().     exchangeFormatter = new TestExchangeFormatter().     log.setExchangeFormatter(exchangeFormatter).     context.addComponent("log", log).     context.start().     String endpointUri = "log:" + LogCustomFormatterTest.class.getCanonicalName().     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri + "2", "Hello World").     template.requestBody(endpointUri + "2", "Hello World").     assertEquals(4, exchangeFormatter.getCounter()). }
false;public;0;17;;@Test public void testCustomFormatterInRegistry() throws Exception {     context.stop().     exchangeFormatter = new TestExchangeFormatter().     context.getRegistry().bind("logFormatter", exchangeFormatter).     context.start().     String endpointUri = "log:" + LogCustomFormatterTest.class.getCanonicalName().     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri + "2", "Hello World").     template.requestBody(endpointUri + "2", "Hello World").     assertEquals(4, exchangeFormatter.getCounter()). }
false;public;0;17;;@Test public void testCustomFormatterInRegistryOptions() throws Exception {     context.stop().     exchangeFormatter = new TestExchangeFormatter().     context.getRegistry().bind("logFormatter", exchangeFormatter).     assertEquals("", exchangeFormatter.getPrefix()).     context.start().     String endpointUri = "log:" + LogCustomFormatterTest.class.getCanonicalName() + "?prefix=foo".     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri, "Hello World").     assertEquals(2, exchangeFormatter.getCounter()).     assertEquals("foo", exchangeFormatter.getPrefix()). }
false;public;0;20;;@Test public void testCustomFormatterInRegistryUnknownOption() throws Exception {     context.stop().     exchangeFormatter = new TestExchangeFormatter().     context.getRegistry().bind("logFormatter", exchangeFormatter).     assertEquals("", exchangeFormatter.getPrefix()).     context.start().     // unknown parameter     try {         String endpointUri2 = "log:" + LogCustomFormatterTest.class.getCanonicalName() + "?prefix=foo&bar=no".         template.requestBody(endpointUri2, "Hello World").         fail("Should have thrown exception").     } catch (Exception e) {         ResolveEndpointFailedException cause = assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).         assertTrue(cause.getMessage().endsWith("Unknown parameters=[{bar=no}]")).     } }
false;public;0;17;;@Test public void testFormatterNotPickedUpWithDifferentKey() throws Exception {     context.stop().     exchangeFormatter = new TestExchangeFormatter().     context.getRegistry().bind("anotherFormatter", exchangeFormatter).     context.start().     String endpointUri = "log:" + LogCustomFormatterTest.class.getCanonicalName().     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri, "Hello World").     template.requestBody(endpointUri + "2", "Hello World").     template.requestBody(endpointUri + "2", "Hello World").     assertEquals(0, exchangeFormatter.getCounter()). }
false;public;1;5;;@Override public String format(Exchange exchange) {     counter += addTen ? 10 : 1.     return prefix + exchange.toString(). }
false;public;0;3;;public int getCounter() {     return counter. }
false;public;0;3;;public boolean isAddTen() {     return addTen. }
false;public;1;3;;public void setAddTen(boolean addTen) {     this.addTen = addTen. }
false;public;0;3;;public String getPrefix() {     return prefix. }
false;public;1;3;;public void setPrefix(String prefix) {     this.prefix = prefix. }
