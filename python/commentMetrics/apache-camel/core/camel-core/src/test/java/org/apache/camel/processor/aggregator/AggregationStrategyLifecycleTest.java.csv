commented;modifiers;parameterAmount;loc;comment;code
false;public;0;18;;@Test public void testAggregateLifecycle() throws Exception {     assertTrue("Should be started", strategy.isStarted()).     assertSame(context, strategy.getCamelContext()).     MockEndpoint result = getMockEndpoint("mock:aggregated").     result.expectedBodiesReceived("A+B+C").     template.sendBodyAndHeader("direct:start", "A", "id", 123).     template.sendBodyAndHeader("direct:start", "B", "id", 123).     template.sendBodyAndHeader("direct:start", "C", "id", 123).     assertMockEndpointsSatisfied().     context.stop().     assertTrue("Should be stopped", strategy.isStopped()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").aggregate(header("id"), strategy).completionSize(3).to("mock:aggregated"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").aggregate(header("id"), strategy).completionSize(3).to("mock:aggregated").         }     }. }
false;public;2;11;;@Override public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     if (oldExchange == null) {         return newExchange.     }     String body = oldExchange.getIn().getBody(String.class) + separator + newExchange.getIn().getBody(String.class).     oldExchange.getIn().setBody(body).     return oldExchange. }
false;public;0;4;;@Override public CamelContext getCamelContext() {     return camelContext. }
false;public;1;4;;@Override public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;6;;@Override protected void doStart() throws Exception {     ObjectHelper.notNull(camelContext, "CamelContext").     separator = "+". }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
