commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testHandled() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:handled").     mock.expectedBodiesReceived("Hello World").     mock.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isNotNull().     mock.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).isInstanceOf(IllegalArgumentException.class).     mock.message(0).exchangeProperty(Exchange.EXCEPTION_CAUGHT).method("getMessage").isEqualTo("Forced").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("log:foo?showAll=true").to("mock:handled").     from("direct:start").throwException(new IllegalArgumentException("Forced")). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).to("log:foo?showAll=true").to("mock:handled").             from("direct:start").throwException(new IllegalArgumentException("Forced")).         }     }. }
