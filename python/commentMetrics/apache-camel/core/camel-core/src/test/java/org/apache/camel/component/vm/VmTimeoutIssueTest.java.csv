commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testVmTimeoutWithAnotherVm() throws Exception {     try {         template2.requestBody("vm:start1?timeout=1000", "Hello").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         ExchangeTimedOutException cause = assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause()).         assertEquals(500, cause.getTimeout()).     } }
false;public;0;10;;@Test public void testVmTimeoutWithProcessor() throws Exception {     try {         template2.requestBody("vm:start2?timeout=4000", "Hello").         fail("Should have thrown an exception").     } catch (CamelExecutionException e) {         ExchangeTimedOutException cause = assertIsInstanceOf(ExchangeTimedOutException.class, e.getCause()).         assertEquals(2000, cause.getTimeout()).     } }
false;public;0;5;;@Override public void configure() throws Exception {     from("vm:end").delay(1000).transform().constant("Bye World"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:end").delay(1000).transform().constant("Bye World").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // this exception will trigger to stop asap     throw new ExchangeTimedOutException(exchange, 2000). }
false;public;0;19;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("vm:start1?timeout=1000").to("log:AFTER_START1").to("vm:end?timeout=500").to("log:AFTER_END").     from("vm:start2?timeout=4000").to("log:AFTER_START2").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // this exception will trigger to stop asap             throw new ExchangeTimedOutException(exchange, 2000).         }     }).to("log:AFTER_PROCESSOR"). }
false;protected;0;24;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("vm:start1?timeout=1000").to("log:AFTER_START1").to("vm:end?timeout=500").to("log:AFTER_END").             from("vm:start2?timeout=4000").to("log:AFTER_START2").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // this exception will trigger to stop asap                     throw new ExchangeTimedOutException(exchange, 2000).                 }             }).to("log:AFTER_PROCESSOR").         }     }. }
