commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     // replace the input in the route with a new endpoint uri     replaceFromWith("seda:foo"). }
false;public;0;17;;@Test public void testReplaceFromUri() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // replace the input in the route with a new endpoint uri             replaceFromWith("seda:foo").         }     }).     getMockEndpoint("mock:result").expectedMessageCount(1).     // has been replaced to a seda endpoint instead     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // replace the input in the route with a new endpoint     replaceFromWith(endpoint). }
false;public;0;19;;@Test public void testReplaceFromEndpoint() throws Exception {     final Endpoint endpoint = context.getEndpoint("seda:foo").     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // replace the input in the route with a new endpoint             replaceFromWith(endpoint).         }     }).     getMockEndpoint("mock:result").expectedMessageCount(1).     // has been replaced to a seda endpoint instead     template.sendBody("seda:foo", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     replaceFromWith("xxx:foo"). }
false;public;0;14;;@Test public void testReplaceFromInvalidUri() throws Exception {     try {         RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 replaceFromWith("xxx:foo").             }         }).         fail("Should have thrown exception").     } catch (FailedToCreateRouteException e) {         assertIsInstanceOf(ResolveEndpointFailedException.class, e.getCause()).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }. }
