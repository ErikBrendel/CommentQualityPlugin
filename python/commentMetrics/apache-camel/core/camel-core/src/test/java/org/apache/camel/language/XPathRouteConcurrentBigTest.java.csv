commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testConcurrent() throws Exception {     doSendMessages(333). }
false;private;1;37;;private void doSendMessages(int messageCount) throws Exception {     LOG.info("Sending " + messageCount + " messages").     int forResult = (messageCount * 2 / 3) + messageCount % 3.     int forOther = messageCount - forResult.     long now = System.currentTimeMillis().     // give more time on slow servers     getMockEndpoint("mock:result").setResultWaitTime(30000).     getMockEndpoint("mock:other").setResultWaitTime(30000).     getMockEndpoint("mock:result").expectedMessageCount(forResult).     getMockEndpoint("mock:other").expectedMessageCount(forOther).     for (int i = 0. i < messageCount. i++) {         switch(i % 3) {             case 0:                 template.sendBody("seda:foo", XMLTEST1).                 break.             case 1:                 template.sendBody("seda:foo", XMLTEST2).                 break.             case 2:                 template.sendBody("seda:foo", XMLTEST3).                 break.             default:                 break.         }     }     LOG.info("Sent {} messages in {} ms", messageCount, System.currentTimeMillis() - now).     assertMockEndpointsSatisfied().     LOG.info("Processed {} messages in {} ms", messageCount, System.currentTimeMillis() - now). }
false;public;0;35;;@Override public void configure() throws Exception {     from("seda:foo?concurrentConsumers=50&size=250000").choice().when().xpath("//messageType = 'AAA' or " + "//messageType = 'AAB' or " + "//messageType = 'AAC' or " + "//messageType = 'AAD' or " + "//messageType = 'AAE' or " + "//messageType = 'AAF' or " + "//messageType = 'AAG' or " + "//messageType = 'AAH' or " + "//messageType = 'AAI' or " + "//messageType = 'AAJ' or " + "//messageType = 'AAK' or " + "//messageType = 'AAL' or " + "//messageType = 'AAM' or " + "//messageType = 'AAN' or " + "//messageType = 'AAO' or " + "//messageType = 'AAP' or " + "//messageType = 'AAQ' or " + "//messageType = 'AAR' or " + "//messageType = 'AAS' or " + "//messageType = 'AAT' or " + "//messageType = 'AAU' or " + "//messageType = 'AAV' or " + "//messageType = 'AAW' or " + "//messageType = 'AAX' or " + "//messageType = 'AAY' or " + "//messageType = 'AAZ'").to("mock:result").otherwise().to("mock:other").end(). }
false;protected;0;40;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:foo?concurrentConsumers=50&size=250000").choice().when().xpath("//messageType = 'AAA' or " + "//messageType = 'AAB' or " + "//messageType = 'AAC' or " + "//messageType = 'AAD' or " + "//messageType = 'AAE' or " + "//messageType = 'AAF' or " + "//messageType = 'AAG' or " + "//messageType = 'AAH' or " + "//messageType = 'AAI' or " + "//messageType = 'AAJ' or " + "//messageType = 'AAK' or " + "//messageType = 'AAL' or " + "//messageType = 'AAM' or " + "//messageType = 'AAN' or " + "//messageType = 'AAO' or " + "//messageType = 'AAP' or " + "//messageType = 'AAQ' or " + "//messageType = 'AAR' or " + "//messageType = 'AAS' or " + "//messageType = 'AAT' or " + "//messageType = 'AAU' or " + "//messageType = 'AAV' or " + "//messageType = 'AAW' or " + "//messageType = 'AAX' or " + "//messageType = 'AAY' or " + "//messageType = 'AAZ'").to("mock:result").otherwise().to("mock:other").end().         }     }. }
