commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/movefile").     super.setUp(). }
false;public;0;10;;@Test public void testPollFileAndShouldNotBeMoved() throws Exception {     template.sendBodyAndHeader("file://target/data/movefile", "Hello World", Exchange.FILE_NAME, "hello.txt").     MockEndpoint mock = getMockEndpoint("mock:foo").     mock.expectedBodiesReceived("Hello World").     mock.expectedFileExists("target/data/movefile/error/hello.txt", "Hello World").     mock.assertIsSatisfied(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Forced by unittest"). }
false;public;0;9;;public void configure() throws Exception {     from("file://target/data/movefile?initialDelay=0&delay=10&moveFailed=error").convertBodyTo(String.class).to("mock:foo").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Forced by unittest").         }     }). }
false;protected;0;13;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://target/data/movefile?initialDelay=0&delay=10&moveFailed=error").convertBodyTo(String.class).to("mock:foo").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("Forced by unittest").                 }             }).         }     }. }
