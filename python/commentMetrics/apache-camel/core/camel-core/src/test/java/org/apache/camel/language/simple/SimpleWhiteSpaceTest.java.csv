commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;4;;@Override protected String getLanguageName() {     return "simple". }
false;public;0;5;;@Test public void testExpressionWithSpace() {     exchange.getIn().setBody("some text").     assertPredicate("${in.body} contains 'some' && ${in.body} contains 'text'", true). }
false;public;0;5;;@Test public void testExpressionWithTabs() {     exchange.getIn().setBody("some text").     assertPredicate("${in.body} contains 'some' &&\t${in.body} contains 'text'", true). }
false;public;0;5;;@Test public void testUnixMultiLineExpression() {     exchange.getIn().setBody("some text").     assertPredicate("${in.body} contains 'some' &&\n${in.body} contains 'text'", true). }
false;public;0;5;;@Test public void testWindowsMultiLineExpression() {     exchange.getIn().setBody("some text").     assertPredicate("${in.body} contains 'some' &&\r\n${in.body} contains 'text'", true). }
false;public;0;5;;@Test public void testMacMultiLineExpression() {     exchange.getIn().setBody("some text").     assertPredicate("${in.body} contains 'some' &&\r${in.body} contains 'text'", true). }
false;public;0;5;;@Test public void testExpressionWithMultiLineString() {     exchange.getIn().setBody("\tsome\nmulti\rline\r\ntext").     assertPredicate("${in.body} == '\tsome\nmulti\rline\r\ntext'", true). }
