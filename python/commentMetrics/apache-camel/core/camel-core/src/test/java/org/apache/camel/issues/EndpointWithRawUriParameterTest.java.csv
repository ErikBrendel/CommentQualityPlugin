commented;modifiers;parameterAmount;loc;comment;code
false;protected;3;6;;@Override protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     Endpoint answer = new MyEndpoint(uri, this).     setProperties(answer, parameters).     return answer. }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     exchange.getIn().setHeader("username", getUsername()).     exchange.getIn().setHeader("password", getPassword()).     exchange.getIn().setHeader("lines", getLines()). }
false;public;0;11;;@Override public Producer createProducer() throws Exception {     return new DefaultProducer(this) {          @Override         public void process(Exchange exchange) throws Exception {             exchange.getIn().setHeader("username", getUsername()).             exchange.getIn().setHeader("password", getPassword()).             exchange.getIn().setHeader("lines", getLines()).         }     }. }
false;public;1;4;;@Override public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;public;0;3;;public String getUsername() {     return username. }
false;public;1;3;;public void setUsername(String username) {     this.username = username. }
false;public;0;3;;public String getPassword() {     return password. }
false;public;1;3;;public void setPassword(String password) {     this.password = password. }
false;public;0;3;;public List<String> getLines() {     return lines. }
false;public;1;3;;public void setLines(List<String> lines) {     this.lines = lines. }
false;public;0;10;;@Test public void testRawUriParameter() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("username", "scott").     getMockEndpoint("mock:result").expectedHeaderReceived("password", "++%%w?rd)").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Test public void testUriParameterLines() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:lines", "Hello World").     assertMockEndpointsSatisfied().     List<String> lines = (List<String>) getMockEndpoint("mock:result").getReceivedExchanges().get(0).getIn().getHeader("lines").     assertEquals(2, lines.size()).     assertEquals("abc", lines.get(0)).     assertEquals("def", lines.get(1)). }
false;public;0;13;;@Test public void testRawUriParameterLines() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:rawlines", "Hello World").     assertMockEndpointsSatisfied().     List<String> lines = (List<String>) getMockEndpoint("mock:result").getReceivedExchanges().get(0).getIn().getHeader("lines").     assertEquals(2, lines.size()).     assertEquals("++abc++", lines.get(0)).     assertEquals("++def++", lines.get(1)). }
false;public;0;11;;@Test public void testRawUriParameterFail() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("username", "scott").     getMockEndpoint("mock:result").expectedHeaderReceived("password", "foo)+bar").     template.sendBody("direct:fail", "Hello World").     // should fail as the password has + sign which gets escaped     getMockEndpoint("mock:result").assertIsNotSatisfied(). }
false;public;0;10;;@Test public void testRawUriParameterOk() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("username", "scott").     getMockEndpoint("mock:result").expectedHeaderReceived("password", "foo)+bar").     template.sendBody("direct:ok", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Test public void testRawUriParameterOkDynamic() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedHeaderReceived("username", "scott").     getMockEndpoint("mock:result").expectedHeaderReceived("password", "foo)+bar").     template.sendBody("direct:okDynamic", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;28;;@Override public void configure() throws Exception {     context.addComponent("mycomponent", new MyComponent()).     from("direct:start").to("mycomponent:foo?username=scott&password=RAW(++%%w?rd))").to("mock:result").     from("direct:lines").to("mycomponent:foo?lines=abc&lines=def").to("mock:result").     from("direct:rawlines").to("mycomponent:foo?lines=RAW(++abc++)&lines=RAW(++def++)").to("mock:result").     from("direct:fail").to("mycomponent:foo?password=foo)+bar&username=scott").to("mock:result").     from("direct:ok").to("mycomponent:foo?password=RAW(foo)+bar)&username=scott").to("mock:result").     from("direct:okDynamic").toD("mycomponent:foo?password=RAW{foo)+bar}&username=scott").to("mock:result"). }
false;protected;0;33;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("mycomponent", new MyComponent()).             from("direct:start").to("mycomponent:foo?username=scott&password=RAW(++%%w?rd))").to("mock:result").             from("direct:lines").to("mycomponent:foo?lines=abc&lines=def").to("mock:result").             from("direct:rawlines").to("mycomponent:foo?lines=RAW(++abc++)&lines=RAW(++def++)").to("mock:result").             from("direct:fail").to("mycomponent:foo?password=foo)+bar&username=scott").to("mock:result").             from("direct:ok").to("mycomponent:foo?password=RAW(foo)+bar)&username=scott").to("mock:result").             from("direct:okDynamic").toD("mycomponent:foo?password=RAW{foo)+bar}&username=scott").to("mock:result").         }     }. }
