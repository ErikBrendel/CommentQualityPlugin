commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/pair").     super.setUp(). }
false;public;0;13;;@Test public void testTokenXMLPairGroup() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:split").     mock.expectedMessageCount(3).     mock.message(0).body().isEqualTo("<group><order id=\"1\" xmlns=\"http:acme.com\">Camel in Action</order><order id=\"2\" xmlns=\"http:acme.com\">ActiveMQ in Action</order></group>").     mock.message(1).body().isEqualTo("<group><order id=\"3\" xmlns=\"http:acme.com\">Spring in Action</order><order id=\"4\" xmlns=\"http:acme.com\">Scala in Action</order></group>").     mock.message(2).body().isEqualTo("<group><order id=\"5\" xmlns=\"http:acme.com\">Groovy in Action</order></group>").     String body = createBody().     template.sendBodyAndHeader("file:target/data/pair", body, Exchange.FILE_NAME, "orders.xml").     assertMockEndpointsSatisfied(). }
false;protected;0;11;;protected String createBody() {     StringBuilder sb = new StringBuilder("<?xml version=\"1.0\"?>\n").     sb.append("<orders xmlns=\"http:acme.com\">\n").     sb.append("  <order id=\"1\">Camel in Action</order>\n").     sb.append("  <order id=\"2\">ActiveMQ in Action</order>\n").     sb.append("  <order id=\"3\">Spring in Action</order>\n").     sb.append("  <order id=\"4\">Scala in Action</order>\n").     sb.append("  <order id=\"5\">Groovy in Action</order>\n").     sb.append("</orders>").     return sb.toString(). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("file:target/data/pair?initialDelay=0&delay=10").split().xtokenize("//order", 'i', ns, 2).to("log:split").to("mock:split"). // END SNIPPET: e1 }
false;protected;0;16;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          Namespaces ns = new Namespaces("", "http:acme.com").          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("file:target/data/pair?initialDelay=0&delay=10").split().xtokenize("//order", 'i', ns, 2).to("log:split").to("mock:split").         // END SNIPPET: e1         }     }. }
