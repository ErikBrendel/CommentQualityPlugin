commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/utf8").     super.setUp().     // include a UTF-8 char in the text \u0E08 is a Thai elephant     body = "Hello Thai Elephant \u0E08".getBytes("UTF-8").     template.sendBodyAndHeader("file://target/data/utf8", body, Exchange.FILE_NAME, "utf8.txt"). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/utf8?initialDelay=0&delay=10").convertBodyTo(String.class, "UTF-8").to("mock:result"). }
false;public;0;21;;@Test public void testFileUTF8() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/utf8?initialDelay=0&delay=10").convertBodyTo(String.class, "UTF-8").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     assertMockEndpointsSatisfied().     byte[] data = mock.getReceivedExchanges().get(0).getIn().getBody(byte[].class).     boolean same = ObjectHelper.equal(body, data).     assertTrue("Should be same byte data", same). }
