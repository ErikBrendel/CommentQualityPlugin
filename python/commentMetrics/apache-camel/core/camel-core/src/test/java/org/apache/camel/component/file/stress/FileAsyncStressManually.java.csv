commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;public void testAsyncStress() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     // test by starting the unit test FileAsyncStressFileDropper in another JVM     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(250).     assertMockEndpointsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) throws Exception {     // simulate some work with random time to complete     Random ran = new Random().     int delay = ran.nextInt(500) + 10.     Thread.sleep(delay). }
false;public;0;13;;@Override public void configure() throws Exception {     from("file:target/data/filestress?readLock=markerFile&maxMessagesPerPoll=25&move=backup").threads(10).process(new Processor() {          public void process(Exchange exchange) throws Exception {             // simulate some work with random time to complete             Random ran = new Random().             int delay = ran.nextInt(500) + 10.             Thread.sleep(delay).         }     }).to("mock:result"). }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/filestress?readLock=markerFile&maxMessagesPerPoll=25&move=backup").threads(10).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // simulate some work with random time to complete                     Random ran = new Random().                     int delay = ran.nextInt(500) + 10.                     Thread.sleep(delay).                 }             }).to("mock:result").         }     }. }
