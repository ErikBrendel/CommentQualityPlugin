commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testRecipientListAndVerifyException() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Override public void configure() throws Exception {     onException(ExpressionEvaluationException.class).handled(true).to("mock://error").     from("direct://start").to("log:foo").recipientList().method(RecipientListThrowExceptionFromExpressionTest.class, "sendTo").to("mock://result").end(). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(ExpressionEvaluationException.class).handled(true).to("mock://error").             from("direct://start").to("log:foo").recipientList().method(RecipientListThrowExceptionFromExpressionTest.class, "sendTo").to("mock://result").end().         }     }. }
false;public;1;3;;public List<String> sendTo(Exchange exchange) throws ExpressionEvaluationException {     throw new ExpressionEvaluationException(null, exchange, null). }
