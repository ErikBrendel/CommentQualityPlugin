commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("fail", new MyFailBean()).     return jndi. }
false;public;0;8;;@Override public void configure() throws Exception {     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException(). }
false;public;0;23;;@Test public void testRecipientListOk() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException().         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(1).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo,mock:bar,mock:baz").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     from("direct:start").onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(3).end().to("mock:a").recipientList(header("foo")).aggregationStrategy(new MyAggregationStrategy()).parallelProcessing(). }
false;public;0;33;;@Test public void testRecipientListErrorAggregate() throws Exception {     counter = 0.     tries = 0.     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(3).end().to("mock:a").recipientList(header("foo")).aggregationStrategy(new MyAggregationStrategy()).parallelProcessing().         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     // can be 0 or 1 depending whether the task was executed or not (we run parallel)     getMockEndpoint("mock:foo").expectedMinimumMessageCount(0).     getMockEndpoint("mock:bar").expectedMinimumMessageCount(0).     getMockEndpoint("mock:baz").expectedMinimumMessageCount(0).     template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo,mock:bar,bean:fail,mock:baz").     assertMockEndpointsSatisfied().     // bean is invoked 4 times     assertEquals(4, counter).     // of which 3 of them is retries     assertEquals(3, tries). }
false;public;0;8;;@Override public void configure() throws Exception {     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException(). }
false;public;0;32;;@Test public void testRecipientListError() throws Exception {     counter = 0.     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").recipientList(header("foo")).stopOnException().         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(0).     try {         template.sendBodyAndHeader("direct:start", "Hello World", "foo", "mock:foo,mock:bar,bean:fail,mock:baz").         fail("Should throw exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied().     assertEquals(3, counter). }
false;public;0;10;;@Override public void configure() throws Exception {     context.setTracing(true).     onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).     from("direct:start").to("mock:a").bean(MyRecipientBean.class). }
false;public;0;37;;@Test public void testRecipientListAsBeanError() throws Exception {     counter = 0.     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setTracing(true).             onException(Exception.class).redeliveryDelay(0).maximumRedeliveries(2).             from("direct:start").to("mock:a").bean(MyRecipientBean.class).         }     }).     context.start().     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:baz").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Hello World").         fail("Should throw exception").     } catch (CamelExecutionException e) {         // expected         assertIsInstanceOf(CamelExchangeException.class, e.getCause()).         assertIsInstanceOf(IllegalArgumentException.class, e.getCause().getCause()).         assertEquals("Damn", e.getCause().getCause().getMessage()).     }     assertMockEndpointsSatisfied().     assertEquals(3, counter). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;2;12;;public Exchange aggregate(Exchange oldExchange, Exchange newExchange) {     // check whether we have attempted redelivery     Boolean redelivered = newExchange.getIn().getHeader(Exchange.REDELIVERED, Boolean.class).     if (redelivered != null && redelivered) {         // extract the number of times we tried         tries = newExchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).         // this is the endpoint that failed         assertEquals("bean://fail", newExchange.getProperty(Exchange.FAILURE_ENDPOINT, String.class)).     }     // just let it pass through     return newExchange. }
false;public;1;4;;@org.apache.camel.RecipientList(stopOnException = true) public String sendSomewhere(Exchange exchange) {     return "mock:foo,mock:bar,bean:fail,mock:baz". }
false;public;1;5;;public String doSomething(Exchange exchange) throws Exception {     counter++.     assertEquals("bean://fail", exchange.getProperty(Exchange.TO_ENDPOINT, String.class)).     throw new IllegalArgumentException("Damn"). }
