commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testNoAdvised() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     // mock all endpoints     mockEndpoints(). }
true;public;0;31;// tag::e1[] ;// START SNIPPET: e1 // tag::e1[] @Test public void testAdvisedMockEndpoints() throws Exception {     // advice the first route using the inlined AdviceWith route builder     // which has extended capabilities than the regular route builder     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // mock all endpoints             mockEndpoints().         }     }).     getMockEndpoint("mock:direct:start").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:direct:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:log:foo").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // additional test to ensure correct endpoints in registry     assertNotNull(context.hasEndpoint("direct:start")).     assertNotNull(context.hasEndpoint("direct:foo")).     assertNotNull(context.hasEndpoint("log:foo")).     assertNotNull(context.hasEndpoint("mock:result")).     // all the endpoints was mocked     assertNotNull(context.hasEndpoint("mock:direct:start")).     assertNotNull(context.hasEndpoint("mock:direct:foo")).     assertNotNull(context.hasEndpoint("mock:log:foo")). }
false;public;0;5;;@Override public void configure() throws Exception {     // mock only log endpoints     mockEndpoints("log*"). }
true;public;0;31;// tag::e2[] ;// end::e1[] // END SNIPPET: e1 // START SNIPPET: e2 // tag::e2[] @Test public void testAdvisedMockEndpointsWithPattern() throws Exception {     // advice the first route using the inlined AdviceWith route builder     // which has extended capabilities than the regular route builder     RouteReifier.adviceWith(context.getRouteDefinitions().get(0), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             // mock only log endpoints             mockEndpoints("log*").         }     }).     // now we can refer to log:foo as a mock and set our expectations     getMockEndpoint("mock:log:foo").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // additional test to ensure correct endpoints in registry     assertNotNull(context.hasEndpoint("direct:start")).     assertNotNull(context.hasEndpoint("direct:foo")).     assertNotNull(context.hasEndpoint("log:foo")).     assertNotNull(context.hasEndpoint("mock:result")).     // only the log:foo endpoint was mocked     assertNotNull(context.hasEndpoint("mock:log:foo")).     assertNull(context.hasEndpoint("mock:direct:start")).     assertNull(context.hasEndpoint("mock:direct:foo")). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("direct:foo").to("log:foo").to("mock:result").     from("direct:foo").transform(constant("Bye World")). }
true;protected;0;11;// tag::route[] ;// end::e2[] // END SNIPPET: e2 // START SNIPPET: route // tag::route[] @Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("direct:foo").to("log:foo").to("mock:result").             from("direct:foo").transform(constant("Bye World")).         }     }. }
