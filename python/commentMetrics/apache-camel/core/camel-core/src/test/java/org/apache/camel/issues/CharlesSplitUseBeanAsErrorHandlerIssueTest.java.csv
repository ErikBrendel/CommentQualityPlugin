commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSplitBeanErrorHandlerOK() throws Exception {     MockEndpoint split = getMockEndpoint("mock:split").     MockEndpoint ile = getMockEndpoint("mock:ile").     MockEndpoint exception = getMockEndpoint("mock:exception").     split.expectedBodiesReceived("A", "B", "C").     ile.expectedMessageCount(0).     exception.expectedMessageCount(0).     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied(). }
false;public;0;16;;@Test public void testSplitBeanErrorHandlerHandled() throws Exception {     MockEndpoint split = getMockEndpoint("mock:split").     MockEndpoint ile = getMockEndpoint("mock:ile").     MockEndpoint exception = getMockEndpoint("mock:exception").     split.expectedBodiesReceived("A", "B", "C").     ile.expectedBodiesReceived("Handled Forced Cause by Damn ILE").     exception.expectedMessageCount(0).     template.sendBody("direct:start", "A,B,Forced,C").     assertMockEndpointsSatisfied().     assertEquals("Forced", logged). }
false;public;0;16;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).stopOnException().doTry().process(new MyProcessor()).to("mock:split").doCatch(IllegalArgumentException.class).bean(new MyLoggerBean()).bean(new MyErrorHandlerBean()).to("mock:ile").doCatch(Exception.class).to("mock:exception").rollback().end(). }
false;protected;0;21;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).stopOnException().doTry().process(new MyProcessor()).to("mock:split").doCatch(IllegalArgumentException.class).bean(new MyLoggerBean()).bean(new MyErrorHandlerBean()).to("mock:ile").doCatch(Exception.class).to("mock:exception").rollback().end().         }     }. }
false;public;1;3;;public void logError(String body) {     logged = body. }
false;public;2;3;;public String handleError(String body, @ExchangeException Exception e) {     return "Handled " + body + " Cause by " + e.getMessage(). }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Forced".equals(body)) {         throw new IllegalArgumentException("Damn ILE").     } else if ("Kaboom".equals(body)) {         throw new Exception("Kaboom").     } }
