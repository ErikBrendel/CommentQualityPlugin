commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testMockStreamCaching() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").message(0).body(String.class).contains("Camel").     getMockEndpoint("mock:result").message(0).body(String.class).contains("World").     Object body = new ByteArrayInputStream("Hello Camel and Bye World".getBytes()).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testMockStreamCachingConvertTo() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").message(0).body().convertToString().contains("Camel").     getMockEndpoint("mock:result").message(0).body().convertToString().contains("World").     Object body = new ByteArrayInputStream("Hello Camel and Bye World".getBytes()).     template.sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").streamCaching().to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").streamCaching().to("mock:result").         }     }. }
