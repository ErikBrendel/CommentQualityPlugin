commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     template.send("mock:result", exchange). }
false;private;0;15;;private void setupComponent() throws Exception {     Component comp = new DirectComponent().     comp.setCamelContext(context).     Endpoint slow = comp.createEndpoint("direct:somename").     Consumer consumer = slow.createConsumer(new Processor() {          public void process(Exchange exchange) throws Exception {             template.send("mock:result", exchange).         }     }).     consumer.start().     // bind our endpoint to the registry for ref to lookup     context.getRegistry().bind("foo", slow). }
false;public;0;11;;@Test public void testRef() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     setupComponent().     template.sendBody("ref:foo", "Hello World").     assertMockEndpointsSatisfied(). }
