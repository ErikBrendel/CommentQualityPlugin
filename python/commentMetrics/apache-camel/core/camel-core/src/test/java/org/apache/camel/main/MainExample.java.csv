commented;modifiers;parameterAmount;loc;comment;code
false;public,static;1;4;;public static void main(String[] args) throws Exception {     MainExample example = new MainExample().     example.boot(). }
false;public;0;15;;public void boot() throws Exception {     // create a Main instance     main = new Main().     // bind MyBean into the registry     main.bind("foo", new MyBean()).     // add routes     main.addRouteBuilder(new MyRouteBuilder()).     // add event listener     main.addMainListener(new Events()).     // set the properties from a file     main.setPropertyPlaceholderLocations("example.properties").     // run until you terminate the JVM     System.out.println("Starting Camel. Use ctrl + c to terminate the JVM.\n").     main.run(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     System.out.println("Invoked timer at " + new Date()). }
false;public;0;10;;@Override public void configure() throws Exception {     from("timer:foo?delay={{millisecs}}").process(new Processor() {          public void process(Exchange exchange) throws Exception {             System.out.println("Invoked timer at " + new Date()).         }     }).bean("foo"). }
false;public;0;3;;public void callMe() {     System.out.println("MyBean.callMe method has been called"). }
false;public;1;4;;@Override public void afterStart(MainSupport main) {     System.out.println("MainExample with Camel is now started!"). }
false;public;1;4;;@Override public void beforeStop(MainSupport main) {     System.out.println("MainExample with Camel is now being stopped!"). }
