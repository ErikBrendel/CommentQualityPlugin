commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testAutoCreateComponentsOn() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     Component component = ctx.getComponent("bean").     assertNotNull(component).     assertEquals(component.getClass(), BeanComponent.class). }
false;public;0;8;;@Test public void testAutoCreateComponentsOff() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.setAutoCreateComponents(false).     Component component = ctx.getComponent("bean").     assertNull(component). }
false;public;0;10;;@Test public void testAutoStartComponentsOff() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.start().     BeanComponent component = (BeanComponent) ctx.getComponent("bean", true, false).     // should be stopped     assertTrue(component.getStatus().isStopped()). }
false;public;0;10;;@Test public void testAutoStartComponentsOn() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext().     ctx.disableJMX().     ctx.start().     BeanComponent component = (BeanComponent) ctx.getComponent("bean", true, true).     // should be started     assertTrue(component.getStatus().isStarted()). }
false;public;0;9;;@Test public void testCreateDefaultUuidGenerator() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.init().     UuidGenerator uuidGenerator = ctx.getUuidGenerator().     assertNotNull(uuidGenerator).     assertEquals(uuidGenerator.getClass(), DefaultUuidGenerator.class). }
false;public;0;11;;@Test public void testGetComponents() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     Component component = ctx.getComponent("bean").     assertNotNull(component).     List<String> list = ctx.getComponentNames().     assertEquals(1, list.size()).     assertEquals("bean", list.get(0)). }
false;public;0;14;;@Test public void testGetEndpoint() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     Endpoint endpoint = ctx.getEndpoint("log:foo").     assertNotNull(endpoint).     try {         ctx.getEndpoint(null).         fail("Should have thrown exception").     } catch (IllegalArgumentException e) {     // expected     } }
false;public;0;7;;@Test public void testGetEndpointNoScheme() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext().     ctx.disableJMX().     Endpoint endpoint = ctx.getEndpoint("log").     assertNotNull(endpoint). }
false;public;0;10;;@Test public void testGetEndPointByTypeUnknown() {     DefaultCamelContext camelContext = new DefaultCamelContext().     try {         camelContext.getEndpoint("xxx", Endpoint.class).         fail().     } catch (NoSuchEndpointException e) {         assertEquals("No endpoint could be found for: xxx, please check your classpath contains the needed Camel component jar.", e.getMessage()).     } }
false;public;0;28;;@Test public void testRemoveEndpoint() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.getEndpoint("log:foo").     ctx.getEndpoint("log:bar").     ctx.start().     Collection<Endpoint> list = ctx.removeEndpoints("log:foo").     assertEquals(1, list.size()).     assertEquals("log://foo", list.iterator().next().getEndpointUri()).     ctx.getEndpoint("log:baz").     ctx.getEndpoint("seda:cool").     list = ctx.removeEndpoints("log:*").     assertEquals(2, list.size()).     Iterator<Endpoint> it = list.iterator().     String s1 = it.next().getEndpointUri().     String s2 = it.next().getEndpointUri().     assertTrue("log://bar".equals(s1) || "log://bar".equals(s2)).     assertTrue("log://baz".equals(s1) || "log://baz".equals(s2)).     assertTrue("log://baz".equals(s1) || "log://baz".equals(s2)).     assertTrue("log://baz".equals(s1) || "log://baz".equals(s2)).     assertEquals(1, ctx.getEndpoints().size()). }
false;public;0;11;;@Test public void testGetEndpointNotFound() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     try {         ctx.getEndpoint("xxx:foo").         fail("Should have thrown a ResolveEndpointFailedException").     } catch (ResolveEndpointFailedException e) {         assertTrue(e.getMessage().contains("No component found with scheme: xxx")).     } }
false;public;0;11;;@Test public void testGetEndpointUnknownComponentNoScheme() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     try {         CamelContextHelper.getMandatoryEndpoint(ctx, "unknownname").         fail("Should have thrown a NoSuchEndpointException").     } catch (NoSuchEndpointException e) {     // expected     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:endpointA").to("mock:endpointB"). }
false;public;0;21;;@Test public void testRestartCamelContext() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:endpointA").to("mock:endpointB").         }     }).     ctx.start().     assertEquals("Should have one RouteService", 1, ctx.getRouteServices().size()).     String routesString = ctx.getRoutes().toString().     ctx.stop().     assertEquals("The RouteService should NOT be removed even when we stop", 1, ctx.getRouteServices().size()).     ctx.start().     assertEquals("Should have one RouteService", 1, ctx.getRouteServices().size()).     assertEquals("The Routes should be same", routesString, ctx.getRoutes().toString()).     ctx.stop().     assertEquals("The RouteService should NOT be removed even when we stop", 1, ctx.getRouteServices().size()). }
false;public;0;12;;@Test public void testName() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.init().     assertNotNull("Should have a default name", ctx.getName()).     ctx.setName("foo").     assertEquals("foo", ctx.getName()).     assertNotNull(ctx.toString()).     assertTrue(ctx.isAutoStartup()). }
false;public;0;6;;@Test public void testVersion() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     assertNotNull("Should have a version", ctx.getVersion()). }
false;public;0;9;;@Test public void testHasComponent() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     assertNull(ctx.hasComponent("log")).     ctx.addComponent("log", new LogComponent()).     assertNotNull(ctx.hasComponent("log")). }
false;public;0;16;;@Test public void testGetComponent() {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.addComponent("log", new LogComponent()).     LogComponent log = ctx.getComponent("log", LogComponent.class).     assertNotNull(log).     try {         ctx.addComponent("direct", new DirectComponent()).         ctx.getComponent("log", DirectComponent.class).         fail("Should have thrown exception").     } catch (IllegalArgumentException e) {     // expected     } }
false;public;0;19;;@Test public void testHasEndpoint() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     ctx.getEndpoint("mock://foo").     assertNotNull(ctx.hasEndpoint("mock://foo")).     assertNull(ctx.hasEndpoint("mock://bar")).     Map<String, Endpoint> map = ctx.getEndpointMap().     assertEquals(1, map.size()).     try {         ctx.hasEndpoint(null).         fail("Should have thrown exception").     } catch (ResolveEndpointFailedException e) {     // expected     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").routeId("coolRoute").to("mock:result"). }
false;public;0;25;;@Test public void testGetRouteById() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     // should not throw NPE (CAMEL-3198)     Route route = ctx.getRoute("coolRoute").     assertNull(route).     ctx.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("coolRoute").to("mock:result").         }     }).     ctx.start().     route = ctx.getRoute("coolRoute").     assertNotNull(route).     assertEquals("coolRoute", route.getId()).     assertEquals("direct://start", route.getConsumer().getEndpoint().getEndpointUri()).     assertNull(ctx.getRoute("unknown")).     ctx.stop(). }
false;public;0;24;;@Test public void testSuspend() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     assertEquals(false, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.start().     assertEquals(true, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.suspend().     assertEquals(false, ctx.isStarted()).     assertEquals(true, ctx.isSuspended()).     ctx.suspend().     assertEquals(false, ctx.isStarted()).     assertEquals(true, ctx.isSuspended()).     ctx.stop().     assertEquals(false, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()). }
false;public;0;24;;@Test public void testResume() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext(false).     ctx.disableJMX().     assertEquals(false, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.start().     assertEquals(true, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.resume().     assertEquals(true, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.resume().     assertEquals(true, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.stop().     assertEquals(false, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()). }
false;public;0;23;;@Test public void testSuspendResume() throws Exception {     DefaultCamelContext ctx = new DefaultCamelContext().     assertEquals(false, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.start().     assertEquals(true, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.suspend().     assertEquals(false, ctx.isStarted()).     assertEquals(true, ctx.isSuspended()).     ctx.resume().     assertEquals(true, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()).     ctx.stop().     assertEquals(false, ctx.isStarted()).     assertEquals(false, ctx.isSuspended()). }
false;public;0;14;;@Test public void testAddServiceInjectCamelContext() throws Exception {     MyService my = new MyService().     DefaultCamelContext ctx = new DefaultCamelContext().     ctx.addService(my).     ctx.start().     assertEquals(ctx, my.getCamelContext()).     assertEquals("Started", my.getStatus().name()).     ctx.stop().     assertEquals("Stopped", my.getStatus().name()). }
false;public;0;13;;@Test public void testAddServiceType() throws Exception {     MyService my = new MyService().     DefaultCamelContext ctx = new DefaultCamelContext().     assertNull(ctx.hasService(MyService.class)).     ctx.addService(my).     assertSame(my, ctx.hasService(MyService.class)).     ctx.stop().     assertNull(ctx.hasService(MyService.class)). }
false;public;0;3;;public CamelContext getCamelContext() {     return camelContext. }
false;public;1;3;;public void setCamelContext(CamelContext camelContext) {     this.camelContext = camelContext. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
