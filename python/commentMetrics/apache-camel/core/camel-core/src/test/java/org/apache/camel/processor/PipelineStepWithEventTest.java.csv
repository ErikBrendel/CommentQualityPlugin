commented;modifiers;parameterAmount;loc;comment;code
false;public;0;25;;@Test public void testPipelineStep() throws Exception {     getMockEndpoint("mock:a").expectedMessageCount(1).     getMockEndpoint("mock:a2").expectedMessageCount(1).     getMockEndpoint("mock:b").expectedMessageCount(1).     getMockEndpoint("mock:b2").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     assertEquals(4, listener.getEvents().size()).     BeforeStepEvent event = (BeforeStepEvent) listener.getEvents().get(0).     assertEquals("step-a", event.getId()).     AfterStepEvent event2 = (AfterStepEvent) listener.getEvents().get(1).     assertEquals("step-a", event2.getId()).     assertTrue("Should take a little time", event2.getTimeTaken() > 0).     BeforeStepEvent event3 = (BeforeStepEvent) listener.getEvents().get(2).     assertEquals("step-b", event3.getId()).     AfterStepEvent event4 = (AfterStepEvent) listener.getEvents().get(3).     assertEquals("step-b", event4.getId()).     assertTrue("Should take a little time", event4.getTimeTaken() > 0). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").pipeline().id("step-a").to("mock:a").delay(constant(10)).end().to("mock:a2").end().pipeline().id("step-b").to("mock:b").delay(constant(20)).end().to("mock:b2").end().to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").pipeline().id("step-a").to("mock:a").delay(constant(10)).end().to("mock:a2").end().pipeline().id("step-b").to("mock:b").delay(constant(20)).end().to("mock:b2").end().to("mock:result").         }     }. }
false;protected;0;8;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addInterceptStrategy(new MyInterceptStrategy()).     // register the event listener     context.addService(listener).     return context. }
false;;1;1;;void beforeStep(BeforeStepEvent event).
false;;1;1;;void afterStep(AfterStepEvent event).
false;public;1;4;;@Override public void beforeStep(BeforeStepEvent event) {     events.add(event). }
false;public;1;4;;@Override public void afterStep(AfterStepEvent event) {     events.add(event). }
false;public;0;3;;public List<EventObject> getEvents() {     return events. }
false;protected;0;4;;@Override protected void doStart() throws Exception { // noop }
false;protected;0;4;;@Override protected void doStop() throws Exception { // noop }
false;public;4;12;;@Override public Processor wrapProcessorInInterceptors(CamelContext context, NamedNode definition, Processor target, Processor nextTarget) throws Exception {     // grab the listener     StepEventListener listener = context.hasService(StepEventListener.class).     // wrap the pipelines so we can emit events     if (definition instanceof PipelineDefinition) {         return new MyStepEventProcessor(definition.getId(), target, listener).     } else {         return target.     } }
false;public;2;13;;@Override public boolean process(final Exchange exchange, final AsyncCallback callback) {     final StopWatch watch = new StopWatch().     if (listener != null) {         listener.beforeStep(new BeforeStepEvent(exchange, id)).     }     return super.process(exchange, doneSync -> {         if (listener != null) {             listener.afterStep(new AfterStepEvent(exchange, id, watch.taken())).         }         callback.done(doneSync).     }). }
false;public;0;4;;@Override public Type getType() {     return Type.Custom. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;4;;@Override public Type getType() {     return Type.Custom. }
false;public;0;3;;public String getId() {     return id. }
false;public;0;3;;public long getTimeTaken() {     return timeTaken. }
