commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Test public void testTryCatchFinallyProcessor() throws Exception {     testTryCatchFinally("direct:processor"). }
false;public;0;4;;@Test public void testTryCatchFinallyExpression() throws Exception {     testTryCatchFinally("direct:expression"). }
false;public;0;4;;@Test public void testTryCatchFinallyPredicate() throws Exception {     testTryCatchFinally("direct:predicate"). }
false;private;1;12;;private void testTryCatchFinally(String endpointName) throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     getMockEndpoint("mock:last").expectedMessageCount(1).     getMockEndpoint("mock:finally").expectedMessageCount(1).     sendBody(endpointName, "<test>Hello World!</test>").     assertTrue("Should have been handled", handled).     assertMockEndpointsSatisfied(). }
false;public;0;38;;public void configure() {     from("direct:processor").doTry().process(new ProcessorFail()).to("mock:result").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last").     from("direct:expression").doTry().setBody(new ProcessorFail()).to("mock:result").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last").     from("direct:predicate").doTry().to("direct:sub-predicate").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last").     from("direct:sub-predicate").errorHandler(noErrorHandler()).filter(new ProcessorFail()).to("mock:result"). }
false;protected;0;42;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:processor").doTry().process(new ProcessorFail()).to("mock:result").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last").             from("direct:expression").doTry().setBody(new ProcessorFail()).to("mock:result").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last").             from("direct:predicate").doTry().to("direct:sub-predicate").doCatch(CamelException.class).process(new ProcessorHandle()).doFinally().to("mock:finally").end().to("mock:last").             from("direct:sub-predicate").errorHandler(noErrorHandler()).filter(new ProcessorFail()).to("mock:result").         }     }. }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new RuntimeCamelException(new CamelException("Force to fail")). }
false;public;2;3;;public <T> T evaluate(Exchange exchange, Class<T> type) {     throw new RuntimeCamelException(new CamelException("Force to fail")). }
false;public;1;3;;public boolean matches(Exchange exchange) {     throw new RuntimeCamelException(new CamelException("Force to fail")). }
false;public;1;13;;public void process(Exchange exchange) throws Exception {     handled = true.     assertEquals("Should not be marked as failed", false, exchange.isFailed()).     Exception e = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT).     assertNotNull("There should be an exception", e).     // If we handle CamelException it is what we should have as an exception caught     CamelException cause = assertIsInstanceOf(CamelException.class, e.getCause()).     assertNotNull(cause).     assertEquals("Force to fail", cause.getMessage()). }
