commented;modifiers;parameterAmount;loc;comment;code
false;public;1;14;;@Override public void process(Exchange exchange) throws Exception {     String camelRedeliveryCounter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, String.class).     int redeliveries = camelRedeliveryCounter == null ? 0 : Integer.valueOf(camelRedeliveryCounter).     switch(redeliveries) {         case 0:             throw new FirstException().         case 1:             throw new SecondException().         default:             // no-op             break.     } }
false;public;0;12;;@Test public void testMessageShouldGoToError() throws Exception {     String msg = "payload".     getMockEndpoint("mock:destination").expectedMessageCount(0).     getMockEndpoint("mock:error").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedBodiesReceived(msg).     template.sendBody("direct:source", msg).     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:source").onException(FirstException.class).redeliveryDelay(0).maximumRedeliveries(-1).handled(true).end().onException(SecondException.class).handled(true).to("mock:error").end().process(new ExceptionThrowingProcessor()).to("mock:destination"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:source").onException(FirstException.class).redeliveryDelay(0).maximumRedeliveries(-1).handled(true).end().onException(SecondException.class).handled(true).to("mock:error").end().process(new ExceptionThrowingProcessor()).to("mock:destination").         }     }. }
