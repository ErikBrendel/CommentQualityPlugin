commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testNegativeDelay() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(1).     context.getRouteController().stopRoute("routeTest").     List<Exchange> exchanges = mock.getExchanges().     Iterator<Exchange> iter = exchanges.iterator().     while (iter.hasNext()) {         Exchange exchange = iter.next().         assertEquals("negativeDelay", exchange.getProperty(Exchange.TIMER_NAME)).         assertNotNull(exchange.getProperty(Exchange.TIMER_FIRED_TIME)).         assertNotNull(exchange.getIn().getHeader("firedTime")).     } }
false;public;0;4;;@Override public void configure() throws Exception {     from("timer://negativeDelay?delay=-1&repeatCount=10").routeId("routeTest").to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer://negativeDelay?delay=-1&repeatCount=10").routeId("routeTest").to("mock:result").         }     }. }
