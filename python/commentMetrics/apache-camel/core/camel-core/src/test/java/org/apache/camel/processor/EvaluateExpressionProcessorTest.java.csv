commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testOk() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("World").     mock.expectedPropertyReceived(Exchange.EVALUATE_EXPRESSION_RESULT, "Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;15;;@Test public void testFail() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:fail", "World").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         assertIsInstanceOf(IllegalArgumentException.class, e.getCause()).         assertEquals("Forced", e.getCause().getMessage()).     }     assertMockEndpointsSatisfied(). }
false;public;2;4;;@Override public <T> T evaluate(Exchange exchange, Class<T> type) {     throw new IllegalArgumentException("Forced"). }
false;public;0;15;;@Override public void configure() throws Exception {     from("direct:start").process(new EvaluateExpressionProcessor(body().prepend("Hello "))).to("mock:result").     from("direct:fail").process(new EvaluateExpressionProcessor(new Expression() {          @Override         public <T> T evaluate(Exchange exchange, Class<T> type) {             throw new IllegalArgumentException("Forced").         }     })).to("mock:result"). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").process(new EvaluateExpressionProcessor(body().prepend("Hello "))).to("mock:result").             from("direct:fail").process(new EvaluateExpressionProcessor(new Expression() {                  @Override                 public <T> T evaluate(Exchange exchange, Class<T> type) {                     throw new IllegalArgumentException("Forced").                 }             })).to("mock:result").         }     }. }
