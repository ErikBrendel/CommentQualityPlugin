commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Override @Before public void setUp() throws Exception {     if (!enabled) {         return.     }     deleteDirectory("target/data/big").     createDirectory("target/data/big").     deleteDirectory("target/data/out").     createDirectory("target/data/out").     // create a big file     File file = new File("target/data/big/data.txt").     FileOutputStream fos = new FileOutputStream(file).     for (int i = 0. i < 100000. i++) {         String s = "Hello World this is a long line with number " + i + LS.         fos.write(s.getBytes()).     }     fos.close().     super.setUp(). }
false;public;0;12;;@Test public void testBigFile() throws Exception {     if (!enabled) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:done").     mock.expectedMessageCount(1).     mock.setResultWaitTime(2 * 60000).     assertMockEndpointsSatisfied(). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     OutputStream fos = exchange.getProperty("myStream", OutputStream.class).     fos.close().     exchange.removeProperty("myStream"). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     OutputStream fos = exchange.getProperty("myStream", OutputStream.class).     byte[] data = exchange.getIn().getBody(byte[].class).     fos.write(data).     fos.write(LS.getBytes()). }
false;public;1;6;;@Override public void process(Exchange exchange) throws Exception {     // store a output stream we use for writing     FileOutputStream fos = new FileOutputStream("target/data/out/also-big.txt", true).     exchange.setProperty("myStream", fos). }
false;public;0;33;;@Override public void configure() throws Exception {     from("file:target/data/big").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             // store a output stream we use for writing             FileOutputStream fos = new FileOutputStream("target/data/out/also-big.txt", true).             exchange.setProperty("myStream", fos).         }     }).split(body().tokenize(LS)).streaming().to("log:processing?groupSize=1000").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             OutputStream fos = exchange.getProperty("myStream", OutputStream.class).             byte[] data = exchange.getIn().getBody(byte[].class).             fos.write(data).             fos.write(LS.getBytes()).         }     }).end().process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             OutputStream fos = exchange.getProperty("myStream", OutputStream.class).             fos.close().             exchange.removeProperty("myStream").         }     }).to("mock:done"). }
false;protected;0;38;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/big").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     // store a output stream we use for writing                     FileOutputStream fos = new FileOutputStream("target/data/out/also-big.txt", true).                     exchange.setProperty("myStream", fos).                 }             }).split(body().tokenize(LS)).streaming().to("log:processing?groupSize=1000").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     OutputStream fos = exchange.getProperty("myStream", OutputStream.class).                     byte[] data = exchange.getIn().getBody(byte[].class).                     fos.write(data).                     fos.write(LS.getBytes()).                 }             }).end().process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     OutputStream fos = exchange.getProperty("myStream", OutputStream.class).                     fos.close().                     exchange.removeProperty("myStream").                 }             }).to("mock:done").         }     }. }
