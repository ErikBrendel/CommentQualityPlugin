commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override public void configure() throws Exception {     from("seda:test?concurrentConsumers=1").routeId("sedaroute").to("log:before").to("mock:target"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("seda:test?concurrentConsumers=1").routeId("sedaroute").to("log:before").to("mock:target").         }     }. }
false;public;0;11;;@Test public void testProducerWithDifferentUri() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("sedaroute"), context, new Advice()).     getMockEndpoint("mock:target").expectedMessageCount(0).     getMockEndpoint("mock:target2").expectedMessageCount(1).     template.requestBody("seda:test", "TESTING").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testProducerWithSameUri() throws Exception {     RouteReifier.adviceWith(context.getRouteDefinition("sedaroute"), context, new Advice()).     getMockEndpoint("mock:target").expectedMessageCount(0).     getMockEndpoint("mock:target2").expectedMessageCount(1).     template.requestBody("seda:test?concurrentConsumers=1", "TESTING").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:target").skipSendToOriginalEndpoint().to("mock:target2"). }
