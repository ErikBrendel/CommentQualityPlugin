commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testWrappedException() throws Exception {     getMockEndpoint("mock:error").expectedMessageCount(0).     getMockEndpoint("mock:wrapped").expectedMessageCount(1).     getMockEndpoint("mock:end").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     context.getTypeConverterRegistry().addTypeConverter(LocalDateTime.class, String.class, new MyLocalDateTimeConverter()).     errorHandler(deadLetterChannel("mock:error")).     onException(IllegalArgumentException.class).handled(true).to("mock:wrapped").     from("direct:start").convertBodyTo(LocalDateTime.class).to("mock:end"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getTypeConverterRegistry().addTypeConverter(LocalDateTime.class, String.class, new MyLocalDateTimeConverter()).             errorHandler(deadLetterChannel("mock:error")).             onException(IllegalArgumentException.class).handled(true).to("mock:wrapped").             from("direct:start").convertBodyTo(LocalDateTime.class).to("mock:end").         }     }. }
false;public;3;4;;public <T> T convertTo(Class<T> type, Exchange exchange, Object value) {     // simulate @Converter where we wrap thrown exception in RuntimeCamelException     throw wrapRuntimeCamelException(new IllegalArgumentException("Bad Data")). }
