commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testXsltOutputDeleteFile() throws Exception {     createDirectory("target/data/xslt").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("<?xml version=\"1.0\" encoding=\"UTF-8\"?><goodbye>world!</goodbye>").     template.sendBodyAndHeader("direct:start", "<hello>world!</hello>", Exchange.XSLT_FILE_NAME, "target/data/xslt/xsltme.xml").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // assert file deleted     File file = new File("target/data/xslt/xsltme.xml").     assertFalse("File should be deleted", file.exists()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("xslt:org/apache/camel/component/xslt/example.xsl?output=file&deleteOutputFile=true").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xslt:org/apache/camel/component/xslt/example.xsl?output=file&deleteOutputFile=true").to("mock:result").         }     }. }
