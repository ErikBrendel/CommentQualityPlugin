commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     ids = "".     counter = 0.     super.setUp(). }
false;public;1;3;;public String createId(NamedNode definition) {     return "#" + definition.getShortName() + ++counter + "#". }
false;public;0;22;;@Override public void configure() throws Exception {     // use our own id factory so we can generate the keys we like to use     context.setNodeIdFactory(new NodeIdFactory() {          public String createId(NamedNode definition) {             return "#" + definition.getShortName() + ++counter + "#".         }     }).     // add our debugger so we can debug camel routes when we send in messages     context.addInterceptStrategy(new MyDebuggerCheckingId()).     // a little content based router so we got 2 paths to route at runtime     from("direct:start").choice().when(body().contains("Hello")).to("mock:hello").otherwise().log("Hey").to("mock:other").end(). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use our own id factory so we can generate the keys we like to use             context.setNodeIdFactory(new NodeIdFactory() {                  public String createId(NamedNode definition) {                     return "#" + definition.getShortName() + ++counter + "#".                 }             }).             // add our debugger so we can debug camel routes when we send in messages             context.addInterceptStrategy(new MyDebuggerCheckingId()).             // a little content based router so we got 2 paths to route at runtime             from("direct:start").choice().when(body().contains("Hello")).to("mock:hello").otherwise().log("Hey").to("mock:other").end().         }     }. }
true;public;0;11;/**  * Test path 1  */ ;/**  * Test path 1  */ @Test public void testHello() throws Exception {     assertEquals("#route1#", context.getRouteDefinitions().get(0).getId()).     getMockEndpoint("mock:hello").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // this should take the when path (first to)     assertEquals("#choice7##to2#", ids). }
true;public;0;11;/**  * Test path 2  */ ;/**  * Test path 2  */ @Test public void testOther() throws Exception {     assertEquals("#route1#", context.getRouteDefinitions().get(0).getId()).     getMockEndpoint("mock:other").expectedMessageCount(1).     template.sendBody("direct:start", "Bye World").     assertMockEndpointsSatisfied().     // this should take the otherwise path     assertEquals("#choice7##log4##to6#", ids). }
false;protected;1;10;;@Override protected void processNext(Exchange exchange) throws Exception {     log.debug("Debugging at: {} with id: {} with exchange: {}", definition, definition.getId(), exchange).     // record the path taken at runtime     ids += definition.getId().     // continue to the real target by invoking super     super.processNext(exchange). }
false;public;4;20;;public Processor wrapProcessorInInterceptors(final CamelContext context, final NamedNode definition, Processor target, Processor nextTarget) throws Exception {     // MUST DO THIS     // force id creation as sub nodes have lazy assigned ids     ((OptionalIdentifiedDefinition<?>) definition).idOrCreate(context.getNodeIdFactory()).     return new DelegateProcessor(target) {          @Override         protected void processNext(Exchange exchange) throws Exception {             log.debug("Debugging at: {} with id: {} with exchange: {}", definition, definition.getId(), exchange).             // record the path taken at runtime             ids += definition.getId().             // continue to the real target by invoking super             super.processNext(exchange).         }     }. }
