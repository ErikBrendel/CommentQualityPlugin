commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:try").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:catch").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:finally").expectedBodiesReceived("Bye Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye World", reply).     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").doTry().to("log:try").to("mock:try").throwException(new IllegalArgumentException("Damn")).doCatch(IllegalArgumentException.class).to("mock:catch").to("log:catch").to("async:bye:camel").doFinally().to("mock:finally").to("log:finally").to("async:bye:world").end().to("mock:result").to("log:result"). }
false;protected;0;26;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").doTry().to("log:try").to("mock:try").throwException(new IllegalArgumentException("Damn")).doCatch(IllegalArgumentException.class).to("mock:catch").to("log:catch").to("async:bye:camel").doFinally().to("mock:finally").to("log:finally").to("async:bye:world").end().to("mock:result").to("log:result").         }     }. }
