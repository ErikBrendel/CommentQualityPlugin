commented;modifiers;parameterAmount;loc;comment;code
false;protected,abstract;0;1;;protected abstract String getLanguageName().
true;protected;1;3;/**  * Asserts that the given predicate expression evaluated on the current language and message  * exchange evaluates to true  */ ;/**  * Asserts that the given predicate expression evaluated on the current language and message  * exchange evaluates to true  */ protected void assertPredicate(String expression) {     assertPredicate(exchange, expression, true). }
true;protected;1;3;/**  * Asserts that the given predicate expression evaluated on the current language and message  * exchange evaluates to false  */ ;/**  * Asserts that the given predicate expression evaluated on the current language and message  * exchange evaluates to false  */ protected void assertPredicateFails(String expression) {     assertPredicate(exchange, expression, false). }
true;protected;2;3;/**  * Asserts that the given predicate expression evaluated on the current language and message  * exchange evaluates to the expected value  */ ;/**  * Asserts that the given predicate expression evaluated on the current language and message  * exchange evaluates to the expected value  */ protected void assertPredicate(String expression, boolean expected) {     assertPredicate(exchange, expression, expected). }
false;protected;3;3;;protected void assertPredicate(Exchange exchange, String expression, boolean expected) {     assertPredicate(getLanguageName(), expression, exchange, expected). }
true;protected;3;3;/**  * Asserts that this language expression evaluates to the given value on the given exchange  */ ;/**  * Asserts that this language expression evaluates to the given value on the given exchange  */ protected void assertExpression(Exchange exchange, String expressionText, Object expectedValue) {     assertExpression(exchange, getLanguageName(), expressionText, expectedValue). }
true;protected;2;3;/**  * Asserts that this language expression evaluates to the given value on the current exchange  */ ;/**  * Asserts that this language expression evaluates to the given value on the current exchange  */ protected void assertExpression(String expressionText, Object expectedValue) {     assertExpression(exchange, expressionText, expectedValue). }
true;protected;3;6;/**  * Asserts that the expression evaluates to one of the two given values  */ ;/**  * Asserts that the expression evaluates to one of the two given values  */ protected void assertExpression(String expressionText, String expectedValue, String orThisExpectedValue) {     Object value = evaluateExpression(expressionText, expectedValue).     assertTrue("Expression: " + expressionText + " on Exchange: " + exchange, expectedValue.equals(value) || orThisExpectedValue.equals(value)). }
true;protected;2;16;/**  * Evaluates the expression  */ ;/**  * Evaluates the expression  */ protected Object evaluateExpression(String expressionText, String expectedValue) {     Language language = assertResolveLanguage(getLanguageName()).     Expression expression = language.createExpression(expressionText).     assertNotNull("No Expression could be created for text: " + expressionText + " language: " + language, expression).     Object value.     if (expectedValue != null) {         value = expression.evaluate(exchange, expectedValue.getClass()).     } else {         value = expression.evaluate(exchange, Object.class).     }     log.debug("Evaluated expression: {} on exchange: {} result: {}", expression, exchange, value).     return value. }
