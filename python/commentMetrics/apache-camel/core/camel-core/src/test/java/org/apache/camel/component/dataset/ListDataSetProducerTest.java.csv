commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testDefaultListDataSet() throws Exception {     template.sendBodyAndHeader(dataSetUri, "<hello>world!</hello>", Exchange.DATASET_INDEX, 0).     assertMockEndpointsSatisfied(). }
false;public;0;12;;@Test public void testDefaultListDataSetWithSizeGreaterThanListSize() throws Exception {     int messageCount = 10.     getMockEndpoint(dataSetUri).expectedMessageCount(messageCount).     dataSet.setSize(messageCount).     long size = dataSet.getSize().     for (long i = 0. i < size. i++) {         template.sendBodyAndHeader(sourceUri, "<hello>world!</hello>", Exchange.DATASET_INDEX, i).     }     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     List<Object> bodies = new LinkedList<>().     bodies.add("<hello>world!</hello>").     dataSet = new ListDataSet(bodies).     super.setUp(). }
false;protected;0;6;;@Override protected Context createJndiContext() throws Exception {     Context context = super.createJndiContext().     context.bind(dataSetName, dataSet).     return context. }
false;public;0;4;;public void configure() throws Exception {     from(sourceUri).to(dataSetUri). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(sourceUri).to(dataSetUri).         }     }. }
