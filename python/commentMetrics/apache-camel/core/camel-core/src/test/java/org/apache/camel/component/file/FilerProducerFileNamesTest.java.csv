commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/reports").     super.setUp(). }
true;public;0;14;// START SNIPPET: e1 ;// START SNIPPET: e1 @Test public void testProducerWithMessageIdAsFileName() throws Exception {     Endpoint endpoint = context.getEndpoint("direct:report").     Exchange exchange = endpoint.createExchange().     exchange.getIn().setBody("This is a good report").     FileEndpoint fileEndpoint = resolveMandatoryEndpoint("file:target/data/reports/report.txt", FileEndpoint.class).     String id = fileEndpoint.getGeneratedFileName(exchange.getIn()).     template.send("direct:report", exchange).     File file = new File("target/data/reports/" + id).     assertEquals("File should exists", true, file.exists()). }
false;public;0;6;;@Test public void testProducerWithHeaderFileName() throws Exception {     template.sendBody("direct:report2", "This is super good report").     File file = new File("target/report-super.txt").     assertEquals("File should exists", true, file.exists()). }
false;public;0;5;;public void configure() throws Exception {     from("direct:report").to("file:target/data/reports/").     from("direct:report2").setHeader(Exchange.FILE_NAME, constant("report-super.txt")).to("file:target/"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("direct:report").to("file:target/data/reports/").             from("direct:report2").setHeader(Exchange.FILE_NAME, constant("report-super.txt")).to("file:target/").         }     }. }
