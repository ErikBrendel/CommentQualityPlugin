commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").transform().constant("{{service.host:FOO}}:8888").to("mock:bar"). }
false;public;0;21;;@Test public void testFunction() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").transform().constant("{{service.host:FOO}}:8888").to("mock:bar").         }     }).     context.start().     String body = System.getenv("FOO_SERVICE_HOST") + ":8888".     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived(body).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;7;;@Override public void configure() throws Exception {     from("direct:start").to("mock:foo").transform().constant("{{service.host:BAR:myotherserver}}:8888").to("mock:bar"). }
false;public;0;20;;@Test public void testFunctionGetOrElse() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:foo").transform().constant("{{service.host:BAR:myotherserver}}:8888").to("mock:bar").         }     }).     context.start().     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:bar").expectedBodiesReceived("myotherserver:8888").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
