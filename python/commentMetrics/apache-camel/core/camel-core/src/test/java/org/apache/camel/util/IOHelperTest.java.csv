commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Test public void testIOException() {     IOException io = new IOException("Damn", new IllegalArgumentException("Damn")).     assertEquals("Damn", io.getMessage()).     assertTrue(io.getCause() instanceof IllegalArgumentException). }
false;public;0;6;;@Test public void testIOExceptionWithMessage() {     IOException io = new IOException("Not again", new IllegalArgumentException("Damn")).     assertEquals("Not again", io.getMessage()).     assertTrue(io.getCause() instanceof IllegalArgumentException). }
false;public;0;5;;@Test public void testNewStringFromBytes() {     String s = IOHelper.newStringFromBytes("Hello".getBytes()).     assertEquals("Hello", s). }
false;public;0;5;;@Test public void testNewStringFromBytesWithStart() {     String s = IOHelper.newStringFromBytes("Hello".getBytes(), 2, 3).     assertEquals("llo", s). }
false;public;0;6;;@Test public void testCopyAndCloseInput() throws Exception {     InputStream is = new ByteArrayInputStream("Hello".getBytes()).     OutputStream os = new ByteArrayOutputStream().     IOHelper.copyAndCloseInput(is, os, 256). }
false;public;0;7;;@Test public void testCharsetNormalize() throws Exception {     assertEquals("UTF-8", IOHelper.normalizeCharset("'UTF-8'")).     assertEquals("UTF-8", IOHelper.normalizeCharset("\"UTF-8\"")).     assertEquals("UTF-8", IOHelper.normalizeCharset("\"UTF-8 \"")).     assertEquals("UTF-8", IOHelper.normalizeCharset("\' UTF-8\'")). }
false;public;0;4;;@Test public void testLine1() throws Exception {     assertReadAsWritten("line1", "line1", "line1\n"). }
false;public;0;4;;@Test public void testLine1LF() throws Exception {     assertReadAsWritten("line1LF", "line1\n", "line1\n"). }
false;public;0;4;;@Test public void testLine2() throws Exception {     assertReadAsWritten("line2", "line1\nline2", "line1\nline2\n"). }
false;public;0;4;;@Test public void testLine2LF() throws Exception {     assertReadAsWritten("line2LF", "line1\nline2\n", "line1\nline2\n"). }
false;private;3;6;;private void assertReadAsWritten(String testname, String text, String compareText) throws Exception {     File file = tempFile(testname).     write(file, text).     String loadText = IOHelper.loadText(Files.newInputStream(Paths.get(file.getAbsolutePath()))).     assertEquals(compareText, loadText). }
false;private;1;3;;private File tempFile(String testname) throws Exception {     return File.createTempFile(testname, ""). }
false;private;2;5;;private void write(File file, String text) throws Exception {     PrintWriter out = new PrintWriter(file).     out.print(text).     out.close(). }
false;public;0;14;;@Test public void testCharsetName() throws Exception {     Exchange exchange = new DefaultExchange(new DefaultCamelContext()).     assertNull(ExchangeHelper.getCharsetName(exchange, false)).     exchange.getIn().setHeader(Exchange.CHARSET_NAME, "iso-8859-1").     assertEquals("iso-8859-1", ExchangeHelper.getCharsetName(exchange, false)).     exchange.getIn().removeHeader(Exchange.CHARSET_NAME).     exchange.setProperty(Exchange.CHARSET_NAME, "iso-8859-1").     assertEquals("iso-8859-1", ExchangeHelper.getCharsetName(exchange, false)). }
false;public;0;8;;@Test public void testGetCharsetNameFromContentType() throws Exception {     String charsetName = IOHelper.getCharsetNameFromContentType("text/html. charset=iso-8859-1").     assertEquals("iso-8859-1", charsetName).     charsetName = IOHelper.getCharsetNameFromContentType("text/html").     assertEquals("UTF-8", charsetName). }
