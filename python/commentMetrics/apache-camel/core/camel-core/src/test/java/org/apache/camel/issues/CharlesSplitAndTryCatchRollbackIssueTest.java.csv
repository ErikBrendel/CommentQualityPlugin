commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testSplitWithTryCatchAndRollbackOK() throws Exception {     MockEndpoint split = getMockEndpoint("mock:split").     MockEndpoint ile = getMockEndpoint("mock:ile").     MockEndpoint exception = getMockEndpoint("mock:exception").     split.expectedBodiesReceived("A", "B", "C").     ile.expectedMessageCount(0).     exception.expectedMessageCount(0).     template.sendBody("direct:start", "A,B,C").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testSplitWithTryCatchAndRollbackILE() throws Exception {     MockEndpoint split = getMockEndpoint("mock:split").     MockEndpoint ile = getMockEndpoint("mock:ile").     MockEndpoint exception = getMockEndpoint("mock:exception").     split.expectedBodiesReceived("A", "B", "C").     ile.expectedMessageCount(1).     exception.expectedMessageCount(0).     template.sendBody("direct:start", "A,B,Forced,C").     assertMockEndpointsSatisfied(). }
false;public;0;22;;@Test public void testSplitWithTryCatchAndRollbackException() throws Exception {     MockEndpoint split = getMockEndpoint("mock:split").     MockEndpoint ile = getMockEndpoint("mock:ile").     MockEndpoint exception = getMockEndpoint("mock:exception").     split.expectedBodiesReceived("A", "B").     ile.expectedMessageCount(0).     exception.expectedMessageCount(1).     try {         template.sendBody("direct:start", "A,B,Kaboom,C").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         CamelExchangeException ee = assertIsInstanceOf(CamelExchangeException.class, e.getCause()).         assertTrue(ee.getMessage().startsWith("Multicast processing failed for number 2.")).         RollbackExchangeException re = assertIsInstanceOf(RollbackExchangeException.class, ee.getCause()).         assertTrue(re.getMessage().startsWith("Intended rollback")).     }     assertMockEndpointsSatisfied(). }
false;public;0;22;;@Test public void testSplitWithTryCatchAndRollbacILEAndException() throws Exception {     MockEndpoint split = getMockEndpoint("mock:split").     MockEndpoint ile = getMockEndpoint("mock:ile").     MockEndpoint exception = getMockEndpoint("mock:exception").     split.expectedBodiesReceived("A", "B").     ile.expectedMessageCount(1).     exception.expectedMessageCount(1).     try {         template.sendBody("direct:start", "A,Forced,B,Kaboom,C").         fail("Should thrown an exception").     } catch (CamelExecutionException e) {         CamelExchangeException ee = assertIsInstanceOf(CamelExchangeException.class, e.getCause()).         assertTrue(ee.getMessage().startsWith("Multicast processing failed for number 3.")).         RollbackExchangeException re = assertIsInstanceOf(RollbackExchangeException.class, ee.getCause()).         assertTrue(re.getMessage().startsWith("Intended rollback")).     }     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     from("direct:start").split(body().tokenize(",")).stopOnException().doTry().process(new MyProcessor()).to("mock:split").doCatch(IllegalArgumentException.class).to("mock:ile").doCatch(Exception.class).to("mock:exception").rollback().end(). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(body().tokenize(",")).stopOnException().doTry().process(new MyProcessor()).to("mock:split").doCatch(IllegalArgumentException.class).to("mock:ile").doCatch(Exception.class).to("mock:exception").rollback().end().         }     }. }
false;public;1;8;;public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Forced".equals(body)) {         throw new IllegalArgumentException("Forced").     } else if ("Kaboom".equals(body)) {         throw new Exception("Kaboom").     } }
