commented;modifiers;parameterAmount;loc;comment;code
false;public;0;17;;@Test public void testValidateId() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     RouteDefinition route = context.getRouteDefinition("myRoute").     assertNotNull(route).     // mock:result should be the only with the result as id     assertTrue(route.getOutputs().get(0).getId().equals("myValidate")).     assertFalse(route.getOutputs().get(1).getId().equals("result")).     assertTrue(route.getOutputs().get(2).getId().equals("result")).     assertTrue(route.getOutputs().get(3).getId().equals("after")). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").routeId("myRoute").validate(body().isInstanceOf(String.class)).id("myValidate").to("log:foo").to("mock:result").id("result").to("log:after").id("after"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").routeId("myRoute").validate(body().isInstanceOf(String.class)).id("myValidate").to("log:foo").to("mock:result").id("result").to("log:after").id("after").         }     }. }
