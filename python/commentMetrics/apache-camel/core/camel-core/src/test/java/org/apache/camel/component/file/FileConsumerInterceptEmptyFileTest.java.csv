commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/exclude").     super.setUp(). }
false;public;0;12;;@Test public void testExcludeZeroLengthFiles() throws Exception {     MockEndpoint mock1 = getMockEndpoint("mock:result").     mock1.expectedBodiesReceivedInAnyOrder("Hello World", "Bye World").     MockEndpoint mock2 = getMockEndpoint("mock:skip").     mock2.expectedMessageCount(2).     sendFiles().     assertMockEndpointsSatisfied(). }
false;private;0;7;;private void sendFiles() throws Exception {     String url = "file://target/data/exclude".     template.sendBodyAndHeader(url, "Hello World", Exchange.FILE_NAME, "hello.xml").     template.sendBodyAndHeader(url, "", Exchange.FILE_NAME, "empty1.txt").     template.sendBodyAndHeader(url, "Bye World", Exchange.FILE_NAME, "secret.txt").     template.sendBodyAndHeader(url, "", Exchange.FILE_NAME, "empty2.txt"). }
false;public;0;6;;public void configure() throws Exception {     interceptFrom().when(simple("${file:length} == 0")).to("mock:skip").stop().     from("file://target/data/exclude/?initialDelay=10&delay=10").convertBodyTo(String.class).to("log:test").to("mock:result"). }
false;protected;0;10;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             interceptFrom().when(simple("${file:length} == 0")).to("mock:skip").stop().             from("file://target/data/exclude/?initialDelay=10&delay=10").convertBodyTo(String.class).to("log:test").to("mock:result").         }     }. }
