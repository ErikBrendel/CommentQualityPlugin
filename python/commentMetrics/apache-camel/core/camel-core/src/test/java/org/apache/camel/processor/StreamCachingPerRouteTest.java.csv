commented;modifiers;parameterAmount;loc;comment;code
false;public;0;31;;@Test public void testStreamCachingPerRoute() throws Exception {     MockEndpoint a = getMockEndpoint("mock:a").     a.expectedMessageCount(1).     MockEndpoint b = getMockEndpoint("mock:b").     b.expectedMessageCount(1).     MockEndpoint c = getMockEndpoint("mock:c").     c.expectedMessageCount(1).     new StreamSource(new StringReader("A")).     template.sendBody("direct:a", new StreamSource(new StringReader("A"))).     Object sendB = new StreamSource(new StringReader("B")).     template.sendBody("direct:b", sendB).     template.sendBody("direct:c", new StreamSource(new StringReader("C"))).     assertMockEndpointsSatisfied().     Object bodyA = a.getReceivedExchanges().get(0).getIn().getBody().     assertIsInstanceOf(StreamCache.class, bodyA).     Object bodyC = c.getReceivedExchanges().get(0).getIn().getBody().     assertIsInstanceOf(StreamCache.class, bodyC).     // should not be stream cache but the pure body     Object bodyB = b.getReceivedExchanges().get(0).getIn().getBody().     assertIsInstanceOf(StreamSource.class, bodyB).     assertSame("Should be same body as we send", sendB, bodyB). }
false;public;0;10;;@Override public void configure() throws Exception {     context.setStreamCaching(true).     from("direct:a").to("mock:a").     from("direct:b").noStreamCaching().to("mock:b").     from("direct:c").streamCaching().to("mock:c"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.setStreamCaching(true).             from("direct:a").to("mock:a").             from("direct:b").noStreamCaching().to("mock:b").             from("direct:c").streamCaching().to("mock:c").         }     }. }
