commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testInOut() throws Exception {     getMockEndpoint("mock:log").expectedBodiesReceived("Logging: Bye World").     String out = template.requestBody("direct:start", "Hello World", String.class).     assertEquals("Bye World", out).     log.info("Got reply " + out).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // send the message as InOnly to SEDA as we want to continue routing     // (as we don't want to do request/reply over SEDA)     // In EIP patterns the WireTap pattern is what this would be     from("direct:start").transform(constant("Bye World")).inOnly("seda:log").     from("seda:log").transform(body().prepend("Logging: ")).to("log:log", "mock:log"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // send the message as InOnly to SEDA as we want to continue routing             // (as we don't want to do request/reply over SEDA)             // In EIP patterns the WireTap pattern is what this would be             from("direct:start").transform(constant("Bye World")).inOnly("seda:log").             from("seda:log").transform(body().prepend("Logging: ")).to("log:log", "mock:log").         }     }. }
