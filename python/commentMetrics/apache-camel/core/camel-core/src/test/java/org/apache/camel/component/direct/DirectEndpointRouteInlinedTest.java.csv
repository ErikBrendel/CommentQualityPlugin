commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result"). }
false;public;0;19;;@Test public void testDirect() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("mock:result").         }     }).     context.start().     // invoke start a 2nd time wont break stuff     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("mock:result").     from("direct:start").to("mock:bar"). }
false;public;0;16;;@Test public void testDirectExistingExists() throws Exception {     try {         context.addRoutes(new RouteBuilder() {              @Override             public void configure() throws Exception {                 from("direct:start").to("mock:result").                 from("direct:start").to("mock:bar").             }         }).         fail("Should have thrown exception").     } catch (FailedToStartRouteException e) {         assertEquals("Failed to start route route2 because of Multiple consumers for the same endpoint is not allowed: direct://start", e.getMessage()).     } }
