commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testTimerAndErrorHandler() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(2).     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     onException(RuntimeCamelException.class).handled(true).     errorHandler(defaultErrorHandler()).     String executionTriggerUri = "timer:executionTimer" + "?fixedRate=true" + "&daemon=true" + "&delay=0" + "&period=10".     from(executionTriggerUri).to("mock:result"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(RuntimeCamelException.class).handled(true).             errorHandler(defaultErrorHandler()).             String executionTriggerUri = "timer:executionTimer" + "?fixedRate=true" + "&daemon=true" + "&delay=0" + "&period=10".             from(executionTriggerUri).to("mock:result").         }     }. }
