commented;modifiers;parameterAmount;loc;comment;code
false;public;0;26;;@Test public void testSplitterCollate() throws Exception {     getMockEndpoint("mock:line").expectedMessageCount(2).     List<Object> data = new ArrayList<>().     data.add("A").     data.add("B").     data.add("C").     data.add("D").     data.add("E").     template.sendBody("direct:start", data).     assertMockEndpointsSatisfied().     List chunk = getMockEndpoint("mock:line").getReceivedExchanges().get(0).getIn().getBody(List.class).     List chunk2 = getMockEndpoint("mock:line").getReceivedExchanges().get(1).getIn().getBody(List.class).     assertEquals(3, chunk.size()).     assertEquals(2, chunk2.size()).     assertEquals("A", chunk.get(0)).     assertEquals("B", chunk.get(1)).     assertEquals("C", chunk.get(2)).     assertEquals("D", chunk2.get(0)).     assertEquals("E", chunk2.get(1)). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").split(simple("${collate(3)}")).to("mock:line"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").split(simple("${collate(3)}")).to("mock:line").         }     }. }
