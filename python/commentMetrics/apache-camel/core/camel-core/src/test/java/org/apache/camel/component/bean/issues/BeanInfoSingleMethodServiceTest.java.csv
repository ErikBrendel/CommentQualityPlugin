commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Test public void testBeanInfoSingleMethodRoute() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("You said Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Test public void testBeanInfoSingleMethod() throws Exception {     BeanInfo beaninfo = new BeanInfo(context, SingleMethodService.class).     assertEquals(1, beaninfo.getMethods().size()).     assertEquals("doSomething", beaninfo.getMethods().get(0).getMethod().getName()). }
false;public;0;11;;@Test public void testBeanInfoSingleMethodImpl() throws Exception {     BeanInfo beaninfo = new BeanInfo(context, SingleMethodServiceImpl.class).     assertEquals(2, beaninfo.getMethods().size()).     assertEquals("doSomething", beaninfo.getMethods().get(0).getMethod().getName()).     assertEquals("hello", beaninfo.getMethods().get(1).getMethod().getName()).     Method method = beaninfo.getMethods().get(0).getMethod().     Object out = method.invoke(myService, "Bye World").     assertEquals("You said Bye World", out). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").bean(myService, "doSomething").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").bean(myService, "doSomething").to("mock:result").         }     }. }
