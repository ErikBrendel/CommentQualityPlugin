commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("retryBean", new RetryBean()).     return jndi. }
false;public;0;13;;@Test public void testRestartFromBeginning() throws Exception {     // 1 original + 4 redeliveries     getMockEndpoint("mock:start").expectedBodiesReceived("Camel", "Camel", "Camel", "Camel", "Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello Camel").     // use fire and forget     template.sendBody("seda:start", "Camel").     setAssertPeriod(500).     assertMockEndpointsSatisfied(). }
false;public;1;7;;@Override public void process(Exchange exchange) throws Exception {     // fail the first 3 times     if (counter++ <= 3) {         throw new IllegalArgumentException("Damn").     } }
false;public;0;22;;@Override public void configure() throws Exception {     // use the DLQ and let the retryBean handle this     errorHandler(deadLetterChannel("bean:retryBean").useOriginalMessage()).     // use seda:retry as a way of retrying from the input route     // the seda:start could be any other kind of fire and forget endpoint     from("seda:start", "seda:retry").to("log:start", "mock:start").transform(body().prepend("Hello ")).process(new Processor() {          private int counter.          @Override         public void process(Exchange exchange) throws Exception {             // fail the first 3 times             if (counter++ <= 3) {                 throw new IllegalArgumentException("Damn").             }         }     }).to("mock:result"). }
false;protected;0;27;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use the DLQ and let the retryBean handle this             errorHandler(deadLetterChannel("bean:retryBean").useOriginalMessage()).             // use seda:retry as a way of retrying from the input route             // the seda:start could be any other kind of fire and forget endpoint             from("seda:start", "seda:retry").to("log:start", "mock:start").transform(body().prepend("Hello ")).process(new Processor() {                  private int counter.                  @Override                 public void process(Exchange exchange) throws Exception {                     // fail the first 3 times                     if (counter++ <= 3) {                         throw new IllegalArgumentException("Damn").                     }                 }             }).to("mock:result").         }     }. }
true;public;1;15;// use recipient list to decide what to do with the message ;// use recipient list to decide what to do with the message @RecipientList public String handleError(Exchange exchange) {     // store a property on the exchange with the number of total attempts     int attempts = exchange.getProperty("attempts", 0, int.class).     attempts++.     exchange.setProperty("attempts", attempts).     // we want to retry at most 4 times     if (attempts <= 4) {         return "seda:retry".     } else {         // okay we give up its a poison message         return "log:giveup".     } }
