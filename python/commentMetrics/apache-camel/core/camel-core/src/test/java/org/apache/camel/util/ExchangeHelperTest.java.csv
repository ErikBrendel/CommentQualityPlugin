commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testValidProperty() throws Exception {     String value = ExchangeHelper.getMandatoryProperty(exchange, "foo", String.class).     assertEquals("foo property", "123", value). }
false;public;0;9;;@Test public void testMissingProperty() throws Exception {     try {         String value = ExchangeHelper.getMandatoryProperty(exchange, "bar", String.class).         fail("Should have failed but got: " + value).     } catch (NoSuchPropertyException e) {         assertEquals("bar", e.getPropertyName()).     } }
false;public;0;9;;@Test public void testPropertyOfIncompatibleType() throws Exception {     try {         List<?> value = ExchangeHelper.getMandatoryProperty(exchange, "foo", List.class).         fail("Should have failed but got: " + value).     } catch (NoSuchPropertyException e) {         assertEquals("foo", e.getPropertyName()).     } }
false;public;0;9;;@Test public void testMissingHeader() throws Exception {     try {         String value = ExchangeHelper.getMandatoryHeader(exchange, "unknown", String.class).         fail("Should have failed but got: " + value).     } catch (NoSuchHeaderException e) {         assertEquals("unknown", e.getHeaderName()).     } }
false;public;0;10;;@Test public void testHeaderOfIncompatibleType() throws Exception {     exchange.getIn().setHeader("foo", 123).     try {         List<?> value = ExchangeHelper.getMandatoryHeader(exchange, "foo", List.class).         fail("Should have failed but got: " + value).     } catch (NoSuchHeaderException e) {         assertEquals("foo", e.getHeaderName()).     } }
false;public;0;10;;@Test public void testNoSuchBean() throws Exception {     try {         ExchangeHelper.lookupMandatoryBean(exchange, "foo").         fail("Should have thrown an exception").     } catch (NoSuchBeanException e) {         assertEquals("No bean could be found in the registry for: foo", e.getMessage()).         assertEquals("foo", e.getName()).     } }
false;public;0;10;;@Test public void testNoSuchBeanType() throws Exception {     try {         ExchangeHelper.lookupMandatoryBean(exchange, "foo", String.class).         fail("Should have thrown an exception").     } catch (NoSuchBeanException e) {         assertEquals("No bean could be found in the registry for: foo", e.getMessage()).         assertEquals("foo", e.getName()).     } }
false;public;0;12;;@Test public void testGetExchangeById() throws Exception {     List<Exchange> list = new ArrayList<>().     Exchange e1 = context.getEndpoint("mock:foo").createExchange().     Exchange e2 = context.getEndpoint("mock:foo").createExchange().     list.add(e1).     list.add(e2).     assertNull(ExchangeHelper.getExchangeById(list, "unknown")).     assertEquals(e1, ExchangeHelper.getExchangeById(list, e1.getExchangeId())).     assertEquals(e2, ExchangeHelper.getExchangeById(list, e2.getExchangeId())). }
false;public;0;19;;@Test public void testPopulateVariableMap() throws Exception {     exchange.setPattern(ExchangePattern.InOut).     exchange.getOut().setBody("bar").     exchange.getOut().setHeader("quote", "Camel rocks").     Map<String, Object> map = new HashMap<>().     ExchangeHelper.populateVariableMap(exchange, map).     assertEquals(8, map.size()).     assertSame(exchange, map.get("exchange")).     assertSame(exchange.getIn(), map.get("in")).     assertSame(exchange.getIn(), map.get("request")).     assertSame(exchange.getOut(), map.get("out")).     assertSame(exchange.getOut(), map.get("response")).     assertSame(exchange.getIn().getHeaders(), map.get("headers")).     assertSame(exchange.getIn().getBody(), map.get("body")).     assertSame(exchange.getContext(), map.get("camelContext")). }
false;public;0;18;;@Test public void testCreateVariableMap() throws Exception {     exchange.setPattern(ExchangePattern.InOut).     exchange.getOut().setBody("bar").     exchange.getOut().setHeader("quote", "Camel rocks").     Map<?, ?> map = ExchangeHelper.createVariableMap(exchange).     assertEquals(8, map.size()).     assertSame(exchange, map.get("exchange")).     assertSame(exchange.getIn(), map.get("in")).     assertSame(exchange.getIn(), map.get("request")).     assertSame(exchange.getOut(), map.get("out")).     assertSame(exchange.getOut(), map.get("response")).     assertSame(exchange.getIn().getHeaders(), map.get("headers")).     assertSame(exchange.getIn().getBody(), map.get("body")).     assertSame(exchange.getContext(), map.get("camelContext")). }
false;public;0;24;;@Test public void testCreateVariableMapNoExistingOut() throws Exception {     exchange.setPattern(ExchangePattern.InOut).     exchange.getIn().setBody("bar").     exchange.getIn().setHeader("quote", "Camel rocks").     assertFalse(exchange.hasOut()).     Map<?, ?> map = ExchangeHelper.createVariableMap(exchange).     // there should still be 8 in the map     assertEquals(8, map.size()).     assertSame(exchange, map.get("exchange")).     assertSame(exchange.getIn(), map.get("in")).     assertSame(exchange.getIn(), map.get("request")).     assertSame(exchange.getIn(), map.get("out")).     assertSame(exchange.getIn(), map.get("response")).     assertSame(exchange.getIn().getHeaders(), map.get("headers")).     assertSame(exchange.getIn().getBody(), map.get("body")).     assertSame(exchange.getContext(), map.get("camelContext")).     // but the Exchange does still not have an OUT message to avoid     // causing side effects with the createVariableMap method     assertFalse(exchange.hasOut()). }
false;public;0;5;;@Test public void testGetContentType() throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_TYPE, "text/xml").     assertEquals("text/xml", ExchangeHelper.getContentType(exchange)). }
false;public;0;5;;@Test public void testGetContentEncoding() throws Exception {     exchange.getIn().setHeader(Exchange.CONTENT_ENCODING, "iso-8859-1").     assertEquals("iso-8859-1", ExchangeHelper.getContentEncoding(exchange)). }
false;public;0;6;;@Test public void testIsStreamCaching() throws Exception {     assertFalse(ExchangeHelper.isStreamCachingEnabled(exchange)).     exchange.getContext().getStreamCachingStrategy().setEnabled(true).     assertTrue(ExchangeHelper.isStreamCachingEnabled(exchange)). }
false;public;0;7;;@Override @Before public void setUp() throws Exception {     super.setUp().     exchange = new DefaultExchange(new DefaultCamelContext()).     exchange.setProperty("foo", 123). }
