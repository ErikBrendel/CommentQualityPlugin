commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/changed/").     createDirectory("target/data/changed/in").     super.setUp(). }
false;public;0;10;;@Test public void testChangedReadLock() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/changed/out/zerofile.dat").     writeZeroLengthFile().     assertMockEndpointsSatisfied(). }
false;private;0;5;;private void writeZeroLengthFile() throws Exception {     FileOutputStream fos = new FileOutputStream("target/data/changed/in/zerofile.dat").     fos.flush().     fos.close(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("file:target/data/changed/in?initialDelay=0&delay=10&readLock=changed&readLockCheckInterval=100&readLockMinLength=0").to("file:target/data/changed/out", "mock:result"). }
false;protected;0;10;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file:target/data/changed/in?initialDelay=0&delay=10&readLock=changed&readLockCheckInterval=100&readLockMinLength=0").to("file:target/data/changed/out", "mock:result").         }     }. }
