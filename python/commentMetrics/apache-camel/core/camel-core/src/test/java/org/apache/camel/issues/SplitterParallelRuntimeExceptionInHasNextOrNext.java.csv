commented;modifiers;parameterAmount;loc;comment;code
true;public;0;4;/**  * Tests that only one aggregator thread is created if a RuntimeException in  * the hasNext method of a custom iterator occurs.  */ ;/**  * Tests that only one aggregator thread is created if a RuntimeException in  * the hasNext method of a custom iterator occurs.  */ @Test public void testSplitErrorInHasNext() throws Exception {     execute("direct:errorInHasNext"). }
true;public;0;4;/**  * Tests that only one aggregator thread is created if a RuntimeException in  * the next method of a custom iterator occurs.  */ ;/**  * Tests that only one aggregator thread is created if a RuntimeException in  * the next method of a custom iterator occurs.  */ @Test public void testSplitErrorInNext() throws Exception {     execute("direct:errorInNext"). }
false;private;1;11;;private void execute(String from) throws InterruptedException {     for (int i = 0. i < 10. i++) {         try {             template.sendBody(from, "some content").         } catch (Exception e) {             // expected due to runtime exception in hasNext method             assertTrue(e.getMessage().startsWith("Exception occurred")).         }         assertMockEndpointsSatisfied().     } }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:errorInHasNext").split().method(SplitterImpl.class, "errorInHasNext").streaming().parallelProcessing(true).to("mock:split1").     from("direct:errorInNext").split().method(SplitterImpl.class, "errorInNext").streaming().parallelProcessing(true).to("mock:split2"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:errorInHasNext").split().method(SplitterImpl.class, "errorInHasNext").streaming().parallelProcessing(true).to("mock:split1").             from("direct:errorInNext").split().method(SplitterImpl.class, "errorInNext").streaming().parallelProcessing(true).to("mock:split2").         }     }. }
false;public;2;4;;public Iterator<String> errorInHasNext(InputStream request, Exchange exchange) {     return new CustomIterator(exchange, request, true). }
false;public;2;4;;public Iterator<String> errorInNext(InputStream request, Exchange exchange) {     return new CustomIterator(exchange, request, false). }
false;public;0;11;;@Override public boolean hasNext() {     if (index < 7) {         return true.     }     if (errorInHasNext) {         throw new RuntimeException("Exception thrown").     } else {         return false.     } }
false;public;0;13;;@Override public String next() {     index++.     if (index < 7) {         return "<a>" + index + "</a>".     }     if (!errorInHasNext) {         throw new RuntimeException("Exception thrown").     } else {         return "<a>" + index + "</a>".     } }
false;public;0;4;;@Override public void remove() {     throw new UnsupportedOperationException(). }
false;public;0;4;;@Override public void close() throws IOException {     request.close(). }
