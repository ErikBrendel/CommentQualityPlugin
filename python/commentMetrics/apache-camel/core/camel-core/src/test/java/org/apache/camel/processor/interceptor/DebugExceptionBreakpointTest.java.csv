commented;modifiers;parameterAmount;loc;comment;code
false;public;4;5;;@Override public void afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken) {     Exception e = exchange.getException().     logs.add("Breakpoint at " + definition.getShortName() + " caused by: " + e.getClass().getSimpleName() + "[" + e.getMessage() + "]"). }
false;public;3;4;;@Override public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {     return exchange.getException() != null. }
false;public;0;20;;@Override @Before public void setUp() throws Exception {     super.setUp().     breakpoint = new BreakpointSupport() {          @Override         public void afterProcess(Exchange exchange, Processor processor, NamedNode definition, long timeTaken) {             Exception e = exchange.getException().             logs.add("Breakpoint at " + definition.getShortName() + " caused by: " + e.getClass().getSimpleName() + "[" + e.getMessage() + "]").         }     }.     exceptionCondition = new ConditionSupport() {          @Override         public boolean matchProcess(Exchange exchange, Processor processor, NamedNode definition) {             return exchange.getException() != null.         }     }. }
false;public;0;20;;@Test public void testDebug() throws Exception {     context.getDebugger().addBreakpoint(breakpoint, exceptionCondition).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     try {         template.sendBody("direct:start", "Hello Camel").         fail("Should have thrown exception").     } catch (Exception e) {     // ignore     }     assertMockEndpointsSatisfied().     assertEquals(2, logs.size()).     assertEquals("Breakpoint at throwException caused by: IllegalArgumentException[Damn]", logs.get(0)).     assertEquals("Breakpoint at choice caused by: IllegalArgumentException[Damn]", logs.get(1)). }
false;public;0;12;;@Override public void configure() throws Exception {     // use debugger     context.setDebugger(new DefaultDebugger()).     from("direct:start").to("log:foo").choice().when(body().contains("Camel")).throwException(new IllegalArgumentException("Damn")).end().to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // use debugger             context.setDebugger(new DefaultDebugger()).             from("direct:start").to("log:foo").choice().when(body().contains("Camel")).throwException(new IllegalArgumentException("Damn")).end().to("mock:result").         }     }. }
