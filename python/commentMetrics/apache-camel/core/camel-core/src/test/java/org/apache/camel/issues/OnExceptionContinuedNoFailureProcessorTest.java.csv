commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testOnException() throws Exception {     getMockEndpoint("mock:end").expectedMessageCount(1).     getMockEndpoint("mock:error").expectedMessageCount(0).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new RuntimeException("FAIL!"). }
false;public;0;17;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:error")).     // continue runtime exception     onException(RuntimeException.class).continued(true).     from("direct:start").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new RuntimeException("FAIL!").         }     }).to("mock:end"). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(deadLetterChannel("mock:error")).             // continue runtime exception             onException(RuntimeException.class).continued(true).             from("direct:start").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new RuntimeException("FAIL!").                 }             }).to("mock:end").         }     }. }
