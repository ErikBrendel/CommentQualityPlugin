commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testWireTapToVoidBean() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     final MyTapBean tapBean = (MyTapBean) context.getRegistry().lookupByName("tap").     await().atMost(2, TimeUnit.SECONDS).untilAsserted(() -> {         assertEquals("Hello World", tapBean.getTapped()).     }). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("tap", new MyTapBean()).     return jndi. }
false;public;0;5;;public void configure() {     from("direct:start").wireTap("bean:tap").dynamicUri(false).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").wireTap("bean:tap").dynamicUri(false).to("mock:result").         }     }. }
false;public;1;4;;public void tapSomething(String body) {     LOG.info("Wire tapping: {}", body).     tapped = body. }
false;public;0;3;;public String getTapped() {     return tapped. }
