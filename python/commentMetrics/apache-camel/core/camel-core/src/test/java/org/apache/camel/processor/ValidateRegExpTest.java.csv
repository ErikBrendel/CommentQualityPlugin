commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:start", Endpoint.class).     resultEndpoint = resolveMandatoryEndpoint("mock:result", MockEndpoint.class). }
false;public;0;8;;@Test public void testSendMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(1).     template.sendBody(startEndpoint, "01.01.2010").     assertMockEndpointsSatisfied(). }
false;public;0;21;;@Test public void testSendNotMatchingMessage() throws Exception {     resultEndpoint.expectedMessageCount(0).     try {         template.sendBody(startEndpoint, "1.1.2010").         fail("CamelExecutionException expected").     } catch (CamelExecutionException e) {         // expected         PredicateValidationException cause = assertIsInstanceOf(PredicateValidationException.class, e.getCause()).         // as the Expression could be different between the DSL and simple language, here we just check part of the message         assertTrue("Get a wrong exception message", cause.getMessage().startsWith("Validation failed for Predicate")).         assertTrue(cause.getMessage().contains("^\\d{2}\\.\\d{2}\\.\\d{4}$")).         String body = cause.getExchange().getIn().getBody(String.class).         assertEquals("1.1.2010", body).     }     assertMockEndpointsSatisfied(). }
false;public;0;5;;public void configure() {     from("direct:start").validate(bodyAs(String.class).regex("^\\d{2}\\.\\d{2}\\.\\d{4}$")).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             from("direct:start").validate(bodyAs(String.class).regex("^\\d{2}\\.\\d{2}\\.\\d{4}$")).to("mock:result").         }     }. }
