commented;modifiers;parameterAmount;loc;comment;code
false;public;1;3;;public void process(Exchange exchange) throws Exception {     bodies.add(exchange.getIn().getBody(String.class)). }
false;public;0;17;;@Test public void testPollEndpoint() throws Exception {     template.sendBody("seda:foo", "Hello World").     template.sendBody("seda:foo", "Bye World").     final List<String> bodies = new ArrayList<>().     // uses 1 sec default timeout     EndpointHelper.pollEndpoint(context.getEndpoint("seda:foo"), new Processor() {          public void process(Exchange exchange) throws Exception {             bodies.add(exchange.getIn().getBody(String.class)).         }     }).     assertEquals(2, bodies.size()).     assertEquals("Hello World", bodies.get(0)).     assertEquals("Bye World", bodies.get(1)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     bodies.add(exchange.getIn().getBody(String.class)). }
false;public;0;16;;@Test public void testPollEndpointTimeout() throws Exception {     template.sendBody("seda:foo", "Hello World").     template.sendBody("seda:foo", "Bye World").     final List<String> bodies = new ArrayList<>().     EndpointHelper.pollEndpoint(context.getEndpoint("seda:foo"), new Processor() {          public void process(Exchange exchange) throws Exception {             bodies.add(exchange.getIn().getBody(String.class)).         }     }, 10).     assertEquals(2, bodies.size()).     assertEquals("Hello World", bodies.get(0)).     assertEquals("Bye World", bodies.get(1)). }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     foo = context.getEndpoint("mock:foo").     bar = context.getEndpoint("mock:bar").     context.getRegistry().bind("foo", foo).     context.getRegistry().bind("coolbar", bar).     context.getRegistry().bind("numbar", "12345").     return context. }
false;public;0;6;;@Test public void testLookupEndpointRegistryId() throws Exception {     assertEquals("foo", EndpointHelper.lookupEndpointRegistryId(foo)).     assertEquals("coolbar", EndpointHelper.lookupEndpointRegistryId(bar)).     assertEquals(null, EndpointHelper.lookupEndpointRegistryId(context.getEndpoint("mock:cheese"))). }
false;public;0;9;;@Test public void testLookupEndpointRegistryIdUsingRef() throws Exception {     foo = context.getEndpoint("ref:foo").     bar = context.getEndpoint("ref:coolbar").     assertEquals("foo", EndpointHelper.lookupEndpointRegistryId(foo)).     assertEquals("coolbar", EndpointHelper.lookupEndpointRegistryId(bar)).     assertEquals(null, EndpointHelper.lookupEndpointRegistryId(context.getEndpoint("mock:cheese"))). }
false;public;0;6;;@Test public void testResolveReferenceParameter() throws Exception {     Endpoint endpoint = EndpointHelper.resolveReferenceParameter(context, "coolbar", Endpoint.class).     assertNotNull(endpoint).     assertSame(bar, endpoint). }
false;public;0;7;;@Test public void testResolveAndConvertReferenceParameter() throws Exception {     // The registry value is a java.lang.String     Integer number = EndpointHelper.resolveReferenceParameter(context, "numbar", Integer.class).     assertNotNull(number).     assertEquals(12345, (int) number). }
false;public;0;5;;@Test public void testResolveAndConvertMissingReferenceParameter() throws Exception {     Integer number = EndpointHelper.resolveReferenceParameter(context, "misbar", Integer.class, false).     assertNull(number). }
false;public;0;9;;@Test public void testMandatoryResolveAndConvertMissingReferenceParameter() throws Exception {     try {         EndpointHelper.resolveReferenceParameter(context, "misbar", Integer.class, true).         fail().     } catch (NoSuchBeanException ex) {         assertEquals("No bean could be found in the registry for: misbar of type: java.lang.Integer", ex.getMessage()).     } }
false;public;0;10;;@Test public void testResolveParameter() throws Exception {     Endpoint endpoint = EndpointHelper.resolveParameter(context, "#coolbar", Endpoint.class).     assertNotNull(endpoint).     assertSame(bar, endpoint).     Integer num = EndpointHelper.resolveParameter(context, "123", Integer.class).     assertNotNull(num).     assertEquals(123, num.intValue()). }
