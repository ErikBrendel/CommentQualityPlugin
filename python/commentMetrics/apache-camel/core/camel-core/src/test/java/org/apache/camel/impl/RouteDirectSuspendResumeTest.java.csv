commented;modifiers;parameterAmount;loc;comment;code
false;public;0;39;;@Test public void testSuspendResume() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("A").     template.sendBody("direct:foo", "A").     assertMockEndpointsSatisfied().     log.info("Suspending").     // now suspend and dont expect a message to be routed     resetMocks().     mock.expectedMessageCount(0).     context.getRouteController().suspendRoute("foo").     // direct consumer supports suspension     assertEquals("Suspended", context.getRouteController().getRouteStatus("foo").name()).     try {         template.sendBody("direct:foo", "B").         fail("Should have thrown an exception").     } catch (Exception e) {     // expected     }     log.info("Resuming").     // now resume and expect the previous message to be routed     resetMocks().     mock.expectedBodiesReceived("B").     context.getRouteController().resumeRoute("foo").     template.sendBody("direct:foo", "B").     assertMockEndpointsSatisfied().     assertEquals("Started", context.getRouteController().getRouteStatus("foo").name()). }
false;public;0;6;;@Override public void configure() throws Exception {     context.getComponent("direct", DirectComponent.class).setBlock(false).     from("direct:foo").routeId("foo").to("log:foo").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.getComponent("direct", DirectComponent.class).setBlock(false).             from("direct:foo").routeId("foo").to("log:foo").to("mock:result").         }     }. }
