commented;modifiers;parameterAmount;loc;comment;code
false;public,static;0;3;;public static String getFilename() {     return "" + counter++ + ".txt". }
false;public;0;10;;@Override public void setUp() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     super.setUp().     deleteDirectory("target/data/filestress"). }
false;public;0;11;;public void testDropInNewFiles() throws Exception {     // do not test on windows     if (isPlatform("windows")) {         return.     }     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMinimumMessageCount(250).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     // generate a new file continuously     from("timer:foo?period=50").setHeader(Exchange.FILE_NAME, method(FileAsyncStressFileDropper.class, "getFilename")).setBody(constant("Hello World")).to("file:target/data/filestress").to("mock:result"). }
false;protected;0;14;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // generate a new file continuously             from("timer:foo?period=50").setHeader(Exchange.FILE_NAME, method(FileAsyncStressFileDropper.class, "getFilename")).setBody(constant("Hello World")).to("file:target/data/filestress").to("mock:result").         }     }. }
