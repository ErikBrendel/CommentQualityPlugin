commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{cool.end:mock:wrong}}"). }
false;public;0;16;;@Test public void testPropertiesComponentFoundKey() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{cool.end:mock:wrong}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("properties:{{unknown:mock:result}}"). }
false;public;0;16;;@Test public void testPropertiesComponentUseDefaultValue() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("properties:{{unknown:mock:result}}").         }     }).     context.start().     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body} do you think ${properties:cool.name} rocks?"). }
false;public;0;14;;@Test public void testPropertiesComponentSimpleLanguage() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body} do you think ${properties:cool.name} rocks?").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus do you think Camel rocks?", reply). }
false;public;0;5;;@Override public void configure() throws Exception {     from("direct:start").transform().simple("Hi ${body} do you think ${properties:unknown:Beer} rocks?"). }
false;public;0;14;;@Test public void testPropertiesComponentSimpleLanguageUsingDefaultValue() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").transform().simple("Hi ${body} do you think ${properties:unknown:Beer} rocks?").         }     }).     context.start().     String reply = template.requestBody("direct:start", "Claus", String.class).     assertEquals("Hi Claus do you think Beer rocks?", reply). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = super.createCamelContext().     context.addComponent("properties", new PropertiesComponent("classpath:org/apache/camel/component/properties/myproperties.properties")).     return context. }
