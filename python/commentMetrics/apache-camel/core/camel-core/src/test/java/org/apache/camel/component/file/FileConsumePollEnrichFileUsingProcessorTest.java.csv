commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/enrich").     deleteDirectory("target/data/enrichdata").     super.setUp(). }
false;public;0;17;;@Test public void testPollEnrich() throws Exception {     getMockEndpoint("mock:start").expectedBodiesReceived("Start").     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Big file").     mock.expectedFileExists("target/data/enrich/.done/AAA.fin").     mock.expectedFileExists("target/data/enrichdata/.done/AAA.dat").     mock.expectedFileExists("target/data/enrichdata/BBB.dat").     template.sendBodyAndHeader("file://target/data/enrichdata", "Big file", Exchange.FILE_NAME, "AAA.dat").     template.sendBodyAndHeader("file://target/data/enrichdata", "Other Big file", Exchange.FILE_NAME, "BBB.dat").     template.sendBodyAndHeader("file://target/data/enrich", "Start", Exchange.FILE_NAME, "AAA.fin").     assertMockEndpointsSatisfied(). }
false;public;1;23;;public void process(Exchange exchange) throws Exception {     String name = exchange.getIn().getHeader(Exchange.FILE_NAME_ONLY, String.class).     name = FileUtil.stripExt(name) + ".dat".     // use a consumer template to get the data file     Exchange data = null.     ConsumerTemplate con = exchange.getContext().createConsumerTemplate().     try {         // try to get the data file         data = con.receive("file://target/data/enrichdata?initialDelay=0&delay=10&move=.done&fileName=" + name, 5000).     } finally {         // stop the consumer as it does not need to poll for files anymore         con.stop().     }     // if we found the data file then process it by sending it to the direct:data endpoint     if (data != null) {         template.send("direct:data", data).     } else {         // otherwise do a rollback         throw new CamelExchangeException("Cannot find the data file " + name, exchange).     } }
false;public;0;32;;@Override public void configure() throws Exception {     from("file://target/data/enrich?initialDelay=0&delay=10&move=.done").process(new Processor() {          public void process(Exchange exchange) throws Exception {             String name = exchange.getIn().getHeader(Exchange.FILE_NAME_ONLY, String.class).             name = FileUtil.stripExt(name) + ".dat".             // use a consumer template to get the data file             Exchange data = null.             ConsumerTemplate con = exchange.getContext().createConsumerTemplate().             try {                 // try to get the data file                 data = con.receive("file://target/data/enrichdata?initialDelay=0&delay=10&move=.done&fileName=" + name, 5000).             } finally {                 // stop the consumer as it does not need to poll for files anymore                 con.stop().             }             // if we found the data file then process it by sending it to the direct:data endpoint             if (data != null) {                 template.send("direct:data", data).             } else {                 // otherwise do a rollback                 throw new CamelExchangeException("Cannot find the data file " + name, exchange).             }         }     }).to("mock:start").     from("direct:data").to("mock:result"). }
false;protected;0;37;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/enrich?initialDelay=0&delay=10&move=.done").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     String name = exchange.getIn().getHeader(Exchange.FILE_NAME_ONLY, String.class).                     name = FileUtil.stripExt(name) + ".dat".                     // use a consumer template to get the data file                     Exchange data = null.                     ConsumerTemplate con = exchange.getContext().createConsumerTemplate().                     try {                         // try to get the data file                         data = con.receive("file://target/data/enrichdata?initialDelay=0&delay=10&move=.done&fileName=" + name, 5000).                     } finally {                         // stop the consumer as it does not need to poll for files anymore                         con.stop().                     }                     // if we found the data file then process it by sending it to the direct:data endpoint                     if (data != null) {                         template.send("direct:data", data).                     } else {                         // otherwise do a rollback                         throw new CamelExchangeException("Cannot find the data file " + name, exchange).                     }                 }             }).to("mock:start").             from("direct:data").to("mock:result").         }     }. }
