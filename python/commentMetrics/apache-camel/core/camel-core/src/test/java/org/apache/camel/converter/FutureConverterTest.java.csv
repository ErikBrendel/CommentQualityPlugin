commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testConvertFuture() {     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     String out = context.getTypeConverter().convertTo(String.class, future).     assertEquals("Bye World", out). }
false;public;0;7;;@Test public void testConvertMandatoryFuture() throws Exception {     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     String out = context.getTypeConverter().mandatoryConvertTo(String.class, future).     assertEquals("Bye World", out). }
false;public;0;8;;@Test public void testConvertMandatoryFutureWithExchange() throws Exception {     Exchange exchange = new DefaultExchange(context).     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     String out = context.getTypeConverter().mandatoryConvertTo(String.class, exchange, future).     assertEquals("Bye World", out). }
false;public;0;12;;@Test public void testConvertMandatoryFutureWithExchangeFailed() throws Exception {     Exchange exchange = new DefaultExchange(context).     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     try {         context.getTypeConverter().mandatoryConvertTo(Timestamp.class, exchange, future).         fail("Should have thrown an exception").     } catch (NoTypeConversionAvailableException e) {     // expected     } }
false;public;0;8;;@Test public void testConvertFutureWithExchangeFailed() throws Exception {     Exchange exchange = new DefaultExchange(context).     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     Timestamp out = context.getTypeConverter().convertTo(Timestamp.class, exchange, future).     assertNull(out). }
false;public;0;9;;@Test public void testConvertFutureCancelled() {     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     future.cancel(true).     Object out = context.getTypeConverter().convertTo(String.class, future).     // should be null since its cancelled     assertNull(out). }
false;public;0;15;;@Test public void testConvertFutureCancelledThenOkay() {     Future<?> future = template.asyncRequestBody("direct:foo", "Hello World").     future.cancel(true).     Object out = context.getTypeConverter().convertTo(String.class, future).     // should be null since its cancelled     assertNull(out).     future = template.asyncRequestBody("direct:foo", "Hello World").     out = context.getTypeConverter().convertTo(String.class, future).     // not cancelled so we get the result this time     assertEquals("Bye World", out). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").delay(10).transform(constant("Bye World")). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").delay(10).transform(constant("Bye World")).         }     }. }
