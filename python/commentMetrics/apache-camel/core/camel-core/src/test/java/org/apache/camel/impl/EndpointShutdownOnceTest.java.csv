commented;modifiers;parameterAmount;loc;comment;code
false;public;0;16;;@Test public void testEndpointShutdown() throws Exception {     CamelContext context = new DefaultCamelContext().     context.addComponent("my", new MyComponent()).     context.start().     MyEndpoint my = context.getEndpoint("my:foo", MyEndpoint.class).     assertTrue("Should be started", my.getStatus().isStarted()).     context.stop().     assertFalse("Should not be started", my.getStatus().isStarted()).     assertTrue("Should be stopped", my.getStatus().isStopped()).     assertEquals("Should only shutdown once", 1, my.getInvoked()). }
false;protected;3;3;;protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {     return new MyEndpoint(uri, this). }
false;public;0;3;;public int getInvoked() {     return invoked. }
false;public;0;3;;public Producer createProducer() throws Exception {     return null. }
false;public;1;3;;public Consumer createConsumer(Processor processor) throws Exception {     return null. }
false;public;0;3;;public boolean isSingleton() {     return true. }
false;protected;0;5;;@Override protected void doShutdown() throws Exception {     super.doShutdown().     invoked++. }
