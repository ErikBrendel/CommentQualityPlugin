commented;modifiers;parameterAmount;loc;comment;code
false;public;0;23;;@Test public void testMain() throws Exception {     // lets make a simple route     Main main = new Main().     main.addRouteBuilder(new MyRouteBuilder()).     main.enableTrace().     main.bind("foo", 31).     main.start().     CamelContext camelContext = main.getCamelContext().     assertNotNull(camelContext).     assertEquals("Could not find the registry bound object", 31, camelContext.getRegistry().lookupByName("foo")).     MockEndpoint endpoint = camelContext.getEndpoint("mock:results", MockEndpoint.class).     endpoint.expectedMinimumMessageCount(1).     main.getCamelTemplate().sendBody("direct:start", "<message>1</message>").     endpoint.assertIsSatisfied().     main.stop(). }
false;public;0;23;;@Test public void testDisableHangupSupport() throws Exception {     // lets make a simple route     Main main = new Main().     main.addRouteBuilder(new MyRouteBuilder()).     main.disableHangupSupport().     main.enableTrace().     main.bind("foo", 31).     main.start().     CamelContext camelContext = main.getCamelContext().     assertEquals("Could not find the registry bound object", 31, camelContext.getRegistry().lookupByName("foo")).     MockEndpoint endpoint = camelContext.getEndpoint("mock:results", MockEndpoint.class).     endpoint.expectedMinimumMessageCount(1).     main.getCamelTemplate().sendBody("direct:start", "<message>1</message>").     endpoint.assertIsSatisfied().     main.stop(). }
false;public;0;17;;@Test public void testLoadingRouteFromCommand() throws Exception {     Main main = new Main().     // let the main load the MyRouteBuilder     main.parseArguments(new String[] { "-r", "org.apache.camel.main.MainTest$MyRouteBuilder" }).     main.start().     CamelContext camelContext = main.getCamelContext().     MockEndpoint endpoint = camelContext.getEndpoint("mock:results", MockEndpoint.class).     endpoint.expectedMinimumMessageCount(1).     main.getCamelTemplate().sendBody("direct:start", "<message>1</message>").     endpoint.assertIsSatisfied().     main.stop(). }
false;public;0;13;;@Test public void testOptionalProperties() throws Exception {     // lets make a simple route     Main main = new Main().     main.addRouteBuilder(new MyRouteBuilder()).     main.start().     CamelContext camelContext = main.getCamelContext().     // should load application.properties from classpath     assertEquals("World", camelContext.resolvePropertyPlaceholders("{{hello}}")).     main.stop(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:start").to("mock:results"). }
