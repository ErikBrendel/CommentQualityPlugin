commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/noop").     super.setUp().     template.sendBodyAndHeader("file://target/data/noop", "Hello World", Exchange.FILE_NAME, "hello.txt"). }
false;public;0;8;;@Test public void testNoop() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     // should be able to read the file multiple times as idempotent is false     mock.expectedMinimumMessageCount(2).     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file://target/data/noop?initialDelay=0&delay=10&noop=true&idempotent=false").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/noop?initialDelay=0&delay=10&noop=true&idempotent=false").convertBodyTo(String.class).to("mock:result").         }     }. }
