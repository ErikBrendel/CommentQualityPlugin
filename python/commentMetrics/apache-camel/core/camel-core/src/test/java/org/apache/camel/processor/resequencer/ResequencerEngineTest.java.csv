commented;modifiers;parameterAmount;loc;comment;code
false;public;0;3;;@Before public void setUp() throws Exception { }
false;public;0;9;;@After public void tearDown() throws Exception {     if (runner != null) {         runner.cancel().     }     if (resequencer != null) {         resequencer.stop().     } }
false;public;0;8;;@Test public void testTimeout1() throws Exception {     initResequencer(500, 10).     resequencer.insert(4).     assertNull(buffer.poll(250)).     assertEquals((Integer) 4, buffer.take()).     assertEquals((Integer) 4, resequencer.getLastDelivered()). }
false;public;0;9;;@Test public void testTimeout2() throws Exception {     initResequencer(500, 10).     resequencer.setLastDelivered(2).     resequencer.insert(4).     assertNull(buffer.poll(250)).     assertEquals((Integer) 4, buffer.take()).     assertEquals((Integer) 4, resequencer.getLastDelivered()). }
false;public;0;8;;@Test public void testTimeout3() throws Exception {     initResequencer(500, 10).     resequencer.setLastDelivered(3).     resequencer.insert(4).     assertEquals((Integer) 4, buffer.poll(250)).     assertEquals((Integer) 4, resequencer.getLastDelivered()). }
false;public;0;10;;@Test public void testTimeout4() throws Exception {     initResequencer(500, 10).     resequencer.setLastDelivered(2).     resequencer.insert(4).     resequencer.insert(3).     assertEquals((Integer) 3, buffer.poll(250)).     assertEquals((Integer) 4, buffer.poll(250)).     assertEquals((Integer) 4, resequencer.getLastDelivered()). }
false;public;0;34;;@Test public void testRandom() throws Exception {     if (IGNORE_LOAD_TESTS) {         return.     }     int input = 1000.     initResequencer(1000, 1000).     List<Integer> list = new LinkedList<>().     for (int i = 0. i < input. i++) {         list.add(i).     }     Random random = new Random(System.currentTimeMillis()).     StringBuilder sb = new StringBuilder(4000).     sb.append("Input sequence: ").     long millis = System.currentTimeMillis().     for (int i = input. i > 0. i--) {         int r = random.nextInt(i).         int next = list.remove(r).         sb.append(next).append(" ").         resequencer.insert(next).     }     log.info(sb.toString()).     // clear     sb.delete(0, sb.length()).     sb.append("Output sequence: ").     for (int i = 0. i < input. i++) {         sb.append(buffer.take()).append(" ").     }     millis = System.currentTimeMillis() - millis.     log.info(sb.toString()).     log.info("Duration = " + millis + " ms"). }
false;public;0;7;;@Test public void testReverse1() throws Exception {     if (IGNORE_LOAD_TESTS) {         return.     }     testReverse(10). }
false;public;0;7;;@Test public void testReverse2() throws Exception {     if (IGNORE_LOAD_TESTS) {         return.     }     testReverse(100). }
false;private;1;12;;private void testReverse(int capacity) throws Exception {     initResequencer(1, capacity).     for (int i = 99. i >= 0. i--) {         resequencer.insert(i).     }     StringBuilder sb = new StringBuilder(2500).     sb.append("Output sequence: ").     for (int i = 0. i < 100. i++) {         sb.append(buffer.take()).append(" ").     }     log.info(sb.toString()). }
false;private;2;14;;private void initResequencer(long timeout, int capacity) {     ResequencerEngine<Integer> engine.     buffer = new SequenceBuffer<>().     engine = new ResequencerEngine<>(new IntegerComparator()).     engine.setSequenceSender(buffer).     engine.setTimeout(timeout).     engine.start().     resequencer = new ResequencerEngineSync<>(engine).     runner = new ResequencerRunner<>(resequencer, 50).     runner.start().     // wait for runner to run     await().atMost(1, TimeUnit.SECONDS).until(runner::isRunning). }
