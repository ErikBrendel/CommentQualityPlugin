commented;modifiers;parameterAmount;loc;comment;code
false;public;2;12;;@Override public void onExchangeDone(Route route, Exchange exchange) {     String body = exchange.getIn().getBody(String.class).     if ("stop".equals(body)) {         try {             stopped.set(true).             stopConsumer(route.getConsumer()).         } catch (Exception e) {             handleException(e).         }     } }
false;public;0;3;;public boolean isStopped() {     return stopped.get(). }
false;public;0;19;;@Test public void testCustomPolicy() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBody("direct:foo", "Hello World").     assertMockEndpointsSatisfied().     mock.reset().     mock.expectedBodiesReceived("stop").     // we send stop command so we should only get 1 message     template.sendBody("direct:foo", "stop").     assertMockEndpointsSatisfied().     assertTrue("Should be stopped", policy.isStopped()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:foo").routeId("foo").routePolicy(policy).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").routeId("foo").routePolicy(policy).to("mock:result").         }     }. }
