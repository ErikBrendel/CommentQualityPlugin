commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/file").     super.setUp(). }
false;public;0;14;;@Test public void testMove() throws Exception {     final String body = "Hello Camel".     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     mock.expectedFileExists("target/data/file/done/hello.txt", body).     template.sendBodyAndHeader("file://target/data/file", body, Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     assertTrue("File not copied", new File("target/data/file/done/hello.txt").exists()).     assertFalse("File not deleted", new File("target/data/file/hello.txt").exists()). }
false;public;0;4;;@Override public void configure() throws Exception {     from("file://target/data/file?renameUsingCopy=true&move=done").convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/file?renameUsingCopy=true&move=done").convertBodyTo(String.class).to("mock:result").         }     }. }
