commented;modifiers;parameterAmount;loc;comment;code
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override public void configure() throws Exception {     onException(Exception.class).handled(true).to("mock:error").     from("direct:startA").routeId("RouteA").to("mock:resultA").     from("direct:startB").routeId("RouteB").to("mock:resultB"). }
false;protected;0;12;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             onException(Exception.class).handled(true).to("mock:error").             from("direct:startA").routeId("RouteA").to("mock:resultA").             from("direct:startB").routeId("RouteB").to("mock:resultB").         }     }. }
false;public;1;3;;@Override public void process(Exchange exchange) throws Exception { }
false;public;0;8;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:resultA").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {         }     }). }
false;public;0;3;;@Override public void configure() throws Exception { }
false;public;0;27;;@Test public void testSimpleMultipleAdvice() throws Exception {     context.addRoutes(createRouteBuilder()).     RouteReifier.adviceWith(context.getRouteDefinition("RouteA"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:resultA").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                 }             }).         }     }).     RouteReifier.adviceWith(context.getRouteDefinition("RouteB"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {         }     }).     context.start().     getMockEndpoint("mock:resultA").expectedMessageCount(1).     template.sendBody("direct:startA", "a trigger").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new Exception("my exception"). }
false;public;0;9;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:resultA").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new Exception("my exception").         }     }). }
false;public;0;22;;@Test public void testMultipleAdviceWithExceptionThrown() throws Exception {     context.addRoutes(createRouteBuilder()).     RouteReifier.adviceWith(context.getRouteDefinition("RouteA"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:resultA").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new Exception("my exception").                 }             }).         }     }).     context.start().     getMockEndpoint("mock:resultA").expectedMessageCount(0).     template.sendBody("direct:startA", "a trigger").     assertMockEndpointsSatisfied(). }
false;public;1;4;;@Override public void process(Exchange exchange) throws Exception {     throw new Exception("my exception"). }
false;public;0;9;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:resultA").process(new Processor() {          @Override         public void process(Exchange exchange) throws Exception {             throw new Exception("my exception").         }     }). }
false;public;0;3;;@Override public void configure() throws Exception { }
false;public;0;28;;@Test public void testMultipleAdvice() throws Exception {     context.addRoutes(createRouteBuilder()).     RouteReifier.adviceWith(context.getRouteDefinition("RouteA"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:resultA").process(new Processor() {                  @Override                 public void process(Exchange exchange) throws Exception {                     throw new Exception("my exception").                 }             }).         }     }).     RouteReifier.adviceWith(context.getRouteDefinition("RouteB"), context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {         }     }).     context.start().     getMockEndpoint("mock:resultA").expectedMessageCount(0).     template.sendBody("direct:startA", "a trigger").     assertMockEndpointsSatisfied(). }
