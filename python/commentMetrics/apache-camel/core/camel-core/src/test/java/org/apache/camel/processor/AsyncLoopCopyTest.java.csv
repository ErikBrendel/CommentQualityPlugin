commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testAsyncLoopCopy() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:loopIterationStart").expectedBodiesReceived("Hello Camel", "Hello Camel").     getMockEndpoint("mock:loopIterationEnd").expectedBodiesReceived("Bye Camel", "Bye Camel").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye Camel").     String reply = template.requestBodyAndHeader("direct:start", "Hello Camel", "NumberIterations", 2, String.class).     assertEquals("Bye Camel", reply).     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;25;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to(// Should receive Hello Camel     "mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).loop(header("NumberIterations")).copy().to(// Should receive 2x Hello Camel     "mock:loopIterationStart").to(// Will transform the body to Bye Camel     "async:bye:camel").to(// Should receive 2x Bye Camel     "mock:loopIterationEnd").end().process(new Processor() {          public void process(Exchange exchange) throws Exception {             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to(// Should receive 1x Hello Camel (original message)     "mock:result"). }
false;protected;0;30;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to(// Should receive Hello Camel             "mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).loop(header("NumberIterations")).copy().to(// Should receive 2x Hello Camel             "mock:loopIterationStart").to(// Will transform the body to Bye Camel             "async:bye:camel").to(// Should receive 2x Bye Camel             "mock:loopIterationEnd").end().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to(// Should receive 1x Hello Camel (original message)             "mock:result").         }     }. }
