commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void notify(CamelEvent event) throws Exception {     if (event instanceof CamelEvent.ExchangeSendingEvent || event instanceof CamelEvent.ExchangeSentEvent) {         events.add(event).     } }
false;protected;0;12;;@Override protected CamelContext createCamelContext() throws Exception {     DefaultCamelContext context = new DefaultCamelContext(createRegistry()).     context.getManagementStrategy().addEventNotifier(new EventNotifierSupport() {          public void notify(CamelEvent event) throws Exception {             if (event instanceof CamelEvent.ExchangeSendingEvent || event instanceof CamelEvent.ExchangeSentEvent) {                 events.add(event).             }         }     }).     return context. }
false;public;0;24;;@Test public void testPostProcessor() throws Exception {     events.clear().     int before = events.size().     assertEquals(0, before).     MySender sender = new MySender().     postProcessor.postProcessBeforeInitialization(sender, "foo").     postProcessor.postProcessAfterInitialization(sender, "foo").     getMockEndpoint("mock:result").expectedMessageCount(1).     sender.hello.sayHello("Hello World").     assertMockEndpointsSatisfied().     int after = events.size().     // should be 2 events     assertEquals(2, after).     assertTrue(events.get(0) instanceof CamelEvent.ExchangeSendingEvent).     assertTrue(events.get(1) instanceof CamelEvent.ExchangeSentEvent). }
false;public;0;6;;@Override @Before public void setUp() throws Exception {     super.setUp().     postProcessor = new DefaultCamelBeanPostProcessor(context). }
false;;1;1;;void sayHello(String hello).
