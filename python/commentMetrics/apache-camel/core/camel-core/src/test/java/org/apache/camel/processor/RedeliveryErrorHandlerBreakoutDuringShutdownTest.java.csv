commented;modifiers;parameterAmount;loc;comment;code
false;public;0;20;;@Test public void testRedelivery() throws Exception {     getMockEndpoint("mock:before").expectedMessageCount(1).     getMockEndpoint("mock:after").expectedMessageCount(0).     template.sendBody("seda:start", "Hello World").     assertMockEndpointsSatisfied().     // use a stop watch to time how long it takes to force the shutdown     StopWatch watch = new StopWatch().     // force quicker shutdown     context.getShutdownStrategy().setTimeout(1).     context.stop().     // should take less than 5 seconds     assertTrue("Should take less than 5 seconds, was {}", watch.taken() < 5000). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     throw new IllegalArgumentException("Forced"). }
false;public;0;14;;@Override public void configure() throws Exception {     // just keep on redelivering     errorHandler(defaultErrorHandler().maximumRedeliveries(-1).redeliveryDelay(1000)).     from("seda:start").to("mock:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             throw new IllegalArgumentException("Forced").         }     }).to("mock:after"). }
false;protected;0;19;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // just keep on redelivering             errorHandler(defaultErrorHandler().maximumRedeliveries(-1).redeliveryDelay(1000)).             from("seda:start").to("mock:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     throw new IllegalArgumentException("Forced").                 }             }).to("mock:after").         }     }. }
