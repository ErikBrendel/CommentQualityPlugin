commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Test public void testSimpleParserEol() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("Hello", true, null).     Expression exp = parser.parseExpression().     assertEquals("Hello", exp.evaluate(exchange, String.class)). }
false;public;0;7;;@Test public void testSimpleSingleQuote() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("'Hello'", true, null).     Expression exp = parser.parseExpression().     assertEquals("'Hello'", exp.evaluate(exchange, String.class)). }
false;public;0;7;;@Test public void testSimpleStringList() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("\"Hello\" \"World\"", true, null).     Expression exp = parser.parseExpression().     assertEquals("\"Hello\" \"World\"", exp.evaluate(exchange, String.class)). }
false;public;0;8;;@Test public void testSimpleSingleQuoteWithFunction() throws Exception {     exchange.getIn().setBody("World").     SimpleExpressionParser parser = new SimpleExpressionParser("'Hello ${body} how are you?'", true, null).     Expression exp = parser.parseExpression().     assertEquals("'Hello World how are you?'", exp.evaluate(exchange, String.class)). }
false;public;0;8;;@Test public void testSimpleSingleQuoteWithFunctionBodyAs() throws Exception {     exchange.getIn().setBody("World").     SimpleExpressionParser parser = new SimpleExpressionParser("'Hello ${bodyAs(String)} how are you?'", true, null).     Expression exp = parser.parseExpression().     assertEquals("'Hello World how are you?'", exp.evaluate(exchange, String.class)). }
false;public;0;7;;@Test public void testSimpleSingleQuoteEol() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("'Hello' World", true, null).     Expression exp = parser.parseExpression().     assertEquals("'Hello' World", exp.evaluate(exchange, String.class)). }
false;public;0;8;;@Test public void testSimpleFunction() throws Exception {     exchange.getIn().setBody("World").     SimpleExpressionParser parser = new SimpleExpressionParser("${body}", true, null).     Expression exp = parser.parseExpression().     assertEquals("World", exp.evaluate(exchange, String.class)). }
false;public;0;7;;@Test public void testSimpleSingleQuoteDollar() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("Pay 200$ today", true, null).     Expression exp = parser.parseExpression().     assertEquals("Pay 200$ today", exp.evaluate(exchange, String.class)). }
false;public;0;7;;@Test public void testSimpleSingleQuoteDollarEnd() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("Pay 200$", true, null).     Expression exp = parser.parseExpression().     assertEquals("Pay 200$", exp.evaluate(exchange, String.class)). }
false;public;0;8;;@Test public void testSimpleUnaryInc() throws Exception {     exchange.getIn().setBody("122").     SimpleExpressionParser parser = new SimpleExpressionParser("${body}++", true, null).     Expression exp = parser.parseExpression().     assertEquals("123", exp.evaluate(exchange, String.class)). }
false;public;0;8;;@Test public void testSimpleUnaryDec() throws Exception {     exchange.getIn().setBody("122").     SimpleExpressionParser parser = new SimpleExpressionParser("${body}--", true, null).     Expression exp = parser.parseExpression().     assertEquals("121", exp.evaluate(exchange, String.class)). }
false;public;0;8;;@Test public void testSimpleUnaryIncInt() throws Exception {     exchange.getIn().setBody(122).     SimpleExpressionParser parser = new SimpleExpressionParser("${body}++", true, null).     Expression exp = parser.parseExpression().     assertEquals(Integer.valueOf(123), exp.evaluate(exchange, Integer.class)). }
false;public;0;8;;@Test public void testSimpleUnaryDecInt() throws Exception {     exchange.getIn().setBody(122).     SimpleExpressionParser parser = new SimpleExpressionParser("${body}--", true, null).     Expression exp = parser.parseExpression().     assertEquals(Integer.valueOf(121), exp.evaluate(exchange, Integer.class)). }
false;public;0;11;;@Test public void testHeaderNestedFunction() throws Exception {     exchange.getIn().setBody("foo").     exchange.getIn().setHeader("foo", "abc").     SimpleExpressionParser parser = new SimpleExpressionParser("${header.${body}}", true, null).     Expression exp = parser.parseExpression().     Object obj = exp.evaluate(exchange, Object.class).     assertNotNull(obj).     assertEquals("abc", obj). }
false;public;0;12;;@Test public void testBodyAsNestedFunction() throws Exception {     exchange.getIn().setBody("123").     exchange.getIn().setHeader("foo", "Integer").     SimpleExpressionParser parser = new SimpleExpressionParser("${bodyAs(${header.foo})}", true, null).     Expression exp = parser.parseExpression().     Object obj = exp.evaluate(exchange, Object.class).     assertNotNull(obj).     Integer num = assertIsInstanceOf(Integer.class, obj).     assertEquals(123, num.intValue()). }
false;public;0;14;;@Test public void testThreeNestedFunctions() throws Exception {     exchange.getIn().setBody("123").     exchange.getIn().setHeader("foo", "Int").     exchange.getIn().setHeader("bar", "e").     exchange.getIn().setHeader("baz", "ger").     SimpleExpressionParser parser = new SimpleExpressionParser("${bodyAs(${header.foo}${header.bar}${header.baz})}", true, null).     Expression exp = parser.parseExpression().     Object obj = exp.evaluate(exchange, Object.class).     assertNotNull(obj).     Integer num = assertIsInstanceOf(Integer.class, obj).     assertEquals(123, num.intValue()). }
false;public;0;13;;@Test public void testNestedNestedFunctions() throws Exception {     exchange.getIn().setBody("123").     exchange.getIn().setHeader("foo", "Integer").     exchange.getIn().setHeader("bar", "foo").     SimpleExpressionParser parser = new SimpleExpressionParser("${bodyAs(${header.${header.bar}})}", true, null).     Expression exp = parser.parseExpression().     Object obj = exp.evaluate(exchange, Object.class).     assertNotNull(obj).     Integer num = assertIsInstanceOf(Integer.class, obj).     assertEquals(123, num.intValue()). }
false;public;0;16;;@Test public void testSimpleMap() throws Exception {     Map<String, String> map = new HashMap<>().     map.put("foo", "123").     map.put("foo bar", "456").     exchange.getIn().setBody(map).     SimpleExpressionParser parser = new SimpleExpressionParser("${body[foo]}", true, null).     Expression exp = parser.parseExpression().     assertEquals("123", exp.evaluate(exchange, Object.class)).     parser = new SimpleExpressionParser("${body['foo bar']}", true, null).     exp = parser.parseExpression().     assertEquals("456", exp.evaluate(exchange, Object.class)). }
false;public;0;10;;@Test public void testUnaryLenient() throws Exception {     exchange.getIn().setHeader("JMSMessageID", "JMSMessageID-123").     exchange.getIn().setBody("THE MSG ID ${header.JMSMessageID} isA --").     SimpleExpressionParser parser = new SimpleExpressionParser("THE MSG ID ${header.JMSMessageID} isA --", true, null).     Expression exp = parser.parseExpression().     assertEquals("THE MSG ID JMSMessageID-123 isA --", exp.evaluate(exchange, String.class)). }
false;public;0;10;;@Test public void testUnaryLenient2() throws Exception {     exchange.getIn().setHeader("JMSMessageID", "JMSMessageID-123").     exchange.getIn().setBody("------------THE MSG ID ${header.JMSMessageID}------------").     SimpleExpressionParser parser = new SimpleExpressionParser("------------THE MSG ID ${header.JMSMessageID}------------", true, null).     Expression exp = parser.parseExpression().     assertEquals("------------THE MSG ID JMSMessageID-123------------", exp.evaluate(exchange, String.class)). }
false;public;0;10;;@Test public void testUnaryLenient3() throws Exception {     exchange.getIn().setHeader("JMSMessageID", "JMSMessageID-123").     exchange.getIn().setBody("------------ THE MSG ID ${header.JMSMessageID} ------------").     SimpleExpressionParser parser = new SimpleExpressionParser("------------ THE MSG ID ${header.JMSMessageID} ------------", true, null).     Expression exp = parser.parseExpression().     assertEquals("------------ THE MSG ID JMSMessageID-123 ------------", exp.evaluate(exchange, String.class)). }
