commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/files").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/files?initialDelay=0&delay=10&delete=true").removeHeaders("*").to("mock:result"). }
false;public;0;27;;@Test public void testConsumeAndDeleteRemoveAllHeaders() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/files?initialDelay=0&delay=10&delete=true").removeHeaders("*").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file://target/data/files", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     assertFalse("Headers should have been removed", mock.getExchanges().get(0).getIn().hasHeaders()).     // the original file should have been deleted, as the file consumer should be resilient against     // end users deleting headers     assertFalse("File should been deleted", new File("target/data/files/hello.txt").exists()). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/files?initialDelay=0&delay=10&delete=true").setHeader(Exchange.FILE_NAME, constant("bye.txt")).to("mock:result"). }
false;public;0;26;;@Test public void testConsumeAndDeleteChangeFileHeader() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/files?initialDelay=0&delay=10&delete=true").setHeader(Exchange.FILE_NAME, constant("bye.txt")).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived(Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader("file://target/data/files", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // the original file should have been deleted, as the file consumer should be resilient against     // end users changing headers     assertFalse("File should been deleted", new File("target/data/files/hello.txt").exists()). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/files?initialDelay=0&delay=10").removeHeaders("*").to("mock:result"). }
false;public;0;27;;@Test public void testConsumeAndMoveRemoveAllHeaders() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/files?initialDelay=0&delay=10").removeHeaders("*").to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file://target/data/files", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     assertFalse("Headers should have been removed", mock.getExchanges().get(0).getIn().hasHeaders()).     // the original file should have been moved, as the file consumer should be resilient against     // end users deleting headers     assertTrue("File should been moved", new File("target/data/files/.camel/hello.txt").exists()). }
false;public;0;7;;@Override public void configure() throws Exception {     from("file://target/data/files?initialDelay=0&delay=10").setHeader(Exchange.FILE_NAME, constant("bye.txt")).to("mock:result"). }
false;public;0;26;;@Test public void testConsumeAndMoveChangeFileHeader() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/files?initialDelay=0&delay=10").setHeader(Exchange.FILE_NAME, constant("bye.txt")).to("mock:result").         }     }).     context.start().     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedHeaderReceived(Exchange.FILE_NAME, "bye.txt").     template.sendBodyAndHeader("file://target/data/files", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // the original file should have been moved, as the file consumer should be resilient against     // end users changing headers     assertTrue("File should been moved", new File("target/data/files/.camel/hello.txt").exists()). }
