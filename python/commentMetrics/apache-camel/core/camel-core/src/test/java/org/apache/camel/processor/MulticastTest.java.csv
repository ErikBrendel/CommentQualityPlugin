commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void process(Exchange exchange) {     Message in = exchange.getIn().     in.setBody("input").     in.setHeader("foo", "bar"). }
false;public;0;16;;@Test public void testSendingAMessageUsingMulticastReceivesItsOwnExchange() throws Exception {     x.expectedBodiesReceived("input+output").     y.expectedBodiesReceived("input+output").     z.expectedBodiesReceived("input+output").     template.send("direct:a", new Processor() {          public void process(Exchange exchange) {             Message in = exchange.getIn().             in.setBody("input").             in.setHeader("foo", "bar").         }     }).     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override @Before public void setUp() throws Exception {     super.setUp().     x = getMockEndpoint("mock:x").     y = getMockEndpoint("mock:y").     z = getMockEndpoint("mock:z"). }
false;public;0;9;;public void configure() {     // START SNIPPET: example     from("direct:a").multicast().to("direct:x", "direct:y", "direct:z").     // END SNIPPET: example     from("direct:x").process(processor).to("mock:x").     from("direct:y").process(processor).to("mock:y").     from("direct:z").process(processor).to("mock:z"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() {     final Processor processor = new AppendingProcessor().     return new RouteBuilder() {          public void configure() {             // START SNIPPET: example             from("direct:a").multicast().to("direct:x", "direct:y", "direct:z").             // END SNIPPET: example             from("direct:x").process(processor).to("mock:x").             from("direct:y").process(processor).to("mock:y").             from("direct:z").process(processor).to("mock:z").         }     }. }
