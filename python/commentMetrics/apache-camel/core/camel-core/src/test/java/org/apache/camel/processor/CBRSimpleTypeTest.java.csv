commented;modifiers;parameterAmount;loc;comment;code
false;public;0;12;;@Test public void testCBR() throws Exception {     getMockEndpoint("mock:gold").expectedBodiesReceived("James").     getMockEndpoint("mock:silver").expectedBodiesReceived("Claus").     getMockEndpoint("mock:other").expectedBodiesReceived("Willem").     template.sendBodyAndHeader("direct:start", "Claus", "customer", Customer.SILVER).     template.sendBodyAndHeader("direct:start", "Willem", "customer", Customer.BRONZE).     template.sendBodyAndHeader("direct:start", "James", "customer", Customer.GOLD).     assertMockEndpointsSatisfied(). }
false;public;0;13;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("direct:start").choice().when().simple("${header.customer} == ${type:org.apache.camel.processor.Customer.GOLD}").to("mock:gold").when().simple("${header.customer} == ${type:org.apache.camel.processor.Customer.SILVER}").to("mock:silver").otherwise().to("mock:other"). // END SNIPPET: e1 }
false;protected;0;18;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("direct:start").choice().when().simple("${header.customer} == ${type:org.apache.camel.processor.Customer.GOLD}").to("mock:gold").when().simple("${header.customer} == ${type:org.apache.camel.processor.Customer.SILVER}").to("mock:silver").otherwise().to("mock:other").         // END SNIPPET: e1         }     }. }
