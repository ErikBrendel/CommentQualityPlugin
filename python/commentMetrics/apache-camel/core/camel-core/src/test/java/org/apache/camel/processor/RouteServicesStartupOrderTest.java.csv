commented;modifiers;parameterAmount;loc;comment;code
false;public;0;22;;@Test public void testRouteServiceStartupOrder() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied().     // assert correct order     DefaultCamelContext dcc = (DefaultCamelContext) context.     List<RouteStartupOrder> order = dcc.getRouteStartupOrder().     assertEquals(4, order.size()).     assertEquals("seda://foo", order.get(0).getRoute().getEndpoint().getEndpointUri()).     assertEquals("direct://start", order.get(1).getRoute().getEndpoint().getEndpointUri()).     assertEquals("seda://bar", order.get(2).getRoute().getEndpoint().getEndpointUri()).     assertEquals("direct://bar", order.get(3).getRoute().getEndpoint().getEndpointUri()).     // assert route service was started in order as well     assertEquals("2143", startOrder). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").startupOrder(2).process(service1).to("seda:foo").     from("seda:foo").startupOrder(1).process(service2).to("mock:result").     from("direct:bar").startupOrder(9).process(service3).to("seda:bar").     from("seda:bar").startupOrder(5).process(service4).to("mock:other"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").startupOrder(2).process(service1).to("seda:foo").             from("seda:foo").startupOrder(1).process(service2).to("mock:result").             from("direct:bar").startupOrder(9).process(service3).to("seda:bar").             from("seda:bar").startupOrder(5).process(service4).to("mock:other").         }     }. }
false;protected;0;4;;protected void doStart() throws Exception {     startOrder += name.     started = true. }
false;protected;0;3;;protected void doStop() throws Exception {     started = false. }
false;public;0;3;;public boolean isStarted() {     return started. }
false;public;0;3;;public String getName() {     return name. }
false;public;1;3;;public void setStarted(boolean started) {     this.started = started. }
false;public;1;2;;public void process(Exchange exchange) throws Exception { }
