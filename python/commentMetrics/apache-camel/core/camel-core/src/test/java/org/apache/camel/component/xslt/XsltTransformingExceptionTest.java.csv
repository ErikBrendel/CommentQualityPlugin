commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testXsltException() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:start", BAD_XML_STRING).         fail("Except a camel Execution exception here").     } catch (CamelExecutionException ex) {         assertTrue(ex.getCause() instanceof javax.xml.transform.TransformerException).     }     // we should not get any message from the result endpoint     assertMockEndpointsSatisfied(). }
true;public;0;12;// This test behavior is changed. ;// As the transformer is turned into security processing mode, // This test behavior is changed. @Test public void testXsltWithoutException() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(0).     try {         template.sendBody("direct:start", GOOD_XML_STRING).         fail("Except a camel Execution exception here").     } catch (CamelExecutionException ex) {         assertTrue(ex.getCause() instanceof javax.xml.transform.TransformerException).     }     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").to("xslt:org/apache/camel/component/xslt/transformCallEcho.xsl").to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("xslt:org/apache/camel/component/xslt/transformCallEcho.xsl").to("mock:result").         }     }. }
