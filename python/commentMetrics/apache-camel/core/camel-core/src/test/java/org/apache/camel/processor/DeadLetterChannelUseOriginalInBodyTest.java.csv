commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testUseOriginalnBody() throws Exception {     MockEndpoint dead = getMockEndpoint("mock:a").     dead.expectedBodiesReceived("Hello").     template.sendBody("direct:a", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Test public void testDoNotUseOriginalInBody() throws Exception {     MockEndpoint dead = getMockEndpoint("mock:b").     dead.expectedBodiesReceived("Hello World").     template.sendBody("direct:b", "Hello").     assertMockEndpointsSatisfied(). }
false;public;0;20;;@Override public void configure() throws Exception {     // will use original     ErrorHandlerFactory a = deadLetterChannel("mock:a").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false).useOriginalMessage().     // will NOT use original     ErrorHandlerFactory b = deadLetterChannel("mock:b").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false).     from("direct:a").errorHandler(a).setBody(body().append(" World")).process(new MyThrowProcessor()).     from("direct:b").errorHandler(b).setBody(body().append(" World")).process(new MyThrowProcessor()). }
false;protected;0;25;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // will use original             ErrorHandlerFactory a = deadLetterChannel("mock:a").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false).useOriginalMessage().             // will NOT use original             ErrorHandlerFactory b = deadLetterChannel("mock:b").maximumRedeliveries(2).redeliveryDelay(0).logStackTrace(false).             from("direct:a").errorHandler(a).setBody(body().append(" World")).process(new MyThrowProcessor()).             from("direct:b").errorHandler(b).setBody(body().append(" World")).process(new MyThrowProcessor()).         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     assertEquals("Hello World", exchange.getIn().getBody(String.class)).     throw new IllegalArgumentException("Forced"). }
