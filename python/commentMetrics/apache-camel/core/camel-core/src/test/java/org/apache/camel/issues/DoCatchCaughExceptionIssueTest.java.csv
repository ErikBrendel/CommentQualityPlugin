commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Test public void testSendThatIsCaught() {     String out = template.requestBody("direct:test", "test", String.class).     assertEquals("Forced by me but I fixed it", out). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     Exception error = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).     assertEquals("Forced by me", error.getMessage()).     exchange.getOut().setBody(error.getMessage() + " but I fixed it"). }
false;public;0;17;;@Override public void configure() throws Exception {     errorHandler(noErrorHandler()).     from("direct:test").doTry().throwException(new IllegalArgumentException("Forced by me")).doCatch(Exception.class).process(new Processor() {          public void process(Exchange exchange) throws Exception {             Exception error = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).             assertEquals("Forced by me", error.getMessage()).             exchange.getOut().setBody(error.getMessage() + " but I fixed it").         }     }).end(). }
false;protected;0;22;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             errorHandler(noErrorHandler()).             from("direct:test").doTry().throwException(new IllegalArgumentException("Forced by me")).doCatch(Exception.class).process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     Exception error = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class).                     assertEquals("Forced by me", error.getMessage()).                     exchange.getOut().setBody(error.getMessage() + " but I fixed it").                 }             }).end().         }     }. }
