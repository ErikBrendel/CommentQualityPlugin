commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testAsyncEndpoint() throws Exception {     getMockEndpoint("mock:before").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:ok").expectedBodiesReceived("Hello Camel").     getMockEndpoint("mock:after").expectedBodiesReceived("Bye World").     getMockEndpoint("mock:result").expectedBodiesReceived("Bye World").     String reply = template.requestBody("direct:start", "Hello Camel", String.class).     assertEquals("Bye World", reply).     assertMockEndpointsSatisfied().     assertFalse("Should use different threads", beforeThreadName.equalsIgnoreCase(afterThreadName)). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // because the first is a sync then it will wait and thus use the same thread to continue     afterThreadName = Thread.currentThread().getName(). }
false;public;1;3;;public void process(Exchange exchange) throws Exception {     beforeThreadName = Thread.currentThread().getName(). }
false;public;0;32;;@Override public void configure() throws Exception {     context.addComponent("async", new MyAsyncComponent()).     from("direct:start").to("mock:before").to("log:before").process(new Processor() {          public void process(Exchange exchange) throws Exception {             beforeThreadName = Thread.currentThread().getName().         }     }).loadBalance().failover().to("async:bye:camel?failFirstAttempts=5", "direct:ok").end().process(new Processor() {          public void process(Exchange exchange) throws Exception {             // because the first is a sync then it will wait and thus use the same thread to continue             afterThreadName = Thread.currentThread().getName().         }     }).to("log:after").to("mock:after").to("mock:result").     from("direct:ok").to("log:pok").to("mock:ok").transform(constant("Bye World")). }
false;protected;0;37;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             context.addComponent("async", new MyAsyncComponent()).             from("direct:start").to("mock:before").to("log:before").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     beforeThreadName = Thread.currentThread().getName().                 }             }).loadBalance().failover().to("async:bye:camel?failFirstAttempts=5", "direct:ok").end().process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // because the first is a sync then it will wait and thus use the same thread to continue                     afterThreadName = Thread.currentThread().getName().                 }             }).to("log:after").to("mock:after").to("mock:result").             from("direct:ok").to("log:pok").to("mock:ok").transform(constant("Bye World")).         }     }. }
