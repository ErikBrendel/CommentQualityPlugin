commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;public void configure() {     // split the message with namespaces defined     Namespaces namespaces = new Namespaces("one", "http://camel.apache.org/schema/one").     from("direct:endpoint").split().xpath("//one:other", namespaces).to("mock:result"). }
false;protected;0;9;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             // split the message with namespaces defined             Namespaces namespaces = new Namespaces("one", "http://camel.apache.org/schema/one").             from("direct:endpoint").split().xpath("//one:other", namespaces).to("mock:result").         }     }. }
false;public;0;16;;@Test public void testSenderXmlData() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     result.reset().     result.expectedMessageCount(4).     template.sendBody("direct:endpoint", xmlData).     assertMockEndpointsSatisfied().     for (Exchange exchange : result.getExchanges()) {         String message = exchange.getIn().getBody(String.class).         log.debug("The message is " + message).         assertTrue("The splitted message should start with <other", message.indexOf("<other") == 0).     } }
