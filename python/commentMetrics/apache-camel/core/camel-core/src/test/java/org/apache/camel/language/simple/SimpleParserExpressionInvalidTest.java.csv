commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testSimpleUnbalanceFunction() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("${body is a nice day", true, null).     try {         parser.parseExpression().         fail("Should thrown exception").     } catch (SimpleIllegalSyntaxException e) {         assertEquals(19, e.getIndex()).     } }
false;public;0;10;;@Test public void testSimpleNestedUnbalanceFunction() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("${body${foo}", true, null).     try {         parser.parseExpression().         fail("Should thrown exception").     } catch (SimpleIllegalSyntaxException e) {         assertEquals(11, e.getIndex()).     } }
false;public;0;10;;@Test public void testSimpleUnknownFunction() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("Hello ${foo} how are you?", true, null).     try {         parser.parseExpression().         fail("Should thrown exception").     } catch (SimpleIllegalSyntaxException e) {         assertEquals(6, e.getIndex()).     } }
false;public;0;12;;@Test public void testSimpleNestedUnknownFunction() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("Hello ${bodyAs(${foo})} how are you?", true, null).     try {         // nested functions can only be syntax evaluated when evaluating an exchange at runtime         parser.parseExpression().evaluate(exchange, String.class).         fail("Should thrown exception").     } catch (SimpleIllegalSyntaxException e) {         // its a nested function is it reset the index         assertEquals(0, e.getIndex()).     } }
false;public;0;10;;@Test public void testNoEndFunction() throws Exception {     SimpleExpressionParser parser = new SimpleExpressionParser("Hello ${body", true, null).     try {         parser.parseExpression().         fail("Should thrown exception").     } catch (SimpleIllegalSyntaxException e) {         assertEquals(11, e.getIndex()).     } }
