commented;modifiers;parameterAmount;loc;comment;code
false;public;0;9;;@Test public void testDefaultTypeConverterRegistry() {     DefaultCamelContext ctx = new DefaultCamelContext().     assertNotNull(ctx.getTypeConverterRegistry()).     // file to input stream is a default converter in Camel     TypeConverter tc = ctx.getTypeConverterRegistry().lookup(InputStream.class, File.class).     assertNotNull(tc). }
false;public;0;16;;@Test public void testAddTypeConverter() {     DefaultCamelContext context = new DefaultCamelContext().     // START SNIPPET: e1     // add our own type converter manually that converts from String -> MyOrder using MyOrderTypeConverter     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()).     // END SNIPPET: e1     // START SNIPPET: e3     MyOrder order = context.getTypeConverter().convertTo(MyOrder.class, "123").     // END SNIPPET: e3     assertNotNull(order).     assertEquals(123, order.getId()). }
false;public;0;7;;@Test public void testAddDuplicateTypeConverter() {     DefaultCamelContext context = new DefaultCamelContext().     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()).     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()). }
false;public;0;9;;@Test public void testAddDuplicateTypeConverterIgnore() {     DefaultCamelContext context = new DefaultCamelContext().     context.getTypeConverterRegistry().setTypeConverterExists(TypeConverterExists.Ignore).     context.getTypeConverterRegistry().setTypeConverterExistsLoggingLevel(LoggingLevel.INFO).     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()).     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()). }
false;public;0;13;;@Test public void testAddDuplicateTypeConverterFail() {     DefaultCamelContext context = new DefaultCamelContext().     context.getTypeConverterRegistry().setTypeConverterExists(TypeConverterExists.Fail).     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()).     try {         context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()).         fail("Should have thrown exception").     } catch (TypeConverterExistsException e) {     // expected     } }
false;public;0;18;;@Test public void testRemoveTypeConverter() {     DefaultCamelContext context = new DefaultCamelContext().     // add our own type converter manually that converts from String -> MyOrder using MyOrderTypeConverter     context.getTypeConverterRegistry().addTypeConverter(MyOrder.class, String.class, new MyOrderTypeConverter()).     MyOrder order = context.getTypeConverter().convertTo(MyOrder.class, "123").     assertNotNull(order).     assertEquals(123, order.getId()).     // now remove it     boolean removed = context.getTypeConverterRegistry().removeTypeConverter(MyOrder.class, String.class).     assertTrue("Type converter should be removed", removed).     order = context.getTypeConverter().convertTo(MyOrder.class, "123").     assertNull("Type converter should be removed", order). }
false;public;0;3;;public int getId() {     return id. }
false;public;1;3;;public void setId(int id) {     this.id = id. }
false;public;3;7;;@SuppressWarnings("unchecked") public <T> T convertTo(Class<T> type, Exchange exchange, Object value) {     // converter from value to the MyOrder bean     MyOrder order = new MyOrder().     order.setId(Integer.parseInt(value.toString())).     return (T) order. }
