commented;modifiers;parameterAmount;loc;comment;code
false;public;0;24;;@Test public void testRestart() throws Exception {     getMockEndpoint("mock:result").expectedMinimumMessageCount(1).     assertMockEndpointsSatisfied().     assertEquals("Hello", getMockEndpoint("mock:result").getExchanges().get(0).getIn().getBody()).     assertEquals(123, getMockEndpoint("mock:result").getExchanges().get(0).getIn().getHeader("foo")).     // restart route     resetMocks().     context.getRouteController().stopRoute("foo").     getMockEndpoint("mock:result").expectedMinimumMessageCount(1).     // start route     context.getRouteController().startRoute("foo").     assertMockEndpointsSatisfied().     assertEquals("Hello", getMockEndpoint("mock:result").getExchanges().get(0).getIn().getBody()).     assertEquals(123, getMockEndpoint("mock:result").getExchanges().get(0).getIn().getHeader("foo")). }
false;public;0;12;;@Override public void configure() throws Exception {     props.put("foo", 123).     props.put("bar", "Hello").     props.put("delay", 1000).     my = new MyEndpoint().     my.setCamelContext(context).     my.setConsumerProperties(props).     from(my).routeId("foo").to("mock:result"). }
false;protected;0;17;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             props.put("foo", 123).             props.put("bar", "Hello").             props.put("delay", 1000).             my = new MyEndpoint().             my.setCamelContext(context).             my.setConsumerProperties(props).             from(my).routeId("foo").to("mock:result").         }     }. }
false;public;0;4;;@Override public Producer createProducer() throws Exception {     return null. }
false;public;1;6;;@Override public Consumer createConsumer(Processor processor) throws Exception {     MyConsumer answer = new MyConsumer(this, processor).     configureConsumer(answer).     return answer. }
false;public;0;4;;@Override public boolean isSingleton() {     return true. }
false;protected;0;4;;@Override protected String createEndpointUri() {     return "myendpoint:foo". }
false;public;0;3;;public int getFoo() {     return foo. }
false;public;1;3;;public void setFoo(int foo) {     this.foo = foo. }
false;public;0;3;;public String getBar() {     return bar. }
false;public;1;3;;public void setBar(String bar) {     this.bar = bar. }
false;protected;0;10;;@Override protected int poll() throws Exception {     Exchange exchange = new DefaultExchange(getEndpoint()).     exchange.getIn().setBody(bar).     exchange.getIn().setHeader("foo", foo).     getProcessor().process(exchange).     return 1. }
