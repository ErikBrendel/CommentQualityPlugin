commented;modifiers;parameterAmount;loc;comment;code
false;public;0;10;;@Test public void testMessagesThroughDifferentRoutes() throws Exception {     resultEndpoint.expectedBodiesReceived("one", "two", "three").     sendMessage("bar", "one").     sendMessage("cheese", "two").     sendMessage("somethingUndefined", "three").     resultEndpoint.assertIsSatisfied(). }
false;public;1;6;;public void process(Exchange exchange) {     // now lets fire in a message     Message in = exchange.getIn().     in.setBody(body).     in.setHeader("foo", headerValue). }
false;protected;2;10;;protected void sendMessage(final Object headerValue, final Object body) throws Exception {     template.send(startEndpoint, new Processor() {          public void process(Exchange exchange) {             // now lets fire in a message             Message in = exchange.getIn().             in.setBody(body).             in.setHeader("foo", headerValue).         }     }). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     startEndpoint = resolveMandatoryEndpoint("direct:a").     resultEndpoint = getMockEndpoint("mock:result"). }
false;public;0;12;;public void configure() {     context.setTracing(true).     from("direct:a").choice().when(header("foo").isEqualTo("bar")).to("direct:b").when(header("foo").isEqualTo("cheese")).to("direct:c").otherwise().to("direct:d").     from("direct:b").to("mock:result").     from("direct:c").to("mock:result").     from("direct:d").to("mock:result"). }
false;protected;0;16;;protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          public void configure() {             context.setTracing(true).             from("direct:a").choice().when(header("foo").isEqualTo("bar")).to("direct:b").when(header("foo").isEqualTo("cheese")).to("direct:c").otherwise().to("direct:d").             from("direct:b").to("mock:result").             from("direct:c").to("mock:result").             from("direct:d").to("mock:result").         }     }. }
