commented;modifiers;parameterAmount;loc;comment;code
false;public;0;13;;@Test public void testFirstFewAttemptsFail() throws Exception {     successEndpoint.expectedBodiesReceived(body).     successEndpoint.message(0).header(Exchange.REDELIVERED).isEqualTo(true).     successEndpoint.message(0).header(Exchange.REDELIVERY_COUNTER).isEqualTo(1).     successEndpoint.message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isEqualTo(2).     deadEndpoint.expectedMessageCount(0).     sendBody("direct:start", body).     assertMockEndpointsSatisfied(). }
false;public;0;24;;@Test public void testLotsOfAttemptsFail() throws Exception {     failUntilAttempt = 5.     deadEndpoint.expectedBodiesReceived(body).     // no traces of redelivery as the dead letter channel will handle the exception when moving the DLQ     deadEndpoint.message(0).header(Exchange.REDELIVERED).isNull().     deadEndpoint.message(0).header(Exchange.REDELIVERY_COUNTER).isNull().     deadEndpoint.message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull().     successEndpoint.expectedMessageCount(0).     sendBody("direct:start", body).     assertMockEndpointsSatisfied().     Throwable t = deadEndpoint.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class).     assertNotNull("Should have been a cause property", t).     assertTrue(t instanceof RuntimeException).     assertEquals("Failed to process due to attempt: 3 being less than: 5", t.getMessage()).     // must be InOnly     Exchange dead = deadEndpoint.getReceivedExchanges().get(0).     assertEquals(ExchangePattern.InOnly, dead.getPattern()). }
false;public;0;24;;@Test public void testLotsOfAttemptsFailInOut() throws Exception {     failUntilAttempt = 5.     deadEndpoint.expectedBodiesReceived(body).     // no traces of redelivery as the dead letter channel will handle the exception when moving the DLQ     deadEndpoint.message(0).header(Exchange.REDELIVERED).isNull().     deadEndpoint.message(0).header(Exchange.REDELIVERY_COUNTER).isNull().     deadEndpoint.message(0).header(Exchange.REDELIVERY_MAX_COUNTER).isNull().     successEndpoint.expectedMessageCount(0).     template.requestBody("direct:start", body).     assertMockEndpointsSatisfied().     Throwable t = deadEndpoint.getExchanges().get(0).getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class).     assertNotNull("Should have been a cause property", t).     assertTrue(t instanceof RuntimeException).     assertEquals("Failed to process due to attempt: 3 being less than: 5", t.getMessage()).     // must be InOnly     Exchange dead = deadEndpoint.getReceivedExchanges().get(0).     assertEquals(ExchangePattern.InOnly, dead.getPattern()). }
false;public;0;8;;@Override @Before public void setUp() throws Exception {     super.setUp().     deadEndpoint = getMockEndpoint("mock:failed").     successEndpoint = getMockEndpoint("mock:success"). }
false;public;1;8;;public void process(Exchange exchange) {     Integer counter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).     int attempt = (counter == null) ? 1 : counter + 1.     if (attempt < failUntilAttempt) {         throw new RuntimeException("Failed to process due to attempt: " + attempt + " being less than: " + failUntilAttempt).     } }
false;public;0;8;;public void configure() {     from("direct:start").errorHandler(deadLetterChannel("mock:failed").maximumRedeliveries(2).redeliveryDelay(50).loggingLevel(LoggingLevel.DEBUG)).process(processor).to("mock:success"). }
false;protected;0;23;;protected RouteBuilder createRouteBuilder() {     final Processor processor = new Processor() {          public void process(Exchange exchange) {             Integer counter = exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER, Integer.class).             int attempt = (counter == null) ? 1 : counter + 1.             if (attempt < failUntilAttempt) {                 throw new RuntimeException("Failed to process due to attempt: " + attempt + " being less than: " + failUntilAttempt).             }         }     }.     return new RouteBuilder() {          public void configure() {             from("direct:start").errorHandler(deadLetterChannel("mock:failed").maximumRedeliveries(2).redeliveryDelay(50).loggingLevel(LoggingLevel.DEBUG)).process(processor).to("mock:success").         }     }. }
