commented;modifiers;parameterAmount;loc;comment;code
false;public;0;14;;@Test public void testNoAdvice() throws Exception {     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     try {         template.sendBody("direct:start", "Kaboom").         fail("Should have thrown exception").     } catch (Exception e) {     // expected     }     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     errorHandler(deadLetterChannel("mock:dead")). }
false;public;0;15;;@Test public void testAdviceWithErrorHandler() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     try {         RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {              @Override             public void configure() throws Exception {                 errorHandler(deadLetterChannel("mock:dead")).             }         }).         fail("Should have thrown exception").     } catch (IllegalArgumentException e) {         assertEquals("You can not advice with error handlers. Remove the error handlers from the route builder.", e.getMessage()).     } }
false;public;0;6;;@Override public void configure() throws Exception {     onException(IllegalArgumentException.class).handled(true).to("mock:error"). }
false;public;0;20;;@Test public void testAdviceWithOnException() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             onException(IllegalArgumentException.class).handled(true).to("mock:error").         }     }).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:error").expectedBodiesReceived("Kaboom").     template.sendBody("direct:start", "World").     template.sendBody("direct:start", "Kaboom").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     interceptFrom().to("mock:from"). }
false;public;0;18;;@Test public void testAdviceWithInterceptFrom() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptFrom().to("mock:from").         }     }).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:from").expectedBodiesReceived("World").     getMockEndpoint("mock:from").expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, "direct://start").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     interceptSendToEndpoint("mock:result").to("mock:to"). }
false;public;0;18;;@Test public void testAdviceWithInterceptSendToEndpoint() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("mock:result").to("mock:to").         }     }).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:to").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:to").expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, "mock://result").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;4;;@Override public void configure() throws Exception {     onCompletion().to("mock:done"). }
false;public;0;17;;@Test public void testAdviceWithOnCompletion() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             onCompletion().to("mock:done").         }     }).     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:done").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "World").     assertMockEndpointsSatisfied(). }
false;public;0;6;;@Override public void configure() throws Exception {     from("direct:start").process(new MyProcessor()).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").process(new MyProcessor()).to("mock:result").         }     }. }
false;public;1;8;;@Override public void process(Exchange exchange) throws Exception {     String body = exchange.getIn().getBody(String.class).     if ("Kaboom".equals(body)) {         throw new IllegalArgumentException("Kaboom").     }     exchange.getIn().setBody("Hello " + body). }
