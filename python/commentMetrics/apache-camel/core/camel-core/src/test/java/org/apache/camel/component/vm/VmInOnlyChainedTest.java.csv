commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testInOnlyVmChained() throws Exception {     getMockEndpoint("mock:a").expectedBodiesReceived("start").     resolveMandatoryEndpoint(context2, "mock:b", MockEndpoint.class).expectedBodiesReceived("start-a").     getMockEndpoint("mock:c").expectedBodiesReceived("start-a-b").     template.sendBody("vm:a", "start").     assertMockEndpointsSatisfied().     MockEndpoint.assertIsSatisfied(context2). }
false;public;0;6;;@Override public void configure() throws Exception {     from("vm:a").to("mock:a").setBody(simple("${body}-a")).to("vm:b").     from("vm:c").to("mock:c").setBody(simple("${body}-c")). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:a").to("mock:a").setBody(simple("${body}-a")).to("vm:b").             from("vm:c").to("mock:c").setBody(simple("${body}-c")).         }     }. }
false;public;0;4;;@Override public void configure() throws Exception {     from("vm:b").to("mock:b").setBody(simple("${body}-b")).to("vm:c"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilderForSecondContext() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("vm:b").to("mock:b").setBody(simple("${body}-b")).to("vm:c").         }     }. }
