commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/foo").     deleteDirectory("target/data/bar").     deleteDirectory("target/data/cheese").     super.setUp(). }
false;public;0;4;;@Override public boolean isUseRouteBuilder() {     return false. }
false;public;0;15;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // intercept sending to any file endpoint, send it to our mock instead     // and do not send it to the original intended endpoint     interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:detour").     from("direct:first").to("file://foo").to("file://bar").to("mock:result"). // END SNIPPET: e1 }
false;public;0;28;;@Test public void testSendToWildcard() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // intercept sending to any file endpoint, send it to our mock instead             // and do not send it to the original intended endpoint             interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:detour").             from("direct:first").to("file://foo").to("file://bar").to("mock:result").         // END SNIPPET: e1         }     }).     context.start().     getMockEndpoint("mock:detour").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:first", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;9;;@Override public void configure() throws Exception {     interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:detour").     from("direct:first").to("file://foo").to("mock:result"). }
false;public;0;23;;@Test public void testSendToWildcardHeaderUri() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("file:*").skipSendToOriginalEndpoint().to("mock:detour").             from("direct:first").to("file://foo").to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:detour").expectedMessageCount(1).     getMockEndpoint("mock:detour").expectedHeaderReceived(Exchange.INTERCEPTED_ENDPOINT, "file://foo").     getMockEndpoint("mock:result").expectedMessageCount(1).     template.sendBody("direct:first", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Override public void configure() throws Exception {     // START SNIPPET: e1     // intercept sending to to either target/data/foo or target/data/bar directory     interceptSendToEndpoint("file://target/data/(foo|bar)").skipSendToOriginalEndpoint().to("mock:detour").     from("direct:first").to("file://target/data/foo").to("file://target/data/bar").to("file://target/data/cheese").to("mock:result"). // END SNIPPET: e1 }
false;public;0;28;;@Test public void testSendToRegex() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             // intercept sending to to either target/data/foo or target/data/bar directory             interceptSendToEndpoint("file://target/data/(foo|bar)").skipSendToOriginalEndpoint().to("mock:detour").             from("direct:first").to("file://target/data/foo").to("file://target/data/bar").to("file://target/data/cheese").to("mock:result").         // END SNIPPET: e1         }     }).     context.start().     getMockEndpoint("mock:detour").expectedMessageCount(2).     getMockEndpoint("mock:result").expectedMessageCount(1).     getMockEndpoint("mock:result").expectedFileExists("target/data/cheese/cheese.txt").     template.sendBodyAndHeader("direct:first", "Hello World", Exchange.FILE_NAME, "cheese.txt").     assertMockEndpointsSatisfied(). }
false;public;1;5;;public void process(Exchange exchange) throws Exception {     // we use a dynamic endpoint URI that Camel does not know beforehand     // but it should still be intercepted as we intercept all file endpoints     template.sendBodyAndHeader("file://target/data/foo", "Hello Foo", Exchange.FILE_NAME, "foo.txt"). }
false;public;0;15;;@Override public void configure() throws Exception {     interceptSendToEndpoint("file:*").to("mock:detour").     from("direct:first").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // we use a dynamic endpoint URI that Camel does not know beforehand             // but it should still be intercepted as we intercept all file endpoints             template.sendBodyAndHeader("file://target/data/foo", "Hello Foo", Exchange.FILE_NAME, "foo.txt").         }     }).to("mock:result"). }
false;public;0;29;;@Test public void testSendToDynamicEndpoint() throws Exception {     context.addRoutes(new RouteBuilder() {          @Override         public void configure() throws Exception {             interceptSendToEndpoint("file:*").to("mock:detour").             from("direct:first").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // we use a dynamic endpoint URI that Camel does not know beforehand                     // but it should still be intercepted as we intercept all file endpoints                     template.sendBodyAndHeader("file://target/data/foo", "Hello Foo", Exchange.FILE_NAME, "foo.txt").                 }             }).to("mock:result").         }     }).     context.start().     getMockEndpoint("mock:detour").expectedBodiesReceived("Hello Foo").     getMockEndpoint("mock:result").expectedBodiesReceived("Hello World").     getMockEndpoint("mock:result").expectedFileExists("target/data/foo/foo.txt").     template.sendBody("direct:first", "Hello World").     assertMockEndpointsSatisfied(). }
