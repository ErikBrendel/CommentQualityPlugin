commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/filelanguage").     super.setUp(). }
false;protected;0;6;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myguidgenerator", new MyGuidGenerator()).     return jndi. }
false;public;0;7;;@Test public void testProducerFileNameHeaderNotEvaluated() {     if (!isPlatform("windows")) {         template.sendBodyAndHeader("file://target/data/filelanguage", "Hello World", Exchange.FILE_NAME, "$simple{myfile-${id}}.txt").         assertFileExists("target/data/filelanguage/$simple{myfile-${id}}.txt").     } }
false;public;0;6;;@Test public void testProduceBeanByExpression() throws Exception {     template.sendBody("file://target/data/filelanguage?fileName=${bean:myguidgenerator}.bak", "Hello World").     assertFileExists("target/data/filelanguage/123.bak"). }
false;public;0;8;;@Test public void testProducerDateByHeader() throws Exception {     template.sendBodyAndHeader("file://target/data/filelanguage", "Hello World", Exchange.FILE_NAME, simple("myfile-${date:now:yyyyMMdd}.txt")).     String date = new SimpleDateFormat("yyyyMMdd").format(new Date()).     assertFileExists("target/data/filelanguage/myfile-" + date + ".txt"). }
false;public;0;7;;@Test public void testProducerDateByExpression() throws Exception {     template.sendBody("file://target/data/filelanguage?fileName=myfile-${date:now:yyyyMMdd}.txt", "Hello World").     String date = new SimpleDateFormat("yyyyMMdd").format(new Date()).     assertFileExists("target/data/filelanguage/myfile-" + date + ".txt"). }
false;public;0;8;;@Test public void testProducerComplexByExpression() throws Exception {     String expression = "../filelanguageinbox/myfile-${bean:myguidgenerator.guid}-${date:now:yyyyMMdd}.txt".     template.sendBody("file://target/data/filelanguage?jailStartingDirectory=false&fileName=" + expression, "Hello World").     String date = new SimpleDateFormat("yyyyMMdd").format(new Date()).     assertFileExists("target/data/filelanguageinbox/myfile-123-" + date + ".txt"). }
false;public;0;7;;@Test public void testProducerSimpleWithHeaderByExpression() throws Exception {     template.sendBodyAndHeader("file://target/data/filelanguage?fileName=myfile-${in.header.foo}.txt", "Hello World", "foo", "abc").     assertFileExists("target/data/filelanguage/myfile-abc.txt"). }
false;public;0;11;;@Test public void testProducerWithDateHeader() throws Exception {     Calendar cal = Calendar.getInstance().     cal.set(1974, Calendar.APRIL, 20).     Date date = cal.getTime().     template.sendBodyAndHeader("file://target/data/filelanguage?fileName=mybirthday-${date:in.header.birthday:yyyyMMdd}.txt", "Hello World", "birthday", date).     assertFileExists("target/data/filelanguage/mybirthday-19740420.txt"). }
false;public;0;3;;public String guid() {     return "123". }
