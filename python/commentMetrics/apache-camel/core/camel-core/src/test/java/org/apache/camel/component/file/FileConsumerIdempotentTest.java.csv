commented;modifiers;parameterAmount;loc;comment;code
false;public;0;7;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/idempotent").     super.setUp().     template.sendBodyAndHeader("file://target/data/idempotent", "Hello World", Exchange.FILE_NAME, "report.txt"). }
false;public;0;4;;public void configure() throws Exception {     from(uri).convertBodyTo(String.class).to("mock:result"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from(uri).convertBodyTo(String.class).to("mock:result").         }     }. }
false;public;0;29;;@Test public void testIdempotent() throws Exception {     // consume the file the first time     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // reset mock and set new expectations     mock.reset().     mock.expectedMessageCount(0).     // move file back     File file = new File("target/data/idempotent/done/report.txt").     File renamed = new File("target/data/idempotent/report.txt").     file.renameTo(renamed).     // should NOT consume the file again, let a bit time pass to let the consumer try to consume it but it should not     Thread.sleep(100).     assertMockEndpointsSatisfied().     FileEndpoint fe = context.getEndpoint(uri, FileEndpoint.class).     assertNotNull(fe).     MemoryIdempotentRepository repo = (MemoryIdempotentRepository) fe.getInProgressRepository().     assertEquals("Should be no in-progress files", 0, repo.getCacheSize()). }
