commented;modifiers;parameterAmount;loc;comment;code
false;public;0;5;;@Override public void configure() throws Exception {     weaveByToUri("direct:branch*").replace().to("mock:foo").     mockEndpointsAndSkip("direct:branch*"). }
false;public;0;17;;@Test public void testAdviceCBR() throws Exception {     RouteDefinition route = context.getRouteDefinitions().get(0).     RouteReifier.adviceWith(route, context, new AdviceWithRouteBuilder() {          @Override         public void configure() throws Exception {             weaveByToUri("direct:branch*").replace().to("mock:foo").             mockEndpointsAndSkip("direct:branch*").         }     }).     getMockEndpoint("mock:foo").expectedBodiesReceived("Hello World").     template.sendBody("direct:start", "Hello World").     assertMockEndpointsSatisfied(). }
false;public;0;8;;@Override public void configure() throws Exception {     from("direct:start").choice().when(header("foo")).to("direct:branch-1").otherwise().to("direct:branch-2"). }
false;protected;0;13;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").choice().when(header("foo")).to("direct:branch-1").otherwise().to("direct:branch-2").         }     }. }
