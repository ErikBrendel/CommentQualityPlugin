commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/premove").     super.setUp(). }
false;public;0;14;;@Test public void testPreMoveDelete() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedMessageCount(1).     template.sendBodyAndHeader("file://target/data/premove", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     File pre = new File("target/data/premove/work/hello.txt").     assertFalse("Pre move file should have been deleted", pre.exists()). }
false;public;0;23;;@Test public void testPreMoveDeleteSameFileTwice() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     template.sendBodyAndHeader("file://target/data/premove", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // reset and drop the same file again     mock.reset().     oneExchangeDone.reset().     mock.expectedBodiesReceived("Hello Again World").     template.sendBodyAndHeader("file://target/data/premove", "Hello Again World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     File pre = new File("target/data/premove/work/hello.txt").     assertFalse("Pre move file should have been deleted", pre.exists()). }
false;public;0;6;;@Override public void configure() throws Exception {     from("file://target/data/premove?preMove=work&delete=true&idempotent=false&initialDelay=0&delay=10").process(new MyPreMoveCheckerProcessor()).to("mock:result"). }
false;protected;0;11;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("file://target/data/premove?preMove=work&delete=true&idempotent=false&initialDelay=0&delay=10").process(new MyPreMoveCheckerProcessor()).to("mock:result").         }     }. }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     File pre = new File("target/data/premove/work/hello.txt").     assertTrue("Pre move file should exist", pre.exists()). }
