commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;7;;@Override protected JndiRegistry createRegistry() throws Exception {     JndiRegistry jndi = super.createRegistry().     jndi.bind("myBean", new MyBean()).     jndi.bind("myOtherBean", new MyOtherBean()).     return jndi. }
false;public;0;14;;@Test public void testBean() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:start", "Camel").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         MethodNotFoundException cause = assertIsInstanceOf(MethodNotFoundException.class, e.getCause()).         assertEquals("doSomething()", cause.getMethodName()).     }     assertMockEndpointsSatisfied(). }
false;public;0;14;;@Test public void testOtherBean() throws Exception {     getMockEndpoint("mock:result").expectedMessageCount(0).     try {         template.sendBody("direct:other", "Camel").         fail("Should have thrown exception").     } catch (CamelExecutionException e) {         MethodNotFoundException cause = assertIsInstanceOf(MethodNotFoundException.class, e.getCause()).         assertEquals("doSomething()", cause.getMethodName()).     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     from("direct:start").to("bean:myBean?method=doSomething()").to("mock:result").     from("direct:other").to("bean:myOtherBean?method=doSomething()").to("mock:result"). }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:start").to("bean:myBean?method=doSomething()").to("mock:result").             from("direct:other").to("bean:myOtherBean?method=doSomething()").to("mock:result").         }     }. }
false;public,static;1;3;;public static void doSomething(Exchange exchange) {     exchange.getIn().setHeader("foo", "bar"). }
false;public,static;1;3;;public static void doSomething(Exchange exchange) {     exchange.getIn().setHeader("foo", "bar"). }
false;public,static;3;3;;public static void doSomething(Exchange exchange, String foo, String bar) {     exchange.getIn().setHeader(foo, bar). }
