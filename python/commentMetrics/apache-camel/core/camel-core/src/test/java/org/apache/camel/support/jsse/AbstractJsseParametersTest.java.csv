commented;modifiers;parameterAmount;loc;comment;code
false;protected;0;47;;protected CamelContext createPropertiesPlaceholderAwareContext() throws Exception {     Properties supplementalProperties = new Properties().     KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType()).     KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm()).     TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm()).     SecureRandom sr = null.     try {         sr = SecureRandom.getInstance("SHA1PRNG").     } catch (NoSuchAlgorithmException e) {     // Ignore     }     SSLContext sslc = SSLContext.getInstance("TLS").     sslc.init(null, null, null).     SSLSocket socket = (SSLSocket) sslc.getSocketFactory().createSocket().     supplementalProperties.setProperty("keyStoreParameters.type", KeyStore.getDefaultType()).     supplementalProperties.setProperty("keyStoreParameters.provider", ks.getProvider().getName()).     supplementalProperties.setProperty("keyManagersParameters.algorithm", KeyManagerFactory.getDefaultAlgorithm()).     supplementalProperties.setProperty("keyManagersParameters.provider", kmf.getProvider().getName()).     supplementalProperties.setProperty("trustManagersParameters.algorithm", TrustManagerFactory.getDefaultAlgorithm()).     supplementalProperties.setProperty("trustManagersParameters.provider", tmf.getProvider().getName()).     if (sr != null) {         supplementalProperties.setProperty("secureRandomParameters.algorithm", "SHA1PRNG").         supplementalProperties.setProperty("secureRandomParameters.provider", sr.getProvider().getName()).     }     supplementalProperties.setProperty("sslContextParameters.provider", sslc.getProvider().getName()).     supplementalProperties.setProperty("cipherSuite.0", socket.getSupportedCipherSuites()[0]).     // Have to skip this guy because he doesn't work with TLS as the SSLContext protocol     String ssp = "".     for (String protocol : socket.getSupportedProtocols()) {         if (!"SSLv2Hello".equals(protocol)) {             ssp = protocol.             break.         }     }     supplementalProperties.setProperty("secureSocketProtocol.0", ssp).     return this.createPropertiesPlaceholderAwareContext(supplementalProperties). }
false;protected;1;29;;protected CamelContext createPropertiesPlaceholderAwareContext(Properties supplementalProperties) throws IOException {     Properties properties = new Properties(supplementalProperties).     properties.load(AbstractJsseParametersTest.class.getResourceAsStream("test.properties")).     if (supplementalProperties != null) {         Properties mergedProps = new Properties().         Set<String> keys = new HashSet<>().         keys.addAll(properties.stringPropertyNames()).         keys.addAll(supplementalProperties.stringPropertyNames()).         for (String key : keys) {             mergedProps.setProperty(key, properties.getProperty(key)).         }         properties = mergedProps.     }     properties.store(new FileOutputStream("target/jsse-test.properties"), "Generated by " + AbstractJsseParametersTest.class.getName()).     PropertiesComponent pc = new PropertiesComponent().     pc.setLocation("file:./target/jsse-test.properties").     CamelContext context = new DefaultCamelContext().     context.addComponent("properties", pc).     return context. }
