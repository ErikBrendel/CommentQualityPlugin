commented;modifiers;parameterAmount;loc;comment;code
false;public;0;8;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/reports").     // use current dir as base as absolute path     base = new File("").getAbsolutePath() + "/target/data/reports".     super.setUp(). }
false;public;0;10;;@Test public void testConsumeFromAbsolutePath() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:report").     mock.expectedBodiesReceived("Hello Paris").     mock.expectedFileExists(base + "/done/paris.txt").     template.sendBodyAndHeader("file:target/data/reports", "Hello Paris", Exchange.FILE_NAME, "paris.txt").     mock.assertIsSatisfied(). }
false;public;0;3;;public void configure() throws Exception {     from("file://" + base + "?initialDelay=0&delay=10&move=" + base + "/done/${file:onlyname}").convertBodyTo(String.class).to("mock:report"). }
false;protected;0;7;;protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          public void configure() throws Exception {             from("file://" + base + "?initialDelay=0&delay=10&move=" + base + "/done/${file:onlyname}").convertBodyTo(String.class).to("mock:report").         }     }. }
