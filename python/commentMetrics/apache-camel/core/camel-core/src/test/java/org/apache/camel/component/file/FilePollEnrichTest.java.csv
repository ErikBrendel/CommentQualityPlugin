commented;modifiers;parameterAmount;loc;comment;code
false;public;0;6;;@Override @Before public void setUp() throws Exception {     deleteDirectory("target/data/pollenrich").     super.setUp(). }
false;public;0;15;;@Test public void testFilePollEnrich() throws Exception {     MockEndpoint mock = getMockEndpoint("mock:result").     mock.expectedBodiesReceived("Hello World").     mock.expectedFileExists("target/data/pollenrich/done/hello.txt").     template.sendBodyAndHeader("file:target/data/pollenrich", "Hello World", Exchange.FILE_NAME, "hello.txt").     assertMockEndpointsSatisfied().     oneExchangeDone.matchesMockWaitTime().     // file should be moved     File file = new File("target/data/pollenrich/hello.txt").     assertFalse("File should have been moved", file.exists()). }
false;public;1;4;;public void process(Exchange exchange) throws Exception {     // force stop route after use to prevent firing timer again     exchange.getContext().getRouteController().stopRoute("foo", 100, TimeUnit.MILLISECONDS). }
false;public;0;15;;@Override public void configure() throws Exception {     from("timer:foo?period=1000").routeId("foo").log("Trigger timer foo").pollEnrich("file:target/data/pollenrich?move=done", 5000).convertBodyTo(String.class).log("Polled filed ${file:name}").to("mock:result").process(new Processor() {          public void process(Exchange exchange) throws Exception {             // force stop route after use to prevent firing timer again             exchange.getContext().getRouteController().stopRoute("foo", 100, TimeUnit.MILLISECONDS).         }     }). }
false;protected;0;20;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("timer:foo?period=1000").routeId("foo").log("Trigger timer foo").pollEnrich("file:target/data/pollenrich?move=done", 5000).convertBodyTo(String.class).log("Polled filed ${file:name}").to("mock:result").process(new Processor() {                  public void process(Exchange exchange) throws Exception {                     // force stop route after use to prevent firing timer again                     exchange.getContext().getRouteController().stopRoute("foo", 100, TimeUnit.MILLISECONDS).                 }             }).         }     }. }
