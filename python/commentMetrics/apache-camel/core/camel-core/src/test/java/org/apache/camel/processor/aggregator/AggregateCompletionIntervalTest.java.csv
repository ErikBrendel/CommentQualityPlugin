commented;modifiers;parameterAmount;loc;comment;code
false;public;0;15;;@Test public void testAggregateInterval() throws Exception {     MockEndpoint result = getMockEndpoint("mock:result").     // by default the use latest aggregation strategy is used so we get message 9     result.expectedBodiesReceived("Message 9").     // ensure messages are send after a little bit     Thread.sleep(100).     for (int i = 0. i < 10. i++) {         template.sendBodyAndHeader("seda:start", "Message " + i, "id", "1").     }     assertMockEndpointsSatisfied(). }
false;public;0;10;;@Override public void configure() throws Exception {     // START SNIPPET: e1     from("seda:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionInterval(2000).to("mock:result"). // END SNIPPET: e1 }
false;protected;0;15;;@Override protected RouteBuilder createRouteBuilder() throws Exception {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             // START SNIPPET: e1             from("seda:start").aggregate(header("id"), new UseLatestAggregationStrategy()).completionInterval(2000).to("mock:result").         // END SNIPPET: e1         }     }. }
