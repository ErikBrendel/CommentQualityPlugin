commented;modifiers;parameterAmount;loc;comment;code
false;public;0;11;;@Test public void testOnExceptionErrorHandlerRef() throws Exception {     getMockEndpoint("mock:foo").expectedMessageCount(1).     getMockEndpoint("mock:handled").expectedMessageCount(0).     getMockEndpoint("mock:dead").expectedMessageCount(0).     getMockEndpoint("mock:exc").expectedMessageCount(1).     template.sendBody("direct:foo", "Hello Foo").     assertMockEndpointsSatisfied(). }
false;public;0;11;;@Test public void testOnExceptionErrorHandlerRefFoo() throws Exception {     getMockEndpoint("mock:bar").expectedMessageCount(1).     getMockEndpoint("mock:handled").expectedMessageCount(1).     getMockEndpoint("mock:dead").expectedMessageCount(0).     getMockEndpoint("mock:exc").expectedMessageCount(0).     template.sendBody("direct:bar", "Hello Bar").     assertMockEndpointsSatisfied(). }
false;protected;0;6;;@Override protected CamelContext createCamelContext() throws Exception {     CamelContext context = new DefaultCamelContext(createRegistry()).     context.setErrorHandlerFactory(new DeadLetterChannelBuilder("mock:dead")).     return context. }
false;public;0;11;;@Override public void configure() throws Exception {     from("direct:bar").onException(IllegalArgumentException.class).handled(true).to("mock:handled").end().to("mock:bar").throwException(new IllegalArgumentException("Damn")). }
false;public;0;12;;@Override public void configure() throws Exception {     from("direct:foo").onException(Exception.class).handled(true).to("mock:exc").end().to("mock:foo").throwException(new IllegalArgumentException("Damn")). }
false;protected;0;32;;@Override protected RouteBuilder[] createRouteBuilders() throws Exception {     return new RouteBuilder[] { new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:bar").onException(IllegalArgumentException.class).handled(true).to("mock:handled").end().to("mock:bar").throwException(new IllegalArgumentException("Damn")).         }     }, new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:foo").onException(Exception.class).handled(true).to("mock:exc").end().to("mock:foo").throwException(new IllegalArgumentException("Damn")).         }     } }. }
