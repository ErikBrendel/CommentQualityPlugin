commented;modifiers;parameterAmount;loc;comment;code
false;;0;1;;boolean isEmpty().
false;public;0;3;;public boolean isEmpty() {     return true. }
false;public;0;4;;@Override public void configure() throws Exception {     from("direct:in").choice().when(simple("${headers.bean.isEmpty()}")).to("mock:out"). }
false;protected;0;9;;@Override protected RouteBuilder createRouteBuilder() {     return new RouteBuilder() {          @Override         public void configure() throws Exception {             from("direct:in").choice().when(simple("${headers.bean.isEmpty()}")).to("mock:out").         }     }. }
false;public;0;10;;@Test public void testMethodNotFound() throws Exception {     MockEndpoint out = getMockEndpoint("mock:out").     out.expectedMessageCount(1).     ExchangeBuilder exchangeBuilder = new ExchangeBuilder(context).withHeader("bean", new Clazz()).     template.send("direct:in", exchangeBuilder.build()).     out.assertIsSatisfied(). }
