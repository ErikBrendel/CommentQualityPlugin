commented;modifiers;parameterAmount;loc;comment;code
false;public;1;5;;public void generate(Path destination) throws IOException {     final JavaFile javaFile = generateSourceCode().     javaFile.writeTo(destination). }
false;public;1;4;;public SpringBootProjectSourceCodeGenerator withIndent(final String indent) {     this.indent = ObjectHelper.notNull(indent, "indent").     return this. }
false;public;1;5;;public SpringBootProjectSourceCodeGenerator withPackageName(final String packageName) {     notEmpty(packageName, "packageName").     this.packageName = packageName.     return this. }
false;;0;20;;JavaFile generateSourceCode() {     notEmpty(packageName, "packageName").     final MethodSpec methodSpec = generateRestMethod().     final String classNameToUse = "CamelRestController".     final AnnotationSpec.Builder generatedAnnotation = AnnotationSpec.builder(Generated.class).addMember("value", "$S", getClass().getName()).     final AnnotationSpec.Builder restAnnotation = AnnotationSpec.builder(ClassName.bestGuess("org.springframework.web.bind.annotation.RestController")).     TypeSpec.Builder builder = TypeSpec.classBuilder(classNameToUse).addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(methodSpec).addAnnotation(generatedAnnotation.build()).addAnnotation(restAnnotation.build()).addJavadoc("Forward requests to the Camel servlet so it can service REST requests.\n").     TypeSpec generatedRestController = builder.build().     return JavaFile.builder(packageName, generatedRestController).indent(indent).build(). }
false;;0;22;;MethodSpec generateRestMethod() {     ClassName req = ClassName.bestGuess("javax.servlet.http.HttpServletRequest").     ClassName res = ClassName.bestGuess("javax.servlet.http.HttpServletResponse").     final AnnotationSpec.Builder reqAnnotation = AnnotationSpec.builder(ClassName.bestGuess("org.springframework.web.bind.annotation.RequestMapping")).addMember("value", "\"/**\"").     final MethodSpec.Builder forward = MethodSpec.methodBuilder("camelServlet").addModifiers(Modifier.PUBLIC).addParameter(req, "request").addParameter(res, "response").addAnnotation(reqAnnotation.build()).returns(void.class).     forward.addCode("try {\n").     forward.addCode("    String path = request.getRequestURI().\n").     forward.addCode("    request.getServletContext().getRequestDispatcher(\"/camel/\" + path).forward(request, response).\n").     forward.addCode("} catch (Exception e) {\n").     forward.addCode("    response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR).\n").     forward.addCode("}\n").     return forward.build(). }
false;public,static;0;3;;public static SpringBootProjectSourceCodeGenerator generator() {     return new SpringBootProjectSourceCodeGenerator(). }
