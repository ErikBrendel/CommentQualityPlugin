commented;modifiers;parameterAmount;loc;comment;code
false;;1;10;;List<String> asStringList(final List<?> values) {     if (values == null || values.isEmpty()) {         return Collections.emptyList().     }     final List<String> stringList = new ArrayList<>().     values.forEach(v -> stringList.add(String.valueOf(v))).     return stringList. }
false;;1;33;;CodeEmitter<T> emit(final Parameter parameter) {     emitter.emit("param").     emit("name", parameter.getName()).     final String parameterType = parameter.getIn().     if (ObjectHelper.isNotEmpty(parameterType)) {         emit("type", RestParamType.valueOf(parameterType)).     }     if (parameter instanceof AbstractSerializableParameter) {         final AbstractSerializableParameter serializableParameter = (AbstractSerializableParameter) parameter.         final String dataType = serializableParameter.getType().         emit("dataType", dataType).         emit("allowableValues", asStringList(serializableParameter.getEnumValue())).         final String collectionFormat = serializableParameter.getCollectionFormat().         if (ObjectHelper.isNotEmpty(collectionFormat)) {             emit("collectionFormat", CollectionFormat.valueOf(collectionFormat)).         }         if (ObjectHelper.isNotEmpty(serializableParameter.getDefault())) {             String value = serializableParameter.getDefault().toString().             emit("defaultValue", value).         }         final Property items = serializableParameter.getItems().         if ("array".equals(dataType) && items != null) {             emit("arrayType", items.getType()).         }     }     emit("required", parameter.getRequired()).     emit("description", parameter.getDescription()).     emitter.emit("endParam").     return emitter. }
false;;2;7;;CodeEmitter<T> emit(final String method, final List<String> values) {     if (values == null || values.isEmpty()) {         return emitter.     }     return emitter.emit(method, new Object[] { values.toArray(new String[values.size()]) }). }
false;;2;7;;CodeEmitter<T> emit(final String method, final Object value) {     if (ObjectHelper.isEmpty(value)) {         return emitter.     }     return emitter.emit(method, value). }
false;;2;17;;void visit(final HttpMethod method, final Operation operation) {     if (filter.accept(operation.getOperationId())) {         final String methodName = method.name().toLowerCase().         emitter.emit(methodName, path).         emit("id", operation.getOperationId()).         emit("description", operation.getDescription()).         emit("consumes", operation.getConsumes()).         emit("produces", operation.getProduces()).         operation.getParameters().forEach(parameter -> {             emit(parameter).         }).         emitter.emit("to", destinationGenerator.generateDestinationFor(operation)).     } }
