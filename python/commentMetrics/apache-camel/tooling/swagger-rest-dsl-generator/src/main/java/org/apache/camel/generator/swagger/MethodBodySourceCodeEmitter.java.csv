commented;modifiers;parameterAmount;loc;comment;code
false;public;2;29;;@Override public CodeEmitter<MethodSpec> emit(final String method, final Object... args) {     final boolean hasArgs = args != null && args.length > 0.     final int indent = indentLevelOf(method).     if (!first) {         builder.addCode("\n").     }     builder.addCode(String.join("", Collections.nCopies(indentStack.peek(), "$<"))).     builder.addCode(String.join("", Collections.nCopies(indent, "$>"))).     if (!first) {         builder.addCode(".").     }     indentStack.push(indent).     if (hasArgs) {         builder.addCode("$L(" + invocationLiteralsFor(args) + ")", extend(method, argumentsFor(args))).     } else {         builder.addCode("$L()", method).     }     first = false.     return this. }
false;public;0;6;;@Override public MethodSpec result() {     builder.addCode(String.join("", Collections.nCopies(indentStack.peek(), "$<"))).     builder.addCode(".\n").     return builder.build(). }
false;;1;18;;Object[] argumentsFor(final Object[] args) {     final List<Object> arguments = new ArrayList<>(args.length).     for (final Object arg : args) {         if (isPrimitiveOrWrapper(arg.getClass())) {             arguments.add(arg).         } else if (arg instanceof String) {             arguments.add(arg).         } else if (arg instanceof Enum) {             arguments.add(arg.getClass()).             arguments.add(arg).         } else if (arg instanceof String[]) {             arguments.add(Arrays.stream((String[]) arg).collect(Collectors.joining(","))).         }     }     return arguments.toArray(new Object[arguments.size()]). }
false;;2;12;;Object[] extend(final Object first, final Object... others) {     if (others == null || others.length == 0) {         return new Object[] { first }.     }     final Object[] ret = new Object[1 + others.length].     ret[0] = first.     System.arraycopy(others, 0, ret, 1, others.length).     return ret. }
false;;1;31;;int indentLevelOf(final String method) {     switch(method) {         case "rest":             return 0.         case "post":         case "get":         case "put":         case "patch":         case "delete":         case "head":         case "options":             return 1.         case "param":             indentIntentStack.push(3).             return 2.         case "endParam":             indentIntentStack.pop().             return 2.         case "route":             indentIntentStack.push(3).             return 2.         case "endRest":             indentIntentStack.pop().             return 2.         default:             if (indentIntentStack.isEmpty()) {                 return 2.             }             return indentIntentStack.peek().     } }
false;;1;17;;String invocationLiteralsFor(final Object[] args) {     final StringJoiner literals = new StringJoiner(",").     for (final Object arg : args) {         if (isPrimitiveOrWrapper(arg.getClass())) {             literals.add("$L").         } else if (arg instanceof String) {             literals.add("$S").         } else if (arg instanceof Enum) {             literals.add("$T.$L").         } else if (arg instanceof String[]) {             literals.add("$S").         }     }     return literals.toString(). }
