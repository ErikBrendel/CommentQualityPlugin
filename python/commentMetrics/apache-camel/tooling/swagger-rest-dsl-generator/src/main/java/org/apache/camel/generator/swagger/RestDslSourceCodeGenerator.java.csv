commented;modifiers;parameterAmount;loc;comment;code
false;public,abstract;1;1;;public abstract void generate(T destination) throws IOException.
false;public;1;6;;public RestDslSourceCodeGenerator<T> withClassName(final String className) {     notEmpty(className, "className").     this.classNameGenerator = (s) -> className.     return this. }
false;public;1;5;;public RestDslSourceCodeGenerator<T> withIndent(final String indent) {     this.indent = ObjectHelper.notNull(indent, "indent").     return this. }
false;public;0;5;;public RestDslSourceCodeGenerator<T> withoutSourceCodeTimestamps() {     sourceCodeTimestamps = false.     return this. }
false;public;1;6;;public RestDslSourceCodeGenerator<T> withPackageName(final String packageName) {     notEmpty(packageName, "packageName").     this.packageNameGenerator = (s) -> packageName.     return this. }
false;public;0;5;;public RestDslSourceCodeGenerator<T> withSourceCodeTimestamps() {     sourceCodeTimestamps = true.     return this. }
false;;1;23;;MethodSpec generateConfigureMethod(final Swagger swagger) {     final MethodSpec.Builder configure = MethodSpec.methodBuilder("configure").addModifiers(Modifier.PUBLIC).returns(void.class).addJavadoc("Defines Apache Camel routes using REST DSL fluent API.\n").     final MethodBodySourceCodeEmitter emitter = new MethodBodySourceCodeEmitter(configure).     if (restComponent != null) {         configure.addCode("\n").         configure.addCode("restConfiguration().component(\"" + restComponent + "\")").         if (restContextPath != null) {             configure.addCode(".contextPath(\"" + restContextPath + "\")").         }         if (ObjectHelper.isNotEmpty(apiContextPath)) {             configure.addCode(".apiContextPath(\"" + apiContextPath + "\")").         }         configure.addCode(".\n\n").     }     final PathVisitor<MethodSpec> restDslStatement = new PathVisitor<>(swagger.getBasePath(), emitter, filter, destinationGenerator()).     swagger.getPaths().forEach(restDslStatement::visit).     return emitter.result(). }
false;;0;3;;Instant generated() {     return generated. }
false;;0;25;;JavaFile generateSourceCode() {     final MethodSpec methodSpec = generateConfigureMethod(swagger).     final String classNameToUse = classNameGenerator.apply(swagger).     final AnnotationSpec.Builder generatedAnnotation = AnnotationSpec.builder(Generated.class).addMember("value", "$S", getClass().getName()).     if (sourceCodeTimestamps) {         generatedAnnotation.addMember("date", "$S", generated()).     }     TypeSpec.Builder builder = TypeSpec.classBuilder(classNameToUse).superclass(RouteBuilder.class).addModifiers(Modifier.PUBLIC, Modifier.FINAL).addMethod(methodSpec).addAnnotation(generatedAnnotation.build()).addJavadoc("Generated from Swagger specification by Camel REST DSL generator.\n").     if (springComponent) {         final AnnotationSpec.Builder springAnnotation = AnnotationSpec.builder(ClassName.bestGuess("org.springframework.stereotype.Component")).         builder.addAnnotation(springAnnotation.build()).     }     TypeSpec generatedRouteBuilder = builder.build().     final String packageNameToUse = packageNameGenerator.apply(swagger).     return JavaFile.builder(packageNameToUse, generatedRouteBuilder).indent(indent).build(). }
false;;1;5;;RestDslSourceCodeGenerator<T> withGeneratedTime(final Instant generated) {     this.generated = generated.     return this. }
false;static;1;21;;static String generateClassName(final Swagger swagger) {     final Info info = swagger.getInfo().     if (info == null) {         return DEFAULT_CLASS_NAME.     }     final String title = info.getTitle().     if (title == null) {         return DEFAULT_CLASS_NAME.     }     final String className = title.chars().filter(Character::isJavaIdentifierPart).filter(c -> c < 'z').boxed().collect(Collector.of(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append, StringBuilder::toString)).     if (className.isEmpty() || !Character.isJavaIdentifierStart(className.charAt(0))) {         return DEFAULT_CLASS_NAME.     }     return className. }
false;static;1;26;;static String generatePackageName(final Swagger swagger) {     final String host = swagger.getHost().     if (ObjectHelper.isNotEmpty(host)) {         final StringBuilder packageName = new StringBuilder().         final String hostWithoutPort = host.replaceFirst(":.*", "").         if ("localhost".equalsIgnoreCase(hostWithoutPort)) {             return DEFAULT_PACKAGE_NAME.         }         final String[] parts = hostWithoutPort.split("\\.").         for (int i = parts.length - 1. i >= 0. i--) {             packageName.append(parts[i]).             if (i != 0) {                 packageName.append('.').             }         }         return packageName.toString().     }     return DEFAULT_PACKAGE_NAME. }
