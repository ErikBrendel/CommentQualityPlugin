commented;modifiers;parameterAmount;loc;comment;code
false;public;0;27;;@Override public String getMessage() {     final StringBuilder sb = new StringBuilder().     switch(this.problemType) {         case DISALLOWED_TOKEN:             sb.append("The disallowed token (").append(this.unexpectedObject).append(") was found at position ").append(this.position).append(". If this is in error, try again with a parse that allows the token instead. Otherwise, fix the parsable string and try again.").             break.         case UNEXPECTED_CHARACTER:             sb.append("The unexpected character (").append(this.unexpectedObject).append(") was found at position ").append(this.position).append(". Fix the parsable string and try again.").             break.         case UNEXPECTED_TOKEN:             sb.append("The unexpected token ").append(this.unexpectedObject).append(" was found at position ").append(this.position).append(". Fix the parsable string and try again.").             break.         case UNEXPECTED_EXCEPTION:             sb.append("Please report this to the library's maintainer. The unexpected exception that should be addressed before trying again occurred at position ").append(this.position).append(": ").append(this.unexpectedObject).             break.         default:             sb.append("Please report this to the library's maintainer. An error at position ").append(this.position).append(" occurred. There are no recovery recommendations available.").             break.     }     return sb.toString(). }
true;public;0;3;/**  * @return an index of the string character the error type occurred at.  */ ;/**  * @return an index of the string character the error type occurred at.  */ public int getPosition() {     return this.position. }
true;public;0;3;/**  * @return the enumeration for how the exception occurred.  */ ;/**  * @return the enumeration for how the exception occurred.  */ public Problems getProblemType() {     return this.problemType. }
true;public;0;3;/**  * @return a representation of what caused the exception.  */ ;/**  * @return a representation of what caused the exception.  */ public Object getUnexpectedObject() {     return this.unexpectedObject. }
