commented;modifiers;parameterAmount;loc;comment;code
false;public;1;29;;@Override public boolean analyzeJar(Analyzer analyzer) {     Jar jar = analyzer.getJar().     Map<String, Map<String, Resource>> dir = jar.getDirectories().     Stream<String> components = dir.getOrDefault("META-INF/services/org/apache/camel/component", Collections.emptyMap()).keySet().stream().map(s -> s.substring(s.lastIndexOf('/') + 1)).map(s -> "osgi.service.effective:=active.objectClass=\"org.apache.camel.spi.ComponentResolver\".component=" + s).     Stream<String> languages = dir.getOrDefault("META-INF/services/org/apache/camel/language", Collections.emptyMap()).keySet().stream().map(s -> s.substring(s.lastIndexOf('/') + 1)).map(s -> "osgi.service.effective:=active.objectClass=\"org.apache.camel.spi.LanguageResolver\".language=" + s).     Stream<String> dataformats = dir.getOrDefault("META-INF/services/org/apache/camel/dataformat", Collections.emptyMap()).keySet().stream().map(s -> s.substring(s.lastIndexOf('/') + 1)).map(s -> "osgi.service.effective:=active.objectClass=\"org.apache.camel.spi.DataformatResolver\".dataformat=" + s).     String header = analyzer.getProperty("Provide-Capability").     header = Stream.concat(header != null && !header.isEmpty() ? Stream.of(header) : Stream.empty(), Stream.concat(components, Stream.concat(languages, dataformats))).collect(Collectors.joining(",")).     analyzer.setProperty("Provide-Capability", header).     return false. }
