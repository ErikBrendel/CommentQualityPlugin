# id;timestamp;commentText;codeText;commentWords;codeWords
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1447316351;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1451552536;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1451772022;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1451826606;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1451828367;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1451906534;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1465646772;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1482426817;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1484215740;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1484218856;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1487239706;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1487246249;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1487246984;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1487257826;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1487270645;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1487271305;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1489423834;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1500562101;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1506283401;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1506283402;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1506283402;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1506283403;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1518969850;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            line = line.replaceAll("\\{\\@\\w+\\s([\\w.]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1534930387;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            if (line.startsWith("**")) {_                continue__            }_            _            if (line.startsWith("*")) {_                line = line.substring(1)__                line = line.trim()__            }__            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            _            line = line.replaceAll("\\{\\@\\w+\\s#?([\\w.#(\\d,)]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,continue,if,line,starts,with,line,line,substring,1,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,d,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1547819809;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            if (line.startsWith("**")) {_                continue__            }_            _            if (line.startsWith("*")) {_                line = line.substring(1)__                line = line.trim()__            }__            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            _            line = line.replaceAll("\\{\\@\\w+\\s#?([\\w.#(\\d,)]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,continue,if,line,starts,with,line,line,substring,1,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,d,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1548703939;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            if (line.startsWith("**")) {_                continue__            }_            _            if (line.startsWith("*")) {_                line = line.substring(1)__                line = line.trim()__            }__            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            _            line = line.replaceAll("\\{\\@\\w+\\s#?([\\w.#(\\d,)]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,continue,if,line,starts,with,line,line,substring,1,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,d,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static String sanitizeDescription(String javadoc, boolean summary);1549899153;Sanitizes the javadoc to removed invalid characters so it can be used as json description__@param javadoc  the javadoc_@return the text that is valid as json;public static String sanitizeDescription(String javadoc, boolean summary) {_        if (Strings.isNullOrEmpty(javadoc)) {_            return null__        }__        _        StringBuilder sb = new StringBuilder()___        _        String[] lines = javadoc.split("\n")___        boolean first = true__        for (String line : lines) {_            line = line.trim()___            if (line.startsWith("**")) {_                continue__            }_            _            if (line.startsWith("*")) {_                line = line.substring(1)__                line = line.trim()__            }__            _            if (line.startsWith("@param") || line.startsWith("@return") || line.startsWith("@deprecated")) {_                break__            }__            _            if (line.startsWith("@")) {_                continue__            }__            _            line = line.replaceAll("<.*?>", "")___            _            _            line = line.replaceAll("\\{\\@\\w+\\s#?([\\w.#(\\d,)]+)\\}", "$1")___            _            if (!first) {_                sb.append(' ')__            }__            _            StringBuilder cb = new StringBuilder()__            for (char c : line.toCharArray()) {_                if (Character.isJavaIdentifierPart(c) || VALID_CHARS.indexOf(c) != -1) {_                    cb.append(c)__                } else if (Character.isWhitespace(c)) {_                    _                    cb.append(' ')__                }_            }__            _            String s = cb.toString().trim()__            sb.append(s)___            boolean empty = Strings.isNullOrEmpty(s)__            boolean endWithDot = s.endsWith(".")__            boolean haveText = sb.length() > 0___            if (haveText && summary && (empty || endWithDot)) {_                _                break__            }__            first = false__        }__        _        String s = sb.toString()__        s = s.replaceAll("\\s+", " ")__        return s.trim()__    };sanitizes,the,javadoc,to,removed,invalid,characters,so,it,can,be,used,as,json,description,param,javadoc,the,javadoc,return,the,text,that,is,valid,as,json;public,static,string,sanitize,description,string,javadoc,boolean,summary,if,strings,is,null,or,empty,javadoc,return,null,string,builder,sb,new,string,builder,string,lines,javadoc,split,n,boolean,first,true,for,string,line,lines,line,line,trim,if,line,starts,with,continue,if,line,starts,with,line,line,substring,1,line,line,trim,if,line,starts,with,param,line,starts,with,return,line,starts,with,deprecated,break,if,line,starts,with,continue,line,line,replace,all,line,line,replace,all,w,s,w,d,1,if,first,sb,append,string,builder,cb,new,string,builder,for,char,c,line,to,char,array,if,character,is,java,identifier,part,c,index,of,c,1,cb,append,c,else,if,character,is,whitespace,c,cb,append,string,s,cb,to,string,trim,sb,append,s,boolean,empty,strings,is,null,or,empty,s,boolean,end,with,dot,s,ends,with,boolean,have,text,sb,length,0,if,have,text,summary,empty,end,with,dot,break,first,false,string,s,sb,to,string,s,s,replace,all,s,return,s,trim
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1447316351;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1451552536;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1451772022;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1451826606;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1451828367;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1451906534;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1465646772;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1482426817;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1484215740;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1484218856;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487239706;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value == null) {_                        value = matcher.group(2)__                        _                        value = value.replaceAll("\"", "")__                        value = value.replaceAll(", ", ",")__                    }_                    if (value != null) {_                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    row.put(key, value)__                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,matcher,group,2,value,value,replace,all,value,value,replace,all,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487246249;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487246984;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487257826;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487270645;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1487271305;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1489423834;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1500562101;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<Map<String, String>>()__        if (json == null) {_            return answer__        }__        boolean found = false___        _        String[] lines = json.split("\n")__        for (String line : lines) {_            _            if (!found) {_                String s = line.trim()__                found = s.startsWith("\"" + group + "\":") && s.endsWith("{")__                continue__            }__            _            if (line.equals("  },") || line.equals("  }")) {_                break__            }__            _            line = line.replaceAll("\"\\\\\"\"", '"' + QUOT + '"')___            Map<String, String> row = new LinkedHashMap<String, String>()__            Matcher matcher = PATTERN.matcher(line)___            String key__            if (parseProperties) {_                _                key = "name"__            } else {_                key = null__            }_            while (matcher.find()) {_                if (key == null) {_                    key = matcher.group(1)__                } else {_                    String value = matcher.group(1)__                    if (value != null) {_                        _                        value = value.trim()__                        _                        value = value.replaceAll(QUOT, "\"")__                        value = decodeJson(value)__                    }_                    if (value == null) {_                        _                        value = matcher.group(2)__                        if (value != null) {_                            _                            value = value.replaceAll("\"", "")__                            value = value.replaceAll(", ", ",")__                            value = value.trim()__                        }_                    }_                    if (value == null) {_                        _                        value = matcher.group(3)__                    }_                    if (value == null) {_                        _                        value = matcher.group(4)__                    }_                    if (value != null) {_                        row.put(key, value)__                    }_                    _                    key = null__                }_            }_            if (!row.isEmpty()) {_                answer.add(row)__            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,map,string,string,if,json,null,return,answer,boolean,found,false,string,lines,json,split,n,for,string,line,lines,if,found,string,s,line,trim,found,s,starts,with,group,s,ends,with,continue,if,line,equals,line,equals,break,line,line,replace,all,quot,map,string,string,row,new,linked,hash,map,string,string,matcher,matcher,pattern,matcher,line,string,key,if,parse,properties,key,name,else,key,null,while,matcher,find,if,key,null,key,matcher,group,1,else,string,value,matcher,group,1,if,value,null,value,value,trim,value,value,replace,all,quot,value,decode,json,value,if,value,null,value,matcher,group,2,if,value,null,value,value,replace,all,value,value,replace,all,value,value,trim,if,value,null,value,matcher,group,3,if,value,null,value,matcher,group,4,if,value,null,row,put,key,value,key,null,if,row,is,empty,answer,add,row,return,answer
JsonSchemaHelper -> private static String safeDefaultValue(String value);1447316351;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1451552536;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1451772022;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1451826606;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1451828367;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1451906534;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1465646772;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1482426817;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1484215740;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1484218856;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1487239706;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1487246249;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1487246984;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1487257826;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1487270645;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1487271305;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1489423834;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1500562101;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1506283401;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1506283402;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1506283402;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1506283403;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1518969850;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1534930387;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1547819809;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1548703939;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> private static String safeDefaultValue(String value);1549899153;The default value may need to be escaped to be safe for json;private static String safeDefaultValue(String value) {_        if ("\"".equals(value)) {_            return "\\\""__        } else if ("\\".equals(value)) {_            return "\\\\"__        } else {_            return value__        }_    };the,default,value,may,need,to,be,escaped,to,be,safe,for,json;private,static,string,safe,default,value,string,value,if,equals,value,return,else,if,equals,value,return,else,return,value
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283401;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        JsonObject output = Jsoner.deserialize(json, new JsonObject())__        for (String key : output.keySet()) {_            Map row = output.getMap(key)__            if (key.equals(group)) {_                if (parseProperties) {_                    _                    for (Object obj : row.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap()__                        newRow.put("name", entry.getKey().toString())___                        Map newData = transformMap((Map) entry.getValue())__                        newRow.putAll(newData)__                        answer.add(newRow)__                    }_                } else {_                    _                    Map newData = transformMap(row)__                    for (Object obj : newData.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap<>()__                        newRow.put(entry.getKey().toString(), entry.getValue().toString())__                        answer.add(newRow)__                    }_                }_            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,json,object,output,jsoner,deserialize,json,new,json,object,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283402;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        JsonObject output = Jsoner.deserialize(json, new JsonObject())__        for (String key : output.keySet()) {_            Map row = output.getMap(key)__            if (key.equals(group)) {_                if (parseProperties) {_                    _                    for (Object obj : row.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap()__                        newRow.put("name", entry.getKey().toString())___                        Map newData = transformMap((Map) entry.getValue())__                        newRow.putAll(newData)__                        answer.add(newRow)__                    }_                } else {_                    _                    Map newData = transformMap(row)__                    for (Object obj : newData.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap<>()__                        newRow.put(entry.getKey().toString(), entry.getValue().toString())__                        answer.add(newRow)__                    }_                }_            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,json,object,output,jsoner,deserialize,json,new,json,object,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283402;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        JsonObject output = Jsoner.deserialize(json, new JsonObject())__        for (String key : output.keySet()) {_            Map row = output.getMap(key)__            if (key.equals(group)) {_                if (parseProperties) {_                    _                    for (Object obj : row.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap()__                        newRow.put("name", entry.getKey().toString())___                        Map newData = transformMap((Map) entry.getValue())__                        newRow.putAll(newData)__                        answer.add(newRow)__                    }_                } else {_                    _                    Map newData = transformMap(row)__                    for (Object obj : newData.entrySet()) {_                        Map.Entry entry = (Map.Entry) obj__                        Map<String, String> newRow = new LinkedHashMap<>()__                        newRow.put(entry.getKey().toString(), entry.getValue().toString())__                        answer.add(newRow)__                    }_                }_            }_        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,json,object,output,jsoner,deserialize,json,new,json,object,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1506283403;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1518969850;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1534930387;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1547819809;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1548703939;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JsonSchemaHelper -> @SuppressWarnings("unchecked")     public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties);1549899153;Parses the json schema to split it into a list or rows, where each row contains key value pairs with the metadata__@param group the group to parse from such as <tt>component</tt>, <tt>componentProperties</tt>, or <tt>properties</tt>._@param json the json_@return a list of all the rows, where each row is a set of key value pairs with metadata;@SuppressWarnings("unchecked")_    public static List<Map<String, String>> parseJsonSchema(String group, String json, boolean parseProperties) {_        List<Map<String, String>> answer = new ArrayList<>()__        if (json == null) {_            return answer__        }__        _        try {_            JsonObject output = (JsonObject) Jsoner.deserialize(json)__            for (String key : output.keySet()) {_                Map row = output.getMap(key)__                if (key.equals(group)) {_                    if (parseProperties) {_                        _                        for (Object obj : row.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap()__                            newRow.put("name", entry.getKey().toString())___                            Map newData = transformMap((Map) entry.getValue())__                            newRow.putAll(newData)__                            answer.add(newRow)__                        }_                    } else {_                        _                        Map newData = transformMap(row)__                        for (Object obj : newData.entrySet()) {_                            Map.Entry entry = (Map.Entry) obj__                            Map<String, String> newRow = new LinkedHashMap<>()__                            newRow.put(entry.getKey().toString(), entry.getValue().toString())__                            answer.add(newRow)__                        }_                    }_                }_            }_        } catch (Exception e) {_            _            throw new RuntimeException("Cannot parse json", e)__        }__        return answer__    };parses,the,json,schema,to,split,it,into,a,list,or,rows,where,each,row,contains,key,value,pairs,with,the,metadata,param,group,the,group,to,parse,from,such,as,tt,component,tt,tt,component,properties,tt,or,tt,properties,tt,param,json,the,json,return,a,list,of,all,the,rows,where,each,row,is,a,set,of,key,value,pairs,with,metadata;suppress,warnings,unchecked,public,static,list,map,string,string,parse,json,schema,string,group,string,json,boolean,parse,properties,list,map,string,string,answer,new,array,list,if,json,null,return,answer,try,json,object,output,json,object,jsoner,deserialize,json,for,string,key,output,key,set,map,row,output,get,map,key,if,key,equals,group,if,parse,properties,for,object,obj,row,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,name,entry,get,key,to,string,map,new,data,transform,map,map,entry,get,value,new,row,put,all,new,data,answer,add,new,row,else,map,new,data,transform,map,row,for,object,obj,new,data,entry,set,map,entry,entry,map,entry,obj,map,string,string,new,row,new,linked,hash,map,new,row,put,entry,get,key,to,string,entry,get,value,to,string,answer,add,new,row,catch,exception,e,throw,new,runtime,exception,cannot,parse,json,e,return,answer
JsonSchemaHelper -> public static String getPrimitiveType(String name);1447316351;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__            _        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name)) {_            return "boolean"__        } else if ("boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name)) {_            return "integer"__        } else if ("int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name)) {_            return "integer"__        } else if ("long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name)) {_            return "integer"__        } else if ("short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name)) {_            return "integer"__        } else if ("byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name)) {_            return "number"__        } else if ("float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name)) {_            return "number"__        } else if ("double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,return,boolean,else,if,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,return,integer,else,if,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,return,integer,else,if,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,return,integer,else,if,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,return,integer,else,if,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,return,number,else,if,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,return,number,else,if,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1451552536;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__            _        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name)) {_            return "boolean"__        } else if ("boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name)) {_            return "integer"__        } else if ("int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name)) {_            return "integer"__        } else if ("long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name)) {_            return "integer"__        } else if ("short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name)) {_            return "integer"__        } else if ("byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name)) {_            return "number"__        } else if ("float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name)) {_            return "number"__        } else if ("double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,return,boolean,else,if,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,return,integer,else,if,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,return,integer,else,if,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,return,integer,else,if,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,return,integer,else,if,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,return,number,else,if,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,return,number,else,if,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1451772022;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1451826606;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1451828367;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1451906534;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1465646772;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1482426817;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1484215740;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1484218856;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1487239706;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1487246249;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1487246984;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1487257826;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1487270645;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1487271305;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1489423834;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1500562101;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1506283401;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1506283402;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1506283402;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1506283403;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1518969850;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1534930387;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1547819809;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1548703939;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getPrimitiveType(String name);1549899153;Gets the JSon schema primitive type.__@param   name the java type_@return  the json schema primitive type, or <tt>null</tt> if not a primitive;public static String getPrimitiveType(String name) {__        _        if ("java.lang.byte[]".equals(name) || "byte[]".equals(name)) {_            return "string"__        } else if ("java.lang.Byte[]".equals(name) || "Byte[]".equals(name)) {_            return "array"__        } else if ("java.lang.Object[]".equals(name) || "Object[]".equals(name)) {_            return "array"__        } else if ("java.lang.String[]".equals(name) || "String[]".equals(name)) {_            return "array"__        } else if ("java.lang.Character".equals(name) || "Character".equals(name) || "char".equals(name)) {_            return "string"__        } else if ("java.lang.String".equals(name) || "String".equals(name)) {_            return "string"__        } else if ("java.lang.Boolean".equals(name) || "Boolean".equals(name) || "boolean".equals(name)) {_            return "boolean"__        } else if ("java.lang.Integer".equals(name) || "Integer".equals(name) || "int".equals(name)) {_            return "integer"__        } else if ("java.lang.Long".equals(name) || "Long".equals(name) || "long".equals(name)) {_            return "integer"__        } else if ("java.lang.Short".equals(name) || "Short".equals(name) || "short".equals(name)) {_            return "integer"__        } else if ("java.lang.Byte".equals(name) || "Byte".equals(name) || "byte".equals(name)) {_            return "integer"__        } else if ("java.lang.Float".equals(name) || "Float".equals(name) || "float".equals(name)) {_            return "number"__        } else if ("java.lang.Double".equals(name) || "Double".equals(name) || "double".equals(name)) {_            return "number"__        }__        return null__    };gets,the,json,schema,primitive,type,param,name,the,java,type,return,the,json,schema,primitive,type,or,tt,null,tt,if,not,a,primitive;public,static,string,get,primitive,type,string,name,if,java,lang,byte,equals,name,byte,equals,name,return,string,else,if,java,lang,byte,equals,name,byte,equals,name,return,array,else,if,java,lang,object,equals,name,object,equals,name,return,array,else,if,java,lang,string,equals,name,string,equals,name,return,array,else,if,java,lang,character,equals,name,character,equals,name,char,equals,name,return,string,else,if,java,lang,string,equals,name,string,equals,name,return,string,else,if,java,lang,boolean,equals,name,boolean,equals,name,boolean,equals,name,return,boolean,else,if,java,lang,integer,equals,name,integer,equals,name,int,equals,name,return,integer,else,if,java,lang,long,equals,name,long,equals,name,long,equals,name,return,integer,else,if,java,lang,short,equals,name,short,equals,name,short,equals,name,return,integer,else,if,java,lang,byte,equals,name,byte,equals,name,byte,equals,name,return,integer,else,if,java,lang,float,equals,name,float,equals,name,float,equals,name,return,number,else,if,java,lang,double,equals,name,double,equals,name,double,equals,name,return,number,return,null
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1447316351;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1451552536;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1451772022;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1451826606;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1451828367;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1451906534;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1465646772;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1482426817;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1484215740;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1484218856;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1487239706;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1487246249;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1487246984;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1487257826;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1487270645;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1487271305;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1489423834;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1500562101;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1506283401;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1506283402;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1506283402;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1506283403;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1518969850;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1534930387;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1547819809;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1548703939;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
JsonSchemaHelper -> public static String getType(String type, boolean enumType);1549899153;Gets the JSon schema type.__@param   type the java type_@return  the json schema type, is never null, but returns <tt>object</tt> as the generic type;public static String getType(String type, boolean enumType) {_        if (enumType) {_            return "enum"__        } else if (type == null) {_            _            return "object"__        } else if (type.equals(URI.class.getName()) || type.equals(URL.class.getName())) {_            return "string"__        } else if (type.equals(File.class.getName())) {_            return "string"__        } else if (type.equals(Date.class.getName())) {_            return "string"__        } else if (type.startsWith("java.lang.Class")) {_            return "string"__        } else if (type.startsWith("java.util.List") || type.startsWith("java.util.Collection")) {_            return "array"__        }__        String primitive = getPrimitiveType(type)__        if (primitive != null) {_            return primitive__        }__        return "object"__    };gets,the,json,schema,type,param,type,the,java,type,return,the,json,schema,type,is,never,null,but,returns,tt,object,tt,as,the,generic,type;public,static,string,get,type,string,type,boolean,enum,type,if,enum,type,return,enum,else,if,type,null,return,object,else,if,type,equals,uri,class,get,name,type,equals,url,class,get,name,return,string,else,if,type,equals,file,class,get,name,return,string,else,if,type,equals,date,class,get,name,return,string,else,if,type,starts,with,java,lang,class,return,string,else,if,type,starts,with,java,util,list,type,starts,with,java,util,collection,return,array,string,primitive,get,primitive,type,type,if,primitive,null,return,primitive,return,object
