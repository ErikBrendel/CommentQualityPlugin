# id;timestamp;commentText;codeText;commentWords;codeWords
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1392400400;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri)__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1395076208;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415211488;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415363117;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415363117;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415363118;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415363120;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415525196;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415526870;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415539283;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415545750;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415605135;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415610650;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415627472;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415627472;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415647480;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415701018;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415716914;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415780161;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415790446;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415790446;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415798237;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1415821692;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1416561667;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1416899853;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1416992440;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler);1419933398;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String scheme, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri.getPath())__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,scheme,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,get,path,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler);1366703540;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri)__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                if (out == null) {_                    out = resource.openWriter()__                }_                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,if,out,null,out,resource,open,writer,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler);1366705347;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri)__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                if (out == null) {_                    out = resource.openWriter()__                }_                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,if,out,null,out,resource,open,writer,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler);1367215208;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri)__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                if (out == null) {_                    out = resource.openWriter()__                }_                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,if,out,null,out,resource,open,writer,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler);1367215412;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri)__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                if (out == null) {_                    out = resource.openWriter()__                }_                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,if,out,null,out,resource,open,writer,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
EndpointAnnotationProcessor -> protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler);1367908622;Helper method to produce class output text file using the given handler;protected void processFile(String packageName, String fileName, Func1<PrintWriter, Void> handler) {_        PrintWriter writer = null__        try {_            Writer out = null__            Filer filer = processingEnv.getFiler()__            FileObject resource__            try {_                resource = filer.getResource(StandardLocation.CLASS_OUTPUT, packageName, fileName)__            } catch (Throwable e) {_                _                resource = filer.createResource(StandardLocation.CLASS_OUTPUT, packageName, fileName, new Element[0])__            }_            URI uri = resource.toUri()__            File file = null__            if (uri != null) {_                try {_                    file = new File(uri)__                } catch (Exception e) {_                    warning("Could not convert output directory resource URI to a file " + e)__                }_            }_            if (file == null) {_                warning("No class output directory could be found!")__            } else {_                file.getParentFile().mkdirs()__                out = new FileWriter(file)__                writer = new PrintWriter(out)__                handler.call(writer)__            }_        } catch (IOException e) {_            log(e)__        } finally {_            if (writer != null) {_                writer.close()__            }_        }_    };helper,method,to,produce,class,output,text,file,using,the,given,handler;protected,void,process,file,string,package,name,string,file,name,func1,print,writer,void,handler,print,writer,writer,null,try,writer,out,null,filer,filer,processing,env,get,filer,file,object,resource,try,resource,filer,get,resource,standard,location,package,name,file,name,catch,throwable,e,resource,filer,create,resource,standard,location,package,name,file,name,new,element,0,uri,uri,resource,to,uri,file,file,null,if,uri,null,try,file,new,file,uri,catch,exception,e,warning,could,not,convert,output,directory,resource,uri,to,a,file,e,if,file,null,warning,no,class,output,directory,could,be,found,else,file,get,parent,file,mkdirs,out,new,file,writer,file,writer,new,print,writer,out,handler,call,writer,catch,ioexception,e,log,e,finally,if,writer,null,writer,close
