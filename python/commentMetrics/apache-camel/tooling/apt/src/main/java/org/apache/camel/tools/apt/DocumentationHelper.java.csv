# id;timestamp;commentText;codeText;commentWords;codeWords
DocumentationHelper -> private static String loadText(File file) throws IOException;1547241294;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(File file) throws IOException {_        StringBuilder builder = new StringBuilder()__        Files.readAllLines(file.toPath()).forEach(line -> {_            builder.append(line)__            builder.append("\n")__        })__        return builder.toString()__    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,file,file,throws,ioexception,string,builder,builder,new,string,builder,files,read,all,lines,file,to,path,for,each,line,builder,append,line,builder,append,n,return,builder,to,string
DocumentationHelper -> private static String loadText(File file) throws IOException;1548250802;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(File file) throws IOException {_        StringBuilder builder = new StringBuilder()__        Files.readAllLines(file.toPath()).forEach(line -> {_            builder.append(line)__            builder.append("\n")__        })__        return builder.toString()__    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,file,file,throws,ioexception,string,builder,builder,new,string,builder,files,read,all,lines,file,to,path,for,each,line,builder,append,line,builder,append,n,return,builder,to,string
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434280086;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434280087;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434280088;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434288139;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434288140;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434290059;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1434290903;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1436896914;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1447316351;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1458798899;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
DocumentationHelper -> private static String loadText(InputStream in) throws IOException;1489430295;Loads the entire stream into memory as a String and returns it._<p/>_<b>Notice:</b> This implementation appends a <tt>\n</tt> as line_terminator at the of the text._<p/>_Warning, don't use for crazy big streams :);private static String loadText(InputStream in) throws IOException {_        StringBuilder builder = new StringBuilder()__        InputStreamReader isr = new InputStreamReader(in)__        try {_            BufferedReader reader = new LineNumberReader(isr)__            while (true) {_                String line = reader.readLine()__                if (line != null) {_                    builder.append(line)__                    builder.append("\n")__                } else {_                    break__                }_            }_            return builder.toString()__        } finally {_            isr.close()__            in.close()__        }_    };loads,the,entire,stream,into,memory,as,a,string,and,returns,it,p,b,notice,b,this,implementation,appends,a,tt,n,tt,as,line,terminator,at,the,of,the,text,p,warning,don,t,use,for,crazy,big,streams;private,static,string,load,text,input,stream,in,throws,ioexception,string,builder,builder,new,string,builder,input,stream,reader,isr,new,input,stream,reader,in,try,buffered,reader,reader,new,line,number,reader,isr,while,true,string,line,reader,read,line,if,line,null,builder,append,line,builder,append,n,else,break,return,builder,to,string,finally,isr,close,in,close
