commented;modifiers;parameterAmount;loc;comment;code
false;public,static;3;15;;public static String findComponentJavaDoc(String scheme, String extendsScheme, String fieldName) {     File file = jsonFile(scheme, extendsScheme).     if (file != null) {         try {             String json = loadText(file).             List<Map<String, String>> rows = parseJsonSchema("componentProperties", json, true).             return getPropertyDescription(rows, fieldName).         } catch (Exception e) {         // ignore         }     }     // not found     return null. }
false;public,static;3;15;;public static String findEndpointJavaDoc(String scheme, String extendsScheme, String fieldName) {     File file = jsonFile(scheme, extendsScheme).     if (file != null) {         try {             String json = loadText(file).             List<Map<String, String>> rows = parseJsonSchema("properties", json, true).             return getPropertyDescription(rows, fieldName).         } catch (Exception e) {         // ignore         }     }     // not found     return null. }
false;private,static;2;16;;private static String getPropertyDescription(List<Map<String, String>> rows, String name) {     for (Map<String, String> row : rows) {         String description = null.         boolean found = false.         if (row.containsKey("name")) {             found = name.equals(row.get("name")).         }         if (row.containsKey("description")) {             description = row.get("description").         }         if (found) {             return description.         }     }     return null. }
false;private,static;2;30;;private static File jsonFile(String scheme, String extendsScheme) {     if ("file".equals(extendsScheme)) {         return new File("../camel-file/target/classes/org/apache/camel/component/file/file.json").     } else if ("ahc".equals(extendsScheme)) {         return new File("../camel-ahc/target/classes/org/apache/camel/component/ahc/ahc.json").     } else if ("atom".equals(extendsScheme)) {         return new File("../camel-atom/target/classes/org/apache/camel/component/atom/atom.json").     } else if ("ftp".equals(extendsScheme)) {         return new File("../camel-ftp/target/classes/org/apache/camel/component/file/remote/ftp.json").     } else if ("jms".equals(extendsScheme)) {         return new File("../camel-jms/target/classes/org/apache/camel/component/jms/jms.json").     } else if ("sjms".equals(extendsScheme)) {         return new File("../camel-sjms/target/classes/org/apache/camel/component/sjms/sjms.json").     } else if ("http".equals(extendsScheme)) {         return new File("../camel-http/target/classes/org/apache/camel/component/http/http.json").     } else if ("https".equals(extendsScheme)) {         return new File("../camel-http/target/classes/org/apache/camel/component/http/https.json").     } else if ("netty".equals(extendsScheme)) {         return new File("../camel-netty/target/classes/org/apache/camel/component/netty/netty.json").     } else if ("netty4".equals(extendsScheme)) {         return new File("../camel-netty4/target/classes/org/apache/camel/component/netty4/netty4.json").     } else if ("servlet".equals(extendsScheme)) {         return new File("../camel-servlet/target/classes/org/apache/camel/component/servlet/servlet.json").     }     // not found     return null. }
true;private,static;1;8;/**  * Loads the entire stream into memory as a String and returns it.  * <p/>  * <b>Notice:</b> This implementation appends a <tt>\n</tt> as line  * terminator at the of the text.  * <p/>  * Warning, don't use for crazy big streams :)  */ ;/**  * Loads the entire stream into memory as a String and returns it.  * <p/>  * <b>Notice:</b> This implementation appends a <tt>\n</tt> as line  * terminator at the of the text.  * <p/>  * Warning, don't use for crazy big streams :)  */ private static String loadText(File file) throws IOException {     StringBuilder builder = new StringBuilder().     Files.readAllLines(file.toPath()).forEach(line -> {         builder.append(line).         builder.append("\n").     }).     return builder.toString(). }
